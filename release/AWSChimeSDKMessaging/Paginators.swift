// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListChannelBansOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelBansInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelBansOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelBansPaginated(input: ListChannelBansInput) -> ClientRuntime.PaginatorSequence<ListChannelBansInput, ListChannelBansOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelBansInput, ListChannelBansOutputResponse>(input: input, inputKey: \ListChannelBansInput.nextToken, outputKey: \ListChannelBansOutputResponse.nextToken, paginationFunction: self.listChannelBans(input:))
    }
}

extension ListChannelBansInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelBansInput {
        return ListChannelBansInput(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListChannelFlowsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelFlowsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelFlowsOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelFlowsPaginated(input: ListChannelFlowsInput) -> ClientRuntime.PaginatorSequence<ListChannelFlowsInput, ListChannelFlowsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelFlowsInput, ListChannelFlowsOutputResponse>(input: input, inputKey: \ListChannelFlowsInput.nextToken, outputKey: \ListChannelFlowsOutputResponse.nextToken, paginationFunction: self.listChannelFlows(input:))
    }
}

extension ListChannelFlowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelFlowsInput {
        return ListChannelFlowsInput(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListChannelMembershipsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelMembershipsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelMembershipsOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelMembershipsPaginated(input: ListChannelMembershipsInput) -> ClientRuntime.PaginatorSequence<ListChannelMembershipsInput, ListChannelMembershipsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelMembershipsInput, ListChannelMembershipsOutputResponse>(input: input, inputKey: \ListChannelMembershipsInput.nextToken, outputKey: \ListChannelMembershipsOutputResponse.nextToken, paginationFunction: self.listChannelMemberships(input:))
    }
}

extension ListChannelMembershipsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelMembershipsInput {
        return ListChannelMembershipsInput(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            subChannelId: self.subChannelId,
            type: self.type
        )}
}

/// Paginate over `[ListChannelMembershipsForAppInstanceUserOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelMembershipsForAppInstanceUserInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelMembershipsForAppInstanceUserOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelMembershipsForAppInstanceUserPaginated(input: ListChannelMembershipsForAppInstanceUserInput) -> ClientRuntime.PaginatorSequence<ListChannelMembershipsForAppInstanceUserInput, ListChannelMembershipsForAppInstanceUserOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelMembershipsForAppInstanceUserInput, ListChannelMembershipsForAppInstanceUserOutputResponse>(input: input, inputKey: \ListChannelMembershipsForAppInstanceUserInput.nextToken, outputKey: \ListChannelMembershipsForAppInstanceUserOutputResponse.nextToken, paginationFunction: self.listChannelMembershipsForAppInstanceUser(input:))
    }
}

extension ListChannelMembershipsForAppInstanceUserInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelMembershipsForAppInstanceUserInput {
        return ListChannelMembershipsForAppInstanceUserInput(
            appInstanceUserArn: self.appInstanceUserArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListChannelMessagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelMessagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelMessagesOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelMessagesPaginated(input: ListChannelMessagesInput) -> ClientRuntime.PaginatorSequence<ListChannelMessagesInput, ListChannelMessagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelMessagesInput, ListChannelMessagesOutputResponse>(input: input, inputKey: \ListChannelMessagesInput.nextToken, outputKey: \ListChannelMessagesOutputResponse.nextToken, paginationFunction: self.listChannelMessages(input:))
    }
}

extension ListChannelMessagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelMessagesInput {
        return ListChannelMessagesInput(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            notAfter: self.notAfter,
            notBefore: self.notBefore,
            sortOrder: self.sortOrder,
            subChannelId: self.subChannelId
        )}
}

/// Paginate over `[ListChannelModeratorsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelModeratorsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelModeratorsOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelModeratorsPaginated(input: ListChannelModeratorsInput) -> ClientRuntime.PaginatorSequence<ListChannelModeratorsInput, ListChannelModeratorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelModeratorsInput, ListChannelModeratorsOutputResponse>(input: input, inputKey: \ListChannelModeratorsInput.nextToken, outputKey: \ListChannelModeratorsOutputResponse.nextToken, paginationFunction: self.listChannelModerators(input:))
    }
}

extension ListChannelModeratorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelModeratorsInput {
        return ListChannelModeratorsInput(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListChannelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelsOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelsPaginated(input: ListChannelsInput) -> ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutputResponse>(input: input, inputKey: \ListChannelsInput.nextToken, outputKey: \ListChannelsOutputResponse.nextToken, paginationFunction: self.listChannels(input:))
    }
}

extension ListChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelsInput {
        return ListChannelsInput(
            appInstanceArn: self.appInstanceArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            privacy: self.privacy
        )}
}

/// Paginate over `[ListChannelsAssociatedWithChannelFlowOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelsAssociatedWithChannelFlowInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelsAssociatedWithChannelFlowOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelsAssociatedWithChannelFlowPaginated(input: ListChannelsAssociatedWithChannelFlowInput) -> ClientRuntime.PaginatorSequence<ListChannelsAssociatedWithChannelFlowInput, ListChannelsAssociatedWithChannelFlowOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelsAssociatedWithChannelFlowInput, ListChannelsAssociatedWithChannelFlowOutputResponse>(input: input, inputKey: \ListChannelsAssociatedWithChannelFlowInput.nextToken, outputKey: \ListChannelsAssociatedWithChannelFlowOutputResponse.nextToken, paginationFunction: self.listChannelsAssociatedWithChannelFlow(input:))
    }
}

extension ListChannelsAssociatedWithChannelFlowInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelsAssociatedWithChannelFlowInput {
        return ListChannelsAssociatedWithChannelFlowInput(
            channelFlowArn: self.channelFlowArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListChannelsModeratedByAppInstanceUserOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelsModeratedByAppInstanceUserInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelsModeratedByAppInstanceUserOutputResponse`
extension ChimeSdkMessagingClient {
    public func listChannelsModeratedByAppInstanceUserPaginated(input: ListChannelsModeratedByAppInstanceUserInput) -> ClientRuntime.PaginatorSequence<ListChannelsModeratedByAppInstanceUserInput, ListChannelsModeratedByAppInstanceUserOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelsModeratedByAppInstanceUserInput, ListChannelsModeratedByAppInstanceUserOutputResponse>(input: input, inputKey: \ListChannelsModeratedByAppInstanceUserInput.nextToken, outputKey: \ListChannelsModeratedByAppInstanceUserOutputResponse.nextToken, paginationFunction: self.listChannelsModeratedByAppInstanceUser(input:))
    }
}

extension ListChannelsModeratedByAppInstanceUserInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelsModeratedByAppInstanceUserInput {
        return ListChannelsModeratedByAppInstanceUserInput(
            appInstanceUserArn: self.appInstanceUserArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListSubChannelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListSubChannelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListSubChannelsOutputResponse`
extension ChimeSdkMessagingClient {
    public func listSubChannelsPaginated(input: ListSubChannelsInput) -> ClientRuntime.PaginatorSequence<ListSubChannelsInput, ListSubChannelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSubChannelsInput, ListSubChannelsOutputResponse>(input: input, inputKey: \ListSubChannelsInput.nextToken, outputKey: \ListSubChannelsOutputResponse.nextToken, paginationFunction: self.listSubChannels(input:))
    }
}

extension ListSubChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSubChannelsInput {
        return ListSubChannelsInput(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[SearchChannelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchChannelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchChannelsOutputResponse`
extension ChimeSdkMessagingClient {
    public func searchChannelsPaginated(input: SearchChannelsInput) -> ClientRuntime.PaginatorSequence<SearchChannelsInput, SearchChannelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchChannelsInput, SearchChannelsOutputResponse>(input: input, inputKey: \SearchChannelsInput.nextToken, outputKey: \SearchChannelsOutputResponse.nextToken, paginationFunction: self.searchChannels(input:))
    }
}

extension SearchChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchChannelsInput {
        return SearchChannelsInput(
            chimeBearer: self.chimeBearer,
            fields: self.fields,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
