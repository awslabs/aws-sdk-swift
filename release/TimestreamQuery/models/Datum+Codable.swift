// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Datum: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arrayValue = "ArrayValue"
        case nullValue = "NullValue"
        case rowValue = "RowValue"
        case scalarValue = "ScalarValue"
        case timeSeriesValue = "TimeSeriesValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayValue = arrayValue {
            var arrayValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .arrayValue)
            for datumlist0 in arrayValue {
                try arrayValueContainer.encode(datumlist0)
            }
        }
        if let nullValue = nullValue {
            try encodeContainer.encode(nullValue, forKey: .nullValue)
        }
        if let rowValue = rowValue {
            try encodeContainer.encode(rowValue, forKey: .rowValue)
        }
        if let scalarValue = scalarValue {
            try encodeContainer.encode(scalarValue, forKey: .scalarValue)
        }
        if let timeSeriesValue = timeSeriesValue {
            var timeSeriesValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timeSeriesValue)
            for timeseriesdatapointlist0 in timeSeriesValue {
                try timeSeriesValueContainer.encode(timeseriesdatapointlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalarValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scalarValue)
        scalarValue = scalarValueDecoded
        let timeSeriesValueContainer = try containerValues.decodeIfPresent([TimeSeriesDataPoint].self, forKey: .timeSeriesValue)
        var timeSeriesValueDecoded0:[TimeSeriesDataPoint]? = nil
        if let timeSeriesValueContainer = timeSeriesValueContainer {
            timeSeriesValueDecoded0 = [TimeSeriesDataPoint]()
            for structure0 in timeSeriesValueContainer {
                timeSeriesValueDecoded0?.append(structure0)
            }
        }
        timeSeriesValue = timeSeriesValueDecoded0
        let arrayValueContainer = try containerValues.decodeIfPresent([Datum].self, forKey: .arrayValue)
        var arrayValueDecoded0:[Datum]? = nil
        if let arrayValueContainer = arrayValueContainer {
            arrayValueDecoded0 = [Datum]()
            for structure0 in arrayValueContainer {
                arrayValueDecoded0?.append(structure0)
            }
        }
        arrayValue = arrayValueDecoded0
        let rowValueDecoded = try containerValues.decodeIfPresent(Row.self, forKey: .rowValue)
        rowValue = rowValueDecoded
        let nullValueDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .nullValue)
        nullValue = nullValueDecoded
    }
}
