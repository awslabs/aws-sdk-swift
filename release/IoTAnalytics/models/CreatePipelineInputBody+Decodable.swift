// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePipelineInputBody: Equatable {
    public let pipelineName: String?
    public let pipelineActivities: [PipelineActivity]?
    public let tags: [Tag]?
}

extension CreatePipelineInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case pipelineActivities
        case pipelineName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineActivitiesContainer = try containerValues.decodeIfPresent([PipelineActivity].self, forKey: .pipelineActivities)
        var pipelineActivitiesDecoded0:[PipelineActivity]? = nil
        if let pipelineActivitiesContainer = pipelineActivitiesContainer {
            pipelineActivitiesDecoded0 = [PipelineActivity]()
            for structure0 in pipelineActivitiesContainer {
                pipelineActivitiesDecoded0?.append(structure0)
            }
        }
        pipelineActivities = pipelineActivitiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
