// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Pipeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activities
        case arn
        case creationTime
        case lastUpdateTime
        case name
        case reprocessingSummaries
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activities = activities {
            var activitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .activities)
            for pipelineactivities0 in activities {
                try activitiesContainer.encode(pipelineactivities0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reprocessingSummaries = reprocessingSummaries {
            var reprocessingSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reprocessingSummaries)
            for reprocessingsummaries0 in reprocessingSummaries {
                try reprocessingSummariesContainer.encode(reprocessingsummaries0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let activitiesContainer = try containerValues.decodeIfPresent([PipelineActivity].self, forKey: .activities)
        var activitiesDecoded0:[PipelineActivity]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [PipelineActivity]()
            for structure0 in activitiesContainer {
                activitiesDecoded0?.append(structure0)
            }
        }
        activities = activitiesDecoded0
        let reprocessingSummariesContainer = try containerValues.decodeIfPresent([ReprocessingSummary].self, forKey: .reprocessingSummaries)
        var reprocessingSummariesDecoded0:[ReprocessingSummary]? = nil
        if let reprocessingSummariesContainer = reprocessingSummariesContainer {
            reprocessingSummariesDecoded0 = [ReprocessingSummary]()
            for structure0 in reprocessingSummariesContainer {
                reprocessingSummariesDecoded0?.append(structure0)
            }
        }
        reprocessingSummaries = reprocessingSummariesDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}
