// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineActivity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addAttributes
        case channel
        case datastore
        case deviceRegistryEnrich
        case deviceShadowEnrich
        case filter
        case lambda
        case math
        case removeAttributes
        case selectAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAttributes = addAttributes {
            try encodeContainer.encode(addAttributes, forKey: .addAttributes)
        }
        if let channel = channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let datastore = datastore {
            try encodeContainer.encode(datastore, forKey: .datastore)
        }
        if let deviceRegistryEnrich = deviceRegistryEnrich {
            try encodeContainer.encode(deviceRegistryEnrich, forKey: .deviceRegistryEnrich)
        }
        if let deviceShadowEnrich = deviceShadowEnrich {
            try encodeContainer.encode(deviceShadowEnrich, forKey: .deviceShadowEnrich)
        }
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let lambda = lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let math = math {
            try encodeContainer.encode(math, forKey: .math)
        }
        if let removeAttributes = removeAttributes {
            try encodeContainer.encode(removeAttributes, forKey: .removeAttributes)
        }
        if let selectAttributes = selectAttributes {
            try encodeContainer.encode(selectAttributes, forKey: .selectAttributes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(ChannelActivity.self, forKey: .channel)
        channel = channelDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(LambdaActivity.self, forKey: .lambda)
        lambda = lambdaDecoded
        let datastoreDecoded = try containerValues.decodeIfPresent(DatastoreActivity.self, forKey: .datastore)
        datastore = datastoreDecoded
        let addAttributesDecoded = try containerValues.decodeIfPresent(AddAttributesActivity.self, forKey: .addAttributes)
        addAttributes = addAttributesDecoded
        let removeAttributesDecoded = try containerValues.decodeIfPresent(RemoveAttributesActivity.self, forKey: .removeAttributes)
        removeAttributes = removeAttributesDecoded
        let selectAttributesDecoded = try containerValues.decodeIfPresent(SelectAttributesActivity.self, forKey: .selectAttributes)
        selectAttributes = selectAttributesDecoded
        let filterDecoded = try containerValues.decodeIfPresent(FilterActivity.self, forKey: .filter)
        filter = filterDecoded
        let mathDecoded = try containerValues.decodeIfPresent(MathActivity.self, forKey: .math)
        math = mathDecoded
        let deviceRegistryEnrichDecoded = try containerValues.decodeIfPresent(DeviceRegistryEnrichActivity.self, forKey: .deviceRegistryEnrich)
        deviceRegistryEnrich = deviceRegistryEnrichDecoded
        let deviceShadowEnrichDecoded = try containerValues.decodeIfPresent(DeviceShadowEnrichActivity.self, forKey: .deviceShadowEnrich)
        deviceShadowEnrich = deviceShadowEnrichDecoded
    }
}
