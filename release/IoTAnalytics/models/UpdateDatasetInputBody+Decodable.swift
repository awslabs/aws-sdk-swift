// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDatasetInputBody: Equatable {
    public let actions: [DatasetAction]?
    public let triggers: [DatasetTrigger]?
    public let contentDeliveryRules: [DatasetContentDeliveryRule]?
    public let retentionPeriod: RetentionPeriod?
    public let versioningConfiguration: VersioningConfiguration?
    public let lateDataRules: [LateDataRule]?
}

extension UpdateDatasetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions
        case contentDeliveryRules
        case lateDataRules
        case retentionPeriod
        case triggers
        case versioningConfiguration
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsContainer = try containerValues.decodeIfPresent([DatasetAction].self, forKey: .actions)
        var actionsDecoded0:[DatasetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [DatasetAction]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
        let triggersContainer = try containerValues.decodeIfPresent([DatasetTrigger].self, forKey: .triggers)
        var triggersDecoded0:[DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [DatasetTrigger]()
            for structure0 in triggersContainer {
                triggersDecoded0?.append(structure0)
            }
        }
        triggers = triggersDecoded0
        let contentDeliveryRulesContainer = try containerValues.decodeIfPresent([DatasetContentDeliveryRule].self, forKey: .contentDeliveryRules)
        var contentDeliveryRulesDecoded0:[DatasetContentDeliveryRule]? = nil
        if let contentDeliveryRulesContainer = contentDeliveryRulesContainer {
            contentDeliveryRulesDecoded0 = [DatasetContentDeliveryRule]()
            for structure0 in contentDeliveryRulesContainer {
                contentDeliveryRulesDecoded0?.append(structure0)
            }
        }
        contentDeliveryRules = contentDeliveryRulesDecoded0
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
        let lateDataRulesContainer = try containerValues.decodeIfPresent([LateDataRule].self, forKey: .lateDataRules)
        var lateDataRulesDecoded0:[LateDataRule]? = nil
        if let lateDataRulesContainer = lateDataRulesContainer {
            lateDataRulesDecoded0 = [LateDataRule]()
            for structure0 in lateDataRulesContainer {
                lateDataRulesDecoded0?.append(structure0)
            }
        }
        lateDataRules = lateDataRulesDecoded0
    }
}
