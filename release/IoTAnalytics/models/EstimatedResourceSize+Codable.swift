// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EstimatedResourceSize: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case estimatedOn
        case estimatedSizeInBytes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedOn = estimatedOn {
            try encodeContainer.encode(estimatedOn.timeIntervalSince1970, forKey: .estimatedOn)
        }
        if let estimatedSizeInBytes = estimatedSizeInBytes {
            try encodeContainer.encode(estimatedSizeInBytes, forKey: .estimatedSizeInBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedSizeInBytesDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .estimatedSizeInBytes)
        estimatedSizeInBytes = estimatedSizeInBytesDecoded
        let estimatedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .estimatedOn)
        estimatedOn = estimatedOnDecoded
    }
}
