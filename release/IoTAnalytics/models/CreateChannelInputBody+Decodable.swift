// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateChannelInputBody: Equatable {
    public let channelName: String?
    public let channelStorage: ChannelStorage?
    public let retentionPeriod: RetentionPeriod?
    public let tags: [Tag]?
}

extension CreateChannelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelName
        case channelStorage
        case retentionPeriod
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelStorageDecoded = try containerValues.decodeIfPresent(ChannelStorage.self, forKey: .channelStorage)
        channelStorage = channelStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
