// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatasetContentSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completionTime
        case creationTime
        case scheduleTime
        case status
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let scheduleTime = scheduleTime {
            try encodeContainer.encode(scheduleTime.timeIntervalSince1970, forKey: .scheduleTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DatasetContentStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let scheduleTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scheduleTime)
        scheduleTime = scheduleTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
    }
}
