// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Dataset: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case arn
        case contentDeliveryRules
        case creationTime
        case lastUpdateTime
        case lateDataRules
        case name
        case retentionPeriod
        case status
        case triggers
        case versioningConfiguration
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetactions0 in actions {
                try actionsContainer.encode(datasetactions0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contentDeliveryRules = contentDeliveryRules {
            var contentDeliveryRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentDeliveryRules)
            for datasetcontentdeliveryrules0 in contentDeliveryRules {
                try contentDeliveryRulesContainer.encode(datasetcontentdeliveryrules0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let lateDataRules = lateDataRules {
            var lateDataRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lateDataRules)
            for latedatarules0 in lateDataRules {
                try lateDataRulesContainer.encode(latedatarules0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let retentionPeriod = retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettriggers0 in triggers {
                try triggersContainer.encode(datasettriggers0)
            }
        }
        if let versioningConfiguration = versioningConfiguration {
            try encodeContainer.encode(versioningConfiguration, forKey: .versioningConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let actionsContainer = try containerValues.decodeIfPresent([DatasetAction].self, forKey: .actions)
        var actionsDecoded0:[DatasetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [DatasetAction]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
        let triggersContainer = try containerValues.decodeIfPresent([DatasetTrigger].self, forKey: .triggers)
        var triggersDecoded0:[DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [DatasetTrigger]()
            for structure0 in triggersContainer {
                triggersDecoded0?.append(structure0)
            }
        }
        triggers = triggersDecoded0
        let contentDeliveryRulesContainer = try containerValues.decodeIfPresent([DatasetContentDeliveryRule].self, forKey: .contentDeliveryRules)
        var contentDeliveryRulesDecoded0:[DatasetContentDeliveryRule]? = nil
        if let contentDeliveryRulesContainer = contentDeliveryRulesContainer {
            contentDeliveryRulesDecoded0 = [DatasetContentDeliveryRule]()
            for structure0 in contentDeliveryRulesContainer {
                contentDeliveryRulesDecoded0?.append(structure0)
            }
        }
        contentDeliveryRules = contentDeliveryRulesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
        let lateDataRulesContainer = try containerValues.decodeIfPresent([LateDataRule].self, forKey: .lateDataRules)
        var lateDataRulesDecoded0:[LateDataRule]? = nil
        if let lateDataRulesContainer = lateDataRulesContainer {
            lateDataRulesDecoded0 = [LateDataRule]()
            for structure0 in lateDataRulesContainer {
                lateDataRulesDecoded0?.append(structure0)
            }
        }
        lateDataRules = lateDataRulesDecoded0
    }
}
