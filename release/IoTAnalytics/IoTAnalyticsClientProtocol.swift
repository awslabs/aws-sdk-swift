// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS IoT Analytics allows you to collect large amounts of device data, process messages, and store them.
///     You can then query the data and run sophisticated analytics on it.  AWS IoT Analytics enables advanced
///     data exploration through integration with Jupyter Notebooks and data visualization through integration
///     with Amazon QuickSight.</p>
///
///          <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data
///     often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result
///     the data from these devices can have significant gaps, corrupted messages, and false readings that must be
///     cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data
///     from external sources. </p>
///
///          <p>AWS IoT Analytics automates the steps required to analyze data from IoT devices. AWS IoT Analytics
///     filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You
///     can set up the service to collect only the data you need from your devices, apply mathematical transforms
///     to process the data, and enrich the data with device-specific metadata such as device type and location
///     before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine,
///     or perform more complex analytics and machine learning inference. AWS IoT Analytics includes pre-built models
///     for common IoT use cases so you can answer questions like which devices are about to fail or which customers
///     are at risk of abandoning their wearable devices.</p>
public protocol IoTAnalyticsClientProtocol {
    /// <p>Sends messages to a channel.</p>
    func batchPutMessage(input: BatchPutMessageInput, completion: @escaping (SdkResult<BatchPutMessageOutputResponse, BatchPutMessageOutputError>) -> Void)
    /// <p>Cancels the reprocessing of data through the pipeline.</p>
    func cancelPipelineReprocessing(input: CancelPipelineReprocessingInput, completion: @escaping (SdkResult<CancelPipelineReprocessingOutputResponse, CancelPipelineReprocessingOutputError>) -> Void)
    /// <p>Creates a channel. A channel collects data from an MQTT topic and archives the raw,
    ///       unprocessed messages before publishing the data to a pipeline.</p>
    func createChannel(input: CreateChannelInput, completion: @escaping (SdkResult<CreateChannelOutputResponse, CreateChannelOutputError>) -> Void)
    /// <p>Creates a dataset. A dataset stores data retrieved from a data store by applying a
    ///         <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a
    ///       containerized application). This operation creates the skeleton of a dataset. The dataset can
    ///       be populated manually by calling <code>CreateDatasetContent</code> or automatically according
    ///       to a trigger you specify.</p>
    func createDataset(input: CreateDatasetInput, completion: @escaping (SdkResult<CreateDatasetOutputResponse, CreateDatasetOutputError>) -> Void)
    /// <p>Creates the content of a data set by applying a <code>queryAction</code> (a SQL query) or
    ///       a <code>containerAction</code> (executing a containerized application).</p>
    func createDatasetContent(input: CreateDatasetContentInput, completion: @escaping (SdkResult<CreateDatasetContentOutputResponse, CreateDatasetContentOutputError>) -> Void)
    /// <p>Creates a data store, which is a repository for messages.</p>
    func createDatastore(input: CreateDatastoreInput, completion: @escaping (SdkResult<CreateDatastoreOutputResponse, CreateDatastoreOutputError>) -> Void)
    /// <p>Creates a pipeline. A pipeline consumes messages from a channel and allows you to process
    ///       the messages before storing them in a data store. You must specify both a <code>channel</code>
    ///       and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in
    ///       the <code>pipelineActivities</code> array.</p>
    func createPipeline(input: CreatePipelineInput, completion: @escaping (SdkResult<CreatePipelineOutputResponse, CreatePipelineOutputError>) -> Void)
    /// <p>Deletes the specified channel.</p>
    func deleteChannel(input: DeleteChannelInput, completion: @escaping (SdkResult<DeleteChannelOutputResponse, DeleteChannelOutputError>) -> Void)
    /// <p>Deletes the specified dataset.</p>
    ///          <p>You do not have to delete the content of the dataset before you perform this
    ///       operation.</p>
    func deleteDataset(input: DeleteDatasetInput, completion: @escaping (SdkResult<DeleteDatasetOutputResponse, DeleteDatasetOutputError>) -> Void)
    /// <p>Deletes the content of the specified dataset.</p>
    func deleteDatasetContent(input: DeleteDatasetContentInput, completion: @escaping (SdkResult<DeleteDatasetContentOutputResponse, DeleteDatasetContentOutputError>) -> Void)
    /// <p>Deletes the specified data store.</p>
    func deleteDatastore(input: DeleteDatastoreInput, completion: @escaping (SdkResult<DeleteDatastoreOutputResponse, DeleteDatastoreOutputError>) -> Void)
    /// <p>Deletes the specified pipeline.</p>
    func deletePipeline(input: DeletePipelineInput, completion: @escaping (SdkResult<DeletePipelineOutputResponse, DeletePipelineOutputError>) -> Void)
    /// <p>Retrieves information about a channel.</p>
    func describeChannel(input: DescribeChannelInput, completion: @escaping (SdkResult<DescribeChannelOutputResponse, DescribeChannelOutputError>) -> Void)
    /// <p>Retrieves information about a dataset.</p>
    func describeDataset(input: DescribeDatasetInput, completion: @escaping (SdkResult<DescribeDatasetOutputResponse, DescribeDatasetOutputError>) -> Void)
    /// <p>Retrieves information about a data store.</p>
    func describeDatastore(input: DescribeDatastoreInput, completion: @escaping (SdkResult<DescribeDatastoreOutputResponse, DescribeDatastoreOutputError>) -> Void)
    /// <p>Retrieves the current settings of the AWS IoT Analytics logging options.</p>
    func describeLoggingOptions(input: DescribeLoggingOptionsInput, completion: @escaping (SdkResult<DescribeLoggingOptionsOutputResponse, DescribeLoggingOptionsOutputError>) -> Void)
    /// <p>Retrieves information about a pipeline.</p>
    func describePipeline(input: DescribePipelineInput, completion: @escaping (SdkResult<DescribePipelineOutputResponse, DescribePipelineOutputError>) -> Void)
    /// <p>Retrieves the contents of a data set as presigned URIs.</p>
    func getDatasetContent(input: GetDatasetContentInput, completion: @escaping (SdkResult<GetDatasetContentOutputResponse, GetDatasetContentOutputError>) -> Void)
    /// <p>Retrieves a list of channels.</p>
    func listChannels(input: ListChannelsInput, completion: @escaping (SdkResult<ListChannelsOutputResponse, ListChannelsOutputError>) -> Void)
    /// <p>Lists information about data set contents that have been created.</p>
    func listDatasetContents(input: ListDatasetContentsInput, completion: @escaping (SdkResult<ListDatasetContentsOutputResponse, ListDatasetContentsOutputError>) -> Void)
    /// <p>Retrieves information about data sets.</p>
    func listDatasets(input: ListDatasetsInput, completion: @escaping (SdkResult<ListDatasetsOutputResponse, ListDatasetsOutputError>) -> Void)
    /// <p>Retrieves a list of data stores.</p>
    func listDatastores(input: ListDatastoresInput, completion: @escaping (SdkResult<ListDatastoresOutputResponse, ListDatastoresOutputError>) -> Void)
    /// <p>Retrieves a list of pipelines.</p>
    func listPipelines(input: ListPipelinesInput, completion: @escaping (SdkResult<ListPipelinesOutputResponse, ListPipelinesOutputError>) -> Void)
    /// <p>Lists the tags (metadata) that you have assigned to the resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Sets or updates the AWS IoT Analytics logging options.</p>
    ///          <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one
    ///       minute for the change to take effect. Also, if you change the policy attached to the role you
    ///       specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it
    ///       takes up to five minutes for that change to take effect. </p>
    func putLoggingOptions(input: PutLoggingOptionsInput, completion: @escaping (SdkResult<PutLoggingOptionsOutputResponse, PutLoggingOptionsOutputError>) -> Void)
    /// <p>Simulates the results of running a pipeline activity on a message payload.</p>
    func runPipelineActivity(input: RunPipelineActivityInput, completion: @escaping (SdkResult<RunPipelineActivityOutputResponse, RunPipelineActivityOutputError>) -> Void)
    /// <p>Retrieves a sample of messages from the specified channel ingested during the specified
    ///       timeframe. Up to 10 messages can be retrieved.</p>
    func sampleChannelData(input: SampleChannelDataInput, completion: @escaping (SdkResult<SampleChannelDataOutputResponse, SampleChannelDataOutputError>) -> Void)
    /// <p>Starts the reprocessing of raw message data through the pipeline.</p>
    func startPipelineReprocessing(input: StartPipelineReprocessingInput, completion: @escaping (SdkResult<StartPipelineReprocessingOutputResponse, StartPipelineReprocessingOutputError>) -> Void)
    /// <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to
    ///       manage a resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes the given tags (metadata) from the resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the settings of a channel.</p>
    func updateChannel(input: UpdateChannelInput, completion: @escaping (SdkResult<UpdateChannelOutputResponse, UpdateChannelOutputError>) -> Void)
    /// <p>Updates the settings of a data set.</p>
    func updateDataset(input: UpdateDatasetInput, completion: @escaping (SdkResult<UpdateDatasetOutputResponse, UpdateDatasetOutputError>) -> Void)
    /// <p>Updates the settings of a data store.</p>
    func updateDatastore(input: UpdateDatastoreInput, completion: @escaping (SdkResult<UpdateDatastoreOutputResponse, UpdateDatastoreOutputError>) -> Void)
    /// <p>Updates the settings of a pipeline. You must specify both a <code>channel</code> and a
    ///         <code>datastore</code> activity and, optionally, as many as 23 additional activities in the
    ///         <code>pipelineActivities</code> array.</p>
    func updatePipeline(input: UpdatePipelineInput, completion: @escaping (SdkResult<UpdatePipelineOutputResponse, UpdatePipelineOutputError>) -> Void)
}
