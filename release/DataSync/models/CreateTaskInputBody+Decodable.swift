// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTaskInputBody: Equatable {
    public let sourceLocationArn: String?
    public let destinationLocationArn: String?
    public let cloudWatchLogGroupArn: String?
    public let name: String?
    public let options: Options?
    public let excludes: [FilterRule]?
    public let schedule: TaskSchedule?
    public let tags: [TagListEntry]?
}

extension CreateTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([FilterRule].self, forKey: .excludes)
        var excludesDecoded0:[FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [FilterRule]()
            for structure0 in excludesContainer {
                excludesDecoded0?.append(structure0)
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TagListEntry].self, forKey: .tags)
        var tagsDecoded0:[TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TagListEntry]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
