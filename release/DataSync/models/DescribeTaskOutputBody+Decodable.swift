// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTaskOutputBody: Equatable {
    public let taskArn: String?
    public let status: TaskStatus?
    public let name: String?
    public let currentTaskExecutionArn: String?
    public let sourceLocationArn: String?
    public let destinationLocationArn: String?
    public let cloudWatchLogGroupArn: String?
    public let sourceNetworkInterfaceArns: [String]?
    public let destinationNetworkInterfaceArns: [String]?
    public let options: Options?
    public let excludes: [FilterRule]?
    public let schedule: TaskSchedule?
    public let errorCode: String?
    public let errorDetail: String?
    public let creationTime: Date?
}

extension DescribeTaskOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case creationTime = "CreationTime"
        case currentTaskExecutionArn = "CurrentTaskExecutionArn"
        case destinationLocationArn = "DestinationLocationArn"
        case destinationNetworkInterfaceArns = "DestinationNetworkInterfaceArns"
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case excludes = "Excludes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case sourceNetworkInterfaceArns = "SourceNetworkInterfaceArns"
        case status = "Status"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let currentTaskExecutionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentTaskExecutionArn)
        currentTaskExecutionArn = currentTaskExecutionArnDecoded
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let sourceNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sourceNetworkInterfaceArns)
        var sourceNetworkInterfaceArnsDecoded0:[String]? = nil
        if let sourceNetworkInterfaceArnsContainer = sourceNetworkInterfaceArnsContainer {
            sourceNetworkInterfaceArnsDecoded0 = [String]()
            for string0 in sourceNetworkInterfaceArnsContainer {
                sourceNetworkInterfaceArnsDecoded0?.append(string0)
            }
        }
        sourceNetworkInterfaceArns = sourceNetworkInterfaceArnsDecoded0
        let destinationNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .destinationNetworkInterfaceArns)
        var destinationNetworkInterfaceArnsDecoded0:[String]? = nil
        if let destinationNetworkInterfaceArnsContainer = destinationNetworkInterfaceArnsContainer {
            destinationNetworkInterfaceArnsDecoded0 = [String]()
            for string0 in destinationNetworkInterfaceArnsContainer {
                destinationNetworkInterfaceArnsDecoded0?.append(string0)
            }
        }
        destinationNetworkInterfaceArns = destinationNetworkInterfaceArnsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([FilterRule].self, forKey: .excludes)
        var excludesDecoded0:[FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [FilterRule]()
            for structure0 in excludesContainer {
                excludesDecoded0?.append(structure0)
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
