// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FilterRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterType = "FilterType"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterType = filterType {
            try encodeContainer.encode(filterType.rawValue, forKey: .filterType)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterTypeDecoded = try containerValues.decodeIfPresent(FilterType.self, forKey: .filterType)
        filterType = filterTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}
