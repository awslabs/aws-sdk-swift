// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>DescribeTaskResponse</p>
public struct DescribeTaskOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to
    ///       monitor and log events in the task.</p>
    ///
    ///
    ///          <p>For more information on these groups, see Working with Log Groups and Log
    ///       Streams in the <i>Amazon CloudWatch User Guide</i>.</p>
    public let cloudWatchLogGroupArn: String?
    /// <p>The time that the task was created.</p>
    public let creationTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the task execution that is syncing files.</p>
    public let currentTaskExecutionArn: String?
    /// <p>The Amazon Resource Name (ARN) of the AWS storage resource's location.</p>
    public let destinationLocationArn: String?
    /// <p>The Amazon Resource Name (ARN) of the destination ENIs (Elastic Network Interface) that
    ///       was created for your subnet.</p>
    public let destinationNetworkInterfaceArns: [String]?
    /// <p>Errors that AWS DataSync encountered during execution of the task. You can use this
    ///       error code to help troubleshoot issues.</p>
    public let errorCode: String?
    /// <p>Detailed description of an error that was encountered during the task execution. You
    ///       can use this information to help troubleshoot issues. </p>
    public let errorDetail: String?
    /// <p>A list of filter rules that determines which files to exclude from a task. The list should
    ///       contain a single filter string that consists of the patterns to exclude. The patterns are
    ///       delimited by "|" (that is, a pipe), for example: <code>"/folder1|/folder2"</code>
    ///          </p>
    ///          <p>
    ///     </p>
    public let excludes: [FilterRule]?
    /// <p>The name of the task that was described.</p>
    public let name: String?
    /// <p>The set of configuration options that control the behavior of a single execution of the
    ///       task that occurs when you call <code>StartTaskExecution</code>. You can configure these
    ///       options to preserve metadata such as user ID (UID) and group (GID), file permissions, data
    ///       integrity verification, and so on.</p>
    ///          <p>For each individual task execution, you can override these options by specifying the
    ///       overriding <code>OverrideOptions</code> value to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a> operation. </p>
    public let options: Options?
    /// <p>The schedule used to periodically transfer files from a source to a destination location.</p>
    public let schedule: TaskSchedule?
    /// <p>The Amazon Resource Name (ARN) of the source file system's location.</p>
    public let sourceLocationArn: String?
    /// <p>The Amazon Resource Name (ARN) of the source ENIs (Elastic Network Interface) that was
    ///       created for your subnet.</p>
    public let sourceNetworkInterfaceArns: [String]?
    /// <p>The status of the task that was described.</p>
    ///
    ///
    ///          <p>For detailed information about task execution statuses, see Understanding
    ///       Task Statuses in the <i>AWS DataSync User Guide</i>.</p>
    public let status: TaskStatus?
    /// <p>The Amazon Resource Name (ARN) of the task that was described.</p>
    public let taskArn: String?

    public init (
        cloudWatchLogGroupArn: String? = nil,
        creationTime: Date? = nil,
        currentTaskExecutionArn: String? = nil,
        destinationLocationArn: String? = nil,
        destinationNetworkInterfaceArns: [String]? = nil,
        errorCode: String? = nil,
        errorDetail: String? = nil,
        excludes: [FilterRule]? = nil,
        name: String? = nil,
        options: Options? = nil,
        schedule: TaskSchedule? = nil,
        sourceLocationArn: String? = nil,
        sourceNetworkInterfaceArns: [String]? = nil,
        status: TaskStatus? = nil,
        taskArn: String? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.creationTime = creationTime
        self.currentTaskExecutionArn = currentTaskExecutionArn
        self.destinationLocationArn = destinationLocationArn
        self.destinationNetworkInterfaceArns = destinationNetworkInterfaceArns
        self.errorCode = errorCode
        self.errorDetail = errorDetail
        self.excludes = excludes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.sourceLocationArn = sourceLocationArn
        self.sourceNetworkInterfaceArns = sourceNetworkInterfaceArns
        self.status = status
        self.taskArn = taskArn
    }
}
