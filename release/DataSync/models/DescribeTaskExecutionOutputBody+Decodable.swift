// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTaskExecutionOutputBody: Equatable {
    public let taskExecutionArn: String?
    public let status: TaskExecutionStatus?
    public let options: Options?
    public let excludes: [FilterRule]?
    public let includes: [FilterRule]?
    public let startTime: Date?
    public let estimatedFilesToTransfer: Int
    public let estimatedBytesToTransfer: Int
    public let filesTransferred: Int
    public let bytesWritten: Int
    public let bytesTransferred: Int
    public let result: TaskExecutionResultDetail?
}

extension DescribeTaskExecutionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bytesTransferred = "BytesTransferred"
        case bytesWritten = "BytesWritten"
        case estimatedBytesToTransfer = "EstimatedBytesToTransfer"
        case estimatedFilesToTransfer = "EstimatedFilesToTransfer"
        case excludes = "Excludes"
        case filesTransferred = "FilesTransferred"
        case includes = "Includes"
        case options = "Options"
        case result = "Result"
        case startTime = "StartTime"
        case status = "Status"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TaskExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([FilterRule].self, forKey: .excludes)
        var excludesDecoded0:[FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [FilterRule]()
            for structure0 in excludesContainer {
                excludesDecoded0?.append(structure0)
            }
        }
        excludes = excludesDecoded0
        let includesContainer = try containerValues.decodeIfPresent([FilterRule].self, forKey: .includes)
        var includesDecoded0:[FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [FilterRule]()
            for structure0 in includesContainer {
                includesDecoded0?.append(structure0)
            }
        }
        includes = includesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let estimatedFilesToTransferDecoded = try containerValues.decode(Int.self, forKey: .estimatedFilesToTransfer)
        estimatedFilesToTransfer = estimatedFilesToTransferDecoded
        let estimatedBytesToTransferDecoded = try containerValues.decode(Int.self, forKey: .estimatedBytesToTransfer)
        estimatedBytesToTransfer = estimatedBytesToTransferDecoded
        let filesTransferredDecoded = try containerValues.decode(Int.self, forKey: .filesTransferred)
        filesTransferred = filesTransferredDecoded
        let bytesWrittenDecoded = try containerValues.decode(Int.self, forKey: .bytesWritten)
        bytesWritten = bytesWrittenDecoded
        let bytesTransferredDecoded = try containerValues.decode(Int.self, forKey: .bytesTransferred)
        bytesTransferred = bytesTransferredDecoded
        let resultDecoded = try containerValues.decodeIfPresent(TaskExecutionResultDetail.self, forKey: .result)
        result = resultDecoded
    }
}
