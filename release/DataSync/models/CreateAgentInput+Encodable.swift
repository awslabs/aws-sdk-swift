// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAgentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationKey = activationKey {
            try encodeContainer.encode(activationKey, forKey: .activationKey)
        }
        if let agentName = agentName {
            try encodeContainer.encode(agentName, forKey: .agentName)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for plsecuritygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(plsecuritygrouparnlist0)
            }
        }
        if let subnetArns = subnetArns {
            var subnetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetArns)
            for plsubnetarnlist0 in subnetArns {
                try subnetArnsContainer.encode(plsubnetarnlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }
}
