// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Options: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case atime = "Atime"
        case bytesPerSecond = "BytesPerSecond"
        case gid = "Gid"
        case logLevel = "LogLevel"
        case mtime = "Mtime"
        case overwriteMode = "OverwriteMode"
        case posixPermissions = "PosixPermissions"
        case preserveDeletedFiles = "PreserveDeletedFiles"
        case preserveDevices = "PreserveDevices"
        case securityDescriptorCopyFlags = "SecurityDescriptorCopyFlags"
        case taskQueueing = "TaskQueueing"
        case transferMode = "TransferMode"
        case uid = "Uid"
        case verifyMode = "VerifyMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let atime = atime {
            try encodeContainer.encode(atime.rawValue, forKey: .atime)
        }
        if let bytesPerSecond = bytesPerSecond {
            try encodeContainer.encode(bytesPerSecond, forKey: .bytesPerSecond)
        }
        if let gid = gid {
            try encodeContainer.encode(gid.rawValue, forKey: .gid)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let mtime = mtime {
            try encodeContainer.encode(mtime.rawValue, forKey: .mtime)
        }
        if let overwriteMode = overwriteMode {
            try encodeContainer.encode(overwriteMode.rawValue, forKey: .overwriteMode)
        }
        if let posixPermissions = posixPermissions {
            try encodeContainer.encode(posixPermissions.rawValue, forKey: .posixPermissions)
        }
        if let preserveDeletedFiles = preserveDeletedFiles {
            try encodeContainer.encode(preserveDeletedFiles.rawValue, forKey: .preserveDeletedFiles)
        }
        if let preserveDevices = preserveDevices {
            try encodeContainer.encode(preserveDevices.rawValue, forKey: .preserveDevices)
        }
        if let securityDescriptorCopyFlags = securityDescriptorCopyFlags {
            try encodeContainer.encode(securityDescriptorCopyFlags.rawValue, forKey: .securityDescriptorCopyFlags)
        }
        if let taskQueueing = taskQueueing {
            try encodeContainer.encode(taskQueueing.rawValue, forKey: .taskQueueing)
        }
        if let transferMode = transferMode {
            try encodeContainer.encode(transferMode.rawValue, forKey: .transferMode)
        }
        if let uid = uid {
            try encodeContainer.encode(uid.rawValue, forKey: .uid)
        }
        if let verifyMode = verifyMode {
            try encodeContainer.encode(verifyMode.rawValue, forKey: .verifyMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifyModeDecoded = try containerValues.decodeIfPresent(VerifyMode.self, forKey: .verifyMode)
        verifyMode = verifyModeDecoded
        let overwriteModeDecoded = try containerValues.decodeIfPresent(OverwriteMode.self, forKey: .overwriteMode)
        overwriteMode = overwriteModeDecoded
        let atimeDecoded = try containerValues.decodeIfPresent(Atime.self, forKey: .atime)
        atime = atimeDecoded
        let mtimeDecoded = try containerValues.decodeIfPresent(Mtime.self, forKey: .mtime)
        mtime = mtimeDecoded
        let uidDecoded = try containerValues.decodeIfPresent(Uid.self, forKey: .uid)
        uid = uidDecoded
        let gidDecoded = try containerValues.decodeIfPresent(Gid.self, forKey: .gid)
        gid = gidDecoded
        let preserveDeletedFilesDecoded = try containerValues.decodeIfPresent(PreserveDeletedFiles.self, forKey: .preserveDeletedFiles)
        preserveDeletedFiles = preserveDeletedFilesDecoded
        let preserveDevicesDecoded = try containerValues.decodeIfPresent(PreserveDevices.self, forKey: .preserveDevices)
        preserveDevices = preserveDevicesDecoded
        let posixPermissionsDecoded = try containerValues.decodeIfPresent(PosixPermissions.self, forKey: .posixPermissions)
        posixPermissions = posixPermissionsDecoded
        let bytesPerSecondDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .bytesPerSecond)
        bytesPerSecond = bytesPerSecondDecoded
        let taskQueueingDecoded = try containerValues.decodeIfPresent(TaskQueueing.self, forKey: .taskQueueing)
        taskQueueing = taskQueueingDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let transferModeDecoded = try containerValues.decodeIfPresent(TransferMode.self, forKey: .transferMode)
        transferMode = transferModeDecoded
        let securityDescriptorCopyFlagsDecoded = try containerValues.decodeIfPresent(SmbSecurityDescriptorCopyFlags.self, forKey: .securityDescriptorCopyFlags)
        securityDescriptorCopyFlags = securityDescriptorCopyFlagsDecoded
    }
}
