// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLocationFsxWindowsInputBody: Equatable {
    public let subdirectory: String?
    public let fsxFilesystemArn: String?
    public let securityGroupArns: [String]?
    public let tags: [TagListEntry]?
    public let user: String?
    public let domain: String?
    public let password: String?
}

extension CreateLocationFsxWindowsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [String]()
            for string0 in securityGroupArnsContainer {
                securityGroupArnsDecoded0?.append(string0)
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([TagListEntry].self, forKey: .tags)
        var tagsDecoded0:[TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TagListEntry]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
    }
}
