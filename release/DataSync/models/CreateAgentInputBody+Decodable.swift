// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAgentInputBody: Equatable {
    public let activationKey: String?
    public let agentName: String?
    public let tags: [TagListEntry]?
    public let vpcEndpointId: String?
    public let subnetArns: [String]?
    public let securityGroupArns: [String]?
}

extension CreateAgentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activationKey)
        activationKey = activationKeyDecoded
        let agentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .agentName)
        agentName = agentNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TagListEntry].self, forKey: .tags)
        var tagsDecoded0:[TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TagListEntry]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [String]()
            for string0 in subnetArnsContainer {
                subnetArnsDecoded0?.append(string0)
            }
        }
        subnetArns = subnetArnsDecoded0
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [String]()
            for string0 in securityGroupArnsContainer {
                securityGroupArnsDecoded0?.append(string0)
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}
