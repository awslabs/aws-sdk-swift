// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaskExecutionResultDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case prepareDuration = "PrepareDuration"
        case prepareStatus = "PrepareStatus"
        case totalDuration = "TotalDuration"
        case transferDuration = "TransferDuration"
        case transferStatus = "TransferStatus"
        case verifyDuration = "VerifyDuration"
        case verifyStatus = "VerifyStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let prepareDuration = prepareDuration {
            try encodeContainer.encode(prepareDuration, forKey: .prepareDuration)
        }
        if let prepareStatus = prepareStatus {
            try encodeContainer.encode(prepareStatus.rawValue, forKey: .prepareStatus)
        }
        if let totalDuration = totalDuration {
            try encodeContainer.encode(totalDuration, forKey: .totalDuration)
        }
        if let transferDuration = transferDuration {
            try encodeContainer.encode(transferDuration, forKey: .transferDuration)
        }
        if let transferStatus = transferStatus {
            try encodeContainer.encode(transferStatus.rawValue, forKey: .transferStatus)
        }
        if let verifyDuration = verifyDuration {
            try encodeContainer.encode(verifyDuration, forKey: .verifyDuration)
        }
        if let verifyStatus = verifyStatus {
            try encodeContainer.encode(verifyStatus.rawValue, forKey: .verifyStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prepareDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .prepareDuration)
        prepareDuration = prepareDurationDecoded
        let prepareStatusDecoded = try containerValues.decodeIfPresent(PhaseStatus.self, forKey: .prepareStatus)
        prepareStatus = prepareStatusDecoded
        let totalDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalDuration)
        totalDuration = totalDurationDecoded
        let transferDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .transferDuration)
        transferDuration = transferDurationDecoded
        let transferStatusDecoded = try containerValues.decodeIfPresent(PhaseStatus.self, forKey: .transferStatus)
        transferStatus = transferStatusDecoded
        let verifyDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .verifyDuration)
        verifyDuration = verifyDurationDecoded
        let verifyStatusDecoded = try containerValues.decodeIfPresent(PhaseStatus.self, forKey: .verifyStatus)
        verifyStatus = verifyStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}
