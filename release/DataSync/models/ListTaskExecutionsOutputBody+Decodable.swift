// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTaskExecutionsOutputBody: Equatable {
    public let taskExecutions: [TaskExecutionListEntry]?
    public let nextToken: String?
}

extension ListTaskExecutionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case taskExecutions = "TaskExecutions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionsContainer = try containerValues.decodeIfPresent([TaskExecutionListEntry].self, forKey: .taskExecutions)
        var taskExecutionsDecoded0:[TaskExecutionListEntry]? = nil
        if let taskExecutionsContainer = taskExecutionsContainer {
            taskExecutionsDecoded0 = [TaskExecutionListEntry]()
            for structure0 in taskExecutionsContainer {
                taskExecutionsDecoded0?.append(structure0)
            }
        }
        taskExecutions = taskExecutionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
