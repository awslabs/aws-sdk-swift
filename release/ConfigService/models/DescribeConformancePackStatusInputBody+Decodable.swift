// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConformancePackStatusInputBody: Equatable {
    public let conformancePackNames: [String]?
    public let limit: Int
    public let nextToken: String?
}

extension DescribeConformancePackStatusInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .conformancePackNames)
        var conformancePackNamesDecoded0:[String]? = nil
        if let conformancePackNamesContainer = conformancePackNamesContainer {
            conformancePackNamesDecoded0 = [String]()
            for string0 in conformancePackNamesContainer {
                conformancePackNamesDecoded0?.append(string0)
            }
        }
        conformancePackNames = conformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
