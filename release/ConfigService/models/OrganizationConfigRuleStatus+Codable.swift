// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrganizationConfigRuleStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
        case organizationRuleStatus = "OrganizationRuleStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
        if let organizationRuleStatus = organizationRuleStatus {
            try encodeContainer.encode(organizationRuleStatus.rawValue, forKey: .organizationRuleStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
        let organizationRuleStatusDecoded = try containerValues.decodeIfPresent(OrganizationRuleStatus.self, forKey: .organizationRuleStatus)
        organizationRuleStatus = organizationRuleStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}
