// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Compliance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case complianceContributorCount = "ComplianceContributorCount"
        case complianceType = "ComplianceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceContributorCount = complianceContributorCount {
            try encodeContainer.encode(complianceContributorCount, forKey: .complianceContributorCount)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let complianceContributorCountDecoded = try containerValues.decodeIfPresent(ComplianceContributorCount.self, forKey: .complianceContributorCount)
        complianceContributorCount = complianceContributorCountDecoded
    }
}
