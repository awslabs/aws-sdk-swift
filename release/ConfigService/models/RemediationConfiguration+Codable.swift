// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RemediationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case automatic = "Automatic"
        case configRuleName = "ConfigRuleName"
        case createdByService = "CreatedByService"
        case executionControls = "ExecutionControls"
        case maximumAutomaticAttempts = "MaximumAutomaticAttempts"
        case parameters = "Parameters"
        case resourceType = "ResourceType"
        case retryAttemptSeconds = "RetryAttemptSeconds"
        case targetId = "TargetId"
        case targetType = "TargetType"
        case targetVersion = "TargetVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if automatic != false {
            try encodeContainer.encode(automatic, forKey: .automatic)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let createdByService = createdByService {
            try encodeContainer.encode(createdByService, forKey: .createdByService)
        }
        if let executionControls = executionControls {
            try encodeContainer.encode(executionControls, forKey: .executionControls)
        }
        if let maximumAutomaticAttempts = maximumAutomaticAttempts {
            try encodeContainer.encode(maximumAutomaticAttempts, forKey: .maximumAutomaticAttempts)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, remediationparameters0) in parameters {
                try parametersContainer.encode(remediationparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let retryAttemptSeconds = retryAttemptSeconds {
            try encodeContainer.encode(retryAttemptSeconds, forKey: .retryAttemptSeconds)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let targetType = targetType {
            try encodeContainer.encode(targetType.rawValue, forKey: .targetType)
        }
        if let targetVersion = targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(RemediationTargetType.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:RemediationParameterValue].self, forKey: .parameters)
        var parametersDecoded0: [String:RemediationParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:RemediationParameterValue]()
            for (key0, remediationparametervalue0) in parametersContainer {
                parametersDecoded0?[key0] = remediationparametervalue0
            }
        }
        parameters = parametersDecoded0
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let automaticDecoded = try containerValues.decode(Bool.self, forKey: .automatic)
        automatic = automaticDecoded
        let executionControlsDecoded = try containerValues.decodeIfPresent(ExecutionControls.self, forKey: .executionControls)
        executionControls = executionControlsDecoded
        let maximumAutomaticAttemptsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumAutomaticAttempts)
        maximumAutomaticAttempts = maximumAutomaticAttemptsDecoded
        let retryAttemptSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retryAttemptSeconds)
        retryAttemptSeconds = retryAttemptSecondsDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdByServiceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByService)
        createdByService = createdByServiceDecoded
    }
}
