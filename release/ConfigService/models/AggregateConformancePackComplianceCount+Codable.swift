// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AggregateConformancePackComplianceCount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case compliantConformancePackCount = "CompliantConformancePackCount"
        case nonCompliantConformancePackCount = "NonCompliantConformancePackCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if compliantConformancePackCount != 0 {
            try encodeContainer.encode(compliantConformancePackCount, forKey: .compliantConformancePackCount)
        }
        if nonCompliantConformancePackCount != 0 {
            try encodeContainer.encode(nonCompliantConformancePackCount, forKey: .nonCompliantConformancePackCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compliantConformancePackCountDecoded = try containerValues.decode(Int.self, forKey: .compliantConformancePackCount)
        compliantConformancePackCount = compliantConformancePackCountDecoded
        let nonCompliantConformancePackCountDecoded = try containerValues.decode(Int.self, forKey: .nonCompliantConformancePackCount)
        nonCompliantConformancePackCount = nonCompliantConformancePackCountDecoded
    }
}
