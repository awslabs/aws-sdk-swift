// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetAggregateComplianceDetailsByConfigRuleInput: Equatable {
    /// <p>The 12-digit account ID of the source account.</p>
    public let accountId: String?
    /// <p>The source region from where the data is aggregated.</p>
    public let awsRegion: String?
    /// <p>The resource compliance status.</p>
    /// 		       <note>
    /// 			         <p>For the
    /// 					<code>GetAggregateComplianceDetailsByConfigRuleRequest</code>
    /// 				data type, AWS Config supports only the <code>COMPLIANT</code>
    /// 				and <code>NON_COMPLIANT</code>. AWS Config does not support the
    /// 					<code>NOT_APPLICABLE</code> and
    /// 					<code>INSUFFICIENT_DATA</code> values.</p>
    /// 		       </note>
    public let complianceType: ComplianceType?
    /// <p>The name of the AWS Config rule for which you want compliance
    /// 			information.</p>
    public let configRuleName: String?
    /// <p>The name of the configuration aggregator.</p>
    public let configurationAggregatorName: String?
    /// <p>The maximum number of evaluation results returned on each page.
    /// 			The default is 50. You cannot specify a number greater than 100. If
    /// 			you specify 0, AWS Config uses the default.</p>
    public let limit: Int
    /// <p>The <code>nextToken</code> string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.</p>
    public let nextToken: String?

    public init (
        accountId: String? = nil,
        awsRegion: String? = nil,
        complianceType: ComplianceType? = nil,
        configRuleName: String? = nil,
        configurationAggregatorName: String? = nil,
        limit: Int = 0,
        nextToken: String? = nil
    )
    {
        self.accountId = accountId
        self.awsRegion = awsRegion
        self.complianceType = complianceType
        self.configRuleName = configRuleName
        self.configurationAggregatorName = configurationAggregatorName
        self.limit = limit
        self.nextToken = nextToken
    }
}
