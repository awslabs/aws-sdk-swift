// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateConformancePackComplianceSummaryOutputBody: Equatable {
    public let aggregateConformancePackComplianceSummaries: [AggregateConformancePackComplianceSummary]?
    public let groupByKey: String?
    public let nextToken: String?
}

extension GetAggregateConformancePackComplianceSummaryOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aggregateConformancePackComplianceSummaries = "AggregateConformancePackComplianceSummaries"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateConformancePackComplianceSummariesContainer = try containerValues.decodeIfPresent([AggregateConformancePackComplianceSummary].self, forKey: .aggregateConformancePackComplianceSummaries)
        var aggregateConformancePackComplianceSummariesDecoded0:[AggregateConformancePackComplianceSummary]? = nil
        if let aggregateConformancePackComplianceSummariesContainer = aggregateConformancePackComplianceSummariesContainer {
            aggregateConformancePackComplianceSummariesDecoded0 = [AggregateConformancePackComplianceSummary]()
            for structure0 in aggregateConformancePackComplianceSummariesContainer {
                aggregateConformancePackComplianceSummariesDecoded0?.append(structure0)
            }
        }
        aggregateConformancePackComplianceSummaries = aggregateConformancePackComplianceSummariesDecoded0
        let groupByKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
