// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationAggregatorSourcesStatusInputBody: Equatable {
    public let configurationAggregatorName: String?
    public let updateStatus: [AggregatedSourceStatusType]?
    public let nextToken: String?
    public let limit: Int
}

extension DescribeConfigurationAggregatorSourcesStatusInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let updateStatusContainer = try containerValues.decodeIfPresent([AggregatedSourceStatusType].self, forKey: .updateStatus)
        var updateStatusDecoded0:[AggregatedSourceStatusType]? = nil
        if let updateStatusContainer = updateStatusContainer {
            updateStatusDecoded0 = [AggregatedSourceStatusType]()
            for string0 in updateStatusContainer {
                updateStatusDecoded0?.append(string0)
            }
        }
        updateStatus = updateStatusDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
