// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateConfigRuleComplianceSummaryOutputBody: Equatable {
    public let groupByKey: String?
    public let aggregateComplianceCounts: [AggregateComplianceCount]?
    public let nextToken: String?
}

extension GetAggregateConfigRuleComplianceSummaryOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aggregateComplianceCounts = "AggregateComplianceCounts"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupByKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let aggregateComplianceCountsContainer = try containerValues.decodeIfPresent([AggregateComplianceCount].self, forKey: .aggregateComplianceCounts)
        var aggregateComplianceCountsDecoded0:[AggregateComplianceCount]? = nil
        if let aggregateComplianceCountsContainer = aggregateComplianceCountsContainer {
            aggregateComplianceCountsDecoded0 = [AggregateComplianceCount]()
            for structure0 in aggregateComplianceCountsContainer {
                aggregateComplianceCountsDecoded0?.append(structure0)
            }
        }
        aggregateComplianceCounts = aggregateComplianceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
