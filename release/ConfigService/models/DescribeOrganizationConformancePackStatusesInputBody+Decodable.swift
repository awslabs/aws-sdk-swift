// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeOrganizationConformancePackStatusesInputBody: Equatable {
    public let organizationConformancePackNames: [String]?
    public let limit: Int
    public let nextToken: String?
}

extension DescribeOrganizationConformancePackStatusesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackNames = "OrganizationConformancePackNames"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .organizationConformancePackNames)
        var organizationConformancePackNamesDecoded0:[String]? = nil
        if let organizationConformancePackNamesContainer = organizationConformancePackNamesContainer {
            organizationConformancePackNamesDecoded0 = [String]()
            for string0 in organizationConformancePackNamesContainer {
                organizationConformancePackNamesDecoded0?.append(string0)
            }
        }
        organizationConformancePackNames = organizationConformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
