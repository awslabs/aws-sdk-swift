// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object that specifies organization custom rule metadata such as resource type, resource ID of AWS resource, Lamdba function ARN,
/// 			and organization trigger types that trigger AWS Config to evaluate your AWS resources against a rule.
/// 			It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.</p>
public struct OrganizationCustomRuleMetadata: Equatable {
    /// <p>The description that you provide for organization config rule.</p>
    public let description: String?
    /// <p>A string, in JSON format, that is passed to organization config rule Lambda function.</p>
    public let inputParameters: String?
    /// <p>The lambda function ARN.</p>
    public let lambdaFunctionArn: String?
    /// <p>The maximum frequency with which AWS Config runs evaluations for a rule.
    /// 			Your custom rule is triggered when AWS Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
    /// 		       <note>
    ///             <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
    /// 			value for the <code>MaximumExecutionFrequency</code> parameter.</p>
    ///          </note>
    public let maximumExecutionFrequency: MaximumExecutionFrequency?
    /// <p>The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:</p>
    /// 		
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation when AWS Config delivers an oversized configuration item.
    /// 			         	AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ScheduledNotification</code> - Triggers a periodic evaluation at the frequency specified for <code>MaximumExecutionFrequency</code>.</p>
    ///             </li>
    ///          </ul>
    public let organizationConfigRuleTriggerTypes: [OrganizationConfigRuleTriggerType]?
    /// <p>The ID of the AWS resource that was evaluated.</p>
    public let resourceIdScope: String?
    /// <p>The type of the AWS resource that was evaluated.</p>
    public let resourceTypesScope: [String]?
    /// <p>One part of a key-value pair that make up a tag.
    /// 			A key is a general label that acts like a category for more specific tag values. </p>
    public let tagKeyScope: String?
    /// <p>The optional part of a key-value pair that make up a tag.
    /// 			A value acts as a descriptor within a tag category (key). </p>
    public let tagValueScope: String?

    public init (
        description: String? = nil,
        inputParameters: String? = nil,
        lambdaFunctionArn: String? = nil,
        maximumExecutionFrequency: MaximumExecutionFrequency? = nil,
        organizationConfigRuleTriggerTypes: [OrganizationConfigRuleTriggerType]? = nil,
        resourceIdScope: String? = nil,
        resourceTypesScope: [String]? = nil,
        tagKeyScope: String? = nil,
        tagValueScope: String? = nil
    )
    {
        self.description = description
        self.inputParameters = inputParameters
        self.lambdaFunctionArn = lambdaFunctionArn
        self.maximumExecutionFrequency = maximumExecutionFrequency
        self.organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypes
        self.resourceIdScope = resourceIdScope
        self.resourceTypesScope = resourceTypesScope
        self.tagKeyScope = tagKeyScope
        self.tagValueScope = tagValueScope
    }
}
