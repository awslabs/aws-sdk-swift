// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object that specifies organization managed rule metadata such as resource type and ID of AWS resource along with the rule identifier.
/// 			It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.</p>
public struct OrganizationManagedRuleMetadata: Equatable {
    /// <p>The description that you provide for organization config rule.</p>
    public let description: String?
    /// <p>A string, in JSON format, that is passed to organization config rule Lambda function.</p>
    public let inputParameters: String?
    /// <p>The maximum frequency with which AWS Config runs evaluations for a rule. You are using an AWS managed rule that is triggered at a periodic frequency.</p>
    /// 		       <note>
    ///             <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
    /// 			value for the <code>MaximumExecutionFrequency</code> parameter.</p>
    ///          </note>
    public let maximumExecutionFrequency: MaximumExecutionFrequency?
    /// <p>The ID of the AWS resource that was evaluated.</p>
    public let resourceIdScope: String?
    /// <p>The type of the AWS resource that was evaluated.</p>
    public let resourceTypesScope: [String]?
    /// <p>For organization config managed rules, a predefined identifier from a
    /// 			list. For example, <code>IAM_PASSWORD_POLICY</code> is a managed
    /// 			rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using AWS Managed Config Rules</a>.</p>
    public let ruleIdentifier: String?
    /// <p>One part of a key-value pair that make up a tag.
    /// 			A key is a general label that acts like a category for more specific tag values. </p>
    public let tagKeyScope: String?
    /// <p>The optional part of a key-value pair that make up a tag.
    /// 			A value acts as a descriptor within a tag category (key).</p>
    public let tagValueScope: String?

    public init (
        description: String? = nil,
        inputParameters: String? = nil,
        maximumExecutionFrequency: MaximumExecutionFrequency? = nil,
        resourceIdScope: String? = nil,
        resourceTypesScope: [String]? = nil,
        ruleIdentifier: String? = nil,
        tagKeyScope: String? = nil,
        tagValueScope: String? = nil
    )
    {
        self.description = description
        self.inputParameters = inputParameters
        self.maximumExecutionFrequency = maximumExecutionFrequency
        self.resourceIdScope = resourceIdScope
        self.resourceTypesScope = resourceTypesScope
        self.ruleIdentifier = ruleIdentifier
        self.tagKeyScope = tagKeyScope
        self.tagValueScope = tagValueScope
    }
}
