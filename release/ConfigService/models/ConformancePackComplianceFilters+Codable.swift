// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConformancePackComplianceFilters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case complianceType = "ComplianceType"
        case configRuleNames = "ConfigRuleNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for conformancepackconfigrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(conformancepackconfigrulenames0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [String]()
            for string0 in configRuleNamesContainer {
                configRuleNamesDecoded0?.append(string0)
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
    }
}
