// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutResourceConfigInputBody: Equatable {
    public let resourceType: String?
    public let schemaVersionId: String?
    public let resourceId: String?
    public let resourceName: String?
    public let configuration: String?
    public let tags: [String:String]?
}

extension PutResourceConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
        case resourceId = "ResourceId"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case schemaVersionId = "SchemaVersionId"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configuration)
        configuration = configurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, value0) in tagsContainer {
                tagsDecoded0?[key0] = value0
            }
        }
        tags = tagsDecoded0
    }
}
