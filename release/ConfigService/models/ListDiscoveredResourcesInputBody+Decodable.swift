// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDiscoveredResourcesInputBody: Equatable {
    public let resourceType: ResourceType?
    public let resourceIds: [String]?
    public let resourceName: String?
    public let limit: Int
    public let includeDeletedResources: Bool
    public let nextToken: String?
}

extension ListDiscoveredResourcesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case includeDeletedResources
        case limit
        case nextToken
        case resourceIds
        case resourceName
        case resourceType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [String]()
            for string0 in resourceIdsContainer {
                resourceIdsDecoded0?.append(string0)
            }
        }
        resourceIds = resourceIdsDecoded0
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
        let includeDeletedResourcesDecoded = try containerValues.decode(Bool.self, forKey: .includeDeletedResources)
        includeDeletedResources = includeDeletedResourcesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
