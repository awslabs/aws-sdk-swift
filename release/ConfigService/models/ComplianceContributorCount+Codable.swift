// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComplianceContributorCount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capExceeded = "CapExceeded"
        case cappedCount = "CappedCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if capExceeded != false {
            try encodeContainer.encode(capExceeded, forKey: .capExceeded)
        }
        if cappedCount != 0 {
            try encodeContainer.encode(cappedCount, forKey: .cappedCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cappedCountDecoded = try containerValues.decode(Int.self, forKey: .cappedCount)
        cappedCount = cappedCountDecoded
        let capExceededDecoded = try containerValues.decode(Bool.self, forKey: .capExceeded)
        capExceeded = capExceededDecoded
    }
}
