// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConformancePackDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conformancePackArn = "ConformancePackArn"
        case conformancePackId = "ConformancePackId"
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case conformancePackName = "ConformancePackName"
        case createdBy = "CreatedBy"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case lastUpdateRequestedTime = "LastUpdateRequestedTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackArn = conformancePackArn {
            try encodeContainer.encode(conformancePackArn, forKey: .conformancePackArn)
        }
        if let conformancePackId = conformancePackId {
            try encodeContainer.encode(conformancePackId, forKey: .conformancePackId)
        }
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let lastUpdateRequestedTime = lastUpdateRequestedTime {
            try encodeContainer.encode(lastUpdateRequestedTime.timeIntervalSince1970, forKey: .lastUpdateRequestedTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackArn)
        conformancePackArn = conformancePackArnDecoded
        let conformancePackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackId)
        conformancePackId = conformancePackIdDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConformancePackInputParameter].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                conformancePackInputParametersDecoded0?.append(structure0)
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
        let lastUpdateRequestedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateRequestedTime)
        lastUpdateRequestedTime = lastUpdateRequestedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
