// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Evaluation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case annotation = "Annotation"
        case complianceResourceId = "ComplianceResourceId"
        case complianceResourceType = "ComplianceResourceType"
        case complianceType = "ComplianceType"
        case orderingTimestamp = "OrderingTimestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceResourceId = complianceResourceId {
            try encodeContainer.encode(complianceResourceId, forKey: .complianceResourceId)
        }
        if let complianceResourceType = complianceResourceType {
            try encodeContainer.encode(complianceResourceType, forKey: .complianceResourceType)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let orderingTimestamp = orderingTimestamp {
            try encodeContainer.encode(orderingTimestamp.timeIntervalSince1970, forKey: .orderingTimestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceResourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .complianceResourceType)
        complianceResourceType = complianceResourceTypeDecoded
        let complianceResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .complianceResourceId)
        complianceResourceId = complianceResourceIdDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .annotation)
        annotation = annotationDecoded
        let orderingTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .orderingTimestamp)
        orderingTimestamp = orderingTimestampDecoded
    }
}
