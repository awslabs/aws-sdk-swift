// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConformancePackComplianceOutputBody: Equatable {
    public let conformancePackName: String?
    public let conformancePackRuleComplianceList: [ConformancePackRuleCompliance]?
    public let nextToken: String?
}

extension DescribeConformancePackComplianceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conformancePackName = "ConformancePackName"
        case conformancePackRuleComplianceList = "ConformancePackRuleComplianceList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackRuleComplianceListContainer = try containerValues.decodeIfPresent([ConformancePackRuleCompliance].self, forKey: .conformancePackRuleComplianceList)
        var conformancePackRuleComplianceListDecoded0:[ConformancePackRuleCompliance]? = nil
        if let conformancePackRuleComplianceListContainer = conformancePackRuleComplianceListContainer {
            conformancePackRuleComplianceListDecoded0 = [ConformancePackRuleCompliance]()
            for structure0 in conformancePackRuleComplianceListContainer {
                conformancePackRuleComplianceListDecoded0?.append(structure0)
            }
        }
        conformancePackRuleComplianceList = conformancePackRuleComplianceListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
