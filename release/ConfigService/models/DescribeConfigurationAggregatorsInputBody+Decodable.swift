// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationAggregatorsInputBody: Equatable {
    public let configurationAggregatorNames: [String]?
    public let nextToken: String?
    public let limit: Int
}

extension DescribeConfigurationAggregatorsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationAggregatorNames = "ConfigurationAggregatorNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .configurationAggregatorNames)
        var configurationAggregatorNamesDecoded0:[String]? = nil
        if let configurationAggregatorNamesContainer = configurationAggregatorNamesContainer {
            configurationAggregatorNamesDecoded0 = [String]()
            for string0 in configurationAggregatorNamesContainer {
                configurationAggregatorNamesDecoded0?.append(string0)
            }
        }
        configurationAggregatorNames = configurationAggregatorNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
