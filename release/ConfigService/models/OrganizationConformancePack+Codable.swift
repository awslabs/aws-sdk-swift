// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrganizationConformancePack: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case excludedAccounts = "ExcludedAccounts"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConformancePackArn = "OrganizationConformancePackArn"
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let excludedAccounts = excludedAccounts {
            var excludedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedAccounts)
            for excludedaccounts0 in excludedAccounts {
                try excludedAccountsContainer.encode(excludedaccounts0)
            }
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConformancePackArn = organizationConformancePackArn {
            try encodeContainer.encode(organizationConformancePackArn, forKey: .organizationConformancePackArn)
        }
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
        let organizationConformancePackArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationConformancePackArn)
        organizationConformancePackArn = organizationConformancePackArnDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConformancePackInputParameter].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                conformancePackInputParametersDecoded0?.append(structure0)
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
        let excludedAccountsContainer = try containerValues.decodeIfPresent([String].self, forKey: .excludedAccounts)
        var excludedAccountsDecoded0:[String]? = nil
        if let excludedAccountsContainer = excludedAccountsContainer {
            excludedAccountsDecoded0 = [String]()
            for string0 in excludedAccountsContainer {
                excludedAccountsDecoded0?.append(string0)
            }
        }
        excludedAccounts = excludedAccountsDecoded0
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}
