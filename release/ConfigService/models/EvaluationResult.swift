// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The details of an AWS Config evaluation. Provides the AWS
/// 			resource that was evaluated, the compliance of the resource, related
/// 			time stamps, and supplementary information.</p>
public struct EvaluationResult: Equatable {
    /// <p>Supplementary information about how the evaluation determined
    /// 			the compliance.</p>
    public let annotation: String?
    /// <p>Indicates whether the AWS resource complies with the AWS Config
    /// 			rule that evaluated it.</p>
    /// 		       <p>For the <code>EvaluationResult</code> data type, AWS Config
    /// 			supports only the <code>COMPLIANT</code>,
    /// 			<code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code> values.
    /// 			AWS Config does not support the <code>INSUFFICIENT_DATA</code> value
    /// 			for the <code>EvaluationResult</code> data type.</p>
    public let complianceType: ComplianceType?
    /// <p>The time when the AWS Config rule evaluated the AWS
    /// 			resource.</p>
    public let configRuleInvokedTime: Date?
    /// <p>Uniquely identifies the evaluation result.</p>
    public let evaluationResultIdentifier: EvaluationResultIdentifier?
    /// <p>The time when AWS Config recorded the evaluation
    /// 			result.</p>
    public let resultRecordedTime: Date?
    /// <p>An encrypted token that associates an evaluation with an AWS
    /// 			Config rule. The token identifies the rule, the AWS resource being
    /// 			evaluated, and the event that triggered the evaluation.</p>
    public let resultToken: String?

    public init (
        annotation: String? = nil,
        complianceType: ComplianceType? = nil,
        configRuleInvokedTime: Date? = nil,
        evaluationResultIdentifier: EvaluationResultIdentifier? = nil,
        resultRecordedTime: Date? = nil,
        resultToken: String? = nil
    )
    {
        self.annotation = annotation
        self.complianceType = complianceType
        self.configRuleInvokedTime = configRuleInvokedTime
        self.evaluationResultIdentifier = evaluationResultIdentifier
        self.resultRecordedTime = resultRecordedTime
        self.resultToken = resultToken
    }
}
