// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FailedRemediationBatch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failedItems = "FailedItems"
        case failureMessage = "FailureMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failedItems = failedItems {
            var failedItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failedItems)
            for remediationconfigurations0 in failedItems {
                try failedItemsContainer.encode(remediationconfigurations0)
            }
        }
        if let failureMessage = failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let failedItemsContainer = try containerValues.decodeIfPresent([RemediationConfiguration].self, forKey: .failedItems)
        var failedItemsDecoded0:[RemediationConfiguration]? = nil
        if let failedItemsContainer = failedItemsContainer {
            failedItemsDecoded0 = [RemediationConfiguration]()
            for structure0 in failedItemsContainer {
                failedItemsDecoded0?.append(structure0)
            }
        }
        failedItems = failedItemsDecoded0
    }
}
