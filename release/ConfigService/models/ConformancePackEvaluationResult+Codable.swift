// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConformancePackEvaluationResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case annotation = "Annotation"
        case complianceType = "ComplianceType"
        case configRuleInvokedTime = "ConfigRuleInvokedTime"
        case evaluationResultIdentifier = "EvaluationResultIdentifier"
        case resultRecordedTime = "ResultRecordedTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleInvokedTime = configRuleInvokedTime {
            try encodeContainer.encode(configRuleInvokedTime.timeIntervalSince1970, forKey: .configRuleInvokedTime)
        }
        if let evaluationResultIdentifier = evaluationResultIdentifier {
            try encodeContainer.encode(evaluationResultIdentifier, forKey: .evaluationResultIdentifier)
        }
        if let resultRecordedTime = resultRecordedTime {
            try encodeContainer.encode(resultRecordedTime.timeIntervalSince1970, forKey: .resultRecordedTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let evaluationResultIdentifierDecoded = try containerValues.decodeIfPresent(EvaluationResultIdentifier.self, forKey: .evaluationResultIdentifier)
        evaluationResultIdentifier = evaluationResultIdentifierDecoded
        let configRuleInvokedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .configRuleInvokedTime)
        configRuleInvokedTime = configRuleInvokedTimeDecoded
        let resultRecordedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .resultRecordedTime)
        resultRecordedTime = resultRecordedTimeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .annotation)
        annotation = annotationDecoded
    }
}
