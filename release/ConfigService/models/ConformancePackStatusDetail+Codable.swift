// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConformancePackStatusDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conformancePackArn = "ConformancePackArn"
        case conformancePackId = "ConformancePackId"
        case conformancePackName = "ConformancePackName"
        case conformancePackState = "ConformancePackState"
        case conformancePackStatusReason = "ConformancePackStatusReason"
        case lastUpdateCompletedTime = "LastUpdateCompletedTime"
        case lastUpdateRequestedTime = "LastUpdateRequestedTime"
        case stackArn = "StackArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackArn = conformancePackArn {
            try encodeContainer.encode(conformancePackArn, forKey: .conformancePackArn)
        }
        if let conformancePackId = conformancePackId {
            try encodeContainer.encode(conformancePackId, forKey: .conformancePackId)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let conformancePackState = conformancePackState {
            try encodeContainer.encode(conformancePackState.rawValue, forKey: .conformancePackState)
        }
        if let conformancePackStatusReason = conformancePackStatusReason {
            try encodeContainer.encode(conformancePackStatusReason, forKey: .conformancePackStatusReason)
        }
        if let lastUpdateCompletedTime = lastUpdateCompletedTime {
            try encodeContainer.encode(lastUpdateCompletedTime.timeIntervalSince1970, forKey: .lastUpdateCompletedTime)
        }
        if let lastUpdateRequestedTime = lastUpdateRequestedTime {
            try encodeContainer.encode(lastUpdateRequestedTime.timeIntervalSince1970, forKey: .lastUpdateRequestedTime)
        }
        if let stackArn = stackArn {
            try encodeContainer.encode(stackArn, forKey: .stackArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackId)
        conformancePackId = conformancePackIdDecoded
        let conformancePackArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackArn)
        conformancePackArn = conformancePackArnDecoded
        let conformancePackStateDecoded = try containerValues.decodeIfPresent(ConformancePackState.self, forKey: .conformancePackState)
        conformancePackState = conformancePackStateDecoded
        let stackArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackArn)
        stackArn = stackArnDecoded
        let conformancePackStatusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conformancePackStatusReason)
        conformancePackStatusReason = conformancePackStatusReasonDecoded
        let lastUpdateRequestedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateRequestedTime)
        lastUpdateRequestedTime = lastUpdateRequestedTimeDecoded
        let lastUpdateCompletedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateCompletedTime)
        lastUpdateCompletedTime = lastUpdateCompletedTimeDecoded
    }
}
