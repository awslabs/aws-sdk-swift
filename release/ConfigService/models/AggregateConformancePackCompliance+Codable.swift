// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AggregateConformancePackCompliance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case complianceType = "ComplianceType"
        case compliantRuleCount = "CompliantRuleCount"
        case nonCompliantRuleCount = "NonCompliantRuleCount"
        case totalRuleCount = "TotalRuleCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if compliantRuleCount != 0 {
            try encodeContainer.encode(compliantRuleCount, forKey: .compliantRuleCount)
        }
        if nonCompliantRuleCount != 0 {
            try encodeContainer.encode(nonCompliantRuleCount, forKey: .nonCompliantRuleCount)
        }
        if totalRuleCount != 0 {
            try encodeContainer.encode(totalRuleCount, forKey: .totalRuleCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let compliantRuleCountDecoded = try containerValues.decode(Int.self, forKey: .compliantRuleCount)
        compliantRuleCount = compliantRuleCountDecoded
        let nonCompliantRuleCountDecoded = try containerValues.decode(Int.self, forKey: .nonCompliantRuleCount)
        nonCompliantRuleCount = nonCompliantRuleCountDecoded
        let totalRuleCountDecoded = try containerValues.decode(Int.self, forKey: .totalRuleCount)
        totalRuleCount = totalRuleCountDecoded
    }
}
