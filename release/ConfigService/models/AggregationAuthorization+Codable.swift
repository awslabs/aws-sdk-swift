// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AggregationAuthorization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aggregationAuthorizationArn = "AggregationAuthorizationArn"
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
        case creationTime = "CreationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregationAuthorizationArn = aggregationAuthorizationArn {
            try encodeContainer.encode(aggregationAuthorizationArn, forKey: .aggregationAuthorizationArn)
        }
        if let authorizedAccountId = authorizedAccountId {
            try encodeContainer.encode(authorizedAccountId, forKey: .authorizedAccountId)
        }
        if let authorizedAwsRegion = authorizedAwsRegion {
            try encodeContainer.encode(authorizedAwsRegion, forKey: .authorizedAwsRegion)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationAuthorizationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aggregationAuthorizationArn)
        aggregationAuthorizationArn = aggregationAuthorizationArnDecoded
        let authorizedAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizedAccountId)
        authorizedAccountId = authorizedAccountIdDecoded
        let authorizedAwsRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizedAwsRegion)
        authorizedAwsRegion = authorizedAwsRegionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
