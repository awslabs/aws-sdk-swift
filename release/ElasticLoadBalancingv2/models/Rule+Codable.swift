// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Rule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case conditions = "Conditions"
        case isDefault = "IsDefault"
        case priority = "Priority"
        case ruleArn = "RuleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actions = actions {
            var actionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Actions"))
            for (index0, action0) in actions.enumerated() {
                try actionsContainer.encode(action0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let conditions = conditions {
            var conditionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Conditions"))
            for (index0, rulecondition0) in conditions.enumerated() {
                try conditionsContainer.encode(rulecondition0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if isDefault != false {
            try container.encode(isDefault, forKey: Key("IsDefault"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: Key("Priority"))
        }
        if let ruleArn = ruleArn {
            try container.encode(ruleArn, forKey: Key("RuleArn"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleArn)
        ruleArn = ruleArnDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .priority)
        priority = priorityDecoded
        if containerValues.contains(.conditions) {
            struct KeyVal0{struct member{}}
            let conditionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .conditions)
            if let conditionsWrappedContainer = conditionsWrappedContainer {
                let conditionsContainer = try conditionsWrappedContainer.decodeIfPresent([RuleCondition].self, forKey: .member)
                var conditionsBuffer:[RuleCondition]? = nil
                if let conditionsContainer = conditionsContainer {
                    conditionsBuffer = [RuleCondition]()
                    for structureContainer0 in conditionsContainer {
                        conditionsBuffer?.append(structureContainer0)
                    }
                }
                conditions = conditionsBuffer
            } else {
                conditions = []
            }
        } else {
            conditions = nil
        }
        if containerValues.contains(.actions) {
            struct KeyVal0{struct member{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([Action].self, forKey: .member)
                var actionsBuffer:[Action]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [Action]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let isDefaultDecoded = try containerValues.decode(Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
    }
}
