// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request parameters when using an identity provider (IdP) that is compliant with OpenID
///       Connect (OIDC) to authenticate users.</p>
public struct AuthenticateOidcActionConfig: Equatable {
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization
    ///       endpoint.</p>
    public let authenticationRequestExtraParams: [String:String]?
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS
    ///       protocol, the domain, and the path.</p>
    public let authorizationEndpoint: String?
    /// <p>The OAuth 2.0 client identifier.</p>
    public let clientId: String?
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you
    ///       are modifying a rule, you can omit this parameter if you set
    ///         <code>UseExistingClientSecret</code> to true.</p>
    public let clientSecret: String?
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS
    ///       protocol, the domain, and the path.</p>
    public let issuer: String?
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p>
    ///             </li>
    ///             <li>
    ///                <p>allow<code></code> - Allow the request to be forwarded to the target.</p>
    ///             </li>
    ///             <li>
    ///                <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is
    ///           the default value.</p>
    ///             </li>
    ///          </ul>
    public let onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum?
    /// <p>The set of user claims to be requested from the IdP. The default is
    ///       <code>openid</code>.</p>
    ///          <p>To verify which scope values your IdP supports and how to separate multiple values, see
    ///       the documentation for your IdP.</p>
    public let scope: String?
    /// <p>The name of the cookie used to maintain session information. The default is
    ///       AWSELBAuthSessionCookie.</p>
    public let sessionCookieName: String?
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800
    ///       seconds (7 days).</p>
    public let sessionTimeout: Int?
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the
    ///       domain, and the path.</p>
    public let tokenEndpoint: String?
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are
    ///       creating a rule, you can omit this parameter or set it to false.</p>
    public let useExistingClientSecret: Bool?
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol,
    ///       the domain, and the path.</p>
    public let userInfoEndpoint: String?

    public init (
        authenticationRequestExtraParams: [String:String]? = nil,
        authorizationEndpoint: String? = nil,
        clientId: String? = nil,
        clientSecret: String? = nil,
        issuer: String? = nil,
        onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum? = nil,
        scope: String? = nil,
        sessionCookieName: String? = nil,
        sessionTimeout: Int? = nil,
        tokenEndpoint: String? = nil,
        useExistingClientSecret: Bool? = nil,
        userInfoEndpoint: String? = nil
    )
    {
        self.authenticationRequestExtraParams = authenticationRequestExtraParams
        self.authorizationEndpoint = authorizationEndpoint
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.issuer = issuer
        self.onUnauthenticatedRequest = onUnauthenticatedRequest
        self.scope = scope
        self.sessionCookieName = sessionCookieName
        self.sessionTimeout = sessionTimeout
        self.tokenEndpoint = tokenEndpoint
        self.useExistingClientSecret = useExistingClientSecret
        self.userInfoEndpoint = userInfoEndpoint
    }
}
