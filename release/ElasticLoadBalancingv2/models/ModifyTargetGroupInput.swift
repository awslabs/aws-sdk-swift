// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyTargetGroupInput: Equatable {
    /// <p>Indicates whether health checks are enabled.</p>
    public let healthCheckEnabled: Bool?
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.
    ///       For TCP health checks, the supported values are 10 or 30 seconds.</p>
    ///          <p>With Network Load Balancers, you can't modify this setting.</p>
    public let healthCheckIntervalSeconds: Int?
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    ///          <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    ///          <p>[GRPC protocol version] The path of a custom health check method with the format
    ///       /package.service/method. The default is /AWS.ALB/healthcheck.</p>
    public let healthCheckPath: String?
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    public let healthCheckPort: String?
    /// <p>The protocol the load balancer uses when performing health checks on targets. The TCP
    ///       protocol is supported for health checks only if the protocol of the target group is TCP, TLS,
    ///       UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health
    ///       checks.</p>
    ///          <p>With Network Load Balancers, you can't modify this setting.</p>
    public let healthCheckProtocol: ProtocolEnum?
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means
    ///       a failed health check.</p>
    ///          <p>With Network Load Balancers, you can't modify this setting.</p>
    public let healthCheckTimeoutSeconds: Int?
    /// <p>The number of consecutive health checks successes required before considering an unhealthy
    ///       target healthy.</p>
    public let healthyThresholdCount: Int?
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful
    ///       response from a target.</p>
    ///          <p>With Network Load Balancers, you can't modify this setting.</p>
    public let matcher: Matcher?
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    public let targetGroupArn: String?
    /// <p>The number of consecutive health check failures required before considering the target
    ///       unhealthy. For target groups with a protocol of TCP or TLS, this value must be the same as the
    ///       healthy threshold count.</p>
    public let unhealthyThresholdCount: Int?

    public init (
        healthCheckEnabled: Bool? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: String? = nil,
        healthCheckProtocol: ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Int? = nil,
        healthyThresholdCount: Int? = nil,
        matcher: Matcher? = nil,
        targetGroupArn: String? = nil,
        unhealthyThresholdCount: Int? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.matcher = matcher
        self.targetGroupArn = targetGroupArn
        self.unhealthyThresholdCount = unhealthyThresholdCount
    }
}
