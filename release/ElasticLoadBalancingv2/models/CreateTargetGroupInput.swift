// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateTargetGroupInput: Equatable {
    /// <p>The protocol to use for routing traffic to the targets. For Application Load Balancers,
    ///       the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported
    ///       protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is
    ///       GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a
    ///       Lambda function, this parameter does not apply.</p>
    public let `protocol`: ProtocolEnum?
    /// <p>Indicates whether health checks are enabled. If the target type is <code>lambda</code>,
    ///       health checks are disabled by default but can be enabled. If the target type is
    ///         <code>instance</code> or <code>ip</code>, health checks are always enabled and cannot be
    ///       disabled.</p>
    public let healthCheckEnabled: Bool?
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.
    ///       If the target group protocol is TCP, TLS, UDP, or TCP_UDP, the supported values are 10 and 30
    ///       seconds. If the target group protocol is HTTP or HTTPS, the default is 30 seconds. If the
    ///       target group protocol is GENEVE, the default is 10 seconds. If the target type is
    ///         <code>lambda</code>, the default is 35 seconds.</p>
    public let healthCheckIntervalSeconds: Int?
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    ///          <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    ///          <p>[GRPC protocol version] The path of a custom health check method with the format
    ///       /package.service/method. The default is /AWS.ALB/healthcheck.</p>
    public let healthCheckPath: String?
    /// <p>The port the load balancer uses when performing health checks on targets. If the protocol
    ///       is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is <code>traffic-port</code>, which is
    ///       the port on which each target receives traffic from the load balancer. If the protocol is
    ///       GENEVE, the default is port 80.</p>
    public let healthCheckPort: String?
    /// <p>The protocol the load balancer uses when performing health checks on targets. For
    ///       Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load
    ///       Balancers, the default is TCP. The TCP protocol is not supported for health checks if the
    ///       protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are
    ///       not supported for health checks.</p>
    public let healthCheckProtocol: ProtocolEnum?
    /// <p>The amount of time, in seconds, during which no response from a target means a failed
    ///       health check. For target groups with a protocol of HTTP, HTTPS, or GENEVE, the default is 5
    ///       seconds. For target groups with a protocol of TCP or TLS, this value must be 6 seconds for
    ///       HTTP health checks and 10 seconds for TCP and HTTPS health checks. If the target type is
    ///         <code>lambda</code>, the default is 30 seconds.</p>
    public let healthCheckTimeoutSeconds: Int?
    /// <p>The number of consecutive health checks successes required before considering an unhealthy
    ///       target healthy. For target groups with a protocol of HTTP or HTTPS, the default is 5. For
    ///       target groups with a protocol of TCP, TLS, or GENEVE, the default is 3. If the target type is
    ///         <code>lambda</code>, the default is 5.</p>
    public let healthyThresholdCount: Int?
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful
    ///       response from a target.</p>
    public let matcher: Matcher?
    /// <p>The name of the target group.</p>
    ///          <p>This name must be unique per region per account, can have a maximum of 32 characters, must
    ///       contain only alphanumeric characters or hyphens, and must not begin or end with a
    ///       hyphen.</p>
    public let name: String?
    /// <p>The port on which the targets receive traffic. This port is used unless you specify a port
    ///       override when registering the target. If the target is a Lambda function, this parameter does
    ///       not apply. If the protocol is GENEVE, the supported port is 6081.</p>
    public let port: Int?
    /// <p>[HTTP/HTTPS protocol] The protocol version. Specify <code>GRPC</code> to send requests to
    ///       targets using gRPC. Specify <code>HTTP2</code> to send requests to targets using HTTP/2. The
    ///       default is <code>HTTP1</code>, which sends requests to targets using HTTP/1.1.</p>
    public let protocolVersion: String?
    /// <p>The tags to assign to the target group.</p>
    public let tags: [Tag]?
    /// <p>The type of target that you must specify when registering targets with this target group.
    ///       You can't specify targets for a target group using more than one target type.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>instance</code> - Register targets by instance ID. This is the default
    ///           value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ip</code> - Register targets by IP address. You can specify IP addresses from
    ///           the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range
    ///           (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10).
    ///           You can't specify publicly routable IP addresses.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda</code> - Register a single Lambda function as a target.</p>
    ///             </li>
    ///          </ul>
    public let targetType: TargetTypeEnum?
    /// <p>The number of consecutive health check failures required before considering a target
    ///       unhealthy. If the target group protocol is HTTP or HTTPS, the default is 2. If the target
    ///       group protocol is TCP or TLS, this value must be the same as the healthy threshold count. If
    ///       the target group protocol is GENEVE, the default is 3. If the target type is
    ///         <code>lambda</code>, the default is 2.</p>
    public let unhealthyThresholdCount: Int?
    /// <p>The identifier of the virtual private cloud (VPC). If the target is a Lambda function,
    ///       this parameter does not apply. Otherwise, this parameter is required.</p>
    public let vpcId: String?

    public init (
        `protocol`: ProtocolEnum? = nil,
        healthCheckEnabled: Bool? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: String? = nil,
        healthCheckProtocol: ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Int? = nil,
        healthyThresholdCount: Int? = nil,
        matcher: Matcher? = nil,
        name: String? = nil,
        port: Int? = nil,
        protocolVersion: String? = nil,
        tags: [Tag]? = nil,
        targetType: TargetTypeEnum? = nil,
        unhealthyThresholdCount: Int? = nil,
        vpcId: String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.matcher = matcher
        self.name = name
        self.port = port
        self.protocolVersion = protocolVersion
        self.tags = tags
        self.targetType = targetType
        self.unhealthyThresholdCount = unhealthyThresholdCount
        self.vpcId = vpcId
    }
}
