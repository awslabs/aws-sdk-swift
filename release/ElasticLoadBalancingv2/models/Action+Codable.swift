// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Action: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authenticateCognitoConfig = "AuthenticateCognitoConfig"
        case authenticateOidcConfig = "AuthenticateOidcConfig"
        case fixedResponseConfig = "FixedResponseConfig"
        case forwardConfig = "ForwardConfig"
        case order = "Order"
        case redirectConfig = "RedirectConfig"
        case targetGroupArn = "TargetGroupArn"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authenticateCognitoConfig = authenticateCognitoConfig {
            try container.encode(authenticateCognitoConfig, forKey: Key("AuthenticateCognitoConfig"))
        }
        if let authenticateOidcConfig = authenticateOidcConfig {
            try container.encode(authenticateOidcConfig, forKey: Key("AuthenticateOidcConfig"))
        }
        if let fixedResponseConfig = fixedResponseConfig {
            try container.encode(fixedResponseConfig, forKey: Key("FixedResponseConfig"))
        }
        if let forwardConfig = forwardConfig {
            try container.encode(forwardConfig, forKey: Key("ForwardConfig"))
        }
        if let order = order {
            try container.encode(order, forKey: Key("Order"))
        }
        if let redirectConfig = redirectConfig {
            try container.encode(redirectConfig, forKey: Key("RedirectConfig"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: Key("TargetGroupArn"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ActionTypeEnum.self, forKey: .type)
        type = typeDecoded
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        let authenticateOidcConfigDecoded = try containerValues.decodeIfPresent(AuthenticateOidcActionConfig.self, forKey: .authenticateOidcConfig)
        authenticateOidcConfig = authenticateOidcConfigDecoded
        let authenticateCognitoConfigDecoded = try containerValues.decodeIfPresent(AuthenticateCognitoActionConfig.self, forKey: .authenticateCognitoConfig)
        authenticateCognitoConfig = authenticateCognitoConfigDecoded
        let orderDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .order)
        order = orderDecoded
        let redirectConfigDecoded = try containerValues.decodeIfPresent(RedirectActionConfig.self, forKey: .redirectConfig)
        redirectConfig = redirectConfigDecoded
        let fixedResponseConfigDecoded = try containerValues.decodeIfPresent(FixedResponseActionConfig.self, forKey: .fixedResponseConfig)
        fixedResponseConfig = fixedResponseConfigDecoded
        let forwardConfigDecoded = try containerValues.decodeIfPresent(ForwardActionConfig.self, forKey: .forwardConfig)
        forwardConfig = forwardConfigDecoded
    }
}
