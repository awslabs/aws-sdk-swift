// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Listener: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alpnPolicy = "AlpnPolicy"
        case certificates = "Certificates"
        case defaultActions = "DefaultActions"
        case listenerArn = "ListenerArn"
        case loadBalancerArn = "LoadBalancerArn"
        case port = "Port"
        case `protocol` = "Protocol"
        case sslPolicy = "SslPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let alpnPolicy = alpnPolicy {
            var alpnPolicyContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlpnPolicy"))
            for (index0, alpnpolicyvalue0) in alpnPolicy.enumerated() {
                try alpnPolicyContainer.encode(alpnpolicyvalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let certificates = certificates {
            var certificatesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Certificates"))
            for (index0, certificate0) in certificates.enumerated() {
                try certificatesContainer.encode(certificate0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let defaultActions = defaultActions {
            var defaultActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DefaultActions"))
            for (index0, action0) in defaultActions.enumerated() {
                try defaultActionsContainer.encode(action0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: Key("ListenerArn"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: Key("LoadBalancerArn"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let sslPolicy = sslPolicy {
            try container.encode(sslPolicy, forKey: Key("SslPolicy"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listenerArn)
        listenerArn = listenerArnDecoded
        let loadBalancerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loadBalancerArn)
        loadBalancerArn = loadBalancerArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(ProtocolEnum.self, forKey: .protocol)
        `protocol` = protocolDecoded
        if containerValues.contains(.certificates) {
            struct KeyVal0{struct member{}}
            let certificatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .certificates)
            if let certificatesWrappedContainer = certificatesWrappedContainer {
                let certificatesContainer = try certificatesWrappedContainer.decodeIfPresent([Certificate].self, forKey: .member)
                var certificatesBuffer:[Certificate]? = nil
                if let certificatesContainer = certificatesContainer {
                    certificatesBuffer = [Certificate]()
                    for structureContainer0 in certificatesContainer {
                        certificatesBuffer?.append(structureContainer0)
                    }
                }
                certificates = certificatesBuffer
            } else {
                certificates = []
            }
        } else {
            certificates = nil
        }
        let sslPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sslPolicy)
        sslPolicy = sslPolicyDecoded
        if containerValues.contains(.defaultActions) {
            struct KeyVal0{struct member{}}
            let defaultActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .defaultActions)
            if let defaultActionsWrappedContainer = defaultActionsWrappedContainer {
                let defaultActionsContainer = try defaultActionsWrappedContainer.decodeIfPresent([Action].self, forKey: .member)
                var defaultActionsBuffer:[Action]? = nil
                if let defaultActionsContainer = defaultActionsContainer {
                    defaultActionsBuffer = [Action]()
                    for structureContainer0 in defaultActionsContainer {
                        defaultActionsBuffer?.append(structureContainer0)
                    }
                }
                defaultActions = defaultActionsBuffer
            } else {
                defaultActions = []
            }
        } else {
            defaultActions = nil
        }
        if containerValues.contains(.alpnPolicy) {
            struct KeyVal0{struct member{}}
            let alpnPolicyWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alpnPolicy)
            if let alpnPolicyWrappedContainer = alpnPolicyWrappedContainer {
                let alpnPolicyContainer = try alpnPolicyWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var alpnPolicyBuffer:[String]? = nil
                if let alpnPolicyContainer = alpnPolicyContainer {
                    alpnPolicyBuffer = [String]()
                    for stringContainer0 in alpnPolicyContainer {
                        alpnPolicyBuffer?.append(stringContainer0)
                    }
                }
                alpnPolicy = alpnPolicyBuffer
            } else {
                alpnPolicy = []
            }
        } else {
            alpnPolicy = nil
        }
    }
}
