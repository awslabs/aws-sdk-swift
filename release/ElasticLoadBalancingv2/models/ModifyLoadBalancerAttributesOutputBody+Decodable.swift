// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyLoadBalancerAttributesOutputBody: Equatable {
    public let attributes: [LoadBalancerAttribute]?
}

extension ModifyLoadBalancerAttributesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyLoadBalancerAttributesResult"))
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct member{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attributes)
            if let attributesWrappedContainer = attributesWrappedContainer {
                let attributesContainer = try attributesWrappedContainer.decodeIfPresent([LoadBalancerAttribute].self, forKey: .member)
                var attributesBuffer:[LoadBalancerAttribute]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [LoadBalancerAttribute]()
                    for structureContainer0 in attributesContainer {
                        attributesBuffer?.append(structureContainer0)
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = []
            }
        } else {
            attributes = nil
        }
    }
}
