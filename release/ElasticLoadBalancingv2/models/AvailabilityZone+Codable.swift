// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AvailabilityZone: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case loadBalancerAddresses = "LoadBalancerAddresses"
        case outpostId = "OutpostId"
        case subnetId = "SubnetId"
        case zoneName = "ZoneName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let loadBalancerAddresses = loadBalancerAddresses {
            var loadBalancerAddressesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerAddresses"))
            for (index0, loadbalanceraddress0) in loadBalancerAddresses.enumerated() {
                try loadBalancerAddressesContainer.encode(loadbalanceraddress0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let outpostId = outpostId {
            try container.encode(outpostId, forKey: Key("OutpostId"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: Key("SubnetId"))
        }
        if let zoneName = zoneName {
            try container.encode(zoneName, forKey: Key("ZoneName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let zoneNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .zoneName)
        zoneName = zoneNameDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let outpostIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostId)
        outpostId = outpostIdDecoded
        if containerValues.contains(.loadBalancerAddresses) {
            struct KeyVal0{struct member{}}
            let loadBalancerAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerAddresses)
            if let loadBalancerAddressesWrappedContainer = loadBalancerAddressesWrappedContainer {
                let loadBalancerAddressesContainer = try loadBalancerAddressesWrappedContainer.decodeIfPresent([LoadBalancerAddress].self, forKey: .member)
                var loadBalancerAddressesBuffer:[LoadBalancerAddress]? = nil
                if let loadBalancerAddressesContainer = loadBalancerAddressesContainer {
                    loadBalancerAddressesBuffer = [LoadBalancerAddress]()
                    for structureContainer0 in loadBalancerAddressesContainer {
                        loadBalancerAddressesBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerAddresses = loadBalancerAddressesBuffer
            } else {
                loadBalancerAddresses = []
            }
        } else {
            loadBalancerAddresses = nil
        }
    }
}
