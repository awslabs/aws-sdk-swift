// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about a target group.</p>
public struct TargetGroup: Equatable {
    /// <p>The protocol to use for routing traffic to the targets.</p>
    public let `protocol`: ProtocolEnum?
    /// <p>Indicates whether health checks are enabled.</p>
    public let healthCheckEnabled: Bool?
    /// <p>The approximate amount of time, in seconds, between health checks of an individual
    ///       target.</p>
    public let healthCheckIntervalSeconds: Int?
    /// <p>The destination for health checks on the targets.</p>
    public let healthCheckPath: String?
    /// <p>The port to use to connect with the target.</p>
    public let healthCheckPort: String?
    /// <p>The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP
    ///       protocols are not supported for health checks.</p>
    public let healthCheckProtocol: ProtocolEnum?
    /// <p>The amount of time, in seconds, during which no response means a failed health
    ///       check.</p>
    public let healthCheckTimeoutSeconds: Int?
    /// <p>The number of consecutive health checks successes required before considering an unhealthy
    ///       target healthy.</p>
    public let healthyThresholdCount: Int?
    /// <p>The Amazon Resource Names (ARN) of the load balancers that route traffic to this target
    ///       group.</p>
    public let loadBalancerArns: [String]?
    /// <p>The HTTP or gRPC codes to use when checking for a successful response from a
    ///       target.</p>
    public let matcher: Matcher?
    /// <p>The port on which the targets are listening. Not used if the target is a Lambda
    ///       function.</p>
    public let port: Int?
    /// <p>[HTTP/HTTPS protocol] The protocol version. The possible values are <code>GRPC</code>,
    ///         <code>HTTP1</code>, and <code>HTTP2</code>.</p>
    public let protocolVersion: String?
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    public let targetGroupArn: String?
    /// <p>The name of the target group.</p>
    public let targetGroupName: String?
    /// <p>The type of target that you must specify when registering targets with this target group.
    ///       The possible values are <code>instance</code> (register targets by instance ID),
    ///         <code>ip</code> (register targets by IP address), or <code>lambda</code> (register a single
    ///       Lambda function as a target).</p>
    public let targetType: TargetTypeEnum?
    /// <p>The number of consecutive health check failures required before considering the target
    ///       unhealthy.</p>
    public let unhealthyThresholdCount: Int?
    /// <p>The ID of the VPC for the targets.</p>
    public let vpcId: String?

    public init (
        `protocol`: ProtocolEnum? = nil,
        healthCheckEnabled: Bool? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: String? = nil,
        healthCheckProtocol: ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Int? = nil,
        healthyThresholdCount: Int? = nil,
        loadBalancerArns: [String]? = nil,
        matcher: Matcher? = nil,
        port: Int? = nil,
        protocolVersion: String? = nil,
        targetGroupArn: String? = nil,
        targetGroupName: String? = nil,
        targetType: TargetTypeEnum? = nil,
        unhealthyThresholdCount: Int? = nil,
        vpcId: String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.loadBalancerArns = loadBalancerArns
        self.matcher = matcher
        self.port = port
        self.protocolVersion = protocolVersion
        self.targetGroupArn = targetGroupArn
        self.targetGroupName = targetGroupName
        self.targetType = targetType
        self.unhealthyThresholdCount = unhealthyThresholdCount
        self.vpcId = vpcId
    }
}
