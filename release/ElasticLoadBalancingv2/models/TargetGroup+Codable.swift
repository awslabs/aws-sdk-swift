// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case loadBalancerArns = "LoadBalancerArns"
        case matcher = "Matcher"
        case port = "Port"
        case `protocol` = "Protocol"
        case protocolVersion = "ProtocolVersion"
        case targetGroupArn = "TargetGroupArn"
        case targetGroupName = "TargetGroupName"
        case targetType = "TargetType"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let healthCheckEnabled = healthCheckEnabled {
            try container.encode(healthCheckEnabled, forKey: Key("HealthCheckEnabled"))
        }
        if let healthCheckIntervalSeconds = healthCheckIntervalSeconds {
            try container.encode(healthCheckIntervalSeconds, forKey: Key("HealthCheckIntervalSeconds"))
        }
        if let healthCheckPath = healthCheckPath {
            try container.encode(healthCheckPath, forKey: Key("HealthCheckPath"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: Key("HealthCheckPort"))
        }
        if let healthCheckProtocol = healthCheckProtocol {
            try container.encode(healthCheckProtocol, forKey: Key("HealthCheckProtocol"))
        }
        if let healthCheckTimeoutSeconds = healthCheckTimeoutSeconds {
            try container.encode(healthCheckTimeoutSeconds, forKey: Key("HealthCheckTimeoutSeconds"))
        }
        if let healthyThresholdCount = healthyThresholdCount {
            try container.encode(healthyThresholdCount, forKey: Key("HealthyThresholdCount"))
        }
        if let loadBalancerArns = loadBalancerArns {
            var loadBalancerArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancerArns"))
            for (index0, loadbalancerarn0) in loadBalancerArns.enumerated() {
                try loadBalancerArnsContainer.encode(loadbalancerarn0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let matcher = matcher {
            try container.encode(matcher, forKey: Key("Matcher"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let protocolVersion = protocolVersion {
            try container.encode(protocolVersion, forKey: Key("ProtocolVersion"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: Key("TargetGroupArn"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: Key("TargetGroupName"))
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: Key("TargetType"))
        }
        if let unhealthyThresholdCount = unhealthyThresholdCount {
            try container.encode(unhealthyThresholdCount, forKey: Key("UnhealthyThresholdCount"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        let targetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupName)
        targetGroupName = targetGroupNameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(ProtocolEnum.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let healthCheckProtocolDecoded = try containerValues.decodeIfPresent(ProtocolEnum.self, forKey: .healthCheckProtocol)
        healthCheckProtocol = healthCheckProtocolDecoded
        let healthCheckPortDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckPort)
        healthCheckPort = healthCheckPortDecoded
        let healthCheckEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .healthCheckEnabled)
        healthCheckEnabled = healthCheckEnabledDecoded
        let healthCheckIntervalSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckIntervalSeconds)
        healthCheckIntervalSeconds = healthCheckIntervalSecondsDecoded
        let healthCheckTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckTimeoutSeconds)
        healthCheckTimeoutSeconds = healthCheckTimeoutSecondsDecoded
        let healthyThresholdCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthyThresholdCount)
        healthyThresholdCount = healthyThresholdCountDecoded
        let unhealthyThresholdCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .unhealthyThresholdCount)
        unhealthyThresholdCount = unhealthyThresholdCountDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let matcherDecoded = try containerValues.decodeIfPresent(Matcher.self, forKey: .matcher)
        matcher = matcherDecoded
        if containerValues.contains(.loadBalancerArns) {
            struct KeyVal0{struct member{}}
            let loadBalancerArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerArns)
            if let loadBalancerArnsWrappedContainer = loadBalancerArnsWrappedContainer {
                let loadBalancerArnsContainer = try loadBalancerArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var loadBalancerArnsBuffer:[String]? = nil
                if let loadBalancerArnsContainer = loadBalancerArnsContainer {
                    loadBalancerArnsBuffer = [String]()
                    for stringContainer0 in loadBalancerArnsContainer {
                        loadBalancerArnsBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerArns = loadBalancerArnsBuffer
            } else {
                loadBalancerArns = []
            }
        } else {
            loadBalancerArns = nil
        }
        let targetTypeDecoded = try containerValues.decodeIfPresent(TargetTypeEnum.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let protocolVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocolVersion)
        protocolVersion = protocolVersionDecoded
    }
}
