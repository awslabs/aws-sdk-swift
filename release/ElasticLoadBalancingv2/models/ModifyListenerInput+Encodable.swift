// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyListenerInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let alpnPolicy = alpnPolicy {
            var alpnPolicyContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlpnPolicy"))
            for (index0, alpnpolicyvalue0) in alpnPolicy.enumerated() {
                try alpnPolicyContainer.encode(alpnpolicyvalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let certificates = certificates {
            var certificatesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Certificates"))
            for (index0, certificate0) in certificates.enumerated() {
                try certificatesContainer.encode(certificate0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let defaultActions = defaultActions {
            var defaultActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DefaultActions"))
            for (index0, action0) in defaultActions.enumerated() {
                try defaultActionsContainer.encode(action0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: Key("ListenerArn"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let sslPolicy = sslPolicy {
            try container.encode(sslPolicy, forKey: Key("SslPolicy"))
        }
        try container.encode("ModifyListener", forKey:Key("Action"))
        try container.encode("2015-12-01", forKey:Key("Version"))
    }
}
