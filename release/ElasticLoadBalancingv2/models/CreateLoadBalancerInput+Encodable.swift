// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLoadBalancerInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customerOwnedIpv4Pool = customerOwnedIpv4Pool {
            try container.encode(customerOwnedIpv4Pool, forKey: Key("CustomerOwnedIpv4Pool"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: Key("IpAddressType"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let scheme = scheme {
            try container.encode(scheme, forKey: Key("Scheme"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroups"))
            for (index0, securitygroupid0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(securitygroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SubnetMappings"))
            for (index0, subnetmapping0) in subnetMappings.enumerated() {
                try subnetMappingsContainer.encode(subnetmapping0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let subnets = subnets {
            var subnetsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Subnets"))
            for (index0, subnetid0) in subnets.enumerated() {
                try subnetsContainer.encode(subnetid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
        try container.encode("CreateLoadBalancer", forKey:Key("Action"))
        try container.encode("2015-12-01", forKey:Key("Version"))
    }
}
