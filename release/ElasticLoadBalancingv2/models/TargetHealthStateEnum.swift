// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TargetHealthStateEnum {
    case draining
    case healthy
    case initial
    case unavailable
    case unhealthy
    case unused
    case sdkUnknown(String)
}

extension TargetHealthStateEnum : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetHealthStateEnum] {
        return [
            .draining,
            .healthy,
            .initial,
            .unavailable,
            .unhealthy,
            .unused,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .draining: return "draining"
        case .healthy: return "healthy"
        case .initial: return "initial"
        case .unavailable: return "unavailable"
        case .unhealthy: return "unhealthy"
        case .unused: return "unused"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetHealthStateEnum(rawValue: rawValue) ?? TargetHealthStateEnum.sdkUnknown(rawValue)
    }
}
