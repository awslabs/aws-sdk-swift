// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubnetMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocationId = "AllocationId"
        case iPv6Address = "IPv6Address"
        case privateIPv4Address = "PrivateIPv4Address"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allocationId = allocationId {
            try container.encode(allocationId, forKey: Key("AllocationId"))
        }
        if let iPv6Address = iPv6Address {
            try container.encode(iPv6Address, forKey: Key("IPv6Address"))
        }
        if let privateIPv4Address = privateIPv4Address {
            try container.encode(privateIPv4Address, forKey: Key("PrivateIPv4Address"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: Key("SubnetId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let allocationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allocationId)
        allocationId = allocationIdDecoded
        let privateIPv4AddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIPv4Address)
        privateIPv4Address = privateIPv4AddressDecoded
        let iPv6AddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iPv6Address)
        iPv6Address = iPv6AddressDecoded
    }
}
