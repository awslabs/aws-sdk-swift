// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateListenerInput: Equatable {
    /// <p>The protocol for connections from clients to the load balancer. For Application Load
    ///       Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the
    ///       supported protocols are TCP, TLS, UDP, and TCP_UDP. You canâ€™t specify the UDP or TCP_UDP
    ///       protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load
    ///       Balancer.</p>
    public let `protocol`: ProtocolEnum?
    /// <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You
    ///       can specify one policy name. The following are the possible values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HTTP1Only</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>HTTP2Only</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>HTTP2Optional</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>HTTP2Preferred</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>None</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN
    ///         policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    public let alpnPolicy: [String]?
    /// <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide
    ///       exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set
    ///         <code>IsDefault</code>.</p>
    public let certificates: [Certificate]?
    /// <p>The actions for the default rule.</p>
    public let defaultActions: [Action]?
    /// <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    public let loadBalancerArn: String?
    /// <p>The port on which the load balancer is listening. You cannot specify a port for a Gateway
    ///       Load Balancer.</p>
    public let port: Int?
    /// <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are
    ///       supported.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> and
    ///         <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    public let sslPolicy: String?
    /// <p>The tags to assign to the listener.</p>
    public let tags: [Tag]?

    public init (
        `protocol`: ProtocolEnum? = nil,
        alpnPolicy: [String]? = nil,
        certificates: [Certificate]? = nil,
        defaultActions: [Action]? = nil,
        loadBalancerArn: String? = nil,
        port: Int? = nil,
        sslPolicy: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.`protocol` = `protocol`
        self.alpnPolicy = alpnPolicy
        self.certificates = certificates
        self.defaultActions = defaultActions
        self.loadBalancerArn = loadBalancerArn
        self.port = port
        self.sslPolicy = sslPolicy
        self.tags = tags
    }
}
