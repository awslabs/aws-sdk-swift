// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSSLPoliciesOutputBody: Equatable {
    public let sslPolicies: [SslPolicy]?
    public let nextMarker: String?
}

extension DescribeSSLPoliciesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case sslPolicies = "SslPolicies"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeSSLPoliciesResult"))
        if containerValues.contains(.sslPolicies) {
            struct KeyVal0{struct member{}}
            let sslPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sslPolicies)
            if let sslPoliciesWrappedContainer = sslPoliciesWrappedContainer {
                let sslPoliciesContainer = try sslPoliciesWrappedContainer.decodeIfPresent([SslPolicy].self, forKey: .member)
                var sslPoliciesBuffer:[SslPolicy]? = nil
                if let sslPoliciesContainer = sslPoliciesContainer {
                    sslPoliciesBuffer = [SslPolicy]()
                    for structureContainer0 in sslPoliciesContainer {
                        sslPoliciesBuffer?.append(structureContainer0)
                    }
                }
                sslPolicies = sslPoliciesBuffer
            } else {
                sslPolicies = []
            }
        } else {
            sslPolicies = nil
        }
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
