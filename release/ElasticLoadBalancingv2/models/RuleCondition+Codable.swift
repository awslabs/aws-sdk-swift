// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RuleCondition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case field = "Field"
        case hostHeaderConfig = "HostHeaderConfig"
        case httpHeaderConfig = "HttpHeaderConfig"
        case httpRequestMethodConfig = "HttpRequestMethodConfig"
        case pathPatternConfig = "PathPatternConfig"
        case queryStringConfig = "QueryStringConfig"
        case sourceIpConfig = "SourceIpConfig"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let field = field {
            try container.encode(field, forKey: Key("Field"))
        }
        if let hostHeaderConfig = hostHeaderConfig {
            try container.encode(hostHeaderConfig, forKey: Key("HostHeaderConfig"))
        }
        if let httpHeaderConfig = httpHeaderConfig {
            try container.encode(httpHeaderConfig, forKey: Key("HttpHeaderConfig"))
        }
        if let httpRequestMethodConfig = httpRequestMethodConfig {
            try container.encode(httpRequestMethodConfig, forKey: Key("HttpRequestMethodConfig"))
        }
        if let pathPatternConfig = pathPatternConfig {
            try container.encode(pathPatternConfig, forKey: Key("PathPatternConfig"))
        }
        if let queryStringConfig = queryStringConfig {
            try container.encode(queryStringConfig, forKey: Key("QueryStringConfig"))
        }
        if let sourceIpConfig = sourceIpConfig {
            try container.encode(sourceIpConfig, forKey: Key("SourceIpConfig"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, stringvalue0) in values.enumerated() {
                try valuesContainer.encode(stringvalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .field)
        field = fieldDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var valuesBuffer:[String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let hostHeaderConfigDecoded = try containerValues.decodeIfPresent(HostHeaderConditionConfig.self, forKey: .hostHeaderConfig)
        hostHeaderConfig = hostHeaderConfigDecoded
        let pathPatternConfigDecoded = try containerValues.decodeIfPresent(PathPatternConditionConfig.self, forKey: .pathPatternConfig)
        pathPatternConfig = pathPatternConfigDecoded
        let httpHeaderConfigDecoded = try containerValues.decodeIfPresent(HttpHeaderConditionConfig.self, forKey: .httpHeaderConfig)
        httpHeaderConfig = httpHeaderConfigDecoded
        let queryStringConfigDecoded = try containerValues.decodeIfPresent(QueryStringConditionConfig.self, forKey: .queryStringConfig)
        queryStringConfig = queryStringConfigDecoded
        let httpRequestMethodConfigDecoded = try containerValues.decodeIfPresent(HttpRequestMethodConditionConfig.self, forKey: .httpRequestMethodConfig)
        httpRequestMethodConfig = httpRequestMethodConfigDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SourceIpConditionConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
    }
}
