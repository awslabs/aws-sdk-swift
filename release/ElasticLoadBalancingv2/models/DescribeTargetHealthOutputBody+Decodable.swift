// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTargetHealthOutputBody: Equatable {
    public let targetHealthDescriptions: [TargetHealthDescription]?
}

extension DescribeTargetHealthOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case targetHealthDescriptions = "TargetHealthDescriptions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTargetHealthResult"))
        if containerValues.contains(.targetHealthDescriptions) {
            struct KeyVal0{struct member{}}
            let targetHealthDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetHealthDescriptions)
            if let targetHealthDescriptionsWrappedContainer = targetHealthDescriptionsWrappedContainer {
                let targetHealthDescriptionsContainer = try targetHealthDescriptionsWrappedContainer.decodeIfPresent([TargetHealthDescription].self, forKey: .member)
                var targetHealthDescriptionsBuffer:[TargetHealthDescription]? = nil
                if let targetHealthDescriptionsContainer = targetHealthDescriptionsContainer {
                    targetHealthDescriptionsBuffer = [TargetHealthDescription]()
                    for structureContainer0 in targetHealthDescriptionsContainer {
                        targetHealthDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                targetHealthDescriptions = targetHealthDescriptionsBuffer
            } else {
                targetHealthDescriptions = []
            }
        } else {
            targetHealthDescriptions = nil
        }
    }
}
