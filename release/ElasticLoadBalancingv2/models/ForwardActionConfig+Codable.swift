// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForwardActionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case targetGroupStickinessConfig = "TargetGroupStickinessConfig"
        case targetGroups = "TargetGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let targetGroupStickinessConfig = targetGroupStickinessConfig {
            try container.encode(targetGroupStickinessConfig, forKey: Key("TargetGroupStickinessConfig"))
        }
        if let targetGroups = targetGroups {
            var targetGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TargetGroups"))
            for (index0, targetgrouptuple0) in targetGroups.enumerated() {
                try targetGroupsContainer.encode(targetgrouptuple0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.targetGroups) {
            struct KeyVal0{struct member{}}
            let targetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroups)
            if let targetGroupsWrappedContainer = targetGroupsWrappedContainer {
                let targetGroupsContainer = try targetGroupsWrappedContainer.decodeIfPresent([TargetGroupTuple].self, forKey: .member)
                var targetGroupsBuffer:[TargetGroupTuple]? = nil
                if let targetGroupsContainer = targetGroupsContainer {
                    targetGroupsBuffer = [TargetGroupTuple]()
                    for structureContainer0 in targetGroupsContainer {
                        targetGroupsBuffer?.append(structureContainer0)
                    }
                }
                targetGroups = targetGroupsBuffer
            } else {
                targetGroups = []
            }
        } else {
            targetGroups = nil
        }
        let targetGroupStickinessConfigDecoded = try containerValues.decodeIfPresent(TargetGroupStickinessConfig.self, forKey: .targetGroupStickinessConfig)
        targetGroupStickinessConfig = targetGroupStickinessConfigDecoded
    }
}
