// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SetSecurityGroupsOutputBody: Equatable {
    public let securityGroupIds: [String]?
}

extension SetSecurityGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case securityGroupIds = "SecurityGroupIds"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("SetSecurityGroupsResult"))
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct member{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var securityGroupIdsBuffer:[String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
    }
}
