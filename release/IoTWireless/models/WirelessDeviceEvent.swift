// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The event for a log message, if the log message is tied to a wireless device.</p>
public enum WirelessDeviceEvent {
    case downlinkData
    case join
    case registration
    case rejoin
    case uplinkData
    case sdkUnknown(String)
}

extension WirelessDeviceEvent : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WirelessDeviceEvent] {
        return [
            .downlinkData,
            .join,
            .registration,
            .rejoin,
            .uplinkData,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .downlinkData: return "Downlink_Data"
        case .join: return "Join"
        case .registration: return "Registration"
        case .rejoin: return "Rejoin"
        case .uplinkData: return "Uplink_Data"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WirelessDeviceEvent(rawValue: rawValue) ?? WirelessDeviceEvent.sdkUnknown(rawValue)
    }
}
