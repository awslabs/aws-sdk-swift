// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WirelessDeviceLogOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case events = "Events"
        case logLevel = "LogLevel"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for wirelessdeviceeventlogoptionlist0 in events {
                try eventsContainer.encode(wirelessdeviceeventlogoptionlist0)
            }
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WirelessDeviceType.self, forKey: .type)
        type = typeDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let eventsContainer = try containerValues.decodeIfPresent([WirelessDeviceEventLogOption].self, forKey: .events)
        var eventsDecoded0:[WirelessDeviceEventLogOption]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [WirelessDeviceEventLogOption]()
            for structure0 in eventsContainer {
                eventsDecoded0?.append(structure0)
            }
        }
        events = eventsDecoded0
    }
}
