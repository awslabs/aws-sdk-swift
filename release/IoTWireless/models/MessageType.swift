// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Sidewalk device message type.</p>
public enum MessageType {
    case customCommandIdGet
    case customCommandIdNotify
    case customCommandIdResp
    case customCommandIdSet
    case sdkUnknown(String)
}

extension MessageType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MessageType] {
        return [
            .customCommandIdGet,
            .customCommandIdNotify,
            .customCommandIdResp,
            .customCommandIdSet,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .customCommandIdGet: return "CUSTOM_COMMAND_ID_GET"
        case .customCommandIdNotify: return "CUSTOM_COMMAND_ID_NOTIFY"
        case .customCommandIdResp: return "CUSTOM_COMMAND_ID_RESP"
        case .customCommandIdSet: return "CUSTOM_COMMAND_ID_SET"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MessageType(rawValue: rawValue) ?? MessageType.sdkUnknown(rawValue)
    }
}
