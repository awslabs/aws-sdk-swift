// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoRaWANGateway: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gatewayEui = "GatewayEui"
        case joinEuiFilters = "JoinEuiFilters"
        case netIdFilters = "NetIdFilters"
        case rfRegion = "RfRegion"
        case subBands = "SubBands"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gatewayEui = gatewayEui {
            try encodeContainer.encode(gatewayEui, forKey: .gatewayEui)
        }
        if let joinEuiFilters = joinEuiFilters {
            var joinEuiFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .joinEuiFilters)
            for joineuifilters0 in joinEuiFilters {
                var joineuifilters0Container = joinEuiFiltersContainer.nestedUnkeyedContainer()
                if let joineuifilters0 = joineuifilters0 {
                    for joineuirange1 in joineuifilters0 {
                        try joineuifilters0Container.encode(joineuirange1)
                    }
                }
            }
        }
        if let netIdFilters = netIdFilters {
            var netIdFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .netIdFilters)
            for netidfilters0 in netIdFilters {
                try netIdFiltersContainer.encode(netidfilters0)
            }
        }
        if let rfRegion = rfRegion {
            try encodeContainer.encode(rfRegion, forKey: .rfRegion)
        }
        if let subBands = subBands {
            var subBandsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subBands)
            for subbands0 in subBands {
                try subBandsContainer.encode(subbands0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayEuiDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayEui)
        gatewayEui = gatewayEuiDecoded
        let rfRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rfRegion)
        rfRegion = rfRegionDecoded
        let joinEuiFiltersContainer = try containerValues.decodeIfPresent([[String]?].self, forKey: .joinEuiFilters)
        var joinEuiFiltersDecoded0:[[String]?]? = nil
        if let joinEuiFiltersContainer = joinEuiFiltersContainer {
            joinEuiFiltersDecoded0 = [[String]?]()
            for list0 in joinEuiFiltersContainer {
                var list0Decoded0 = [String]()
                if let list0 = list0 {
                    for string1 in list0 {
                        list0Decoded0.append(string1)
                    }
                }
                joinEuiFiltersDecoded0?.append(list0Decoded0)
            }
        }
        joinEuiFilters = joinEuiFiltersDecoded0
        let netIdFiltersContainer = try containerValues.decodeIfPresent([String].self, forKey: .netIdFilters)
        var netIdFiltersDecoded0:[String]? = nil
        if let netIdFiltersContainer = netIdFiltersContainer {
            netIdFiltersDecoded0 = [String]()
            for string0 in netIdFiltersContainer {
                netIdFiltersDecoded0?.append(string0)
            }
        }
        netIdFilters = netIdFiltersDecoded0
        let subBandsContainer = try containerValues.decodeIfPresent([Int].self, forKey: .subBands)
        var subBandsDecoded0:[Int]? = nil
        if let subBandsContainer = subBandsContainer {
            subBandsDecoded0 = [Int]()
            for integer0 in subBandsContainer {
                subBandsDecoded0?.append(integer0)
            }
        }
        subBands = subBandsDecoded0
    }
}
