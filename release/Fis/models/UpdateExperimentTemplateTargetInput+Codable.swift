// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateExperimentTemplateTargetInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filters
        case resourceArns
        case resourceTags
        case resourceType
        case selectionMode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for experimenttemplatetargetfilterinputlist0 in filters {
                try filtersContainer.encode(experimenttemplatetargetfilterinputlist0)
            }
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for resourcearnlist0 in resourceArns {
                try resourceArnsContainer.encode(resourcearnlist0)
            }
        }
        if let resourceTags = resourceTags {
            var resourceTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .resourceTags)
            for (dictKey0, tagmap0) in resourceTags {
                try resourceTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let selectionMode = selectionMode {
            try encodeContainer.encode(selectionMode, forKey: .selectionMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [String]()
            for string0 in resourceArnsContainer {
                resourceArnsDecoded0?.append(string0)
            }
        }
        resourceArns = resourceArnsDecoded0
        let resourceTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .resourceTags)
        var resourceTagsDecoded0: [String:String]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in resourceTagsContainer {
                resourceTagsDecoded0?[key0] = tagvalue0
            }
        }
        resourceTags = resourceTagsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ExperimentTemplateTargetInputFilter].self, forKey: .filters)
        var filtersDecoded0:[ExperimentTemplateTargetInputFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ExperimentTemplateTargetInputFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let selectionModeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .selectionMode)
        selectionMode = selectionModeDecoded
    }
}
