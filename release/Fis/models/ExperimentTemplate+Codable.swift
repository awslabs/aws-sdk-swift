// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExperimentTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case creationTime
        case description
        case id
        case lastUpdateTime
        case roleArn
        case stopConditions
        case tags
        case targets
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .actions)
            for (dictKey0, experimenttemplateactionmap0) in actions {
                try actionsContainer.encode(experimenttemplateactionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stopConditions = stopConditions {
            var stopConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stopConditions)
            for experimenttemplatestopconditionlist0 in stopConditions {
                try stopConditionsContainer.encode(experimenttemplatestopconditionlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .targets)
            for (dictKey0, experimenttemplatetargetmap0) in targets {
                try targetsContainer.encode(experimenttemplatetargetmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([String:ExperimentTemplateTarget].self, forKey: .targets)
        var targetsDecoded0: [String:ExperimentTemplateTarget]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String:ExperimentTemplateTarget]()
            for (key0, experimenttemplatetarget0) in targetsContainer {
                targetsDecoded0?[key0] = experimenttemplatetarget0
            }
        }
        targets = targetsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([String:ExperimentTemplateAction].self, forKey: .actions)
        var actionsDecoded0: [String:ExperimentTemplateAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [String:ExperimentTemplateAction]()
            for (key0, experimenttemplateaction0) in actionsContainer {
                actionsDecoded0?[key0] = experimenttemplateaction0
            }
        }
        actions = actionsDecoded0
        let stopConditionsContainer = try containerValues.decodeIfPresent([ExperimentTemplateStopCondition].self, forKey: .stopConditions)
        var stopConditionsDecoded0:[ExperimentTemplateStopCondition]? = nil
        if let stopConditionsContainer = stopConditionsContainer {
            stopConditionsDecoded0 = [ExperimentTemplateStopCondition]()
            for structure0 in stopConditionsContainer {
                stopConditionsDecoded0?.append(structure0)
            }
        }
        stopConditions = stopConditionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
