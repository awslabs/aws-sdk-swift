// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateExperimentTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case clientToken
        case description
        case roleArn
        case stopConditions
        case tags
        case targets
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .actions)
            for (dictKey0, createexperimenttemplateactioninputmap0) in actions {
                try actionsContainer.encode(createexperimenttemplateactioninputmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stopConditions = stopConditions {
            var stopConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stopConditions)
            for createexperimenttemplatestopconditioninputlist0 in stopConditions {
                try stopConditionsContainer.encode(createexperimenttemplatestopconditioninputlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .targets)
            for (dictKey0, createexperimenttemplatetargetinputmap0) in targets {
                try targetsContainer.encode(createexperimenttemplatetargetinputmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
