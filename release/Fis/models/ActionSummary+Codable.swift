// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case id
        case tags
        case targets
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .targets)
            for (dictKey0, actiontargetmap0) in targets {
                try targetsContainer.encode(actiontargetmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([String:ActionTarget].self, forKey: .targets)
        var targetsDecoded0: [String:ActionTarget]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String:ActionTarget]()
            for (key0, actiontarget0) in targetsContainer {
                targetsDecoded0?[key0] = actiontarget0
            }
        }
        targets = targetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
