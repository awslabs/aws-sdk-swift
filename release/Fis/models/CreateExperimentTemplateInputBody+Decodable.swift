// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExperimentTemplateInputBody: Equatable {
    public let clientToken: String?
    public let description: String?
    public let stopConditions: [CreateExperimentTemplateStopConditionInput]?
    public let targets: [String:CreateExperimentTemplateTargetInput]?
    public let actions: [String:CreateExperimentTemplateActionInput]?
    public let roleArn: String?
    public let tags: [String:String]?
}

extension CreateExperimentTemplateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions
        case clientToken
        case description
        case roleArn
        case stopConditions
        case tags
        case targets
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let stopConditionsContainer = try containerValues.decodeIfPresent([CreateExperimentTemplateStopConditionInput].self, forKey: .stopConditions)
        var stopConditionsDecoded0:[CreateExperimentTemplateStopConditionInput]? = nil
        if let stopConditionsContainer = stopConditionsContainer {
            stopConditionsDecoded0 = [CreateExperimentTemplateStopConditionInput]()
            for structure0 in stopConditionsContainer {
                stopConditionsDecoded0?.append(structure0)
            }
        }
        stopConditions = stopConditionsDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([String:CreateExperimentTemplateTargetInput].self, forKey: .targets)
        var targetsDecoded0: [String:CreateExperimentTemplateTargetInput]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String:CreateExperimentTemplateTargetInput]()
            for (key0, createexperimenttemplatetargetinput0) in targetsContainer {
                targetsDecoded0?[key0] = createexperimenttemplatetargetinput0
            }
        }
        targets = targetsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([String:CreateExperimentTemplateActionInput].self, forKey: .actions)
        var actionsDecoded0: [String:CreateExperimentTemplateActionInput]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [String:CreateExperimentTemplateActionInput]()
            for (key0, createexperimenttemplateactioninput0) in actionsContainer {
                actionsDecoded0?[key0] = createexperimenttemplateactioninput0
            }
        }
        actions = actionsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
