// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AdditionalConstraintsElement {
    case requireDigit
    case requireLowercase
    case requireSymbol
    case requireUppercase
    case sdkUnknown(String)
}

extension AdditionalConstraintsElement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AdditionalConstraintsElement] {
        return [
            .requireDigit,
            .requireLowercase,
            .requireSymbol,
            .requireUppercase,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .requireDigit: return "REQUIRE_DIGIT"
        case .requireLowercase: return "REQUIRE_LOWERCASE"
        case .requireSymbol: return "REQUIRE_SYMBOL"
        case .requireUppercase: return "REQUIRE_UPPERCASE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AdditionalConstraintsElement(rawValue: rawValue) ?? AdditionalConstraintsElement.sdkUnknown(rawValue)
    }
}
