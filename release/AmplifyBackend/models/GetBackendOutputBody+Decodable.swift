// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBackendOutputBody: Equatable {
    public let amplifyMetaConfig: String?
    public let appId: String?
    public let appName: String?
    public let backendEnvironmentList: [String]?
    public let backendEnvironmentName: String?
    public let error: String?
}

extension GetBackendOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case amplifyMetaConfig = "amplifyMetaConfig"
        case appId = "appId"
        case appName = "appName"
        case backendEnvironmentList = "backendEnvironmentList"
        case backendEnvironmentName = "backendEnvironmentName"
        case error = "error"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amplifyMetaConfigDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amplifyMetaConfig)
        amplifyMetaConfig = amplifyMetaConfigDecoded
        let appIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appId)
        appId = appIdDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appName)
        appName = appNameDecoded
        let backendEnvironmentListContainer = try containerValues.decodeIfPresent([String].self, forKey: .backendEnvironmentList)
        var backendEnvironmentListDecoded0:[String]? = nil
        if let backendEnvironmentListContainer = backendEnvironmentListContainer {
            backendEnvironmentListDecoded0 = [String]()
            for string0 in backendEnvironmentListContainer {
                backendEnvironmentListDecoded0?.append(string0)
            }
        }
        backendEnvironmentList = backendEnvironmentListDecoded0
        let backendEnvironmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backendEnvironmentName)
        backendEnvironmentName = backendEnvironmentNameDecoded
        let errorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .error)
        error = errorDecoded
    }
}
