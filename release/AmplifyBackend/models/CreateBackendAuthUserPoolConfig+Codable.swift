// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateBackendAuthUserPoolConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case forgotPassword = "forgotPassword"
        case mfa = "mfa"
        case oAuth = "oAuth"
        case passwordPolicy = "passwordPolicy"
        case requiredSignUpAttributes = "requiredSignUpAttributes"
        case signInMethod = "signInMethod"
        case userPoolName = "userPoolName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let forgotPassword = forgotPassword {
            try encodeContainer.encode(forgotPassword, forKey: .forgotPassword)
        }
        if let mfa = mfa {
            try encodeContainer.encode(mfa, forKey: .mfa)
        }
        if let oAuth = oAuth {
            try encodeContainer.encode(oAuth, forKey: .oAuth)
        }
        if let passwordPolicy = passwordPolicy {
            try encodeContainer.encode(passwordPolicy, forKey: .passwordPolicy)
        }
        if let requiredSignUpAttributes = requiredSignUpAttributes {
            var requiredSignUpAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiredSignUpAttributes)
            for listofrequiredsignupattributeselement0 in requiredSignUpAttributes {
                try requiredSignUpAttributesContainer.encode(listofrequiredsignupattributeselement0.rawValue)
            }
        }
        if let signInMethod = signInMethod {
            try encodeContainer.encode(signInMethod.rawValue, forKey: .signInMethod)
        }
        if let userPoolName = userPoolName {
            try encodeContainer.encode(userPoolName, forKey: .userPoolName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let forgotPasswordDecoded = try containerValues.decodeIfPresent(CreateBackendAuthForgotPasswordConfig.self, forKey: .forgotPassword)
        forgotPassword = forgotPasswordDecoded
        let mfaDecoded = try containerValues.decodeIfPresent(CreateBackendAuthMFAConfig.self, forKey: .mfa)
        mfa = mfaDecoded
        let oAuthDecoded = try containerValues.decodeIfPresent(CreateBackendAuthOAuthConfig.self, forKey: .oAuth)
        oAuth = oAuthDecoded
        let passwordPolicyDecoded = try containerValues.decodeIfPresent(CreateBackendAuthPasswordPolicyConfig.self, forKey: .passwordPolicy)
        passwordPolicy = passwordPolicyDecoded
        let requiredSignUpAttributesContainer = try containerValues.decodeIfPresent([RequiredSignUpAttributesElement].self, forKey: .requiredSignUpAttributes)
        var requiredSignUpAttributesDecoded0:[RequiredSignUpAttributesElement]? = nil
        if let requiredSignUpAttributesContainer = requiredSignUpAttributesContainer {
            requiredSignUpAttributesDecoded0 = [RequiredSignUpAttributesElement]()
            for string0 in requiredSignUpAttributesContainer {
                requiredSignUpAttributesDecoded0?.append(string0)
            }
        }
        requiredSignUpAttributes = requiredSignUpAttributesDecoded0
        let signInMethodDecoded = try containerValues.decodeIfPresent(SignInMethod.self, forKey: .signInMethod)
        signInMethod = signInMethodDecoded
        let userPoolNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolName)
        userPoolName = userPoolNameDecoded
    }
}
