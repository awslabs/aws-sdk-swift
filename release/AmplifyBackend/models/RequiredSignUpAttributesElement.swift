// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum RequiredSignUpAttributesElement {
    case address
    case birthdate
    case email
    case familyName
    case gender
    case givenName
    case locale
    case middleName
    case name
    case nickname
    case phoneNumber
    case picture
    case preferredUsername
    case profile
    case updatedAt
    case website
    case zoneInfo
    case sdkUnknown(String)
}

extension RequiredSignUpAttributesElement : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RequiredSignUpAttributesElement] {
        return [
            .address,
            .birthdate,
            .email,
            .familyName,
            .gender,
            .givenName,
            .locale,
            .middleName,
            .name,
            .nickname,
            .phoneNumber,
            .picture,
            .preferredUsername,
            .profile,
            .updatedAt,
            .website,
            .zoneInfo,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .address: return "ADDRESS"
        case .birthdate: return "BIRTHDATE"
        case .email: return "EMAIL"
        case .familyName: return "FAMILY_NAME"
        case .gender: return "GENDER"
        case .givenName: return "GIVEN_NAME"
        case .locale: return "LOCALE"
        case .middleName: return "MIDDLE_NAME"
        case .name: return "NAME"
        case .nickname: return "NICKNAME"
        case .phoneNumber: return "PHONE_NUMBER"
        case .picture: return "PICTURE"
        case .preferredUsername: return "PREFERRED_USERNAME"
        case .profile: return "PROFILE"
        case .updatedAt: return "UPDATED_AT"
        case .website: return "WEBSITE"
        case .zoneInfo: return "ZONE_INFO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RequiredSignUpAttributesElement(rawValue: rawValue) ?? RequiredSignUpAttributesElement.sdkUnknown(rawValue)
    }
}
