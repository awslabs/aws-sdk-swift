// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LanguageCode {
    case arb
    case cmnCn
    case cyGb
    case daDk
    case deDe
    case enAu
    case enGb
    case enGbWls
    case enIn
    case enUs
    case esEs
    case esMx
    case esUs
    case frCa
    case frFr
    case hiIn
    case isIs
    case itIt
    case jaJp
    case koKr
    case nbNo
    case nlNl
    case plPl
    case ptBr
    case ptPt
    case roRo
    case ruRu
    case svSe
    case trTr
    case sdkUnknown(String)
}

extension LanguageCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LanguageCode] {
        return [
            .arb,
            .cmnCn,
            .cyGb,
            .daDk,
            .deDe,
            .enAu,
            .enGb,
            .enGbWls,
            .enIn,
            .enUs,
            .esEs,
            .esMx,
            .esUs,
            .frCa,
            .frFr,
            .hiIn,
            .isIs,
            .itIt,
            .jaJp,
            .koKr,
            .nbNo,
            .nlNl,
            .plPl,
            .ptBr,
            .ptPt,
            .roRo,
            .ruRu,
            .svSe,
            .trTr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .arb: return "arb"
        case .cmnCn: return "cmn-CN"
        case .cyGb: return "cy-GB"
        case .daDk: return "da-DK"
        case .deDe: return "de-DE"
        case .enAu: return "en-AU"
        case .enGb: return "en-GB"
        case .enGbWls: return "en-GB-WLS"
        case .enIn: return "en-IN"
        case .enUs: return "en-US"
        case .esEs: return "es-ES"
        case .esMx: return "es-MX"
        case .esUs: return "es-US"
        case .frCa: return "fr-CA"
        case .frFr: return "fr-FR"
        case .hiIn: return "hi-IN"
        case .isIs: return "is-IS"
        case .itIt: return "it-IT"
        case .jaJp: return "ja-JP"
        case .koKr: return "ko-KR"
        case .nbNo: return "nb-NO"
        case .nlNl: return "nl-NL"
        case .plPl: return "pl-PL"
        case .ptBr: return "pt-BR"
        case .ptPt: return "pt-PT"
        case .roRo: return "ro-RO"
        case .ruRu: return "ru-RU"
        case .svSe: return "sv-SE"
        case .trTr: return "tr-TR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
    }
}
