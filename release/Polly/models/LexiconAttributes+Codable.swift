// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexiconAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alphabet = "Alphabet"
        case languageCode = "LanguageCode"
        case lastModified = "LastModified"
        case lexemesCount = "LexemesCount"
        case lexiconArn = "LexiconArn"
        case size = "Size"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alphabet = alphabet {
            try encodeContainer.encode(alphabet, forKey: .alphabet)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified.timeIntervalSince1970, forKey: .lastModified)
        }
        if lexemesCount != 0 {
            try encodeContainer.encode(lexemesCount, forKey: .lexemesCount)
        }
        if let lexiconArn = lexiconArn {
            try encodeContainer.encode(lexiconArn, forKey: .lexiconArn)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alphabetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alphabet)
        alphabet = alphabetDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let lexiconArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lexiconArn)
        lexiconArn = lexiconArnDecoded
        let lexemesCountDecoded = try containerValues.decode(Int.self, forKey: .lexemesCount)
        lexemesCount = lexemesCountDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
    }
}
