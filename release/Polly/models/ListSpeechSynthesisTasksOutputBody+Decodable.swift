// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSpeechSynthesisTasksOutputBody: Equatable {
    public let nextToken: String?
    public let synthesisTasks: [SynthesisTask]?
}

extension ListSpeechSynthesisTasksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case synthesisTasks = "SynthesisTasks"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let synthesisTasksContainer = try containerValues.decodeIfPresent([SynthesisTask].self, forKey: .synthesisTasks)
        var synthesisTasksDecoded0:[SynthesisTask]? = nil
        if let synthesisTasksContainer = synthesisTasksContainer {
            synthesisTasksDecoded0 = [SynthesisTask]()
            for structure0 in synthesisTasksContainer {
                synthesisTasksDecoded0?.append(structure0)
            }
        }
        synthesisTasks = synthesisTasksDecoded0
    }
}
