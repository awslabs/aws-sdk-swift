// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SynthesizeSpeechInputBody: Equatable {
    public let engine: Engine?
    public let languageCode: LanguageCode?
    public let lexiconNames: [String]?
    public let outputFormat: OutputFormat?
    public let sampleRate: String?
    public let speechMarkTypes: [SpeechMarkType]?
    public let text: String?
    public let textType: TextType?
    public let voiceId: VoiceId?
}

extension SynthesizeSpeechInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case sampleRate = "SampleRate"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(Engine.self, forKey: .engine)
        engine = engineDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lexiconNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .lexiconNames)
        var lexiconNamesDecoded0:[String]? = nil
        if let lexiconNamesContainer = lexiconNamesContainer {
            lexiconNamesDecoded0 = [String]()
            for string0 in lexiconNamesContainer {
                lexiconNamesDecoded0?.append(string0)
            }
        }
        lexiconNames = lexiconNamesDecoded0
        let outputFormatDecoded = try containerValues.decodeIfPresent(OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechMarkTypesContainer = try containerValues.decodeIfPresent([SpeechMarkType].self, forKey: .speechMarkTypes)
        var speechMarkTypesDecoded0:[SpeechMarkType]? = nil
        if let speechMarkTypesContainer = speechMarkTypesContainer {
            speechMarkTypesDecoded0 = [SpeechMarkType]()
            for string0 in speechMarkTypesContainer {
                speechMarkTypesDecoded0?.append(string0)
            }
        }
        speechMarkTypes = speechMarkTypesDecoded0
        let textDecoded = try containerValues.decodeIfPresent(String.self, forKey: .text)
        text = textDecoded
        let textTypeDecoded = try containerValues.decodeIfPresent(TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(VoiceId.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}
