// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Voice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalLanguageCodes = "AdditionalLanguageCodes"
        case gender = "Gender"
        case id = "Id"
        case languageCode = "LanguageCode"
        case languageName = "LanguageName"
        case name = "Name"
        case supportedEngines = "SupportedEngines"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLanguageCodes = additionalLanguageCodes {
            var additionalLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLanguageCodes)
            for languagecodelist0 in additionalLanguageCodes {
                try additionalLanguageCodesContainer.encode(languagecodelist0.rawValue)
            }
        }
        if let gender = gender {
            try encodeContainer.encode(gender.rawValue, forKey: .gender)
        }
        if let id = id {
            try encodeContainer.encode(id.rawValue, forKey: .id)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageName = languageName {
            try encodeContainer.encode(languageName, forKey: .languageName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedEngines = supportedEngines {
            var supportedEnginesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedEngines)
            for enginelist0 in supportedEngines {
                try supportedEnginesContainer.encode(enginelist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let genderDecoded = try containerValues.decodeIfPresent(Gender.self, forKey: .gender)
        gender = genderDecoded
        let idDecoded = try containerValues.decodeIfPresent(VoiceId.self, forKey: .id)
        id = idDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .languageName)
        languageName = languageNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let additionalLanguageCodesContainer = try containerValues.decodeIfPresent([LanguageCode].self, forKey: .additionalLanguageCodes)
        var additionalLanguageCodesDecoded0:[LanguageCode]? = nil
        if let additionalLanguageCodesContainer = additionalLanguageCodesContainer {
            additionalLanguageCodesDecoded0 = [LanguageCode]()
            for string0 in additionalLanguageCodesContainer {
                additionalLanguageCodesDecoded0?.append(string0)
            }
        }
        additionalLanguageCodes = additionalLanguageCodesDecoded0
        let supportedEnginesContainer = try containerValues.decodeIfPresent([Engine].self, forKey: .supportedEngines)
        var supportedEnginesDecoded0:[Engine]? = nil
        if let supportedEnginesContainer = supportedEnginesContainer {
            supportedEnginesDecoded0 = [Engine]()
            for string0 in supportedEnginesContainer {
                supportedEnginesDecoded0?.append(string0)
            }
        }
        supportedEngines = supportedEnginesDecoded0
    }
}
