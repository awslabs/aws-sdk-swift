// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class PollyClient {
    let client: SdkHttpClient
    let config: PollyClientConfiguration
    let serviceName = "Polly"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: PollyClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class PollyClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> PollyClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try PollyClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension PollyClient: PollyClientProtocol {
    /// <p>Deletes the specified pronunciation lexicon stored in an AWS Region. A lexicon which
    ///       has been deleted is not available for speech synthesis, nor is it possible to retrieve it
    ///       using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    public func deleteLexicon(input: DeleteLexiconInput, completion: @escaping (SdkResult<DeleteLexiconOutputResponse, DeleteLexiconOutputError>) -> Void)
    {
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/v1/lexicons/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLexicon")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLexiconInput, DeleteLexiconOutputResponse, DeleteLexiconOutputError>(id: "deleteLexicon")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteLexiconInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLexiconInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLexiconInput, DeleteLexiconOutputResponse, DeleteLexiconOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the list of voices that are available for use when requesting speech synthesis.
    ///       Each voice speaks a specified language, is either male or female, and is identified by an ID,
    ///       which is the ASCII version of the voice name. </p>
    ///
    ///          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID
    ///       for the voice you want from the list of voices returned by
    ///       <code>DescribeVoices</code>.</p>
    ///
    ///          <p>For example, you want your news reader application to read news in a specific language,
    ///       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>
    ///       operation you can provide the user with a list of available voices to select from.</p>
    ///
    ///          <p> You can optionally specify a language code to filter the available voices. For
    ///       example, if you specify <code>en-US</code>, the operation returns a list of all available US
    ///       English voices. </p>
    ///          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>
    ///       action.</p>
    public func describeVoices(input: DescribeVoicesInput, completion: @escaping (SdkResult<DescribeVoicesOutputResponse, DescribeVoicesOutputError>) -> Void)
    {
        let urlPath = "/v1/voices"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeVoices")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeVoicesInput, DescribeVoicesOutputResponse, DescribeVoicesOutputError>(id: "describeVoices")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeVoicesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeVoicesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeVoicesInput, DescribeVoicesOutputResponse, DescribeVoicesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For
    ///       more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    public func getLexicon(input: GetLexiconInput, completion: @escaping (SdkResult<GetLexiconOutputResponse, GetLexiconOutputError>) -> Void)
    {
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/v1/lexicons/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLexicon")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLexiconInput, GetLexiconOutputResponse, GetLexiconOutputError>(id: "getLexicon")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLexiconInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLexiconInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLexiconInput, GetLexiconOutputResponse, GetLexiconOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains
    ///       information about the given speech synthesis task, including the status of the task, and a
    ///       link to the S3 bucket containing the output of the task.</p>
    public func getSpeechSynthesisTask(input: GetSpeechSynthesisTaskInput, completion: @escaping (SdkResult<GetSpeechSynthesisTaskOutputResponse, GetSpeechSynthesisTaskOutputError>) -> Void)
    {
        guard let taskId = input.taskId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component taskId unexpectedly nil"))))
            return
        }
        let urlPath = "/v1/synthesisTasks/\(taskId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSpeechSynthesisTask")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSpeechSynthesisTaskInput, GetSpeechSynthesisTaskOutputResponse, GetSpeechSynthesisTaskOutputError>(id: "getSpeechSynthesisTask")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSpeechSynthesisTaskInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSpeechSynthesisTaskInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSpeechSynthesisTaskInput, GetSpeechSynthesisTaskOutputResponse, GetSpeechSynthesisTaskOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of pronunciation lexicons stored in an AWS Region. For more information,
    ///       see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    public func listLexicons(input: ListLexiconsInput, completion: @escaping (SdkResult<ListLexiconsOutputResponse, ListLexiconsOutputError>) -> Void)
    {
        let urlPath = "/v1/lexicons"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLexicons")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLexiconsInput, ListLexiconsOutputResponse, ListLexiconsOutputError>(id: "listLexicons")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLexiconsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLexiconsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLexiconsInput, ListLexiconsOutputResponse, ListLexiconsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of SpeechSynthesisTask objects ordered by their creation date. This
    ///       operation can filter the tasks by their status, for example, allowing users to list only tasks
    ///       that are completed.</p>
    public func listSpeechSynthesisTasks(input: ListSpeechSynthesisTasksInput, completion: @escaping (SdkResult<ListSpeechSynthesisTasksOutputResponse, ListSpeechSynthesisTasksOutputError>) -> Void)
    {
        let urlPath = "/v1/synthesisTasks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listSpeechSynthesisTasks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListSpeechSynthesisTasksInput, ListSpeechSynthesisTasksOutputResponse, ListSpeechSynthesisTasksOutputError>(id: "listSpeechSynthesisTasks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListSpeechSynthesisTasksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListSpeechSynthesisTasksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListSpeechSynthesisTasksInput, ListSpeechSynthesisTasksOutputResponse, ListSpeechSynthesisTasksOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name
    ///       already exists in the region, it is overwritten by the new lexicon. Lexicon operations have
    ///       eventual consistency, therefore, it might take some time before the lexicon is available to
    ///       the SynthesizeSpeech operation.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    public func putLexicon(input: PutLexiconInput, completion: @escaping (SdkResult<PutLexiconOutputResponse, PutLexiconOutputError>) -> Void)
    {
        guard let name = input.name else {
            completion(.failure(.client(ClientError.serializationFailed("uri component name unexpectedly nil"))))
            return
        }
        let urlPath = "/v1/lexicons/\(name)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putLexicon")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutLexiconInput, PutLexiconOutputResponse, PutLexiconOutputError>(id: "putLexicon")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutLexiconInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutLexiconInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutLexiconInput, PutLexiconOutputResponse, PutLexiconOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutLexiconInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Allows the creation of an asynchronous synthesis task, by starting a new
    ///         <code>SpeechSynthesisTask</code>. This operation requires all the standard information
    ///       needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the
    ///       output of the synthesis task and two optional parameters (OutputS3KeyPrefix and SnsTopicArn).
    ///       Once the synthesis task is created, this operation will return a SpeechSynthesisTask object,
    ///       which will include an identifier of this task as well as the current status.</p>
    public func startSpeechSynthesisTask(input: StartSpeechSynthesisTaskInput, completion: @escaping (SdkResult<StartSpeechSynthesisTaskOutputResponse, StartSpeechSynthesisTaskOutputError>) -> Void)
    {
        let urlPath = "/v1/synthesisTasks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startSpeechSynthesisTask")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartSpeechSynthesisTaskInput, StartSpeechSynthesisTaskOutputResponse, StartSpeechSynthesisTaskOutputError>(id: "startSpeechSynthesisTask")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartSpeechSynthesisTaskInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartSpeechSynthesisTaskInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartSpeechSynthesisTaskInput, StartSpeechSynthesisTaskOutputResponse, StartSpeechSynthesisTaskOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: StartSpeechSynthesisTaskInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be
    ///       valid, well-formed SSML. Some alphabets might not be available with all the voices (for
    ///       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.
    ///       For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it
    ///         Works</a>.</p>
    public func synthesizeSpeech(input: SynthesizeSpeechInput, streamSink: StreamSink, completion: @escaping (SdkResult<SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>) -> Void)
    {
        let urlPath = "/v1/speech"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "synthesizeSpeech")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "polly.\(config.region).amazonaws.com")
                      .withSigningName(value: "polly")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SynthesizeSpeechInput, SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>(id: "synthesizeSpeech")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SynthesizeSpeechInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SynthesizeSpeechInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SynthesizeSpeechInput, SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SynthesizeSpeechInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
