// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon Polly is a web service that makes it easy to synthesize speech from
///       text.</p>
///          <p>The Amazon Polly service provides API operations for synthesizing high-quality speech
///       from plain text and Speech Synthesis Markup Language (SSML), along with managing
///       pronunciations lexicons that enable you to get the best results for your application
///       domain.</p>
public protocol PollyClientProtocol {
    /// <p>Deletes the specified pronunciation lexicon stored in an AWS Region. A lexicon which
    ///       has been deleted is not available for speech synthesis, nor is it possible to retrieve it
    ///       using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    func deleteLexicon(input: DeleteLexiconInput, completion: @escaping (SdkResult<DeleteLexiconOutputResponse, DeleteLexiconOutputError>) -> Void)
    /// <p>Returns the list of voices that are available for use when requesting speech synthesis.
    ///       Each voice speaks a specified language, is either male or female, and is identified by an ID,
    ///       which is the ASCII version of the voice name. </p>
    ///
    ///          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID
    ///       for the voice you want from the list of voices returned by
    ///       <code>DescribeVoices</code>.</p>
    ///
    ///          <p>For example, you want your news reader application to read news in a specific language,
    ///       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>
    ///       operation you can provide the user with a list of available voices to select from.</p>
    ///
    ///          <p> You can optionally specify a language code to filter the available voices. For
    ///       example, if you specify <code>en-US</code>, the operation returns a list of all available US
    ///       English voices. </p>
    ///          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>
    ///       action.</p>
    func describeVoices(input: DescribeVoicesInput, completion: @escaping (SdkResult<DescribeVoicesOutputResponse, DescribeVoicesOutputError>) -> Void)
    /// <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For
    ///       more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    func getLexicon(input: GetLexiconInput, completion: @escaping (SdkResult<GetLexiconOutputResponse, GetLexiconOutputError>) -> Void)
    /// <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains
    ///       information about the given speech synthesis task, including the status of the task, and a
    ///       link to the S3 bucket containing the output of the task.</p>
    func getSpeechSynthesisTask(input: GetSpeechSynthesisTaskInput, completion: @escaping (SdkResult<GetSpeechSynthesisTaskOutputResponse, GetSpeechSynthesisTaskOutputError>) -> Void)
    /// <p>Returns a list of pronunciation lexicons stored in an AWS Region. For more information,
    ///       see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    func listLexicons(input: ListLexiconsInput, completion: @escaping (SdkResult<ListLexiconsOutputResponse, ListLexiconsOutputError>) -> Void)
    /// <p>Returns a list of SpeechSynthesisTask objects ordered by their creation date. This
    ///       operation can filter the tasks by their status, for example, allowing users to list only tasks
    ///       that are completed.</p>
    func listSpeechSynthesisTasks(input: ListSpeechSynthesisTasksInput, completion: @escaping (SdkResult<ListSpeechSynthesisTasksOutputResponse, ListSpeechSynthesisTasksOutputError>) -> Void)
    /// <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name
    ///       already exists in the region, it is overwritten by the new lexicon. Lexicon operations have
    ///       eventual consistency, therefore, it might take some time before the lexicon is available to
    ///       the SynthesizeSpeech operation.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
    ///         Lexicons</a>.</p>
    func putLexicon(input: PutLexiconInput, completion: @escaping (SdkResult<PutLexiconOutputResponse, PutLexiconOutputError>) -> Void)
    /// <p>Allows the creation of an asynchronous synthesis task, by starting a new
    ///         <code>SpeechSynthesisTask</code>. This operation requires all the standard information
    ///       needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the
    ///       output of the synthesis task and two optional parameters (OutputS3KeyPrefix and SnsTopicArn).
    ///       Once the synthesis task is created, this operation will return a SpeechSynthesisTask object,
    ///       which will include an identifier of this task as well as the current status.</p>
    func startSpeechSynthesisTask(input: StartSpeechSynthesisTaskInput, completion: @escaping (SdkResult<StartSpeechSynthesisTaskOutputResponse, StartSpeechSynthesisTaskOutputError>) -> Void)
    /// <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be
    ///       valid, well-formed SSML. Some alphabets might not be available with all the voices (for
    ///       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.
    ///       For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it
    ///         Works</a>.</p>
    func synthesizeSpeech(input: SynthesizeSpeechInput, streamSink: StreamSink, completion: @escaping (SdkResult<SynthesizeSpeechOutputResponse, SynthesizeSpeechOutputError>) -> Void)
}
