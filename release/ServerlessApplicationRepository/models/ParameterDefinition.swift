// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Parameters supported by the application.</p>
public struct ParameterDefinition: Equatable {
    /// <p>A regular expression that represents the patterns to allow for String types.</p>
    public let allowedPattern: String?
    /// <p>An array containing the list of values allowed for the parameter.</p>
    public let allowedValues: [String]?
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description,
    ///  a parameter that has an allowed pattern of [A-Za-z0-9]+ displays the following error message when the user
    ///  specifies an invalid value:</p><p>
    ///  Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+
    ///  </p><p>By adding a constraint description, such as "must contain only uppercase and lowercase letters and numbers," you can display
    ///  the following customized error message:</p><p>
    ///  Malformed input-Parameter MyParameter must contain only uppercase and lowercase letters and numbers.
    ///  </p>
    public let constraintDescription: String?
    /// <p>A value of the appropriate type for the template to use if no value is specified when a stack is created.
    ///  If you define constraints for the parameter, you must specify a value that adheres to those constraints.</p>
    public let defaultValue: String?
    /// <p>A string of up to 4,000 characters that describes the parameter.</p>
    public let description: String?
    /// <p>An integer value that determines the largest number of characters that you want to allow for String types.</p>
    public let maxLength: Int
    /// <p>A numeric value that determines the largest numeric value that you want to allow for Number types.</p>
    public let maxValue: Int
    /// <p>An integer value that determines the smallest number of characters that you want to allow for String types.</p>
    public let minLength: Int
    /// <p>A numeric value that determines the smallest numeric value that you want to allow for Number types.</p>
    public let minValue: Int
    /// <p>The name of the parameter.</p>
    public let name: String?
    /// <p>Whether to mask the parameter value whenever anyone makes a call that describes the stack. If you set the
    ///  value to true, the parameter value is masked with asterisks (*****).</p>
    public let noEcho: Bool
    /// <p>A list of AWS SAM resources that use this parameter.</p>
    public let referencedByResources: [String]?
    /// <p>The type of the parameter.</p><p>Valid values: String | Number | List&lt;Number> | CommaDelimitedList
    ///  </p><p>
    ///  String: A literal string.</p><p>For example, users can specify "MyUserName".</p><p>
    ///  Number: An integer or float. AWS CloudFormation validates the parameter value as a number. However, when you use the
    ///  parameter elsewhere in your template (for example, by using the Ref intrinsic function), the parameter value becomes a string.</p><p>For example, users might specify "8888".</p><p>
    ///  List&lt;Number>: An array of integers or floats that are separated by commas. AWS CloudFormation validates the parameter value as numbers. However, when
    ///  you use the parameter elsewhere in your template (for example, by using the Ref intrinsic function), the parameter value becomes a list of strings.</p><p>For example, users might specify "80,20", and then Ref results in ["80","20"].</p><p>
    ///  CommaDelimitedList: An array of literal strings that are separated by commas. The total number of strings should be one more than the total number of commas.
    ///  Also, each member string is space-trimmed.</p><p>For example, users might specify "test,dev,prod", and then Ref results in ["test","dev","prod"].</p>
    public let type: String?

    public init (
        allowedPattern: String? = nil,
        allowedValues: [String]? = nil,
        constraintDescription: String? = nil,
        defaultValue: String? = nil,
        description: String? = nil,
        maxLength: Int = 0,
        maxValue: Int = 0,
        minLength: Int = 0,
        minValue: Int = 0,
        name: String? = nil,
        noEcho: Bool = false,
        referencedByResources: [String]? = nil,
        type: String? = nil
    )
    {
        self.allowedPattern = allowedPattern
        self.allowedValues = allowedValues
        self.constraintDescription = constraintDescription
        self.defaultValue = defaultValue
        self.description = description
        self.maxLength = maxLength
        self.maxValue = maxValue
        self.minLength = minLength
        self.minValue = minValue
        self.name = name
        self.noEcho = noEcho
        self.referencedByResources = referencedByResources
        self.type = type
    }
}
