// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case author = "author"
        case description = "description"
        case homePageUrl = "homePageUrl"
        case labels = "labels"
        case licenseBody = "licenseBody"
        case licenseUrl = "licenseUrl"
        case name = "name"
        case readmeBody = "readmeBody"
        case readmeUrl = "readmeUrl"
        case semanticVersion = "semanticVersion"
        case sourceCodeArchiveUrl = "sourceCodeArchiveUrl"
        case sourceCodeUrl = "sourceCodeUrl"
        case spdxLicenseId = "spdxLicenseId"
        case templateBody = "templateBody"
        case templateUrl = "templateUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let author = author {
            try encodeContainer.encode(author, forKey: .author)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let homePageUrl = homePageUrl {
            try encodeContainer.encode(homePageUrl, forKey: .homePageUrl)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for __listof__string0 in labels {
                try labelsContainer.encode(__listof__string0)
            }
        }
        if let licenseBody = licenseBody {
            try encodeContainer.encode(licenseBody, forKey: .licenseBody)
        }
        if let licenseUrl = licenseUrl {
            try encodeContainer.encode(licenseUrl, forKey: .licenseUrl)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readmeBody = readmeBody {
            try encodeContainer.encode(readmeBody, forKey: .readmeBody)
        }
        if let readmeUrl = readmeUrl {
            try encodeContainer.encode(readmeUrl, forKey: .readmeUrl)
        }
        if let semanticVersion = semanticVersion {
            try encodeContainer.encode(semanticVersion, forKey: .semanticVersion)
        }
        if let sourceCodeArchiveUrl = sourceCodeArchiveUrl {
            try encodeContainer.encode(sourceCodeArchiveUrl, forKey: .sourceCodeArchiveUrl)
        }
        if let sourceCodeUrl = sourceCodeUrl {
            try encodeContainer.encode(sourceCodeUrl, forKey: .sourceCodeUrl)
        }
        if let spdxLicenseId = spdxLicenseId {
            try encodeContainer.encode(spdxLicenseId, forKey: .spdxLicenseId)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
        if let templateUrl = templateUrl {
            try encodeContainer.encode(templateUrl, forKey: .templateUrl)
        }
    }
}
