// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationOutputBody: Equatable {
    public let applicationId: String?
    public let author: String?
    public let creationTime: String?
    public let description: String?
    public let homePageUrl: String?
    public let isVerifiedAuthor: Bool
    public let labels: [String]?
    public let licenseUrl: String?
    public let name: String?
    public let readmeUrl: String?
    public let spdxLicenseId: String?
    public let verifiedAuthorUrl: String?
    public let version: Version?
}

extension CreateApplicationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationId = "applicationId"
        case author = "author"
        case creationTime = "creationTime"
        case description = "description"
        case homePageUrl = "homePageUrl"
        case isVerifiedAuthor = "isVerifiedAuthor"
        case labels = "labels"
        case licenseUrl = "licenseUrl"
        case name = "name"
        case readmeUrl = "readmeUrl"
        case spdxLicenseId = "spdxLicenseId"
        case verifiedAuthorUrl = "verifiedAuthorUrl"
        case version = "version"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let authorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .author)
        author = authorDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let homePageUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .homePageUrl)
        homePageUrl = homePageUrlDecoded
        let isVerifiedAuthorDecoded = try containerValues.decode(Bool.self, forKey: .isVerifiedAuthor)
        isVerifiedAuthor = isVerifiedAuthorDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String].self, forKey: .labels)
        var labelsDecoded0:[String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String]()
            for string0 in labelsContainer {
                labelsDecoded0?.append(string0)
            }
        }
        labels = labelsDecoded0
        let licenseUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseUrl)
        licenseUrl = licenseUrlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let readmeUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .readmeUrl)
        readmeUrl = readmeUrlDecoded
        let spdxLicenseIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .spdxLicenseId)
        spdxLicenseId = spdxLicenseIdDecoded
        let verifiedAuthorUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .verifiedAuthorUrl)
        verifiedAuthorUrl = verifiedAuthorUrlDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Version.self, forKey: .version)
        version = versionDecoded
    }
}
