// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VersionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId = "applicationId"
        case creationTime = "creationTime"
        case semanticVersion = "semanticVersion"
        case sourceCodeUrl = "sourceCodeUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let semanticVersion = semanticVersion {
            try encodeContainer.encode(semanticVersion, forKey: .semanticVersion)
        }
        if let sourceCodeUrl = sourceCodeUrl {
            try encodeContainer.encode(sourceCodeUrl, forKey: .sourceCodeUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let sourceCodeUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCodeUrl)
        sourceCodeUrl = sourceCodeUrlDecoded
    }
}
