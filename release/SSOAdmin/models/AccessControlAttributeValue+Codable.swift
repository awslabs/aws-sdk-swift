// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessControlAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let source = source {
            var sourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .source)
            for accesscontrolattributevaluesourcelist0 in source {
                try sourceContainer.encode(accesscontrolattributevaluesourcelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceContainer = try containerValues.decodeIfPresent([String].self, forKey: .source)
        var sourceDecoded0:[String]? = nil
        if let sourceContainer = sourceContainer {
            sourceDecoded0 = [String]()
            for string0 in sourceContainer {
                sourceDecoded0?.append(string0)
            }
        }
        source = sourceDecoded0
    }
}
