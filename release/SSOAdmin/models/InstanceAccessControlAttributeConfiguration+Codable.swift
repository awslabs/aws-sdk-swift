// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceAccessControlAttributeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControlAttributes = "AccessControlAttributes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlAttributes = accessControlAttributes {
            var accessControlAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessControlAttributes)
            for accesscontrolattributelist0 in accessControlAttributes {
                try accessControlAttributesContainer.encode(accesscontrolattributelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlAttributesContainer = try containerValues.decodeIfPresent([AccessControlAttribute].self, forKey: .accessControlAttributes)
        var accessControlAttributesDecoded0:[AccessControlAttribute]? = nil
        if let accessControlAttributesContainer = accessControlAttributesContainer {
            accessControlAttributesDecoded0 = [AccessControlAttribute]()
            for structure0 in accessControlAttributesContainer {
                accessControlAttributesDecoded0?.append(structure0)
            }
        }
        accessControlAttributes = accessControlAttributesDecoded0
    }
}
