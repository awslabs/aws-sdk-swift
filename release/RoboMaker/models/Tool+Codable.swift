// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Tool: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case command
        case exitBehavior
        case name
        case streamOutputToCloudWatch
        case streamUI
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let exitBehavior = exitBehavior {
            try encodeContainer.encode(exitBehavior.rawValue, forKey: .exitBehavior)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let streamOutputToCloudWatch = streamOutputToCloudWatch {
            try encodeContainer.encode(streamOutputToCloudWatch, forKey: .streamOutputToCloudWatch)
        }
        if let streamUI = streamUI {
            try encodeContainer.encode(streamUI, forKey: .streamUI)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamUIDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .streamUI)
        streamUI = streamUIDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let commandDecoded = try containerValues.decodeIfPresent(String.self, forKey: .command)
        command = commandDecoded
        let streamOutputToCloudWatchDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .streamOutputToCloudWatch)
        streamOutputToCloudWatch = streamOutputToCloudWatchDecoded
        let exitBehaviorDecoded = try containerValues.decodeIfPresent(ExitBehavior.self, forKey: .exitBehavior)
        exitBehavior = exitBehaviorDecoded
    }
}
