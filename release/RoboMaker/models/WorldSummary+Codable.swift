// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorldSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case createdAt
        case generationJob
        case template
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let generationJob = generationJob {
            try encodeContainer.encode(generationJob, forKey: .generationJob)
        }
        if let template = template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let generationJobDecoded = try containerValues.decodeIfPresent(String.self, forKey: .generationJob)
        generationJob = generationJobDecoded
        let templateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .template)
        template = templateDecoded
    }
}
