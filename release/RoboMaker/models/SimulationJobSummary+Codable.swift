// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SimulationJobSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case dataSourceNames
        case lastUpdatedAt
        case name
        case robotApplicationNames
        case simulationApplicationNames
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let dataSourceNames = dataSourceNames {
            var dataSourceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSourceNames)
            for datasourcenames0 in dataSourceNames {
                try dataSourceNamesContainer.encode(datasourcenames0)
            }
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let robotApplicationNames = robotApplicationNames {
            var robotApplicationNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .robotApplicationNames)
            for robotapplicationnames0 in robotApplicationNames {
                try robotApplicationNamesContainer.encode(robotapplicationnames0)
            }
        }
        if let simulationApplicationNames = simulationApplicationNames {
            var simulationApplicationNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .simulationApplicationNames)
            for simulationapplicationnames0 in simulationApplicationNames {
                try simulationApplicationNamesContainer.encode(simulationapplicationnames0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SimulationJobStatus.self, forKey: .status)
        status = statusDecoded
        let simulationApplicationNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .simulationApplicationNames)
        var simulationApplicationNamesDecoded0:[String]? = nil
        if let simulationApplicationNamesContainer = simulationApplicationNamesContainer {
            simulationApplicationNamesDecoded0 = [String]()
            for string0 in simulationApplicationNamesContainer {
                simulationApplicationNamesDecoded0?.append(string0)
            }
        }
        simulationApplicationNames = simulationApplicationNamesDecoded0
        let robotApplicationNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .robotApplicationNames)
        var robotApplicationNamesDecoded0:[String]? = nil
        if let robotApplicationNamesContainer = robotApplicationNamesContainer {
            robotApplicationNamesDecoded0 = [String]()
            for string0 in robotApplicationNamesContainer {
                robotApplicationNamesDecoded0?.append(string0)
            }
        }
        robotApplicationNames = robotApplicationNamesDecoded0
        let dataSourceNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .dataSourceNames)
        var dataSourceNamesDecoded0:[String]? = nil
        if let dataSourceNamesContainer = dataSourceNamesContainer {
            dataSourceNamesDecoded0 = [String]()
            for string0 in dataSourceNamesContainer {
                dataSourceNamesDecoded0?.append(string0)
            }
        }
        dataSourceNames = dataSourceNamesDecoded0
    }
}
