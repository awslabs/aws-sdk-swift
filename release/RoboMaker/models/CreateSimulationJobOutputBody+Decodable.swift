// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSimulationJobOutputBody: Equatable {
    public let arn: String?
    public let status: SimulationJobStatus?
    public let lastStartedAt: Date?
    public let lastUpdatedAt: Date?
    public let failureBehavior: FailureBehavior?
    public let failureCode: SimulationJobErrorCode?
    public let clientRequestToken: String?
    public let outputLocation: OutputLocation?
    public let loggingConfig: LoggingConfig?
    public let maxJobDurationInSeconds: Int
    public let simulationTimeMillis: Int
    public let iamRole: String?
    public let robotApplications: [RobotApplicationConfig]?
    public let simulationApplications: [SimulationApplicationConfig]?
    public let dataSources: [DataSource]?
    public let tags: [String:String]?
    public let vpcConfig: VPCConfigResponse?
    public let compute: ComputeResponse?
}

extension CreateSimulationJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case clientRequestToken
        case compute
        case dataSources
        case failureBehavior
        case failureCode
        case iamRole
        case lastStartedAt
        case lastUpdatedAt
        case loggingConfig
        case maxJobDurationInSeconds
        case outputLocation
        case robotApplications
        case simulationApplications
        case simulationTimeMillis
        case status
        case tags
        case vpcConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SimulationJobStatus.self, forKey: .status)
        status = statusDecoded
        let lastStartedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastStartedAt)
        lastStartedAt = lastStartedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let failureBehaviorDecoded = try containerValues.decodeIfPresent(FailureBehavior.self, forKey: .failureBehavior)
        failureBehavior = failureBehaviorDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(SimulationJobErrorCode.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let maxJobDurationInSecondsDecoded = try containerValues.decode(Int.self, forKey: .maxJobDurationInSeconds)
        maxJobDurationInSeconds = maxJobDurationInSecondsDecoded
        let simulationTimeMillisDecoded = try containerValues.decode(Int.self, forKey: .simulationTimeMillis)
        simulationTimeMillis = simulationTimeMillisDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let robotApplicationsContainer = try containerValues.decodeIfPresent([RobotApplicationConfig].self, forKey: .robotApplications)
        var robotApplicationsDecoded0:[RobotApplicationConfig]? = nil
        if let robotApplicationsContainer = robotApplicationsContainer {
            robotApplicationsDecoded0 = [RobotApplicationConfig]()
            for structure0 in robotApplicationsContainer {
                robotApplicationsDecoded0?.append(structure0)
            }
        }
        robotApplications = robotApplicationsDecoded0
        let simulationApplicationsContainer = try containerValues.decodeIfPresent([SimulationApplicationConfig].self, forKey: .simulationApplications)
        var simulationApplicationsDecoded0:[SimulationApplicationConfig]? = nil
        if let simulationApplicationsContainer = simulationApplicationsContainer {
            simulationApplicationsDecoded0 = [SimulationApplicationConfig]()
            for structure0 in simulationApplicationsContainer {
                simulationApplicationsDecoded0?.append(structure0)
            }
        }
        simulationApplications = simulationApplicationsDecoded0
        let dataSourcesContainer = try containerValues.decodeIfPresent([DataSource].self, forKey: .dataSources)
        var dataSourcesDecoded0:[DataSource]? = nil
        if let dataSourcesContainer = dataSourcesContainer {
            dataSourcesDecoded0 = [DataSource]()
            for structure0 in dataSourcesContainer {
                dataSourcesDecoded0?.append(structure0)
            }
        }
        dataSources = dataSourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VPCConfigResponse.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let computeDecoded = try containerValues.decodeIfPresent(ComputeResponse.self, forKey: .compute)
        compute = computeDecoded
    }
}
