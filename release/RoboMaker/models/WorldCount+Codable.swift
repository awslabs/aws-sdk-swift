// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorldCount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case floorplanCount
        case interiorCountPerFloorplan
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let floorplanCount = floorplanCount {
            try encodeContainer.encode(floorplanCount, forKey: .floorplanCount)
        }
        if let interiorCountPerFloorplan = interiorCountPerFloorplan {
            try encodeContainer.encode(interiorCountPerFloorplan, forKey: .interiorCountPerFloorplan)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let floorplanCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .floorplanCount)
        floorplanCount = floorplanCountDecoded
        let interiorCountPerFloorplanDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .interiorCountPerFloorplan)
        interiorCountPerFloorplan = interiorCountPerFloorplanDecoded
    }
}
