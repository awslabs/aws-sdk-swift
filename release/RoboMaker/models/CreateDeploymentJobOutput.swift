// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateDeploymentJobOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    public let arn: String?
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    public let createdAt: Date?
    /// <p>The deployment application configuration.</p>
    public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
    /// <p>The deployment configuration.</p>
    public let deploymentConfig: DeploymentConfig?
    /// <p>The failure code of the simulation job if it failed:</p>
    ///          <dl>
    ///             <dt>BadPermissionError</dt>
    ///             <dd>
    ///                <p>AWS Greengrass requires a service-level role permission to access other
    ///                   services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor">
    ///                      <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>.
    ///                </p>
    ///             </dd>
    ///             <dt>ExtractingBundleFailure</dt>
    ///             <dd>
    ///                <p>The robot application could not be extracted from the bundle.</p>
    ///             </dd>
    ///             <dt>FailureThresholdBreached</dt>
    ///             <dd>
    ///                <p>The percentage of robots that could not be updated exceeded the percentage set
    ///                   for the deployment.</p>
    ///             </dd>
    ///             <dt>GreengrassDeploymentFailed</dt>
    ///             <dd>
    ///                <p>The robot application could not be deployed to the robot.</p>
    ///             </dd>
    ///             <dt>GreengrassGroupVersionDoesNotExist</dt>
    ///             <dd>
    ///                <p>The AWS Greengrass group or version associated with a robot is missing.</p>
    ///             </dd>
    ///             <dt>InternalServerError</dt>
    ///             <dd>
    ///                <p>An internal error has occurred. Retry your request, but if the problem
    ///                   persists, contact us with details.</p>
    ///             </dd>
    ///             <dt>MissingRobotApplicationArchitecture</dt>
    ///             <dd>
    ///                <p>The robot application does not have a source that matches the architecture of
    ///                   the robot.</p>
    ///             </dd>
    ///             <dt>MissingRobotDeploymentResource</dt>
    ///             <dd>
    ///                <p>One or more of the resources specified for the robot application are missing.
    ///                   For example, does the robot application have the correct launch package and launch
    ///                   file?</p>
    ///             </dd>
    ///             <dt>PostLaunchFileFailure</dt>
    ///             <dd>
    ///                <p>The post-launch script failed.</p>
    ///             </dd>
    ///             <dt>PreLaunchFileFailure</dt>
    ///             <dd>
    ///                <p>The pre-launch script failed.</p>
    ///             </dd>
    ///             <dt>ResourceNotFound</dt>
    ///             <dd>
    ///                <p>One or more deployment resources are missing. For example, do robot application
    ///                   source bundles still exist? </p>
    ///             </dd>
    ///             <dt>RobotDeploymentNoResponse</dt>
    ///             <dd>
    ///                <p>There is no response from the robot. It might not be powered on or connected to
    ///                   the internet.</p>
    ///             </dd>
    ///          </dl>
    public let failureCode: DeploymentJobErrorCode?
    /// <p>The failure reason of the deployment job if it failed.</p>
    public let failureReason: String?
    /// <p>The target fleet for the deployment job.</p>
    public let fleet: String?
    /// <p>The status of the deployment job.</p>
    public let status: DeploymentStatus?
    /// <p>The list of all tags added to the deployment job.</p>
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil,
        deploymentConfig: DeploymentConfig? = nil,
        failureCode: DeploymentJobErrorCode? = nil,
        failureReason: String? = nil,
        fleet: String? = nil,
        status: DeploymentStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.deploymentApplicationConfigs = deploymentApplicationConfigs
        self.deploymentConfig = deploymentConfig
        self.failureCode = failureCode
        self.failureReason = failureReason
        self.fleet = fleet
        self.status = status
        self.tags = tags
    }
}
