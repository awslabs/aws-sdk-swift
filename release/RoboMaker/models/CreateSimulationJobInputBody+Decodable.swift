// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSimulationJobInputBody: Equatable {
    public let clientRequestToken: String?
    public let outputLocation: OutputLocation?
    public let loggingConfig: LoggingConfig?
    public let maxJobDurationInSeconds: Int
    public let iamRole: String?
    public let failureBehavior: FailureBehavior?
    public let robotApplications: [RobotApplicationConfig]?
    public let simulationApplications: [SimulationApplicationConfig]?
    public let dataSources: [DataSourceConfig]?
    public let tags: [String:String]?
    public let vpcConfig: VPCConfig?
    public let compute: Compute?
}

extension CreateSimulationJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case compute
        case dataSources
        case failureBehavior
        case iamRole
        case loggingConfig
        case maxJobDurationInSeconds
        case outputLocation
        case robotApplications
        case simulationApplications
        case tags
        case vpcConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let maxJobDurationInSecondsDecoded = try containerValues.decode(Int.self, forKey: .maxJobDurationInSeconds)
        maxJobDurationInSeconds = maxJobDurationInSecondsDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let failureBehaviorDecoded = try containerValues.decodeIfPresent(FailureBehavior.self, forKey: .failureBehavior)
        failureBehavior = failureBehaviorDecoded
        let robotApplicationsContainer = try containerValues.decodeIfPresent([RobotApplicationConfig].self, forKey: .robotApplications)
        var robotApplicationsDecoded0:[RobotApplicationConfig]? = nil
        if let robotApplicationsContainer = robotApplicationsContainer {
            robotApplicationsDecoded0 = [RobotApplicationConfig]()
            for structure0 in robotApplicationsContainer {
                robotApplicationsDecoded0?.append(structure0)
            }
        }
        robotApplications = robotApplicationsDecoded0
        let simulationApplicationsContainer = try containerValues.decodeIfPresent([SimulationApplicationConfig].self, forKey: .simulationApplications)
        var simulationApplicationsDecoded0:[SimulationApplicationConfig]? = nil
        if let simulationApplicationsContainer = simulationApplicationsContainer {
            simulationApplicationsDecoded0 = [SimulationApplicationConfig]()
            for structure0 in simulationApplicationsContainer {
                simulationApplicationsDecoded0?.append(structure0)
            }
        }
        simulationApplications = simulationApplicationsDecoded0
        let dataSourcesContainer = try containerValues.decodeIfPresent([DataSourceConfig].self, forKey: .dataSources)
        var dataSourcesDecoded0:[DataSourceConfig]? = nil
        if let dataSourcesContainer = dataSourcesContainer {
            dataSourcesDecoded0 = [DataSourceConfig]()
            for structure0 in dataSourcesContainer {
                dataSourcesDecoded0?.append(structure0)
            }
        }
        dataSources = dataSourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VPCConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let computeDecoded = try containerValues.decodeIfPresent(Compute.self, forKey: .compute)
        compute = computeDecoded
    }
}
