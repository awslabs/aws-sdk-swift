// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Source: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case architecture
        case etag
        case s3Bucket
        case s3Key
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let architecture = architecture {
            try encodeContainer.encode(architecture.rawValue, forKey: .architecture)
        }
        if let etag = etag {
            try encodeContainer.encode(etag, forKey: .etag)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3Key = s3Key {
            try encodeContainer.encode(s3Key, forKey: .s3Key)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
        let etagDecoded = try containerValues.decodeIfPresent(String.self, forKey: .etag)
        etag = etagDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(Architecture.self, forKey: .architecture)
        architecture = architectureDecoded
    }
}
