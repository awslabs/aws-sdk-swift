// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartSimulationJobBatchOutput: Equatable {
    /// <p>The Amazon Resource Name (arn) of the batch.</p>
    public let arn: String?
    /// <p>The batch policy.</p>
    public let batchPolicy: BatchPolicy?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///          request.</p>
    public let clientRequestToken: String?
    /// <p>The time, in milliseconds since the epoch, when the simulation job batch was
    ///          created.</p>
    public let createdAt: Date?
    /// <p>A list of created simulation job request summaries.</p>
    public let createdRequests: [SimulationJobSummary]?
    /// <p>A list of failed simulation job requests. The request failed to be created into a
    ///          simulation job. Failed requests do not have a simulation job ID. </p>
    public let failedRequests: [FailedCreateSimulationJobRequest]?
    /// <p>The failure code if the simulation job batch failed.</p>
    public let failureCode: SimulationJobBatchErrorCode?
    /// <p>The reason the simulation job batch failed.</p>
    public let failureReason: String?
    /// <p>A list of pending simulation job requests. These requests have not yet been created into
    ///          simulation jobs.</p>
    public let pendingRequests: [SimulationJobRequest]?
    /// <p>The status of the simulation job batch.</p>
    ///          <dl>
    ///             <dt>Pending</dt>
    ///             <dd>
    ///                <p>The simulation job batch request is pending.</p>
    ///             </dd>
    ///             <dt>InProgress</dt>
    ///             <dd>
    ///                <p>The simulation job batch is in progress. </p>
    ///             </dd>
    ///             <dt>Failed</dt>
    ///             <dd>
    ///                <p>The simulation job batch failed. One or more simulation job requests could not
    ///                   be completed due to an internal failure (like <code>InternalServiceError</code>).
    ///                   See <code>failureCode</code> and <code>failureReason</code> for more
    ///                   information.</p>
    ///             </dd>
    ///             <dt>Completed</dt>
    ///             <dd>
    ///                <p>The simulation batch job completed. A batch is complete when (1) there are no
    ///                   pending simulation job requests in the batch and none of the failed simulation job
    ///                   requests are due to <code>InternalServiceError</code> and (2) when all created
    ///                   simulation jobs have reached a terminal state (for example, <code>Completed</code>
    ///                   or <code>Failed</code>). </p>
    ///             </dd>
    ///             <dt>Canceled</dt>
    ///             <dd>
    ///                <p>The simulation batch job was cancelled.</p>
    ///             </dd>
    ///             <dt>Canceling</dt>
    ///             <dd>
    ///                <p>The simulation batch job is being cancelled.</p>
    ///             </dd>
    ///             <dt>Completing</dt>
    ///             <dd>
    ///                <p>The simulation batch job is completing.</p>
    ///             </dd>
    ///             <dt>TimingOut</dt>
    ///             <dd>
    ///                <p>The simulation job batch is timing out.</p>
    ///                <p>If a batch timing out, and there are pending requests that were failing due to
    ///                   an internal failure (like <code>InternalServiceError</code>), the batch status
    ///                   will be <code>Failed</code>. If there are no such failing request, the batch
    ///                   status will be <code>TimedOut</code>. </p>
    ///             </dd>
    ///             <dt>TimedOut</dt>
    ///             <dd>
    ///                <p>The simulation batch job timed out.</p>
    ///             </dd>
    ///          </dl>
    public let status: SimulationJobBatchStatus?
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job
    ///          batch.</p>
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        batchPolicy: BatchPolicy? = nil,
        clientRequestToken: String? = nil,
        createdAt: Date? = nil,
        createdRequests: [SimulationJobSummary]? = nil,
        failedRequests: [FailedCreateSimulationJobRequest]? = nil,
        failureCode: SimulationJobBatchErrorCode? = nil,
        failureReason: String? = nil,
        pendingRequests: [SimulationJobRequest]? = nil,
        status: SimulationJobBatchStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.batchPolicy = batchPolicy
        self.clientRequestToken = clientRequestToken
        self.createdAt = createdAt
        self.createdRequests = createdRequests
        self.failedRequests = failedRequests
        self.failureCode = failureCode
        self.failureReason = failureReason
        self.pendingRequests = pendingRequests
        self.status = status
        self.tags = tags
    }
}
