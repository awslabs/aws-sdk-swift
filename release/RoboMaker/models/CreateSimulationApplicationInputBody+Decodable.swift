// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSimulationApplicationInputBody: Equatable {
    public let name: String?
    public let sources: [SourceConfig]?
    public let simulationSoftwareSuite: SimulationSoftwareSuite?
    public let robotSoftwareSuite: RobotSoftwareSuite?
    public let renderingEngine: RenderingEngine?
    public let tags: [String:String]?
}

extension CreateSimulationApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name
        case renderingEngine
        case robotSoftwareSuite
        case simulationSoftwareSuite
        case sources
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([SourceConfig].self, forKey: .sources)
        var sourcesDecoded0:[SourceConfig]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [SourceConfig]()
            for structure0 in sourcesContainer {
                sourcesDecoded0?.append(structure0)
            }
        }
        sources = sourcesDecoded0
        let simulationSoftwareSuiteDecoded = try containerValues.decodeIfPresent(SimulationSoftwareSuite.self, forKey: .simulationSoftwareSuite)
        simulationSoftwareSuite = simulationSoftwareSuiteDecoded
        let robotSoftwareSuiteDecoded = try containerValues.decodeIfPresent(RobotSoftwareSuite.self, forKey: .robotSoftwareSuite)
        robotSoftwareSuite = robotSoftwareSuiteDecoded
        let renderingEngineDecoded = try containerValues.decodeIfPresent(RenderingEngine.self, forKey: .renderingEngine)
        renderingEngine = renderingEngineDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
