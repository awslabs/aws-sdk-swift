// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateSimulationJobInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///          request.</p>
    public var clientRequestToken: String?
    /// <p>Compute information for the simulation job.</p>
    public let compute: Compute?
    /// <p>Specify data sources to mount read-only files from S3 into your simulation. These files
    ///          are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p>
    ///          <note>
    ///             <p>There is a limit of 100 files and a combined size of 25GB for all
    ///                <code>DataSourceConfig</code> objects. </p>
    ///          </note>
    public let dataSources: [DataSourceConfig]?
    /// <p>The failure behavior the simulation job.</p>
    ///          <dl>
    ///             <dt>Continue</dt>
    ///             <dd>
    ///                <p>Restart the simulation job in the same host instance.</p>
    ///             </dd>
    ///             <dt>Fail</dt>
    ///             <dd>
    ///                <p>Stop the simulation job and terminate the instance.</p>
    ///             </dd>
    ///          </dl>
    public let failureBehavior: FailureBehavior?
    /// <p>The IAM role name that allows the simulation instance to call the AWS APIs that are
    ///          specified in its associated policies on your behalf. This is how credentials are passed in
    ///          to your simulation job. </p>
    public let iamRole: String?
    /// <p>The logging configuration.</p>
    public let loggingConfig: LoggingConfig?
    /// <p>The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When
    ///             <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will
    ///          transition to <code>Completed</code>.</p>
    public let maxJobDurationInSeconds: Int
    /// <p>Location for output files generated by the simulation job.</p>
    public let outputLocation: OutputLocation?
    /// <p>The robot application to use in the simulation job.</p>
    public let robotApplications: [RobotApplicationConfig]?
    /// <p>The simulation application to use in the simulation job.</p>
    public let simulationApplications: [SimulationApplicationConfig]?
    /// <p>A map that contains tag keys and tag values that are attached to the simulation
    ///          job.</p>
    public let tags: [String:String]?
    /// <p>If your simulation job accesses resources in a VPC, you provide this parameter
    ///          identifying the list of security group IDs and subnet IDs. These must belong to the same
    ///          VPC. You must provide at least one security group and one subnet ID. </p>
    public let vpcConfig: VPCConfig?

    public init (
        clientRequestToken: String? = nil,
        compute: Compute? = nil,
        dataSources: [DataSourceConfig]? = nil,
        failureBehavior: FailureBehavior? = nil,
        iamRole: String? = nil,
        loggingConfig: LoggingConfig? = nil,
        maxJobDurationInSeconds: Int = 0,
        outputLocation: OutputLocation? = nil,
        robotApplications: [RobotApplicationConfig]? = nil,
        simulationApplications: [SimulationApplicationConfig]? = nil,
        tags: [String:String]? = nil,
        vpcConfig: VPCConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.compute = compute
        self.dataSources = dataSources
        self.failureBehavior = failureBehavior
        self.iamRole = iamRole
        self.loggingConfig = loggingConfig
        self.maxJobDurationInSeconds = maxJobDurationInSeconds
        self.outputLocation = outputLocation
        self.robotApplications = robotApplications
        self.simulationApplications = simulationApplications
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}
