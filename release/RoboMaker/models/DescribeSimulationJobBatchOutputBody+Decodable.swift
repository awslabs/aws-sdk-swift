// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSimulationJobBatchOutputBody: Equatable {
    public let arn: String?
    public let status: SimulationJobBatchStatus?
    public let lastUpdatedAt: Date?
    public let createdAt: Date?
    public let clientRequestToken: String?
    public let batchPolicy: BatchPolicy?
    public let failureCode: SimulationJobBatchErrorCode?
    public let failureReason: String?
    public let failedRequests: [FailedCreateSimulationJobRequest]?
    public let pendingRequests: [SimulationJobRequest]?
    public let createdRequests: [SimulationJobSummary]?
    public let tags: [String:String]?
}

extension DescribeSimulationJobBatchOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case batchPolicy
        case clientRequestToken
        case createdAt
        case createdRequests
        case failedRequests
        case failureCode
        case failureReason
        case lastUpdatedAt
        case pendingRequests
        case status
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SimulationJobBatchStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let batchPolicyDecoded = try containerValues.decodeIfPresent(BatchPolicy.self, forKey: .batchPolicy)
        batchPolicy = batchPolicyDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(SimulationJobBatchErrorCode.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let failedRequestsContainer = try containerValues.decodeIfPresent([FailedCreateSimulationJobRequest].self, forKey: .failedRequests)
        var failedRequestsDecoded0:[FailedCreateSimulationJobRequest]? = nil
        if let failedRequestsContainer = failedRequestsContainer {
            failedRequestsDecoded0 = [FailedCreateSimulationJobRequest]()
            for structure0 in failedRequestsContainer {
                failedRequestsDecoded0?.append(structure0)
            }
        }
        failedRequests = failedRequestsDecoded0
        let pendingRequestsContainer = try containerValues.decodeIfPresent([SimulationJobRequest].self, forKey: .pendingRequests)
        var pendingRequestsDecoded0:[SimulationJobRequest]? = nil
        if let pendingRequestsContainer = pendingRequestsContainer {
            pendingRequestsDecoded0 = [SimulationJobRequest]()
            for structure0 in pendingRequestsContainer {
                pendingRequestsDecoded0?.append(structure0)
            }
        }
        pendingRequests = pendingRequestsDecoded0
        let createdRequestsContainer = try containerValues.decodeIfPresent([SimulationJobSummary].self, forKey: .createdRequests)
        var createdRequestsDecoded0:[SimulationJobSummary]? = nil
        if let createdRequestsContainer = createdRequestsContainer {
            createdRequestsDecoded0 = [SimulationJobSummary]()
            for structure0 in createdRequestsContainer {
                createdRequestsDecoded0?.append(structure0)
            }
        }
        createdRequests = createdRequestsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
