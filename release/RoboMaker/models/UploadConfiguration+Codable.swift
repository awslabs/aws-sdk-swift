// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UploadConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case path
        case uploadBehavior
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let uploadBehavior = uploadBehavior {
            try encodeContainer.encode(uploadBehavior.rawValue, forKey: .uploadBehavior)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let uploadBehaviorDecoded = try containerValues.decodeIfPresent(UploadBehavior.self, forKey: .uploadBehavior)
        uploadBehavior = uploadBehaviorDecoded
    }
}
