// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SyncDeploymentJobOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    public let arn: String?
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    public let createdAt: Date?
    /// <p>Information about the deployment application configurations.</p>
    public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
    /// <p>Information about the deployment configuration.</p>
    public let deploymentConfig: DeploymentConfig?
    /// <p>The failure code if the job fails:</p>
    ///          <dl>
    ///             <dt>InternalServiceError</dt>
    ///             <dd>
    ///                <p>Internal service error.</p>
    ///             </dd>
    ///             <dt>RobotApplicationCrash</dt>
    ///             <dd>
    ///                <p>Robot application exited abnormally.</p>
    ///             </dd>
    ///             <dt>SimulationApplicationCrash</dt>
    ///             <dd>
    ///                <p> Simulation application exited abnormally.</p>
    ///             </dd>
    ///             <dt>BadPermissionsRobotApplication</dt>
    ///             <dd>
    ///                <p>Robot application bundle could not be downloaded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsSimulationApplication</dt>
    ///             <dd>
    ///                <p>Simulation application bundle could not be downloaded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsS3Output</dt>
    ///             <dd>
    ///                <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    ///             </dd>
    ///             <dt>BadPermissionsCloudwatchLogs</dt>
    ///             <dd>
    ///                <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    ///             </dd>
    ///             <dt>SubnetIpLimitExceeded</dt>
    ///             <dd>
    ///                <p>Subnet IP limit exceeded.</p>
    ///             </dd>
    ///             <dt>ENILimitExceeded</dt>
    ///             <dd>
    ///                <p>ENI limit exceeded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsUserCredentials</dt>
    ///             <dd>
    ///                <p>Unable to use the Role provided.</p>
    ///             </dd>
    ///             <dt>InvalidBundleRobotApplication</dt>
    ///             <dd>
    ///                <p>Robot bundle cannot be extracted (invalid format, bundling error, or other
    ///                   issue).</p>
    ///             </dd>
    ///             <dt>InvalidBundleSimulationApplication</dt>
    ///             <dd>
    ///                <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other
    ///                   issue).</p>
    ///             </dd>
    ///             <dt>RobotApplicationVersionMismatchedEtag</dt>
    ///             <dd>
    ///                <p>Etag for RobotApplication does not match value during version creation.</p>
    ///             </dd>
    ///             <dt>SimulationApplicationVersionMismatchedEtag</dt>
    ///             <dd>
    ///                <p>Etag for SimulationApplication does not match value during version
    ///                   creation.</p>
    ///             </dd>
    ///          </dl>
    public let failureCode: DeploymentJobErrorCode?
    /// <p>The failure reason if the job fails.</p>
    public let failureReason: String?
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    public let fleet: String?
    /// <p>The status of the synchronization job.</p>
    public let status: DeploymentStatus?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil,
        deploymentConfig: DeploymentConfig? = nil,
        failureCode: DeploymentJobErrorCode? = nil,
        failureReason: String? = nil,
        fleet: String? = nil,
        status: DeploymentStatus? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.deploymentApplicationConfigs = deploymentApplicationConfigs
        self.deploymentConfig = deploymentConfig
        self.failureCode = failureCode
        self.failureReason = failureReason
        self.fleet = fleet
        self.status = status
    }
}
