// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSimulationJobBatchInputBody: Equatable {
    public let clientRequestToken: String?
    public let batchPolicy: BatchPolicy?
    public let createSimulationJobRequests: [SimulationJobRequest]?
    public let tags: [String:String]?
}

extension StartSimulationJobBatchInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case batchPolicy
        case clientRequestToken
        case createSimulationJobRequests
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let batchPolicyDecoded = try containerValues.decodeIfPresent(BatchPolicy.self, forKey: .batchPolicy)
        batchPolicy = batchPolicyDecoded
        let createSimulationJobRequestsContainer = try containerValues.decodeIfPresent([SimulationJobRequest].self, forKey: .createSimulationJobRequests)
        var createSimulationJobRequestsDecoded0:[SimulationJobRequest]? = nil
        if let createSimulationJobRequestsContainer = createSimulationJobRequestsContainer {
            createSimulationJobRequestsDecoded0 = [SimulationJobRequest]()
            for structure0 in createSimulationJobRequestsContainer {
                createSimulationJobRequestsDecoded0?.append(structure0)
            }
        }
        createSimulationJobRequests = createSimulationJobRequestsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
