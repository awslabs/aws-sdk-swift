// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SimulationJobErrorCode {
    case badpermissionscloudwatchlogs
    case badpermissionsrobotapplication
    case badpermissionss3object
    case badpermissionss3output
    case badpermissionssimulationapplication
    case badpermissionsusercredentials
    case batchcanceled
    case batchtimedout
    case enilimitexceeded
    case internalserviceerror
    case invalidbundlerobotapplication
    case invalidbundlesimulationapplication
    case invalidinput
    case invalids3resource
    case limitexceeded
    case mismatchedetag
    case requestthrottled
    case resourcenotfound
    case robotapplicationcrash
    case robotapplicationhealthcheckfailure
    case robotapplicationversionmismatchedetag
    case simulationapplicationcrash
    case simulationapplicationhealthcheckfailure
    case simulationapplicationversionmismatchedetag
    case subnetiplimitexceeded
    case throttlingerror
    case uploadcontentmismatcherror
    case wrongregionrobotapplication
    case wrongregions3bucket
    case wrongregions3output
    case wrongregionsimulationapplication
    case sdkUnknown(String)
}

extension SimulationJobErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SimulationJobErrorCode] {
        return [
            .badpermissionscloudwatchlogs,
            .badpermissionsrobotapplication,
            .badpermissionss3object,
            .badpermissionss3output,
            .badpermissionssimulationapplication,
            .badpermissionsusercredentials,
            .batchcanceled,
            .batchtimedout,
            .enilimitexceeded,
            .internalserviceerror,
            .invalidbundlerobotapplication,
            .invalidbundlesimulationapplication,
            .invalidinput,
            .invalids3resource,
            .limitexceeded,
            .mismatchedetag,
            .requestthrottled,
            .resourcenotfound,
            .robotapplicationcrash,
            .robotapplicationhealthcheckfailure,
            .robotapplicationversionmismatchedetag,
            .simulationapplicationcrash,
            .simulationapplicationhealthcheckfailure,
            .simulationapplicationversionmismatchedetag,
            .subnetiplimitexceeded,
            .throttlingerror,
            .uploadcontentmismatcherror,
            .wrongregionrobotapplication,
            .wrongregions3bucket,
            .wrongregions3output,
            .wrongregionsimulationapplication,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .badpermissionscloudwatchlogs: return "BadPermissionsCloudwatchLogs"
        case .badpermissionsrobotapplication: return "BadPermissionsRobotApplication"
        case .badpermissionss3object: return "BadPermissionsS3Object"
        case .badpermissionss3output: return "BadPermissionsS3Output"
        case .badpermissionssimulationapplication: return "BadPermissionsSimulationApplication"
        case .badpermissionsusercredentials: return "BadPermissionsUserCredentials"
        case .batchcanceled: return "BatchCanceled"
        case .batchtimedout: return "BatchTimedOut"
        case .enilimitexceeded: return "ENILimitExceeded"
        case .internalserviceerror: return "InternalServiceError"
        case .invalidbundlerobotapplication: return "InvalidBundleRobotApplication"
        case .invalidbundlesimulationapplication: return "InvalidBundleSimulationApplication"
        case .invalidinput: return "InvalidInput"
        case .invalids3resource: return "InvalidS3Resource"
        case .limitexceeded: return "LimitExceeded"
        case .mismatchedetag: return "MismatchedEtag"
        case .requestthrottled: return "RequestThrottled"
        case .resourcenotfound: return "ResourceNotFound"
        case .robotapplicationcrash: return "RobotApplicationCrash"
        case .robotapplicationhealthcheckfailure: return "RobotApplicationHealthCheckFailure"
        case .robotapplicationversionmismatchedetag: return "RobotApplicationVersionMismatchedEtag"
        case .simulationapplicationcrash: return "SimulationApplicationCrash"
        case .simulationapplicationhealthcheckfailure: return "SimulationApplicationHealthCheckFailure"
        case .simulationapplicationversionmismatchedetag: return "SimulationApplicationVersionMismatchedEtag"
        case .subnetiplimitexceeded: return "SubnetIpLimitExceeded"
        case .throttlingerror: return "ThrottlingError"
        case .uploadcontentmismatcherror: return "UploadContentMismatchError"
        case .wrongregionrobotapplication: return "WrongRegionRobotApplication"
        case .wrongregions3bucket: return "WrongRegionS3Bucket"
        case .wrongregions3output: return "WrongRegionS3Output"
        case .wrongregionsimulationapplication: return "WrongRegionSimulationApplication"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SimulationJobErrorCode(rawValue: rawValue) ?? SimulationJobErrorCode.sdkUnknown(rawValue)
    }
}
