// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SimulationApplicationConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case application
        case applicationVersion
        case launchConfig
        case tools
        case uploadConfigurations
        case useDefaultTools
        case useDefaultUploadConfigurations
        case worldConfigs
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let application = application {
            try encodeContainer.encode(application, forKey: .application)
        }
        if let applicationVersion = applicationVersion {
            try encodeContainer.encode(applicationVersion, forKey: .applicationVersion)
        }
        if let launchConfig = launchConfig {
            try encodeContainer.encode(launchConfig, forKey: .launchConfig)
        }
        if let tools = tools {
            var toolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tools)
            for tools0 in tools {
                try toolsContainer.encode(tools0)
            }
        }
        if let uploadConfigurations = uploadConfigurations {
            var uploadConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .uploadConfigurations)
            for uploadconfigurations0 in uploadConfigurations {
                try uploadConfigurationsContainer.encode(uploadconfigurations0)
            }
        }
        if let useDefaultTools = useDefaultTools {
            try encodeContainer.encode(useDefaultTools, forKey: .useDefaultTools)
        }
        if let useDefaultUploadConfigurations = useDefaultUploadConfigurations {
            try encodeContainer.encode(useDefaultUploadConfigurations, forKey: .useDefaultUploadConfigurations)
        }
        if let worldConfigs = worldConfigs {
            var worldConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .worldConfigs)
            for worldconfigs0 in worldConfigs {
                try worldConfigsContainer.encode(worldconfigs0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .application)
        application = applicationDecoded
        let applicationVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationVersion)
        applicationVersion = applicationVersionDecoded
        let launchConfigDecoded = try containerValues.decodeIfPresent(LaunchConfig.self, forKey: .launchConfig)
        launchConfig = launchConfigDecoded
        let uploadConfigurationsContainer = try containerValues.decodeIfPresent([UploadConfiguration].self, forKey: .uploadConfigurations)
        var uploadConfigurationsDecoded0:[UploadConfiguration]? = nil
        if let uploadConfigurationsContainer = uploadConfigurationsContainer {
            uploadConfigurationsDecoded0 = [UploadConfiguration]()
            for structure0 in uploadConfigurationsContainer {
                uploadConfigurationsDecoded0?.append(structure0)
            }
        }
        uploadConfigurations = uploadConfigurationsDecoded0
        let worldConfigsContainer = try containerValues.decodeIfPresent([WorldConfig].self, forKey: .worldConfigs)
        var worldConfigsDecoded0:[WorldConfig]? = nil
        if let worldConfigsContainer = worldConfigsContainer {
            worldConfigsDecoded0 = [WorldConfig]()
            for structure0 in worldConfigsContainer {
                worldConfigsDecoded0?.append(structure0)
            }
        }
        worldConfigs = worldConfigsDecoded0
        let useDefaultUploadConfigurationsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useDefaultUploadConfigurations)
        useDefaultUploadConfigurations = useDefaultUploadConfigurationsDecoded
        let toolsContainer = try containerValues.decodeIfPresent([Tool].self, forKey: .tools)
        var toolsDecoded0:[Tool]? = nil
        if let toolsContainer = toolsContainer {
            toolsDecoded0 = [Tool]()
            for structure0 in toolsContainer {
                toolsDecoded0?.append(structure0)
            }
        }
        tools = toolsDecoded0
        let useDefaultToolsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useDefaultTools)
        useDefaultTools = useDefaultToolsDecoded
    }
}
