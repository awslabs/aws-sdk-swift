// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeWorldGenerationJobOutputBody: Equatable {
    public let arn: String?
    public let status: WorldGenerationJobStatus?
    public let createdAt: Date?
    public let failureCode: WorldGenerationJobErrorCode?
    public let failureReason: String?
    public let clientRequestToken: String?
    public let template: String?
    public let worldCount: WorldCount?
    public let finishedWorldsSummary: FinishedWorldsSummary?
    public let tags: [String:String]?
    public let worldTags: [String:String]?
}

extension DescribeWorldGenerationJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case clientRequestToken
        case createdAt
        case failureCode
        case failureReason
        case finishedWorldsSummary
        case status
        case tags
        case template
        case worldCount
        case worldTags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(WorldGenerationJobStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(WorldGenerationJobErrorCode.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let templateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .template)
        template = templateDecoded
        let worldCountDecoded = try containerValues.decodeIfPresent(WorldCount.self, forKey: .worldCount)
        worldCount = worldCountDecoded
        let finishedWorldsSummaryDecoded = try containerValues.decodeIfPresent(FinishedWorldsSummary.self, forKey: .finishedWorldsSummary)
        finishedWorldsSummary = finishedWorldsSummaryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let worldTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .worldTags)
        var worldTagsDecoded0: [String:String]? = nil
        if let worldTagsContainer = worldTagsContainer {
            worldTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in worldTagsContainer {
                worldTagsDecoded0?[key0] = tagvalue0
            }
        }
        worldTags = worldTagsDecoded0
    }
}
