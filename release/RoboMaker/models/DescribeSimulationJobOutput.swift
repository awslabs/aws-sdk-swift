// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeSimulationJobOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    public let arn: String?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///          request.</p>
    public let clientRequestToken: String?
    /// <p>Compute information for the simulation job.</p>
    public let compute: ComputeResponse?
    /// <p>The data sources for the simulation job.</p>
    public let dataSources: [DataSource]?
    /// <p>The failure behavior for the simulation job.</p>
    public let failureBehavior: FailureBehavior?
    /// <p>The failure code of the simulation job if it failed:</p>
    ///          <dl>
    ///             <dt>InternalServiceError</dt>
    ///             <dd>
    ///                <p>Internal service error.</p>
    ///             </dd>
    ///             <dt>RobotApplicationCrash</dt>
    ///             <dd>
    ///                <p>Robot application exited abnormally.</p>
    ///             </dd>
    ///             <dt>SimulationApplicationCrash</dt>
    ///             <dd>
    ///                <p> Simulation application exited abnormally.</p>
    ///             </dd>
    ///             <dt>BadPermissionsRobotApplication</dt>
    ///             <dd>
    ///                <p>Robot application bundle could not be downloaded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsSimulationApplication</dt>
    ///             <dd>
    ///                <p>Simulation application bundle could not be downloaded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsS3Output</dt>
    ///             <dd>
    ///                <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    ///             </dd>
    ///             <dt>BadPermissionsCloudwatchLogs</dt>
    ///             <dd>
    ///                <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    ///             </dd>
    ///             <dt>SubnetIpLimitExceeded</dt>
    ///             <dd>
    ///                <p>Subnet IP limit exceeded.</p>
    ///             </dd>
    ///             <dt>ENILimitExceeded</dt>
    ///             <dd>
    ///                <p>ENI limit exceeded.</p>
    ///             </dd>
    ///             <dt>BadPermissionsUserCredentials</dt>
    ///             <dd>
    ///                <p>Unable to use the Role provided.</p>
    ///             </dd>
    ///             <dt>InvalidBundleRobotApplication</dt>
    ///             <dd>
    ///                <p>Robot bundle cannot be extracted (invalid format, bundling error, or other
    ///                   issue).</p>
    ///             </dd>
    ///             <dt>InvalidBundleSimulationApplication</dt>
    ///             <dd>
    ///                <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other
    ///                   issue).</p>
    ///             </dd>
    ///             <dt>RobotApplicationVersionMismatchedEtag</dt>
    ///             <dd>
    ///                <p>Etag for RobotApplication does not match value during version creation.</p>
    ///             </dd>
    ///             <dt>SimulationApplicationVersionMismatchedEtag</dt>
    ///             <dd>
    ///                <p>Etag for SimulationApplication does not match value during version
    ///                   creation.</p>
    ///             </dd>
    ///          </dl>
    public let failureCode: SimulationJobErrorCode?
    /// <p>Details about why the simulation job failed. For more information about troubleshooting,
    ///          see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting.html">Troubleshooting</a>.</p>
    public let failureReason: String?
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified
    ///          in its associated policies on your behalf.</p>
    public let iamRole: String?
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last
    ///          started.</p>
    public let lastStartedAt: Date?
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last
    ///          updated.</p>
    public let lastUpdatedAt: Date?
    /// <p>The logging configuration.</p>
    public let loggingConfig: LoggingConfig?
    /// <p>The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or
    ///          less.</p>
    public let maxJobDurationInSeconds: Int
    /// <p>The name of the simulation job.</p>
    public let name: String?
    /// <p>The network interface information for the simulation job.</p>
    public let networkInterface: NetworkInterface?
    /// <p>Location for output files generated by the simulation job.</p>
    public let outputLocation: OutputLocation?
    /// <p>A list of robot applications.</p>
    public let robotApplications: [RobotApplicationConfig]?
    /// <p>A list of simulation applications.</p>
    public let simulationApplications: [SimulationApplicationConfig]?
    /// <p>The simulation job execution duration in milliseconds.</p>
    public let simulationTimeMillis: Int
    /// <p>The status of the simulation job.</p>
    public let status: SimulationJobStatus?
    /// <p>The list of all tags added to the specified simulation job.</p>
    public let tags: [String:String]?
    /// <p>The VPC configuration.</p>
    public let vpcConfig: VPCConfigResponse?

    public init (
        arn: String? = nil,
        clientRequestToken: String? = nil,
        compute: ComputeResponse? = nil,
        dataSources: [DataSource]? = nil,
        failureBehavior: FailureBehavior? = nil,
        failureCode: SimulationJobErrorCode? = nil,
        failureReason: String? = nil,
        iamRole: String? = nil,
        lastStartedAt: Date? = nil,
        lastUpdatedAt: Date? = nil,
        loggingConfig: LoggingConfig? = nil,
        maxJobDurationInSeconds: Int = 0,
        name: String? = nil,
        networkInterface: NetworkInterface? = nil,
        outputLocation: OutputLocation? = nil,
        robotApplications: [RobotApplicationConfig]? = nil,
        simulationApplications: [SimulationApplicationConfig]? = nil,
        simulationTimeMillis: Int = 0,
        status: SimulationJobStatus? = nil,
        tags: [String:String]? = nil,
        vpcConfig: VPCConfigResponse? = nil
    )
    {
        self.arn = arn
        self.clientRequestToken = clientRequestToken
        self.compute = compute
        self.dataSources = dataSources
        self.failureBehavior = failureBehavior
        self.failureCode = failureCode
        self.failureReason = failureReason
        self.iamRole = iamRole
        self.lastStartedAt = lastStartedAt
        self.lastUpdatedAt = lastUpdatedAt
        self.loggingConfig = loggingConfig
        self.maxJobDurationInSeconds = maxJobDurationInSeconds
        self.name = name
        self.networkInterface = networkInterface
        self.outputLocation = outputLocation
        self.robotApplications = robotApplications
        self.simulationApplications = simulationApplications
        self.simulationTimeMillis = simulationTimeMillis
        self.status = status
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}
