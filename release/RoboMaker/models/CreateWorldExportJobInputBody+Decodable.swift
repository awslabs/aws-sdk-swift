// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorldExportJobInputBody: Equatable {
    public let clientRequestToken: String?
    public let worlds: [String]?
    public let outputLocation: OutputLocation?
    public let iamRole: String?
    public let tags: [String:String]?
}

extension CreateWorldExportJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case iamRole
        case outputLocation
        case tags
        case worlds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let worldsContainer = try containerValues.decodeIfPresent([String].self, forKey: .worlds)
        var worldsDecoded0:[String]? = nil
        if let worldsContainer = worldsContainer {
            worldsDecoded0 = [String]()
            for string0 in worldsContainer {
                worldsDecoded0?.append(string0)
            }
        }
        worlds = worldsDecoded0
        let outputLocationDecoded = try containerValues.decodeIfPresent(OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
