// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>This section provides documentation for the AWS RoboMaker API operations.</p>
public protocol RoboMakerClientProtocol {
    /// <p>Deletes one or more worlds in a batch operation.</p>
    func batchDeleteWorlds(input: BatchDeleteWorldsInput, completion: @escaping (SdkResult<BatchDeleteWorldsOutputResponse, BatchDeleteWorldsOutputError>) -> Void)
    /// <p>Describes one or more simulation jobs.</p>
    func batchDescribeSimulationJob(input: BatchDescribeSimulationJobInput, completion: @escaping (SdkResult<BatchDescribeSimulationJobOutputResponse, BatchDescribeSimulationJobOutputError>) -> Void)
    /// <p>Cancels the specified deployment job.</p>
    func cancelDeploymentJob(input: CancelDeploymentJobInput, completion: @escaping (SdkResult<CancelDeploymentJobOutputResponse, CancelDeploymentJobOutputError>) -> Void)
    /// <p>Cancels the specified simulation job.</p>
    func cancelSimulationJob(input: CancelSimulationJobInput, completion: @escaping (SdkResult<CancelSimulationJobOutputResponse, CancelSimulationJobOutputError>) -> Void)
    /// <p>Cancels a simulation job batch. When you cancel a simulation job batch, you are also
    ///          cancelling all of the active simulation jobs created as part of the batch. </p>
    func cancelSimulationJobBatch(input: CancelSimulationJobBatchInput, completion: @escaping (SdkResult<CancelSimulationJobBatchOutputResponse, CancelSimulationJobBatchOutputError>) -> Void)
    /// <p>Cancels the specified export job.</p>
    func cancelWorldExportJob(input: CancelWorldExportJobInput, completion: @escaping (SdkResult<CancelWorldExportJobOutputResponse, CancelWorldExportJobOutputError>) -> Void)
    /// <p>Cancels the specified world generator job.</p>
    func cancelWorldGenerationJob(input: CancelWorldGenerationJobInput, completion: @escaping (SdkResult<CancelWorldGenerationJobOutputResponse, CancelWorldGenerationJobOutputError>) -> Void)
    /// <p>Deploys a specific version of a robot application to robots in a fleet.</p>
    ///          <p>The robot application must have a numbered <code>applicationVersion</code> for
    ///          consistency reasons. To create a new version, use
    ///             <code>CreateRobotApplicationVersion</code> or see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html">Creating a Robot Application Version</a>. </p>
    ///          <note>
    ///             <p>After 90 days, deployment jobs expire and will be deleted. They will no longer be
    ///             accessible. </p>
    ///          </note>
    func createDeploymentJob(input: CreateDeploymentJobInput, completion: @escaping (SdkResult<CreateDeploymentJobOutputResponse, CreateDeploymentJobOutputError>) -> Void)
    /// <p>Creates a fleet, a logical group of robots running the same robot application.</p>
    func createFleet(input: CreateFleetInput, completion: @escaping (SdkResult<CreateFleetOutputResponse, CreateFleetOutputError>) -> Void)
    /// <p>Creates a robot.</p>
    func createRobot(input: CreateRobotInput, completion: @escaping (SdkResult<CreateRobotOutputResponse, CreateRobotOutputError>) -> Void)
    /// <p>Creates a robot application. </p>
    func createRobotApplication(input: CreateRobotApplicationInput, completion: @escaping (SdkResult<CreateRobotApplicationOutputResponse, CreateRobotApplicationOutputError>) -> Void)
    /// <p>Creates a version of a robot application.</p>
    func createRobotApplicationVersion(input: CreateRobotApplicationVersionInput, completion: @escaping (SdkResult<CreateRobotApplicationVersionOutputResponse, CreateRobotApplicationVersionOutputError>) -> Void)
    /// <p>Creates a simulation application.</p>
    func createSimulationApplication(input: CreateSimulationApplicationInput, completion: @escaping (SdkResult<CreateSimulationApplicationOutputResponse, CreateSimulationApplicationOutputError>) -> Void)
    /// <p>Creates a simulation application with a specific revision id.</p>
    func createSimulationApplicationVersion(input: CreateSimulationApplicationVersionInput, completion: @escaping (SdkResult<CreateSimulationApplicationVersionOutputResponse, CreateSimulationApplicationVersionOutputError>) -> Void)
    /// <p>Creates a simulation job.</p>
    ///          <note>
    ///             <p>After 90 days, simulation jobs expire and will be deleted. They will no longer be
    ///             accessible. </p>
    ///          </note>
    func createSimulationJob(input: CreateSimulationJobInput, completion: @escaping (SdkResult<CreateSimulationJobOutputResponse, CreateSimulationJobOutputError>) -> Void)
    /// <p>Creates a world export job.</p>
    func createWorldExportJob(input: CreateWorldExportJobInput, completion: @escaping (SdkResult<CreateWorldExportJobOutputResponse, CreateWorldExportJobOutputError>) -> Void)
    /// <p>Creates worlds using the specified template.</p>
    func createWorldGenerationJob(input: CreateWorldGenerationJobInput, completion: @escaping (SdkResult<CreateWorldGenerationJobOutputResponse, CreateWorldGenerationJobOutputError>) -> Void)
    /// <p>Creates a world template.</p>
    func createWorldTemplate(input: CreateWorldTemplateInput, completion: @escaping (SdkResult<CreateWorldTemplateOutputResponse, CreateWorldTemplateOutputError>) -> Void)
    /// <p>Deletes a fleet.</p>
    func deleteFleet(input: DeleteFleetInput, completion: @escaping (SdkResult<DeleteFleetOutputResponse, DeleteFleetOutputError>) -> Void)
    /// <p>Deletes a robot.</p>
    func deleteRobot(input: DeleteRobotInput, completion: @escaping (SdkResult<DeleteRobotOutputResponse, DeleteRobotOutputError>) -> Void)
    /// <p>Deletes a robot application.</p>
    func deleteRobotApplication(input: DeleteRobotApplicationInput, completion: @escaping (SdkResult<DeleteRobotApplicationOutputResponse, DeleteRobotApplicationOutputError>) -> Void)
    /// <p>Deletes a simulation application.</p>
    func deleteSimulationApplication(input: DeleteSimulationApplicationInput, completion: @escaping (SdkResult<DeleteSimulationApplicationOutputResponse, DeleteSimulationApplicationOutputError>) -> Void)
    /// <p>Deletes a world template.</p>
    func deleteWorldTemplate(input: DeleteWorldTemplateInput, completion: @escaping (SdkResult<DeleteWorldTemplateOutputResponse, DeleteWorldTemplateOutputError>) -> Void)
    /// <p>Deregisters a robot.</p>
    func deregisterRobot(input: DeregisterRobotInput, completion: @escaping (SdkResult<DeregisterRobotOutputResponse, DeregisterRobotOutputError>) -> Void)
    /// <p>Describes a deployment job.</p>
    func describeDeploymentJob(input: DescribeDeploymentJobInput, completion: @escaping (SdkResult<DescribeDeploymentJobOutputResponse, DescribeDeploymentJobOutputError>) -> Void)
    /// <p>Describes a fleet.</p>
    func describeFleet(input: DescribeFleetInput, completion: @escaping (SdkResult<DescribeFleetOutputResponse, DescribeFleetOutputError>) -> Void)
    /// <p>Describes a robot.</p>
    func describeRobot(input: DescribeRobotInput, completion: @escaping (SdkResult<DescribeRobotOutputResponse, DescribeRobotOutputError>) -> Void)
    /// <p>Describes a robot application.</p>
    func describeRobotApplication(input: DescribeRobotApplicationInput, completion: @escaping (SdkResult<DescribeRobotApplicationOutputResponse, DescribeRobotApplicationOutputError>) -> Void)
    /// <p>Describes a simulation application.</p>
    func describeSimulationApplication(input: DescribeSimulationApplicationInput, completion: @escaping (SdkResult<DescribeSimulationApplicationOutputResponse, DescribeSimulationApplicationOutputError>) -> Void)
    /// <p>Describes a simulation job.</p>
    func describeSimulationJob(input: DescribeSimulationJobInput, completion: @escaping (SdkResult<DescribeSimulationJobOutputResponse, DescribeSimulationJobOutputError>) -> Void)
    /// <p>Describes a simulation job batch.</p>
    func describeSimulationJobBatch(input: DescribeSimulationJobBatchInput, completion: @escaping (SdkResult<DescribeSimulationJobBatchOutputResponse, DescribeSimulationJobBatchOutputError>) -> Void)
    /// <p>Describes a world.</p>
    func describeWorld(input: DescribeWorldInput, completion: @escaping (SdkResult<DescribeWorldOutputResponse, DescribeWorldOutputError>) -> Void)
    /// <p>Describes a world export job.</p>
    func describeWorldExportJob(input: DescribeWorldExportJobInput, completion: @escaping (SdkResult<DescribeWorldExportJobOutputResponse, DescribeWorldExportJobOutputError>) -> Void)
    /// <p>Describes a world generation job.</p>
    func describeWorldGenerationJob(input: DescribeWorldGenerationJobInput, completion: @escaping (SdkResult<DescribeWorldGenerationJobOutputResponse, DescribeWorldGenerationJobOutputError>) -> Void)
    /// <p>Describes a world template.</p>
    func describeWorldTemplate(input: DescribeWorldTemplateInput, completion: @escaping (SdkResult<DescribeWorldTemplateOutputResponse, DescribeWorldTemplateOutputError>) -> Void)
    /// <p>Gets the world template body.</p>
    func getWorldTemplateBody(input: GetWorldTemplateBodyInput, completion: @escaping (SdkResult<GetWorldTemplateBodyOutputResponse, GetWorldTemplateBodyOutputError>) -> Void)
    /// <p>Returns a list of deployment jobs for a fleet. You can optionally provide filters to
    ///          retrieve specific deployment jobs. </p>
    func listDeploymentJobs(input: ListDeploymentJobsInput, completion: @escaping (SdkResult<ListDeploymentJobsOutputResponse, ListDeploymentJobsOutputError>) -> Void)
    /// <p>Returns a list of fleets. You can optionally provide filters to retrieve specific
    ///          fleets. </p>
    func listFleets(input: ListFleetsInput, completion: @escaping (SdkResult<ListFleetsOutputResponse, ListFleetsOutputError>) -> Void)
    /// <p>Returns a list of robot application. You can optionally provide filters to retrieve
    ///          specific robot applications.</p>
    func listRobotApplications(input: ListRobotApplicationsInput, completion: @escaping (SdkResult<ListRobotApplicationsOutputResponse, ListRobotApplicationsOutputError>) -> Void)
    /// <p>Returns a list of robots. You can optionally provide filters to retrieve specific
    ///          robots.</p>
    func listRobots(input: ListRobotsInput, completion: @escaping (SdkResult<ListRobotsOutputResponse, ListRobotsOutputError>) -> Void)
    /// <p>Returns a list of simulation applications. You can optionally provide filters to
    ///          retrieve specific simulation applications. </p>
    func listSimulationApplications(input: ListSimulationApplicationsInput, completion: @escaping (SdkResult<ListSimulationApplicationsOutputResponse, ListSimulationApplicationsOutputError>) -> Void)
    /// <p>Returns a list simulation job batches. You can optionally provide filters to retrieve
    ///          specific simulation batch jobs. </p>
    func listSimulationJobBatches(input: ListSimulationJobBatchesInput, completion: @escaping (SdkResult<ListSimulationJobBatchesOutputResponse, ListSimulationJobBatchesOutputError>) -> Void)
    /// <p>Returns a list of simulation jobs. You can optionally provide filters to retrieve
    ///          specific simulation jobs. </p>
    func listSimulationJobs(input: ListSimulationJobsInput, completion: @escaping (SdkResult<ListSimulationJobsOutputResponse, ListSimulationJobsOutputError>) -> Void)
    /// <p>Lists all tags on a AWS RoboMaker resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists world export jobs.</p>
    func listWorldExportJobs(input: ListWorldExportJobsInput, completion: @escaping (SdkResult<ListWorldExportJobsOutputResponse, ListWorldExportJobsOutputError>) -> Void)
    /// <p>Lists world generator jobs.</p>
    func listWorldGenerationJobs(input: ListWorldGenerationJobsInput, completion: @escaping (SdkResult<ListWorldGenerationJobsOutputResponse, ListWorldGenerationJobsOutputError>) -> Void)
    /// <p>Lists worlds.</p>
    func listWorlds(input: ListWorldsInput, completion: @escaping (SdkResult<ListWorldsOutputResponse, ListWorldsOutputError>) -> Void)
    /// <p>Lists world templates.</p>
    func listWorldTemplates(input: ListWorldTemplatesInput, completion: @escaping (SdkResult<ListWorldTemplatesOutputResponse, ListWorldTemplatesOutputError>) -> Void)
    /// <p>Registers a robot with a fleet.</p>
    func registerRobot(input: RegisterRobotInput, completion: @escaping (SdkResult<RegisterRobotOutputResponse, RegisterRobotOutputError>) -> Void)
    /// <p>Restarts a running simulation job.</p>
    func restartSimulationJob(input: RestartSimulationJobInput, completion: @escaping (SdkResult<RestartSimulationJobOutputResponse, RestartSimulationJobOutputError>) -> Void)
    /// <p>Starts a new simulation job batch. The batch is defined using one or more
    ///             <code>SimulationJobRequest</code> objects. </p>
    func startSimulationJobBatch(input: StartSimulationJobBatchInput, completion: @escaping (SdkResult<StartSimulationJobBatchOutputResponse, StartSimulationJobBatchOutputError>) -> Void)
    /// <p>Syncrhonizes robots in a fleet to the latest deployment. This is helpful if robots were
    ///          added after a deployment.</p>
    func syncDeploymentJob(input: SyncDeploymentJobInput, completion: @escaping (SdkResult<SyncDeploymentJobOutputResponse, SyncDeploymentJobOutputError>) -> Void)
    /// <p>Adds or edits tags for a AWS RoboMaker resource.</p>
    ///          <p>Each tag consists of a tag key and a tag value. Tag keys and tag values are both
    ///          required, but tag values can be empty strings. </p>
    ///          <p>For information about the rules that apply to tag keys and tag values, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">User-Defined Tag Restrictions</a> in the <i>AWS Billing and Cost Management
    ///             User Guide</i>. </p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes the specified tags from the specified AWS RoboMaker resource.</p>
    ///          <p>To remove a tag, specify the tag key. To change the tag value of an existing tag key,
    ///          use <a href="https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html">
    ///                <code>TagResource</code>
    ///             </a>. </p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates a robot application.</p>
    func updateRobotApplication(input: UpdateRobotApplicationInput, completion: @escaping (SdkResult<UpdateRobotApplicationOutputResponse, UpdateRobotApplicationOutputError>) -> Void)
    /// <p>Updates a simulation application.</p>
    func updateSimulationApplication(input: UpdateSimulationApplicationInput, completion: @escaping (SdkResult<UpdateSimulationApplicationOutputResponse, UpdateSimulationApplicationOutputError>) -> Void)
    /// <p>Updates a world template.</p>
    func updateWorldTemplate(input: UpdateWorldTemplateInput, completion: @escaping (SdkResult<UpdateWorldTemplateOutputResponse, UpdateWorldTemplateOutputError>) -> Void)
}
