// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hashes
        case name
        case size
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashes = hashes {
            var hashesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .hashes)
            for (dictKey0, assethashes0) in hashes {
                try hashesContainer.encode(assethashes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let size = size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .size)
        size = sizeDecoded
        let hashesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .hashes)
        var hashesDecoded0: [String:String]? = nil
        if let hashesContainer = hashesContainer {
            hashesDecoded0 = [String:String]()
            for (key0, hashvalue0) in hashesContainer {
                hashesDecoded0?[key0] = hashvalue0
            }
        }
        hashes = hashesDecoded0
    }
}
