// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RepositoryExternalConnectionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalConnectionName
        case packageFormat
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalConnectionName = externalConnectionName {
            try encodeContainer.encode(externalConnectionName, forKey: .externalConnectionName)
        }
        if let packageFormat = packageFormat {
            try encodeContainer.encode(packageFormat.rawValue, forKey: .packageFormat)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalConnectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalConnectionName)
        externalConnectionName = externalConnectionNameDecoded
        let packageFormatDecoded = try containerValues.decodeIfPresent(PackageFormat.self, forKey: .packageFormat)
        packageFormat = packageFormatDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ExternalConnectionStatus.self, forKey: .status)
        status = statusDecoded
    }
}
