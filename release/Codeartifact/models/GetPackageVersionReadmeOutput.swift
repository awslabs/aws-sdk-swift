// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetPackageVersionReadmeOutput: Equatable {
    /// <p>
    ///       The format of the package with the requested readme file. Valid format types are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>npm</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pypi</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>maven</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let format: PackageFormat?
    /// <p>
    ///       The namespace of the package. The package component that specifies its
    ///       namespace depends on its type. For example:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///           The namespace of a Maven package is its <code>groupId</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           The namespace of an npm package is its <code>scope</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           A Python package does not contain a corresponding component, so
    ///           Python packages do not have a namespace.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let namespace: String?
    /// <p>
    ///       The name of the package that contains the returned readme file.
    ///     </p>
    public let package: String?
    /// <p>
    ///       The text of the returned readme file.
    ///     </p>
    public let readme: String?
    /// <p>
    ///       The version of the package with the requested readme file.
    ///     </p>
    public let version: String?
    /// <p>
    ///       The current revision associated with the package version.
    ///     </p>
    public let versionRevision: String?

    public init (
        format: PackageFormat? = nil,
        namespace: String? = nil,
        package: String? = nil,
        readme: String? = nil,
        version: String? = nil,
        versionRevision: String? = nil
    )
    {
        self.format = format
        self.namespace = namespace
        self.package = package
        self.readme = readme
        self.version = version
        self.versionRevision = versionRevision
    }
}
