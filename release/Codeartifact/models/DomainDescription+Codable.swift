// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DomainDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case assetSizeBytes
        case createdTime
        case encryptionKey
        case name
        case owner
        case repositoryCount
        case s3BucketArn
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if assetSizeBytes != 0 {
            try encodeContainer.encode(assetSizeBytes, forKey: .assetSizeBytes)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if repositoryCount != 0 {
            try encodeContainer.encode(repositoryCount, forKey: .repositoryCount)
        }
        if let s3BucketArn = s3BucketArn {
            try encodeContainer.encode(s3BucketArn, forKey: .s3BucketArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .owner)
        owner = ownerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DomainStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let repositoryCountDecoded = try containerValues.decode(Int.self, forKey: .repositoryCount)
        repositoryCount = repositoryCountDecoded
        let assetSizeBytesDecoded = try containerValues.decode(Int.self, forKey: .assetSizeBytes)
        assetSizeBytes = assetSizeBytesDecoded
        let s3BucketArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketArn)
        s3BucketArn = s3BucketArnDecoded
    }
}
