// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>
///       Details about a package version.
///     </p>
public struct PackageVersionDescription: Equatable {
    /// <p>
    ///       The name of the package that is displayed. The <code>displayName</code> varies depending
    ///       on the package version's format. For example, if an npm package is named <code>ui</code>,
    ///       is in the namespace <code>vue</code>, and has the format <code>npm</code>, then
    ///       the <code>displayName</code> is <code>@vue/ui</code>.
    ///     </p>
    public let displayName: String?
    /// <p>
    ///       The format of the package version. The valid package formats are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>npm</code>: A Node Package Manager (npm) package.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pypi</code>: A Python Package Index (PyPI) package.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>maven</code>: A Maven package that contains compiled code in a distributable format, such as a JAR file.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let format: PackageFormat?
    /// <p>
    ///       The homepage associated with the package.
    ///     </p>
    public let homePage: String?
    /// <p>
    ///       Information about licenses associated with the package version.
    ///     </p>
    public let licenses: [LicenseInfo]?
    /// <p>
    ///       The namespace of the package. The package component that specifies its
    ///       namespace depends on its type. For example:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///           The namespace of a Maven package is its <code>groupId</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           The namespace of an npm package is its <code>scope</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           A Python package does not contain a corresponding component, so
    ///           Python packages do not have a namespace.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let namespace: String?
    /// <p>
    ///       The name of the requested package.
    ///     </p>
    public let packageName: String?
    /// <p>
    ///       A timestamp that contains the date and time the package version was published.
    ///     </p>
    public let publishedTime: Date?
    /// <p>
    ///       The revision of the package version.
    ///     </p>
    public let revision: String?
    /// <p>
    ///       The repository for the source code in the package version, or the source code used to build it.
    ///     </p>
    public let sourceCodeRepository: String?
    /// <p>
    ///       A string that contains the status of the package version. It can be one of the following:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Published</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Unfinished</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Unlisted</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Archived</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Disposed</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let status: PackageVersionStatus?
    /// <p>
    ///       A summary of the package version. The summary is extracted from the package. The information in and
    ///       detail level of the summary depends on the package version's format.
    ///     </p>
    public let summary: String?
    /// <p>
    ///       The version of the package.
    ///     </p>
    public let version: String?

    public init (
        displayName: String? = nil,
        format: PackageFormat? = nil,
        homePage: String? = nil,
        licenses: [LicenseInfo]? = nil,
        namespace: String? = nil,
        packageName: String? = nil,
        publishedTime: Date? = nil,
        revision: String? = nil,
        sourceCodeRepository: String? = nil,
        status: PackageVersionStatus? = nil,
        summary: String? = nil,
        version: String? = nil
    )
    {
        self.displayName = displayName
        self.format = format
        self.homePage = homePage
        self.licenses = licenses
        self.namespace = namespace
        self.packageName = packageName
        self.publishedTime = publishedTime
        self.revision = revision
        self.sourceCodeRepository = sourceCodeRepository
        self.status = status
        self.summary = summary
        self.version = version
    }
}
