// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PackageSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case format
        case namespace
        case package
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let package = package {
            try encodeContainer.encode(package, forKey: .package)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(PackageFormat.self, forKey: .format)
        format = formatDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let packageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .package)
        package = packageDecoded
    }
}
