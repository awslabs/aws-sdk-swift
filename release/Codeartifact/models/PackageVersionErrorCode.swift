// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum PackageVersionErrorCode {
    case alreadyExists
    case mismatchedRevision
    case mismatchedStatus
    case notAllowed
    case notFound
    case skipped
    case sdkUnknown(String)
}

extension PackageVersionErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PackageVersionErrorCode] {
        return [
            .alreadyExists,
            .mismatchedRevision,
            .mismatchedStatus,
            .notAllowed,
            .notFound,
            .skipped,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alreadyExists: return "ALREADY_EXISTS"
        case .mismatchedRevision: return "MISMATCHED_REVISION"
        case .mismatchedStatus: return "MISMATCHED_STATUS"
        case .notAllowed: return "NOT_ALLOWED"
        case .notFound: return "NOT_FOUND"
        case .skipped: return "SKIPPED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PackageVersionErrorCode(rawValue: rawValue) ?? PackageVersionErrorCode.sdkUnknown(rawValue)
    }
}
