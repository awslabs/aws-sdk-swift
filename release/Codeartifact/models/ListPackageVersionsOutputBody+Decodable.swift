// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackageVersionsOutputBody: Equatable {
    public let defaultDisplayVersion: String?
    public let format: PackageFormat?
    public let namespace: String?
    public let package: String?
    public let versions: [PackageVersionSummary]?
    public let nextToken: String?
}

extension ListPackageVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultDisplayVersion
        case format
        case namespace
        case nextToken
        case package
        case versions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultDisplayVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultDisplayVersion)
        defaultDisplayVersion = defaultDisplayVersionDecoded
        let formatDecoded = try containerValues.decodeIfPresent(PackageFormat.self, forKey: .format)
        format = formatDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let packageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .package)
        package = packageDecoded
        let versionsContainer = try containerValues.decodeIfPresent([PackageVersionSummary].self, forKey: .versions)
        var versionsDecoded0:[PackageVersionSummary]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [PackageVersionSummary]()
            for structure0 in versionsContainer {
                versionsDecoded0?.append(structure0)
            }
        }
        versions = versionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
