// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CopyPackageVersionsInput: Equatable {
    /// <p>
    ///        Set to true to overwrite a package version that already exists in the destination repository.
    ///        If set to false and the package version already exists in the destination repository,
    ///        the package version is returned in the <code>failedVersions</code> field of the response with
    ///        an <code>ALREADY_EXISTS</code> error code.
    ///      </p>
    public let allowOverwrite: Bool?
    /// <p>
    ///       The name of the repository into which package versions are copied.
    ///     </p>
    public let destinationRepository: String?
    /// <p>
    ///         The name of the domain that contains the source and destination repositories.
    ///       </p>
    public let domain: String?
    /// <p>
    ///         The 12-digit account number of the AWS account that owns the domain. It does not include
    ///         dashes or spaces.
    ///       </p>
    public let domainOwner: String?
    /// <p>
    ///       The format of the package that is copied. The valid package types are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>npm</code>: A Node Package Manager (npm) package.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pypi</code>: A Python Package Index (PyPI) package.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>maven</code>: A Maven package that contains compiled code in a distributable format, such as a JAR file.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let format: PackageFormat?
    /// <p> Set to true to copy packages from repositories that are upstream from the source
    ///       repository to the destination repository. The default setting is false. For more information,
    ///       see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with
    ///         upstream repositories</a>. </p>
    public let includeFromUpstream: Bool?
    /// <p>
    ///       The namespace of the package. The package component that specifies its
    ///       namespace depends on its type. For example:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///           The namespace of a Maven package is its <code>groupId</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           The namespace of an npm package is its <code>scope</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           A Python package does not contain a corresponding component, so
    ///           Python packages do not have a namespace.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let namespace: String?
    /// <p>
    ///       The name of the package that is copied.
    ///     </p>
    public let package: String?
    /// <p>
    ///          The name of the repository that contains the package versions to copy.
    ///        </p>
    public let sourceRepository: String?
    /// <p>
    ///        A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation
    ///       succeeds if the specified versions in the source repository match the specified package version revision.
    ///     </p>
    ///          <note>
    ///             <p>
    ///         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
    ///       </p>
    ///          </note>
    public let versionRevisions: [String:String]?
    /// <p>
    ///         The versions of the package to copy.
    ///       </p>
    ///          <note>
    ///             <p>
    ///         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
    ///       </p>
    ///          </note>
    public let versions: [String]?

    public init (
        allowOverwrite: Bool? = nil,
        destinationRepository: String? = nil,
        domain: String? = nil,
        domainOwner: String? = nil,
        format: PackageFormat? = nil,
        includeFromUpstream: Bool? = nil,
        namespace: String? = nil,
        package: String? = nil,
        sourceRepository: String? = nil,
        versionRevisions: [String:String]? = nil,
        versions: [String]? = nil
    )
    {
        self.allowOverwrite = allowOverwrite
        self.destinationRepository = destinationRepository
        self.domain = domain
        self.domainOwner = domainOwner
        self.format = format
        self.includeFromUpstream = includeFromUpstream
        self.namespace = namespace
        self.package = package
        self.sourceRepository = sourceRepository
        self.versionRevisions = versionRevisions
        self.versions = versions
    }
}
