// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackagesOutputBody: Equatable {
    public let packages: [PackageSummary]?
    public let nextToken: String?
}

extension ListPackagesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case packages
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packagesContainer = try containerValues.decodeIfPresent([PackageSummary].self, forKey: .packages)
        var packagesDecoded0:[PackageSummary]? = nil
        if let packagesContainer = packagesContainer {
            packagesDecoded0 = [PackageSummary]()
            for structure0 in packagesContainer {
                packagesDecoded0?.append(structure0)
            }
        }
        packages = packagesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
