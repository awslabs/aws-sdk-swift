// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdatePackageVersionsStatusInput: Equatable {
    /// <p>
    ///       The name of the domain that contains the repository that contains the package versions with a status to be updated.
    ///     </p>
    public let domain: String?
    /// <p>
    ///         The 12-digit account number of the AWS account that owns the domain. It does not include
    ///         dashes or spaces.
    ///       </p>
    public let domainOwner: String?
    /// <p> The package versionâ€™s expected status before it is updated. If
    ///         <code>expectedStatus</code> is provided, the package version's status is updated only if its
    ///       status at the time <code>UpdatePackageVersionsStatus</code> is called matches
    ///         <code>expectedStatus</code>. </p>
    public let expectedStatus: PackageVersionStatus?
    /// <p>
    ///       A format that specifies the type of the package with the statuses to update. The valid values are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>npm</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pypi</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>maven</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let format: PackageFormat?
    /// <p>
    ///       The namespace of the package. The package component that specifies its
    ///       namespace depends on its type. For example:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///           The namespace of a Maven package is its <code>groupId</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           The namespace of an npm package is its <code>scope</code>.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///           A Python package does not contain a corresponding component, so
    ///           Python packages do not have a namespace.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let namespace: String?
    /// <p>
    ///       The name of the package with the version statuses to update.
    ///     </p>
    public let package: String?
    /// <p>
    ///       The repository that contains the package versions with the status you want to update.
    ///     </p>
    public let repository: String?
    /// <p>
    ///       The status you want to change the package version status to.
    ///     </p>
    public let targetStatus: PackageVersionStatus?
    /// <p> A map of package versions and package version revisions. The map <code>key</code> is the
    ///       package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the
    ///       package version revision. </p>
    public let versionRevisions: [String:String]?
    /// <p>
    ///       An array of strings that specify the versions of the package with the statuses to update.
    ///     </p>
    public let versions: [String]?

    public init (
        domain: String? = nil,
        domainOwner: String? = nil,
        expectedStatus: PackageVersionStatus? = nil,
        format: PackageFormat? = nil,
        namespace: String? = nil,
        package: String? = nil,
        repository: String? = nil,
        targetStatus: PackageVersionStatus? = nil,
        versionRevisions: [String:String]? = nil,
        versions: [String]? = nil
    )
    {
        self.domain = domain
        self.domainOwner = domainOwner
        self.expectedStatus = expectedStatus
        self.format = format
        self.namespace = namespace
        self.package = package
        self.repository = repository
        self.targetStatus = targetStatus
        self.versionRevisions = versionRevisions
        self.versions = versions
    }
}
