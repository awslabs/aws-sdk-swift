// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupList = "GroupList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case tags = "Tags"
        case userId = "UserId"
        case userName = "UserName"
        case userPolicyList = "UserPolicyList"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: Key("Arn"))
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttachedManagedPolicies"))
            for (index0, attachedpolicy0) in attachedManagedPolicies.enumerated() {
                try attachedManagedPoliciesContainer.encode(attachedpolicy0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createDate = createDate {
            try container.encode(TimestampWrapper(createDate, format: .dateTime), forKey: Key("createDate"))
        }
        if let groupList = groupList {
            var groupListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GroupList"))
            for (index0, groupnametype0) in groupList.enumerated() {
                try groupListContainer.encode(groupnametype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let path = path {
            try container.encode(path, forKey: Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: Key("PermissionsBoundary"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
        if let userPolicyList = userPolicyList {
            var userPolicyListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserPolicyList"))
            for (index0, policydetail0) in userPolicyList.enumerated() {
                try userPolicyListContainer.encode(policydetail0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createDate)
        var createDateBuffer:Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.userPolicyList) {
            struct KeyVal0{struct member{}}
            let userPolicyListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userPolicyList)
            if let userPolicyListWrappedContainer = userPolicyListWrappedContainer {
                let userPolicyListContainer = try userPolicyListWrappedContainer.decodeIfPresent([PolicyDetail].self, forKey: .member)
                var userPolicyListBuffer:[PolicyDetail]? = nil
                if let userPolicyListContainer = userPolicyListContainer {
                    userPolicyListBuffer = [PolicyDetail]()
                    for structureContainer0 in userPolicyListContainer {
                        userPolicyListBuffer?.append(structureContainer0)
                    }
                }
                userPolicyList = userPolicyListBuffer
            } else {
                userPolicyList = []
            }
        } else {
            userPolicyList = nil
        }
        if containerValues.contains(.groupList) {
            struct KeyVal0{struct member{}}
            let groupListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groupList)
            if let groupListWrappedContainer = groupListWrappedContainer {
                let groupListContainer = try groupListWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var groupListBuffer:[String]? = nil
                if let groupListContainer = groupListContainer {
                    groupListBuffer = [String]()
                    for stringContainer0 in groupListContainer {
                        groupListBuffer?.append(stringContainer0)
                    }
                }
                groupList = groupListBuffer
            } else {
                groupList = []
            }
        } else {
            groupList = nil
        }
        if containerValues.contains(.attachedManagedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedManagedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedManagedPolicies)
            if let attachedManagedPoliciesWrappedContainer = attachedManagedPoliciesWrappedContainer {
                let attachedManagedPoliciesContainer = try attachedManagedPoliciesWrappedContainer.decodeIfPresent([AttachedPolicy].self, forKey: .member)
                var attachedManagedPoliciesBuffer:[AttachedPolicy]? = nil
                if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
                    attachedManagedPoliciesBuffer = [AttachedPolicy]()
                    for structureContainer0 in attachedManagedPoliciesContainer {
                        attachedManagedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedManagedPolicies = attachedManagedPoliciesBuffer
            } else {
                attachedManagedPolicies = []
            }
        } else {
            attachedManagedPolicies = nil
        }
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
