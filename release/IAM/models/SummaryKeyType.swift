// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SummaryKeyType {
    case accesskeysperuserquota
    case accountaccesskeyspresent
    case accountmfaenabled
    case accountsigningcertificatespresent
    case attachedpoliciespergroupquota
    case attachedpoliciesperrolequota
    case attachedpoliciesperuserquota
    case globalendpointtokenversion
    case grouppolicysizequota
    case groups
    case groupsperuserquota
    case groupsquota
    case mfadevices
    case mfadevicesinuse
    case policies
    case policiesquota
    case policysizequota
    case policyversionsinuse
    case policyversionsinusequota
    case servercertificates
    case servercertificatesquota
    case signingcertificatesperuserquota
    case userpolicysizequota
    case users
    case usersquota
    case versionsperpolicyquota
    case sdkUnknown(String)
}

extension SummaryKeyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SummaryKeyType] {
        return [
            .accesskeysperuserquota,
            .accountaccesskeyspresent,
            .accountmfaenabled,
            .accountsigningcertificatespresent,
            .attachedpoliciespergroupquota,
            .attachedpoliciesperrolequota,
            .attachedpoliciesperuserquota,
            .globalendpointtokenversion,
            .grouppolicysizequota,
            .groups,
            .groupsperuserquota,
            .groupsquota,
            .mfadevices,
            .mfadevicesinuse,
            .policies,
            .policiesquota,
            .policysizequota,
            .policyversionsinuse,
            .policyversionsinusequota,
            .servercertificates,
            .servercertificatesquota,
            .signingcertificatesperuserquota,
            .userpolicysizequota,
            .users,
            .usersquota,
            .versionsperpolicyquota,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accesskeysperuserquota: return "AccessKeysPerUserQuota"
        case .accountaccesskeyspresent: return "AccountAccessKeysPresent"
        case .accountmfaenabled: return "AccountMFAEnabled"
        case .accountsigningcertificatespresent: return "AccountSigningCertificatesPresent"
        case .attachedpoliciespergroupquota: return "AttachedPoliciesPerGroupQuota"
        case .attachedpoliciesperrolequota: return "AttachedPoliciesPerRoleQuota"
        case .attachedpoliciesperuserquota: return "AttachedPoliciesPerUserQuota"
        case .globalendpointtokenversion: return "GlobalEndpointTokenVersion"
        case .grouppolicysizequota: return "GroupPolicySizeQuota"
        case .groups: return "Groups"
        case .groupsperuserquota: return "GroupsPerUserQuota"
        case .groupsquota: return "GroupsQuota"
        case .mfadevices: return "MFADevices"
        case .mfadevicesinuse: return "MFADevicesInUse"
        case .policies: return "Policies"
        case .policiesquota: return "PoliciesQuota"
        case .policysizequota: return "PolicySizeQuota"
        case .policyversionsinuse: return "PolicyVersionsInUse"
        case .policyversionsinusequota: return "PolicyVersionsInUseQuota"
        case .servercertificates: return "ServerCertificates"
        case .servercertificatesquota: return "ServerCertificatesQuota"
        case .signingcertificatesperuserquota: return "SigningCertificatesPerUserQuota"
        case .userpolicysizequota: return "UserPolicySizeQuota"
        case .users: return "Users"
        case .usersquota: return "UsersQuota"
        case .versionsperpolicyquota: return "VersionsPerPolicyQuota"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SummaryKeyType(rawValue: rawValue) ?? SummaryKeyType.sdkUnknown(rawValue)
    }
}
