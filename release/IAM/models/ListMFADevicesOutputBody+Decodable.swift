// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMFADevicesOutputBody: Equatable {
    public let mFADevices: [MFADevice]?
    public let isTruncated: Bool
    public let marker: String?
}

extension ListMFADevicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isTruncated = "IsTruncated"
        case mFADevices = "MFADevices"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListMFADevicesResult"))
        if containerValues.contains(.mFADevices) {
            struct KeyVal0{struct member{}}
            let mFADevicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .mFADevices)
            if let mFADevicesWrappedContainer = mFADevicesWrappedContainer {
                let mFADevicesContainer = try mFADevicesWrappedContainer.decodeIfPresent([MFADevice].self, forKey: .member)
                var mFADevicesBuffer:[MFADevice]? = nil
                if let mFADevicesContainer = mFADevicesContainer {
                    mFADevicesBuffer = [MFADevice]()
                    for structureContainer0 in mFADevicesContainer {
                        mFADevicesBuffer?.append(structureContainer0)
                    }
                }
                mFADevices = mFADevicesBuffer
            } else {
                mFADevices = []
            }
        } else {
            mFADevices = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
