// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateServiceLinkedRoleInput: Equatable {
    /// <p>The service principal for the AWS service to which this role is attached. You use a
    ///             string similar to a URL but without the http:// in front. For example:
    ///                 <code>elasticbeanstalk.amazonaws.com</code>. </p>
    ///         <p>Service principals are unique and case-sensitive. To find the exact service principal
    ///             for your service-linked role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS services
    ///                 that work with IAM</a> in the <i>IAM User Guide</i>. Look for
    ///             the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that
    ///             service.</p>
    public let aWSServiceName: String?
    /// <p></p>
    ///         <p>A string that you provide, which is combined with the service-provided prefix to form
    ///             the complete role name. If you make multiple requests for the same service, then you
    ///             must supply a different <code>CustomSuffix</code> for each request. Otherwise the
    ///             request fails with a duplicate role name error. For example, you could add
    ///                 <code>-1</code> or <code>-debug</code> to the suffix.</p>
    ///         <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide
    ///             an optional suffix and the operation fails, try the operation again without the
    ///             suffix.</p>
    public let customSuffix: String?
    /// <p>The description of the role.</p>
    public let description: String?

    public init (
        aWSServiceName: String? = nil,
        customSuffix: String? = nil,
        description: String? = nil
    )
    {
        self.aWSServiceName = aWSServiceName
        self.customSuffix = customSuffix
        self.description = description
    }
}
