// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrackedActionLastAccessed: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionName = "ActionName"
        case lastAccessedEntity = "LastAccessedEntity"
        case lastAccessedRegion = "LastAccessedRegion"
        case lastAccessedTime = "LastAccessedTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionName = actionName {
            try container.encode(actionName, forKey: Key("ActionName"))
        }
        if let lastAccessedEntity = lastAccessedEntity {
            try container.encode(lastAccessedEntity, forKey: Key("LastAccessedEntity"))
        }
        if let lastAccessedRegion = lastAccessedRegion {
            try container.encode(lastAccessedRegion, forKey: Key("LastAccessedRegion"))
        }
        if let lastAccessedTime = lastAccessedTime {
            try container.encode(TimestampWrapper(lastAccessedTime, format: .dateTime), forKey: Key("lastAccessedTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let lastAccessedEntityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastAccessedEntity)
        lastAccessedEntity = lastAccessedEntityDecoded
        let lastAccessedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastAccessedTime)
        var lastAccessedTimeBuffer:Date? = nil
        if let lastAccessedTimeDecoded = lastAccessedTimeDecoded {
            lastAccessedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastAccessedTimeDecoded, format: .dateTime)
        }
        lastAccessedTime = lastAccessedTimeBuffer
        let lastAccessedRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastAccessedRegion)
        lastAccessedRegion = lastAccessedRegionDecoded
    }
}
