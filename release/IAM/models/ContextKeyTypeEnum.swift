// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ContextKeyTypeEnum {
    case binary
    case binaryList
    case boolean
    case booleanList
    case date
    case dateList
    case ip
    case ipList
    case numeric
    case numericList
    case string
    case stringList
    case sdkUnknown(String)
}

extension ContextKeyTypeEnum : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContextKeyTypeEnum] {
        return [
            .binary,
            .binaryList,
            .boolean,
            .booleanList,
            .date,
            .dateList,
            .ip,
            .ipList,
            .numeric,
            .numericList,
            .string,
            .stringList,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .binary: return "binary"
        case .binaryList: return "binaryList"
        case .boolean: return "boolean"
        case .booleanList: return "booleanList"
        case .date: return "date"
        case .dateList: return "dateList"
        case .ip: return "ip"
        case .ipList: return "ipList"
        case .numeric: return "numeric"
        case .numericList: return "numericList"
        case .string: return "string"
        case .stringList: return "stringList"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContextKeyTypeEnum(rawValue: rawValue) ?? ContextKeyTypeEnum.sdkUnknown(rawValue)
    }
}
