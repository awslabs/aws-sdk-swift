// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the results of a simulation.</p>
///          <p>This data type is used by the return parameter of <code>
///                <a>SimulateCustomPolicy</a>
///             </code> and <code>
///                <a>SimulatePrincipalPolicy</a>
///             </code>.</p>
public struct EvaluationResult: Equatable {
    /// <p>The name of the API operation tested on the indicated resource.</p>
    public let evalActionName: String?
    /// <p>The result of the simulation.</p>
    public let evalDecision: PolicyEvaluationDecisionType?
    /// <p>Additional details about the results of the cross-account evaluation decision. This
    ///          parameter is populated for only cross-account simulations. It contains a brief summary of
    ///          how each policy type contributes to the final evaluation decision.</p>
    ///          <p>If the simulation evaluates policies within the same account and includes a resource
    ///          ARN, then the parameter is present but the response is empty. If the simulation evaluates
    ///          policies within the same account and specifies all resources (<code>*</code>), then the
    ///          parameter is not returned.</p>
    ///          <p>When you make a cross-account request, AWS evaluates the request in the trusting
    ///          account and the trusted account. The request is allowed only if both evaluations return
    ///             <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    ///          <p>If an AWS Organizations SCP included in the evaluation denies access, the simulation ends. In
    ///          this case, policy evaluation does not proceed any further and this parameter is not
    ///          returned.</p>
    public let evalDecisionDetails: [String:PolicyEvaluationDecisionType]?
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    public let evalResourceName: String?
    /// <p>A list of the statements in the input policies that determine the result for this
    ///          scenario. Remember that even if multiple statements allow the operation on the resource, if
    ///          only one statement denies that operation, then the explicit deny overrides any allow. In
    ///          addition, the deny statement is the only entry included in the result.</p>
    public let matchedStatements: [Statement]?
    /// <p>A list of context keys that are required by the included input policies but that were
    ///          not provided by one of the input parameters. This list is used when the resource in a
    ///          simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter
    ///          blank. If you include a list of resources, then any missing context values are instead
    ///          included under the <code>ResourceSpecificResults</code> section. To discover the context
    ///          keys used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or <a>GetContextKeysForPrincipalPolicy</a>.</p>
    public let missingContextValues: [String]?
    /// <p>A structure that details how Organizations and its service control policies affect the results of
    ///          the simulation. Only applies if the simulated user's account is part of an
    ///          organization.</p>
    public let organizationsDecisionDetail: OrganizationsDecisionDetail?
    /// <p>Contains information about the effect that a permissions boundary has on a policy
    ///          simulation when the boundary is applied to an IAM entity.</p>
    public let permissionsBoundaryDecisionDetail: PermissionsBoundaryDecisionDetail?
    /// <p>The individual results of the simulation of the API operation specified in
    ///          EvalActionName on each resource.</p>
    public let resourceSpecificResults: [ResourceSpecificResult]?

    public init (
        evalActionName: String? = nil,
        evalDecision: PolicyEvaluationDecisionType? = nil,
        evalDecisionDetails: [String:PolicyEvaluationDecisionType]? = nil,
        evalResourceName: String? = nil,
        matchedStatements: [Statement]? = nil,
        missingContextValues: [String]? = nil,
        organizationsDecisionDetail: OrganizationsDecisionDetail? = nil,
        permissionsBoundaryDecisionDetail: PermissionsBoundaryDecisionDetail? = nil,
        resourceSpecificResults: [ResourceSpecificResult]? = nil
    )
    {
        self.evalActionName = evalActionName
        self.evalDecision = evalDecision
        self.evalDecisionDetails = evalDecisionDetails
        self.evalResourceName = evalResourceName
        self.matchedStatements = matchedStatements
        self.missingContextValues = missingContextValues
        self.organizationsDecisionDetail = organizationsDecisionDetail
        self.permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail
        self.resourceSpecificResults = resourceSpecificResults
    }
}
