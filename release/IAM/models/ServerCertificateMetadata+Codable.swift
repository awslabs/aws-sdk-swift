// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerCertificateMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case expiration = "Expiration"
        case path = "Path"
        case serverCertificateId = "ServerCertificateId"
        case serverCertificateName = "ServerCertificateName"
        case uploadDate = "UploadDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: Key("Arn"))
        }
        if let expiration = expiration {
            try container.encode(TimestampWrapper(expiration, format: .dateTime), forKey: Key("expiration"))
        }
        if let path = path {
            try container.encode(path, forKey: Key("Path"))
        }
        if let serverCertificateId = serverCertificateId {
            try container.encode(serverCertificateId, forKey: Key("ServerCertificateId"))
        }
        if let serverCertificateName = serverCertificateName {
            try container.encode(serverCertificateName, forKey: Key("ServerCertificateName"))
        }
        if let uploadDate = uploadDate {
            try container.encode(TimestampWrapper(uploadDate, format: .dateTime), forKey: Key("uploadDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let serverCertificateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverCertificateName)
        serverCertificateName = serverCertificateNameDecoded
        let serverCertificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverCertificateId)
        serverCertificateId = serverCertificateIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadDate)
        var uploadDateBuffer:Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
        let expirationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expiration)
        var expirationBuffer:Date? = nil
        if let expirationDecoded = expirationDecoded {
            expirationBuffer = try TimestampWrapperDecoder.parseDateStringValue(expirationDecoded, format: .dateTime)
        }
        expiration = expirationBuffer
    }
}
