// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Statement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endPosition = "EndPosition"
        case sourcePolicyId = "SourcePolicyId"
        case sourcePolicyType = "SourcePolicyType"
        case startPosition = "StartPosition"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endPosition = endPosition {
            try container.encode(endPosition, forKey: Key("EndPosition"))
        }
        if let sourcePolicyId = sourcePolicyId {
            try container.encode(sourcePolicyId, forKey: Key("SourcePolicyId"))
        }
        if let sourcePolicyType = sourcePolicyType {
            try container.encode(sourcePolicyType, forKey: Key("SourcePolicyType"))
        }
        if let startPosition = startPosition {
            try container.encode(startPosition, forKey: Key("StartPosition"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePolicyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourcePolicyId)
        sourcePolicyId = sourcePolicyIdDecoded
        let sourcePolicyTypeDecoded = try containerValues.decodeIfPresent(PolicySourceType.self, forKey: .sourcePolicyType)
        sourcePolicyType = sourcePolicyTypeDecoded
        let startPositionDecoded = try containerValues.decodeIfPresent(Position.self, forKey: .startPosition)
        startPosition = startPositionDecoded
        let endPositionDecoded = try containerValues.decodeIfPresent(Position.self, forKey: .endPosition)
        endPosition = endPositionDecoded
    }
}
