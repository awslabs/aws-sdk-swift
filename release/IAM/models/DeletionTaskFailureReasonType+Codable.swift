// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeletionTaskFailureReasonType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reason = "Reason"
        case roleUsageList = "RoleUsageList"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let reason = reason {
            try container.encode(reason, forKey: Key("Reason"))
        }
        if let roleUsageList = roleUsageList {
            var roleUsageListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RoleUsageList"))
            for (index0, roleusagetype0) in roleUsageList.enumerated() {
                try roleUsageListContainer.encode(roleusagetype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        if containerValues.contains(.roleUsageList) {
            struct KeyVal0{struct member{}}
            let roleUsageListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roleUsageList)
            if let roleUsageListWrappedContainer = roleUsageListWrappedContainer {
                let roleUsageListContainer = try roleUsageListWrappedContainer.decodeIfPresent([RoleUsageType].self, forKey: .member)
                var roleUsageListBuffer:[RoleUsageType]? = nil
                if let roleUsageListContainer = roleUsageListContainer {
                    roleUsageListBuffer = [RoleUsageType]()
                    for structureContainer0 in roleUsageListContainer {
                        roleUsageListBuffer?.append(structureContainer0)
                    }
                }
                roleUsageList = roleUsageListBuffer
            } else {
                roleUsageList = []
            }
        } else {
            roleUsageList = nil
        }
    }
}
