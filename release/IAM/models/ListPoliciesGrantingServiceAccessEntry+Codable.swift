// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListPoliciesGrantingServiceAccessEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policies = "Policies"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let policies = policies {
            var policiesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Policies"))
            for (index0, policygrantingserviceaccess0) in policies.enumerated() {
                try policiesContainer.encode(policygrantingserviceaccess0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: Key("ServiceNamespace"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        if containerValues.contains(.policies) {
            struct KeyVal0{struct member{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([PolicyGrantingServiceAccess].self, forKey: .member)
                var policiesBuffer:[PolicyGrantingServiceAccess]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [PolicyGrantingServiceAccess]()
                    for structureContainer0 in policiesContainer {
                        policiesBuffer?.append(structureContainer0)
                    }
                }
                policies = policiesBuffer
            } else {
                policies = []
            }
        } else {
            policies = nil
        }
    }
}
