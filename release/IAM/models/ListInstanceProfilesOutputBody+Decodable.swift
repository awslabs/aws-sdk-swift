// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInstanceProfilesOutputBody: Equatable {
    public let instanceProfiles: [InstanceProfile]?
    public let isTruncated: Bool
    public let marker: String?
}

extension ListInstanceProfilesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceProfiles = "InstanceProfiles"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListInstanceProfilesResult"))
        if containerValues.contains(.instanceProfiles) {
            struct KeyVal0{struct member{}}
            let instanceProfilesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceProfiles)
            if let instanceProfilesWrappedContainer = instanceProfilesWrappedContainer {
                let instanceProfilesContainer = try instanceProfilesWrappedContainer.decodeIfPresent([InstanceProfile].self, forKey: .member)
                var instanceProfilesBuffer:[InstanceProfile]? = nil
                if let instanceProfilesContainer = instanceProfilesContainer {
                    instanceProfilesBuffer = [InstanceProfile]()
                    for structureContainer0 in instanceProfilesContainer {
                        instanceProfilesBuffer?.append(structureContainer0)
                    }
                }
                instanceProfiles = instanceProfilesBuffer
            } else {
                instanceProfiles = []
            }
        } else {
            instanceProfiles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
