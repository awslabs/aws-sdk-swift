// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListServiceSpecificCredentialsOutputBody: Equatable {
    public let serviceSpecificCredentials: [ServiceSpecificCredentialMetadata]?
}

extension ListServiceSpecificCredentialsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case serviceSpecificCredentials = "ServiceSpecificCredentials"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListServiceSpecificCredentialsResult"))
        if containerValues.contains(.serviceSpecificCredentials) {
            struct KeyVal0{struct member{}}
            let serviceSpecificCredentialsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceSpecificCredentials)
            if let serviceSpecificCredentialsWrappedContainer = serviceSpecificCredentialsWrappedContainer {
                let serviceSpecificCredentialsContainer = try serviceSpecificCredentialsWrappedContainer.decodeIfPresent([ServiceSpecificCredentialMetadata].self, forKey: .member)
                var serviceSpecificCredentialsBuffer:[ServiceSpecificCredentialMetadata]? = nil
                if let serviceSpecificCredentialsContainer = serviceSpecificCredentialsContainer {
                    serviceSpecificCredentialsBuffer = [ServiceSpecificCredentialMetadata]()
                    for structureContainer0 in serviceSpecificCredentialsContainer {
                        serviceSpecificCredentialsBuffer?.append(structureContainer0)
                    }
                }
                serviceSpecificCredentials = serviceSpecificCredentialsBuffer
            } else {
                serviceSpecificCredentials = []
            }
        } else {
            serviceSpecificCredentials = nil
        }
    }
}
