// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EntityDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case entityInfo = "EntityInfo"
        case lastAuthenticated = "LastAuthenticated"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let entityInfo = entityInfo {
            try container.encode(entityInfo, forKey: Key("EntityInfo"))
        }
        if let lastAuthenticated = lastAuthenticated {
            try container.encode(TimestampWrapper(lastAuthenticated, format: .dateTime), forKey: Key("lastAuthenticated"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityInfoDecoded = try containerValues.decodeIfPresent(EntityInfo.self, forKey: .entityInfo)
        entityInfo = entityInfoDecoded
        let lastAuthenticatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastAuthenticated)
        var lastAuthenticatedBuffer:Date? = nil
        if let lastAuthenticatedDecoded = lastAuthenticatedDecoded {
            lastAuthenticatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastAuthenticatedDecoded, format: .dateTime)
        }
        lastAuthenticated = lastAuthenticatedBuffer
    }
}
