// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SimulateCustomPolicyOutputBody: Equatable {
    public let evaluationResults: [EvaluationResult]?
    public let isTruncated: Bool
    public let marker: String?
}

extension SimulateCustomPolicyOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case evaluationResults = "EvaluationResults"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("SimulateCustomPolicyResult"))
        if containerValues.contains(.evaluationResults) {
            struct KeyVal0{struct member{}}
            let evaluationResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .evaluationResults)
            if let evaluationResultsWrappedContainer = evaluationResultsWrappedContainer {
                let evaluationResultsContainer = try evaluationResultsWrappedContainer.decodeIfPresent([EvaluationResult].self, forKey: .member)
                var evaluationResultsBuffer:[EvaluationResult]? = nil
                if let evaluationResultsContainer = evaluationResultsContainer {
                    evaluationResultsBuffer = [EvaluationResult]()
                    for structureContainer0 in evaluationResultsContainer {
                        evaluationResultsBuffer?.append(structureContainer0)
                    }
                }
                evaluationResults = evaluationResultsBuffer
            } else {
                evaluationResults = []
            }
        } else {
            evaluationResults = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
