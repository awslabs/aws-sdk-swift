// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateServerCertificateInput: Equatable {
    /// <p>The new path for the server certificate. Include this only if you are updating the
    ///             server certificate's path.</p>
    ///         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
    ///     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
    ///     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
    ///     most punctuation characters, digits, and upper and lowercased letters.</p>
    public let newPath: String?
    /// <p>The new name for the server certificate. Include this only if you are updating the
    ///             server certificate's name. The name of the certificate cannot contain any spaces.</p>
    ///         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
    ///     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    public let newServerCertificateName: String?
    /// <p>The name of the server certificate that you want to update.</p>
    ///         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
    ///     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    public let serverCertificateName: String?

    public init (
        newPath: String? = nil,
        newServerCertificateName: String? = nil,
        serverCertificateName: String? = nil
    )
    {
        self.newPath = newPath
        self.newServerCertificateName = newServerCertificateName
        self.serverCertificateName = serverCertificateName
    }
}
