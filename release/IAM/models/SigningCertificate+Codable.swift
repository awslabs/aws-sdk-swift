// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SigningCertificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateBody = "CertificateBody"
        case certificateId = "CertificateId"
        case status = "Status"
        case uploadDate = "UploadDate"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let certificateBody = certificateBody {
            try container.encode(certificateBody, forKey: Key("CertificateBody"))
        }
        if let certificateId = certificateId {
            try container.encode(certificateId, forKey: Key("CertificateId"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let uploadDate = uploadDate {
            try container.encode(TimestampWrapper(uploadDate, format: .dateTime), forKey: Key("uploadDate"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let certificateBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateBody)
        certificateBody = certificateBodyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StatusType.self, forKey: .status)
        status = statusDecoded
        let uploadDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadDate)
        var uploadDateBuffer:Date? = nil
        if let uploadDateDecoded = uploadDateDecoded {
            uploadDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(uploadDateDecoded, format: .dateTime)
        }
        uploadDate = uploadDateBuffer
    }
}
