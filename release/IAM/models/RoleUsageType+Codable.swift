// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoleUsageType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case region = "Region"
        case resources = "Resources"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let region = region {
            try container.encode(region, forKey: Key("Region"))
        }
        if let resources = resources {
            var resourcesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Resources"))
            for (index0, arntype0) in resources.enumerated() {
                try resourcesContainer.encode(arntype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        if containerValues.contains(.resources) {
            struct KeyVal0{struct member{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var resourcesBuffer:[String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
    }
}
