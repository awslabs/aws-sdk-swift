// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVirtualMFADevicesOutputBody: Equatable {
    public let virtualMFADevices: [VirtualMFADevice]?
    public let isTruncated: Bool
    public let marker: String?
}

extension ListVirtualMFADevicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case virtualMFADevices = "VirtualMFADevices"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListVirtualMFADevicesResult"))
        if containerValues.contains(.virtualMFADevices) {
            struct KeyVal0{struct member{}}
            let virtualMFADevicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .virtualMFADevices)
            if let virtualMFADevicesWrappedContainer = virtualMFADevicesWrappedContainer {
                let virtualMFADevicesContainer = try virtualMFADevicesWrappedContainer.decodeIfPresent([VirtualMFADevice].self, forKey: .member)
                var virtualMFADevicesBuffer:[VirtualMFADevice]? = nil
                if let virtualMFADevicesContainer = virtualMFADevicesContainer {
                    virtualMFADevicesBuffer = [VirtualMFADevice]()
                    for structureContainer0 in virtualMFADevicesContainer {
                        virtualMFADevicesBuffer?.append(structureContainer0)
                    }
                }
                virtualMFADevices = virtualMFADevicesBuffer
            } else {
                virtualMFADevices = []
            }
        } else {
            virtualMFADevices = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
