// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSigningCertificatesOutputBody: Equatable {
    public let certificates: [SigningCertificate]?
    public let isTruncated: Bool
    public let marker: String?
}

extension ListSigningCertificatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificates = "Certificates"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListSigningCertificatesResult"))
        if containerValues.contains(.certificates) {
            struct KeyVal0{struct member{}}
            let certificatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .certificates)
            if let certificatesWrappedContainer = certificatesWrappedContainer {
                let certificatesContainer = try certificatesWrappedContainer.decodeIfPresent([SigningCertificate].self, forKey: .member)
                var certificatesBuffer:[SigningCertificate]? = nil
                if let certificatesContainer = certificatesContainer {
                    certificatesBuffer = [SigningCertificate]()
                    for structureContainer0 in certificatesContainer {
                        certificatesBuffer?.append(structureContainer0)
                    }
                }
                certificates = certificatesBuffer
            } else {
                certificates = []
            }
        } else {
            certificates = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
