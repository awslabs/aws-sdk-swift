// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOpenIDConnectProvidersOutputBody: Equatable {
    public let openIDConnectProviderList: [OpenIDConnectProviderListEntry]?
}

extension ListOpenIDConnectProvidersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case openIDConnectProviderList = "OpenIDConnectProviderList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListOpenIDConnectProvidersResult"))
        if containerValues.contains(.openIDConnectProviderList) {
            struct KeyVal0{struct member{}}
            let openIDConnectProviderListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .openIDConnectProviderList)
            if let openIDConnectProviderListWrappedContainer = openIDConnectProviderListWrappedContainer {
                let openIDConnectProviderListContainer = try openIDConnectProviderListWrappedContainer.decodeIfPresent([OpenIDConnectProviderListEntry].self, forKey: .member)
                var openIDConnectProviderListBuffer:[OpenIDConnectProviderListEntry]? = nil
                if let openIDConnectProviderListContainer = openIDConnectProviderListContainer {
                    openIDConnectProviderListBuffer = [OpenIDConnectProviderListEntry]()
                    for structureContainer0 in openIDConnectProviderListContainer {
                        openIDConnectProviderListBuffer?.append(structureContainer0)
                    }
                }
                openIDConnectProviderList = openIDConnectProviderListBuffer
            } else {
                openIDConnectProviderList = []
            }
        } else {
            openIDConnectProviderList = nil
        }
    }
}
