// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateOpenIDConnectProviderInput: Equatable {
    /// <p>A list of client IDs (also known as audiences). When a mobile or web app registers
    ///             with an OpenID Connect provider, they establish a value that identifies the application.
    ///             (This is the value that's sent as the <code>client_id</code> parameter on OAuth
    ///             requests.)</p>
    ///         <p>You can register multiple client IDs with the same provider. For example, you might
    ///             have multiple applications that use the same OIDC provider. You cannot register more
    ///             than 100 client IDs with a single IAM OIDC provider.</p>
    ///         <p>There is no defined format for a client ID. The
    ///                 <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to
    ///             255 characters long.</p>
    public let clientIDList: [String]?
    /// <p>A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider.
    ///       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
    ///       <i>IAM User Guide</i>.</p>
    ///          <note>
    ///             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
    ///    fails and the resource is not created.</p>
    ///          </note>
    public let tags: [Tag]?
    /// <p>A list of server certificate thumbprints for the OpenID Connect (OIDC) identity
    ///             provider's server certificates. Typically this list includes only one entry. However,
    ///             IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain
    ///             multiple thumbprints if the identity provider is rotating certificates.</p>
    ///         <p>The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509
    ///             certificate used by the domain where the OpenID Connect provider makes its keys
    ///             available. It is always a 40-character string.</p>
    ///         <p>You must provide at least one thumbprint when creating an IAM OIDC provider. For
    ///             example, assume that the OIDC provider is <code>server.example.com</code> and the
    ///             provider stores its keys at https://keys.server.example.com/openid-connect. In that
    ///             case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate
    ///             used by https://keys.server.example.com.</p>
    ///         <p>For more information about obtaining the OIDC provider's thumbprint, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html">Obtaining the
    ///                 thumbprint for an OpenID Connect provider</a> in the <i>IAM User
    ///                 Guide</i>.</p>
    public let thumbprintList: [String]?
    /// <p>The URL of the identity provider. The URL must begin with <code>https://</code> and
    ///             should correspond to the <code>iss</code> claim in the provider's OpenID Connect ID
    ///             tokens. Per the OIDC standard, path components are allowed but query parameters are not.
    ///             Typically the URL consists of only a hostname, like
    ///                 <code>https://server.example.org</code> or <code>https://example.com</code>.</p>
    ///         <p>You cannot register the same provider multiple times in a single AWS account. If you
    ///             try to submit a URL that has already been used for an OpenID Connect provider in the
    ///             AWS account, you will get an error.</p>
    public let url: String?

    public init (
        clientIDList: [String]? = nil,
        tags: [Tag]? = nil,
        thumbprintList: [String]? = nil,
        url: String? = nil
    )
    {
        self.clientIDList = clientIDList
        self.tags = tags
        self.thumbprintList = thumbprintList
        self.url = url
    }
}
