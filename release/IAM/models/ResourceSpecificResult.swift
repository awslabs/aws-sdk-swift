// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the result of the simulation of a single API operation call on a single
///          resource.</p>
///          <p>This data type is used by a member of the <a>EvaluationResult</a> data
///          type.</p>
public struct ResourceSpecificResult: Equatable {
    /// <p>Additional details about the results of the evaluation decision on a single resource.
    ///          This parameter is returned only for cross-account simulations. This parameter explains how
    ///          each policy type contributes to the resource-specific evaluation decision.</p>
    public let evalDecisionDetails: [String:PolicyEvaluationDecisionType]?
    /// <p>The result of the simulation of the simulated API operation on the resource specified in
    ///             <code>EvalResourceName</code>.</p>
    public let evalResourceDecision: PolicyEvaluationDecisionType?
    /// <p>The name of the simulated resource, in Amazon Resource Name (ARN) format.</p>
    public let evalResourceName: String?
    /// <p>A list of the statements in the input policies that determine the result for this part
    ///          of the simulation. Remember that even if multiple statements allow the operation on the
    ///          resource, if <i>any</i> statement denies that operation, then the explicit
    ///          deny overrides any allow. In addition, the deny statement is the only entry included in the
    ///          result.</p>
    public let matchedStatements: [Statement]?
    /// <p>A list of context keys that are required by the included input policies but that were
    ///          not provided by one of the input parameters. This list is used when a list of ARNs is
    ///          included in the <code>ResourceArns</code> parameter instead of "*". If you do not specify
    ///          individual resources, by setting <code>ResourceArns</code> to "*" or by not including the
    ///             <code>ResourceArns</code> parameter, then any missing context values are instead
    ///          included under the <code>EvaluationResults</code> section. To discover the context keys
    ///          used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or
    ///             <a>GetContextKeysForPrincipalPolicy</a>.</p>
    public let missingContextValues: [String]?
    /// <p>Contains information about the effect that a permissions boundary has on a policy
    ///          simulation when that boundary is applied to an IAM entity.</p>
    public let permissionsBoundaryDecisionDetail: PermissionsBoundaryDecisionDetail?

    public init (
        evalDecisionDetails: [String:PolicyEvaluationDecisionType]? = nil,
        evalResourceDecision: PolicyEvaluationDecisionType? = nil,
        evalResourceName: String? = nil,
        matchedStatements: [Statement]? = nil,
        missingContextValues: [String]? = nil,
        permissionsBoundaryDecisionDetail: PermissionsBoundaryDecisionDetail? = nil
    )
    {
        self.evalDecisionDetails = evalDecisionDetails
        self.evalResourceDecision = evalResourceDecision
        self.evalResourceName = evalResourceName
        self.matchedStatements = matchedStatements
        self.missingContextValues = missingContextValues
        self.permissionsBoundaryDecisionDetail = permissionsBoundaryDecisionDetail
    }
}
