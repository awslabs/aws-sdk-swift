// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCredentialReportOutputBody: Equatable {
    public let content: Data?
    public let reportFormat: ReportFormatType?
    public let generatedTime: Date?
}

extension GetCredentialReportOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case content = "Content"
        case generatedTime = "GeneratedTime"
        case reportFormat = "ReportFormat"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetCredentialReportResult"))
        if containerValues.contains(.content) {
            do {
                let contentDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .content)
                content = contentDecoded
            } catch {
                content = "".data(using: .utf8)
            }
        } else {
            content = nil
        }
        let reportFormatDecoded = try containerValues.decodeIfPresent(ReportFormatType.self, forKey: .reportFormat)
        reportFormat = reportFormatDecoded
        let generatedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .generatedTime)
        var generatedTimeBuffer:Date? = nil
        if let generatedTimeDecoded = generatedTimeDecoded {
            generatedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(generatedTimeDecoded, format: .dateTime)
        }
        generatedTime = generatedTimeBuffer
    }
}
