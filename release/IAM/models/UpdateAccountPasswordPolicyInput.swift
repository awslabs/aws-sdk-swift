// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateAccountPasswordPolicyInput: Equatable {
    /// <p> Allows all IAM users in your account to use the AWS Management Console to change their own
    ///             passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM users change their own
    ///                 passwords</a> in the <i>IAM User Guide</i>.</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that IAM users in the account do not
    ///             automatically have permissions to change their own password.</p>
    public let allowUsersToChangePassword: Bool
    /// <p>Prevents IAM users from setting a new password after their password has expired. The
    ///             IAM user cannot be accessed until an administrator resets the password.</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that IAM users can change their passwords
    ///             after they expire and continue to sign in as the user.</p>
    public let hardExpiry: Bool?
    /// <p>The number of days that an IAM user password is valid.</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    public let maxPasswordAge: Int?
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>6</code>.</p>
    public let minimumPasswordLength: Int?
    /// <p>Specifies the number of previous passwords that IAM users are prevented from
    ///             reusing.</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>0</code>. The result is that IAM users are not prevented from reusing
    ///             previous passwords.</p>
    public let passwordReusePrevention: Int?
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character
    ///             from the ISO basic Latin alphabet (a to z).</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that passwords do not require at least one
    ///             lowercase character.</p>
    public let requireLowercaseCharacters: Bool
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0
    ///             to 9).</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that passwords do not require at least one
    ///             numeric character.</p>
    public let requireNumbers: Bool
    /// <p>Specifies whether IAM user passwords must contain at least one of the following
    ///             non-alphanumeric characters:</p>
    ///         <p>! @ # $ % ^ & * ( ) _ + - = [ ] { } | '</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that passwords do not require at least one
    ///             symbol character.</p>
    public let requireSymbols: Bool
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character
    ///             from the ISO basic Latin alphabet (A to Z).</p>
    ///         <p>If you do not specify a value for this parameter, then the operation uses the default
    ///             value of <code>false</code>. The result is that passwords do not require at least one
    ///             uppercase character.</p>
    public let requireUppercaseCharacters: Bool

    public init (
        allowUsersToChangePassword: Bool = false,
        hardExpiry: Bool? = nil,
        maxPasswordAge: Int? = nil,
        minimumPasswordLength: Int? = nil,
        passwordReusePrevention: Int? = nil,
        requireLowercaseCharacters: Bool = false,
        requireNumbers: Bool = false,
        requireSymbols: Bool = false,
        requireUppercaseCharacters: Bool = false
    )
    {
        self.allowUsersToChangePassword = allowUsersToChangePassword
        self.hardExpiry = hardExpiry
        self.maxPasswordAge = maxPasswordAge
        self.minimumPasswordLength = minimumPasswordLength
        self.passwordReusePrevention = passwordReusePrevention
        self.requireLowercaseCharacters = requireLowercaseCharacters
        self.requireNumbers = requireNumbers
        self.requireSymbols = requireSymbols
        self.requireUppercaseCharacters = requireUppercaseCharacters
    }
}
