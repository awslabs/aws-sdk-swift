// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedPolicyDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case attachmentCount = "AttachmentCount"
        case createDate = "CreateDate"
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isAttachable = "IsAttachable"
        case path = "Path"
        case permissionsBoundaryUsageCount = "PermissionsBoundaryUsageCount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case policyVersionList = "PolicyVersionList"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: Key("Arn"))
        }
        if let attachmentCount = attachmentCount {
            try container.encode(attachmentCount, forKey: Key("AttachmentCount"))
        }
        if let createDate = createDate {
            try container.encode(TimestampWrapper(createDate, format: .dateTime), forKey: Key("createDate"))
        }
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isAttachable != false {
            try container.encode(isAttachable, forKey: Key("IsAttachable"))
        }
        if let path = path {
            try container.encode(path, forKey: Key("Path"))
        }
        if let permissionsBoundaryUsageCount = permissionsBoundaryUsageCount {
            try container.encode(permissionsBoundaryUsageCount, forKey: Key("PermissionsBoundaryUsageCount"))
        }
        if let policyId = policyId {
            try container.encode(policyId, forKey: Key("PolicyId"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: Key("PolicyName"))
        }
        if let policyVersionList = policyVersionList {
            var policyVersionListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyVersionList"))
            for (index0, policyversion0) in policyVersionList.enumerated() {
                try policyVersionListContainer.encode(policyversion0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let updateDate = updateDate {
            try container.encode(TimestampWrapper(updateDate, format: .dateTime), forKey: Key("updateDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let attachmentCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .attachmentCount)
        attachmentCount = attachmentCountDecoded
        let permissionsBoundaryUsageCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .permissionsBoundaryUsageCount)
        permissionsBoundaryUsageCount = permissionsBoundaryUsageCountDecoded
        let isAttachableDecoded = try containerValues.decode(Bool.self, forKey: .isAttachable)
        isAttachable = isAttachableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createDate)
        var createDateBuffer:Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let updateDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateDate)
        var updateDateBuffer:Date? = nil
        if let updateDateDecoded = updateDateDecoded {
            updateDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateDateDecoded, format: .dateTime)
        }
        updateDate = updateDateBuffer
        if containerValues.contains(.policyVersionList) {
            struct KeyVal0{struct member{}}
            let policyVersionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyVersionList)
            if let policyVersionListWrappedContainer = policyVersionListWrappedContainer {
                let policyVersionListContainer = try policyVersionListWrappedContainer.decodeIfPresent([PolicyVersion].self, forKey: .member)
                var policyVersionListBuffer:[PolicyVersion]? = nil
                if let policyVersionListContainer = policyVersionListContainer {
                    policyVersionListBuffer = [PolicyVersion]()
                    for structureContainer0 in policyVersionListContainer {
                        policyVersionListBuffer?.append(structureContainer0)
                    }
                }
                policyVersionList = policyVersionListBuffer
            } else {
                policyVersionList = []
            }
        } else {
            policyVersionList = nil
        }
    }
}
