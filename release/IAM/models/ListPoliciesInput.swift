// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListPoliciesInput: Equatable {
    /// <p>Use this parameter only when paginating results and only after
    ///     you receive a response indicating that the results are truncated. Set it to the value of the
    ///     <code>Marker</code> element in the response that you received to indicate where the next call
    ///     should start.</p>
    public let marker: String?
    /// <p>Use this only when paginating results to indicate the
    ///     maximum number of items you want in the response. If additional items exist beyond the maximum
    ///     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
    ///          <p>If you do not include this parameter, the number of items defaults to 100. Note that
    ///     IAM might return fewer results, even when there are more results available. In that case, the
    ///     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
    ///     contains a value to include in the subsequent call that tells the service where to continue
    ///     from.</p>
    public let maxItems: Int?
    /// <p>A flag to filter the results to only the attached policies.</p>
    ///         <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only
    ///             the policies that are attached to an IAM user, group, or role. When
    ///                 <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not
    ///             included, all policies are returned.</p>
    public let onlyAttached: Bool
    /// <p>The path prefix for filtering the results. This parameter is optional. If it is not
    ///             included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
    ///     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
    ///     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
    ///     most punctuation characters, digits, and upper and lowercased letters.</p>
    public let pathPrefix: String?
    /// <p>The policy usage method to use for filtering the results.</p>
    ///         <p>To list only permissions policies,
    ///                 set <code>PolicyUsageFilter</code> to <code>PermissionsPolicy</code>. To list only
    ///             the policies used to set permissions boundaries, set the value
    ///                 to <code>PermissionsBoundary</code>.</p>
    ///         <p>This parameter is optional. If it is not included, all policies are returned. </p>
    public let policyUsageFilter: PolicyUsageType?
    /// <p>The scope to use for filtering the results.</p>
    ///         <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To
    ///             list only the customer managed policies in your AWS account, set <code>Scope</code> to
    ///                 <code>Local</code>.</p>
    ///         <p>This parameter is optional. If it is not included, or if it is set to
    ///             <code>All</code>, all policies are returned.</p>
    public let scope: PolicyScopeType?

    public init (
        marker: String? = nil,
        maxItems: Int? = nil,
        onlyAttached: Bool = false,
        pathPrefix: String? = nil,
        policyUsageFilter: PolicyUsageType? = nil,
        scope: PolicyScopeType? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.onlyAttached = onlyAttached
        self.pathPrefix = pathPrefix
        self.policyUsageFilter = policyUsageFilter
        self.scope = scope
    }
}
