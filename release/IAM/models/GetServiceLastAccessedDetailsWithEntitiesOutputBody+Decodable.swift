// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetServiceLastAccessedDetailsWithEntitiesOutputBody: Equatable {
    public let jobStatus: JobStatusType?
    public let jobCreationDate: Date?
    public let jobCompletionDate: Date?
    public let entityDetailsList: [EntityDetails]?
    public let isTruncated: Bool
    public let marker: String?
    public let error: ErrorDetails?
}

extension GetServiceLastAccessedDetailsWithEntitiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case entityDetailsList = "EntityDetailsList"
        case error = "Error"
        case isTruncated = "IsTruncated"
        case jobCompletionDate = "JobCompletionDate"
        case jobCreationDate = "JobCreationDate"
        case jobStatus = "JobStatus"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetServiceLastAccessedDetailsWithEntitiesResult"))
        let jobStatusDecoded = try containerValues.decodeIfPresent(JobStatusType.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobCreationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobCreationDate)
        var jobCreationDateBuffer:Date? = nil
        if let jobCreationDateDecoded = jobCreationDateDecoded {
            jobCreationDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(jobCreationDateDecoded, format: .dateTime)
        }
        jobCreationDate = jobCreationDateBuffer
        let jobCompletionDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobCompletionDate)
        var jobCompletionDateBuffer:Date? = nil
        if let jobCompletionDateDecoded = jobCompletionDateDecoded {
            jobCompletionDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(jobCompletionDateDecoded, format: .dateTime)
        }
        jobCompletionDate = jobCompletionDateBuffer
        if containerValues.contains(.entityDetailsList) {
            struct KeyVal0{struct member{}}
            let entityDetailsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .entityDetailsList)
            if let entityDetailsListWrappedContainer = entityDetailsListWrappedContainer {
                let entityDetailsListContainer = try entityDetailsListWrappedContainer.decodeIfPresent([EntityDetails].self, forKey: .member)
                var entityDetailsListBuffer:[EntityDetails]? = nil
                if let entityDetailsListContainer = entityDetailsListContainer {
                    entityDetailsListBuffer = [EntityDetails]()
                    for structureContainer0 in entityDetailsListContainer {
                        entityDetailsListBuffer?.append(structureContainer0)
                    }
                }
                entityDetailsList = entityDetailsListBuffer
            } else {
                entityDetailsList = []
            }
        } else {
            entityDetailsList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let errorDecoded = try containerValues.decodeIfPresent(ErrorDetails.self, forKey: .error)
        error = errorDecoded
    }
}
