// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoleDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case instanceProfileList = "InstanceProfileList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case roleId = "RoleId"
        case roleLastUsed = "RoleLastUsed"
        case roleName = "RoleName"
        case rolePolicyList = "RolePolicyList"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: Key("Arn"))
        }
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try container.encode(assumeRolePolicyDocument, forKey: Key("AssumeRolePolicyDocument"))
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttachedManagedPolicies"))
            for (index0, attachedpolicy0) in attachedManagedPolicies.enumerated() {
                try attachedManagedPoliciesContainer.encode(attachedpolicy0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createDate = createDate {
            try container.encode(TimestampWrapper(createDate, format: .dateTime), forKey: Key("createDate"))
        }
        if let instanceProfileList = instanceProfileList {
            var instanceProfileListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceProfileList"))
            for (index0, instanceprofile0) in instanceProfileList.enumerated() {
                try instanceProfileListContainer.encode(instanceprofile0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let path = path {
            try container.encode(path, forKey: Key("Path"))
        }
        if let permissionsBoundary = permissionsBoundary {
            try container.encode(permissionsBoundary, forKey: Key("PermissionsBoundary"))
        }
        if let roleId = roleId {
            try container.encode(roleId, forKey: Key("RoleId"))
        }
        if let roleLastUsed = roleLastUsed {
            try container.encode(roleLastUsed, forKey: Key("RoleLastUsed"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: Key("RoleName"))
        }
        if let rolePolicyList = rolePolicyList {
            var rolePolicyListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RolePolicyList"))
            for (index0, policydetail0) in rolePolicyList.enumerated() {
                try rolePolicyListContainer.encode(policydetail0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createDate)
        var createDateBuffer:Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        if containerValues.contains(.instanceProfileList) {
            struct KeyVal0{struct member{}}
            let instanceProfileListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceProfileList)
            if let instanceProfileListWrappedContainer = instanceProfileListWrappedContainer {
                let instanceProfileListContainer = try instanceProfileListWrappedContainer.decodeIfPresent([InstanceProfile].self, forKey: .member)
                var instanceProfileListBuffer:[InstanceProfile]? = nil
                if let instanceProfileListContainer = instanceProfileListContainer {
                    instanceProfileListBuffer = [InstanceProfile]()
                    for structureContainer0 in instanceProfileListContainer {
                        instanceProfileListBuffer?.append(structureContainer0)
                    }
                }
                instanceProfileList = instanceProfileListBuffer
            } else {
                instanceProfileList = []
            }
        } else {
            instanceProfileList = nil
        }
        if containerValues.contains(.rolePolicyList) {
            struct KeyVal0{struct member{}}
            let rolePolicyListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rolePolicyList)
            if let rolePolicyListWrappedContainer = rolePolicyListWrappedContainer {
                let rolePolicyListContainer = try rolePolicyListWrappedContainer.decodeIfPresent([PolicyDetail].self, forKey: .member)
                var rolePolicyListBuffer:[PolicyDetail]? = nil
                if let rolePolicyListContainer = rolePolicyListContainer {
                    rolePolicyListBuffer = [PolicyDetail]()
                    for structureContainer0 in rolePolicyListContainer {
                        rolePolicyListBuffer?.append(structureContainer0)
                    }
                }
                rolePolicyList = rolePolicyListBuffer
            } else {
                rolePolicyList = []
            }
        } else {
            rolePolicyList = nil
        }
        if containerValues.contains(.attachedManagedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedManagedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedManagedPolicies)
            if let attachedManagedPoliciesWrappedContainer = attachedManagedPoliciesWrappedContainer {
                let attachedManagedPoliciesContainer = try attachedManagedPoliciesWrappedContainer.decodeIfPresent([AttachedPolicy].self, forKey: .member)
                var attachedManagedPoliciesBuffer:[AttachedPolicy]? = nil
                if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
                    attachedManagedPoliciesBuffer = [AttachedPolicy]()
                    for structureContainer0 in attachedManagedPoliciesContainer {
                        attachedManagedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedManagedPolicies = attachedManagedPoliciesBuffer
            } else {
                attachedManagedPolicies = []
            }
        } else {
            attachedManagedPolicies = nil
        }
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(AttachedPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let roleLastUsedDecoded = try containerValues.decodeIfPresent(RoleLastUsed.self, forKey: .roleLastUsed)
        roleLastUsed = roleLastUsedDecoded
    }
}
