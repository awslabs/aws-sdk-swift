// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[GetFlowTemplateRevisionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetFlowTemplateRevisionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetFlowTemplateRevisionsOutputResponse`
extension IoTThingsGraphClient {
    public func getFlowTemplateRevisionsPaginated(input: GetFlowTemplateRevisionsInput) -> ClientRuntime.PaginatorSequence<GetFlowTemplateRevisionsInput, GetFlowTemplateRevisionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetFlowTemplateRevisionsInput, GetFlowTemplateRevisionsOutputResponse>(input: input, inputKey: \GetFlowTemplateRevisionsInput.nextToken, outputKey: \GetFlowTemplateRevisionsOutputResponse.nextToken, paginationFunction: self.getFlowTemplateRevisions(input:))
    }
}

extension GetFlowTemplateRevisionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetFlowTemplateRevisionsInput {
        return GetFlowTemplateRevisionsInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `getFlowTemplateRevisionsPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
extension PaginatorSequence where Input == GetFlowTemplateRevisionsInput, Output == GetFlowTemplateRevisionsOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[GetSystemTemplateRevisionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetSystemTemplateRevisionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetSystemTemplateRevisionsOutputResponse`
extension IoTThingsGraphClient {
    public func getSystemTemplateRevisionsPaginated(input: GetSystemTemplateRevisionsInput) -> ClientRuntime.PaginatorSequence<GetSystemTemplateRevisionsInput, GetSystemTemplateRevisionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetSystemTemplateRevisionsInput, GetSystemTemplateRevisionsOutputResponse>(input: input, inputKey: \GetSystemTemplateRevisionsInput.nextToken, outputKey: \GetSystemTemplateRevisionsOutputResponse.nextToken, paginationFunction: self.getSystemTemplateRevisions(input:))
    }
}

extension GetSystemTemplateRevisionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetSystemTemplateRevisionsInput {
        return GetSystemTemplateRevisionsInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `getSystemTemplateRevisionsPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
extension PaginatorSequence where Input == GetSystemTemplateRevisionsInput, Output == GetSystemTemplateRevisionsOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[ListFlowExecutionMessagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFlowExecutionMessagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFlowExecutionMessagesOutputResponse`
extension IoTThingsGraphClient {
    public func listFlowExecutionMessagesPaginated(input: ListFlowExecutionMessagesInput) -> ClientRuntime.PaginatorSequence<ListFlowExecutionMessagesInput, ListFlowExecutionMessagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFlowExecutionMessagesInput, ListFlowExecutionMessagesOutputResponse>(input: input, inputKey: \ListFlowExecutionMessagesInput.nextToken, outputKey: \ListFlowExecutionMessagesOutputResponse.nextToken, paginationFunction: self.listFlowExecutionMessages(input:))
    }
}

extension ListFlowExecutionMessagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFlowExecutionMessagesInput {
        return ListFlowExecutionMessagesInput(
            flowExecutionId: self.flowExecutionId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listFlowExecutionMessagesPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.FlowExecutionMessage]`
/// - Returns: `[IoTThingsGraphClientTypes.FlowExecutionMessage]`
extension PaginatorSequence where Input == ListFlowExecutionMessagesInput, Output == ListFlowExecutionMessagesOutputResponse {
    public func messages() async throws -> [IoTThingsGraphClientTypes.FlowExecutionMessage] {
        return try await self.asyncCompactMap { item in item.messages }
    }
}

/// Paginate over `[ListTagsForResourceOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTagsForResourceInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
extension IoTThingsGraphClient {
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.Tag]`
/// - Returns: `[IoTThingsGraphClientTypes.Tag]`
extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutputResponse {
    public func tags() async throws -> [IoTThingsGraphClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}

/// Paginate over `[SearchEntitiesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchEntitiesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchEntitiesOutputResponse`
extension IoTThingsGraphClient {
    public func searchEntitiesPaginated(input: SearchEntitiesInput) -> ClientRuntime.PaginatorSequence<SearchEntitiesInput, SearchEntitiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchEntitiesInput, SearchEntitiesOutputResponse>(input: input, inputKey: \SearchEntitiesInput.nextToken, outputKey: \SearchEntitiesOutputResponse.nextToken, paginationFunction: self.searchEntities(input:))
    }
}

extension SearchEntitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchEntitiesInput {
        return SearchEntitiesInput(
            entityTypes: self.entityTypes,
            filters: self.filters,
            maxResults: self.maxResults,
            namespaceVersion: self.namespaceVersion,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchEntitiesPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.EntityDescription]`
/// - Returns: `[IoTThingsGraphClientTypes.EntityDescription]`
extension PaginatorSequence where Input == SearchEntitiesInput, Output == SearchEntitiesOutputResponse {
    public func descriptions() async throws -> [IoTThingsGraphClientTypes.EntityDescription] {
        return try await self.asyncCompactMap { item in item.descriptions }
    }
}

/// Paginate over `[SearchFlowExecutionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchFlowExecutionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchFlowExecutionsOutputResponse`
extension IoTThingsGraphClient {
    public func searchFlowExecutionsPaginated(input: SearchFlowExecutionsInput) -> ClientRuntime.PaginatorSequence<SearchFlowExecutionsInput, SearchFlowExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchFlowExecutionsInput, SearchFlowExecutionsOutputResponse>(input: input, inputKey: \SearchFlowExecutionsInput.nextToken, outputKey: \SearchFlowExecutionsOutputResponse.nextToken, paginationFunction: self.searchFlowExecutions(input:))
    }
}

extension SearchFlowExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchFlowExecutionsInput {
        return SearchFlowExecutionsInput(
            endTime: self.endTime,
            flowExecutionId: self.flowExecutionId,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime,
            systemInstanceId: self.systemInstanceId
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchFlowExecutionsPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.FlowExecutionSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.FlowExecutionSummary]`
extension PaginatorSequence where Input == SearchFlowExecutionsInput, Output == SearchFlowExecutionsOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowExecutionSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[SearchFlowTemplatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchFlowTemplatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchFlowTemplatesOutputResponse`
extension IoTThingsGraphClient {
    public func searchFlowTemplatesPaginated(input: SearchFlowTemplatesInput) -> ClientRuntime.PaginatorSequence<SearchFlowTemplatesInput, SearchFlowTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchFlowTemplatesInput, SearchFlowTemplatesOutputResponse>(input: input, inputKey: \SearchFlowTemplatesInput.nextToken, outputKey: \SearchFlowTemplatesOutputResponse.nextToken, paginationFunction: self.searchFlowTemplates(input:))
    }
}

extension SearchFlowTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchFlowTemplatesInput {
        return SearchFlowTemplatesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchFlowTemplatesPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
extension PaginatorSequence where Input == SearchFlowTemplatesInput, Output == SearchFlowTemplatesOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[SearchSystemInstancesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchSystemInstancesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchSystemInstancesOutputResponse`
extension IoTThingsGraphClient {
    public func searchSystemInstancesPaginated(input: SearchSystemInstancesInput) -> ClientRuntime.PaginatorSequence<SearchSystemInstancesInput, SearchSystemInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchSystemInstancesInput, SearchSystemInstancesOutputResponse>(input: input, inputKey: \SearchSystemInstancesInput.nextToken, outputKey: \SearchSystemInstancesOutputResponse.nextToken, paginationFunction: self.searchSystemInstances(input:))
    }
}

extension SearchSystemInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchSystemInstancesInput {
        return SearchSystemInstancesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchSystemInstancesPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.SystemInstanceSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.SystemInstanceSummary]`
extension PaginatorSequence where Input == SearchSystemInstancesInput, Output == SearchSystemInstancesOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemInstanceSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[SearchSystemTemplatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchSystemTemplatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchSystemTemplatesOutputResponse`
extension IoTThingsGraphClient {
    public func searchSystemTemplatesPaginated(input: SearchSystemTemplatesInput) -> ClientRuntime.PaginatorSequence<SearchSystemTemplatesInput, SearchSystemTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchSystemTemplatesInput, SearchSystemTemplatesOutputResponse>(input: input, inputKey: \SearchSystemTemplatesInput.nextToken, outputKey: \SearchSystemTemplatesOutputResponse.nextToken, paginationFunction: self.searchSystemTemplates(input:))
    }
}

extension SearchSystemTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchSystemTemplatesInput {
        return SearchSystemTemplatesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchSystemTemplatesPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
/// - Returns: `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
extension PaginatorSequence where Input == SearchSystemTemplatesInput, Output == SearchSystemTemplatesOutputResponse {
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}

/// Paginate over `[SearchThingsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchThingsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchThingsOutputResponse`
extension IoTThingsGraphClient {
    public func searchThingsPaginated(input: SearchThingsInput) -> ClientRuntime.PaginatorSequence<SearchThingsInput, SearchThingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchThingsInput, SearchThingsOutputResponse>(input: input, inputKey: \SearchThingsInput.nextToken, outputKey: \SearchThingsOutputResponse.nextToken, paginationFunction: self.searchThings(input:))
    }
}

extension SearchThingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchThingsInput {
        return SearchThingsInput(
            entityId: self.entityId,
            maxResults: self.maxResults,
            namespaceVersion: self.namespaceVersion,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchThingsPaginated`
/// to access the nested member `[IoTThingsGraphClientTypes.Thing]`
/// - Returns: `[IoTThingsGraphClientTypes.Thing]`
extension PaginatorSequence where Input == SearchThingsInput, Output == SearchThingsOutputResponse {
    public func things() async throws -> [IoTThingsGraphClientTypes.Thing] {
        return try await self.asyncCompactMap { item in item.things }
    }
}
