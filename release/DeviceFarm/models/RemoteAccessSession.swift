// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents information about the remote access session.</p>
public struct RemoteAccessSession: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the remote access session.</p>
    public let arn: String?
    /// <p>The billing method of the remote access session. Possible values include <code>METERED</code> or
    ///                 <code>UNMETERED</code>. For more information about metered devices, see <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/welcome.html#welcome-terminology">AWS Device Farm
    ///                 terminology</a>.</p>
    public let billingMethod: BillingMethod?
    /// <p>Unique identifier of your client for the remote access session. Only returned if
    ///             remote debugging is enabled for the remote access session.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let clientId: String?
    /// <p>The date and time the remote access session was created.</p>
    public let created: Date?
    /// <p>The device (phone or tablet) used in the remote access session.</p>
    public let device: Device?
    /// <p>The number of minutes a device is used in a remote access session (including setup
    ///             and teardown minutes).</p>
    public let deviceMinutes: DeviceMinutes?
    /// <p>Unique device identifier for the remote device. Only returned if remote debugging
    ///             is enabled for the remote access session.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let deviceUdid: String?
    /// <p>The endpoint for the remote access sesssion.</p>
    public let endpoint: String?
    /// <p>IP address of the EC2 host where you need to connect to remotely debug devices.
    ///             Only returned if remote debugging is enabled for the remote access session.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let hostAddress: String?
    /// <p>The ARN of the instance.</p>
    public let instanceArn: String?
    /// <p>The interaction mode of the remote access session. Valid values are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>INTERACTIVE: You can interact with the iOS device by viewing, touching, and
    ///                     rotating the screen. You cannot run XCUITest framework-based tests in this
    ///                     mode.</p>
    ///             </li>
    ///             <li>
    ///                 <p>NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This
    ///                     mode has the fastest test execution speed. You can run XCUITest framework-based tests in this
    ///                     mode.</p>
    ///             </li>
    ///             <li>
    ///                 <p>VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest
    ///                     framework-based tests and watch the screen in this mode.</p>
    ///             </li>
    ///          </ul>
    public let interactionMode: InteractionMode?
    /// <p>A message about the remote access session.</p>
    public let message: String?
    /// <p>The name of the remote access session.</p>
    public let name: String?
    /// <p>This flag is set to <code>true</code> if remote debugging is enabled for the remote
    ///             access session.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let remoteDebugEnabled: Bool?
    /// <p>The ARN for the app to be recorded in the remote access session.</p>
    public let remoteRecordAppArn: String?
    /// <p>This flag is set to <code>true</code> if remote recording is enabled for the remote
    ///             access session.</p>
    public let remoteRecordEnabled: Bool?
    /// <p>The result of the remote access session. Can be any of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PENDING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PASSED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>WARNED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FAILED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>SKIPPED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>ERRORED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>STOPPED.</p>
    ///             </li>
    ///          </ul>
    public let result: ExecutionResult?
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
    ///             devices, Device Farm always signs your apps again.</p>
    ///         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
    ///                 Farm FAQs</i>.</p>
    public let skipAppResign: Bool?
    /// <p>The date and time the remote access session was started.</p>
    public let started: Date?
    /// <p>The status of the remote access session. Can be any of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PENDING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PENDING_CONCURRENCY.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PENDING_DEVICE.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PROCESSING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>SCHEDULING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>PREPARING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>RUNNING.</p>
    ///             </li>
    ///             <li>
    ///                 <p>COMPLETED.</p>
    ///             </li>
    ///             <li>
    ///                 <p>STOPPING.</p>
    ///             </li>
    ///          </ul>
    public let status: ExecutionStatus?
    /// <p>The date and time the remote access session was stopped.</p>
    public let stopped: Date?

    public init (
        arn: String? = nil,
        billingMethod: BillingMethod? = nil,
        clientId: String? = nil,
        created: Date? = nil,
        device: Device? = nil,
        deviceMinutes: DeviceMinutes? = nil,
        deviceUdid: String? = nil,
        endpoint: String? = nil,
        hostAddress: String? = nil,
        instanceArn: String? = nil,
        interactionMode: InteractionMode? = nil,
        message: String? = nil,
        name: String? = nil,
        remoteDebugEnabled: Bool? = nil,
        remoteRecordAppArn: String? = nil,
        remoteRecordEnabled: Bool? = nil,
        result: ExecutionResult? = nil,
        skipAppResign: Bool? = nil,
        started: Date? = nil,
        status: ExecutionStatus? = nil,
        stopped: Date? = nil
    )
    {
        self.arn = arn
        self.billingMethod = billingMethod
        self.clientId = clientId
        self.created = created
        self.device = device
        self.deviceMinutes = deviceMinutes
        self.deviceUdid = deviceUdid
        self.endpoint = endpoint
        self.hostAddress = hostAddress
        self.instanceArn = instanceArn
        self.interactionMode = interactionMode
        self.message = message
        self.name = name
        self.remoteDebugEnabled = remoteDebugEnabled
        self.remoteRecordAppArn = remoteRecordAppArn
        self.remoteRecordEnabled = remoteRecordEnabled
        self.result = result
        self.skipAppResign = skipAppResign
        self.started = started
        self.status = status
        self.stopped = stopped
    }
}
