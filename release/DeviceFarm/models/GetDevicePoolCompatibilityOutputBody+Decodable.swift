// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDevicePoolCompatibilityOutputBody: Equatable {
    public let compatibleDevices: [DevicePoolCompatibilityResult]?
    public let incompatibleDevices: [DevicePoolCompatibilityResult]?
}

extension GetDevicePoolCompatibilityOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compatibleDevices
        case incompatibleDevices
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compatibleDevicesContainer = try containerValues.decodeIfPresent([DevicePoolCompatibilityResult].self, forKey: .compatibleDevices)
        var compatibleDevicesDecoded0:[DevicePoolCompatibilityResult]? = nil
        if let compatibleDevicesContainer = compatibleDevicesContainer {
            compatibleDevicesDecoded0 = [DevicePoolCompatibilityResult]()
            for structure0 in compatibleDevicesContainer {
                compatibleDevicesDecoded0?.append(structure0)
            }
        }
        compatibleDevices = compatibleDevicesDecoded0
        let incompatibleDevicesContainer = try containerValues.decodeIfPresent([DevicePoolCompatibilityResult].self, forKey: .incompatibleDevices)
        var incompatibleDevicesDecoded0:[DevicePoolCompatibilityResult]? = nil
        if let incompatibleDevicesContainer = incompatibleDevicesContainer {
            incompatibleDevicesDecoded0 = [DevicePoolCompatibilityResult]()
            for structure0 in incompatibleDevicesContainer {
                incompatibleDevicesDecoded0?.append(structure0)
            }
        }
        incompatibleDevices = incompatibleDevicesDecoded0
    }
}
