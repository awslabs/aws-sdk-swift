// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomerArtifactPaths: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case androidPaths
        case deviceHostPaths
        case iosPaths
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let androidPaths = androidPaths {
            var androidPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .androidPaths)
            for androidpaths0 in androidPaths {
                try androidPathsContainer.encode(androidpaths0)
            }
        }
        if let deviceHostPaths = deviceHostPaths {
            var deviceHostPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceHostPaths)
            for devicehostpaths0 in deviceHostPaths {
                try deviceHostPathsContainer.encode(devicehostpaths0)
            }
        }
        if let iosPaths = iosPaths {
            var iosPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .iosPaths)
            for iospaths0 in iosPaths {
                try iosPathsContainer.encode(iospaths0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iosPathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .iosPaths)
        var iosPathsDecoded0:[String]? = nil
        if let iosPathsContainer = iosPathsContainer {
            iosPathsDecoded0 = [String]()
            for string0 in iosPathsContainer {
                iosPathsDecoded0?.append(string0)
            }
        }
        iosPaths = iosPathsDecoded0
        let androidPathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .androidPaths)
        var androidPathsDecoded0:[String]? = nil
        if let androidPathsContainer = androidPathsContainer {
            androidPathsDecoded0 = [String]()
            for string0 in androidPathsContainer {
                androidPathsDecoded0?.append(string0)
            }
        }
        androidPaths = androidPathsDecoded0
        let deviceHostPathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .deviceHostPaths)
        var deviceHostPathsDecoded0:[String]? = nil
        if let deviceHostPathsContainer = deviceHostPathsContainer {
            deviceHostPathsDecoded0 = [String]()
            for string0 in deviceHostPathsContainer {
                deviceHostPathsDecoded0?.append(string0)
            }
        }
        deviceHostPaths = deviceHostPathsDecoded0
    }
}
