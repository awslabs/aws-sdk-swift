// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case awsAccountNumber
        case defaultJobTimeoutMinutes
        case maxJobTimeoutMinutes
        case maxSlots
        case skipAppResign
        case trialMinutes
        case unmeteredDevices
        case unmeteredRemoteAccessDevices
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountNumber = awsAccountNumber {
            try encodeContainer.encode(awsAccountNumber, forKey: .awsAccountNumber)
        }
        if let defaultJobTimeoutMinutes = defaultJobTimeoutMinutes {
            try encodeContainer.encode(defaultJobTimeoutMinutes, forKey: .defaultJobTimeoutMinutes)
        }
        if let maxJobTimeoutMinutes = maxJobTimeoutMinutes {
            try encodeContainer.encode(maxJobTimeoutMinutes, forKey: .maxJobTimeoutMinutes)
        }
        if let maxSlots = maxSlots {
            var maxSlotsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .maxSlots)
            for (dictKey0, maxslotmap0) in maxSlots {
                try maxSlotsContainer.encode(maxslotmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let skipAppResign = skipAppResign {
            try encodeContainer.encode(skipAppResign, forKey: .skipAppResign)
        }
        if let trialMinutes = trialMinutes {
            try encodeContainer.encode(trialMinutes, forKey: .trialMinutes)
        }
        if let unmeteredDevices = unmeteredDevices {
            var unmeteredDevicesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .unmeteredDevices)
            for (dictKey0, purchaseddevicesmap0) in unmeteredDevices {
                try unmeteredDevicesContainer.encode(purchaseddevicesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let unmeteredRemoteAccessDevices = unmeteredRemoteAccessDevices {
            var unmeteredRemoteAccessDevicesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .unmeteredRemoteAccessDevices)
            for (dictKey0, purchaseddevicesmap0) in unmeteredRemoteAccessDevices {
                try unmeteredRemoteAccessDevicesContainer.encode(purchaseddevicesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccountNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .awsAccountNumber)
        awsAccountNumber = awsAccountNumberDecoded
        let unmeteredDevicesContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .unmeteredDevices)
        var unmeteredDevicesDecoded0: [String:Int]? = nil
        if let unmeteredDevicesContainer = unmeteredDevicesContainer {
            unmeteredDevicesDecoded0 = [String:Int]()
            for (key0, integer0) in unmeteredDevicesContainer {
                unmeteredDevicesDecoded0?[key0] = integer0
            }
        }
        unmeteredDevices = unmeteredDevicesDecoded0
        let unmeteredRemoteAccessDevicesContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .unmeteredRemoteAccessDevices)
        var unmeteredRemoteAccessDevicesDecoded0: [String:Int]? = nil
        if let unmeteredRemoteAccessDevicesContainer = unmeteredRemoteAccessDevicesContainer {
            unmeteredRemoteAccessDevicesDecoded0 = [String:Int]()
            for (key0, integer0) in unmeteredRemoteAccessDevicesContainer {
                unmeteredRemoteAccessDevicesDecoded0?[key0] = integer0
            }
        }
        unmeteredRemoteAccessDevices = unmeteredRemoteAccessDevicesDecoded0
        let maxJobTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxJobTimeoutMinutes)
        maxJobTimeoutMinutes = maxJobTimeoutMinutesDecoded
        let trialMinutesDecoded = try containerValues.decodeIfPresent(TrialMinutes.self, forKey: .trialMinutes)
        trialMinutes = trialMinutesDecoded
        let maxSlotsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .maxSlots)
        var maxSlotsDecoded0: [String:Int]? = nil
        if let maxSlotsContainer = maxSlotsContainer {
            maxSlotsDecoded0 = [String:Int]()
            for (key0, integer0) in maxSlotsContainer {
                maxSlotsDecoded0?[key0] = integer0
            }
        }
        maxSlots = maxSlotsDecoded0
        let defaultJobTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .defaultJobTimeoutMinutes)
        defaultJobTimeoutMinutes = defaultJobTimeoutMinutesDecoded
        let skipAppResignDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .skipAppResign)
        skipAppResign = skipAppResignDecoded
    }
}
