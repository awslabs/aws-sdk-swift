// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case description
        case excludeAppPackagesFromCleanup
        case name
        case packageCleanup
        case rebootAfterUse
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let excludeAppPackagesFromCleanup = excludeAppPackagesFromCleanup {
            var excludeAppPackagesFromCleanupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAppPackagesFromCleanup)
            for packageids0 in excludeAppPackagesFromCleanup {
                try excludeAppPackagesFromCleanupContainer.encode(packageids0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let packageCleanup = packageCleanup {
            try encodeContainer.encode(packageCleanup, forKey: .packageCleanup)
        }
        if let rebootAfterUse = rebootAfterUse {
            try encodeContainer.encode(rebootAfterUse, forKey: .rebootAfterUse)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let packageCleanupDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .packageCleanup)
        packageCleanup = packageCleanupDecoded
        let excludeAppPackagesFromCleanupContainer = try containerValues.decodeIfPresent([String].self, forKey: .excludeAppPackagesFromCleanup)
        var excludeAppPackagesFromCleanupDecoded0:[String]? = nil
        if let excludeAppPackagesFromCleanupContainer = excludeAppPackagesFromCleanupContainer {
            excludeAppPackagesFromCleanupDecoded0 = [String]()
            for string0 in excludeAppPackagesFromCleanupContainer {
                excludeAppPackagesFromCleanupDecoded0?.append(string0)
            }
        }
        excludeAppPackagesFromCleanup = excludeAppPackagesFromCleanupDecoded0
        let rebootAfterUseDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .rebootAfterUse)
        rebootAfterUse = rebootAfterUseDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
