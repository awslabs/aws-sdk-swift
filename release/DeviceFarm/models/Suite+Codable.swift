// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Suite: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case counters
        case created
        case deviceMinutes
        case message
        case name
        case result
        case started
        case status
        case stopped
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let counters = counters {
            try encodeContainer.encode(counters, forKey: .counters)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let deviceMinutes = deviceMinutes {
            try encodeContainer.encode(deviceMinutes, forKey: .deviceMinutes)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let result = result {
            try encodeContainer.encode(result.rawValue, forKey: .result)
        }
        if let started = started {
            try encodeContainer.encode(started.timeIntervalSince1970, forKey: .started)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopped = stopped {
            try encodeContainer.encode(stopped.timeIntervalSince1970, forKey: .stopped)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TestType.self, forKey: .type)
        type = typeDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let resultDecoded = try containerValues.decodeIfPresent(ExecutionResult.self, forKey: .result)
        result = resultDecoded
        let startedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .started)
        started = startedDecoded
        let stoppedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stopped)
        stopped = stoppedDecoded
        let countersDecoded = try containerValues.decodeIfPresent(Counters.self, forKey: .counters)
        counters = countersDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let deviceMinutesDecoded = try containerValues.decodeIfPresent(DeviceMinutes.self, forKey: .deviceMinutes)
        deviceMinutes = deviceMinutesDecoded
    }
}
