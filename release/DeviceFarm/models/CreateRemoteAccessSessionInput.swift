// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Creates and submits a request to start a remote access session.</p>
public struct CreateRemoteAccessSessionInput: Equatable {
    /// <p>Unique identifier for the client. If you want access to multiple devices on the same client, you should
    ///             pass the same <code>clientId</code> value in each call to <code>CreateRemoteAccessSession</code>. This
    ///             identifier is required only if <code>remoteDebugEnabled</code> is set to <code>true</code>.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let clientId: String?
    /// <p>The configuration information for the remote access session request.</p>
    public let configuration: CreateRemoteAccessSessionConfiguration?
    /// <p>The ARN of the device for which you want to create a remote access session.</p>
    public let deviceArn: String?
    /// <p>The Amazon Resource Name (ARN) of the device instance for which you want to create a
    ///             remote access session.</p>
    public let instanceArn: String?
    /// <p>The interaction mode of the remote access session. Valid values are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>INTERACTIVE: You can interact with the iOS device by viewing, touching, and
    ///                     rotating the screen. You cannot run XCUITest framework-based tests in this
    ///                     mode.</p>
    ///             </li>
    ///             <li>
    ///                 <p>NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This
    ///                     mode has the fastest test execution speed. You can run XCUITest framework-based tests in this
    ///                     mode.</p>
    ///             </li>
    ///             <li>
    ///                 <p>VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest
    ///                     framework-based tests and watch the screen in this mode.</p>
    ///             </li>
    ///          </ul>
    public let interactionMode: InteractionMode?
    /// <p>The name of the remote access session to create.</p>
    public let name: String?
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a remote
    ///             access session.</p>
    public let projectArn: String?
    /// <p>Set to <code>true</code> if you want to access devices remotely for debugging in
    ///             your remote access session.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let remoteDebugEnabled: Bool?
    /// <p>The Amazon Resource Name (ARN) for the app to be recorded in the remote access
    ///             session.</p>
    public let remoteRecordAppArn: String?
    /// <p>Set to <code>true</code> to enable remote recording for the remote access
    ///             session.</p>
    public let remoteRecordEnabled: Bool?
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
    ///             devices, Device Farm always signs your apps again.</p>
    ///         <p>For more information on how Device Farm modifies your uploads during tests, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a>
    ///          </p>
    public let skipAppResign: Bool?
    /// <p>Ignored. The public key of the <code>ssh</code> key pair you want to use for connecting to remote
    ///             devices in your remote debugging session. This key is required only if <code>remoteDebugEnabled</code> is
    ///             set to <code>true</code>.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let sshPublicKey: String?

    public init (
        clientId: String? = nil,
        configuration: CreateRemoteAccessSessionConfiguration? = nil,
        deviceArn: String? = nil,
        instanceArn: String? = nil,
        interactionMode: InteractionMode? = nil,
        name: String? = nil,
        projectArn: String? = nil,
        remoteDebugEnabled: Bool? = nil,
        remoteRecordAppArn: String? = nil,
        remoteRecordEnabled: Bool? = nil,
        skipAppResign: Bool? = nil,
        sshPublicKey: String? = nil
    )
    {
        self.clientId = clientId
        self.configuration = configuration
        self.deviceArn = deviceArn
        self.instanceArn = instanceArn
        self.interactionMode = interactionMode
        self.name = name
        self.projectArn = projectArn
        self.remoteDebugEnabled = remoteDebugEnabled
        self.remoteRecordAppArn = remoteRecordAppArn
        self.remoteRecordEnabled = remoteRecordEnabled
        self.skipAppResign = skipAppResign
        self.sshPublicKey = sshPublicKey
    }
}
