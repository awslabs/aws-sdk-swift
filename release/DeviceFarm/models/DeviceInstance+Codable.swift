// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case deviceArn
        case instanceProfile
        case labels
        case status
        case udid
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let deviceArn = deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let instanceProfile = instanceProfile {
            try encodeContainer.encode(instanceProfile, forKey: .instanceProfile)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for instancelabels0 in labels {
                try labelsContainer.encode(instancelabels0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let udid = udid {
            try encodeContainer.encode(udid, forKey: .udid)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String].self, forKey: .labels)
        var labelsDecoded0:[String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String]()
            for string0 in labelsContainer {
                labelsDecoded0?.append(string0)
            }
        }
        labels = labelsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let udidDecoded = try containerValues.decodeIfPresent(String.self, forKey: .udid)
        udid = udidDecoded
        let instanceProfileDecoded = try containerValues.decodeIfPresent(InstanceProfile.self, forKey: .instanceProfile)
        instanceProfile = instanceProfileDecoded
    }
}
