// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOfferingTransactionsOutputBody: Equatable {
    public let offeringTransactions: [OfferingTransaction]?
    public let nextToken: String?
}

extension ListOfferingTransactionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case offeringTransactions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offeringTransactionsContainer = try containerValues.decodeIfPresent([OfferingTransaction].self, forKey: .offeringTransactions)
        var offeringTransactionsDecoded0:[OfferingTransaction]? = nil
        if let offeringTransactionsContainer = offeringTransactionsContainer {
            offeringTransactionsDecoded0 = [OfferingTransaction]()
            for structure0 in offeringTransactionsContainer {
                offeringTransactionsDecoded0?.append(structure0)
            }
        }
        offeringTransactions = offeringTransactionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
