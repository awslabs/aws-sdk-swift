// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRemoteAccessSessionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientId
        case configuration
        case deviceArn
        case instanceArn
        case interactionMode
        case name
        case projectArn
        case remoteDebugEnabled
        case remoteRecordAppArn
        case remoteRecordEnabled
        case skipAppResign
        case sshPublicKey
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let deviceArn = deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let instanceArn = instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let interactionMode = interactionMode {
            try encodeContainer.encode(interactionMode.rawValue, forKey: .interactionMode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let remoteDebugEnabled = remoteDebugEnabled {
            try encodeContainer.encode(remoteDebugEnabled, forKey: .remoteDebugEnabled)
        }
        if let remoteRecordAppArn = remoteRecordAppArn {
            try encodeContainer.encode(remoteRecordAppArn, forKey: .remoteRecordAppArn)
        }
        if let remoteRecordEnabled = remoteRecordEnabled {
            try encodeContainer.encode(remoteRecordEnabled, forKey: .remoteRecordEnabled)
        }
        if let skipAppResign = skipAppResign {
            try encodeContainer.encode(skipAppResign, forKey: .skipAppResign)
        }
        if let sshPublicKey = sshPublicKey {
            try encodeContainer.encode(sshPublicKey, forKey: .sshPublicKey)
        }
    }
}
