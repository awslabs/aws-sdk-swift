// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Run: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appUpload
        case arn
        case billingMethod
        case completedJobs
        case counters
        case created
        case customerArtifactPaths
        case deviceMinutes
        case devicePoolArn
        case deviceSelectionResult
        case eventCount
        case jobTimeoutMinutes
        case locale
        case location
        case message
        case name
        case networkProfile
        case parsingResultUrl
        case platform
        case radios
        case result
        case resultCode
        case seed
        case skipAppResign
        case started
        case status
        case stopped
        case testSpecArn
        case totalJobs
        case type
        case webUrl
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appUpload = appUpload {
            try encodeContainer.encode(appUpload, forKey: .appUpload)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let billingMethod = billingMethod {
            try encodeContainer.encode(billingMethod.rawValue, forKey: .billingMethod)
        }
        if let completedJobs = completedJobs {
            try encodeContainer.encode(completedJobs, forKey: .completedJobs)
        }
        if let counters = counters {
            try encodeContainer.encode(counters, forKey: .counters)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let customerArtifactPaths = customerArtifactPaths {
            try encodeContainer.encode(customerArtifactPaths, forKey: .customerArtifactPaths)
        }
        if let deviceMinutes = deviceMinutes {
            try encodeContainer.encode(deviceMinutes, forKey: .deviceMinutes)
        }
        if let devicePoolArn = devicePoolArn {
            try encodeContainer.encode(devicePoolArn, forKey: .devicePoolArn)
        }
        if let deviceSelectionResult = deviceSelectionResult {
            try encodeContainer.encode(deviceSelectionResult, forKey: .deviceSelectionResult)
        }
        if let eventCount = eventCount {
            try encodeContainer.encode(eventCount, forKey: .eventCount)
        }
        if let jobTimeoutMinutes = jobTimeoutMinutes {
            try encodeContainer.encode(jobTimeoutMinutes, forKey: .jobTimeoutMinutes)
        }
        if let locale = locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkProfile = networkProfile {
            try encodeContainer.encode(networkProfile, forKey: .networkProfile)
        }
        if let parsingResultUrl = parsingResultUrl {
            try encodeContainer.encode(parsingResultUrl, forKey: .parsingResultUrl)
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let radios = radios {
            try encodeContainer.encode(radios, forKey: .radios)
        }
        if let result = result {
            try encodeContainer.encode(result.rawValue, forKey: .result)
        }
        if let resultCode = resultCode {
            try encodeContainer.encode(resultCode.rawValue, forKey: .resultCode)
        }
        if let seed = seed {
            try encodeContainer.encode(seed, forKey: .seed)
        }
        if let skipAppResign = skipAppResign {
            try encodeContainer.encode(skipAppResign, forKey: .skipAppResign)
        }
        if let started = started {
            try encodeContainer.encode(started.timeIntervalSince1970, forKey: .started)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopped = stopped {
            try encodeContainer.encode(stopped.timeIntervalSince1970, forKey: .stopped)
        }
        if let testSpecArn = testSpecArn {
            try encodeContainer.encode(testSpecArn, forKey: .testSpecArn)
        }
        if let totalJobs = totalJobs {
            try encodeContainer.encode(totalJobs, forKey: .totalJobs)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let webUrl = webUrl {
            try encodeContainer.encode(webUrl, forKey: .webUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TestType.self, forKey: .type)
        type = typeDecoded
        let platformDecoded = try containerValues.decodeIfPresent(DevicePlatform.self, forKey: .platform)
        platform = platformDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let resultDecoded = try containerValues.decodeIfPresent(ExecutionResult.self, forKey: .result)
        result = resultDecoded
        let startedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .started)
        started = startedDecoded
        let stoppedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stopped)
        stopped = stoppedDecoded
        let countersDecoded = try containerValues.decodeIfPresent(Counters.self, forKey: .counters)
        counters = countersDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let totalJobsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalJobs)
        totalJobs = totalJobsDecoded
        let completedJobsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .completedJobs)
        completedJobs = completedJobsDecoded
        let billingMethodDecoded = try containerValues.decodeIfPresent(BillingMethod.self, forKey: .billingMethod)
        billingMethod = billingMethodDecoded
        let deviceMinutesDecoded = try containerValues.decodeIfPresent(DeviceMinutes.self, forKey: .deviceMinutes)
        deviceMinutes = deviceMinutesDecoded
        let networkProfileDecoded = try containerValues.decodeIfPresent(NetworkProfile.self, forKey: .networkProfile)
        networkProfile = networkProfileDecoded
        let parsingResultUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parsingResultUrl)
        parsingResultUrl = parsingResultUrlDecoded
        let resultCodeDecoded = try containerValues.decodeIfPresent(ExecutionResultCode.self, forKey: .resultCode)
        resultCode = resultCodeDecoded
        let seedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .seed)
        seed = seedDecoded
        let appUploadDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appUpload)
        appUpload = appUploadDecoded
        let eventCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .eventCount)
        eventCount = eventCountDecoded
        let jobTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .jobTimeoutMinutes)
        jobTimeoutMinutes = jobTimeoutMinutesDecoded
        let devicePoolArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .devicePoolArn)
        devicePoolArn = devicePoolArnDecoded
        let localeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .locale)
        locale = localeDecoded
        let radiosDecoded = try containerValues.decodeIfPresent(Radios.self, forKey: .radios)
        radios = radiosDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Location.self, forKey: .location)
        location = locationDecoded
        let customerArtifactPathsDecoded = try containerValues.decodeIfPresent(CustomerArtifactPaths.self, forKey: .customerArtifactPaths)
        customerArtifactPaths = customerArtifactPathsDecoded
        let webUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webUrl)
        webUrl = webUrlDecoded
        let skipAppResignDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .skipAppResign)
        skipAppResign = skipAppResignDecoded
        let testSpecArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .testSpecArn)
        testSpecArn = testSpecArnDecoded
        let deviceSelectionResultDecoded = try containerValues.decodeIfPresent(DeviceSelectionResult.self, forKey: .deviceSelectionResult)
        deviceSelectionResult = deviceSelectionResultDecoded
    }
}
