// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRemoteAccessSessionInputBody: Equatable {
    public let projectArn: String?
    public let deviceArn: String?
    public let instanceArn: String?
    public let sshPublicKey: String?
    public let remoteDebugEnabled: Bool?
    public let remoteRecordEnabled: Bool?
    public let remoteRecordAppArn: String?
    public let name: String?
    public let clientId: String?
    public let configuration: CreateRemoteAccessSessionConfiguration?
    public let interactionMode: InteractionMode?
    public let skipAppResign: Bool?
}

extension CreateRemoteAccessSessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientId
        case configuration
        case deviceArn
        case instanceArn
        case interactionMode
        case name
        case projectArn
        case remoteDebugEnabled
        case remoteRecordAppArn
        case remoteRecordEnabled
        case skipAppResign
        case sshPublicKey
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let sshPublicKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshPublicKey)
        sshPublicKey = sshPublicKeyDecoded
        let remoteDebugEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .remoteDebugEnabled)
        remoteDebugEnabled = remoteDebugEnabledDecoded
        let remoteRecordEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .remoteRecordEnabled)
        remoteRecordEnabled = remoteRecordEnabledDecoded
        let remoteRecordAppArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteRecordAppArn)
        remoteRecordAppArn = remoteRecordAppArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(CreateRemoteAccessSessionConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let interactionModeDecoded = try containerValues.decodeIfPresent(InteractionMode.self, forKey: .interactionMode)
        interactionMode = interactionModeDecoded
        let skipAppResignDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .skipAppResign)
        skipAppResign = skipAppResignDecoded
    }
}
