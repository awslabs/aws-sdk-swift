// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a device type that an app is tested against.</p>
public struct Device: Equatable {
    /// <p>The device's ARN.</p>
    public let arn: String?
    /// <p>Indicates how likely a device is available for a test run. Currently available in the <a>ListDevices</a> and GetDevice API methods.</p>
    public let availability: DeviceAvailability?
    /// <p>The device's carrier.</p>
    public let carrier: String?
    /// <p>Information about the device's CPU.</p>
    public let cpu: CPU?
    /// <p>The name of the fleet to which this device belongs.</p>
    public let fleetName: String?
    /// <p>The type of fleet to which this device belongs. Possible values are PRIVATE and PUBLIC.</p>
    public let fleetType: String?
    /// <p>The device's form factor.</p>
    ///         <p>Allowed values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PHONE</p>
    ///             </li>
    ///             <li>
    ///                 <p>TABLET</p>
    ///             </li>
    ///          </ul>
    public let formFactor: DeviceFormFactor?
    /// <p>The device's heap size, expressed in bytes.</p>
    public let heapSize: Int?
    /// <p>The device's image name.</p>
    public let image: String?
    /// <p>The instances that belong to this device.</p>
    public let instances: [DeviceInstance]?
    /// <p>The device's manufacturer name.</p>
    public let manufacturer: String?
    /// <p>The device's total memory size, expressed in bytes.</p>
    public let memory: Int?
    /// <p>The device's model name.</p>
    public let model: String?
    /// <p>The device's model ID.</p>
    public let modelId: String?
    /// <p>The device's display name.</p>
    public let name: String?
    /// <p>The device's operating system type.</p>
    public let os: String?
    /// <p>The device's platform.</p>
    ///         <p>Allowed values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>ANDROID</p>
    ///             </li>
    ///             <li>
    ///                 <p>IOS</p>
    ///             </li>
    ///          </ul>
    public let platform: DevicePlatform?
    /// <p>The device's radio.</p>
    public let radio: String?
    /// <p>Specifies whether remote access has been enabled for the specified
    ///             device.</p>
    public let remoteAccessEnabled: Bool?
    /// <p>This flag is set to <code>true</code> if remote debugging is enabled for the
    ///             device.</p>
    ///         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
    ///                 longer supported</a>.</p>
    public let remoteDebugEnabled: Bool?
    /// <p>The resolution of the device.</p>
    public let resolution: Resolution?

    public init (
        arn: String? = nil,
        availability: DeviceAvailability? = nil,
        carrier: String? = nil,
        cpu: CPU? = nil,
        fleetName: String? = nil,
        fleetType: String? = nil,
        formFactor: DeviceFormFactor? = nil,
        heapSize: Int? = nil,
        image: String? = nil,
        instances: [DeviceInstance]? = nil,
        manufacturer: String? = nil,
        memory: Int? = nil,
        model: String? = nil,
        modelId: String? = nil,
        name: String? = nil,
        os: String? = nil,
        platform: DevicePlatform? = nil,
        radio: String? = nil,
        remoteAccessEnabled: Bool? = nil,
        remoteDebugEnabled: Bool? = nil,
        resolution: Resolution? = nil
    )
    {
        self.arn = arn
        self.availability = availability
        self.carrier = carrier
        self.cpu = cpu
        self.fleetName = fleetName
        self.fleetType = fleetType
        self.formFactor = formFactor
        self.heapSize = heapSize
        self.image = image
        self.instances = instances
        self.manufacturer = manufacturer
        self.memory = memory
        self.model = model
        self.modelId = modelId
        self.name = name
        self.os = os
        self.platform = platform
        self.radio = radio
        self.remoteAccessEnabled = remoteAccessEnabled
        self.remoteDebugEnabled = remoteDebugEnabled
        self.resolution = resolution
    }
}
