// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduleRunTest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter
        case parameters
        case testPackageArn
        case testSpecArn
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, testparameters0) in parameters {
                try parametersContainer.encode(testparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let testPackageArn = testPackageArn {
            try encodeContainer.encode(testPackageArn, forKey: .testPackageArn)
        }
        if let testSpecArn = testSpecArn {
            try encodeContainer.encode(testSpecArn, forKey: .testSpecArn)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(TestType.self, forKey: .type)
        type = typeDecoded
        let testPackageArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .testPackageArn)
        testPackageArn = testPackageArnDecoded
        let testSpecArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .testSpecArn)
        testSpecArn = testSpecArnDecoded
        let filterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filter)
        filter = filterDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, string0) in parametersContainer {
                parametersDecoded0?[key0] = string0
            }
        }
        parameters = parametersDecoded0
    }
}
