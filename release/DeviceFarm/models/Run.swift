// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents a test run on a set of devices with a given app package, test parameters, and so
///             on.</p>
public struct Run: Equatable {
    /// <p>An app to upload or that has been uploaded.</p>
    public let appUpload: String?
    /// <p>The run's ARN.</p>
    public let arn: String?
    /// <p>Specifies the billing method for a test run: <code>metered</code> or
    ///                 <code>unmetered</code>. If the parameter is not specified, the default value is
    ///                 <code>metered</code>.</p>
    ///         <note>
    ///             <p>If you have unmetered device slots, you must set this to <code>unmetered</code> to use them.
    ///                 Otherwise, the run is counted toward metered device minutes.</p>
    ///         </note>
    public let billingMethod: BillingMethod?
    /// <p>The total number of completed jobs.</p>
    public let completedJobs: Int?
    /// <p>The run's result counters.</p>
    public let counters: Counters?
    /// <p>When the run was created.</p>
    public let created: Date?
    /// <p>Output <code>CustomerArtifactPaths</code> object for the test run.</p>
    public let customerArtifactPaths: CustomerArtifactPaths?
    /// <p>Represents the total (metered or unmetered) minutes used by the test run.</p>
    public let deviceMinutes: DeviceMinutes?
    /// <p>The ARN of the device pool for the run.</p>
    public let devicePoolArn: String?
    /// <p>The results of a device filter used to select the devices for a test run.</p>
    public let deviceSelectionResult: DeviceSelectionResult?
    /// <p>For fuzz tests, this is the number of events, between 1 and 10000, that the UI fuzz
    ///             test should perform.</p>
    public let eventCount: Int?
    /// <p>The number of minutes the job executes before it times out.</p>
    public let jobTimeoutMinutes: Int?
    /// <p>Information about the locale that is used for the run.</p>
    public let locale: String?
    /// <p>Information about the location that is used for the run.</p>
    public let location: Location?
    /// <p>A message about the run's result.</p>
    public let message: String?
    /// <p>The run's name.</p>
    public let name: String?
    /// <p>The network profile being used for a test run.</p>
    public let networkProfile: NetworkProfile?
    /// <p>Read-only URL for an object in an S3 bucket where you can get the parsing results of the test package.
    ///             If the test package doesn't parse, the reason why it doesn't parse appears in the file that this URL points
    ///             to.</p>
    public let parsingResultUrl: String?
    /// <p>The run's platform.</p>
    ///         <p>Allowed values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>ANDROID</p>
    ///             </li>
    ///             <li>
    ///                 <p>IOS</p>
    ///             </li>
    ///          </ul>
    public let platform: DevicePlatform?
    /// <p>Information about the radio states for the run.</p>
    public let radios: Radios?
    /// <p>The run's result.</p>
    ///         <p>Allowed values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PENDING</p>
    ///             </li>
    ///             <li>
    ///                 <p>PASSED</p>
    ///             </li>
    ///             <li>
    ///                 <p>WARNED</p>
    ///             </li>
    ///             <li>
    ///                 <p>FAILED</p>
    ///             </li>
    ///             <li>
    ///                 <p>SKIPPED</p>
    ///             </li>
    ///             <li>
    ///                 <p>ERRORED</p>
    ///             </li>
    ///             <li>
    ///                 <p>STOPPED</p>
    ///             </li>
    ///          </ul>
    public let result: ExecutionResult?
    /// <p>Supporting field for the result field. Set only if <code>result</code> is <code>SKIPPED</code>.
    ///                 <code>PARSING_FAILED</code> if the result is skipped because of test package parsing failure.</p>
    public let resultCode: ExecutionResultCode?
    /// <p>For fuzz tests, this is a seed to use for randomizing the UI fuzz test. Using the same
    ///             seed value between tests ensures identical event sequences.</p>
    public let seed: Int?
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
    ///             devices, Device Farm always signs your apps again.</p>
    ///         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
    ///                 Farm FAQs</i>.</p>
    public let skipAppResign: Bool?
    /// <p>The run's start time.</p>
    public let started: Date?
    /// <p>The run's status.</p>
    ///         <p>Allowed values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>PENDING</p>
    ///             </li>
    ///             <li>
    ///                 <p>PENDING_CONCURRENCY</p>
    ///             </li>
    ///             <li>
    ///                 <p>PENDING_DEVICE</p>
    ///             </li>
    ///             <li>
    ///                 <p>PROCESSING</p>
    ///             </li>
    ///             <li>
    ///                 <p>SCHEDULING</p>
    ///             </li>
    ///             <li>
    ///                 <p>PREPARING</p>
    ///             </li>
    ///             <li>
    ///                 <p>RUNNING</p>
    ///             </li>
    ///             <li>
    ///                 <p>COMPLETED</p>
    ///             </li>
    ///             <li>
    ///                 <p>STOPPING</p>
    ///             </li>
    ///          </ul>
    public let status: ExecutionStatus?
    /// <p>The run's stop time.</p>
    public let stopped: Date?
    /// <p>The ARN of the YAML-formatted test specification for the run.</p>
    public let testSpecArn: String?
    /// <p>The total number of jobs for the run.</p>
    public let totalJobs: Int?
    /// <p>The run's type.</p>
    ///         <p>Must be one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>BUILTIN_FUZZ</p>
    ///             </li>
    ///             <li>
    ///                 <p>BUILTIN_EXPLORER</p>
    ///                 <note>
    ///                     <p>For Android, an app explorer that traverses an Android app, interacting with it and capturing
    ///                         screenshots at the same time.</p>
    ///                 </note>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_JAVA_JUNIT</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_JAVA_TESTNG</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_PYTHON</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_NODE</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_RUBY</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_WEB_JAVA_JUNIT</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_WEB_JAVA_TESTNG</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_WEB_PYTHON</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_WEB_NODE</p>
    ///             </li>
    ///             <li>
    ///                 <p>APPIUM_WEB_RUBY</p>
    ///             </li>
    ///             <li>
    ///                 <p>CALABASH</p>
    ///             </li>
    ///             <li>
    ///                 <p>INSTRUMENTATION</p>
    ///             </li>
    ///             <li>
    ///                 <p>UIAUTOMATION</p>
    ///             </li>
    ///             <li>
    ///                 <p>UIAUTOMATOR</p>
    ///             </li>
    ///             <li>
    ///                 <p>XCTEST</p>
    ///             </li>
    ///             <li>
    ///                 <p>XCTEST_UI</p>
    ///             </li>
    ///          </ul>
    public let type: TestType?
    /// <p>The Device Farm console URL for the recording of the run.</p>
    public let webUrl: String?

    public init (
        appUpload: String? = nil,
        arn: String? = nil,
        billingMethod: BillingMethod? = nil,
        completedJobs: Int? = nil,
        counters: Counters? = nil,
        created: Date? = nil,
        customerArtifactPaths: CustomerArtifactPaths? = nil,
        deviceMinutes: DeviceMinutes? = nil,
        devicePoolArn: String? = nil,
        deviceSelectionResult: DeviceSelectionResult? = nil,
        eventCount: Int? = nil,
        jobTimeoutMinutes: Int? = nil,
        locale: String? = nil,
        location: Location? = nil,
        message: String? = nil,
        name: String? = nil,
        networkProfile: NetworkProfile? = nil,
        parsingResultUrl: String? = nil,
        platform: DevicePlatform? = nil,
        radios: Radios? = nil,
        result: ExecutionResult? = nil,
        resultCode: ExecutionResultCode? = nil,
        seed: Int? = nil,
        skipAppResign: Bool? = nil,
        started: Date? = nil,
        status: ExecutionStatus? = nil,
        stopped: Date? = nil,
        testSpecArn: String? = nil,
        totalJobs: Int? = nil,
        type: TestType? = nil,
        webUrl: String? = nil
    )
    {
        self.appUpload = appUpload
        self.arn = arn
        self.billingMethod = billingMethod
        self.completedJobs = completedJobs
        self.counters = counters
        self.created = created
        self.customerArtifactPaths = customerArtifactPaths
        self.deviceMinutes = deviceMinutes
        self.devicePoolArn = devicePoolArn
        self.deviceSelectionResult = deviceSelectionResult
        self.eventCount = eventCount
        self.jobTimeoutMinutes = jobTimeoutMinutes
        self.locale = locale
        self.location = location
        self.message = message
        self.name = name
        self.networkProfile = networkProfile
        self.parsingResultUrl = parsingResultUrl
        self.platform = platform
        self.radios = radios
        self.result = result
        self.resultCode = resultCode
        self.seed = seed
        self.skipAppResign = skipAppResign
        self.started = started
        self.status = status
        self.stopped = stopped
        self.testSpecArn = testSpecArn
        self.totalJobs = totalJobs
        self.type = type
        self.webUrl = webUrl
    }
}
