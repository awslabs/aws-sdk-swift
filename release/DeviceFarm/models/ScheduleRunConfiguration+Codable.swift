// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduleRunConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case auxiliaryApps
        case billingMethod
        case customerArtifactPaths
        case extraDataPackageArn
        case locale
        case location
        case networkProfileArn
        case radios
        case vpceConfigurationArns
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auxiliaryApps = auxiliaryApps {
            var auxiliaryAppsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .auxiliaryApps)
            for amazonresourcenames0 in auxiliaryApps {
                try auxiliaryAppsContainer.encode(amazonresourcenames0)
            }
        }
        if let billingMethod = billingMethod {
            try encodeContainer.encode(billingMethod.rawValue, forKey: .billingMethod)
        }
        if let customerArtifactPaths = customerArtifactPaths {
            try encodeContainer.encode(customerArtifactPaths, forKey: .customerArtifactPaths)
        }
        if let extraDataPackageArn = extraDataPackageArn {
            try encodeContainer.encode(extraDataPackageArn, forKey: .extraDataPackageArn)
        }
        if let locale = locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let networkProfileArn = networkProfileArn {
            try encodeContainer.encode(networkProfileArn, forKey: .networkProfileArn)
        }
        if let radios = radios {
            try encodeContainer.encode(radios, forKey: .radios)
        }
        if let vpceConfigurationArns = vpceConfigurationArns {
            var vpceConfigurationArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpceConfigurationArns)
            for amazonresourcenames0 in vpceConfigurationArns {
                try vpceConfigurationArnsContainer.encode(amazonresourcenames0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extraDataPackageArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extraDataPackageArn)
        extraDataPackageArn = extraDataPackageArnDecoded
        let networkProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkProfileArn)
        networkProfileArn = networkProfileArnDecoded
        let localeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .locale)
        locale = localeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Location.self, forKey: .location)
        location = locationDecoded
        let vpceConfigurationArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .vpceConfigurationArns)
        var vpceConfigurationArnsDecoded0:[String]? = nil
        if let vpceConfigurationArnsContainer = vpceConfigurationArnsContainer {
            vpceConfigurationArnsDecoded0 = [String]()
            for string0 in vpceConfigurationArnsContainer {
                vpceConfigurationArnsDecoded0?.append(string0)
            }
        }
        vpceConfigurationArns = vpceConfigurationArnsDecoded0
        let customerArtifactPathsDecoded = try containerValues.decodeIfPresent(CustomerArtifactPaths.self, forKey: .customerArtifactPaths)
        customerArtifactPaths = customerArtifactPathsDecoded
        let radiosDecoded = try containerValues.decodeIfPresent(Radios.self, forKey: .radios)
        radios = radiosDecoded
        let auxiliaryAppsContainer = try containerValues.decodeIfPresent([String].self, forKey: .auxiliaryApps)
        var auxiliaryAppsDecoded0:[String]? = nil
        if let auxiliaryAppsContainer = auxiliaryAppsContainer {
            auxiliaryAppsDecoded0 = [String]()
            for string0 in auxiliaryAppsContainer {
                auxiliaryAppsDecoded0?.append(string0)
            }
        }
        auxiliaryApps = auxiliaryAppsDecoded0
        let billingMethodDecoded = try containerValues.decodeIfPresent(BillingMethod.self, forKey: .billingMethod)
        billingMethod = billingMethodDecoded
    }
}
