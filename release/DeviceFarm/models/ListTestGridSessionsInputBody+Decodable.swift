// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTestGridSessionsInputBody: Equatable {
    public let projectArn: String?
    public let status: TestGridSessionStatus?
    public let creationTimeAfter: Date?
    public let creationTimeBefore: Date?
    public let endTimeAfter: Date?
    public let endTimeBefore: Date?
    public let maxResult: Int?
    public let nextToken: String?
}

extension ListTestGridSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationTimeAfter
        case creationTimeBefore
        case endTimeAfter
        case endTimeBefore
        case maxResult
        case nextToken
        case projectArn
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TestGridSessionStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let endTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTimeAfter)
        endTimeAfter = endTimeAfterDecoded
        let endTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTimeBefore)
        endTimeBefore = endTimeBeforeDecoded
        let maxResultDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResult)
        maxResult = maxResultDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
