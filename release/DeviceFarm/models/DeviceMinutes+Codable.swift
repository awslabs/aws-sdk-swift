// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceMinutes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case metered
        case total
        case unmetered
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metered = metered {
            try encodeContainer.encode(metered, forKey: .metered)
        }
        if let total = total {
            try encodeContainer.encode(total, forKey: .total)
        }
        if let unmetered = unmetered {
            try encodeContainer.encode(unmetered, forKey: .unmetered)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .total)
        total = totalDecoded
        let meteredDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .metered)
        metered = meteredDecoded
        let unmeteredDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .unmetered)
        unmetered = unmeteredDecoded
    }
}
