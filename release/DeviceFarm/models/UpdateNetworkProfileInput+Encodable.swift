// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateNetworkProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case description
        case downlinkBandwidthBits
        case downlinkDelayMs
        case downlinkJitterMs
        case downlinkLossPercent
        case name
        case type
        case uplinkBandwidthBits
        case uplinkDelayMs
        case uplinkJitterMs
        case uplinkLossPercent
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let downlinkBandwidthBits = downlinkBandwidthBits {
            try encodeContainer.encode(downlinkBandwidthBits, forKey: .downlinkBandwidthBits)
        }
        if let downlinkDelayMs = downlinkDelayMs {
            try encodeContainer.encode(downlinkDelayMs, forKey: .downlinkDelayMs)
        }
        if let downlinkJitterMs = downlinkJitterMs {
            try encodeContainer.encode(downlinkJitterMs, forKey: .downlinkJitterMs)
        }
        if downlinkLossPercent != 0 {
            try encodeContainer.encode(downlinkLossPercent, forKey: .downlinkLossPercent)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uplinkBandwidthBits = uplinkBandwidthBits {
            try encodeContainer.encode(uplinkBandwidthBits, forKey: .uplinkBandwidthBits)
        }
        if let uplinkDelayMs = uplinkDelayMs {
            try encodeContainer.encode(uplinkDelayMs, forKey: .uplinkDelayMs)
        }
        if let uplinkJitterMs = uplinkJitterMs {
            try encodeContainer.encode(uplinkJitterMs, forKey: .uplinkJitterMs)
        }
        if uplinkLossPercent != 0 {
            try encodeContainer.encode(uplinkLossPercent, forKey: .uplinkLossPercent)
        }
    }
}
