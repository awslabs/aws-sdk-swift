// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Problem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case device
        case job
        case message
        case result
        case run
        case suite
        case test
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let job = job {
            try encodeContainer.encode(job, forKey: .job)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let result = result {
            try encodeContainer.encode(result.rawValue, forKey: .result)
        }
        if let run = run {
            try encodeContainer.encode(run, forKey: .run)
        }
        if let suite = suite {
            try encodeContainer.encode(suite, forKey: .suite)
        }
        if let test = test {
            try encodeContainer.encode(test, forKey: .test)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runDecoded = try containerValues.decodeIfPresent(ProblemDetail.self, forKey: .run)
        run = runDecoded
        let jobDecoded = try containerValues.decodeIfPresent(ProblemDetail.self, forKey: .job)
        job = jobDecoded
        let suiteDecoded = try containerValues.decodeIfPresent(ProblemDetail.self, forKey: .suite)
        suite = suiteDecoded
        let testDecoded = try containerValues.decodeIfPresent(ProblemDetail.self, forKey: .test)
        test = testDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(Device.self, forKey: .device)
        device = deviceDecoded
        let resultDecoded = try containerValues.decodeIfPresent(ExecutionResult.self, forKey: .result)
        result = resultDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
