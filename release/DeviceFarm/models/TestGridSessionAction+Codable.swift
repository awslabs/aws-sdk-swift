// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TestGridSessionAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case duration
        case requestMethod
        case started
        case statusCode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let requestMethod = requestMethod {
            try encodeContainer.encode(requestMethod, forKey: .requestMethod)
        }
        if let started = started {
            try encodeContainer.encode(started.timeIntervalSince1970, forKey: .started)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let startedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .started)
        started = startedDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .duration)
        duration = durationDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let requestMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestMethod)
        requestMethod = requestMethodDecoded
    }
}
