// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTestsOutputBody: Equatable {
    public let tests: [Test]?
    public let nextToken: String?
}

extension ListTestsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case tests
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testsContainer = try containerValues.decodeIfPresent([Test].self, forKey: .tests)
        var testsDecoded0:[Test]? = nil
        if let testsContainer = testsContainer {
            testsDecoded0 = [Test]()
            for structure0 in testsContainer {
                testsDecoded0?.append(structure0)
            }
        }
        tests = testsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
