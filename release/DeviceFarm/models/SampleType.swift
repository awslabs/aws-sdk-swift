// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SampleType {
    case cpu
    case memory
    case nativeAvgDrawtime
    case nativeFps
    case nativeFrames
    case nativeMaxDrawtime
    case nativeMinDrawtime
    case openglAvgDrawtime
    case openglFps
    case openglFrames
    case openglMaxDrawtime
    case openglMinDrawtime
    case rx
    case rxRate
    case threads
    case tx
    case txRate
    case sdkUnknown(String)
}

extension SampleType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SampleType] {
        return [
            .cpu,
            .memory,
            .nativeAvgDrawtime,
            .nativeFps,
            .nativeFrames,
            .nativeMaxDrawtime,
            .nativeMinDrawtime,
            .openglAvgDrawtime,
            .openglFps,
            .openglFrames,
            .openglMaxDrawtime,
            .openglMinDrawtime,
            .rx,
            .rxRate,
            .threads,
            .tx,
            .txRate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cpu: return "CPU"
        case .memory: return "MEMORY"
        case .nativeAvgDrawtime: return "NATIVE_AVG_DRAWTIME"
        case .nativeFps: return "NATIVE_FPS"
        case .nativeFrames: return "NATIVE_FRAMES"
        case .nativeMaxDrawtime: return "NATIVE_MAX_DRAWTIME"
        case .nativeMinDrawtime: return "NATIVE_MIN_DRAWTIME"
        case .openglAvgDrawtime: return "OPENGL_AVG_DRAWTIME"
        case .openglFps: return "OPENGL_FPS"
        case .openglFrames: return "OPENGL_FRAMES"
        case .openglMaxDrawtime: return "OPENGL_MAX_DRAWTIME"
        case .openglMinDrawtime: return "OPENGL_MIN_DRAWTIME"
        case .rx: return "RX"
        case .rxRate: return "RX_RATE"
        case .threads: return "THREADS"
        case .tx: return "TX"
        case .txRate: return "TX_RATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SampleType(rawValue: rawValue) ?? SampleType.sdkUnknown(rawValue)
    }
}
