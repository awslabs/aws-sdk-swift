// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Device: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case availability
        case carrier
        case cpu
        case fleetName
        case fleetType
        case formFactor
        case heapSize
        case image
        case instances
        case manufacturer
        case memory
        case model
        case modelId
        case name
        case os
        case platform
        case radio
        case remoteAccessEnabled
        case remoteDebugEnabled
        case resolution
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availability = availability {
            try encodeContainer.encode(availability.rawValue, forKey: .availability)
        }
        if let carrier = carrier {
            try encodeContainer.encode(carrier, forKey: .carrier)
        }
        if let cpu = cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let fleetName = fleetName {
            try encodeContainer.encode(fleetName, forKey: .fleetName)
        }
        if let fleetType = fleetType {
            try encodeContainer.encode(fleetType, forKey: .fleetType)
        }
        if let formFactor = formFactor {
            try encodeContainer.encode(formFactor.rawValue, forKey: .formFactor)
        }
        if let heapSize = heapSize {
            try encodeContainer.encode(heapSize, forKey: .heapSize)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for deviceinstances0 in instances {
                try instancesContainer.encode(deviceinstances0)
            }
        }
        if let manufacturer = manufacturer {
            try encodeContainer.encode(manufacturer, forKey: .manufacturer)
        }
        if let memory = memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let model = model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let modelId = modelId {
            try encodeContainer.encode(modelId, forKey: .modelId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let os = os {
            try encodeContainer.encode(os, forKey: .os)
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let radio = radio {
            try encodeContainer.encode(radio, forKey: .radio)
        }
        if let remoteAccessEnabled = remoteAccessEnabled {
            try encodeContainer.encode(remoteAccessEnabled, forKey: .remoteAccessEnabled)
        }
        if let remoteDebugEnabled = remoteDebugEnabled {
            try encodeContainer.encode(remoteDebugEnabled, forKey: .remoteDebugEnabled)
        }
        if let resolution = resolution {
            try encodeContainer.encode(resolution, forKey: .resolution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let manufacturerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .manufacturer)
        manufacturer = manufacturerDecoded
        let modelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .model)
        model = modelDecoded
        let modelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelId)
        modelId = modelIdDecoded
        let formFactorDecoded = try containerValues.decodeIfPresent(DeviceFormFactor.self, forKey: .formFactor)
        formFactor = formFactorDecoded
        let platformDecoded = try containerValues.decodeIfPresent(DevicePlatform.self, forKey: .platform)
        platform = platformDecoded
        let osDecoded = try containerValues.decodeIfPresent(String.self, forKey: .os)
        os = osDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(CPU.self, forKey: .cpu)
        cpu = cpuDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(Resolution.self, forKey: .resolution)
        resolution = resolutionDecoded
        let heapSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .heapSize)
        heapSize = heapSizeDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .memory)
        memory = memoryDecoded
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let carrierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .carrier)
        carrier = carrierDecoded
        let radioDecoded = try containerValues.decodeIfPresent(String.self, forKey: .radio)
        radio = radioDecoded
        let remoteAccessEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .remoteAccessEnabled)
        remoteAccessEnabled = remoteAccessEnabledDecoded
        let remoteDebugEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .remoteDebugEnabled)
        remoteDebugEnabled = remoteDebugEnabledDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let fleetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetName)
        fleetName = fleetNameDecoded
        let instancesContainer = try containerValues.decodeIfPresent([DeviceInstance].self, forKey: .instances)
        var instancesDecoded0:[DeviceInstance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [DeviceInstance]()
            for structure0 in instancesContainer {
                instancesDecoded0?.append(structure0)
            }
        }
        instances = instancesDecoded0
        let availabilityDecoded = try containerValues.decodeIfPresent(DeviceAvailability.self, forKey: .availability)
        availability = availabilityDecoded
    }
}
