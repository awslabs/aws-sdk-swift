// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDevicePoolInputBody: Equatable {
    public let projectArn: String?
    public let name: String?
    public let description: String?
    public let rules: [Rule]?
    public let maxDevices: Int?
}

extension CreateDevicePoolInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case maxDevices
        case name
        case projectArn
        case rules
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Rule].self, forKey: .rules)
        var rulesDecoded0:[Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Rule]()
            for structure0 in rulesContainer {
                rulesDecoded0?.append(structure0)
            }
        }
        rules = rulesDecoded0
        let maxDevicesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxDevices)
        maxDevices = maxDevicesDecoded
    }
}
