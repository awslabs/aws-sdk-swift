// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateNetworkProfileInputBody: Equatable {
    public let arn: String?
    public let name: String?
    public let description: String?
    public let type: NetworkProfileType?
    public let uplinkBandwidthBits: Int?
    public let downlinkBandwidthBits: Int?
    public let uplinkDelayMs: Int?
    public let downlinkDelayMs: Int?
    public let uplinkJitterMs: Int?
    public let downlinkJitterMs: Int?
    public let uplinkLossPercent: Int
    public let downlinkLossPercent: Int
}

extension UpdateNetworkProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn
        case description
        case downlinkBandwidthBits
        case downlinkDelayMs
        case downlinkJitterMs
        case downlinkLossPercent
        case name
        case type
        case uplinkBandwidthBits
        case uplinkDelayMs
        case uplinkJitterMs
        case uplinkLossPercent
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkProfileType.self, forKey: .type)
        type = typeDecoded
        let uplinkBandwidthBitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .uplinkBandwidthBits)
        uplinkBandwidthBits = uplinkBandwidthBitsDecoded
        let downlinkBandwidthBitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .downlinkBandwidthBits)
        downlinkBandwidthBits = downlinkBandwidthBitsDecoded
        let uplinkDelayMsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .uplinkDelayMs)
        uplinkDelayMs = uplinkDelayMsDecoded
        let downlinkDelayMsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .downlinkDelayMs)
        downlinkDelayMs = downlinkDelayMsDecoded
        let uplinkJitterMsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .uplinkJitterMs)
        uplinkJitterMs = uplinkJitterMsDecoded
        let downlinkJitterMsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .downlinkJitterMs)
        downlinkJitterMs = downlinkJitterMsDecoded
        let uplinkLossPercentDecoded = try containerValues.decode(Int.self, forKey: .uplinkLossPercent)
        uplinkLossPercent = uplinkLossPercentDecoded
        let downlinkLossPercentDecoded = try containerValues.decode(Int.self, forKey: .downlinkLossPercent)
        downlinkLossPercent = downlinkLossPercentDecoded
    }
}
