// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUniqueProblemsOutputBody: Equatable {
    public let uniqueProblems: [String:[UniqueProblem]?]?
    public let nextToken: String?
}

extension ListUniqueProblemsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case uniqueProblems
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uniqueProblemsContainer = try containerValues.decodeIfPresent([String:[UniqueProblem]?].self, forKey: .uniqueProblems)
        var uniqueProblemsDecoded0: [String:[UniqueProblem]?]? = nil
        if let uniqueProblemsContainer = uniqueProblemsContainer {
            uniqueProblemsDecoded0 = [String:[UniqueProblem]?]()
            for (key0, uniqueproblems0) in uniqueProblemsContainer {
                var uniqueproblems0Decoded0 = [UniqueProblem]()
                if let uniqueproblems0 = uniqueproblems0 {
                    for structure1 in uniqueproblems0 {
                        uniqueproblems0Decoded0.append(structure1)
                    }
                }
                uniqueProblemsDecoded0?[key0] = uniqueproblems0Decoded0
            }
        }
        uniqueProblems = uniqueProblemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
