// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogSubscription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case directoryId = "DirectoryId"
        case logGroupName = "LogGroupName"
        case subscriptionCreatedDateTime = "SubscriptionCreatedDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let subscriptionCreatedDateTime = subscriptionCreatedDateTime {
            try encodeContainer.encode(subscriptionCreatedDateTime.timeIntervalSince1970, forKey: .subscriptionCreatedDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let subscriptionCreatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .subscriptionCreatedDateTime)
        subscriptionCreatedDateTime = subscriptionCreatedDateTimeDecoded
    }
}
