// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterCertificateInputBody: Equatable {
    public let directoryId: String?
    public let certificateData: String?
    public let type: CertificateType?
    public let clientCertAuthSettings: ClientCertAuthSettings?
}

extension RegisterCertificateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateData = "CertificateData"
        case clientCertAuthSettings = "ClientCertAuthSettings"
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let certificateDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateData)
        certificateData = certificateDataDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CertificateType.self, forKey: .type)
        type = typeDecoded
        let clientCertAuthSettingsDecoded = try containerValues.decodeIfPresent(ClientCertAuthSettings.self, forKey: .clientCertAuthSettings)
        clientCertAuthSettings = clientCertAuthSettingsDecoded
    }
}
