// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum CertificateState {
    case deregistered
    case deregistering
    case deregisterFailed
    case registered
    case registering
    case registerFailed
    case sdkUnknown(String)
}

extension CertificateState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CertificateState] {
        return [
            .deregistered,
            .deregistering,
            .deregisterFailed,
            .registered,
            .registering,
            .registerFailed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deregistered: return "Deregistered"
        case .deregistering: return "Deregistering"
        case .deregisterFailed: return "DeregisterFailed"
        case .registered: return "Registered"
        case .registering: return "Registering"
        case .registerFailed: return "RegisterFailed"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CertificateState(rawValue: rawValue) ?? CertificateState.sdkUnknown(rawValue)
    }
}
