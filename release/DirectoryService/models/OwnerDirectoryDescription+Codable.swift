// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OwnerDirectoryDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case radiusSettings = "RadiusSettings"
        case radiusStatus = "RadiusStatus"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let radiusSettings = radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
        if let radiusStatus = radiusStatus {
            try encodeContainer.encode(radiusStatus.rawValue, forKey: .radiusStatus)
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([String].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [String]()
            for string0 in dnsIpAddrsContainer {
                dnsIpAddrsDecoded0?.append(string0)
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryVpcSettingsDescription.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
        let radiusStatusDecoded = try containerValues.decodeIfPresent(RadiusStatus.self, forKey: .radiusStatus)
        radiusStatus = radiusStatusDecoded
    }
}
