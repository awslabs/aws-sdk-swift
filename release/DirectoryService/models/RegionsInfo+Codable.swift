// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegionsInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalRegions = "AdditionalRegions"
        case primaryRegion = "PrimaryRegion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalRegions = additionalRegions {
            var additionalRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalRegions)
            for additionalregions0 in additionalRegions {
                try additionalRegionsContainer.encode(additionalregions0)
            }
        }
        if let primaryRegion = primaryRegion {
            try encodeContainer.encode(primaryRegion, forKey: .primaryRegion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryRegion)
        primaryRegion = primaryRegionDecoded
        let additionalRegionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalRegions)
        var additionalRegionsDecoded0:[String]? = nil
        if let additionalRegionsContainer = additionalRegionsContainer {
            additionalRegionsDecoded0 = [String]()
            for string0 in additionalRegionsContainer {
                additionalRegionsDecoded0?.append(string0)
            }
        }
        additionalRegions = additionalRegionsDecoded0
    }
}
