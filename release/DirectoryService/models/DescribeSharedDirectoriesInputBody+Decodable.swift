// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSharedDirectoriesInputBody: Equatable {
    public let ownerDirectoryId: String?
    public let sharedDirectoryIds: [String]?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeSharedDirectoriesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case ownerDirectoryId = "OwnerDirectoryId"
        case sharedDirectoryIds = "SharedDirectoryIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDirectoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerDirectoryId)
        ownerDirectoryId = ownerDirectoryIdDecoded
        let sharedDirectoryIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sharedDirectoryIds)
        var sharedDirectoryIdsDecoded0:[String]? = nil
        if let sharedDirectoryIdsContainer = sharedDirectoryIdsContainer {
            sharedDirectoryIdsDecoded0 = [String]()
            for string0 in sharedDirectoryIdsContainer {
                sharedDirectoryIdsDecoded0?.append(string0)
            }
        }
        sharedDirectoryIds = sharedDirectoryIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
