// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSchemaExtensionInputBody: Equatable {
    public let directoryId: String?
    public let createSnapshotBeforeSchemaExtension: Bool
    public let ldifContent: String?
    public let description: String?
}

extension StartSchemaExtensionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createSnapshotBeforeSchemaExtension = "CreateSnapshotBeforeSchemaExtension"
        case description = "Description"
        case directoryId = "DirectoryId"
        case ldifContent = "LdifContent"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let createSnapshotBeforeSchemaExtensionDecoded = try containerValues.decode(Bool.self, forKey: .createSnapshotBeforeSchemaExtension)
        createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtensionDecoded
        let ldifContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ldifContent)
        ldifContent = ldifContentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
