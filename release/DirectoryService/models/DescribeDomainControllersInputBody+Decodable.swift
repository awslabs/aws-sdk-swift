// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDomainControllersInputBody: Equatable {
    public let directoryId: String?
    public let domainControllerIds: [String]?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeDomainControllersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case directoryId = "DirectoryId"
        case domainControllerIds = "DomainControllerIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let domainControllerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .domainControllerIds)
        var domainControllerIdsDecoded0:[String]? = nil
        if let domainControllerIdsContainer = domainControllerIdsContainer {
            domainControllerIdsDecoded0 = [String]()
            for string0 in domainControllerIdsContainer {
                domainControllerIdsDecoded0?.append(string0)
            }
        }
        domainControllerIds = domainControllerIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
