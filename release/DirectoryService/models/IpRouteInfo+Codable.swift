// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IpRouteInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addedDateTime = "AddedDateTime"
        case cidrIp = "CidrIp"
        case description = "Description"
        case directoryId = "DirectoryId"
        case ipRouteStatusMsg = "IpRouteStatusMsg"
        case ipRouteStatusReason = "IpRouteStatusReason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addedDateTime = addedDateTime {
            try encodeContainer.encode(addedDateTime.timeIntervalSince1970, forKey: .addedDateTime)
        }
        if let cidrIp = cidrIp {
            try encodeContainer.encode(cidrIp, forKey: .cidrIp)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let ipRouteStatusMsg = ipRouteStatusMsg {
            try encodeContainer.encode(ipRouteStatusMsg.rawValue, forKey: .ipRouteStatusMsg)
        }
        if let ipRouteStatusReason = ipRouteStatusReason {
            try encodeContainer.encode(ipRouteStatusReason, forKey: .ipRouteStatusReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let cidrIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrIp)
        cidrIp = cidrIpDecoded
        let ipRouteStatusMsgDecoded = try containerValues.decodeIfPresent(IpRouteStatusMsg.self, forKey: .ipRouteStatusMsg)
        ipRouteStatusMsg = ipRouteStatusMsgDecoded
        let addedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .addedDateTime)
        addedDateTime = addedDateTimeDecoded
        let ipRouteStatusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipRouteStatusReason)
        ipRouteStatusReason = ipRouteStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
