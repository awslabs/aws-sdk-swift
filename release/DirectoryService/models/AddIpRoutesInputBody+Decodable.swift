// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddIpRoutesInputBody: Equatable {
    public let directoryId: String?
    public let ipRoutes: [IpRoute]?
    public let updateSecurityGroupForDirectoryControllers: Bool
}

extension AddIpRoutesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case directoryId = "DirectoryId"
        case ipRoutes = "IpRoutes"
        case updateSecurityGroupForDirectoryControllers = "UpdateSecurityGroupForDirectoryControllers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let ipRoutesContainer = try containerValues.decodeIfPresent([IpRoute].self, forKey: .ipRoutes)
        var ipRoutesDecoded0:[IpRoute]? = nil
        if let ipRoutesContainer = ipRoutesContainer {
            ipRoutesDecoded0 = [IpRoute]()
            for structure0 in ipRoutesContainer {
                ipRoutesDecoded0?.append(structure0)
            }
        }
        ipRoutes = ipRoutesDecoded0
        let updateSecurityGroupForDirectoryControllersDecoded = try containerValues.decode(Bool.self, forKey: .updateSecurityGroupForDirectoryControllers)
        updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllersDecoded
    }
}
