// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificatesOutputBody: Equatable {
    public let nextToken: String?
    public let certificatesInfo: [CertificateInfo]?
}

extension ListCertificatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificatesInfo = "CertificatesInfo"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let certificatesInfoContainer = try containerValues.decodeIfPresent([CertificateInfo].self, forKey: .certificatesInfo)
        var certificatesInfoDecoded0:[CertificateInfo]? = nil
        if let certificatesInfoContainer = certificatesInfoContainer {
            certificatesInfoDecoded0 = [CertificateInfo]()
            for structure0 in certificatesInfoContainer {
                certificatesInfoDecoded0?.append(structure0)
            }
        }
        certificatesInfo = certificatesInfoDecoded0
    }
}
