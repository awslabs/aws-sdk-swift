// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnapshotLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case manualSnapshotsCurrentCount = "ManualSnapshotsCurrentCount"
        case manualSnapshotsLimit = "ManualSnapshotsLimit"
        case manualSnapshotsLimitReached = "ManualSnapshotsLimitReached"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manualSnapshotsCurrentCount = manualSnapshotsCurrentCount {
            try encodeContainer.encode(manualSnapshotsCurrentCount, forKey: .manualSnapshotsCurrentCount)
        }
        if let manualSnapshotsLimit = manualSnapshotsLimit {
            try encodeContainer.encode(manualSnapshotsLimit, forKey: .manualSnapshotsLimit)
        }
        if manualSnapshotsLimitReached != false {
            try encodeContainer.encode(manualSnapshotsLimitReached, forKey: .manualSnapshotsLimitReached)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manualSnapshotsLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .manualSnapshotsLimit)
        manualSnapshotsLimit = manualSnapshotsLimitDecoded
        let manualSnapshotsCurrentCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .manualSnapshotsCurrentCount)
        manualSnapshotsCurrentCount = manualSnapshotsCurrentCountDecoded
        let manualSnapshotsLimitReachedDecoded = try containerValues.decode(Bool.self, forKey: .manualSnapshotsLimitReached)
        manualSnapshotsLimitReached = manualSnapshotsLimitReachedDecoded
    }
}
