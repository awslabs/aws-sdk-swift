// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ConnectDirectoryInputBody: Equatable {
    public let name: String?
    public let shortName: String?
    public let password: String?
    public let description: String?
    public let size: DirectorySize?
    public let connectSettings: DirectoryConnectSettings?
    public let tags: [Tag]?
}

extension ConnectDirectoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case connectSettings = "ConnectSettings"
        case description = "Description"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case size = "Size"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(DirectorySize.self, forKey: .size)
        size = sizeDecoded
        let connectSettingsDecoded = try containerValues.decodeIfPresent(DirectoryConnectSettings.self, forKey: .connectSettings)
        connectSettings = connectSettingsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
