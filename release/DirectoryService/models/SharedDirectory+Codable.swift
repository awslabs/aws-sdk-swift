// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SharedDirectory: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdDateTime = "CreatedDateTime"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
        case ownerAccountId = "OwnerAccountId"
        case ownerDirectoryId = "OwnerDirectoryId"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareStatus = "ShareStatus"
        case sharedAccountId = "SharedAccountId"
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDateTime = createdDateTime {
            try encodeContainer.encode(createdDateTime.timeIntervalSince1970, forKey: .createdDateTime)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let ownerDirectoryId = ownerDirectoryId {
            try encodeContainer.encode(ownerDirectoryId, forKey: .ownerDirectoryId)
        }
        if let shareMethod = shareMethod {
            try encodeContainer.encode(shareMethod.rawValue, forKey: .shareMethod)
        }
        if let shareNotes = shareNotes {
            try encodeContainer.encode(shareNotes, forKey: .shareNotes)
        }
        if let shareStatus = shareStatus {
            try encodeContainer.encode(shareStatus.rawValue, forKey: .shareStatus)
        }
        if let sharedAccountId = sharedAccountId {
            try encodeContainer.encode(sharedAccountId, forKey: .sharedAccountId)
        }
        if let sharedDirectoryId = sharedDirectoryId {
            try encodeContainer.encode(sharedDirectoryId, forKey: .sharedDirectoryId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let ownerDirectoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerDirectoryId)
        ownerDirectoryId = ownerDirectoryIdDecoded
        let shareMethodDecoded = try containerValues.decodeIfPresent(ShareMethod.self, forKey: .shareMethod)
        shareMethod = shareMethodDecoded
        let sharedAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sharedAccountId)
        sharedAccountId = sharedAccountIdDecoded
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
        let shareStatusDecoded = try containerValues.decodeIfPresent(ShareStatus.self, forKey: .shareStatus)
        shareStatus = shareStatusDecoded
        let shareNotesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shareNotes)
        shareNotes = shareNotesDecoded
        let createdDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDateTime)
        createdDateTime = createdDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
