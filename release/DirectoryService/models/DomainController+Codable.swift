// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DomainController: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case directoryId = "DirectoryId"
        case dnsIpAddr = "DnsIpAddr"
        case domainControllerId = "DomainControllerId"
        case launchTime = "LaunchTime"
        case status = "Status"
        case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
        case statusReason = "StatusReason"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddr = dnsIpAddr {
            try encodeContainer.encode(dnsIpAddr, forKey: .dnsIpAddr)
        }
        if let domainControllerId = domainControllerId {
            try encodeContainer.encode(domainControllerId, forKey: .domainControllerId)
        }
        if let launchTime = launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusLastUpdatedDateTime = statusLastUpdatedDateTime {
            try encodeContainer.encode(statusLastUpdatedDateTime.timeIntervalSince1970, forKey: .statusLastUpdatedDateTime)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let domainControllerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainControllerId)
        domainControllerId = domainControllerIdDecoded
        let dnsIpAddrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsIpAddr)
        dnsIpAddr = dnsIpAddrDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DomainControllerStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let statusLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .statusLastUpdatedDateTime)
        statusLastUpdatedDateTime = statusLastUpdatedDateTimeDecoded
    }
}
