// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudOnlyDirectoriesCurrentCount = "CloudOnlyDirectoriesCurrentCount"
        case cloudOnlyDirectoriesLimit = "CloudOnlyDirectoriesLimit"
        case cloudOnlyDirectoriesLimitReached = "CloudOnlyDirectoriesLimitReached"
        case cloudOnlyMicrosoftADCurrentCount = "CloudOnlyMicrosoftADCurrentCount"
        case cloudOnlyMicrosoftADLimit = "CloudOnlyMicrosoftADLimit"
        case cloudOnlyMicrosoftADLimitReached = "CloudOnlyMicrosoftADLimitReached"
        case connectedDirectoriesCurrentCount = "ConnectedDirectoriesCurrentCount"
        case connectedDirectoriesLimit = "ConnectedDirectoriesLimit"
        case connectedDirectoriesLimitReached = "ConnectedDirectoriesLimitReached"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount {
            try encodeContainer.encode(cloudOnlyDirectoriesCurrentCount, forKey: .cloudOnlyDirectoriesCurrentCount)
        }
        if let cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit {
            try encodeContainer.encode(cloudOnlyDirectoriesLimit, forKey: .cloudOnlyDirectoriesLimit)
        }
        if cloudOnlyDirectoriesLimitReached != false {
            try encodeContainer.encode(cloudOnlyDirectoriesLimitReached, forKey: .cloudOnlyDirectoriesLimitReached)
        }
        if let cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount {
            try encodeContainer.encode(cloudOnlyMicrosoftADCurrentCount, forKey: .cloudOnlyMicrosoftADCurrentCount)
        }
        if let cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimit, forKey: .cloudOnlyMicrosoftADLimit)
        }
        if cloudOnlyMicrosoftADLimitReached != false {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimitReached, forKey: .cloudOnlyMicrosoftADLimitReached)
        }
        if let connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount {
            try encodeContainer.encode(connectedDirectoriesCurrentCount, forKey: .connectedDirectoriesCurrentCount)
        }
        if let connectedDirectoriesLimit = connectedDirectoriesLimit {
            try encodeContainer.encode(connectedDirectoriesLimit, forKey: .connectedDirectoriesLimit)
        }
        if connectedDirectoriesLimitReached != false {
            try encodeContainer.encode(connectedDirectoriesLimitReached, forKey: .connectedDirectoriesLimitReached)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudOnlyDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cloudOnlyDirectoriesLimit)
        cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimitDecoded
        let cloudOnlyDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cloudOnlyDirectoriesCurrentCount)
        cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCountDecoded
        let cloudOnlyDirectoriesLimitReachedDecoded = try containerValues.decode(Bool.self, forKey: .cloudOnlyDirectoriesLimitReached)
        cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReachedDecoded
        let cloudOnlyMicrosoftADLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cloudOnlyMicrosoftADLimit)
        cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimitDecoded
        let cloudOnlyMicrosoftADCurrentCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cloudOnlyMicrosoftADCurrentCount)
        cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCountDecoded
        let cloudOnlyMicrosoftADLimitReachedDecoded = try containerValues.decode(Bool.self, forKey: .cloudOnlyMicrosoftADLimitReached)
        cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReachedDecoded
        let connectedDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .connectedDirectoriesLimit)
        connectedDirectoriesLimit = connectedDirectoriesLimitDecoded
        let connectedDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .connectedDirectoriesCurrentCount)
        connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCountDecoded
        let connectedDirectoriesLimitReachedDecoded = try containerValues.decode(Bool.self, forKey: .connectedDirectoriesLimitReached)
        connectedDirectoriesLimitReached = connectedDirectoriesLimitReachedDecoded
    }
}
