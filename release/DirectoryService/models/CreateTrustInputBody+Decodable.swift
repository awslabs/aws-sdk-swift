// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrustInputBody: Equatable {
    public let directoryId: String?
    public let remoteDomainName: String?
    public let trustPassword: String?
    public let trustDirection: TrustDirection?
    public let trustType: TrustType?
    public let conditionalForwarderIpAddrs: [String]?
    public let selectiveAuth: SelectiveAuth?
}

extension CreateTrustInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case trustDirection = "TrustDirection"
        case trustPassword = "TrustPassword"
        case trustType = "TrustType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let trustPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trustPassword)
        trustPassword = trustPasswordDecoded
        let trustDirectionDecoded = try containerValues.decodeIfPresent(TrustDirection.self, forKey: .trustDirection)
        trustDirection = trustDirectionDecoded
        let trustTypeDecoded = try containerValues.decodeIfPresent(TrustType.self, forKey: .trustType)
        trustType = trustTypeDecoded
        let conditionalForwarderIpAddrsContainer = try containerValues.decodeIfPresent([String].self, forKey: .conditionalForwarderIpAddrs)
        var conditionalForwarderIpAddrsDecoded0:[String]? = nil
        if let conditionalForwarderIpAddrsContainer = conditionalForwarderIpAddrsContainer {
            conditionalForwarderIpAddrsDecoded0 = [String]()
            for string0 in conditionalForwarderIpAddrsContainer {
                conditionalForwarderIpAddrsDecoded0?.append(string0)
            }
        }
        conditionalForwarderIpAddrs = conditionalForwarderIpAddrsDecoded0
        let selectiveAuthDecoded = try containerValues.decodeIfPresent(SelectiveAuth.self, forKey: .selectiveAuth)
        selectiveAuth = selectiveAuthDecoded
    }
}
