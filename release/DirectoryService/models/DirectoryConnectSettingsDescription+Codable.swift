// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryConnectSettingsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZones = "AvailabilityZones"
        case connectIps = "ConnectIps"
        case customerUserName = "CustomerUserName"
        case securityGroupId = "SecurityGroupId"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let connectIps = connectIps {
            var connectIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectIps)
            for ipaddrs0 in connectIps {
                try connectIpsContainer.encode(ipaddrs0)
            }
        }
        if let customerUserName = customerUserName {
            try encodeContainer.encode(customerUserName, forKey: .customerUserName)
        }
        if let securityGroupId = securityGroupId {
            try encodeContainer.encode(securityGroupId, forKey: .securityGroupId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let customerUserNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerUserName)
        customerUserName = customerUserNameDecoded
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                availabilityZonesDecoded0?.append(string0)
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let connectIpsContainer = try containerValues.decodeIfPresent([String].self, forKey: .connectIps)
        var connectIpsDecoded0:[String]? = nil
        if let connectIpsContainer = connectIpsContainer {
            connectIpsDecoded0 = [String]()
            for string0 in connectIpsContainer {
                connectIpsDecoded0?.append(string0)
            }
        }
        connectIps = connectIpsDecoded0
    }
}
