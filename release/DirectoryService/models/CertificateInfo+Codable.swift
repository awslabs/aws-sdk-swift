// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CertificateInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateId = "CertificateId"
        case commonName = "CommonName"
        case expiryDateTime = "ExpiryDateTime"
        case state = "State"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let commonName = commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if let expiryDateTime = expiryDateTime {
            try encodeContainer.encode(expiryDateTime.timeIntervalSince1970, forKey: .expiryDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CertificateState.self, forKey: .state)
        state = stateDecoded
        let expiryDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiryDateTime)
        expiryDateTime = expiryDateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CertificateType.self, forKey: .type)
        type = typeDecoded
    }
}
