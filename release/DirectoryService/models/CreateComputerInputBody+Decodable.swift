// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateComputerInputBody: Equatable {
    public let directoryId: String?
    public let computerName: String?
    public let password: String?
    public let organizationalUnitDistinguishedName: String?
    public let computerAttributes: [Attribute]?
}

extension CreateComputerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computerAttributes = "ComputerAttributes"
        case computerName = "ComputerName"
        case directoryId = "DirectoryId"
        case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
        case password = "Password"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let computerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .computerName)
        computerName = computerNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let organizationalUnitDistinguishedNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationalUnitDistinguishedName)
        organizationalUnitDistinguishedName = organizationalUnitDistinguishedNameDecoded
        let computerAttributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .computerAttributes)
        var computerAttributesDecoded0:[Attribute]? = nil
        if let computerAttributesContainer = computerAttributesContainer {
            computerAttributesDecoded0 = [Attribute]()
            for structure0 in computerAttributesContainer {
                computerAttributesDecoded0?.append(structure0)
            }
        }
        computerAttributes = computerAttributesDecoded0
    }
}
