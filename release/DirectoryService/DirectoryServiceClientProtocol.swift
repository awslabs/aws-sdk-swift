// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS Directory Service</fullname>
///          <p>AWS Directory Service is a web service that makes it easy for you to setup and run directories in the AWS cloud, or connect your AWS resources with an existing on-premises Microsoft Active Directory. This guide provides detailed information about AWS Directory Service operations, data types, parameters, and errors. For information about AWS Directory Services features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory Service</a> and the <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html">AWS Directory Service Administration Guide</a>.</p>
///          <note>
///             <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to AWS Directory Service and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href="http://aws.amazon.com/tools/">Tools for Amazon Web
///          Services</a>.</p>
///          </note>
public protocol DirectoryServiceClientProtocol {
    /// <p>Accepts a directory sharing request that was sent from the directory owner account.</p>
    func acceptSharedDirectory(input: AcceptSharedDirectoryInput, completion: @escaping (SdkResult<AcceptSharedDirectoryOutputResponse, AcceptSharedDirectoryOutputError>) -> Void)
    /// <p>If the DNS server for your on-premises domain uses a publicly addressable IP address, you must add a CIDR address block to correctly route traffic to and from your Microsoft AD on Amazon Web Services. <i>AddIpRoutes</i> adds this address block. You can also use <i>AddIpRoutes</i> to facilitate routing traffic that uses public IP ranges from your Microsoft AD on AWS to a peer VPC. </p>
    ///          <p>Before you call <i>AddIpRoutes</i>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <i>AddIpRoutes</i> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>
    func addIpRoutes(input: AddIpRoutesInput, completion: @escaping (SdkResult<AddIpRoutesOutputResponse, AddIpRoutesOutputError>) -> Void)
    /// <p>Adds two domain controllers in the specified Region for the specified directory.</p>
    func addRegion(input: AddRegionInput, completion: @escaping (SdkResult<AddRegionOutputResponse, AddRegionOutputError>) -> Void)
    /// <p>Adds or overwrites one or more tags for the specified directory. Each directory can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique to each resource.</p>
    func addTagsToResource(input: AddTagsToResourceInput, completion: @escaping (SdkResult<AddTagsToResourceOutputResponse, AddTagsToResourceOutputError>) -> Void)
    /// <p>Cancels an in-progress schema extension to a Microsoft AD directory. Once a schema extension has started replicating to all domain controllers, the task can no longer be canceled. A schema extension can be canceled during any of the following states; <code>Initializing</code>, <code>CreatingSnapshot</code>, and <code>UpdatingSchema</code>.</p>
    func cancelSchemaExtension(input: CancelSchemaExtensionInput, completion: @escaping (SdkResult<CancelSchemaExtensionOutputResponse, CancelSchemaExtensionOutputError>) -> Void)
    /// <p>Creates an AD Connector to connect to an on-premises directory.</p>
    ///          <p>Before you call <code>ConnectDirectory</code>, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the <code>ConnectDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">AWS Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference</a>.</p>
    func connectDirectory(input: ConnectDirectoryInput, completion: @escaping (SdkResult<ConnectDirectoryOutputResponse, ConnectDirectoryOutputError>) -> Void)
    /// <p>Creates an alias for a directory and assigns the alias to the directory. The alias is used
    ///          to construct the access URL for the directory, such as
    ///             <code>http://<alias>.awsapps.com</code>.</p>
    ///          <important>
    ///             <p>After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.</p>
    ///          </important>
    func createAlias(input: CreateAliasInput, completion: @escaping (SdkResult<CreateAliasOutputResponse, CreateAliasOutputError>) -> Void)
    /// <p>Creates an Active Directory computer object in the specified directory.</p>
    func createComputer(input: CreateComputerInput, completion: @escaping (SdkResult<CreateComputerOutputResponse, CreateComputerOutputError>) -> Void)
    /// <p>Creates a conditional forwarder associated with your AWS directory. Conditional forwarders are required in order to set up a trust relationship with another domain. The conditional forwarder points to the trusted domain.</p>
    func createConditionalForwarder(input: CreateConditionalForwarderInput, completion: @escaping (SdkResult<CreateConditionalForwarderOutputResponse, CreateConditionalForwarderOutputError>) -> Void)
    /// <p>Creates a Simple AD directory. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_simple_ad.html">Simple Active Directory</a> in the <i>AWS Directory Service Admin
    ///         Guide</i>.</p>
    ///          <p>Before you call <code>CreateDirectory</code>, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the <code>CreateDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">AWS Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference</a>.</p>
    func createDirectory(input: CreateDirectoryInput, completion: @escaping (SdkResult<CreateDirectoryOutputResponse, CreateDirectoryOutputError>) -> Void)
    /// <p>Creates a subscription to forward real-time Directory Service domain controller security
    ///       logs to the specified Amazon CloudWatch log group in your AWS account.</p>
    func createLogSubscription(input: CreateLogSubscriptionInput, completion: @escaping (SdkResult<CreateLogSubscriptionOutputResponse, CreateLogSubscriptionOutputError>) -> Void)
    /// <p>Creates a Microsoft AD directory in the AWS Cloud. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html">AWS Managed Microsoft AD</a> in the <i>AWS Directory Service Admin Guide</i>.</p>
    ///          <p>Before you call <i>CreateMicrosoftAD</i>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <i>CreateMicrosoftAD</i> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>
    func createMicrosoftAD(input: CreateMicrosoftADInput, completion: @escaping (SdkResult<CreateMicrosoftADOutputResponse, CreateMicrosoftADOutputError>) -> Void)
    /// <p>Creates a snapshot of a Simple AD or Microsoft AD directory in the AWS cloud.</p>
    ///          <note>
    ///             <p>You cannot take snapshots of AD Connector directories.</p>
    ///          </note>
    func createSnapshot(input: CreateSnapshotInput, completion: @escaping (SdkResult<CreateSnapshotOutputResponse, CreateSnapshotOutputError>) -> Void)
    /// <p>AWS Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your AWS Managed Microsoft AD directory, and your existing on-premises Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials.</p>
    ///          <p>This action initiates the creation of the AWS side of a trust relationship between an AWS Managed Microsoft AD directory and an external domain. You can create either a forest trust or an external trust.</p>
    func createTrust(input: CreateTrustInput, completion: @escaping (SdkResult<CreateTrustOutputResponse, CreateTrustOutputError>) -> Void)
    /// <p>Deletes a conditional forwarder that has been set up for your AWS directory.</p>
    func deleteConditionalForwarder(input: DeleteConditionalForwarderInput, completion: @escaping (SdkResult<DeleteConditionalForwarderOutputResponse, DeleteConditionalForwarderOutputError>) -> Void)
    /// <p>Deletes an AWS Directory Service directory.</p>
    ///          <p>Before you call <code>DeleteDirectory</code>, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the <code>DeleteDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">AWS Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference</a>.</p>
    func deleteDirectory(input: DeleteDirectoryInput, completion: @escaping (SdkResult<DeleteDirectoryOutputResponse, DeleteDirectoryOutputError>) -> Void)
    /// <p>Deletes the specified log subscription.</p>
    func deleteLogSubscription(input: DeleteLogSubscriptionInput, completion: @escaping (SdkResult<DeleteLogSubscriptionOutputResponse, DeleteLogSubscriptionOutputError>) -> Void)
    /// <p>Deletes a directory snapshot.</p>
    func deleteSnapshot(input: DeleteSnapshotInput, completion: @escaping (SdkResult<DeleteSnapshotOutputResponse, DeleteSnapshotOutputError>) -> Void)
    /// <p>Deletes an existing trust relationship between your AWS Managed Microsoft AD directory and an external domain.</p>
    func deleteTrust(input: DeleteTrustInput, completion: @escaping (SdkResult<DeleteTrustOutputResponse, DeleteTrustOutputError>) -> Void)
    /// <p>Deletes from the system the certificate that was registered for secure LDAP or client certificate authentication.</p>
    func deregisterCertificate(input: DeregisterCertificateInput, completion: @escaping (SdkResult<DeregisterCertificateOutputResponse, DeregisterCertificateOutputError>) -> Void)
    /// <p>Removes the specified directory as a publisher to the specified SNS topic.</p>
    func deregisterEventTopic(input: DeregisterEventTopicInput, completion: @escaping (SdkResult<DeregisterEventTopicOutputResponse, DeregisterEventTopicOutputError>) -> Void)
    /// <p>Displays information about the certificate registered for secure LDAP or client certificate authentication.</p>
    func describeCertificate(input: DescribeCertificateInput, completion: @escaping (SdkResult<DescribeCertificateOutputResponse, DescribeCertificateOutputError>) -> Void)
    /// <p>Obtains information about the conditional forwarders for this account.</p>
    ///          <p>If no input parameters are provided for RemoteDomainNames, this request describes all conditional forwarders for the specified directory ID.</p>
    func describeConditionalForwarders(input: DescribeConditionalForwardersInput, completion: @escaping (SdkResult<DescribeConditionalForwardersOutputResponse, DescribeConditionalForwardersOutputError>) -> Void)
    /// <p>Obtains information about the directories that belong to this account.</p>
    ///          <p>You can retrieve information about specific directories by passing the directory
    ///       identifiers in the <code>DirectoryIds</code> parameter. Otherwise, all directories that belong
    ///       to the current account are returned.</p>
    ///          <p>This operation supports pagination with the use of the <code>NextToken</code> request and
    ///       response parameters. If more results are available, the
    ///         <code>DescribeDirectoriesResult.NextToken</code> member contains a token that you pass in
    ///       the next call to <a>DescribeDirectories</a> to retrieve the next set of
    ///       items.</p>
    ///          <p>You can also specify a maximum number of return results with the <code>Limit</code>
    ///       parameter.</p>
    func describeDirectories(input: DescribeDirectoriesInput, completion: @escaping (SdkResult<DescribeDirectoriesOutputResponse, DescribeDirectoriesOutputError>) -> Void)
    /// <p>Provides information about any domain controllers in your directory.</p>
    func describeDomainControllers(input: DescribeDomainControllersInput, completion: @escaping (SdkResult<DescribeDomainControllersOutputResponse, DescribeDomainControllersOutputError>) -> Void)
    /// <p>Obtains information about which SNS topics receive status messages from the specified directory.</p>
    ///          <p>If no input parameters are provided, such as DirectoryId or TopicName, this request describes all of the associations in the account.</p>
    func describeEventTopics(input: DescribeEventTopicsInput, completion: @escaping (SdkResult<DescribeEventTopicsOutputResponse, DescribeEventTopicsOutputError>) -> Void)
    /// <p>Describes the status of LDAP security for the specified directory.</p>
    func describeLDAPSSettings(input: DescribeLDAPSSettingsInput, completion: @escaping (SdkResult<DescribeLDAPSSettingsOutputResponse, DescribeLDAPSSettingsOutputError>) -> Void)
    /// <p>Provides information about the Regions that are configured for multi-Region
    ///       replication.</p>
    func describeRegions(input: DescribeRegionsInput, completion: @escaping (SdkResult<DescribeRegionsOutputResponse, DescribeRegionsOutputError>) -> Void)
    /// <p>Returns the shared directories in your account. </p>
    func describeSharedDirectories(input: DescribeSharedDirectoriesInput, completion: @escaping (SdkResult<DescribeSharedDirectoriesOutputResponse, DescribeSharedDirectoriesOutputError>) -> Void)
    /// <p>Obtains information about the directory snapshots that belong to this account.</p>
    ///          <p>This operation supports pagination with the use of the <i>NextToken</i> request and
    ///          response parameters. If more results are available, the <i>DescribeSnapshots.NextToken</i>
    ///          member contains a token that you pass in the next call to <a>DescribeSnapshots</a> to
    ///          retrieve the next set of items.</p>
    ///          <p>You can also specify a maximum number of return results with the <i>Limit</i>
    ///          parameter.</p>
    func describeSnapshots(input: DescribeSnapshotsInput, completion: @escaping (SdkResult<DescribeSnapshotsOutputResponse, DescribeSnapshotsOutputError>) -> Void)
    /// <p>Obtains information about the trust relationships for this account.</p>
    ///          <p>If no input parameters are provided, such as DirectoryId or TrustIds, this request describes all the trust relationships belonging to the account.</p>
    func describeTrusts(input: DescribeTrustsInput, completion: @escaping (SdkResult<DescribeTrustsOutputResponse, DescribeTrustsOutputError>) -> Void)
    /// <p>Disables alternative client authentication methods for the specified directory. </p>
    func disableClientAuthentication(input: DisableClientAuthenticationInput, completion: @escaping (SdkResult<DisableClientAuthenticationOutputResponse, DisableClientAuthenticationOutputError>) -> Void)
    /// <p>Deactivates LDAP secure calls for the specified directory.</p>
    func disableLDAPS(input: DisableLDAPSInput, completion: @escaping (SdkResult<DisableLDAPSOutputResponse, DisableLDAPSOutputError>) -> Void)
    /// <p>Disables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.</p>
    func disableRadius(input: DisableRadiusInput, completion: @escaping (SdkResult<DisableRadiusOutputResponse, DisableRadiusOutputError>) -> Void)
    /// <p>Disables single-sign on for a directory.</p>
    func disableSso(input: DisableSsoInput, completion: @escaping (SdkResult<DisableSsoOutputResponse, DisableSsoOutputError>) -> Void)
    /// <p>Enables alternative client authentication methods for the specified directory.</p>
    func enableClientAuthentication(input: EnableClientAuthenticationInput, completion: @escaping (SdkResult<EnableClientAuthenticationOutputResponse, EnableClientAuthenticationOutputError>) -> Void)
    /// <p>Activates the switch for the specific directory to always use LDAP secure calls.</p>
    func enableLDAPS(input: EnableLDAPSInput, completion: @escaping (SdkResult<EnableLDAPSOutputResponse, EnableLDAPSOutputError>) -> Void)
    /// <p>Enables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.</p>
    func enableRadius(input: EnableRadiusInput, completion: @escaping (SdkResult<EnableRadiusOutputResponse, EnableRadiusOutputError>) -> Void)
    /// <p>Enables single sign-on for a directory. Single sign-on allows users in your directory to access certain AWS services from a computer joined to the directory without having to enter their credentials separately.</p>
    func enableSso(input: EnableSsoInput, completion: @escaping (SdkResult<EnableSsoOutputResponse, EnableSsoOutputError>) -> Void)
    /// <p>Obtains directory limit information for the current Region.</p>
    func getDirectoryLimits(input: GetDirectoryLimitsInput, completion: @escaping (SdkResult<GetDirectoryLimitsOutputResponse, GetDirectoryLimitsOutputError>) -> Void)
    /// <p>Obtains the manual snapshot limits for a directory.</p>
    func getSnapshotLimits(input: GetSnapshotLimitsInput, completion: @escaping (SdkResult<GetSnapshotLimitsOutputResponse, GetSnapshotLimitsOutputError>) -> Void)
    /// <p>For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.</p>
    func listCertificates(input: ListCertificatesInput, completion: @escaping (SdkResult<ListCertificatesOutputResponse, ListCertificatesOutputError>) -> Void)
    /// <p>Lists the address blocks that you have added to a directory.</p>
    func listIpRoutes(input: ListIpRoutesInput, completion: @escaping (SdkResult<ListIpRoutesOutputResponse, ListIpRoutesOutputError>) -> Void)
    /// <p>Lists the active log subscriptions for the AWS account.</p>
    func listLogSubscriptions(input: ListLogSubscriptionsInput, completion: @escaping (SdkResult<ListLogSubscriptionsOutputResponse, ListLogSubscriptionsOutputError>) -> Void)
    /// <p>Lists all schema extensions applied to a Microsoft AD Directory.</p>
    func listSchemaExtensions(input: ListSchemaExtensionsInput, completion: @escaping (SdkResult<ListSchemaExtensionsOutputResponse, ListSchemaExtensionsOutputError>) -> Void)
    /// <p>Lists all tags on a directory.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Registers a certificate for a secure LDAP or client certificate authentication.</p>
    func registerCertificate(input: RegisterCertificateInput, completion: @escaping (SdkResult<RegisterCertificateOutputResponse, RegisterCertificateOutputError>) -> Void)
    /// <p>Associates a directory with an SNS topic. This establishes the directory as a publisher to the specified SNS topic. You can then receive email or text (SMS) messages when the status of your directory changes. You get notified if your directory goes from an Active status to an Impaired or Inoperable status. You also receive a notification when the directory returns to an Active status.</p>
    func registerEventTopic(input: RegisterEventTopicInput, completion: @escaping (SdkResult<RegisterEventTopicOutputResponse, RegisterEventTopicOutputError>) -> Void)
    /// <p>Rejects a directory sharing request that was sent from the directory owner account.</p>
    func rejectSharedDirectory(input: RejectSharedDirectoryInput, completion: @escaping (SdkResult<RejectSharedDirectoryOutputResponse, RejectSharedDirectoryOutputError>) -> Void)
    /// <p>Removes IP address blocks from a directory.</p>
    func removeIpRoutes(input: RemoveIpRoutesInput, completion: @escaping (SdkResult<RemoveIpRoutesOutputResponse, RemoveIpRoutesOutputError>) -> Void)
    /// <p>Stops all replication and removes the domain controllers from the specified Region. You
    ///       cannot remove the primary Region with this operation. Instead, use the
    ///         <code>DeleteDirectory</code> API.</p>
    func removeRegion(input: RemoveRegionInput, completion: @escaping (SdkResult<RemoveRegionOutputResponse, RemoveRegionOutputError>) -> Void)
    /// <p>Removes tags from a directory.</p>
    func removeTagsFromResource(input: RemoveTagsFromResourceInput, completion: @escaping (SdkResult<RemoveTagsFromResourceOutputResponse, RemoveTagsFromResourceOutputError>) -> Void)
    /// <p>Resets the password for any user in your AWS Managed Microsoft AD or Simple AD
    ///       directory.</p>
    ///          <p>You can reset the password for any user in your directory with the following
    ///       exceptions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For Simple AD, you cannot reset the password for any user that is a member of either
    ///           the <b>Domain Admins</b> or <b>Enterprise
    ///             Admins</b> group except for the administrator user.</p>
    ///             </li>
    ///             <li>
    ///                <p>For AWS Managed Microsoft AD, you can only reset the password for a user that is in an
    ///           OU based off of the NetBIOS name that you typed when you created your directory. For
    ///           example, you cannot reset the password for a user in the <b>AWS
    ///             Reserved</b> OU. For more information about the OU structure for an AWS Managed
    ///           Microsoft AD directory, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ms_ad_getting_started_what_gets_created.html">What Gets Created</a> in the <i>AWS Directory Service Administration
    ///             Guide</i>.</p>
    ///             </li>
    ///          </ul>
    func resetUserPassword(input: ResetUserPasswordInput, completion: @escaping (SdkResult<ResetUserPasswordOutputResponse, ResetUserPasswordOutputError>) -> Void)
    /// <p>Restores a directory using an existing directory snapshot.</p>
    ///          <p>When you restore a directory from a snapshot, any changes made to the directory after the snapshot date are overwritten.</p>
    ///          <p>This action returns as soon as the restore operation is initiated. You can monitor the
    ///          progress of the restore operation by calling the <a>DescribeDirectories</a> operation with
    ///          the directory identifier. When the <b>DirectoryDescription.Stage</b> value changes to
    ///             <code>Active</code>, the restore operation is complete.</p>
    func restoreFromSnapshot(input: RestoreFromSnapshotInput, completion: @escaping (SdkResult<RestoreFromSnapshotOutputResponse, RestoreFromSnapshotOutputError>) -> Void)
    /// <p>Shares a specified directory (<code>DirectoryId</code>) in your AWS account (directory
    ///       owner) with another AWS account (directory consumer). With this operation you can use your
    ///       directory from any AWS account and from any Amazon VPC within an AWS Region.</p>
    ///          <p>When you share your AWS Managed Microsoft AD directory, AWS Directory Service creates a
    ///       shared directory in the directory consumer account. This shared directory contains the
    ///       metadata to provide access to the directory within the directory owner account. The shared
    ///       directory is visible in all VPCs in the directory consumer account.</p>
    ///          <p>The <code>ShareMethod</code> parameter determines whether the specified directory can be
    ///       shared between AWS accounts inside the same AWS organization (<code>ORGANIZATIONS</code>). It
    ///       also determines whether you can share the directory with any other AWS account either inside
    ///       or outside of the organization (<code>HANDSHAKE</code>).</p>
    ///          <p>The <code>ShareNotes</code> parameter is only used when <code>HANDSHAKE</code> is called,
    ///       which sends a directory sharing request to the directory consumer. </p>
    func shareDirectory(input: ShareDirectoryInput, completion: @escaping (SdkResult<ShareDirectoryOutputResponse, ShareDirectoryOutputError>) -> Void)
    /// <p>Applies a schema extension to a Microsoft AD directory.</p>
    func startSchemaExtension(input: StartSchemaExtensionInput, completion: @escaping (SdkResult<StartSchemaExtensionOutputResponse, StartSchemaExtensionOutputError>) -> Void)
    /// <p>Stops the directory sharing between the directory owner and consumer accounts. </p>
    func unshareDirectory(input: UnshareDirectoryInput, completion: @escaping (SdkResult<UnshareDirectoryOutputResponse, UnshareDirectoryOutputError>) -> Void)
    /// <p>Updates a conditional forwarder that has been set up for your AWS directory.</p>
    func updateConditionalForwarder(input: UpdateConditionalForwarderInput, completion: @escaping (SdkResult<UpdateConditionalForwarderOutputResponse, UpdateConditionalForwarderOutputError>) -> Void)
    /// <p>Adds or removes domain controllers to or from the directory. Based on the difference between current value and new value (provided through this API call), domain controllers will be added or removed. It may take up to 45 minutes for any new domain controllers to become fully active once the requested number of domain controllers is updated. During this time, you cannot make another update request.</p>
    func updateNumberOfDomainControllers(input: UpdateNumberOfDomainControllersInput, completion: @escaping (SdkResult<UpdateNumberOfDomainControllersOutputResponse, UpdateNumberOfDomainControllersOutputError>) -> Void)
    /// <p>Updates the Remote Authentication Dial In User Service (RADIUS) server information for an AD Connector or Microsoft AD directory.</p>
    func updateRadius(input: UpdateRadiusInput, completion: @escaping (SdkResult<UpdateRadiusOutputResponse, UpdateRadiusOutputError>) -> Void)
    /// <p>Updates the trust that has been set up between your AWS Managed Microsoft AD directory and an on-premises Active Directory.</p>
    func updateTrust(input: UpdateTrustInput, completion: @escaping (SdkResult<UpdateTrustOutputResponse, UpdateTrustOutputError>) -> Void)
    /// <p>AWS Directory Service for Microsoft Active Directory allows you to configure and verify trust relationships.</p>
    ///          <p>This action verifies a trust relationship between your AWS Managed Microsoft AD directory and an external domain.</p>
    func verifyTrust(input: VerifyTrustInput, completion: @escaping (SdkResult<VerifyTrustOutputResponse, VerifyTrustOutputError>) -> Void)
}
