// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListActivatedRulesInRuleGroupOutputBody: Equatable {
    public let nextMarker: String?
    public let activatedRules: [ActivatedRule]?
}

extension ListActivatedRulesInRuleGroupOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activatedRules = "ActivatedRules"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let activatedRulesContainer = try containerValues.decodeIfPresent([ActivatedRule].self, forKey: .activatedRules)
        var activatedRulesDecoded0:[ActivatedRule]? = nil
        if let activatedRulesContainer = activatedRulesContainer {
            activatedRulesDecoded0 = [ActivatedRule]()
            for structure0 in activatedRulesContainer {
                activatedRulesDecoded0?.append(structure0)
            }
        }
        activatedRules = activatedRulesDecoded0
    }
}
