// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegexMatchSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case regexMatchSetId = "RegexMatchSetId"
        case regexMatchTuples = "RegexMatchTuples"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexMatchSetId = regexMatchSetId {
            try encodeContainer.encode(regexMatchSetId, forKey: .regexMatchSetId)
        }
        if let regexMatchTuples = regexMatchTuples {
            var regexMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regexMatchTuples)
            for regexmatchtuples0 in regexMatchTuples {
                try regexMatchTuplesContainer.encode(regexmatchtuples0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexMatchSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regexMatchSetId)
        regexMatchSetId = regexMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let regexMatchTuplesContainer = try containerValues.decodeIfPresent([RegexMatchTuple].self, forKey: .regexMatchTuples)
        var regexMatchTuplesDecoded0:[RegexMatchTuple]? = nil
        if let regexMatchTuplesContainer = regexMatchTuplesContainer {
            regexMatchTuplesDecoded0 = [RegexMatchTuple]()
            for structure0 in regexMatchTuplesContainer {
                regexMatchTuplesDecoded0?.append(structure0)
            }
        }
        regexMatchTuples = regexMatchTuplesDecoded0
    }
}
