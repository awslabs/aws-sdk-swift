// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRegexPatternSetsOutputBody: Equatable {
    public let nextMarker: String?
    public let regexPatternSets: [RegexPatternSetSummary]?
}

extension ListRegexPatternSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case regexPatternSets = "RegexPatternSets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let regexPatternSetsContainer = try containerValues.decodeIfPresent([RegexPatternSetSummary].self, forKey: .regexPatternSets)
        var regexPatternSetsDecoded0:[RegexPatternSetSummary]? = nil
        if let regexPatternSetsContainer = regexPatternSetsContainer {
            regexPatternSetsDecoded0 = [RegexPatternSetSummary]()
            for structure0 in regexPatternSetsContainer {
                regexPatternSetsDecoded0?.append(structure0)
            }
        }
        regexPatternSets = regexPatternSetsDecoded0
    }
}
