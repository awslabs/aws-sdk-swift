// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateGeoMatchSetInput: Equatable {
    /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
    public let changeToken: String?
    /// <p>The <code>GeoMatchSetId</code> of the <a>GeoMatchSet</a> that you want to update. <code>GeoMatchSetId</code> is returned by <a>CreateGeoMatchSet</a> and by
    /// 			<a>ListGeoMatchSets</a>.</p>
    public let geoMatchSetId: String?
    /// <p>An array of <code>GeoMatchSetUpdate</code> objects that you want to insert into or delete from an <a>GeoMatchSet</a>.
    /// 			For more information, see the applicable data types:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <a>GeoMatchSetUpdate</a>: Contains <code>Action</code> and <code>GeoMatchConstraint</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>GeoMatchConstraint</a>: Contains <code>Type</code> and <code>Value</code>
    ///                </p>
    /// 			            <p>You can have only one <code>Type</code> and <code>Value</code> per <code>GeoMatchConstraint</code>. To add multiple countries, include multiple <code>GeoMatchSetUpdate</code> objects in your request.</p>
    ///             </li>
    ///          </ul>
    public let updates: [GeoMatchSetUpdate]?

    public init (
        changeToken: String? = nil,
        geoMatchSetId: String? = nil,
        updates: [GeoMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSetId = geoMatchSetId
        self.updates = updates
    }
}
