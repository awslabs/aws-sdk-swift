// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ByteMatchTuple: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fieldToMatch = "FieldToMatch"
        case positionalConstraint = "PositionalConstraint"
        case targetString = "TargetString"
        case textTransformation = "TextTransformation"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let positionalConstraint = positionalConstraint {
            try encodeContainer.encode(positionalConstraint.rawValue, forKey: .positionalConstraint)
        }
        if let targetString = targetString {
            try encodeContainer.encode(targetString.base64EncodedString(), forKey: .targetString)
        }
        if let textTransformation = textTransformation {
            try encodeContainer.encode(textTransformation.rawValue, forKey: .textTransformation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let targetStringDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .targetString)
        targetString = targetStringDecoded
        let textTransformationDecoded = try containerValues.decodeIfPresent(TextTransformation.self, forKey: .textTransformation)
        textTransformation = textTransformationDecoded
        let positionalConstraintDecoded = try containerValues.decodeIfPresent(PositionalConstraint.self, forKey: .positionalConstraint)
        positionalConstraint = positionalConstraintDecoded
    }
}
