// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension DeleteXssMatchSetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteXssMatchSetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidAccountException" : self = .wAFInvalidAccountException(try WAFInvalidAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonEmptyEntityException" : self = .wAFNonEmptyEntityException(try WAFNonEmptyEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFReferencedItemException" : self = .wAFReferencedItemException(try WAFReferencedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFStaleDataException" : self = .wAFStaleDataException(try WAFStaleDataException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
