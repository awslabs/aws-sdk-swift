// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateRateBasedRuleInput: Equatable {
    /// <p>The <code>ChangeToken</code> that you used to submit the
    ///             <code>CreateRateBasedRule</code> request. You can also use this value to query the
    ///          status of the request. For more information, see <a>GetChangeTokenStatus</a>.</p>
    public let changeToken: String?
    /// <p>A friendly name or description for the metrics for this <code>RateBasedRule</code>.
    ///           The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
    ///           whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the
    ///             <code>RateBasedRule</code>.</p>
    public let metricName: String?
    /// <p>A friendly name or description of the <a>RateBasedRule</a>. You can't
    ///          change the name of a <code>RateBasedRule</code> after you create it.</p>
    public let name: String?
    /// <p>The field that AWS WAF uses to determine if requests are likely arriving from a single
    ///          source and thus subject to rate monitoring. The only valid value for <code>RateKey</code>
    ///          is <code>IP</code>. <code>IP</code> indicates that requests that arrive from the same IP
    ///          address are subject to the <code>RateLimit</code> that is specified in
    ///          the <code>RateBasedRule</code>.</p>
    public let rateKey: RateKey?
    /// <p>The maximum number of requests, which have an identical value in the field that is
    ///          specified by <code>RateKey</code>, allowed in a five-minute period. If the number of
    ///          requests exceeds the <code>RateLimit</code> and the other predicates specified in the rule
    ///          are also met, AWS WAF triggers the action that is specified for this rule.</p>
    public let rateLimit: Int
    /// <p></p>
    public let tags: [Tag]?

    public init (
        changeToken: String? = nil,
        metricName: String? = nil,
        name: String? = nil,
        rateKey: RateKey? = nil,
        rateLimit: Int = 0,
        tags: [Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.rateKey = rateKey
        self.rateLimit = rateLimit
        self.tags = tags
    }
}
