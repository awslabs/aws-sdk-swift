// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSqlInjectionMatchSetsOutputBody: Equatable {
    public let nextMarker: String?
    public let sqlInjectionMatchSets: [SqlInjectionMatchSetSummary]?
}

extension ListSqlInjectionMatchSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case sqlInjectionMatchSets = "SqlInjectionMatchSets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let sqlInjectionMatchSetsContainer = try containerValues.decodeIfPresent([SqlInjectionMatchSetSummary].self, forKey: .sqlInjectionMatchSets)
        var sqlInjectionMatchSetsDecoded0:[SqlInjectionMatchSetSummary]? = nil
        if let sqlInjectionMatchSetsContainer = sqlInjectionMatchSetsContainer {
            sqlInjectionMatchSetsDecoded0 = [SqlInjectionMatchSetSummary]()
            for structure0 in sqlInjectionMatchSetsContainer {
                sqlInjectionMatchSetsDecoded0?.append(structure0)
            }
        }
        sqlInjectionMatchSets = sqlInjectionMatchSetsDecoded0
    }
}
