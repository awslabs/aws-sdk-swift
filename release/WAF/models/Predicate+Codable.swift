// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Predicate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataId = "DataId"
        case negated = "Negated"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataId = dataId {
            try encodeContainer.encode(dataId, forKey: .dataId)
        }
        if let negated = negated {
            try encodeContainer.encode(negated, forKey: .negated)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let negatedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .negated)
        negated = negatedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PredicateType.self, forKey: .type)
        type = typeDecoded
        let dataIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataId)
        dataId = dataIdDecoded
    }
}
