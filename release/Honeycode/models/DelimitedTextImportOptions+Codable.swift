// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DelimitedTextImportOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataCharacterEncoding
        case delimiter
        case hasHeaderRow
        case ignoreEmptyRows
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataCharacterEncoding = dataCharacterEncoding {
            try encodeContainer.encode(dataCharacterEncoding.rawValue, forKey: .dataCharacterEncoding)
        }
        if let delimiter = delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if hasHeaderRow != false {
            try encodeContainer.encode(hasHeaderRow, forKey: .hasHeaderRow)
        }
        if ignoreEmptyRows != false {
            try encodeContainer.encode(ignoreEmptyRows, forKey: .ignoreEmptyRows)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delimiterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let hasHeaderRowDecoded = try containerValues.decode(Bool.self, forKey: .hasHeaderRow)
        hasHeaderRow = hasHeaderRowDecoded
        let ignoreEmptyRowsDecoded = try containerValues.decode(Bool.self, forKey: .ignoreEmptyRows)
        ignoreEmptyRows = ignoreEmptyRowsDecoded
        let dataCharacterEncodingDecoded = try containerValues.decodeIfPresent(ImportDataCharacterEncoding.self, forKey: .dataCharacterEncoding)
        dataCharacterEncoding = dataCharacterEncodingDecoded
    }
}
