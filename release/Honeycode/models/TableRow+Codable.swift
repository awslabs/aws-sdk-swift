// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TableRow: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cells
        case rowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cells = cells {
            var cellsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cells)
            for cells0 in cells {
                try cellsContainer.encode(cells0)
            }
        }
        if let rowId = rowId {
            try encodeContainer.encode(rowId, forKey: .rowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rowId)
        rowId = rowIdDecoded
        let cellsContainer = try containerValues.decodeIfPresent([Cell].self, forKey: .cells)
        var cellsDecoded0:[Cell]? = nil
        if let cellsContainer = cellsContainer {
            cellsDecoded0 = [Cell]()
            for structure0 in cellsContainer {
                cellsDecoded0?.append(structure0)
            }
        }
        cells = cellsDecoded0
    }
}
