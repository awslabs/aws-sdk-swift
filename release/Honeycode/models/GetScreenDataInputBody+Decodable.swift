// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetScreenDataInputBody: Equatable {
    public let workbookId: String?
    public let appId: String?
    public let screenId: String?
    public let variables: [String:VariableValue]?
    public let maxResults: Int?
    public let nextToken: String?
}

extension GetScreenDataInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appId
        case maxResults
        case nextToken
        case screenId
        case variables
        case workbookId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workbookIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workbookId)
        workbookId = workbookIdDecoded
        let appIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appId)
        appId = appIdDecoded
        let screenIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .screenId)
        screenId = screenIdDecoded
        let variablesContainer = try containerValues.decodeIfPresent([String:VariableValue].self, forKey: .variables)
        var variablesDecoded0: [String:VariableValue]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [String:VariableValue]()
            for (key0, variablevalue0) in variablesContainer {
                variablesDecoded0?[key0] = variablevalue0
            }
        }
        variables = variablesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
