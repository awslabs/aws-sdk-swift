// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TableColumn: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case format
        case tableColumnId
        case tableColumnName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let tableColumnId = tableColumnId {
            try encodeContainer.encode(tableColumnId, forKey: .tableColumnId)
        }
        if let tableColumnName = tableColumnName {
            try encodeContainer.encode(tableColumnName, forKey: .tableColumnName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableColumnIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableColumnId)
        tableColumnId = tableColumnIdDecoded
        let tableColumnNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableColumnName)
        tableColumnName = tableColumnNameDecoded
        let formatDecoded = try containerValues.decodeIfPresent(Format.self, forKey: .format)
        format = formatDecoded
    }
}
