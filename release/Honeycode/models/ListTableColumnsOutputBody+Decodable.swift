// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTableColumnsOutputBody: Equatable {
    public let tableColumns: [TableColumn]?
    public let nextToken: String?
    public let workbookCursor: Int
}

extension ListTableColumnsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case tableColumns
        case workbookCursor
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableColumnsContainer = try containerValues.decodeIfPresent([TableColumn].self, forKey: .tableColumns)
        var tableColumnsDecoded0:[TableColumn]? = nil
        if let tableColumnsContainer = tableColumnsContainer {
            tableColumnsDecoded0 = [TableColumn]()
            for structure0 in tableColumnsContainer {
                tableColumnsDecoded0?.append(structure0)
            }
        }
        tableColumns = tableColumnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workbookCursorDecoded = try containerValues.decode(Int.self, forKey: .workbookCursor)
        workbookCursor = workbookCursorDecoded
    }
}
