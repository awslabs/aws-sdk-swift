// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpsertRowsResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case rowIds
        case upsertAction
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rowIds = rowIds {
            var rowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rowIds)
            for rowidlist0 in rowIds {
                try rowIdsContainer.encode(rowidlist0)
            }
        }
        if let upsertAction = upsertAction {
            try encodeContainer.encode(upsertAction.rawValue, forKey: .upsertAction)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rowIds)
        var rowIdsDecoded0:[String]? = nil
        if let rowIdsContainer = rowIdsContainer {
            rowIdsDecoded0 = [String]()
            for string0 in rowIdsContainer {
                rowIdsDecoded0?.append(string0)
            }
        }
        rowIds = rowIdsDecoded0
        let upsertActionDecoded = try containerValues.decodeIfPresent(UpsertAction.self, forKey: .upsertAction)
        upsertAction = upsertActionDecoded
    }
}
