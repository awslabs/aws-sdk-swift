// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpsertRowData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchItemId
        case cellsToUpdate
        case filter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchItemId = batchItemId {
            try encodeContainer.encode(batchItemId, forKey: .batchItemId)
        }
        if let cellsToUpdate = cellsToUpdate {
            var cellsToUpdateContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .cellsToUpdate)
            for (dictKey0, rowdatainput0) in cellsToUpdate {
                try cellsToUpdateContainer.encode(rowdatainput0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchItemIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .batchItemId)
        batchItemId = batchItemIdDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Filter.self, forKey: .filter)
        filter = filterDecoded
        let cellsToUpdateContainer = try containerValues.decodeIfPresent([String:CellInput].self, forKey: .cellsToUpdate)
        var cellsToUpdateDecoded0: [String:CellInput]? = nil
        if let cellsToUpdateContainer = cellsToUpdateContainer {
            cellsToUpdateDecoded0 = [String:CellInput]()
            for (key0, cellinput0) in cellsToUpdateContainer {
                cellsToUpdateDecoded0?[key0] = cellinput0
            }
        }
        cellsToUpdate = cellsToUpdateDecoded0
    }
}
