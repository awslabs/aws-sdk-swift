// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTableRowsInputBody: Equatable {
    public let rowIds: [String]?
    public let maxResults: Int?
    public let nextToken: String?
}

extension ListTableRowsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults
        case nextToken
        case rowIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .rowIds)
        var rowIdsDecoded0:[String]? = nil
        if let rowIdsContainer = rowIdsContainer {
            rowIdsDecoded0 = [String]()
            for string0 in rowIdsContainer {
                rowIdsDecoded0?.append(string0)
            }
        }
        rowIds = rowIdsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
