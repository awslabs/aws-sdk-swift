// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DestinationOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case columnMap
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnMap = columnMap {
            var columnMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .columnMap)
            for (dictKey0, importcolumnmap0) in columnMap {
                try columnMapContainer.encode(importcolumnmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnMapContainer = try containerValues.decodeIfPresent([String:SourceDataColumnProperties].self, forKey: .columnMap)
        var columnMapDecoded0: [String:SourceDataColumnProperties]? = nil
        if let columnMapContainer = columnMapContainer {
            columnMapDecoded0 = [String:SourceDataColumnProperties]()
            for (key0, sourcedatacolumnproperties0) in columnMapContainer {
                columnMapDecoded0?[key0] = sourcedatacolumnproperties0
            }
        }
        columnMap = columnMapDecoded0
    }
}
