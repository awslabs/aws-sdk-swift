// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QueryTableRowsOutputBody: Equatable {
    public let columnIds: [String]?
    public let rows: [TableRow]?
    public let nextToken: String?
    public let workbookCursor: Int
}

extension QueryTableRowsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case columnIds
        case nextToken
        case rows
        case workbookCursor
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .columnIds)
        var columnIdsDecoded0:[String]? = nil
        if let columnIdsContainer = columnIdsContainer {
            columnIdsDecoded0 = [String]()
            for string0 in columnIdsContainer {
                columnIdsDecoded0?.append(string0)
            }
        }
        columnIds = columnIdsDecoded0
        let rowsContainer = try containerValues.decodeIfPresent([TableRow].self, forKey: .rows)
        var rowsDecoded0:[TableRow]? = nil
        if let rowsContainer = rowsContainer {
            rowsDecoded0 = [TableRow]()
            for structure0 in rowsContainer {
                rowsDecoded0?.append(structure0)
            }
        }
        rows = rowsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workbookCursorDecoded = try containerValues.decode(Int.self, forKey: .workbookCursor)
        workbookCursor = workbookCursorDecoded
    }
}
