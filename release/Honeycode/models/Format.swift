// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Format {
    case accounting
    case auto
    case contact
    case currency
    case date
    case datetime
    case number
    case percentage
    case rowlink
    case text
    case time
    case sdkUnknown(String)
}

extension Format : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Format] {
        return [
            .accounting,
            .auto,
            .contact,
            .currency,
            .date,
            .datetime,
            .number,
            .percentage,
            .rowlink,
            .text,
            .time,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accounting: return "ACCOUNTING"
        case .auto: return "AUTO"
        case .contact: return "CONTACT"
        case .currency: return "CURRENCY"
        case .date: return "DATE"
        case .datetime: return "DATE_TIME"
        case .number: return "NUMBER"
        case .percentage: return "PERCENTAGE"
        case .rowlink: return "ROWLINK"
        case .text: return "TEXT"
        case .time: return "TIME"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Format(rawValue: rawValue) ?? Format.sdkUnknown(rawValue)
    }
}
