// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes all of the AWS IoT 1-Click device-related API operations for the service.
///  Also provides sample requests, responses, and errors for the supported web services
///  protocols.</p>
public protocol Iot1ClickDevicesServiceClientProtocol {
    /// <p>Adds device(s) to your account (i.e., claim one or more devices) if and only if you
    ///  received a claim code with the device(s).</p>
    func claimDevicesByClaimCode(input: ClaimDevicesByClaimCodeInput, completion: @escaping (SdkResult<ClaimDevicesByClaimCodeOutputResponse, ClaimDevicesByClaimCodeOutputError>) -> Void)
    /// <p>Given a device ID, returns a DescribeDeviceResponse object describing the
    ///  details of the device.</p>
    func describeDevice(input: DescribeDeviceInput, completion: @escaping (SdkResult<DescribeDeviceOutputResponse, DescribeDeviceOutputError>) -> Void)
    /// <p>Given a device ID, finalizes the claim request for the associated device.</p><note>
    ///  <p>Claiming a device consists of initiating a claim, then publishing a device event,
    ///  and finalizing the claim. For a device of type button, a device event can
    ///  be published by simply clicking the device.</p>
    ///  </note>
    func finalizeDeviceClaim(input: FinalizeDeviceClaimInput, completion: @escaping (SdkResult<FinalizeDeviceClaimOutputResponse, FinalizeDeviceClaimOutputError>) -> Void)
    /// <p>Given a device ID, returns the invokable methods associated with the device.</p>
    func getDeviceMethods(input: GetDeviceMethodsInput, completion: @escaping (SdkResult<GetDeviceMethodsOutputResponse, GetDeviceMethodsOutputError>) -> Void)
    /// <p>Given a device ID, initiates a claim request for the associated device.</p><note>
    ///  <p>Claiming a device consists of initiating a claim, then publishing a device event,
    ///  and finalizing the claim. For a device of type button, a device event can
    ///  be published by simply clicking the device.</p>
    ///  </note>
    func initiateDeviceClaim(input: InitiateDeviceClaimInput, completion: @escaping (SdkResult<InitiateDeviceClaimOutputResponse, InitiateDeviceClaimOutputError>) -> Void)
    /// <p>Given a device ID, issues a request to invoke a named device method (with possible
    ///  parameters). See the "Example POST" code snippet below.</p>
    func invokeDeviceMethod(input: InvokeDeviceMethodInput, completion: @escaping (SdkResult<InvokeDeviceMethodOutputResponse, InvokeDeviceMethodOutputError>) -> Void)
    /// <p>Using a device ID, returns a DeviceEventsResponse object containing an
    ///  array of events for the device.</p>
    func listDeviceEvents(input: ListDeviceEventsInput, completion: @escaping (SdkResult<ListDeviceEventsOutputResponse, ListDeviceEventsOutputError>) -> Void)
    /// <p>Lists the 1-Click compatible devices associated with your AWS account.</p>
    func listDevices(input: ListDevicesInput, completion: @escaping (SdkResult<ListDevicesOutputResponse, ListDevicesOutputError>) -> Void)
    /// <p>Lists the tags associated with the specified resource ARN.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Adds or updates the tags associated with the resource ARN. See <a href="https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits">AWS IoT 1-Click Service Limits</a> for the maximum number of tags allowed per
    ///  resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Disassociates a device from your AWS account using its device ID.</p>
    func unclaimDevice(input: UnclaimDeviceInput, completion: @escaping (SdkResult<UnclaimDeviceOutputResponse, UnclaimDeviceOutputError>) -> Void)
    /// <p>Using tag keys, deletes the tags (key/value pairs) associated with the specified
    ///  resource ARN.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Using a Boolean value (true or false), this operation
    ///  enables or disables the device given a device ID.</p>
    func updateDeviceState(input: UpdateDeviceStateInput, completion: @escaping (SdkResult<UpdateDeviceStateOutputResponse, UpdateDeviceStateOutputError>) -> Void)
}
