// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeviceEventsOutputBody: Equatable {
    public let events: [DeviceEvent]?
    public let nextToken: String?
}

extension ListDeviceEventsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events = "events"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([DeviceEvent].self, forKey: .events)
        var eventsDecoded0:[DeviceEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [DeviceEvent]()
            for structure0 in eventsContainer {
                eventsDecoded0?.append(structure0)
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
