// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceMethod: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceType = "deviceType"
        case methodName = "methodName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceType = deviceType {
            try encodeContainer.encode(deviceType, forKey: .deviceType)
        }
        if let methodName = methodName {
            try encodeContainer.encode(methodName, forKey: .methodName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
        let methodNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .methodName)
        methodName = methodNameDecoded
    }
}
