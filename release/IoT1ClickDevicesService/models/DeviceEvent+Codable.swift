// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case device = "device"
        case stdEvent = "stdEvent"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let stdEvent = stdEvent {
            try encodeContainer.encode(stdEvent, forKey: .stdEvent)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(Device.self, forKey: .device)
        device = deviceDecoded
        let stdEventDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stdEvent)
        stdEvent = stdEventDecoded
    }
}
