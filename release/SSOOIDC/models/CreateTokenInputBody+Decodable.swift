// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTokenInputBody: Equatable {
    public let clientId: String?
    public let clientSecret: String?
    public let grantType: String?
    public let deviceCode: String?
    public let code: String?
    public let refreshToken: String?
    public let scope: [String]?
    public let redirectUri: String?
}

extension CreateTokenInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientId
        case clientSecret
        case code
        case deviceCode
        case grantType
        case redirectUri
        case refreshToken
        case scope
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let grantTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantType)
        grantType = grantTypeDecoded
        let deviceCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceCode)
        deviceCode = deviceCodeDecoded
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
        let scopeContainer = try containerValues.decodeIfPresent([String].self, forKey: .scope)
        var scopeDecoded0:[String]? = nil
        if let scopeContainer = scopeContainer {
            scopeDecoded0 = [String]()
            for string0 in scopeContainer {
                scopeDecoded0?.append(string0)
            }
        }
        scope = scopeDecoded0
        let redirectUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .redirectUri)
        redirectUri = redirectUriDecoded
    }
}
