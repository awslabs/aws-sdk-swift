// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterClientInputBody: Equatable {
    public let clientName: String?
    public let clientType: String?
    public let scopes: [String]?
}

extension RegisterClientInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientName
        case clientType
        case scopes
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let clientTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientType)
        clientType = clientTypeDecoded
        let scopesContainer = try containerValues.decodeIfPresent([String].self, forKey: .scopes)
        var scopesDecoded0:[String]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [String]()
            for string0 in scopesContainer {
                scopesDecoded0?.append(string0)
            }
        }
        scopes = scopesDecoded0
    }
}
