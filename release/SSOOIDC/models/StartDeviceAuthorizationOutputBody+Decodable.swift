// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartDeviceAuthorizationOutputBody: Equatable {
    public let deviceCode: String?
    public let userCode: String?
    public let verificationUri: String?
    public let verificationUriComplete: String?
    public let expiresIn: Int
    public let interval: Int
}

extension StartDeviceAuthorizationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deviceCode
        case expiresIn
        case interval
        case userCode
        case verificationUri
        case verificationUriComplete
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceCode)
        deviceCode = deviceCodeDecoded
        let userCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userCode)
        userCode = userCodeDecoded
        let verificationUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .verificationUri)
        verificationUri = verificationUriDecoded
        let verificationUriCompleteDecoded = try containerValues.decodeIfPresent(String.self, forKey: .verificationUriComplete)
        verificationUriComplete = verificationUriCompleteDecoded
        let expiresInDecoded = try containerValues.decode(Int.self, forKey: .expiresIn)
        expiresIn = expiresInDecoded
        let intervalDecoded = try containerValues.decode(Int.self, forKey: .interval)
        interval = intervalDecoded
    }
}
