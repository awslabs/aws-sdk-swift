// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterClientOutputBody: Equatable {
    public let clientId: String?
    public let clientSecret: String?
    public let clientIdIssuedAt: Int
    public let clientSecretExpiresAt: Int
    public let authorizationEndpoint: String?
    public let tokenEndpoint: String?
}

extension RegisterClientOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authorizationEndpoint
        case clientId
        case clientIdIssuedAt
        case clientSecret
        case clientSecretExpiresAt
        case tokenEndpoint
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let clientIdIssuedAtDecoded = try containerValues.decode(Int.self, forKey: .clientIdIssuedAt)
        clientIdIssuedAt = clientIdIssuedAtDecoded
        let clientSecretExpiresAtDecoded = try containerValues.decode(Int.self, forKey: .clientSecretExpiresAt)
        clientSecretExpiresAt = clientSecretExpiresAtDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
    }
}
