// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CanaryRunConfigInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeTracing = "ActiveTracing"
        case environmentVariables = "EnvironmentVariables"
        case memoryInMB = "MemoryInMB"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeTracing = activeTracing {
            try encodeContainer.encode(activeTracing, forKey: .activeTracing)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environmentVariables)
            for (dictKey0, environmentvariablesmap0) in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariablesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let memoryInMB = memoryInMB {
            try encodeContainer.encode(memoryInMB, forKey: .memoryInMB)
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let memoryInMBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .memoryInMB)
        memoryInMB = memoryInMBDecoded
        let activeTracingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .activeTracing)
        activeTracing = activeTracingDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [String:String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [String:String]()
            for (key0, environmentvariablevalue0) in environmentVariablesContainer {
                environmentVariablesDecoded0?[key0] = environmentvariablevalue0
            }
        }
        environmentVariables = environmentVariablesDecoded0
    }
}
