// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePermissionInputBody: Equatable {
    public let certificateAuthorityArn: String?
    public let principal: String?
    public let sourceAccount: String?
    public let actions: [ActionType]?
}

extension CreatePermissionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case principal = "Principal"
        case sourceAccount = "SourceAccount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let sourceAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceAccount)
        sourceAccount = sourceAccountDecoded
        let actionsContainer = try containerValues.decodeIfPresent([ActionType].self, forKey: .actions)
        var actionsDecoded0:[ActionType]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [ActionType]()
            for string0 in actionsContainer {
                actionsDecoded0?.append(string0)
            }
        }
        actions = actionsDecoded0
    }
}
