// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PolicyInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certPolicyId = "CertPolicyId"
        case policyQualifiers = "PolicyQualifiers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certPolicyId = certPolicyId {
            try encodeContainer.encode(certPolicyId, forKey: .certPolicyId)
        }
        if let policyQualifiers = policyQualifiers {
            var policyQualifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyQualifiers)
            for policyqualifierinfolist0 in policyQualifiers {
                try policyQualifiersContainer.encode(policyqualifierinfolist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certPolicyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certPolicyId)
        certPolicyId = certPolicyIdDecoded
        let policyQualifiersContainer = try containerValues.decodeIfPresent([PolicyQualifierInfo].self, forKey: .policyQualifiers)
        var policyQualifiersDecoded0:[PolicyQualifierInfo]? = nil
        if let policyQualifiersContainer = policyQualifiersContainer {
            policyQualifiersDecoded0 = [PolicyQualifierInfo]()
            for structure0 in policyQualifiersContainer {
                policyQualifiersDecoded0?.append(structure0)
            }
        }
        policyQualifiers = policyQualifiersDecoded0
    }
}
