// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains configuration information for your private certificate authority (CA). This
/// 			includes information about the class of public key algorithm and the key pair that your
/// 			private CA creates when it issues a certificate. It also includes the signature
/// 			algorithm that it uses when issuing certificates, and its X.500 distinguished name. You
/// 			must specify this information when you call the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a> action. </p>
public struct CertificateAuthorityConfiguration: Equatable {
    /// <p>Specifies information to be added to the extension section of the certificate signing
    /// 			request (CSR).</p>
    public let csrExtensions: CsrExtensions?
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA
    /// 			creates when it issues a certificate. When you create a subordinate CA, you must use a
    /// 			key algorithm supported by the parent CA.</p>
    public let keyAlgorithm: KeyAlgorithm?
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// 		       <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter
    /// 			used to sign certificates when they are issued.</p>
    public let signingAlgorithm: SigningAlgorithm?
    /// <p>Structure that contains X.500 distinguished name information for your private
    /// 			CA.</p>
    public let subject: ASN1Subject?

    public init (
        csrExtensions: CsrExtensions? = nil,
        keyAlgorithm: KeyAlgorithm? = nil,
        signingAlgorithm: SigningAlgorithm? = nil,
        subject: ASN1Subject? = nil
    )
    {
        self.csrExtensions = csrExtensions
        self.keyAlgorithm = keyAlgorithm
        self.signingAlgorithm = signingAlgorithm
        self.subject = subject
    }
}
