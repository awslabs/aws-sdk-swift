// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportCertificateAuthorityCertificateInput: Equatable {
    /// <p>The PEM-encoded certificate for a private CA. This may be a self-signed certificate in
    /// 			the case of a root CA, or it may be signed by another CA that you control.</p>
    public let certificate: Data?
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>. This must be of the form: </p>
    /// 		       <p>
    ///             <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
    ///             </code>
    ///          </p>
    public let certificateAuthorityArn: String?
    /// <p>A PEM-encoded file that contains all of your certificates, other than the certificate
    /// 			you're importing, chaining up to your root CA. Your ACM Private CA-hosted or on-premises root
    /// 			certificate is the last in the chain, and each certificate in the chain signs the one
    /// 			preceding. </p>
    /// 		       <p>This parameter must be supplied when you import a subordinate CA. When you import a
    /// 			root CA, there is no chain.</p>
    public let certificateChain: Data?

    public init (
        certificate: Data? = nil,
        certificateAuthorityArn: String? = nil,
        certificateChain: Data? = nil
    )
    {
        self.certificate = certificate
        self.certificateAuthorityArn = certificateAuthorityArn
        self.certificateChain = certificateChain
    }
}
