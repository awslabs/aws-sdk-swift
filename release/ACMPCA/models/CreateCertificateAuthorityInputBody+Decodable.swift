// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCertificateAuthorityInputBody: Equatable {
    public let certificateAuthorityConfiguration: CertificateAuthorityConfiguration?
    public let revocationConfiguration: RevocationConfiguration?
    public let certificateAuthorityType: CertificateAuthorityType?
    public let idempotencyToken: String?
    public let keyStorageSecurityStandard: KeyStorageSecurityStandard?
    public let tags: [Tag]?
}

extension CreateCertificateAuthorityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityConfiguration = "CertificateAuthorityConfiguration"
        case certificateAuthorityType = "CertificateAuthorityType"
        case idempotencyToken = "IdempotencyToken"
        case keyStorageSecurityStandard = "KeyStorageSecurityStandard"
        case revocationConfiguration = "RevocationConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityConfigurationDecoded = try containerValues.decodeIfPresent(CertificateAuthorityConfiguration.self, forKey: .certificateAuthorityConfiguration)
        certificateAuthorityConfiguration = certificateAuthorityConfigurationDecoded
        let revocationConfigurationDecoded = try containerValues.decodeIfPresent(RevocationConfiguration.self, forKey: .revocationConfiguration)
        revocationConfiguration = revocationConfigurationDecoded
        let certificateAuthorityTypeDecoded = try containerValues.decodeIfPresent(CertificateAuthorityType.self, forKey: .certificateAuthorityType)
        certificateAuthorityType = certificateAuthorityTypeDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let keyStorageSecurityStandardDecoded = try containerValues.decodeIfPresent(KeyStorageSecurityStandard.self, forKey: .keyStorageSecurityStandard)
        keyStorageSecurityStandard = keyStorageSecurityStandardDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
