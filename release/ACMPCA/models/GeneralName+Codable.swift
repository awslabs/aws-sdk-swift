// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GeneralName: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case directoryName = "DirectoryName"
        case dnsName = "DnsName"
        case ediPartyName = "EdiPartyName"
        case ipAddress = "IpAddress"
        case otherName = "OtherName"
        case registeredId = "RegisteredId"
        case rfc822Name = "Rfc822Name"
        case uniformResourceIdentifier = "UniformResourceIdentifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryName = directoryName {
            try encodeContainer.encode(directoryName, forKey: .directoryName)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let ediPartyName = ediPartyName {
            try encodeContainer.encode(ediPartyName, forKey: .ediPartyName)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let otherName = otherName {
            try encodeContainer.encode(otherName, forKey: .otherName)
        }
        if let registeredId = registeredId {
            try encodeContainer.encode(registeredId, forKey: .registeredId)
        }
        if let rfc822Name = rfc822Name {
            try encodeContainer.encode(rfc822Name, forKey: .rfc822Name)
        }
        if let uniformResourceIdentifier = uniformResourceIdentifier {
            try encodeContainer.encode(uniformResourceIdentifier, forKey: .uniformResourceIdentifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otherNameDecoded = try containerValues.decodeIfPresent(OtherName.self, forKey: .otherName)
        otherName = otherNameDecoded
        let rfc822NameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rfc822Name)
        rfc822Name = rfc822NameDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let directoryNameDecoded = try containerValues.decodeIfPresent(ASN1Subject.self, forKey: .directoryName)
        directoryName = directoryNameDecoded
        let ediPartyNameDecoded = try containerValues.decodeIfPresent(EdiPartyName.self, forKey: .ediPartyName)
        ediPartyName = ediPartyNameDecoded
        let uniformResourceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uniformResourceIdentifier)
        uniformResourceIdentifier = uniformResourceIdentifierDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let registeredIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registeredId)
        registeredId = registeredIdDecoded
    }
}
