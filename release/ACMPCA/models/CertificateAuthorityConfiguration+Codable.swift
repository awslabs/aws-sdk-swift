// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CertificateAuthorityConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case csrExtensions = "CsrExtensions"
        case keyAlgorithm = "KeyAlgorithm"
        case signingAlgorithm = "SigningAlgorithm"
        case subject = "Subject"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csrExtensions = csrExtensions {
            try encodeContainer.encode(csrExtensions, forKey: .csrExtensions)
        }
        if let keyAlgorithm = keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm.rawValue, forKey: .keyAlgorithm)
        }
        if let signingAlgorithm = signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(KeyAlgorithm.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(SigningAlgorithm.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(ASN1Subject.self, forKey: .subject)
        subject = subjectDecoded
        let csrExtensionsDecoded = try containerValues.decodeIfPresent(CsrExtensions.self, forKey: .csrExtensions)
        csrExtensions = csrExtensionsDecoded
    }
}
