// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IssueCertificateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiPassthrough = "ApiPassthrough"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case csr = "Csr"
        case idempotencyToken = "IdempotencyToken"
        case signingAlgorithm = "SigningAlgorithm"
        case templateArn = "TemplateArn"
        case validity = "Validity"
        case validityNotBefore = "ValidityNotBefore"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiPassthrough = apiPassthrough {
            try encodeContainer.encode(apiPassthrough, forKey: .apiPassthrough)
        }
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let csr = csr {
            try encodeContainer.encode(csr.base64EncodedString(), forKey: .csr)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let signingAlgorithm = signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
        if let templateArn = templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let validity = validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
        if let validityNotBefore = validityNotBefore {
            try encodeContainer.encode(validityNotBefore, forKey: .validityNotBefore)
        }
    }
}
