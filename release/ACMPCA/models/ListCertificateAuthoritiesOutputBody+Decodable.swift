// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificateAuthoritiesOutputBody: Equatable {
    public let certificateAuthorities: [CertificateAuthority]?
    public let nextToken: String?
}

extension ListCertificateAuthoritiesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorities = "CertificateAuthorities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthoritiesContainer = try containerValues.decodeIfPresent([CertificateAuthority].self, forKey: .certificateAuthorities)
        var certificateAuthoritiesDecoded0:[CertificateAuthority]? = nil
        if let certificateAuthoritiesContainer = certificateAuthoritiesContainer {
            certificateAuthoritiesDecoded0 = [CertificateAuthority]()
            for structure0 in certificateAuthoritiesContainer {
                certificateAuthoritiesDecoded0?.append(structure0)
            }
        }
        certificateAuthorities = certificateAuthoritiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
