// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateCertificateAuthorityInput: Equatable {
    /// <p>Name and bit size of the private key algorithm, the name of the signing algorithm, and
    /// 			X.500 certificate subject information.</p>
    public let certificateAuthorityConfiguration: CertificateAuthorityConfiguration?
    /// <p>The type of the certificate authority.</p>
    public let certificateAuthorityType: CertificateAuthorityType?
    /// <p>Custom string that can be used to distinguish between calls to the <b>CreateCertificateAuthority</b> action. Idempotency tokens for
    /// 				<b>CreateCertificateAuthority</b> time out after five
    /// 			minutes. Therefore, if you call <b>CreateCertificateAuthority</b> multiple times with the same idempotency
    /// 			token within five minutes, ACM Private CA recognizes that you are requesting only certificate
    /// 			authority and will issue only one. If you change the idempotency token for each call,
    /// 			PCA recognizes that you are requesting multiple certificate authorities.</p>
    public let idempotencyToken: String?
    /// <p>Specifies a
    /// 			cryptographic key management compliance standard used for handling CA keys.</p>
    /// 		       <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// 		       <p>Note: <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in Region
    /// 			ap-northeast-3. When creating a CA in the ap-northeast-3, you must provide
    /// 				<code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the argument for
    /// 				<code>KeyStorageSecurityStandard</code>. Failure to do this results in an
    /// 				<code>InvalidArgsException</code> with the message, "A certificate authority cannot
    /// 			be created in this region with the specified security standard."</p>
    public let keyStorageSecurityStandard: KeyStorageSecurityStandard?
    /// <p>Contains a Boolean value that you can use to enable a certification revocation list
    /// 			(CRL) for the CA, the name of the S3 bucket to which ACM Private CA will write the CRL, and an
    /// 			optional CNAME alias that you can use to hide the name of your bucket in the <b>CRL Distribution Points</b> extension of your CA certificate. For
    /// 			more information, see the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a> structure.
    /// 		</p>
    public let revocationConfiguration: RevocationConfiguration?
    /// <p>Key-value pairs that will be attached to the new private CA. You can associate up to
    /// 			50 tags with a private CA. For information using tags with IAM to manage permissions,
    /// 			see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM Tags</a>.</p>
    public let tags: [Tag]?

    public init (
        certificateAuthorityConfiguration: CertificateAuthorityConfiguration? = nil,
        certificateAuthorityType: CertificateAuthorityType? = nil,
        idempotencyToken: String? = nil,
        keyStorageSecurityStandard: KeyStorageSecurityStandard? = nil,
        revocationConfiguration: RevocationConfiguration? = nil,
        tags: [Tag]? = nil
    )
    {
        self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
        self.certificateAuthorityType = certificateAuthorityType
        self.idempotencyToken = idempotencyToken
        self.keyStorageSecurityStandard = keyStorageSecurityStandard
        self.revocationConfiguration = revocationConfiguration
        self.tags = tags
    }
}
