// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct IssueCertificateInputBody: Equatable {
    public let apiPassthrough: ApiPassthrough?
    public let certificateAuthorityArn: String?
    public let csr: Data?
    public let signingAlgorithm: SigningAlgorithm?
    public let templateArn: String?
    public let validity: Validity?
    public let validityNotBefore: Validity?
    public let idempotencyToken: String?
}

extension IssueCertificateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case apiPassthrough = "ApiPassthrough"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case csr = "Csr"
        case idempotencyToken = "IdempotencyToken"
        case signingAlgorithm = "SigningAlgorithm"
        case templateArn = "TemplateArn"
        case validity = "Validity"
        case validityNotBefore = "ValidityNotBefore"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiPassthroughDecoded = try containerValues.decodeIfPresent(ApiPassthrough.self, forKey: .apiPassthrough)
        apiPassthrough = apiPassthroughDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let csrDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .csr)
        csr = csrDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(SigningAlgorithm.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let validityDecoded = try containerValues.decodeIfPresent(Validity.self, forKey: .validity)
        validity = validityDecoded
        let validityNotBeforeDecoded = try containerValues.decodeIfPresent(Validity.self, forKey: .validityNotBefore)
        validityNotBefore = validityNotBeforeDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}
