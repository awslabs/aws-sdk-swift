// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExtendedKeyUsage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case extendedKeyUsageObjectIdentifier = "ExtendedKeyUsageObjectIdentifier"
        case extendedKeyUsageType = "ExtendedKeyUsageType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extendedKeyUsageObjectIdentifier = extendedKeyUsageObjectIdentifier {
            try encodeContainer.encode(extendedKeyUsageObjectIdentifier, forKey: .extendedKeyUsageObjectIdentifier)
        }
        if let extendedKeyUsageType = extendedKeyUsageType {
            try encodeContainer.encode(extendedKeyUsageType.rawValue, forKey: .extendedKeyUsageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extendedKeyUsageTypeDecoded = try containerValues.decodeIfPresent(ExtendedKeyUsageType.self, forKey: .extendedKeyUsageType)
        extendedKeyUsageType = extendedKeyUsageTypeDecoded
        let extendedKeyUsageObjectIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extendedKeyUsageObjectIdentifier)
        extendedKeyUsageObjectIdentifier = extendedKeyUsageObjectIdentifierDecoded
    }
}
