// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ExtendedKeyUsageType {
    case certificateTransparency
    case clientAuth
    case codeSigning
    case documentSigning
    case emailProtection
    case ocspSigning
    case serverAuth
    case smartCardLogin
    case timeStamping
    case sdkUnknown(String)
}

extension ExtendedKeyUsageType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExtendedKeyUsageType] {
        return [
            .certificateTransparency,
            .clientAuth,
            .codeSigning,
            .documentSigning,
            .emailProtection,
            .ocspSigning,
            .serverAuth,
            .smartCardLogin,
            .timeStamping,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .certificateTransparency: return "CERTIFICATE_TRANSPARENCY"
        case .clientAuth: return "CLIENT_AUTH"
        case .codeSigning: return "CODE_SIGNING"
        case .documentSigning: return "DOCUMENT_SIGNING"
        case .emailProtection: return "EMAIL_PROTECTION"
        case .ocspSigning: return "OCSP_SIGNING"
        case .serverAuth: return "SERVER_AUTH"
        case .smartCardLogin: return "SMART_CARD_LOGIN"
        case .timeStamping: return "TIME_STAMPING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExtendedKeyUsageType(rawValue: rawValue) ?? ExtendedKeyUsageType.sdkUnknown(rawValue)
    }
}
