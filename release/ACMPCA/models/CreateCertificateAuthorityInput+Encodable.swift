// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateCertificateAuthorityInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityConfiguration = "CertificateAuthorityConfiguration"
        case certificateAuthorityType = "CertificateAuthorityType"
        case idempotencyToken = "IdempotencyToken"
        case keyStorageSecurityStandard = "KeyStorageSecurityStandard"
        case revocationConfiguration = "RevocationConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityConfiguration = certificateAuthorityConfiguration {
            try encodeContainer.encode(certificateAuthorityConfiguration, forKey: .certificateAuthorityConfiguration)
        }
        if let certificateAuthorityType = certificateAuthorityType {
            try encodeContainer.encode(certificateAuthorityType.rawValue, forKey: .certificateAuthorityType)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let keyStorageSecurityStandard = keyStorageSecurityStandard {
            try encodeContainer.encode(keyStorageSecurityStandard.rawValue, forKey: .keyStorageSecurityStandard)
        }
        if let revocationConfiguration = revocationConfiguration {
            try encodeContainer.encode(revocationConfiguration, forKey: .revocationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
