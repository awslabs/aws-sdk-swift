// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains information about your private certificate authority (CA). Your private CA
/// 			can issue and revoke X.509 digital certificates. Digital certificates verify that the
/// 			entity named in the certificate <b>Subject</b> field owns or
/// 			controls the public key contained in the <b>Subject Public Key
/// 				Info</b> field. Call the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a> action to create your private CA. You must then
/// 			call the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificateAuthorityCertificate.html">GetCertificateAuthorityCertificate</a> action to retrieve a private CA
/// 			certificate signing request (CSR). Sign the CSR with your ACM Private CA-hosted or on-premises
/// 			root or subordinate CA certificate. Call the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html">ImportCertificateAuthorityCertificate</a> action to import the signed
/// 			certificate into AWS Certificate Manager (ACM). </p>
public struct CertificateAuthority: Equatable {
    /// <p>Amazon Resource Name (ARN) for your private certificate authority (CA). The format is
    /// 					<code>
    ///                <i>12345678-1234-1234-1234-123456789012</i>
    ///             </code>.</p>
    public let arn: String?
    /// <p>Your private CA configuration.</p>
    public let certificateAuthorityConfiguration: CertificateAuthorityConfiguration?
    /// <p>Date and time at which your private CA was created.</p>
    public let createdAt: Date?
    /// <p>Reason the request to create your private CA failed.</p>
    public let failureReason: FailureReason?
    /// <p>Defines a cryptographic key management compliance standard used for handling CA keys. </p>
    /// 		       <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// 		       <p>Note: AWS Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must
    /// 			explicitly specify this parameter and value when creating a CA in that Region.
    /// 			Specifying a different value (or no value) results in an
    /// 				<code>InvalidArgsException</code> with the message "A certificate authority cannot
    /// 			be created in this region with the specified security standard."</p>
    public let keyStorageSecurityStandard: KeyStorageSecurityStandard?
    /// <p>Date and time at which your private CA was last updated.</p>
    public let lastStateChangeAt: Date?
    /// <p>Date and time after which your private CA certificate is not valid.</p>
    public let notAfter: Date?
    /// <p>Date and time before which your private CA certificate is not valid.</p>
    public let notBefore: Date?
    /// <p>The AWS account ID that owns the certificate authority.</p>
    public let ownerAccount: String?
    /// <p>The period during which a deleted CA can be restored. For more information, see the
    /// 				<code>PermanentDeletionTimeInDays</code> parameter of the <a href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeleteCertificateAuthorityRequest.html">DeleteCertificateAuthorityRequest</a> action. </p>
    public let restorableUntil: Date?
    /// <p>Information about the certificate revocation list (CRL) created and maintained by your
    /// 			private CA. </p>
    public let revocationConfiguration: RevocationConfiguration?
    /// <p>Serial number of your private CA.</p>
    public let serial: String?
    /// <p>Status of your private CA.</p>
    public let status: CertificateAuthorityStatus?
    /// <p>Type of your private CA.</p>
    public let type: CertificateAuthorityType?

    public init (
        arn: String? = nil,
        certificateAuthorityConfiguration: CertificateAuthorityConfiguration? = nil,
        createdAt: Date? = nil,
        failureReason: FailureReason? = nil,
        keyStorageSecurityStandard: KeyStorageSecurityStandard? = nil,
        lastStateChangeAt: Date? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        ownerAccount: String? = nil,
        restorableUntil: Date? = nil,
        revocationConfiguration: RevocationConfiguration? = nil,
        serial: String? = nil,
        status: CertificateAuthorityStatus? = nil,
        type: CertificateAuthorityType? = nil
    )
    {
        self.arn = arn
        self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
        self.createdAt = createdAt
        self.failureReason = failureReason
        self.keyStorageSecurityStandard = keyStorageSecurityStandard
        self.lastStateChangeAt = lastStateChangeAt
        self.notAfter = notAfter
        self.notBefore = notBefore
        self.ownerAccount = ownerAccount
        self.restorableUntil = restorableUntil
        self.revocationConfiguration = revocationConfiguration
        self.serial = serial
        self.status = status
        self.type = type
    }
}
