// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Extensions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificatePolicies = "CertificatePolicies"
        case extendedKeyUsage = "ExtendedKeyUsage"
        case keyUsage = "KeyUsage"
        case subjectAlternativeNames = "SubjectAlternativeNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificatePolicies = certificatePolicies {
            var certificatePoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificatePolicies)
            for certificatepolicylist0 in certificatePolicies {
                try certificatePoliciesContainer.encode(certificatepolicylist0)
            }
        }
        if let extendedKeyUsage = extendedKeyUsage {
            var extendedKeyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsage)
            for extendedkeyusagelist0 in extendedKeyUsage {
                try extendedKeyUsageContainer.encode(extendedkeyusagelist0)
            }
        }
        if let keyUsage = keyUsage {
            try encodeContainer.encode(keyUsage, forKey: .keyUsage)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for generalnamelist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(generalnamelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatePoliciesContainer = try containerValues.decodeIfPresent([PolicyInformation].self, forKey: .certificatePolicies)
        var certificatePoliciesDecoded0:[PolicyInformation]? = nil
        if let certificatePoliciesContainer = certificatePoliciesContainer {
            certificatePoliciesDecoded0 = [PolicyInformation]()
            for structure0 in certificatePoliciesContainer {
                certificatePoliciesDecoded0?.append(structure0)
            }
        }
        certificatePolicies = certificatePoliciesDecoded0
        let extendedKeyUsageContainer = try containerValues.decodeIfPresent([ExtendedKeyUsage].self, forKey: .extendedKeyUsage)
        var extendedKeyUsageDecoded0:[ExtendedKeyUsage]? = nil
        if let extendedKeyUsageContainer = extendedKeyUsageContainer {
            extendedKeyUsageDecoded0 = [ExtendedKeyUsage]()
            for structure0 in extendedKeyUsageContainer {
                extendedKeyUsageDecoded0?.append(structure0)
            }
        }
        extendedKeyUsage = extendedKeyUsageDecoded0
        let keyUsageDecoded = try containerValues.decodeIfPresent(KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([GeneralName].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[GeneralName]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [GeneralName]()
            for structure0 in subjectAlternativeNamesContainer {
                subjectAlternativeNamesDecoded0?.append(structure0)
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
    }
}
