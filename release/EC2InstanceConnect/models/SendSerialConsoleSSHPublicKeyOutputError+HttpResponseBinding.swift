// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension SendSerialConsoleSSHPublicKeyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendSerialConsoleSSHPublicKeyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AuthException" : self = .authException(try AuthException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EC2InstanceNotFoundException" : self = .eC2InstanceNotFoundException(try EC2InstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EC2InstanceTypeInvalidException" : self = .eC2InstanceTypeInvalidException(try EC2InstanceTypeInvalidException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgsException" : self = .invalidArgsException(try InvalidArgsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleAccessDisabledException" : self = .serialConsoleAccessDisabledException(try SerialConsoleAccessDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleSessionLimitExceededException" : self = .serialConsoleSessionLimitExceededException(try SerialConsoleSessionLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SerialConsoleSessionUnavailableException" : self = .serialConsoleSessionUnavailableException(try SerialConsoleSessionUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
