// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEndpointsByPlatformApplicationOutputBody: Equatable {
    public let endpoints: [Endpoint]?
    public let nextToken: String?
}

extension ListEndpointsByPlatformApplicationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpoints = "Endpoints"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListEndpointsByPlatformApplicationResult"))
        if containerValues.contains(.endpoints) {
            struct KeyVal0{struct member{}}
            let endpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpoints)
            if let endpointsWrappedContainer = endpointsWrappedContainer {
                let endpointsContainer = try endpointsWrappedContainer.decodeIfPresent([Endpoint].self, forKey: .member)
                var endpointsBuffer:[Endpoint]? = nil
                if let endpointsContainer = endpointsContainer {
                    endpointsBuffer = [Endpoint]()
                    for structureContainer0 in endpointsContainer {
                        endpointsBuffer?.append(structureContainer0)
                    }
                }
                endpoints = endpointsBuffer
            } else {
                endpoints = []
            }
        } else {
            endpoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
