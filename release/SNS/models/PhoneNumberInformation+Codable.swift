// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PhoneNumberInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt = "CreatedAt"
        case iso2CountryCode = "Iso2CountryCode"
        case numberCapabilities = "NumberCapabilities"
        case phoneNumber = "PhoneNumber"
        case routeType = "RouteType"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let createdAt = createdAt {
            try container.encode(TimestampWrapper(createdAt, format: .dateTime), forKey: Key("createdAt"))
        }
        if let iso2CountryCode = iso2CountryCode {
            try container.encode(iso2CountryCode, forKey: Key("Iso2CountryCode"))
        }
        if let numberCapabilities = numberCapabilities {
            var numberCapabilitiesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NumberCapabilities"))
            for (index0, numbercapability0) in numberCapabilities.enumerated() {
                try numberCapabilitiesContainer.encode(numbercapability0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let phoneNumber = phoneNumber {
            try container.encode(phoneNumber, forKey: Key("PhoneNumber"))
        }
        if let routeType = routeType {
            try container.encode(routeType, forKey: Key("RouteType"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdAt)
        var createdAtBuffer:Date? = nil
        if let createdAtDecoded = createdAtDecoded {
            createdAtBuffer = try TimestampWrapperDecoder.parseDateStringValue(createdAtDecoded, format: .dateTime)
        }
        createdAt = createdAtBuffer
        let phoneNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let iso2CountryCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iso2CountryCode)
        iso2CountryCode = iso2CountryCodeDecoded
        let routeTypeDecoded = try containerValues.decodeIfPresent(RouteType.self, forKey: .routeType)
        routeType = routeTypeDecoded
        if containerValues.contains(.numberCapabilities) {
            struct KeyVal0{struct member{}}
            let numberCapabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .numberCapabilities)
            if let numberCapabilitiesWrappedContainer = numberCapabilitiesWrappedContainer {
                let numberCapabilitiesContainer = try numberCapabilitiesWrappedContainer.decodeIfPresent([NumberCapability].self, forKey: .member)
                var numberCapabilitiesBuffer:[NumberCapability]? = nil
                if let numberCapabilitiesContainer = numberCapabilitiesContainer {
                    numberCapabilitiesBuffer = [NumberCapability]()
                    for stringContainer0 in numberCapabilitiesContainer {
                        numberCapabilitiesBuffer?.append(stringContainer0)
                    }
                }
                numberCapabilities = numberCapabilitiesBuffer
            } else {
                numberCapabilities = []
            }
        } else {
            numberCapabilities = nil
        }
    }
}
