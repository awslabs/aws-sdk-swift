// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Supported language code for sending OTP message
public enum LanguageCodeString {
    case deDe
    case enGb
    case enUs
    case es419
    case esEs
    case frCa
    case frFr
    case itIt
    case jpJp
    case krKr
    case ptBr
    case zhCn
    case zhTw
    case sdkUnknown(String)
}

extension LanguageCodeString : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LanguageCodeString] {
        return [
            .deDe,
            .enGb,
            .enUs,
            .es419,
            .esEs,
            .frCa,
            .frFr,
            .itIt,
            .jpJp,
            .krKr,
            .ptBr,
            .zhCn,
            .zhTw,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deDe: return "de-DE"
        case .enGb: return "en-GB"
        case .enUs: return "en-US"
        case .es419: return "es-419"
        case .esEs: return "es-ES"
        case .frCa: return "fr-CA"
        case .frFr: return "fr-FR"
        case .itIt: return "it-IT"
        case .jpJp: return "ja-JP"
        case .krKr: return "kr-KR"
        case .ptBr: return "pt-BR"
        case .zhCn: return "zh-CN"
        case .zhTw: return "zh-TW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LanguageCodeString(rawValue: rawValue) ?? LanguageCodeString.sdkUnknown(rawValue)
    }
}
