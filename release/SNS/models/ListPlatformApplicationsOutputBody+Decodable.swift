// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPlatformApplicationsOutputBody: Equatable {
    public let platformApplications: [PlatformApplication]?
    public let nextToken: String?
}

extension ListPlatformApplicationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case platformApplications = "PlatformApplications"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListPlatformApplicationsResult"))
        if containerValues.contains(.platformApplications) {
            struct KeyVal0{struct member{}}
            let platformApplicationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformApplications)
            if let platformApplicationsWrappedContainer = platformApplicationsWrappedContainer {
                let platformApplicationsContainer = try platformApplicationsWrappedContainer.decodeIfPresent([PlatformApplication].self, forKey: .member)
                var platformApplicationsBuffer:[PlatformApplication]? = nil
                if let platformApplicationsContainer = platformApplicationsContainer {
                    platformApplicationsBuffer = [PlatformApplication]()
                    for structureContainer0 in platformApplicationsContainer {
                        platformApplicationsBuffer?.append(structureContainer0)
                    }
                }
                platformApplications = platformApplicationsBuffer
            } else {
                platformApplications = []
            }
        } else {
            platformApplications = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
