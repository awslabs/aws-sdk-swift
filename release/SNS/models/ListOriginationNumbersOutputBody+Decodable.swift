// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOriginationNumbersOutputBody: Equatable {
    public let nextToken: String?
    public let phoneNumbers: [PhoneNumberInformation]?
}

extension ListOriginationNumbersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case phoneNumbers = "PhoneNumbers"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListOriginationNumbersResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.phoneNumbers) {
            struct KeyVal0{struct member{}}
            let phoneNumbersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .phoneNumbers)
            if let phoneNumbersWrappedContainer = phoneNumbersWrappedContainer {
                let phoneNumbersContainer = try phoneNumbersWrappedContainer.decodeIfPresent([PhoneNumberInformation].self, forKey: .member)
                var phoneNumbersBuffer:[PhoneNumberInformation]? = nil
                if let phoneNumbersContainer = phoneNumbersContainer {
                    phoneNumbersBuffer = [PhoneNumberInformation]()
                    for structureContainer0 in phoneNumbersContainer {
                        phoneNumbersBuffer?.append(structureContainer0)
                    }
                }
                phoneNumbers = phoneNumbersBuffer
            } else {
                phoneNumbers = []
            }
        } else {
            phoneNumbers = nil
        }
    }
}
