// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon Simple Notification Service</fullname>
///         <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build
///             distributed web-enabled applications. Applications can use Amazon SNS to easily push
///             real-time notification messages to interested subscribers over multiple delivery
///             protocols. For more information about this product see the <a href="http://aws.amazon.com/sns/">Amazon SNS product page</a>. For detailed information about Amazon SNS features
///             and their associated API calls, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/">Amazon SNS Developer Guide</a>. </p>
///         <p>For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer
///                 Guide.</i>
///          </p>
///         <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming
///             language. The SDKs contain functionality that automatically takes care of tasks such as:
///             cryptographically signing your service requests, retrying requests, and handling error
///             responses. For a list of available SDKs, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>. </p>
public protocol SnsClientProtocol {
    /// <p>Adds a statement to a topic's access control policy, granting access for the specified
    ///             AWS accounts to the specified actions.</p>
    func addPermission(input: AddPermissionInput, completion: @escaping (SdkResult<AddPermissionOutputResponse, AddPermissionOutputError>) -> Void)
    /// <p>Accepts a phone number and indicates whether the phone holder has opted out of
    ///             receiving SMS messages from your account. You cannot send SMS messages to a number that
    ///             is opted out.</p>
    ///         <p>To resume sending messages, you can opt in the number by using the
    ///                 <code>OptInPhoneNumber</code> action.</p>
    func checkIfPhoneNumberIsOptedOut(input: CheckIfPhoneNumberIsOptedOutInput, completion: @escaping (SdkResult<CheckIfPhoneNumberIsOptedOutOutputResponse, CheckIfPhoneNumberIsOptedOutOutputError>) -> Void)
    /// <p>Verifies an endpoint owner's intent to receive messages by validating the token sent
    ///             to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the
    ///             action creates a new subscription and returns its Amazon Resource Name (ARN). This call
    ///             requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is
    ///             set to "true".</p>
    func confirmSubscription(input: ConfirmSubscriptionInput, completion: @escaping (SdkResult<ConfirmSubscriptionOutputResponse, ConfirmSubscriptionOutputError>) -> Void)
    /// <p>Creates a platform application object for one of the supported push notification
    ///             services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile
    ///             apps may register. You must specify <code>PlatformPrincipal</code> and
    ///                 <code>PlatformCredential</code> attributes when using the
    ///                 <code>CreatePlatformApplication</code> action.</p>
    ///         <p>
    ///             <code>PlatformPrincipal</code> and <code>PlatformCredential</code> are received from
    ///             the notification service.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>For <code>ADM</code>, <code>PlatformPrincipal</code> is <code>client id</code>
    ///                     and <code>PlatformCredential</code> is <code>client secret</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For <code>Baidu</code>, <code>PlatformPrincipal</code> is <code>API key</code>
    ///                     and <code>PlatformCredential</code> is <code>secret key</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For <code>APNS</code> and <code>APNS_SANDBOX</code>,
    ///                         <code>PlatformPrincipal</code> is <code>SSL certificate</code> and
    ///                         <code>PlatformCredential</code> is <code>private key</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For <code>GCM</code> (Firebase Cloud Messaging), there is no
    ///                         <code>PlatformPrincipal</code> and the <code>PlatformCredential</code> is
    ///                         <code>API key</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For <code>MPNS</code>, <code>PlatformPrincipal</code> is <code>TLS
    ///                         certificate</code> and <code>PlatformCredential</code> is <code>private
    ///                         key</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For <code>WNS</code>, <code>PlatformPrincipal</code> is <code>Package Security
    ///                         Identifier</code> and <code>PlatformCredential</code> is <code>secret
    ///                         key</code>.</p>
    ///             </li>
    ///          </ul>
    ///         <p>You can use the returned <code>PlatformApplicationArn</code> as an attribute for the
    ///                 <code>CreatePlatformEndpoint</code> action.</p>
    func createPlatformApplication(input: CreatePlatformApplicationInput, completion: @escaping (SdkResult<CreatePlatformApplicationOutputResponse, CreatePlatformApplicationOutputError>) -> Void)
    /// <p>Creates an endpoint for a device and mobile app on one of the supported push
    ///             notification services, such as GCM (Firebase Cloud Messaging) and APNS.
    ///                 <code>CreatePlatformEndpoint</code> requires the <code>PlatformApplicationArn</code>
    ///             that is returned from <code>CreatePlatformApplication</code>. You can use the returned
    ///                 <code>EndpointArn</code> to send a message to a mobile app or by the
    ///                 <code>Subscribe</code> action for subscription to a topic. The
    ///                 <code>CreatePlatformEndpoint</code> action is idempotent, so if the requester
    ///             already owns an endpoint with the same device token and attributes, that endpoint's ARN
    ///             is returned without creating a new endpoint. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
    ///                 Notifications</a>. </p>
    ///         <p>When using <code>CreatePlatformEndpoint</code> with Baidu, two attributes must be
    ///             provided: ChannelId and UserId. The token field must also contain the ChannelId. For
    ///             more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html">Creating an Amazon SNS Endpoint
    ///                 for Baidu</a>. </p>
    func createPlatformEndpoint(input: CreatePlatformEndpointInput, completion: @escaping (SdkResult<CreatePlatformEndpointOutputResponse, CreatePlatformEndpointOutputError>) -> Void)
    /// <p>Adds a destination phone number to an AWS account in the SMS sandbox and sends a
    ///             one-time password (OTP) to that phone number.</p>
    ///         <p>When you start using Amazon SNS to send SMS messages, your AWS account is in the
    ///                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
    ///                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
    ///                 account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
    ///                 SMS messages only to verified destination phone numbers. For more information, including how to
    ///                 move out of the sandbox to send messages without restrictions,
    ///                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
    ///                 the <i>Amazon SNS Developer Guide</i>.</p>
    func createSMSSandboxPhoneNumber(input: CreateSMSSandboxPhoneNumberInput, completion: @escaping (SdkResult<CreateSMSSandboxPhoneNumberOutputResponse, CreateSMSSandboxPhoneNumberOutputError>) -> Void)
    /// <p>Creates a topic to which notifications can be published. Users can create at most
    ///             100,000 standard topics (at most 1,000 FIFO topics). For more information, see <a href="http://aws.amazon.com/sns/">https://aws.amazon.com/sns</a>. This action is
    ///             idempotent, so if the requester already owns a topic with the specified name, that
    ///             topic's ARN is returned without creating a new topic.</p>
    func createTopic(input: CreateTopicInput, completion: @escaping (SdkResult<CreateTopicOutputResponse, CreateTopicOutputError>) -> Void)
    /// <p>Deletes the endpoint for a device and mobile app from Amazon SNS. This action is
    ///             idempotent. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
    ///             Notifications</a>. </p>
    ///         <p>When you delete an endpoint that is also subscribed to a topic, then you must also
    ///             unsubscribe the endpoint from the topic.</p>
    func deleteEndpoint(input: DeleteEndpointInput, completion: @escaping (SdkResult<DeleteEndpointOutputResponse, DeleteEndpointOutputError>) -> Void)
    /// <p>Deletes a platform application object for one of the supported push notification
    ///             services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see
    ///                 <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS
    ///                 Mobile Push Notifications</a>. </p>
    func deletePlatformApplication(input: DeletePlatformApplicationInput, completion: @escaping (SdkResult<DeletePlatformApplicationOutputResponse, DeletePlatformApplicationOutputError>) -> Void)
    /// <p>Deletes an AWS account's verified or pending phone number from the SMS sandbox.</p>
    ///         <p>When you start using Amazon SNS to send SMS messages, your AWS account is in the
    ///                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
    ///                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
    ///                 account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
    ///                 SMS messages only to verified destination phone numbers. For more information, including how to
    ///                 move out of the sandbox to send messages without restrictions,
    ///                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
    ///                 the <i>Amazon SNS Developer Guide</i>.</p>
    func deleteSMSSandboxPhoneNumber(input: DeleteSMSSandboxPhoneNumberInput, completion: @escaping (SdkResult<DeleteSMSSandboxPhoneNumberOutputResponse, DeleteSMSSandboxPhoneNumberOutputError>) -> Void)
    /// <p>Deletes a topic and all its subscriptions. Deleting a topic might prevent some
    ///             messages previously sent to the topic from being delivered to subscribers. This action
    ///             is idempotent, so deleting a topic that does not exist does not result in an
    ///             error.</p>
    func deleteTopic(input: DeleteTopicInput, completion: @escaping (SdkResult<DeleteTopicOutputResponse, DeleteTopicOutputError>) -> Void)
    /// <p>Retrieves the endpoint attributes for a device on one of the supported push
    ///             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
    ///             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
    func getEndpointAttributes(input: GetEndpointAttributesInput, completion: @escaping (SdkResult<GetEndpointAttributesOutputResponse, GetEndpointAttributesOutputError>) -> Void)
    /// <p>Retrieves the attributes of the platform application object for the supported push
    ///             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
    ///             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
    func getPlatformApplicationAttributes(input: GetPlatformApplicationAttributesInput, completion: @escaping (SdkResult<GetPlatformApplicationAttributesOutputResponse, GetPlatformApplicationAttributesOutputError>) -> Void)
    /// <p>Returns the settings for sending SMS messages from your account.</p>
    ///         <p>These settings are set with the <code>SetSMSAttributes</code> action.</p>
    func getSMSAttributes(input: GetSMSAttributesInput, completion: @escaping (SdkResult<GetSMSAttributesOutputResponse, GetSMSAttributesOutputError>) -> Void)
    /// <p>Retrieves the SMS sandbox status for the calling AWS account in the target AWS
    ///             Region.</p>
    ///         <p>When you start using Amazon SNS to send SMS messages, your AWS account is in the
    ///                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
    ///                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
    ///                 account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
    ///                 SMS messages only to verified destination phone numbers. For more information, including how to
    ///                 move out of the sandbox to send messages without restrictions,
    ///                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
    ///                 the <i>Amazon SNS Developer Guide</i>.</p>
    func getSMSSandboxAccountStatus(input: GetSMSSandboxAccountStatusInput, completion: @escaping (SdkResult<GetSMSSandboxAccountStatusOutputResponse, GetSMSSandboxAccountStatusOutputError>) -> Void)
    /// <p>Returns all of the properties of a subscription.</p>
    func getSubscriptionAttributes(input: GetSubscriptionAttributesInput, completion: @escaping (SdkResult<GetSubscriptionAttributesOutputResponse, GetSubscriptionAttributesOutputError>) -> Void)
    /// <p>Returns all of the properties of a topic. Topic properties returned might differ based
    ///             on the authorization of the user.</p>
    func getTopicAttributes(input: GetTopicAttributesInput, completion: @escaping (SdkResult<GetTopicAttributesOutputResponse, GetTopicAttributesOutputError>) -> Void)
    /// <p>Lists the endpoints and endpoint attributes for devices in a supported push
    ///             notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for
    ///                 <code>ListEndpointsByPlatformApplication</code> are paginated and return a limited
    ///             list of endpoints, up to 100. If additional records are available after the first page
    ///             results, then a NextToken string will be returned. To receive the next page, you call
    ///                 <code>ListEndpointsByPlatformApplication</code> again using the NextToken string
    ///             received from the previous call. When there are no more records to return, NextToken
    ///             will be null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
    ///             Notifications</a>. </p>
    ///         <p>This action is throttled at 30 transactions per second (TPS).</p>
    func listEndpointsByPlatformApplication(input: ListEndpointsByPlatformApplicationInput, completion: @escaping (SdkResult<ListEndpointsByPlatformApplicationOutputResponse, ListEndpointsByPlatformApplicationOutputError>) -> Void)
    /// <p>Lists the calling AWS account's dedicated origination numbers and their metadata. For
    ///             more information about origination numbers, see <a href="https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html">Origination numbers</a> in the <i>Amazon SNS Developer
    ///             Guide</i>.</p>
    func listOriginationNumbers(input: ListOriginationNumbersInput, completion: @escaping (SdkResult<ListOriginationNumbersOutputResponse, ListOriginationNumbersOutputError>) -> Void)
    /// <p>Returns a list of phone numbers that are opted out, meaning you cannot send SMS
    ///             messages to them.</p>
    ///         <p>The results for <code>ListPhoneNumbersOptedOut</code> are paginated, and each page
    ///             returns up to 100 phone numbers. If additional phone numbers are available after the
    ///             first page of results, then a <code>NextToken</code> string will be returned. To receive
    ///             the next page, you call <code>ListPhoneNumbersOptedOut</code> again using the
    ///                 <code>NextToken</code> string received from the previous call. When there are no
    ///             more records to return, <code>NextToken</code> will be null.</p>
    func listPhoneNumbersOptedOut(input: ListPhoneNumbersOptedOutInput, completion: @escaping (SdkResult<ListPhoneNumbersOptedOutOutputResponse, ListPhoneNumbersOptedOutOutputError>) -> Void)
    /// <p>Lists the platform application objects for the supported push notification services,
    ///             such as APNS and GCM (Firebase Cloud Messaging). The results for
    ///                 <code>ListPlatformApplications</code> are paginated and return a limited list of
    ///             applications, up to 100. If additional records are available after the first page
    ///             results, then a NextToken string will be returned. To receive the next page, you call
    ///                 <code>ListPlatformApplications</code> using the NextToken string received from the
    ///             previous call. When there are no more records to return, <code>NextToken</code> will be
    ///             null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
    ///             Notifications</a>. </p>
    ///         <p>This action is throttled at 15 transactions per second (TPS).</p>
    func listPlatformApplications(input: ListPlatformApplicationsInput, completion: @escaping (SdkResult<ListPlatformApplicationsOutputResponse, ListPlatformApplicationsOutputError>) -> Void)
    /// <p>Lists the calling AWS account's current verified and pending destination phone numbers
    ///             in the SMS sandbox.</p>
    ///         <p>When you start using Amazon SNS to send SMS messages, your AWS account is in the
    ///                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
    ///                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
    ///                 account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
    ///                 SMS messages only to verified destination phone numbers. For more information, including how to
    ///                 move out of the sandbox to send messages without restrictions,
    ///                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
    ///                 the <i>Amazon SNS Developer Guide</i>.</p>
    func listSMSSandboxPhoneNumbers(input: ListSMSSandboxPhoneNumbersInput, completion: @escaping (SdkResult<ListSMSSandboxPhoneNumbersOutputResponse, ListSMSSandboxPhoneNumbersOutputError>) -> Void)
    /// <p>Returns a list of the requester's subscriptions. Each call returns a limited list of
    ///             subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is
    ///             also returned. Use the <code>NextToken</code> parameter in a new
    ///                 <code>ListSubscriptions</code> call to get further results.</p>
    ///         <p>This action is throttled at 30 transactions per second (TPS).</p>
    func listSubscriptions(input: ListSubscriptionsInput, completion: @escaping (SdkResult<ListSubscriptionsOutputResponse, ListSubscriptionsOutputError>) -> Void)
    /// <p>Returns a list of the subscriptions to a specific topic. Each call returns a limited
    ///             list of subscriptions, up to 100. If there are more subscriptions, a
    ///                 <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in
    ///             a new <code>ListSubscriptionsByTopic</code> call to get further results.</p>
    ///         <p>This action is throttled at 30 transactions per second (TPS).</p>
    func listSubscriptionsByTopic(input: ListSubscriptionsByTopicInput, completion: @escaping (SdkResult<ListSubscriptionsByTopicOutputResponse, ListSubscriptionsByTopicOutputError>) -> Void)
    /// <p>List all tags added to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
    ///                 <i>Amazon Simple Notification Service Developer Guide</i>.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Returns a list of the requester's topics. Each call returns a limited list of topics,
    ///             up to 100. If there are more topics, a <code>NextToken</code> is also returned. Use the
    ///                 <code>NextToken</code> parameter in a new <code>ListTopics</code> call to get
    ///             further results.</p>
    ///         <p>This action is throttled at 30 transactions per second (TPS).</p>
    func listTopics(input: ListTopicsInput, completion: @escaping (SdkResult<ListTopicsOutputResponse, ListTopicsOutputError>) -> Void)
    /// <p>Use this request to opt in a phone number that is opted out, which enables you to
    ///             resume sending SMS messages to the number.</p>
    ///         <p>You can opt in a phone number only once every 30 days.</p>
    func optInPhoneNumber(input: OptInPhoneNumberInput, completion: @escaping (SdkResult<OptInPhoneNumberOutputResponse, OptInPhoneNumberOutputError>) -> Void)
    /// <p>Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone
    ///             number, or a message to a mobile platform endpoint (when you specify the
    ///                 <code>TargetArn</code>).</p>
    ///         <p>If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is
    ///             subscribed to the topic. The format of the message depends on the notification protocol
    ///             for each subscribed endpoint.</p>
    ///         <p>When a <code>messageId</code> is returned, the message has been saved and Amazon SNS
    ///             will attempt to deliver it shortly.</p>
    ///         <p>To use the <code>Publish</code> action for sending a message to a mobile endpoint,
    ///             such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for
    ///             the TargetArn parameter. The EndpointArn is returned when making a call with the
    ///                 <code>CreatePlatformEndpoint</code> action.
    ///       </p>
    ///         <p>For more information about formatting messages, see <a href="https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html">Send Custom
    ///                 Platform-Specific Payloads in Messages to Mobile Devices</a>. </p>
    ///         <important>
    ///             <p>You can publish messages only to topics and endpoints in the same AWS
    ///                 Region.</p>
    ///         </important>
    func publish(input: PublishInput, completion: @escaping (SdkResult<PublishOutputResponse, PublishOutputError>) -> Void)
    /// <p>Removes a statement from a topic's access control policy.</p>
    func removePermission(input: RemovePermissionInput, completion: @escaping (SdkResult<RemovePermissionOutputResponse, RemovePermissionOutputError>) -> Void)
    /// <p>Sets the attributes for an endpoint for a device on one of the supported push
    ///             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
    ///             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
    func setEndpointAttributes(input: SetEndpointAttributesInput, completion: @escaping (SdkResult<SetEndpointAttributesOutputResponse, SetEndpointAttributesOutputError>) -> Void)
    /// <p>Sets the attributes of the platform application object for the supported push
    ///             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
    ///             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring
    ///             attributes for message delivery status, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for
    ///                 Message Delivery Status</a>. </p>
    func setPlatformApplicationAttributes(input: SetPlatformApplicationAttributesInput, completion: @escaping (SdkResult<SetPlatformApplicationAttributesOutputResponse, SetPlatformApplicationAttributesOutputError>) -> Void)
    /// <p>Use this request to set the default settings for sending SMS messages and receiving
    ///             daily SMS usage reports.</p>
    ///         <p>You can override some of these settings for a single message when you use the
    ///                 <code>Publish</code> action with the <code>MessageAttributes.entry.N</code>
    ///             parameter. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing to a mobile phone</a>
    ///             in the <i>Amazon SNS Developer Guide</i>.</p>
    ///         <note>
    ///             <p>To use this operation, you must grant the Amazon SNS service principal
    ///                     (<code>sns.amazonaws.com</code>) permission to perform the
    ///                     <code>s3:ListBucket</code> action. </p>
    ///         </note>
    func setSMSAttributes(input: SetSMSAttributesInput, completion: @escaping (SdkResult<SetSMSAttributesOutputResponse, SetSMSAttributesOutputError>) -> Void)
    /// <p>Allows a subscription owner to set an attribute of the subscription to a new
    ///             value.</p>
    func setSubscriptionAttributes(input: SetSubscriptionAttributesInput, completion: @escaping (SdkResult<SetSubscriptionAttributesOutputResponse, SetSubscriptionAttributesOutputError>) -> Void)
    /// <p>Allows a topic owner to set an attribute of the topic to a new value.</p>
    func setTopicAttributes(input: SetTopicAttributesInput, completion: @escaping (SdkResult<SetTopicAttributesOutputResponse, SetTopicAttributesOutputError>) -> Void)
    /// <p>Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or
    ///             if the endpoint and the topic are not in the same AWS account, the endpoint owner must
    ///             run the <code>ConfirmSubscription</code> action to confirm the subscription.</p>
    ///         <p>You call the <code>ConfirmSubscription</code> action with the token from the
    ///             subscription response. Confirmation tokens are valid for three days.</p>
    ///         <p>This action is throttled at 100 transactions per second (TPS).</p>
    func subscribe(input: SubscribeInput, completion: @escaping (SdkResult<SubscribeOutputResponse, SubscribeOutputError>) -> Void)
    /// <p>Add tags to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
    ///                 <i>Amazon SNS Developer Guide</i>.</p>
    ///         <p>When you use topic tags, keep the following guidelines in mind:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Adding more than 50 tags to a topic isn't recommended.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tags don't have any semantic meaning. Amazon SNS interprets tags as character
    ///                     strings.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tags are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>A new tag with a key identical to that of an existing tag overwrites the
    ///                     existing tag.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tagging actions are limited to 10 TPS per AWS account, per AWS region. If your
    ///                     application requires a higher throughput, file a <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=technical">technical support request</a>.</p>
    ///             </li>
    ///          </ul>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Deletes a subscription. If the subscription requires authentication for deletion, only
    ///             the owner of the subscription or the topic's owner can unsubscribe, and an AWS signature
    ///             is required. If the <code>Unsubscribe</code> call does not require authentication and
    ///             the requester is not the subscription owner, a final cancellation message is delivered
    ///             to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the
    ///                 <code>Unsubscribe</code> request was unintended.</p>
    ///         <p>This action is throttled at 100 transactions per second (TPS).</p>
    func unsubscribe(input: UnsubscribeInput, completion: @escaping (SdkResult<UnsubscribeOutputResponse, UnsubscribeOutputError>) -> Void)
    /// <p>Remove tags from the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
    ///                 <i>Amazon SNS Developer Guide</i>.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Verifies a destination phone number with a one-time password (OTP) for the calling AWS
    ///             account.</p>
    ///         <p>When you start using Amazon SNS to send SMS messages, your AWS account is in the
    ///                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
    ///                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
    ///                 account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
    ///                 SMS messages only to verified destination phone numbers. For more information, including how to
    ///                 move out of the sandbox to send messages without restrictions,
    ///                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
    ///                 the <i>Amazon SNS Developer Guide</i>.</p>
    func verifySMSSandboxPhoneNumber(input: VerifySMSSandboxPhoneNumberInput, completion: @escaping (SdkResult<VerifySMSSandboxPhoneNumberOutputResponse, VerifySMSSandboxPhoneNumberOutputError>) -> Void)
}
