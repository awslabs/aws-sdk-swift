// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventId
        case eventType
        case eventValue
        case impression
        case itemId
        case properties
        case recommendationId
        case sentAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventType = eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let eventValue = eventValue {
            try encodeContainer.encode(eventValue, forKey: .eventValue)
        }
        if let impression = impression {
            var impressionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .impression)
            for impression0 in impression {
                try impressionContainer.encode(impression0)
            }
        }
        if let itemId = itemId {
            try encodeContainer.encode(itemId, forKey: .itemId)
        }
        if let properties = properties {
            try encodeContainer.encode(properties, forKey: .properties)
        }
        if let recommendationId = recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let sentAt = sentAt {
            try encodeContainer.encode(sentAt.timeIntervalSince1970, forKey: .sentAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let eventValueDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .eventValue)
        eventValue = eventValueDecoded
        let itemIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .itemId)
        itemId = itemIdDecoded
        let propertiesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .properties)
        properties = propertiesDecoded
        let sentAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .sentAt)
        sentAt = sentAtDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let impressionContainer = try containerValues.decodeIfPresent([String].self, forKey: .impression)
        var impressionDecoded0:[String]? = nil
        if let impressionContainer = impressionContainer {
            impressionDecoded0 = [String]()
            for string0 in impressionContainer {
                impressionDecoded0?.append(string0)
            }
        }
        impression = impressionDecoded0
    }
}
