// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutEventsInputBody: Equatable {
    public let trackingId: String?
    public let userId: String?
    public let sessionId: String?
    public let eventList: [Event]?
}

extension PutEventsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventList
        case sessionId
        case trackingId
        case userId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trackingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trackingId)
        trackingId = trackingIdDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let eventListContainer = try containerValues.decodeIfPresent([Event].self, forKey: .eventList)
        var eventListDecoded0:[Event]? = nil
        if let eventListContainer = eventListContainer {
            eventListDecoded0 = [Event]()
            for structure0 in eventListContainer {
                eventListDecoded0?.append(structure0)
            }
        }
        eventList = eventListDecoded0
    }
}
