// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntitiesInputBody: Equatable {
    public let catalog: String?
    public let entityType: String?
    public let filterList: [Filter]?
    public let sort: Sort?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListEntitiesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case catalog = "Catalog"
        case entityType = "EntityType"
        case filterList = "FilterList"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalog)
        catalog = catalogDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let filterListContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filterList)
        var filterListDecoded0:[Filter]? = nil
        if let filterListContainer = filterListContainer {
            filterListDecoded0 = [Filter]()
            for structure0 in filterListContainer {
                filterListDecoded0?.append(structure0)
            }
        }
        filterList = filterListDecoded0
        let sortDecoded = try containerValues.decodeIfPresent(Sort.self, forKey: .sort)
        sort = sortDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
