// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListChangeSetsOutputBody: Equatable {
    public let changeSetSummaryList: [ChangeSetSummaryListItem]?
    public let nextToken: String?
}

extension ListChangeSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case changeSetSummaryList = "ChangeSetSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetSummaryListContainer = try containerValues.decodeIfPresent([ChangeSetSummaryListItem].self, forKey: .changeSetSummaryList)
        var changeSetSummaryListDecoded0:[ChangeSetSummaryListItem]? = nil
        if let changeSetSummaryListContainer = changeSetSummaryListContainer {
            changeSetSummaryListDecoded0 = [ChangeSetSummaryListItem]()
            for structure0 in changeSetSummaryListContainer {
                changeSetSummaryListDecoded0?.append(structure0)
            }
        }
        changeSetSummaryList = changeSetSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
