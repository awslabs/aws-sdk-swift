// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EntitySummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case entityArn = "EntityArn"
        case entityId = "EntityId"
        case entityType = "EntityType"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case visibility = "Visibility"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityArn = entityArn {
            try encodeContainer.encode(entityArn, forKey: .entityArn)
        }
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let entityType = entityType {
            try encodeContainer.encode(entityType, forKey: .entityType)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let visibility = visibility {
            try encodeContainer.encode(visibility, forKey: .visibility)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let entityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityArn)
        entityArn = entityArnDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .visibility)
        visibility = visibilityDecoded
    }
}
