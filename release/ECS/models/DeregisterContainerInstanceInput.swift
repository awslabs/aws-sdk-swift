// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DeregisterContainerInstanceInput: Equatable {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to
    /// 			deregister. If you do not specify a cluster, the default cluster is assumed.</p>
    public let cluster: String?
    /// <p>The container instance ID or full ARN of the container instance to deregister.
    /// 			The ARN contains the <code>arn:aws:ecs</code> namespace, followed by the Region of the container instance, the AWS account ID of the container instance owner, the <code>container-instance</code> namespace, and then the container instance ID. For example, <code>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</code>.</p>
    public let containerInstance: String?
    /// <p>Forces the deregistration of the container instance. If you have tasks running on the
    /// 			container instance when you deregister it with the <code>force</code> option, these
    /// 			tasks remain running until you terminate the instance or the tasks stop through some
    /// 			other means, but they are orphaned (no longer monitored or accounted for by Amazon ECS). If
    /// 			an orphaned task on your container instance is part of an Amazon ECS service, then the
    /// 			service scheduler starts another copy of that task, on a different container instance if
    /// 			possible. </p>
    /// 		       <p>Any containers in orphaned service tasks that are registered with a Classic Load Balancer or an Application Load Balancer
    /// 			target group are deregistered. They begin connection draining according to the settings
    /// 			on the load balancer or target group.</p>
    public let force: Bool?

    public init (
        cluster: String? = nil,
        containerInstance: String? = nil,
        force: Bool? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
        self.force = force
    }
}
