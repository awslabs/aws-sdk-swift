// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KernelCapabilities: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case add
        case drop
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let add = add {
            var addContainer = encodeContainer.nestedUnkeyedContainer(forKey: .add)
            for stringlist0 in add {
                try addContainer.encode(stringlist0)
            }
        }
        if let drop = drop {
            var dropContainer = encodeContainer.nestedUnkeyedContainer(forKey: .drop)
            for stringlist0 in drop {
                try dropContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addContainer = try containerValues.decodeIfPresent([String].self, forKey: .add)
        var addDecoded0:[String]? = nil
        if let addContainer = addContainer {
            addDecoded0 = [String]()
            for string0 in addContainer {
                addDecoded0?.append(string0)
            }
        }
        add = addDecoded0
        let dropContainer = try containerValues.decodeIfPresent([String].self, forKey: .drop)
        var dropDecoded0:[String]? = nil
        if let dropContainer = dropContainer {
            dropDecoded0 = [String]()
            for string0 in dropContainer {
                dropDecoded0?.append(string0)
            }
        }
        drop = dropDecoded0
    }
}
