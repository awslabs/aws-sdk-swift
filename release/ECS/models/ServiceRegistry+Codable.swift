// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceRegistry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerName
        case containerPort
        case port
        case registryArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let registryArn = registryArn {
            try encodeContainer.encode(registryArn, forKey: .registryArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let containerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
    }
}
