// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecuteCommandConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId
        case logConfiguration
        case logging
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logConfiguration = logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let logging = logging {
            try encodeContainer.encode(logging.rawValue, forKey: .logging)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(ExecuteCommandLogging.self, forKey: .logging)
        logging = loggingDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(ExecuteCommandLogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
    }
}
