// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentConnected
        case agentUpdateStatus
        case attachments
        case attributes
        case capacityProviderName
        case containerInstanceArn
        case ec2InstanceId
        case pendingTasksCount
        case registeredAt
        case registeredResources
        case remainingResources
        case runningTasksCount
        case status
        case statusReason
        case tags
        case version
        case versionInfo
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if agentConnected != false {
            try encodeContainer.encode(agentConnected, forKey: .agentConnected)
        }
        if let agentUpdateStatus = agentUpdateStatus {
            try encodeContainer.encode(agentUpdateStatus.rawValue, forKey: .agentUpdateStatus)
        }
        if let attachments = attachments {
            var attachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachments)
            for attachments0 in attachments {
                try attachmentsContainer.encode(attachments0)
            }
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributes0 in attributes {
                try attributesContainer.encode(attributes0)
            }
        }
        if let capacityProviderName = capacityProviderName {
            try encodeContainer.encode(capacityProviderName, forKey: .capacityProviderName)
        }
        if let containerInstanceArn = containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if let ec2InstanceId = ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if pendingTasksCount != 0 {
            try encodeContainer.encode(pendingTasksCount, forKey: .pendingTasksCount)
        }
        if let registeredAt = registeredAt {
            try encodeContainer.encode(registeredAt.timeIntervalSince1970, forKey: .registeredAt)
        }
        if let registeredResources = registeredResources {
            var registeredResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .registeredResources)
            for resources0 in registeredResources {
                try registeredResourcesContainer.encode(resources0)
            }
        }
        if let remainingResources = remainingResources {
            var remainingResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .remainingResources)
            for resources0 in remainingResources {
                try remainingResourcesContainer.encode(resources0)
            }
        }
        if runningTasksCount != 0 {
            try encodeContainer.encode(runningTasksCount, forKey: .runningTasksCount)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let versionInfo = versionInfo {
            try encodeContainer.encode(versionInfo, forKey: .versionInfo)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let capacityProviderNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .capacityProviderName)
        capacityProviderName = capacityProviderNameDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let versionInfoDecoded = try containerValues.decodeIfPresent(VersionInfo.self, forKey: .versionInfo)
        versionInfo = versionInfoDecoded
        let remainingResourcesContainer = try containerValues.decodeIfPresent([Resource].self, forKey: .remainingResources)
        var remainingResourcesDecoded0:[Resource]? = nil
        if let remainingResourcesContainer = remainingResourcesContainer {
            remainingResourcesDecoded0 = [Resource]()
            for structure0 in remainingResourcesContainer {
                remainingResourcesDecoded0?.append(structure0)
            }
        }
        remainingResources = remainingResourcesDecoded0
        let registeredResourcesContainer = try containerValues.decodeIfPresent([Resource].self, forKey: .registeredResources)
        var registeredResourcesDecoded0:[Resource]? = nil
        if let registeredResourcesContainer = registeredResourcesContainer {
            registeredResourcesDecoded0 = [Resource]()
            for structure0 in registeredResourcesContainer {
                registeredResourcesDecoded0?.append(structure0)
            }
        }
        registeredResources = registeredResourcesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let agentConnectedDecoded = try containerValues.decode(Bool.self, forKey: .agentConnected)
        agentConnected = agentConnectedDecoded
        let runningTasksCountDecoded = try containerValues.decode(Int.self, forKey: .runningTasksCount)
        runningTasksCount = runningTasksCountDecoded
        let pendingTasksCountDecoded = try containerValues.decode(Int.self, forKey: .pendingTasksCount)
        pendingTasksCount = pendingTasksCountDecoded
        let agentUpdateStatusDecoded = try containerValues.decodeIfPresent(AgentUpdateStatus.self, forKey: .agentUpdateStatus)
        agentUpdateStatus = agentUpdateStatusDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Attribute].self, forKey: .attributes)
        var attributesDecoded0:[Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Attribute]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
        let registeredAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registeredAt)
        registeredAt = registeredAtDecoded
        let attachmentsContainer = try containerValues.decodeIfPresent([Attachment].self, forKey: .attachments)
        var attachmentsDecoded0:[Attachment]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [Attachment]()
            for structure0 in attachmentsContainer {
                attachmentsDecoded0?.append(structure0)
            }
        }
        attachments = attachmentsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
