// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoadBalancer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerName
        case containerPort
        case loadBalancerName
        case targetGroupArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let targetGroupArn = targetGroupArn {
            try encodeContainer.encode(targetGroupArn, forKey: .targetGroupArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let containerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
    }
}
