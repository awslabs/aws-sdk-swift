// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DockerVolumeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoprovision
        case driver
        case driverOpts
        case labels
        case scope
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoprovision = autoprovision {
            try encodeContainer.encode(autoprovision, forKey: .autoprovision)
        }
        if let driver = driver {
            try encodeContainer.encode(driver, forKey: .driver)
        }
        if let driverOpts = driverOpts {
            var driverOptsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .driverOpts)
            for (dictKey0, stringmap0) in driverOpts {
                try driverOptsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labels)
            for (dictKey0, stringmap0) in labels {
                try labelsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
        let autoprovisionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoprovision)
        autoprovision = autoprovisionDecoded
        let driverDecoded = try containerValues.decodeIfPresent(String.self, forKey: .driver)
        driver = driverDecoded
        let driverOptsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .driverOpts)
        var driverOptsDecoded0: [String:String]? = nil
        if let driverOptsContainer = driverOptsContainer {
            driverOptsDecoded0 = [String:String]()
            for (key0, string0) in driverOptsContainer {
                driverOptsDecoded0?[key0] = string0
            }
        }
        driverOpts = driverOptsDecoded0
        let labelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, string0) in labelsContainer {
                labelsDecoded0?[key0] = string0
            }
        }
        labels = labelsDecoded0
    }
}
