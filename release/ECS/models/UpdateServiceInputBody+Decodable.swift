// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateServiceInputBody: Equatable {
    public let cluster: String?
    public let service: String?
    public let desiredCount: Int?
    public let taskDefinition: String?
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    public let deploymentConfiguration: DeploymentConfiguration?
    public let networkConfiguration: NetworkConfiguration?
    public let placementConstraints: [PlacementConstraint]?
    public let placementStrategy: [PlacementStrategy]?
    public let platformVersion: String?
    public let forceNewDeployment: Bool
    public let healthCheckGracePeriodSeconds: Int?
    public let enableExecuteCommand: Bool?
}

extension UpdateServiceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityProviderStrategy
        case cluster
        case deploymentConfiguration
        case desiredCount
        case enableExecuteCommand
        case forceNewDeployment
        case healthCheckGracePeriodSeconds
        case networkConfiguration
        case placementConstraints
        case placementStrategy
        case platformVersion
        case service
        case taskDefinition
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .service)
        service = serviceDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCount)
        desiredCount = desiredCountDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([CapacityProviderStrategyItem].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                capacityProviderStrategyDecoded0?.append(structure0)
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let deploymentConfigurationDecoded = try containerValues.decodeIfPresent(DeploymentConfiguration.self, forKey: .deploymentConfiguration)
        deploymentConfiguration = deploymentConfigurationDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([PlacementConstraint].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                placementConstraintsDecoded0?.append(structure0)
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([PlacementStrategy].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                placementStrategyDecoded0?.append(structure0)
            }
        }
        placementStrategy = placementStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let forceNewDeploymentDecoded = try containerValues.decode(Bool.self, forKey: .forceNewDeployment)
        forceNewDeployment = forceNewDeploymentDecoded
        let healthCheckGracePeriodSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckGracePeriodSeconds)
        healthCheckGracePeriodSeconds = healthCheckGracePeriodSecondsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableExecuteCommand)
        enableExecuteCommand = enableExecuteCommandDecoded
    }
}
