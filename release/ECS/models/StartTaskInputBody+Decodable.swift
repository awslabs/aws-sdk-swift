// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartTaskInputBody: Equatable {
    public let cluster: String?
    public let containerInstances: [String]?
    public let enableECSManagedTags: Bool
    public let enableExecuteCommand: Bool
    public let group: String?
    public let networkConfiguration: NetworkConfiguration?
    public let overrides: TaskOverride?
    public let propagateTags: PropagateTags?
    public let referenceId: String?
    public let startedBy: String?
    public let tags: [Tag]?
    public let taskDefinition: String?
}

extension StartTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerInstances
        case enableECSManagedTags
        case enableExecuteCommand
        case group
        case networkConfiguration
        case overrides
        case propagateTags
        case referenceId
        case startedBy
        case tags
        case taskDefinition
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let containerInstancesContainer = try containerValues.decodeIfPresent([String].self, forKey: .containerInstances)
        var containerInstancesDecoded0:[String]? = nil
        if let containerInstancesContainer = containerInstancesContainer {
            containerInstancesDecoded0 = [String]()
            for string0 in containerInstancesContainer {
                containerInstancesDecoded0?.append(string0)
            }
        }
        containerInstances = containerInstancesDecoded0
        let enableECSManagedTagsDecoded = try containerValues.decode(Bool.self, forKey: .enableECSManagedTags)
        enableECSManagedTags = enableECSManagedTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decode(Bool.self, forKey: .enableExecuteCommand)
        enableExecuteCommand = enableExecuteCommandDecoded
        let groupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .group)
        group = groupDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(TaskOverride.self, forKey: .overrides)
        overrides = overridesDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
    }
}
