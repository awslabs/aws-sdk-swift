// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkInterface: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachmentId
        case ipv6Address
        case privateIpv4Address
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentId = attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if let ipv6Address = ipv6Address {
            try encodeContainer.encode(ipv6Address, forKey: .ipv6Address)
        }
        if let privateIpv4Address = privateIpv4Address {
            try encodeContainer.encode(privateIpv4Address, forKey: .privateIpv4Address)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let privateIpv4AddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIpv4Address)
        privateIpv4Address = privateIpv4AddressDecoded
        let ipv6AddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipv6Address)
        ipv6Address = ipv6AddressDecoded
    }
}
