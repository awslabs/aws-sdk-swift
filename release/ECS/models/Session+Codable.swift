// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Session: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sessionId
        case streamUrl
        case tokenValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sessionId = sessionId {
            try encodeContainer.encode(sessionId, forKey: .sessionId)
        }
        if let streamUrl = streamUrl {
            try encodeContainer.encode(streamUrl, forKey: .streamUrl)
        }
        if let tokenValue = tokenValue {
            try encodeContainer.encode(tokenValue, forKey: .tokenValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let streamUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamUrl)
        streamUrl = streamUrlDecoded
        let tokenValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenValue)
        tokenValue = tokenValueDecoded
    }
}
