// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListTasksInput: Equatable {
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the
    /// 				<code>ListTasks</code> results. If you do not specify a cluster, the default cluster is assumed.</p>
    public let cluster: String?
    /// <p>The container instance ID or full ARN of the container instance to use when
    /// 			filtering the <code>ListTasks</code> results. Specifying a
    /// 				<code>containerInstance</code> limits the results to tasks that belong to that
    /// 			container instance.</p>
    public let containerInstance: String?
    /// <p>The task desired status to use when filtering the <code>ListTasks</code> results.
    /// 			Specifying a <code>desiredStatus</code> of <code>STOPPED</code> limits the results to
    /// 			tasks that Amazon ECS has set the desired status to <code>STOPPED</code>. This can be useful
    /// 			for debugging tasks that are not starting properly or have died or finished. The default
    /// 			status filter is <code>RUNNING</code>, which shows tasks that Amazon ECS has set the desired
    /// 			status to <code>RUNNING</code>.</p>
    /// 		       <note>
    /// 			         <p>Although you can filter results based on a desired status of <code>PENDING</code>,
    /// 				this does not return any results. Amazon ECS never sets the desired status of a task to
    /// 				that value (only a task's <code>lastStatus</code> may have a value of
    /// 					<code>PENDING</code>).</p>
    /// 		       </note>
    public let desiredStatus: DesiredStatus?
    /// <p>The name of the task definition family to use when filtering the
    /// 				<code>ListTasks</code> results. Specifying a <code>family</code> limits the results
    /// 			to tasks that belong to that family.</p>
    public let family: String?
    /// <p>The launch type to use when filtering the <code>ListTasks</code> results.</p>
    public let launchType: LaunchType?
    /// <p>The maximum number of task results returned by <code>ListTasks</code> in paginated
    /// 			output. When this parameter is used, <code>ListTasks</code> only returns
    /// 				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
    /// 			response element. The remaining results of the initial request can be seen by sending
    /// 			another <code>ListTasks</code> request with the returned <code>nextToken</code> value.
    /// 			This value can be between 1 and 100. If this parameter is
    /// 			not used, then <code>ListTasks</code> returns up to 100 results and a
    /// 				<code>nextToken</code> value if applicable.</p>
    public let maxResults: Int?
    /// <p>The <code>nextToken</code> value returned from a <code>ListTasks</code> request
    /// 			indicating that more results are available to fulfill the request and further calls will
    /// 			be needed. If <code>maxResults</code> was provided, it is possible the number of results
    /// 			to be fewer than <code>maxResults</code>.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that is only used to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: String?
    /// <p>The name of the service to use when filtering the <code>ListTasks</code> results.
    /// 			Specifying a <code>serviceName</code> limits the results to tasks that belong to that
    /// 			service.</p>
    public let serviceName: String?
    /// <p>The <code>startedBy</code> value with which to filter the task results. Specifying a
    /// 				<code>startedBy</code> value limits the results to tasks that were started with that
    /// 			value.</p>
    public let startedBy: String?

    public init (
        cluster: String? = nil,
        containerInstance: String? = nil,
        desiredStatus: DesiredStatus? = nil,
        family: String? = nil,
        launchType: LaunchType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serviceName: String? = nil,
        startedBy: String? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
        self.desiredStatus = desiredStatus
        self.family = family
        self.launchType = launchType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceName = serviceName
        self.startedBy = startedBy
    }
}
