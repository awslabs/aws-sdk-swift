// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClusterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityProviders
        case clusterName
        case configuration
        case defaultCapacityProviderStrategy
        case settings
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviders = capacityProviders {
            var capacityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviders)
            for stringlist0 in capacityProviders {
                try capacityProvidersContainer.encode(stringlist0)
            }
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let defaultCapacityProviderStrategy = defaultCapacityProviderStrategy {
            var defaultCapacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultCapacityProviderStrategy)
            for capacityproviderstrategy0 in defaultCapacityProviderStrategy {
                try defaultCapacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for clustersettings0 in settings {
                try settingsContainer.encode(clustersettings0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}
