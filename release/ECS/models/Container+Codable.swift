// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Container: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerArn
        case cpu
        case exitCode
        case gpuIds
        case healthStatus
        case image
        case imageDigest
        case lastStatus
        case managedAgents
        case memory
        case memoryReservation
        case name
        case networkBindings
        case networkInterfaces
        case reason
        case runtimeId
        case taskArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArn = containerArn {
            try encodeContainer.encode(containerArn, forKey: .containerArn)
        }
        if let cpu = cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let exitCode = exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let gpuIds = gpuIds {
            var gpuIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gpuIds)
            for gpuids0 in gpuIds {
                try gpuIdsContainer.encode(gpuids0)
            }
        }
        if let healthStatus = healthStatus {
            try encodeContainer.encode(healthStatus.rawValue, forKey: .healthStatus)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageDigest = imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let lastStatus = lastStatus {
            try encodeContainer.encode(lastStatus, forKey: .lastStatus)
        }
        if let managedAgents = managedAgents {
            var managedAgentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedAgents)
            for managedagents0 in managedAgents {
                try managedAgentsContainer.encode(managedagents0)
            }
        }
        if let memory = memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let memoryReservation = memoryReservation {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkBindings = networkBindings {
            var networkBindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkBindings)
            for networkbindings0 in networkBindings {
                try networkBindingsContainer.encode(networkbindings0)
            }
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterfaces0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterfaces0)
            }
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runtimeId = runtimeId {
            try encodeContainer.encode(runtimeId, forKey: .runtimeId)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerArn)
        containerArn = containerArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let imageDigestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let runtimeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runtimeId)
        runtimeId = runtimeIdDecoded
        let lastStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let networkBindingsContainer = try containerValues.decodeIfPresent([NetworkBinding].self, forKey: .networkBindings)
        var networkBindingsDecoded0:[NetworkBinding]? = nil
        if let networkBindingsContainer = networkBindingsContainer {
            networkBindingsDecoded0 = [NetworkBinding]()
            for structure0 in networkBindingsContainer {
                networkBindingsDecoded0?.append(structure0)
            }
        }
        networkBindings = networkBindingsDecoded0
        let networkInterfacesContainer = try containerValues.decodeIfPresent([NetworkInterface].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                networkInterfacesDecoded0?.append(structure0)
            }
        }
        networkInterfaces = networkInterfacesDecoded0
        let healthStatusDecoded = try containerValues.decodeIfPresent(HealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let managedAgentsContainer = try containerValues.decodeIfPresent([ManagedAgent].self, forKey: .managedAgents)
        var managedAgentsDecoded0:[ManagedAgent]? = nil
        if let managedAgentsContainer = managedAgentsContainer {
            managedAgentsDecoded0 = [ManagedAgent]()
            for structure0 in managedAgentsContainer {
                managedAgentsDecoded0?.append(structure0)
            }
        }
        managedAgents = managedAgentsDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cpu)
        cpu = cpuDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memory)
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memoryReservation)
        memoryReservation = memoryReservationDecoded
        let gpuIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .gpuIds)
        var gpuIdsDecoded0:[String]? = nil
        if let gpuIdsContainer = gpuIdsContainer {
            gpuIdsDecoded0 = [String]()
            for string0 in gpuIdsContainer {
                gpuIdsDecoded0?.append(string0)
            }
        }
        gpuIds = gpuIdsDecoded0
    }
}
