// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The details of an Amazon ECS service deployment. This is used only when a service uses the
/// 				<code>ECS</code> deployment controller type.</p>
public struct Deployment: Equatable {
    /// <p>The capacity provider strategy that the deployment is using.</p>
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    /// <p>The Unix timestamp for when the service deployment was created.</p>
    public let createdAt: Date?
    /// <p>The most recent desired count of tasks that was specified for the service to deploy or
    /// 			maintain.</p>
    public let desiredCount: Int
    /// <p>The number of consecutively failed tasks in the deployment. A task is considered a
    /// 			failure if the service scheduler can't launch the task, the task doesn't transition to a
    /// 				<code>RUNNING</code> state, or if it fails any of its defined health checks and is
    /// 			stopped.</p>
    /// 		       <note>
    /// 			         <p>Once a service deployment has one or more successfully running tasks, the failed
    /// 				task count resets to zero and stops being evaluated.</p>
    /// 		       </note>
    public let failedTasks: Int
    /// <p>The ID of the deployment.</p>
    public let id: String?
    /// <p>The launch type the tasks in the service are using. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
    /// 				Launch Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let launchType: LaunchType?
    /// <p>The VPC subnet and security group configuration for tasks that receive their own
    ///             elastic network interface by using the <code>awsvpc</code> networking mode.</p>
    public let networkConfiguration: NetworkConfiguration?
    /// <p>The number of tasks in the deployment that are in the <code>PENDING</code>
    /// 			status.</p>
    public let pendingCount: Int
    /// <p>The platform version on which your tasks in the service are running. A platform
    /// 			version is only specified for tasks using the Fargate launch type. If one
    /// 			is not specified, the <code>LATEST</code> platform version is used by default. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate Platform
    /// 				Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let platformVersion: String?
    /// <note>
    /// 			         <p>The <code>rolloutState</code> of a service is only returned for services that use
    /// 				the rolling update (<code>ECS</code>) deployment type that are not behind a
    /// 				Classic Load Balancer.</p>
    /// 		       </note>
    /// 		       <p>The rollout state of the deployment. When a service deployment is started, it begins
    /// 			in an <code>IN_PROGRESS</code> state. When the service reaches a steady state, the
    /// 			deployment will transition to a <code>COMPLETED</code> state. If the service fails to
    /// 			reach a steady state and circuit breaker is enabled, the deployment will transition to a
    /// 				<code>FAILED</code> state. A deployment in <code>FAILED</code> state will launch no
    /// 			new tasks. For more information, see <a>DeploymentCircuitBreaker</a>.</p>
    public let rolloutState: DeploymentRolloutState?
    /// <p>A description of the rollout state of a deployment.</p>
    public let rolloutStateReason: String?
    /// <p>The number of tasks in the deployment that are in the <code>RUNNING</code>
    /// 			status.</p>
    public let runningCount: Int
    /// <p>The status of the deployment. The following describes each state:</p>
    /// 		       <dl>
    ///             <dt>PRIMARY</dt>
    ///             <dd>
    /// 					          <p>The most recent deployment of a service.</p>
    /// 				        </dd>
    ///             <dt>ACTIVE</dt>
    ///             <dd>
    /// 					          <p>A service deployment that still has running tasks, but are in the process
    /// 						of being replaced with a new <code>PRIMARY</code> deployment.</p>
    /// 				        </dd>
    ///             <dt>INACTIVE</dt>
    ///             <dd>
    /// 					          <p>A deployment that has been completely replaced.</p>
    /// 				        </dd>
    ///          </dl>
    public let status: String?
    /// <p>The most recent task definition that was specified for the tasks in the service to
    /// 			use.</p>
    public let taskDefinition: String?
    /// <p>The Unix timestamp for when the service deployment was last updated.</p>
    public let updatedAt: Date?

    public init (
        capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil,
        createdAt: Date? = nil,
        desiredCount: Int = 0,
        failedTasks: Int = 0,
        id: String? = nil,
        launchType: LaunchType? = nil,
        networkConfiguration: NetworkConfiguration? = nil,
        pendingCount: Int = 0,
        platformVersion: String? = nil,
        rolloutState: DeploymentRolloutState? = nil,
        rolloutStateReason: String? = nil,
        runningCount: Int = 0,
        status: String? = nil,
        taskDefinition: String? = nil,
        updatedAt: Date? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.createdAt = createdAt
        self.desiredCount = desiredCount
        self.failedTasks = failedTasks
        self.id = id
        self.launchType = launchType
        self.networkConfiguration = networkConfiguration
        self.pendingCount = pendingCount
        self.platformVersion = platformVersion
        self.rolloutState = rolloutState
        self.rolloutStateReason = rolloutStateReason
        self.runningCount = runningCount
        self.status = status
        self.taskDefinition = taskDefinition
        self.updatedAt = updatedAt
    }
}
