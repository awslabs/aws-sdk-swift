// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaskSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityProviderStrategy
        case clusterArn
        case computedDesiredCount
        case createdAt
        case externalId
        case id
        case launchType
        case loadBalancers
        case networkConfiguration
        case pendingCount
        case platformVersion
        case runningCount
        case scale
        case serviceArn
        case serviceRegistries
        case stabilityStatus
        case stabilityStatusAt
        case startedBy
        case status
        case tags
        case taskDefinition
        case taskSetArn
        case updatedAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategy0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if computedDesiredCount != 0 {
            try encodeContainer.encode(computedDesiredCount, forKey: .computedDesiredCount)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let launchType = launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancers)
            for loadbalancers0 in loadBalancers {
                try loadBalancersContainer.encode(loadbalancers0)
            }
        }
        if let networkConfiguration = networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if pendingCount != 0 {
            try encodeContainer.encode(pendingCount, forKey: .pendingCount)
        }
        if let platformVersion = platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if runningCount != 0 {
            try encodeContainer.encode(runningCount, forKey: .runningCount)
        }
        if let scale = scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let serviceArn = serviceArn {
            try encodeContainer.encode(serviceArn, forKey: .serviceArn)
        }
        if let serviceRegistries = serviceRegistries {
            var serviceRegistriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRegistries)
            for serviceregistries0 in serviceRegistries {
                try serviceRegistriesContainer.encode(serviceregistries0)
            }
        }
        if let stabilityStatus = stabilityStatus {
            try encodeContainer.encode(stabilityStatus.rawValue, forKey: .stabilityStatus)
        }
        if let stabilityStatusAt = stabilityStatusAt {
            try encodeContainer.encode(stabilityStatusAt.timeIntervalSince1970, forKey: .stabilityStatusAt)
        }
        if let startedBy = startedBy {
            try encodeContainer.encode(startedBy, forKey: .startedBy)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let taskDefinition = taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
        if let taskSetArn = taskSetArn {
            try encodeContainer.encode(taskSetArn, forKey: .taskSetArn)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let taskSetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskSetArn)
        taskSetArn = taskSetArnDecoded
        let serviceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceArn)
        serviceArn = serviceArnDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let computedDesiredCountDecoded = try containerValues.decode(Int.self, forKey: .computedDesiredCount)
        computedDesiredCount = computedDesiredCountDecoded
        let pendingCountDecoded = try containerValues.decode(Int.self, forKey: .pendingCount)
        pendingCount = pendingCountDecoded
        let runningCountDecoded = try containerValues.decode(Int.self, forKey: .runningCount)
        runningCount = runningCountDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([CapacityProviderStrategyItem].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                capacityProviderStrategyDecoded0?.append(structure0)
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([LoadBalancer].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [LoadBalancer]()
            for structure0 in loadBalancersContainer {
                loadBalancersDecoded0?.append(structure0)
            }
        }
        loadBalancers = loadBalancersDecoded0
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([ServiceRegistry].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                serviceRegistriesDecoded0?.append(structure0)
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let scaleDecoded = try containerValues.decodeIfPresent(Scale.self, forKey: .scale)
        scale = scaleDecoded
        let stabilityStatusDecoded = try containerValues.decodeIfPresent(StabilityStatus.self, forKey: .stabilityStatus)
        stabilityStatus = stabilityStatusDecoded
        let stabilityStatusAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stabilityStatusAt)
        stabilityStatusAt = stabilityStatusAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
