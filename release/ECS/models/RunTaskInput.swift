// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RunTaskInput: Equatable {
    /// <p>The capacity provider strategy to use for the task.</p>
    /// 		       <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
    /// 			parameter must be omitted. If no <code>capacityProviderStrategy</code> or
    /// 				<code>launchType</code> is specified, the
    /// 				<code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    /// <p>The short name or full Amazon Resource Name (ARN) of the cluster on which to run your task.
    /// 			If you do not specify a cluster, the default cluster is assumed.</p>
    public let cluster: String?
    /// <p>The number of instantiations of the specified task to place on your cluster. You can
    /// 			specify up to 10 tasks per call.</p>
    public let count: Int?
    /// <p>Specifies whether to enable Amazon ECS managed tags for the task. For more information, see
    /// 				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS
    /// 				Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let enableECSManagedTags: Bool
    /// <p>Whether or not to enable the execute command functionality for the containers in this
    /// 			task. If <code>true</code>, this enables execute command functionality on all containers
    /// 			in the task.</p>
    public let enableExecuteCommand: Bool
    /// <p>The name of the task group to associate with the task. The default value is the family
    /// 			name of the task definition (for example, family:my-family-name).</p>
    public let group: String?
    /// <p>The infrastructure on which to run your standalone task. For more information, see
    /// 				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    /// 		       <p>The <code>FARGATE</code> launch type runs your tasks on AWS Fargate On-Demand
    /// 			infrastructure.</p>
    /// 		       <note>
    /// 			         <p>Fargate Spot infrastructure is available for use but a capacity provider
    /// 				strategy must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html">AWS Fargate capacity providers</a> in the
    /// 					<i>Amazon ECS User Guide for AWS Fargate</i>.</p>
    /// 		       </note>
    /// 		       <p>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered to your
    /// 			cluster.</p>
    /// 		       <p>The <code>EXTERNAL</code> launch type runs your tasks on your on-premise server or
    /// 			virtual machine (VM) capacity registered to your cluster.</p>
    /// 		       <p>A task can use either a launch type or a capacity provider strategy. If a
    /// 				<code>launchType</code> is specified, the <code>capacityProviderStrategy</code>
    /// 			parameter must be omitted.</p>
    public let launchType: LaunchType?
    /// <p>The network configuration for the task. This parameter is required for task
    /// 			definitions that use the <code>awsvpc</code> network mode to receive their own elastic
    /// 			network interface, and it is not supported for other network modes. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task Networking</a>
    /// 			in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let networkConfiguration: NetworkConfiguration?
    /// <p>A list of container overrides in JSON format that specify the name of a container in
    /// 			the specified task definition and the overrides it should receive. You can override the
    /// 			default command for a container (that is specified in the task definition or Docker
    /// 			image) with a <code>command</code> override. You can also override existing environment
    /// 			variables (that are specified in the task definition or Docker image) on a container or
    /// 			add new environment variables to it with an <code>environment</code> override.</p>
    /// 		       <note>
    /// 			         <p>A total of 8192 characters are allowed for overrides. This limit includes the JSON
    /// 				formatting characters of the override structure.</p>
    /// 		       </note>
    public let overrides: TaskOverride?
    /// <p>An array of placement constraint objects to use for the task. You can specify up to 10
    /// 			constraints per task (including constraints in the task definition and those specified
    /// 			at runtime).</p>
    public let placementConstraints: [PlacementConstraint]?
    /// <p>The placement strategy objects to use for the task. You can specify a maximum of five
    /// 			strategy rules per task.</p>
    public let placementStrategy: [PlacementStrategy]?
    /// <p>The platform version the task should run. A platform version is only specified for
    /// 			tasks using the Fargate launch type. If one is not specified, the
    /// 				<code>LATEST</code> platform version is used by default. For more information, see
    /// 				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate Platform
    /// 				Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let platformVersion: String?
    /// <p>Specifies whether to propagate the tags from the task definition to the task. If no
    /// 			value is specified, the tags are not propagated. Tags can only be propagated to the task
    /// 			during task creation. To add tags to a task after task creation, use the <a>TagResource</a> API action.</p>
    /// 		       <note>
    /// 			         <p>An error will be received if you specify the <code>SERVICE</code> option when
    /// 				running a task.</p>
    /// 		       </note>
    public let propagateTags: PropagateTags?
    /// <p>The reference ID to use for the task.</p>
    public let referenceId: String?
    /// <p>An optional tag specified when a task is started. For example, if you automatically
    /// 			trigger a task to run a batch process job, you could apply a unique identifier for that
    /// 			job to your task with the <code>startedBy</code> parameter. You can then identify which
    /// 			tasks belong to that job by filtering the results of a <a>ListTasks</a> call
    /// 			with the <code>startedBy</code> value. Up to 36 letters (uppercase and lowercase),
    /// 			numbers, hyphens, and underscores are allowed.</p>
    /// 		       <p>If a task is started by an Amazon ECS service, then the <code>startedBy</code> parameter
    /// 			contains the deployment ID of the service that starts it.</p>
    public let startedBy: String?
    /// <p>The metadata that you apply to the task to help you categorize and organize them. Each
    /// 			tag consists of a key and an optional value, both of which you define.</p>
    /// 		       <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?
    /// <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
    /// 			full ARN of the task definition to run. If a <code>revision</code> is not specified,
    /// 			the latest <code>ACTIVE</code> revision is used.</p>
    public let taskDefinition: String?

    public init (
        capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil,
        cluster: String? = nil,
        count: Int? = nil,
        enableECSManagedTags: Bool = false,
        enableExecuteCommand: Bool = false,
        group: String? = nil,
        launchType: LaunchType? = nil,
        networkConfiguration: NetworkConfiguration? = nil,
        overrides: TaskOverride? = nil,
        placementConstraints: [PlacementConstraint]? = nil,
        placementStrategy: [PlacementStrategy]? = nil,
        platformVersion: String? = nil,
        propagateTags: PropagateTags? = nil,
        referenceId: String? = nil,
        startedBy: String? = nil,
        tags: [Tag]? = nil,
        taskDefinition: String? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.cluster = cluster
        self.count = count
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.group = group
        self.launchType = launchType
        self.networkConfiguration = networkConfiguration
        self.overrides = overrides
        self.placementConstraints = placementConstraints
        self.placementStrategy = placementStrategy
        self.platformVersion = platformVersion
        self.propagateTags = propagateTags
        self.referenceId = referenceId
        self.startedBy = startedBy
        self.tags = tags
        self.taskDefinition = taskDefinition
    }
}
