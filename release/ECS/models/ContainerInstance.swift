// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An EC2 instance that is running the Amazon ECS agent and has been registered with a
/// 			cluster.</p>
public struct ContainerInstance: Equatable {
    /// <p>This parameter returns <code>true</code> if the agent is connected to Amazon ECS.
    /// 			Registered instances with an agent that may be unhealthy or stopped return
    /// 				<code>false</code>. Only instances connected to an agent can accept placement
    /// 			requests.</p>
    public let agentConnected: Bool
    /// <p>The status of the most recent agent update. If an update has never been requested,
    /// 			this value is <code>NULL</code>.</p>
    public let agentUpdateStatus: AgentUpdateStatus?
    /// <p>The resources attached to a container instance, such as elastic network
    /// 			interfaces.</p>
    public let attachments: [Attachment]?
    /// <p>The attributes set for the container instance, either by the Amazon ECS container agent at
    /// 			instance registration or manually with the <a>PutAttributes</a>
    /// 			operation.</p>
    public let attributes: [Attribute]?
    /// <p>The capacity provider associated with the container instance.</p>
    public let capacityProviderName: String?
    /// <p>The Amazon Resource Name (ARN) of the container instance. The ARN contains the <code>arn:aws:ecs</code> namespace, followed by the Region of the container instance, the AWS account ID of the container instance owner, the <code>container-instance</code> namespace, and then the container instance ID. For example, <code>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</code>.</p>
    public let containerInstanceArn: String?
    /// <p>The ID of the container instance. For Amazon EC2 instances, this value is the Amazon EC2
    /// 			instance ID. For external instances, this value is the AWS Systems Manager managed instance ID.</p>
    public let ec2InstanceId: String?
    /// <p>The number of tasks on the container instance that are in the <code>PENDING</code>
    /// 			status.</p>
    public let pendingTasksCount: Int
    /// <p>The Unix timestamp for when the container instance was registered.</p>
    public let registeredAt: Date?
    /// <p>For CPU and memory resource types, this parameter describes the amount of each
    /// 			resource that was available on the container instance when the container agent
    /// 			registered it with Amazon ECS. This value represents the total amount of CPU and memory that
    /// 			can be allocated on this container instance to tasks. For port resource types, this
    /// 			parameter describes the ports that were reserved by the Amazon ECS container agent when it
    /// 			registered the container instance with Amazon ECS.</p>
    public let registeredResources: [Resource]?
    /// <p>For CPU and memory resource types, this parameter describes the remaining CPU and
    /// 			memory that has not already been allocated to tasks and is therefore available for new
    /// 			tasks. For port resource types, this parameter describes the ports that were reserved by
    /// 			the Amazon ECS container agent (at instance registration time) and any task containers that
    /// 			have reserved port mappings on the host (with the <code>host</code> or
    /// 				<code>bridge</code> network mode). Any port that is not specified here is available
    /// 			for new tasks.</p>
    public let remainingResources: [Resource]?
    /// <p>The number of tasks on the container instance that are in the <code>RUNNING</code>
    /// 			status.</p>
    public let runningTasksCount: Int
    /// <p>The status of the container instance. The valid values are <code>REGISTERING</code>,
    /// 				<code>REGISTRATION_FAILED</code>, <code>ACTIVE</code>, <code>INACTIVE</code>,
    /// 				<code>DEREGISTERING</code>, or <code>DRAINING</code>.</p>
    /// 		       <p>If your account has opted in to the <code>awsvpcTrunking</code> account setting, then
    /// 			any newly registered container instance will transition to a <code>REGISTERING</code>
    /// 			status while the trunk elastic network interface is provisioned for the instance. If the
    /// 			registration fails, the instance will transition to a <code>REGISTRATION_FAILED</code>
    /// 			status. You can describe the container instance and see the reason for failure in the
    /// 				<code>statusReason</code> parameter. Once the container instance is terminated, the
    /// 			instance transitions to a <code>DEREGISTERING</code> status while the trunk elastic
    /// 			network interface is deprovisioned. The instance then transitions to an
    /// 				<code>INACTIVE</code> status.</p>
    /// 		       <p>The <code>ACTIVE</code> status indicates that the container instance can accept tasks.
    /// 			The <code>DRAINING</code> indicates that new tasks are not placed on the container
    /// 			instance and any service tasks running on the container instance are removed if
    /// 			possible. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html">Container Instance Draining</a> in the
    /// 				<i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let status: String?
    /// <p>The reason that the container instance reached its current status.</p>
    public let statusReason: String?
    /// <p>The metadata that you apply to the container instance to help you categorize and
    /// 			organize them. Each tag consists of a key and an optional value, both of which you
    /// 			define.</p>
    ///          <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?
    /// <p>The version counter for the container instance. Every time a container instance
    /// 			experiences a change that triggers a CloudWatch event, the version counter is
    /// 			incremented. If you are replicating your Amazon ECS container instance state with CloudWatch
    /// 			Events, you can compare the version of a container instance reported by the Amazon ECS APIs
    /// 			with the version reported in CloudWatch Events for the container instance (inside the
    /// 				<code>detail</code> object) to verify that the version in your event stream is
    /// 			current.</p>
    public let version: Int
    /// <p>The version information for the Amazon ECS container agent and Docker daemon running on the
    /// 			container instance.</p>
    public let versionInfo: VersionInfo?

    public init (
        agentConnected: Bool = false,
        agentUpdateStatus: AgentUpdateStatus? = nil,
        attachments: [Attachment]? = nil,
        attributes: [Attribute]? = nil,
        capacityProviderName: String? = nil,
        containerInstanceArn: String? = nil,
        ec2InstanceId: String? = nil,
        pendingTasksCount: Int = 0,
        registeredAt: Date? = nil,
        registeredResources: [Resource]? = nil,
        remainingResources: [Resource]? = nil,
        runningTasksCount: Int = 0,
        status: String? = nil,
        statusReason: String? = nil,
        tags: [Tag]? = nil,
        version: Int = 0,
        versionInfo: VersionInfo? = nil
    )
    {
        self.agentConnected = agentConnected
        self.agentUpdateStatus = agentUpdateStatus
        self.attachments = attachments
        self.attributes = attributes
        self.capacityProviderName = capacityProviderName
        self.containerInstanceArn = containerInstanceArn
        self.ec2InstanceId = ec2InstanceId
        self.pendingTasksCount = pendingTasksCount
        self.registeredAt = registeredAt
        self.registeredResources = registeredResources
        self.remainingResources = remainingResources
        self.runningTasksCount = runningTasksCount
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
        self.version = version
        self.versionInfo = versionInfo
    }
}
