// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Details on a service within a cluster</p>
public struct Service: Equatable {
    /// <p>The capacity provider strategy associated with the service.</p>
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    /// <p>The Amazon Resource Name (ARN) of the cluster that hosts the service.</p>
    public let clusterArn: String?
    /// <p>The Unix timestamp for when the service was created.</p>
    public let createdAt: Date?
    /// <p>The principal that created the service.</p>
    public let createdBy: String?
    /// <p>Optional deployment parameters that control how many tasks run during the deployment
    /// 			and the ordering of stopping and starting tasks.</p>
    public let deploymentConfiguration: DeploymentConfiguration?
    /// <p>The deployment controller type the service is using. When using the DescribeServices
    /// 			API, this field is omitted if the service is using the <code>ECS</code> deployment
    /// 			controller type.</p>
    public let deploymentController: DeploymentController?
    /// <p>The current state of deployments for the service.</p>
    public let deployments: [Deployment]?
    /// <p>The desired number of instantiations of the task definition to keep running on the
    /// 			service. This value is specified when the service is created with <a>CreateService</a>, and it can be modified with <a>UpdateService</a>.</p>
    public let desiredCount: Int
    /// <p>Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS
    /// 				Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let enableECSManagedTags: Bool
    /// <p>Whether or not the execute command functionality is enabled for the service. If
    /// 				<code>true</code>, the execute command functionality is enabled for all containers
    /// 			in tasks as part of the service.</p>
    public let enableExecuteCommand: Bool
    /// <p>The event stream for your service. A maximum of 100 of the latest events are
    /// 			displayed.</p>
    public let events: [ServiceEvent]?
    /// <p>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
    /// 			Elastic Load Balancing target health checks after a task has first started.</p>
    public let healthCheckGracePeriodSeconds: Int?
    /// <p>The infrastructure on which your service is running. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
    /// 				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let launchType: LaunchType?
    /// <p>A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the
    /// 			container name (as it appears in a container definition), and the container port to
    /// 			access from the load balancer.</p>
    public let loadBalancers: [LoadBalancer]?
    /// <p>The VPC subnet and security group configuration for tasks that receive their own
    ///             elastic network interface by using the <code>awsvpc</code> networking mode.</p>
    public let networkConfiguration: NetworkConfiguration?
    /// <p>The number of tasks in the cluster that are in the <code>PENDING</code> state.</p>
    public let pendingCount: Int
    /// <p>The placement constraints for the tasks in the service.</p>
    public let placementConstraints: [PlacementConstraint]?
    /// <p>The placement strategy that determines how tasks for the service are placed.</p>
    public let placementStrategy: [PlacementStrategy]?
    /// <p>The platform version on which to run your service. A platform version is only
    /// 			specified for tasks using the Fargate launch type. If one is not
    /// 			specified, the <code>LATEST</code> platform version is used by default. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate Platform
    /// 				Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let platformVersion: String?
    /// <p>Specifies whether to propagate the tags from the task definition or the service to the
    /// 			task. If no value is specified, the tags are not propagated.</p>
    public let propagateTags: PropagateTags?
    /// <p>The ARN of the IAM role associated with the service that allows the Amazon ECS container
    /// 			agent to register container instances with an Elastic Load Balancing load balancer.</p>
    public let roleArn: String?
    /// <p>The number of tasks in the cluster that are in the <code>RUNNING</code> state.</p>
    public let runningCount: Int
    /// <p>The scheduling strategy to use for the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Services</a>.</p>
    /// 		       <p>There are two service scheduler strategies available:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    ///                   <code>REPLICA</code>-The replica scheduling strategy places and
    /// 					maintains the desired number of tasks across your cluster. By default, the
    /// 					service scheduler spreads tasks across Availability Zones. You can use task
    /// 					placement strategies and constraints to customize task placement
    /// 					decisions.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>DAEMON</code>-The daemon scheduling strategy deploys exactly one
    /// 					task on each active container instance that meets all of the task placement
    /// 					constraints that you specify in your cluster. The service scheduler also
    /// 					evaluates the task placement constraints for running tasks and will stop tasks
    /// 					that do not meet the placement constraints.</p>
    /// 				           <note>
    /// 					             <p>Fargate tasks do not support the <code>DAEMON</code>
    /// 						scheduling strategy.</p>
    /// 				           </note>
    /// 			         </li>
    ///          </ul>
    public let schedulingStrategy: SchedulingStrategy?
    /// <p>The ARN that identifies the service. The ARN contains the <code>arn:aws:ecs</code> namespace, followed by the Region of the service, the AWS account ID of the service owner, the <code>service</code> namespace, and then the service name. For example, <code>arn:aws:ecs:region:012345678910:service/my-service</code>.</p>
    public let serviceArn: String?
    /// <p>The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within
    /// 			a cluster, but you can have similarly named services in multiple clusters within a
    /// 			Region or across multiple Regions.</p>
    public let serviceName: String?
    /// <p>The details of the service discovery registries to assign to this service. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
    /// 				Discovery</a>.</p>
    public let serviceRegistries: [ServiceRegistry]?
    /// <p>The status of the service. The valid values are <code>ACTIVE</code>,
    /// 				<code>DRAINING</code>, or <code>INACTIVE</code>.</p>
    public let status: String?
    /// <p>The metadata that you apply to the service to help you categorize and organize them.
    /// 			Each tag consists of a key and an optional value, both of which you define.</p>
    /// 		       <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?
    /// <p>The task definition to use for tasks in the service. This value is specified when the
    /// 			service is created with <a>CreateService</a>, and it can be modified with
    /// 				<a>UpdateService</a>.</p>
    public let taskDefinition: String?
    /// <p>Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an <code>EXTERNAL</code>
    /// 			deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
    /// 			many tasks are running, and whether the task set serves production traffic.</p>
    public let taskSets: [TaskSet]?

    public init (
        capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil,
        clusterArn: String? = nil,
        createdAt: Date? = nil,
        createdBy: String? = nil,
        deploymentConfiguration: DeploymentConfiguration? = nil,
        deploymentController: DeploymentController? = nil,
        deployments: [Deployment]? = nil,
        desiredCount: Int = 0,
        enableECSManagedTags: Bool = false,
        enableExecuteCommand: Bool = false,
        events: [ServiceEvent]? = nil,
        healthCheckGracePeriodSeconds: Int? = nil,
        launchType: LaunchType? = nil,
        loadBalancers: [LoadBalancer]? = nil,
        networkConfiguration: NetworkConfiguration? = nil,
        pendingCount: Int = 0,
        placementConstraints: [PlacementConstraint]? = nil,
        placementStrategy: [PlacementStrategy]? = nil,
        platformVersion: String? = nil,
        propagateTags: PropagateTags? = nil,
        roleArn: String? = nil,
        runningCount: Int = 0,
        schedulingStrategy: SchedulingStrategy? = nil,
        serviceArn: String? = nil,
        serviceName: String? = nil,
        serviceRegistries: [ServiceRegistry]? = nil,
        status: String? = nil,
        tags: [Tag]? = nil,
        taskDefinition: String? = nil,
        taskSets: [TaskSet]? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.clusterArn = clusterArn
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deploymentConfiguration = deploymentConfiguration
        self.deploymentController = deploymentController
        self.deployments = deployments
        self.desiredCount = desiredCount
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.events = events
        self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
        self.launchType = launchType
        self.loadBalancers = loadBalancers
        self.networkConfiguration = networkConfiguration
        self.pendingCount = pendingCount
        self.placementConstraints = placementConstraints
        self.placementStrategy = placementStrategy
        self.platformVersion = platformVersion
        self.propagateTags = propagateTags
        self.roleArn = roleArn
        self.runningCount = runningCount
        self.schedulingStrategy = schedulingStrategy
        self.serviceArn = serviceArn
        self.serviceName = serviceName
        self.serviceRegistries = serviceRegistries
        self.status = status
        self.tags = tags
        self.taskDefinition = taskDefinition
        self.taskSets = taskSets
    }
}
