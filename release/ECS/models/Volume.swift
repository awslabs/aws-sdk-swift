// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A data volume used in a task definition. For tasks that use the Amazon Elastic File
/// 			System (Amazon EFS), specify an <code>efsVolumeConfiguration</code>. For Windows tasks
/// 			that use Amazon FSx for Windows File Server file system, specify a
/// 				<code>fsxWindowsFileServerVolumeConfiguration</code>. For tasks that use a Docker
/// 			volume, specify a <code>DockerVolumeConfiguration</code>. For tasks that use a bind
/// 			mount host volume, specify a <code>host</code> and optional <code>sourcePath</code>. For
/// 			more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html">Using Data Volumes in
/// 				Tasks</a>.</p>
public struct Volume: Equatable {
    /// <p>This parameter is specified when you are using Docker volumes.</p>
    /// 		       <p>Windows containers only support the use of the <code>local</code> driver. To use bind
    /// 			mounts, specify the <code>host</code> parameter instead.</p>
    /// 		       <note>
    /// 			         <p>Docker volumes are not supported by tasks run on AWS Fargate.</p>
    /// 		       </note>
    public let dockerVolumeConfiguration: DockerVolumeConfiguration?
    /// <p>This parameter is specified when you are using an Amazon Elastic File System file system for task
    /// 			storage.</p>
    public let efsVolumeConfiguration: EFSVolumeConfiguration?
    /// <p>This parameter is specified when you are using Amazon FSx for Windows File Server file system for task
    /// 			storage.</p>
    public let fsxWindowsFileServerVolumeConfiguration: FSxWindowsFileServerVolumeConfiguration?
    /// <p>This parameter is specified when you are using bind mount host volumes. The contents
    /// 			of the <code>host</code> parameter determine whether your bind mount host volume
    /// 			persists on the host container instance and where it is stored. If the <code>host</code>
    /// 			parameter is empty, then the Docker daemon assigns a host path for your data volume.
    /// 			However, the data is not guaranteed to persist after the containers associated with it
    /// 			stop running.</p>
    /// 		       <p>Windows containers can mount whole directories on the same drive as
    /// 				<code>$env:ProgramData</code>. Windows containers cannot mount directories on a
    /// 			different drive, and mount point cannot be across drives. For example, you can mount
    /// 				<code>C:\my\path:C:\my\path</code> and <code>D:\:D:\</code>, but not
    /// 				<code>D:\my\path:C:\my\path</code> or <code>D:\:C:\my\path</code>.</p>
    public let host: HostVolumeProperties?
    /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the
    /// 				<code>sourceVolume</code> parameter of container definition
    /// 			<code>mountPoints</code>.</p>
    public let name: String?

    public init (
        dockerVolumeConfiguration: DockerVolumeConfiguration? = nil,
        efsVolumeConfiguration: EFSVolumeConfiguration? = nil,
        fsxWindowsFileServerVolumeConfiguration: FSxWindowsFileServerVolumeConfiguration? = nil,
        host: HostVolumeProperties? = nil,
        name: String? = nil
    )
    {
        self.dockerVolumeConfiguration = dockerVolumeConfiguration
        self.efsVolumeConfiguration = efsVolumeConfiguration
        self.fsxWindowsFileServerVolumeConfiguration = fsxWindowsFileServerVolumeConfiguration
        self.host = host
        self.name = name
    }
}
