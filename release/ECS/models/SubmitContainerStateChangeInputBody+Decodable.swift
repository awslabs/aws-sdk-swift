// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitContainerStateChangeInputBody: Equatable {
    public let cluster: String?
    public let task: String?
    public let containerName: String?
    public let runtimeId: String?
    public let status: String?
    public let exitCode: Int?
    public let reason: String?
    public let networkBindings: [NetworkBinding]?
}

extension SubmitContainerStateChangeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerName
        case exitCode
        case networkBindings
        case reason
        case runtimeId
        case status
        case task
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let taskDecoded = try containerValues.decodeIfPresent(String.self, forKey: .task)
        task = taskDecoded
        let containerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let runtimeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runtimeId)
        runtimeId = runtimeIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let networkBindingsContainer = try containerValues.decodeIfPresent([NetworkBinding].self, forKey: .networkBindings)
        var networkBindingsDecoded0:[NetworkBinding]? = nil
        if let networkBindingsContainer = networkBindingsContainer {
            networkBindingsDecoded0 = [NetworkBinding]()
            for structure0 in networkBindingsContainer {
                networkBindingsDecoded0?.append(structure0)
            }
        }
        networkBindings = networkBindingsDecoded0
    }
}
