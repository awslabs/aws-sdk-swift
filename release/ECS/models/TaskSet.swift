// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an <code>EXTERNAL</code>
/// 			deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
/// 			many tasks are running, and whether the task set serves production traffic.</p>
public struct TaskSet: Equatable {
    /// <p>The capacity provider strategy associated with the task set.</p>
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    /// <p>The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists
    /// 			in.</p>
    public let clusterArn: String?
    /// <p>The computed desired count for the task set. This is calculated by multiplying the
    /// 			service's <code>desiredCount</code> by the task set's <code>scale</code> percentage. The
    /// 			result is always rounded up. For example, if the computed desired count is 1.2, it
    /// 			rounds up to 2 tasks.</p>
    public let computedDesiredCount: Int
    /// <p>The Unix timestamp for when the task set was created.</p>
    public let createdAt: Date?
    /// <p>The external ID associated with the task set.</p>
    /// 		       <p>If a task set is created by an AWS CodeDeploy deployment, the <code>externalId</code> parameter
    /// 			contains the AWS CodeDeploy deployment ID.</p>
    /// 		       <p>If a task set is created for an external deployment and is associated with a service
    /// 			discovery registry, the <code>externalId</code> parameter contains the
    /// 				<code>ECS_TASK_SET_EXTERNAL_ID</code> AWS Cloud Map attribute.</p>
    public let externalId: String?
    /// <p>The ID of the task set.</p>
    public let id: String?
    /// <p>The launch type the tasks in the task set are using. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
    /// 				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let launchType: LaunchType?
    /// <p>Details on a load balancer that is used with a task set.</p>
    public let loadBalancers: [LoadBalancer]?
    /// <p>The network configuration for the task set.</p>
    public let networkConfiguration: NetworkConfiguration?
    /// <p>The number of tasks in the task set that are in the <code>PENDING</code> status during
    /// 			a deployment. A task in the <code>PENDING</code> state is preparing to enter the
    /// 				<code>RUNNING</code> state. A task set enters the <code>PENDING</code> status when
    /// 			it launches for the first time or when it is restarted after being in the
    /// 				<code>STOPPED</code> state.</p>
    public let pendingCount: Int
    /// <p>The AWS Fargate platform version on which the tasks in the task set are running. A
    /// 			platform version is only specified for tasks run on AWS Fargate. For more information, see
    /// 				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate platform
    /// 				versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let platformVersion: String?
    /// <p>The number of tasks in the task set that are in the <code>RUNNING</code> status during
    /// 			a deployment. A task in the <code>RUNNING</code> state is running and ready for
    /// 			use.</p>
    public let runningCount: Int
    /// <p>A floating-point percentage of the desired number of tasks to place and keep running
    /// 			in the task set.</p>
    public let scale: Scale?
    /// <p>The Amazon Resource Name (ARN) of the service the task set exists in.</p>
    public let serviceArn: String?
    /// <p>The details of the service discovery registries to assign to this task set. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
    /// 				discovery</a>.</p>
    public let serviceRegistries: [ServiceRegistry]?
    /// <p>The stability status, which indicates whether the task set has reached a steady state.
    /// 			If the following conditions are met, the task set will be in
    /// 			<code>STEADY_STATE</code>:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>The task <code>runningCount</code> is equal to the
    /// 						<code>computedDesiredCount</code>.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>The <code>pendingCount</code> is <code>0</code>.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>There are no tasks running on container instances in the <code>DRAINING</code>
    /// 					status.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>All tasks are reporting a healthy status from the load balancers, service
    /// 					discovery, and container health checks.</p>
    /// 			         </li>
    ///          </ul>
    /// 		       <p>If any of those conditions are not met, the stability status returns
    /// 				<code>STABILIZING</code>.</p>
    public let stabilityStatus: StabilityStatus?
    /// <p>The Unix timestamp for when the task set stability status was retrieved.</p>
    public let stabilityStatusAt: Date?
    /// <p>The tag specified when a task set is started. If the task set is created by an AWS CodeDeploy
    /// 			deployment, the <code>startedBy</code> parameter is <code>CODE_DEPLOY</code>. For a task
    /// 			set created for an external deployment, the startedBy field isn't used.</p>
    public let startedBy: String?
    /// <p>The status of the task set. The following describes each state:</p>
    /// 		       <dl>
    ///             <dt>PRIMARY</dt>
    ///             <dd>
    /// 					          <p>The task set is serving production traffic.</p>
    /// 				        </dd>
    ///             <dt>ACTIVE</dt>
    ///             <dd>
    /// 					          <p>The task set is not serving production traffic.</p>
    /// 				        </dd>
    ///             <dt>DRAINING</dt>
    ///             <dd>
    /// 					          <p>The tasks in the task set are being stopped and their corresponding
    /// 						targets are being deregistered from their target group.</p>
    /// 				        </dd>
    ///          </dl>
    public let status: String?
    /// <p>The metadata that you apply to the task set to help you categorize and organize them.
    /// 			Each tag consists of a key and an optional value, both of which you define.</p>
    /// 		       <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?
    /// <p>The task definition the task set is using.</p>
    public let taskDefinition: String?
    /// <p>The Amazon Resource Name (ARN) of the task set.</p>
    public let taskSetArn: String?
    /// <p>The Unix timestamp for when the task set was last updated.</p>
    public let updatedAt: Date?

    public init (
        capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil,
        clusterArn: String? = nil,
        computedDesiredCount: Int = 0,
        createdAt: Date? = nil,
        externalId: String? = nil,
        id: String? = nil,
        launchType: LaunchType? = nil,
        loadBalancers: [LoadBalancer]? = nil,
        networkConfiguration: NetworkConfiguration? = nil,
        pendingCount: Int = 0,
        platformVersion: String? = nil,
        runningCount: Int = 0,
        scale: Scale? = nil,
        serviceArn: String? = nil,
        serviceRegistries: [ServiceRegistry]? = nil,
        stabilityStatus: StabilityStatus? = nil,
        stabilityStatusAt: Date? = nil,
        startedBy: String? = nil,
        status: String? = nil,
        tags: [Tag]? = nil,
        taskDefinition: String? = nil,
        taskSetArn: String? = nil,
        updatedAt: Date? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.clusterArn = clusterArn
        self.computedDesiredCount = computedDesiredCount
        self.createdAt = createdAt
        self.externalId = externalId
        self.id = id
        self.launchType = launchType
        self.loadBalancers = loadBalancers
        self.networkConfiguration = networkConfiguration
        self.pendingCount = pendingCount
        self.platformVersion = platformVersion
        self.runningCount = runningCount
        self.scale = scale
        self.serviceArn = serviceArn
        self.serviceRegistries = serviceRegistries
        self.stabilityStatus = stabilityStatus
        self.stabilityStatusAt = stabilityStatusAt
        self.startedBy = startedBy
        self.status = status
        self.tags = tags
        self.taskDefinition = taskDefinition
        self.taskSetArn = taskSetArn
        self.updatedAt = updatedAt
    }
}
