// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerStateChange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerName
        case exitCode
        case imageDigest
        case networkBindings
        case reason
        case runtimeId
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let exitCode = exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let imageDigest = imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let networkBindings = networkBindings {
            var networkBindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkBindings)
            for networkbindings0 in networkBindings {
                try networkBindingsContainer.encode(networkbindings0)
            }
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runtimeId = runtimeId {
            try encodeContainer.encode(runtimeId, forKey: .runtimeId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let imageDigestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let runtimeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runtimeId)
        runtimeId = runtimeIdDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let networkBindingsContainer = try containerValues.decodeIfPresent([NetworkBinding].self, forKey: .networkBindings)
        var networkBindingsDecoded0:[NetworkBinding]? = nil
        if let networkBindingsContainer = networkBindingsContainer {
            networkBindingsDecoded0 = [NetworkBinding]()
            for structure0 in networkBindingsContainer {
                networkBindingsDecoded0?.append(structure0)
            }
        }
        networkBindings = networkBindingsDecoded0
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}
