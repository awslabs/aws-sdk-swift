// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitTaskStateChangeInputBody: Equatable {
    public let cluster: String?
    public let task: String?
    public let status: String?
    public let reason: String?
    public let containers: [ContainerStateChange]?
    public let attachments: [AttachmentStateChange]?
    public let managedAgents: [ManagedAgentStateChange]?
    public let pullStartedAt: Date?
    public let pullStoppedAt: Date?
    public let executionStoppedAt: Date?
}

extension SubmitTaskStateChangeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachments
        case cluster
        case containers
        case executionStoppedAt
        case managedAgents
        case pullStartedAt
        case pullStoppedAt
        case reason
        case status
        case task
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let taskDecoded = try containerValues.decodeIfPresent(String.self, forKey: .task)
        task = taskDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let containersContainer = try containerValues.decodeIfPresent([ContainerStateChange].self, forKey: .containers)
        var containersDecoded0:[ContainerStateChange]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [ContainerStateChange]()
            for structure0 in containersContainer {
                containersDecoded0?.append(structure0)
            }
        }
        containers = containersDecoded0
        let attachmentsContainer = try containerValues.decodeIfPresent([AttachmentStateChange].self, forKey: .attachments)
        var attachmentsDecoded0:[AttachmentStateChange]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [AttachmentStateChange]()
            for structure0 in attachmentsContainer {
                attachmentsDecoded0?.append(structure0)
            }
        }
        attachments = attachmentsDecoded0
        let managedAgentsContainer = try containerValues.decodeIfPresent([ManagedAgentStateChange].self, forKey: .managedAgents)
        var managedAgentsDecoded0:[ManagedAgentStateChange]? = nil
        if let managedAgentsContainer = managedAgentsContainer {
            managedAgentsDecoded0 = [ManagedAgentStateChange]()
            for structure0 in managedAgentsContainer {
                managedAgentsDecoded0?.append(structure0)
            }
        }
        managedAgents = managedAgentsDecoded0
        let pullStartedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .pullStartedAt)
        pullStartedAt = pullStartedAtDecoded
        let pullStoppedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .pullStoppedAt)
        pullStoppedAt = pullStoppedAtDecoded
        let executionStoppedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .executionStoppedAt)
        executionStoppedAt = executionStoppedAtDecoded
    }
}
