// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthCheck: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case command
        case interval
        case retries
        case startPeriod
        case timeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let interval = interval {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let retries = retries {
            try encodeContainer.encode(retries, forKey: .retries)
        }
        if let startPeriod = startPeriod {
            try encodeContainer.encode(startPeriod, forKey: .startPeriod)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandContainer = try containerValues.decodeIfPresent([String].self, forKey: .command)
        var commandDecoded0:[String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [String]()
            for string0 in commandContainer {
                commandDecoded0?.append(string0)
            }
        }
        command = commandDecoded0
        let intervalDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .interval)
        interval = intervalDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let retriesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retries)
        retries = retriesDecoded
        let startPeriodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startPeriod)
        startPeriod = startPeriodDecoded
    }
}
