// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServiceInputBody: Equatable {
    public let cluster: String?
    public let serviceName: String?
    public let taskDefinition: String?
    public let loadBalancers: [LoadBalancer]?
    public let serviceRegistries: [ServiceRegistry]?
    public let desiredCount: Int?
    public let clientToken: String?
    public let launchType: LaunchType?
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    public let platformVersion: String?
    public let role: String?
    public let deploymentConfiguration: DeploymentConfiguration?
    public let placementConstraints: [PlacementConstraint]?
    public let placementStrategy: [PlacementStrategy]?
    public let networkConfiguration: NetworkConfiguration?
    public let healthCheckGracePeriodSeconds: Int?
    public let schedulingStrategy: SchedulingStrategy?
    public let deploymentController: DeploymentController?
    public let tags: [Tag]?
    public let enableECSManagedTags: Bool
    public let propagateTags: PropagateTags?
    public let enableExecuteCommand: Bool
}

extension CreateServiceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityProviderStrategy
        case clientToken
        case cluster
        case deploymentConfiguration
        case deploymentController
        case desiredCount
        case enableECSManagedTags
        case enableExecuteCommand
        case healthCheckGracePeriodSeconds
        case launchType
        case loadBalancers
        case networkConfiguration
        case placementConstraints
        case placementStrategy
        case platformVersion
        case propagateTags
        case role
        case schedulingStrategy
        case serviceName
        case serviceRegistries
        case tags
        case taskDefinition
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([LoadBalancer].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [LoadBalancer]()
            for structure0 in loadBalancersContainer {
                loadBalancersDecoded0?.append(structure0)
            }
        }
        loadBalancers = loadBalancersDecoded0
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([ServiceRegistry].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                serviceRegistriesDecoded0?.append(structure0)
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let desiredCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredCount)
        desiredCount = desiredCountDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([CapacityProviderStrategyItem].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                capacityProviderStrategyDecoded0?.append(structure0)
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let roleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .role)
        role = roleDecoded
        let deploymentConfigurationDecoded = try containerValues.decodeIfPresent(DeploymentConfiguration.self, forKey: .deploymentConfiguration)
        deploymentConfiguration = deploymentConfigurationDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([PlacementConstraint].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                placementConstraintsDecoded0?.append(structure0)
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([PlacementStrategy].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                placementStrategyDecoded0?.append(structure0)
            }
        }
        placementStrategy = placementStrategyDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let healthCheckGracePeriodSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckGracePeriodSeconds)
        healthCheckGracePeriodSeconds = healthCheckGracePeriodSecondsDecoded
        let schedulingStrategyDecoded = try containerValues.decodeIfPresent(SchedulingStrategy.self, forKey: .schedulingStrategy)
        schedulingStrategy = schedulingStrategyDecoded
        let deploymentControllerDecoded = try containerValues.decodeIfPresent(DeploymentController.self, forKey: .deploymentController)
        deploymentController = deploymentControllerDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let enableECSManagedTagsDecoded = try containerValues.decode(Bool.self, forKey: .enableECSManagedTags)
        enableECSManagedTags = enableECSManagedTagsDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decode(Bool.self, forKey: .enableExecuteCommand)
        enableExecuteCommand = enableExecuteCommandDecoded
    }
}
