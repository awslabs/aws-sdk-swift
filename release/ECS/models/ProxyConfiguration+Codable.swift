// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProxyConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerName
        case properties
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for proxyconfigurationproperties0 in properties {
                try propertiesContainer.encode(proxyconfigurationproperties0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ProxyConfigurationType.self, forKey: .type)
        type = typeDecoded
        let containerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([KeyValuePair].self, forKey: .properties)
        var propertiesDecoded0:[KeyValuePair]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [KeyValuePair]()
            for structure0 in propertiesContainer {
                propertiesDecoded0?.append(structure0)
            }
        }
        properties = propertiesDecoded0
    }
}
