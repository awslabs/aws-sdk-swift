// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubmitTaskStateChangeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachments
        case cluster
        case containers
        case executionStoppedAt
        case managedAgents
        case pullStartedAt
        case pullStoppedAt
        case reason
        case status
        case task
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachments = attachments {
            var attachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachments)
            for attachmentstatechanges0 in attachments {
                try attachmentsContainer.encode(attachmentstatechanges0)
            }
        }
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for containerstatechanges0 in containers {
                try containersContainer.encode(containerstatechanges0)
            }
        }
        if let executionStoppedAt = executionStoppedAt {
            try encodeContainer.encode(executionStoppedAt.timeIntervalSince1970, forKey: .executionStoppedAt)
        }
        if let managedAgents = managedAgents {
            var managedAgentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedAgents)
            for managedagentstatechanges0 in managedAgents {
                try managedAgentsContainer.encode(managedagentstatechanges0)
            }
        }
        if let pullStartedAt = pullStartedAt {
            try encodeContainer.encode(pullStartedAt.timeIntervalSince1970, forKey: .pullStartedAt)
        }
        if let pullStoppedAt = pullStoppedAt {
            try encodeContainer.encode(pullStoppedAt.timeIntervalSince1970, forKey: .pullStoppedAt)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
    }
}
