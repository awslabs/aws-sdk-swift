// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecuteCommandLogConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchEncryptionEnabled
        case cloudWatchLogGroupName
        case s3BucketName
        case s3EncryptionEnabled
        case s3KeyPrefix
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cloudWatchEncryptionEnabled != false {
            try encodeContainer.encode(cloudWatchEncryptionEnabled, forKey: .cloudWatchEncryptionEnabled)
        }
        if let cloudWatchLogGroupName = cloudWatchLogGroupName {
            try encodeContainer.encode(cloudWatchLogGroupName, forKey: .cloudWatchLogGroupName)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if s3EncryptionEnabled != false {
            try encodeContainer.encode(s3EncryptionEnabled, forKey: .s3EncryptionEnabled)
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudWatchLogGroupName)
        cloudWatchLogGroupName = cloudWatchLogGroupNameDecoded
        let cloudWatchEncryptionEnabledDecoded = try containerValues.decode(Bool.self, forKey: .cloudWatchEncryptionEnabled)
        cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabledDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3EncryptionEnabledDecoded = try containerValues.decode(Bool.self, forKey: .s3EncryptionEnabled)
        s3EncryptionEnabled = s3EncryptionEnabledDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
    }
}
