// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Details on a task in a cluster.</p>
public struct Task: Equatable {
    /// <p>The Elastic Network Adapter associated with the task if the task uses the
    /// 				<code>awsvpc</code> network mode.</p>
    public let attachments: [Attachment]?
    /// <p>The attributes of the task</p>
    public let attributes: [Attribute]?
    /// <p>The availability zone of the task.</p>
    public let availabilityZone: String?
    /// <p>The capacity provider associated with the task.</p>
    public let capacityProviderName: String?
    /// <p>The ARN of the cluster that hosts the task.</p>
    public let clusterArn: String?
    /// <p>The connectivity status of a task.</p>
    public let connectivity: Connectivity?
    /// <p>The Unix timestamp for when the task last went into <code>CONNECTED</code>
    /// 			status.</p>
    public let connectivityAt: Date?
    /// <p>The ARN of the container instances that host the task.</p>
    public let containerInstanceArn: String?
    /// <p>The containers associated with the task.</p>
    public let containers: [Container]?
    /// <p>The number of CPU units used by the task as expressed in a task definition. It can be
    /// 			expressed as an integer using CPU units, for example <code>1024</code>. It can also be
    /// 			expressed as a string using vCPUs, for example <code>1 vCPU</code> or <code>1
    /// 				vcpu</code>. String values are converted to an integer indicating the CPU units when
    /// 			the task definition is registered.</p>
    /// 		       <p>If you are using the EC2 launch type, this field is optional. Supported
    /// 			values are between <code>128</code> CPU units (<code>0.125</code> vCPUs) and
    /// 				<code>10240</code> CPU units (<code>10</code> vCPUs).</p>
    /// 		       <p>If you are using the Fargate launch type, this field is required and you
    /// 			must use one of the following values, which determines your range of supported values
    /// 			for the <code>memory</code> parameter:</p>
    ///          <ul>
    ///             <li>
    ///                 <p>256 (.25 vCPU) - Available <code>memory</code> values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)</p>
    ///             </li>
    ///             <li>
    ///                 <p>512 (.5 vCPU) - Available <code>memory</code> values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</p>
    ///             </li>
    ///             <li>
    ///                 <p>1024 (1 vCPU) - Available <code>memory</code> values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)</p>
    ///             </li>
    ///             <li>
    ///                 <p>2048 (2 vCPU) - Available <code>memory</code> values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)</p>
    ///             </li>
    ///             <li>
    ///                 <p>4096 (4 vCPU) - Available <code>memory</code> values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)</p>
    ///             </li>
    ///          </ul>
    public let cpu: String?
    /// <p>The Unix timestamp for when the task was created (the task entered the
    /// 				<code>PENDING</code> state).</p>
    public let createdAt: Date?
    /// <p>The desired status of the task. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html">Task
    /// 			Lifecycle</a>.</p>
    public let desiredStatus: String?
    /// <p>Whether or not execute command functionality is enabled for this task. If
    /// 				<code>true</code>, this enables execute command functionality on all containers in
    /// 			the task.</p>
    public let enableExecuteCommand: Bool
    /// <p>The ephemeral storage settings for the task.</p>
    public let ephemeralStorage: EphemeralStorage?
    /// <p>The Unix timestamp for when the task execution stopped.</p>
    public let executionStoppedAt: Date?
    /// <p>The name of the task group associated with the task.</p>
    public let group: String?
    /// <p>The health status for the task, which is determined by the health of the essential
    /// 			containers in the task. If all essential containers in the task are reporting as
    /// 				<code>HEALTHY</code>, then the task status also reports as <code>HEALTHY</code>. If
    /// 			any essential containers in the task are reporting as <code>UNHEALTHY</code> or
    /// 				<code>UNKNOWN</code>, then the task status also reports as <code>UNHEALTHY</code> or
    /// 				<code>UNKNOWN</code>, accordingly.</p>
    /// 		       <note>
    /// 			         <p>The Amazon ECS container agent does not monitor or report on Docker health checks that
    /// 				are embedded in a container image (such as those specified in a parent image or from
    /// 				the image's Dockerfile) and not specified in the container definition. Health check
    /// 				parameters that are specified in a container definition override any Docker health
    /// 				checks that exist in the container image.</p>
    /// 		       </note>
    public let healthStatus: HealthStatus?
    /// <p>The Elastic Inference accelerator associated with the task.</p>
    public let inferenceAccelerators: [InferenceAccelerator]?
    /// <p>The last known status of the task. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html">Task
    /// 				Lifecycle</a>.</p>
    public let lastStatus: String?
    /// <p>The infrastructure on which your task is running. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
    /// 				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let launchType: LaunchType?
    /// <p>The amount of memory (in MiB) used by the task as expressed in a task definition. It
    /// 			can be expressed as an integer using MiB, for example <code>1024</code>. It can also be
    /// 			expressed as a string using GB, for example <code>1GB</code> or <code>1 GB</code>.
    /// 			String values are converted to an integer indicating the MiB when the task definition is
    /// 			registered.</p>
    /// 		       <p>If you are using the EC2 launch type, this field is optional.</p>
    /// 		       <p>If you are using the Fargate launch type, this field is required and you
    /// 			must use one of the following values, which determines your range of supported values
    /// 			for the <code>cpu</code> parameter:</p>
    ///          <ul>
    ///             <li>
    ///                 <p>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <code>cpu</code> values: 256 (.25 vCPU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available <code>cpu</code> values: 512 (.5 vCPU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available <code>cpu</code> values: 1024 (1 vCPU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 2048 (2 vCPU)</p>
    ///             </li>
    ///             <li>
    ///                 <p>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 4096 (4 vCPU)</p>
    ///             </li>
    ///          </ul>
    public let memory: String?
    /// <p>One or more container overrides.</p>
    public let overrides: TaskOverride?
    /// <p>The platform version on which your task is running. A platform version is only
    /// 			specified for tasks using the Fargate launch type. If one is not
    /// 			specified, the <code>LATEST</code> platform version is used by default. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS Fargate Platform
    /// 				Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let platformVersion: String?
    /// <p>The Unix timestamp for when the container image pull began.</p>
    public let pullStartedAt: Date?
    /// <p>The Unix timestamp for when the container image pull completed.</p>
    public let pullStoppedAt: Date?
    /// <p>The Unix timestamp for when the task started (the task transitioned from the
    /// 				<code>PENDING</code> state to the <code>RUNNING</code> state).</p>
    public let startedAt: Date?
    /// <p>The tag specified when a task is started. If the task is started by an Amazon ECS service,
    /// 			then the <code>startedBy</code> parameter contains the deployment ID of the service that
    /// 			starts it.</p>
    public let startedBy: String?
    /// <p>The stop code indicating why a task was stopped. The <code>stoppedReason</code> may
    /// 			contain additional details.</p>
    public let stopCode: TaskStopCode?
    /// <p>The Unix timestamp for when the task was stopped (the task transitioned from the
    /// 				<code>RUNNING</code> state to the <code>STOPPED</code> state).</p>
    public let stoppedAt: Date?
    /// <p>The reason that the task was stopped.</p>
    public let stoppedReason: String?
    /// <p>The Unix timestamp for when the task stops (transitions from the <code>RUNNING</code>
    /// 			state to <code>STOPPED</code>).</p>
    public let stoppingAt: Date?
    /// <p>The metadata that you apply to the task to help you categorize and organize them. Each
    /// 			tag consists of a key and an optional value, both of which you define.</p>
    /// 		       <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?
    /// <p>The Amazon Resource Name (ARN) of the task.</p>
    public let taskArn: String?
    /// <p>The ARN of the task definition that creates the task.</p>
    public let taskDefinitionArn: String?
    /// <p>The version counter for the task. Every time a task experiences a change that triggers
    /// 			a CloudWatch event, the version counter is incremented. If you are replicating your Amazon ECS task
    /// 			state with CloudWatch Events, you can compare the version of a task reported by the Amazon ECS API
    /// 			actions with the version reported in CloudWatch Events for the task (inside the
    /// 				<code>detail</code> object) to verify that the version in your event stream is
    /// 			current.</p>
    public let version: Int

    public init (
        attachments: [Attachment]? = nil,
        attributes: [Attribute]? = nil,
        availabilityZone: String? = nil,
        capacityProviderName: String? = nil,
        clusterArn: String? = nil,
        connectivity: Connectivity? = nil,
        connectivityAt: Date? = nil,
        containerInstanceArn: String? = nil,
        containers: [Container]? = nil,
        cpu: String? = nil,
        createdAt: Date? = nil,
        desiredStatus: String? = nil,
        enableExecuteCommand: Bool = false,
        ephemeralStorage: EphemeralStorage? = nil,
        executionStoppedAt: Date? = nil,
        group: String? = nil,
        healthStatus: HealthStatus? = nil,
        inferenceAccelerators: [InferenceAccelerator]? = nil,
        lastStatus: String? = nil,
        launchType: LaunchType? = nil,
        memory: String? = nil,
        overrides: TaskOverride? = nil,
        platformVersion: String? = nil,
        pullStartedAt: Date? = nil,
        pullStoppedAt: Date? = nil,
        startedAt: Date? = nil,
        startedBy: String? = nil,
        stopCode: TaskStopCode? = nil,
        stoppedAt: Date? = nil,
        stoppedReason: String? = nil,
        stoppingAt: Date? = nil,
        tags: [Tag]? = nil,
        taskArn: String? = nil,
        taskDefinitionArn: String? = nil,
        version: Int = 0
    )
    {
        self.attachments = attachments
        self.attributes = attributes
        self.availabilityZone = availabilityZone
        self.capacityProviderName = capacityProviderName
        self.clusterArn = clusterArn
        self.connectivity = connectivity
        self.connectivityAt = connectivityAt
        self.containerInstanceArn = containerInstanceArn
        self.containers = containers
        self.cpu = cpu
        self.createdAt = createdAt
        self.desiredStatus = desiredStatus
        self.enableExecuteCommand = enableExecuteCommand
        self.ephemeralStorage = ephemeralStorage
        self.executionStoppedAt = executionStoppedAt
        self.group = group
        self.healthStatus = healthStatus
        self.inferenceAccelerators = inferenceAccelerators
        self.lastStatus = lastStatus
        self.launchType = launchType
        self.memory = memory
        self.overrides = overrides
        self.platformVersion = platformVersion
        self.pullStartedAt = pullStartedAt
        self.pullStoppedAt = pullStoppedAt
        self.startedAt = startedAt
        self.startedBy = startedBy
        self.stopCode = stopCode
        self.stoppedAt = stoppedAt
        self.stoppedReason = stoppedReason
        self.stoppingAt = stoppingAt
        self.tags = tags
        self.taskArn = taskArn
        self.taskDefinitionArn = taskDefinitionArn
        self.version = version
    }
}
