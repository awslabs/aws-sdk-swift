// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A regional grouping of one or more container instances on which you can run task
/// 			requests. Each account receives a default cluster the first time you use the Amazon ECS
/// 			service, but you may also create other clusters. Clusters may contain more than one
/// 			instance type simultaneously.</p>
public struct Cluster: Equatable {
    /// <p>The number of services that are running on the cluster in an <code>ACTIVE</code>
    /// 			state. You can view these services with <a>ListServices</a>.</p>
    public let activeServicesCount: Int
    /// <p>The resources attached to a cluster. When using a capacity provider with a cluster,
    /// 			the Auto Scaling plan that is created will be returned as a cluster attachment.</p>
    public let attachments: [Attachment]?
    /// <p>The status of the capacity providers associated with the cluster. The following are
    /// 			the states that will be returned:</p>
    /// 		       <dl>
    ///             <dt>UPDATE_IN_PROGRESS</dt>
    ///             <dd>
    /// 					          <p>The available capacity providers for the cluster are updating. This occurs
    /// 						when the Auto Scaling plan is provisioning or deprovisioning.</p>
    /// 				        </dd>
    ///             <dt>UPDATE_COMPLETE</dt>
    ///             <dd>
    /// 					          <p>The capacity providers have successfully updated.</p>
    /// 				        </dd>
    ///             <dt>UPDATE_FAILED</dt>
    ///             <dd>
    /// 					          <p>The capacity provider updates failed.</p>
    /// 				        </dd>
    ///          </dl>
    public let attachmentsStatus: String?
    /// <p>The capacity providers associated with the cluster.</p>
    public let capacityProviders: [String]?
    /// <p>The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the <code>arn:aws:ecs</code> namespace, followed by the Region of the cluster, the AWS account ID of the cluster owner, the <code>cluster</code> namespace, and then the cluster name. For example, <code>arn:aws:ecs:region:012345678910:cluster/test</code>.</p>
    public let clusterArn: String?
    /// <p>A user-generated string that you use to identify your cluster.</p>
    public let clusterName: String?
    /// <p>The execute command configuration for the cluster.</p>
    public let configuration: ClusterConfiguration?
    /// <p>The default capacity provider strategy for the cluster. When services or tasks are run
    /// 			in the cluster with no launch type or capacity provider strategy specified, the default
    /// 			capacity provider strategy is used.</p>
    public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]?
    /// <p>The number of tasks in the cluster that are in the <code>PENDING</code> state.</p>
    public let pendingTasksCount: Int
    /// <p>The number of container instances registered into the cluster. This includes container
    /// 			instances in both <code>ACTIVE</code> and <code>DRAINING</code> status.</p>
    public let registeredContainerInstancesCount: Int
    /// <p>The number of tasks in the cluster that are in the <code>RUNNING</code> state.</p>
    public let runningTasksCount: Int
    /// <p>The settings for the cluster. This parameter indicates whether CloudWatch Container Insights
    /// 			is enabled or disabled for a cluster.</p>
    public let settings: [ClusterSetting]?
    /// <p>Additional information about your clusters that are separated by launch type,
    /// 			including:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>runningEC2TasksCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>RunningFargateTasksCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>pendingEC2TasksCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>pendingFargateTasksCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>activeEC2ServiceCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>activeFargateServiceCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>drainingEC2ServiceCount</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>drainingFargateServiceCount</p>
    /// 			         </li>
    ///          </ul>
    public let statistics: [KeyValuePair]?
    /// <p>The status of the cluster. The following are the possible states that will be
    /// 			returned.</p>
    /// 		       <dl>
    ///             <dt>ACTIVE</dt>
    ///             <dd>
    /// 					          <p>The cluster is ready to accept tasks and if applicable you can register
    /// 						container instances with the cluster.</p>
    /// 				        </dd>
    ///             <dt>PROVISIONING</dt>
    ///             <dd>
    /// 					          <p>The cluster has capacity providers associated with it and the resources
    /// 						needed for the capacity provider are being created.</p>
    /// 				        </dd>
    ///             <dt>DEPROVISIONING</dt>
    ///             <dd>
    /// 					          <p>The cluster has capacity providers associated with it and the resources
    /// 						needed for the capacity provider are being deleted.</p>
    /// 				        </dd>
    ///             <dt>FAILED</dt>
    ///             <dd>
    /// 					          <p>The cluster has capacity providers associated with it and the resources
    /// 						needed for the capacity provider have failed to create.</p>
    /// 				        </dd>
    ///             <dt>INACTIVE</dt>
    ///             <dd>
    /// 					          <p>The cluster has been deleted. Clusters with an <code>INACTIVE</code>
    /// 						status may remain discoverable in your account for a period of time.
    /// 						However, this behavior is subject to change in the future, so you should not
    /// 						rely on <code>INACTIVE</code> clusters persisting.</p>
    /// 				        </dd>
    ///          </dl>
    public let status: String?
    /// <p>The metadata that you apply to the cluster to help you categorize and organize them.
    /// 			Each tag consists of a key and an optional value, both of which you define.</p>
    /// 		       <p>The following basic restrictions apply to tags:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Maximum number of tags per resource - 50</p>
    ///             </li>
    ///             <li>
    ///                 <p>For each resource, each tag key must be unique, and each tag key can have only
    ///                     one value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum key length - 128 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>Maximum value length - 256 Unicode characters in UTF-8</p>
    ///             </li>
    ///             <li>
    ///                 <p>If your tagging schema is used across multiple services and resources,
    ///                     remember that other services may have restrictions on allowed characters.
    ///                     Generally allowed characters are: letters, numbers, and spaces representable in
    ///                     UTF-8, and the following characters: + - = . _ : / @.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Tag keys and values are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
    ///                     combination of such as a prefix for either keys or values as it is reserved for
    ///                     AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
    ///                     this prefix do not count against your tags per resource limit.</p>
    ///             </li>
    ///          </ul>
    public let tags: [Tag]?

    public init (
        activeServicesCount: Int = 0,
        attachments: [Attachment]? = nil,
        attachmentsStatus: String? = nil,
        capacityProviders: [String]? = nil,
        clusterArn: String? = nil,
        clusterName: String? = nil,
        configuration: ClusterConfiguration? = nil,
        defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]? = nil,
        pendingTasksCount: Int = 0,
        registeredContainerInstancesCount: Int = 0,
        runningTasksCount: Int = 0,
        settings: [ClusterSetting]? = nil,
        statistics: [KeyValuePair]? = nil,
        status: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.activeServicesCount = activeServicesCount
        self.attachments = attachments
        self.attachmentsStatus = attachmentsStatus
        self.capacityProviders = capacityProviders
        self.clusterArn = clusterArn
        self.clusterName = clusterName
        self.configuration = configuration
        self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
        self.pendingTasksCount = pendingTasksCount
        self.registeredContainerInstancesCount = registeredContainerInstancesCount
        self.runningTasksCount = runningTasksCount
        self.settings = settings
        self.statistics = statistics
        self.status = status
        self.tags = tags
    }
}
