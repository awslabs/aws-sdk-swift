// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListTasksInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerInstance
        case desiredStatus
        case family
        case launchType
        case maxResults
        case nextToken
        case serviceName
        case startedBy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let containerInstance = containerInstance {
            try encodeContainer.encode(containerInstance, forKey: .containerInstance)
        }
        if let desiredStatus = desiredStatus {
            try encodeContainer.encode(desiredStatus.rawValue, forKey: .desiredStatus)
        }
        if let family = family {
            try encodeContainer.encode(family, forKey: .family)
        }
        if let launchType = launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let startedBy = startedBy {
            try encodeContainer.encode(startedBy, forKey: .startedBy)
        }
    }
}
