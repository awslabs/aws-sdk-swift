// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedScaling: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceWarmupPeriod
        case maximumScalingStepSize
        case minimumScalingStepSize
        case status
        case targetCapacity
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceWarmupPeriod = instanceWarmupPeriod {
            try encodeContainer.encode(instanceWarmupPeriod, forKey: .instanceWarmupPeriod)
        }
        if let maximumScalingStepSize = maximumScalingStepSize {
            try encodeContainer.encode(maximumScalingStepSize, forKey: .maximumScalingStepSize)
        }
        if let minimumScalingStepSize = minimumScalingStepSize {
            try encodeContainer.encode(minimumScalingStepSize, forKey: .minimumScalingStepSize)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetCapacity = targetCapacity {
            try encodeContainer.encode(targetCapacity, forKey: .targetCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ManagedScalingStatus.self, forKey: .status)
        status = statusDecoded
        let targetCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetCapacity)
        targetCapacity = targetCapacityDecoded
        let minimumScalingStepSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumScalingStepSize)
        minimumScalingStepSize = minimumScalingStepSizeDecoded
        let maximumScalingStepSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumScalingStepSize)
        maximumScalingStepSize = maximumScalingStepSizeDecoded
        let instanceWarmupPeriodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceWarmupPeriod)
        instanceWarmupPeriod = instanceWarmupPeriodDecoded
    }
}
