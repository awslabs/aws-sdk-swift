// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerInstances
        case enableECSManagedTags
        case enableExecuteCommand
        case group
        case networkConfiguration
        case overrides
        case propagateTags
        case referenceId
        case startedBy
        case tags
        case taskDefinition
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let containerInstances = containerInstances {
            var containerInstancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerInstances)
            for stringlist0 in containerInstances {
                try containerInstancesContainer.encode(stringlist0)
            }
        }
        if enableECSManagedTags != false {
            try encodeContainer.encode(enableECSManagedTags, forKey: .enableECSManagedTags)
        }
        if enableExecuteCommand != false {
            try encodeContainer.encode(enableExecuteCommand, forKey: .enableExecuteCommand)
        }
        if let group = group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let networkConfiguration = networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let overrides = overrides {
            try encodeContainer.encode(overrides, forKey: .overrides)
        }
        if let propagateTags = propagateTags {
            try encodeContainer.encode(propagateTags.rawValue, forKey: .propagateTags)
        }
        if let referenceId = referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let startedBy = startedBy {
            try encodeContainer.encode(startedBy, forKey: .startedBy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let taskDefinition = taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
    }
}
