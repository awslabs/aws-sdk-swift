// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTasksInputBody: Equatable {
    public let cluster: String?
    public let containerInstance: String?
    public let family: String?
    public let nextToken: String?
    public let maxResults: Int?
    public let startedBy: String?
    public let serviceName: String?
    public let desiredStatus: DesiredStatus?
    public let launchType: LaunchType?
}

extension ListTasksInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerInstance
        case desiredStatus
        case family
        case launchType
        case maxResults
        case nextToken
        case serviceName
        case startedBy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let containerInstanceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerInstance)
        containerInstance = containerInstanceDecoded
        let familyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .family)
        family = familyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let desiredStatusDecoded = try containerValues.decodeIfPresent(DesiredStatus.self, forKey: .desiredStatus)
        desiredStatus = desiredStatusDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
    }
}
