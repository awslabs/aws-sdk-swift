// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum UlimitName {
    case core
    case cpu
    case data
    case fsize
    case locks
    case memlock
    case msgqueue
    case nice
    case nofile
    case nproc
    case rss
    case rtprio
    case rttime
    case sigpending
    case stack
    case sdkUnknown(String)
}

extension UlimitName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [UlimitName] {
        return [
            .core,
            .cpu,
            .data,
            .fsize,
            .locks,
            .memlock,
            .msgqueue,
            .nice,
            .nofile,
            .nproc,
            .rss,
            .rtprio,
            .rttime,
            .sigpending,
            .stack,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .core: return "core"
        case .cpu: return "cpu"
        case .data: return "data"
        case .fsize: return "fsize"
        case .locks: return "locks"
        case .memlock: return "memlock"
        case .msgqueue: return "msgqueue"
        case .nice: return "nice"
        case .nofile: return "nofile"
        case .nproc: return "nproc"
        case .rss: return "rss"
        case .rtprio: return "rtprio"
        case .rttime: return "rttime"
        case .sigpending: return "sigpending"
        case .stack: return "stack"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = UlimitName(rawValue: rawValue) ?? UlimitName.sdkUnknown(rawValue)
    }
}
