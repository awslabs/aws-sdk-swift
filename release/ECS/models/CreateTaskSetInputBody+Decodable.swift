// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTaskSetInputBody: Equatable {
    public let service: String?
    public let cluster: String?
    public let externalId: String?
    public let taskDefinition: String?
    public let networkConfiguration: NetworkConfiguration?
    public let loadBalancers: [LoadBalancer]?
    public let serviceRegistries: [ServiceRegistry]?
    public let launchType: LaunchType?
    public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
    public let platformVersion: String?
    public let scale: Scale?
    public let clientToken: String?
    public let tags: [Tag]?
}

extension CreateTaskSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityProviderStrategy
        case clientToken
        case cluster
        case externalId
        case launchType
        case loadBalancers
        case networkConfiguration
        case platformVersion
        case scale
        case service
        case serviceRegistries
        case tags
        case taskDefinition
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .service)
        service = serviceDecoded
        let clusterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cluster)
        cluster = clusterDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([LoadBalancer].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [LoadBalancer]()
            for structure0 in loadBalancersContainer {
                loadBalancersDecoded0?.append(structure0)
            }
        }
        loadBalancers = loadBalancersDecoded0
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([ServiceRegistry].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                serviceRegistriesDecoded0?.append(structure0)
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let launchTypeDecoded = try containerValues.decodeIfPresent(LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([CapacityProviderStrategyItem].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                capacityProviderStrategyDecoded0?.append(structure0)
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Scale.self, forKey: .scale)
        scale = scaleDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
