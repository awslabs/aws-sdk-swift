// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedAgent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastStartedAt
        case lastStatus
        case name
        case reason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastStartedAt = lastStartedAt {
            try encodeContainer.encode(lastStartedAt.timeIntervalSince1970, forKey: .lastStartedAt)
        }
        if let lastStatus = lastStatus {
            try encodeContainer.encode(lastStatus, forKey: .lastStatus)
        }
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastStartedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastStartedAt)
        lastStartedAt = lastStartedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(ManagedAgentName.self, forKey: .name)
        name = nameDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let lastStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
    }
}
