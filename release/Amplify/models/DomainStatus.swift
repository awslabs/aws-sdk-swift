// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DomainStatus {
    case available
    case creating
    case failed
    case inProgress
    case pendingDeployment
    case pendingVerification
    case requestingCertificate
    case updating
    case sdkUnknown(String)
}

extension DomainStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DomainStatus] {
        return [
            .available,
            .creating,
            .failed,
            .inProgress,
            .pendingDeployment,
            .pendingVerification,
            .requestingCertificate,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .creating: return "CREATING"
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case .pendingDeployment: return "PENDING_DEPLOYMENT"
        case .pendingVerification: return "PENDING_VERIFICATION"
        case .requestingCertificate: return "REQUESTING_CERTIFICATE"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DomainStatus(rawValue: rawValue) ?? DomainStatus.sdkUnknown(rawValue)
    }
}
