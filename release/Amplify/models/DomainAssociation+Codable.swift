// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DomainAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoSubDomainCreationPatterns
        case autoSubDomainIAMRole
        case certificateVerificationDNSRecord
        case domainAssociationArn
        case domainName
        case domainStatus
        case enableAutoSubDomain
        case statusReason
        case subDomains
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoSubDomainCreationPatterns = autoSubDomainCreationPatterns {
            var autoSubDomainCreationPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoSubDomainCreationPatterns)
            for autosubdomaincreationpatterns0 in autoSubDomainCreationPatterns {
                try autoSubDomainCreationPatternsContainer.encode(autosubdomaincreationpatterns0)
            }
        }
        if let autoSubDomainIAMRole = autoSubDomainIAMRole {
            try encodeContainer.encode(autoSubDomainIAMRole, forKey: .autoSubDomainIAMRole)
        }
        if let certificateVerificationDNSRecord = certificateVerificationDNSRecord {
            try encodeContainer.encode(certificateVerificationDNSRecord, forKey: .certificateVerificationDNSRecord)
        }
        if let domainAssociationArn = domainAssociationArn {
            try encodeContainer.encode(domainAssociationArn, forKey: .domainAssociationArn)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainStatus = domainStatus {
            try encodeContainer.encode(domainStatus.rawValue, forKey: .domainStatus)
        }
        if let enableAutoSubDomain = enableAutoSubDomain {
            try encodeContainer.encode(enableAutoSubDomain, forKey: .enableAutoSubDomain)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let subDomains = subDomains {
            var subDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subDomains)
            for subdomains0 in subDomains {
                try subDomainsContainer.encode(subdomains0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainAssociationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainAssociationArn)
        domainAssociationArn = domainAssociationArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let enableAutoSubDomainDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableAutoSubDomain)
        enableAutoSubDomain = enableAutoSubDomainDecoded
        let autoSubDomainCreationPatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .autoSubDomainCreationPatterns)
        var autoSubDomainCreationPatternsDecoded0:[String]? = nil
        if let autoSubDomainCreationPatternsContainer = autoSubDomainCreationPatternsContainer {
            autoSubDomainCreationPatternsDecoded0 = [String]()
            for string0 in autoSubDomainCreationPatternsContainer {
                autoSubDomainCreationPatternsDecoded0?.append(string0)
            }
        }
        autoSubDomainCreationPatterns = autoSubDomainCreationPatternsDecoded0
        let autoSubDomainIAMRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoSubDomainIAMRole)
        autoSubDomainIAMRole = autoSubDomainIAMRoleDecoded
        let domainStatusDecoded = try containerValues.decodeIfPresent(DomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let certificateVerificationDNSRecordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateVerificationDNSRecord)
        certificateVerificationDNSRecord = certificateVerificationDNSRecordDecoded
        let subDomainsContainer = try containerValues.decodeIfPresent([SubDomain].self, forKey: .subDomains)
        var subDomainsDecoded0:[SubDomain]? = nil
        if let subDomainsContainer = subDomainsContainer {
            subDomainsDecoded0 = [SubDomain]()
            for structure0 in subDomainsContainer {
                subDomainsDecoded0?.append(structure0)
            }
        }
        subDomains = subDomainsDecoded0
    }
}
