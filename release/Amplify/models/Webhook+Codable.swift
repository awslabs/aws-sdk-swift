// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Webhook: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case branchName
        case createTime
        case description
        case updateTime
        case webhookArn
        case webhookId
        case webhookUrl
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchName = branchName {
            try encodeContainer.encode(branchName, forKey: .branchName)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let updateTime = updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
        if let webhookArn = webhookArn {
            try encodeContainer.encode(webhookArn, forKey: .webhookArn)
        }
        if let webhookId = webhookId {
            try encodeContainer.encode(webhookId, forKey: .webhookId)
        }
        if let webhookUrl = webhookUrl {
            try encodeContainer.encode(webhookUrl, forKey: .webhookUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webhookArn)
        webhookArn = webhookArnDecoded
        let webhookIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webhookId)
        webhookId = webhookIdDecoded
        let webhookUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webhookUrl)
        webhookUrl = webhookUrlDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}
