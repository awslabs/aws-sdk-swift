// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoBranchCreationConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case basicAuthCredentials
        case buildSpec
        case enableAutoBuild
        case enableBasicAuth
        case enablePerformanceMode
        case enablePullRequestPreview
        case environmentVariables
        case framework
        case pullRequestEnvironmentName
        case stage
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let basicAuthCredentials = basicAuthCredentials {
            try encodeContainer.encode(basicAuthCredentials, forKey: .basicAuthCredentials)
        }
        if let buildSpec = buildSpec {
            try encodeContainer.encode(buildSpec, forKey: .buildSpec)
        }
        if let enableAutoBuild = enableAutoBuild {
            try encodeContainer.encode(enableAutoBuild, forKey: .enableAutoBuild)
        }
        if let enableBasicAuth = enableBasicAuth {
            try encodeContainer.encode(enableBasicAuth, forKey: .enableBasicAuth)
        }
        if let enablePerformanceMode = enablePerformanceMode {
            try encodeContainer.encode(enablePerformanceMode, forKey: .enablePerformanceMode)
        }
        if let enablePullRequestPreview = enablePullRequestPreview {
            try encodeContainer.encode(enablePullRequestPreview, forKey: .enablePullRequestPreview)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environmentVariables)
            for (dictKey0, environmentvariables0) in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariables0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let framework = framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let pullRequestEnvironmentName = pullRequestEnvironmentName {
            try encodeContainer.encode(pullRequestEnvironmentName, forKey: .pullRequestEnvironmentName)
        }
        if let stage = stage {
            try encodeContainer.encode(stage.rawValue, forKey: .stage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stageDecoded = try containerValues.decodeIfPresent(Stage.self, forKey: .stage)
        stage = stageDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .framework)
        framework = frameworkDecoded
        let enableAutoBuildDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableAutoBuild)
        enableAutoBuild = enableAutoBuildDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [String:String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [String:String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                environmentVariablesDecoded0?[key0] = envvalue0
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let enablePerformanceModeDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enablePerformanceMode)
        enablePerformanceMode = enablePerformanceModeDecoded
        let buildSpecDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let enablePullRequestPreviewDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enablePullRequestPreview)
        enablePullRequestPreview = enablePullRequestPreviewDecoded
        let pullRequestEnvironmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pullRequestEnvironmentName)
        pullRequestEnvironmentName = pullRequestEnvironmentNameDecoded
    }
}
