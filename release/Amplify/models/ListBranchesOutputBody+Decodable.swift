// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBranchesOutputBody: Equatable {
    public let branches: [Branch]?
    public let nextToken: String?
}

extension ListBranchesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case branches
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchesContainer = try containerValues.decodeIfPresent([Branch].self, forKey: .branches)
        var branchesDecoded0:[Branch]? = nil
        if let branchesContainer = branchesContainer {
            branchesDecoded0 = [Branch]()
            for structure0 in branchesContainer {
                branchesDecoded0?.append(structure0)
            }
        }
        branches = branchesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
