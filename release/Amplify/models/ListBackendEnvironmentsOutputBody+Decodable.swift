// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBackendEnvironmentsOutputBody: Equatable {
    public let backendEnvironments: [BackendEnvironment]?
    public let nextToken: String?
}

extension ListBackendEnvironmentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backendEnvironments
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backendEnvironmentsContainer = try containerValues.decodeIfPresent([BackendEnvironment].self, forKey: .backendEnvironments)
        var backendEnvironmentsDecoded0:[BackendEnvironment]? = nil
        if let backendEnvironmentsContainer = backendEnvironmentsContainer {
            backendEnvironmentsDecoded0 = [BackendEnvironment]()
            for structure0 in backendEnvironmentsContainer {
                backendEnvironmentsDecoded0?.append(structure0)
            }
        }
        backendEnvironments = backendEnvironmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
