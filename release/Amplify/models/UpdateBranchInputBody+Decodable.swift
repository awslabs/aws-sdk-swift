// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateBranchInputBody: Equatable {
    public let description: String?
    public let framework: String?
    public let stage: Stage?
    public let enableNotification: Bool?
    public let enableAutoBuild: Bool?
    public let environmentVariables: [String:String]?
    public let basicAuthCredentials: String?
    public let enableBasicAuth: Bool?
    public let enablePerformanceMode: Bool?
    public let buildSpec: String?
    public let ttl: String?
    public let displayName: String?
    public let enablePullRequestPreview: Bool?
    public let pullRequestEnvironmentName: String?
    public let backendEnvironmentArn: String?
}

extension UpdateBranchInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backendEnvironmentArn
        case basicAuthCredentials
        case buildSpec
        case description
        case displayName
        case enableAutoBuild
        case enableBasicAuth
        case enableNotification
        case enablePerformanceMode
        case enablePullRequestPreview
        case environmentVariables
        case framework
        case pullRequestEnvironmentName
        case stage
        case ttl
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .framework)
        framework = frameworkDecoded
        let stageDecoded = try containerValues.decodeIfPresent(Stage.self, forKey: .stage)
        stage = stageDecoded
        let enableNotificationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableNotification)
        enableNotification = enableNotificationDecoded
        let enableAutoBuildDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableAutoBuild)
        enableAutoBuild = enableAutoBuildDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [String:String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [String:String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                environmentVariablesDecoded0?[key0] = envvalue0
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let enablePerformanceModeDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enablePerformanceMode)
        enablePerformanceMode = enablePerformanceModeDecoded
        let buildSpecDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let ttlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ttl)
        ttl = ttlDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let enablePullRequestPreviewDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enablePullRequestPreview)
        enablePullRequestPreview = enablePullRequestPreviewDecoded
        let pullRequestEnvironmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pullRequestEnvironmentName)
        pullRequestEnvironmentName = pullRequestEnvironmentNameDecoded
        let backendEnvironmentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backendEnvironmentArn)
        backendEnvironmentArn = backendEnvironmentArnDecoded
    }
}
