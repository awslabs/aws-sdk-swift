// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Event within a workflow execution. A history event can be one of these types:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the
///         system.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling
///         <a>RespondActivityTaskCompleted</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling
///         <a>RespondActivityTaskFailed</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskTimedOut</code> – The activity task timed out.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't
///         configured properly, for example no timer exists with the specified timer Id.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was
///         canceled and closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution,
///         completed successfully and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionFailed</code> – A child workflow execution,
///         started by this workflow execution, failed to complete successfully and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionTerminated</code> –  A child workflow execution, started by this workflow execution, was
///         terminated.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionTimedOut</code> –  A child workflow execution, started by this workflow execution, timed
///         out and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued
///         as a new workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling
///         <a>RespondDecisionTaskCompleted</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskTimedOut</code> – The decision task timed out.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was
///         successfully delivered to the target execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully
///         delivered to the target external workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a
///         <code>RecordMarker</code> decision.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens
///         when the decision isn't configured properly.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution
///         failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an
///         external workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the
///         decision isn't configured properly, for example the activity type specified isn't registered.</p>
///             </li>
///             <li>
///                <p>
///                   <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution
///         failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens
///         when the decision isn't configured properly, for example the workflow type specified isn't registered.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't
///         configured properly, for example a timer already exists with the specified timer Id.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code>
///         decision.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type
///         was created with the same workflowId.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p>
///             </li>
///          </ul>
public struct HistoryEvent: Equatable {
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes?
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes?
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes?
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes?
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    public let eventId: Int
    /// <p>The date and time when the event occurred.</p>
    public let eventTimestamp: Date?
    /// <p>The type of the history event.</p>
    public let eventType: EventType?
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types. </p>
    public let externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes?
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set
    ///       for other event types.</p>
    public let lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set
    ///       for other event types.</p>
    public let lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes?
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let markerRecordedEventAttributes: MarkerRecordedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes?
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes?
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't
    ///       set for other event types.</p>
    public let scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes?
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes?
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes?
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set
    ///       for other event types.</p>
    public let startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes?
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let startTimerFailedEventAttributes: StartTimerFailedEventAttributes?
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let timerCanceledEventAttributes: TimerCanceledEventAttributes?
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about
    ///       the event. It isn't set for other event types.</p>
    public let timerFiredEventAttributes: TimerFiredEventAttributes?
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let timerStartedEventAttributes: TimerStartedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes?

    public init (
        activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil,
        activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil,
        activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil,
        activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil,
        activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil,
        activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil,
        activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil,
        cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil,
        cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil,
        childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil,
        childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil,
        childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil,
        childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil,
        childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil,
        childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil,
        completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil,
        continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil,
        decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil,
        decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil,
        decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil,
        decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil,
        eventId: Int = 0,
        eventTimestamp: Date? = nil,
        eventType: EventType? = nil,
        externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil,
        externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil,
        failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil,
        lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil,
        lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil,
        lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil,
        lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil,
        lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil,
        markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil,
        recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil,
        requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil,
        requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil,
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil,
        scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil,
        scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil,
        signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil,
        signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil,
        startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil,
        startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil,
        startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil,
        startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil,
        timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil,
        timerFiredEventAttributes: TimerFiredEventAttributes? = nil,
        timerStartedEventAttributes: TimerStartedEventAttributes? = nil,
        workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil,
        workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil,
        workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil,
        workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil,
        workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil,
        workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil,
        workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil,
        workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil,
        workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil
    )
    {
        self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
        self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
        self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
        self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
        self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
        self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
        self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
        self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
        self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
        self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
        self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
        self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
        self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
        self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
        self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
        self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
        self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
        self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
        self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
        self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
        self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
        self.eventId = eventId
        self.eventTimestamp = eventTimestamp
        self.eventType = eventType
        self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
        self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
        self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
        self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
        self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
        self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
        self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
        self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
        self.markerRecordedEventAttributes = markerRecordedEventAttributes
        self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
        self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
        self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
        self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
        self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
        self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
        self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
        self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
        self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
        self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
        self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
        self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
        self.timerCanceledEventAttributes = timerCanceledEventAttributes
        self.timerFiredEventAttributes = timerFiredEventAttributes
        self.timerStartedEventAttributes = timerStartedEventAttributes
        self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
        self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
        self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
        self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
        self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
        self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
        self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
        self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
        self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
    }
}
