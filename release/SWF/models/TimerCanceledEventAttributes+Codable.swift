// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimerCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case startedEventId
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}
