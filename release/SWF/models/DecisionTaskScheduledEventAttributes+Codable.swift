// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DecisionTaskScheduledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}
