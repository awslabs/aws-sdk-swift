// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowExecutionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cancelRequested
        case closeStatus
        case closeTimestamp
        case execution
        case executionStatus
        case parent
        case startTimestamp
        case tagList
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cancelRequested != false {
            try encodeContainer.encode(cancelRequested, forKey: .cancelRequested)
        }
        if let closeStatus = closeStatus {
            try encodeContainer.encode(closeStatus.rawValue, forKey: .closeStatus)
        }
        if let closeTimestamp = closeTimestamp {
            try encodeContainer.encode(closeTimestamp.timeIntervalSince1970, forKey: .closeTimestamp)
        }
        if let execution = execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if let executionStatus = executionStatus {
            try encodeContainer.encode(executionStatus.rawValue, forKey: .executionStatus)
        }
        if let parent = parent {
            try encodeContainer.encode(parent, forKey: .parent)
        }
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let closeTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .closeTimestamp)
        closeTimestamp = closeTimestampDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let closeStatusDecoded = try containerValues.decodeIfPresent(CloseStatus.self, forKey: .closeStatus)
        closeStatus = closeStatusDecoded
        let parentDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .parent)
        parent = parentDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                tagListDecoded0?.append(string0)
            }
        }
        tagList = tagListDecoded0
        let cancelRequestedDecoded = try containerValues.decode(Bool.self, forKey: .cancelRequested)
        cancelRequested = cancelRequestedDecoded
    }
}
