// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EventType {
    case activitytaskcancelrequested
    case activitytaskcanceled
    case activitytaskcompleted
    case activitytaskfailed
    case activitytaskscheduled
    case activitytaskstarted
    case activitytasktimedout
    case canceltimerfailed
    case cancelworkflowexecutionfailed
    case childworkflowexecutioncanceled
    case childworkflowexecutioncompleted
    case childworkflowexecutionfailed
    case childworkflowexecutionstarted
    case childworkflowexecutionterminated
    case childworkflowexecutiontimedout
    case completeworkflowexecutionfailed
    case continueasnewworkflowexecutionfailed
    case decisiontaskcompleted
    case decisiontaskscheduled
    case decisiontaskstarted
    case decisiontasktimedout
    case externalworkflowexecutioncancelrequested
    case externalworkflowexecutionsignaled
    case failworkflowexecutionfailed
    case lambdafunctioncompleted
    case lambdafunctionfailed
    case lambdafunctionscheduled
    case lambdafunctionstarted
    case lambdafunctiontimedout
    case markerrecorded
    case recordmarkerfailed
    case requestcancelactivitytaskfailed
    case requestcancelexternalworkflowexecutionfailed
    case requestcancelexternalworkflowexecutioninitiated
    case scheduleactivitytaskfailed
    case schedulelambdafunctionfailed
    case signalexternalworkflowexecutionfailed
    case signalexternalworkflowexecutioninitiated
    case startchildworkflowexecutionfailed
    case startchildworkflowexecutioninitiated
    case startlambdafunctionfailed
    case starttimerfailed
    case timercanceled
    case timerfired
    case timerstarted
    case workflowexecutioncancelrequested
    case workflowexecutioncanceled
    case workflowexecutioncompleted
    case workflowexecutioncontinuedasnew
    case workflowexecutionfailed
    case workflowexecutionsignaled
    case workflowexecutionstarted
    case workflowexecutionterminated
    case workflowexecutiontimedout
    case sdkUnknown(String)
}

extension EventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventType] {
        return [
            .activitytaskcancelrequested,
            .activitytaskcanceled,
            .activitytaskcompleted,
            .activitytaskfailed,
            .activitytaskscheduled,
            .activitytaskstarted,
            .activitytasktimedout,
            .canceltimerfailed,
            .cancelworkflowexecutionfailed,
            .childworkflowexecutioncanceled,
            .childworkflowexecutioncompleted,
            .childworkflowexecutionfailed,
            .childworkflowexecutionstarted,
            .childworkflowexecutionterminated,
            .childworkflowexecutiontimedout,
            .completeworkflowexecutionfailed,
            .continueasnewworkflowexecutionfailed,
            .decisiontaskcompleted,
            .decisiontaskscheduled,
            .decisiontaskstarted,
            .decisiontasktimedout,
            .externalworkflowexecutioncancelrequested,
            .externalworkflowexecutionsignaled,
            .failworkflowexecutionfailed,
            .lambdafunctioncompleted,
            .lambdafunctionfailed,
            .lambdafunctionscheduled,
            .lambdafunctionstarted,
            .lambdafunctiontimedout,
            .markerrecorded,
            .recordmarkerfailed,
            .requestcancelactivitytaskfailed,
            .requestcancelexternalworkflowexecutionfailed,
            .requestcancelexternalworkflowexecutioninitiated,
            .scheduleactivitytaskfailed,
            .schedulelambdafunctionfailed,
            .signalexternalworkflowexecutionfailed,
            .signalexternalworkflowexecutioninitiated,
            .startchildworkflowexecutionfailed,
            .startchildworkflowexecutioninitiated,
            .startlambdafunctionfailed,
            .starttimerfailed,
            .timercanceled,
            .timerfired,
            .timerstarted,
            .workflowexecutioncancelrequested,
            .workflowexecutioncanceled,
            .workflowexecutioncompleted,
            .workflowexecutioncontinuedasnew,
            .workflowexecutionfailed,
            .workflowexecutionsignaled,
            .workflowexecutionstarted,
            .workflowexecutionterminated,
            .workflowexecutiontimedout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activitytaskcancelrequested: return "ActivityTaskCancelRequested"
        case .activitytaskcanceled: return "ActivityTaskCanceled"
        case .activitytaskcompleted: return "ActivityTaskCompleted"
        case .activitytaskfailed: return "ActivityTaskFailed"
        case .activitytaskscheduled: return "ActivityTaskScheduled"
        case .activitytaskstarted: return "ActivityTaskStarted"
        case .activitytasktimedout: return "ActivityTaskTimedOut"
        case .canceltimerfailed: return "CancelTimerFailed"
        case .cancelworkflowexecutionfailed: return "CancelWorkflowExecutionFailed"
        case .childworkflowexecutioncanceled: return "ChildWorkflowExecutionCanceled"
        case .childworkflowexecutioncompleted: return "ChildWorkflowExecutionCompleted"
        case .childworkflowexecutionfailed: return "ChildWorkflowExecutionFailed"
        case .childworkflowexecutionstarted: return "ChildWorkflowExecutionStarted"
        case .childworkflowexecutionterminated: return "ChildWorkflowExecutionTerminated"
        case .childworkflowexecutiontimedout: return "ChildWorkflowExecutionTimedOut"
        case .completeworkflowexecutionfailed: return "CompleteWorkflowExecutionFailed"
        case .continueasnewworkflowexecutionfailed: return "ContinueAsNewWorkflowExecutionFailed"
        case .decisiontaskcompleted: return "DecisionTaskCompleted"
        case .decisiontaskscheduled: return "DecisionTaskScheduled"
        case .decisiontaskstarted: return "DecisionTaskStarted"
        case .decisiontasktimedout: return "DecisionTaskTimedOut"
        case .externalworkflowexecutioncancelrequested: return "ExternalWorkflowExecutionCancelRequested"
        case .externalworkflowexecutionsignaled: return "ExternalWorkflowExecutionSignaled"
        case .failworkflowexecutionfailed: return "FailWorkflowExecutionFailed"
        case .lambdafunctioncompleted: return "LambdaFunctionCompleted"
        case .lambdafunctionfailed: return "LambdaFunctionFailed"
        case .lambdafunctionscheduled: return "LambdaFunctionScheduled"
        case .lambdafunctionstarted: return "LambdaFunctionStarted"
        case .lambdafunctiontimedout: return "LambdaFunctionTimedOut"
        case .markerrecorded: return "MarkerRecorded"
        case .recordmarkerfailed: return "RecordMarkerFailed"
        case .requestcancelactivitytaskfailed: return "RequestCancelActivityTaskFailed"
        case .requestcancelexternalworkflowexecutionfailed: return "RequestCancelExternalWorkflowExecutionFailed"
        case .requestcancelexternalworkflowexecutioninitiated: return "RequestCancelExternalWorkflowExecutionInitiated"
        case .scheduleactivitytaskfailed: return "ScheduleActivityTaskFailed"
        case .schedulelambdafunctionfailed: return "ScheduleLambdaFunctionFailed"
        case .signalexternalworkflowexecutionfailed: return "SignalExternalWorkflowExecutionFailed"
        case .signalexternalworkflowexecutioninitiated: return "SignalExternalWorkflowExecutionInitiated"
        case .startchildworkflowexecutionfailed: return "StartChildWorkflowExecutionFailed"
        case .startchildworkflowexecutioninitiated: return "StartChildWorkflowExecutionInitiated"
        case .startlambdafunctionfailed: return "StartLambdaFunctionFailed"
        case .starttimerfailed: return "StartTimerFailed"
        case .timercanceled: return "TimerCanceled"
        case .timerfired: return "TimerFired"
        case .timerstarted: return "TimerStarted"
        case .workflowexecutioncancelrequested: return "WorkflowExecutionCancelRequested"
        case .workflowexecutioncanceled: return "WorkflowExecutionCanceled"
        case .workflowexecutioncompleted: return "WorkflowExecutionCompleted"
        case .workflowexecutioncontinuedasnew: return "WorkflowExecutionContinuedAsNew"
        case .workflowexecutionfailed: return "WorkflowExecutionFailed"
        case .workflowexecutionsignaled: return "WorkflowExecutionSignaled"
        case .workflowexecutionstarted: return "WorkflowExecutionStarted"
        case .workflowexecutionterminated: return "WorkflowExecutionTerminated"
        case .workflowexecutiontimedout: return "WorkflowExecutionTimedOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
    }
}
