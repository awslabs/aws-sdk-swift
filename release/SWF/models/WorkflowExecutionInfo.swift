// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains information about a workflow execution.</p>
public struct WorkflowExecutionInfo: Equatable {
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    public let cancelRequested: Bool
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> – the execution was successfully completed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean
    ///         up before the execution is closed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATED</code> – the execution was force terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> – the execution failed to complete.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed
    ///         out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was
    ///         completed and a new execution was started to carry on the workflow.</p>
    ///             </li>
    ///          </ul>
    public let closeStatus: CloseStatus?
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    public let closeTimestamp: Date?
    /// <p>The workflow execution this information is about.</p>
    public let execution: WorkflowExecution?
    /// <p>The current status of the execution.</p>
    public let executionStatus: ExecutionStatus?
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    public let parent: WorkflowExecution?
    /// <p>The time when the execution was started.</p>
    public let startTimestamp: Date?
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    public let tagList: [String]?
    /// <p>The type of the workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        cancelRequested: Bool = false,
        closeStatus: CloseStatus? = nil,
        closeTimestamp: Date? = nil,
        execution: WorkflowExecution? = nil,
        executionStatus: ExecutionStatus? = nil,
        parent: WorkflowExecution? = nil,
        startTimestamp: Date? = nil,
        tagList: [String]? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.cancelRequested = cancelRequested
        self.closeStatus = closeStatus
        self.closeTimestamp = closeTimestamp
        self.execution = execution
        self.executionStatus = executionStatus
        self.parent = parent
        self.startTimestamp = startTimestamp
        self.tagList = tagList
        self.workflowType = workflowType
    }
}
