// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowExecutionSignaledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalInitiatedEventId
        case externalWorkflowExecution
        case input
        case signalName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let signalName = signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signalNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .externalInitiatedEventId)
        externalInitiatedEventId = externalInitiatedEventIdDecoded
    }
}
