// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecordMarkerFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case markerName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let markerName = markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let causeDecoded = try containerValues.decodeIfPresent(RecordMarkerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}
