// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOpenWorkflowExecutionsInputBody: Equatable {
    public let domain: String?
    public let startTimeFilter: ExecutionTimeFilter?
    public let typeFilter: WorkflowTypeFilter?
    public let tagFilter: TagFilter?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
    public let executionFilter: WorkflowExecutionFilter?
}

extension ListOpenWorkflowExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}
