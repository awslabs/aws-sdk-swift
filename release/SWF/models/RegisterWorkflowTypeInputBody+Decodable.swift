// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterWorkflowTypeInputBody: Equatable {
    public let domain: String?
    public let name: String?
    public let version: String?
    public let description: String?
    public let defaultTaskStartToCloseTimeout: String?
    public let defaultExecutionStartToCloseTimeout: String?
    public let defaultTaskList: TaskList?
    public let defaultTaskPriority: String?
    public let defaultChildPolicy: ChildPolicy?
    public let defaultLambdaRole: String?
}

extension RegisterWorkflowTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultExecutionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultExecutionStartToCloseTimeout)
        defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultChildPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .defaultChildPolicy)
        defaultChildPolicy = defaultChildPolicyDecoded
        let defaultLambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultLambdaRole)
        defaultLambdaRole = defaultLambdaRoleDecoded
    }
}
