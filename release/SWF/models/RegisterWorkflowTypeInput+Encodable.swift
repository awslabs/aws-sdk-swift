// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterWorkflowTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChildPolicy = defaultChildPolicy {
            try encodeContainer.encode(defaultChildPolicy.rawValue, forKey: .defaultChildPolicy)
        }
        if let defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout {
            try encodeContainer.encode(defaultExecutionStartToCloseTimeout, forKey: .defaultExecutionStartToCloseTimeout)
        }
        if let defaultLambdaRole = defaultLambdaRole {
            try encodeContainer.encode(defaultLambdaRole, forKey: .defaultLambdaRole)
        }
        if let defaultTaskList = defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}
