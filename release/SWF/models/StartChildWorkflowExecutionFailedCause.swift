// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StartChildWorkflowExecutionFailedCause {
    case childCreationRateExceeded
    case defaultChildPolicyUndefined
    case defaultExecutionStartToCloseTimeoutUndefined
    case defaultTaskListUndefined
    case defaultTaskStartToCloseTimeoutUndefined
    case openChildrenLimitExceeded
    case openWorkflowsLimitExceeded
    case operationNotPermitted
    case workflowAlreadyRunning
    case workflowTypeDeprecated
    case workflowTypeDoesNotExist
    case sdkUnknown(String)
}

extension StartChildWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StartChildWorkflowExecutionFailedCause] {
        return [
            .childCreationRateExceeded,
            .defaultChildPolicyUndefined,
            .defaultExecutionStartToCloseTimeoutUndefined,
            .defaultTaskListUndefined,
            .defaultTaskStartToCloseTimeoutUndefined,
            .openChildrenLimitExceeded,
            .openWorkflowsLimitExceeded,
            .operationNotPermitted,
            .workflowAlreadyRunning,
            .workflowTypeDeprecated,
            .workflowTypeDoesNotExist,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .childCreationRateExceeded: return "CHILD_CREATION_RATE_EXCEEDED"
        case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
        case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
        case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .openChildrenLimitExceeded: return "OPEN_CHILDREN_LIMIT_EXCEEDED"
        case .openWorkflowsLimitExceeded: return "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .workflowAlreadyRunning: return "WORKFLOW_ALREADY_RUNNING"
        case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
        case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StartChildWorkflowExecutionFailedCause(rawValue: rawValue) ?? StartChildWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}
