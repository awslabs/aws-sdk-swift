// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChildWorkflowExecutionCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case initiatedEventId
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}
