// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PollForDecisionTaskInput: Equatable {
    /// <p>The name of the domain containing the task lists to poll.</p>
    public let domain: String?
    /// <p>Identity of the decider making the request, which is recorded in the
    ///       DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when
    ///       problems arise. The form of this identity is user defined.</p>
    public let identity: String?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///          <p>This
    ///       is an upper limit only; the actual number of results returned per call may be fewer than the
    ///       specified maximum.</p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    ///          <note>
    ///             <p>The <code>nextPageToken</code> returned by this action cannot be used with <a>GetWorkflowExecutionHistory</a> to get the next page. You must call <a>PollForDecisionTask</a> again (with the <code>nextPageToken</code>) to retrieve
    ///         the next page of history records. Calling <a>PollForDecisionTask</a> with a
    ///           <code>nextPageToken</code> doesn't return a new decision task.</p>
    ///          </note>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the events in reverse order. By default the
    ///       results are returned in ascending order of the <code>eventTimestamp</code> of the
    ///       events.</p>
    public let reverseOrder: Bool
    /// <p>Specifies the task list to poll for decision tasks.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let taskList: TaskList?

    public init (
        domain: String? = nil,
        identity: String? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false,
        taskList: TaskList? = nil
    )
    {
        self.domain = domain
        self.identity = identity
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.taskList = taskList
    }
}
