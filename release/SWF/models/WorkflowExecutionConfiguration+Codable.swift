// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowExecutionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case executionStartToCloseTimeout
        case lambdaRole
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}
