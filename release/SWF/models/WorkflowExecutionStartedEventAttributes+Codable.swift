// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowExecutionStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case continuedExecutionRunId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case parentInitiatedEventId
        case parentWorkflowExecution
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let continuedExecutionRunId = continuedExecutionRunId {
            try encodeContainer.encode(continuedExecutionRunId, forKey: .continuedExecutionRunId)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if parentInitiatedEventId != 0 {
            try encodeContainer.encode(parentInitiatedEventId, forKey: .parentInitiatedEventId)
        }
        if let parentWorkflowExecution = parentWorkflowExecution {
            try encodeContainer.encode(parentWorkflowExecution, forKey: .parentWorkflowExecution)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                tagListDecoded0?.append(string0)
            }
        }
        tagList = tagListDecoded0
        let continuedExecutionRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuedExecutionRunId)
        continuedExecutionRunId = continuedExecutionRunIdDecoded
        let parentWorkflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .parentWorkflowExecution)
        parentWorkflowExecution = parentWorkflowExecutionDecoded
        let parentInitiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .parentInitiatedEventId)
        parentInitiatedEventId = parentInitiatedEventIdDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}
