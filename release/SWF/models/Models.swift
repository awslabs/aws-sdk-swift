// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ActivityTaskCancelRequestedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
    }
}

extension ActivityTaskCancelRequestedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskCancelRequestedEventAttributes(activityId: \(String(describing: activityId)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>ActivityTaskCancelRequested</code> event.</p>
public struct ActivityTaskCancelRequestedEventAttributes: Equatable {
    /// <p>The unique ID of the task.</p>
    public let activityId: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RequestCancelActivityTask</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        activityId: String? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.activityId = activityId
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

extension ActivityTaskCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case latestCancelRequestedEventId
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if latestCancelRequestedEventId != 0 {
            try encodeContainer.encode(latestCancelRequestedEventId, forKey: .latestCancelRequestedEventId)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let latestCancelRequestedEventIdDecoded = try containerValues.decode(Int.self, forKey: .latestCancelRequestedEventId)
        latestCancelRequestedEventId = latestCancelRequestedEventIdDecoded
    }
}

extension ActivityTaskCanceledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskCanceledEventAttributes(details: \(String(describing: details)), latestCancelRequestedEventId: \(String(describing: latestCancelRequestedEventId)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>ActivityTaskCanceled</code> event.</p>
public struct ActivityTaskCanceledEventAttributes: Equatable {
    /// <p>Details of the cancellation.</p>
    public let details: String?
    /// <p>If set, contains the ID of the last <code>ActivityTaskCancelRequested</code> event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let latestCancelRequestedEventId: Int
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let startedEventId: Int

    public init (
        details: String? = nil,
        latestCancelRequestedEventId: Int = 0,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.details = details
        self.latestCancelRequestedEventId = latestCancelRequestedEventId
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension ActivityTaskCompletedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case result
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ActivityTaskCompletedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskCompletedEventAttributes(result: \(String(describing: result)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>ActivityTaskCompleted</code> event.</p>
public struct ActivityTaskCompletedEventAttributes: Equatable {
    /// <p>The results of the activity task.</p>
    public let result: String?
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let startedEventId: Int

    public init (
        result: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.result = result
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension ActivityTaskFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case reason
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ActivityTaskFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskFailedEventAttributes(details: \(String(describing: details)), reason: \(String(describing: reason)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>ActivityTaskFailed</code> event.</p>
public struct ActivityTaskFailedEventAttributes: Equatable {
    /// <p>The details of the failure.</p>
    public let details: String?
    /// <p>The reason provided for the failure.</p>
    public let reason: String?
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let startedEventId: Int

    public init (
        details: String? = nil,
        reason: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.details = details
        self.reason = reason
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension ActivityTaskScheduledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case activityType
        case control
        case decisionTaskCompletedEventId
        case heartbeatTimeout
        case input
        case scheduleToCloseTimeout
        case scheduleToStartTimeout
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try encodeContainer.encode(heartbeatTimeout, forKey: .heartbeatTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let scheduleToCloseTimeout = scheduleToCloseTimeout {
            try encodeContainer.encode(scheduleToCloseTimeout, forKey: .scheduleToCloseTimeout)
        }
        if let scheduleToStartTimeout = scheduleToStartTimeout {
            try encodeContainer.encode(scheduleToStartTimeout, forKey: .scheduleToStartTimeout)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let scheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToStartTimeout)
        scheduleToStartTimeout = scheduleToStartTimeoutDecoded
        let scheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToCloseTimeout)
        scheduleToCloseTimeout = scheduleToCloseTimeoutDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
    }
}

extension ActivityTaskScheduledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskScheduledEventAttributes(activityId: \(String(describing: activityId)), activityType: \(String(describing: activityType)), control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), heartbeatTimeout: \(String(describing: heartbeatTimeout)), input: \(String(describing: input)), scheduleToCloseTimeout: \(String(describing: scheduleToCloseTimeout)), scheduleToStartTimeout: \(String(describing: scheduleToStartTimeout)), startToCloseTimeout: \(String(describing: startToCloseTimeout)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)))"}
}

/// <p>Provides the details of the <code>ActivityTaskScheduled</code> event.</p>
public struct ActivityTaskScheduledEventAttributes: Equatable {
    /// <p>The unique ID of the activity task.</p>
    public let activityId: String?
    /// <p>The type of the activity task.</p>
    public let activityType: ActivityType?
    /// <p>Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The maximum time before which the worker processing this task must report progress by calling
    ///       <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed out. If
    ///       the worker subsequently attempts to record a heartbeat or return a result, it is ignored.</p>
    public let heartbeatTimeout: String?
    /// <p>The input provided to the activity task.</p>
    public let input: String?
    /// <p>The maximum amount of time for this activity task.</p>
    public let scheduleToCloseTimeout: String?
    /// <p>The maximum amount of time the activity task can wait to be assigned to a worker.</p>
    public let scheduleToStartTimeout: String?
    /// <p>The maximum amount of time a worker may take to process the activity task.</p>
    public let startToCloseTimeout: String?
    /// <p>The task list in which the activity task has been scheduled.</p>
    public let taskList: TaskList?
    /// <p>
    ///          The priority to assign to the scheduled activity task. If set, this overrides any default
    ///       priority value that was assigned when the activity type was registered.</p>
    ///          <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?

    public init (
        activityId: String? = nil,
        activityType: ActivityType? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        heartbeatTimeout: String? = nil,
        input: String? = nil,
        scheduleToCloseTimeout: String? = nil,
        scheduleToStartTimeout: String? = nil,
        startToCloseTimeout: String? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil
    )
    {
        self.activityId = activityId
        self.activityType = activityType
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.heartbeatTimeout = heartbeatTimeout
        self.input = input
        self.scheduleToCloseTimeout = scheduleToCloseTimeout
        self.scheduleToStartTimeout = scheduleToStartTimeout
        self.startToCloseTimeout = startToCloseTimeout
        self.taskList = taskList
        self.taskPriority = taskPriority
    }
}

extension ActivityTaskStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identity
        case scheduledEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identity)
        identity = identityDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension ActivityTaskStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskStartedEventAttributes(identity: \(String(describing: identity)), scheduledEventId: \(String(describing: scheduledEventId)))"}
}

/// <p>Provides the details of the <code>ActivityTaskStarted</code> event.</p>
public struct ActivityTaskStartedEventAttributes: Equatable {
    /// <p>Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.</p>
    public let identity: String?
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int

    public init (
        identity: String? = nil,
        scheduledEventId: Int = 0
    )
    {
        self.identity = identity
        self.scheduledEventId = scheduledEventId
    }
}

extension ActivityTaskTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(ActivityTaskTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension ActivityTaskTimedOutEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTaskTimedOutEventAttributes(details: \(String(describing: details)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)), timeoutType: \(String(describing: timeoutType)))"}
}

/// <p>Provides the details of the <code>ActivityTaskTimedOut</code> event.</p>
public struct ActivityTaskTimedOutEventAttributes: Equatable {
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to
    ///       <code>RecordActivityTaskHeartbeat</code>.</p>
    public let details: String?
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let startedEventId: Int
    /// <p>The type of the timeout that caused this event.</p>
    public let timeoutType: ActivityTaskTimeoutType?

    public init (
        details: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0,
        timeoutType: ActivityTaskTimeoutType? = nil
    )
    {
        self.details = details
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
        self.timeoutType = timeoutType
    }
}

public enum ActivityTaskTimeoutType {
    case heartbeat
    case scheduleToClose
    case scheduleToStart
    case startToClose
    case sdkUnknown(String)
}

extension ActivityTaskTimeoutType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ActivityTaskTimeoutType] {
        return [
            .heartbeat,
            .scheduleToClose,
            .scheduleToStart,
            .startToClose,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .heartbeat: return "HEARTBEAT"
        case .scheduleToClose: return "SCHEDULE_TO_CLOSE"
        case .scheduleToStart: return "SCHEDULE_TO_START"
        case .startToClose: return "START_TO_CLOSE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ActivityTaskTimeoutType(rawValue: rawValue) ?? ActivityTaskTimeoutType.sdkUnknown(rawValue)
    }
}

extension ActivityType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension ActivityType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityType(name: \(String(describing: name)), version: \(String(describing: version)))"}
}

/// <p>Represents an activity type.</p>
public struct ActivityType: Equatable {
    /// <p>The name of this activity.</p>
    ///          <note>
    ///             <p>The combination of activity type name and version must be unique within a domain.</p>
    ///          </note>
    public let name: String?
    /// <p>The version of this activity.</p>
    ///          <note>
    ///             <p>The combination of activity type name and version must be unique with in a domain.</p>
    ///          </note>
    public let version: String?

    public init (
        name: String? = nil,
        version: String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

extension ActivityTypeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout {
            try encodeContainer.encode(defaultTaskHeartbeatTimeout, forKey: .defaultTaskHeartbeatTimeout)
        }
        if let defaultTaskList = defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout {
            try encodeContainer.encode(defaultTaskScheduleToCloseTimeout, forKey: .defaultTaskScheduleToCloseTimeout)
        }
        if let defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout {
            try encodeContainer.encode(defaultTaskScheduleToStartTimeout, forKey: .defaultTaskScheduleToStartTimeout)
        }
        if let defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultTaskHeartbeatTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskHeartbeatTimeout)
        defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultTaskScheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskScheduleToStartTimeout)
        defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeoutDecoded
        let defaultTaskScheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskScheduleToCloseTimeout)
        defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeoutDecoded
    }
}

extension ActivityTypeConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTypeConfiguration(defaultTaskHeartbeatTimeout: \(String(describing: defaultTaskHeartbeatTimeout)), defaultTaskList: \(String(describing: defaultTaskList)), defaultTaskPriority: \(String(describing: defaultTaskPriority)), defaultTaskScheduleToCloseTimeout: \(String(describing: defaultTaskScheduleToCloseTimeout)), defaultTaskScheduleToStartTimeout: \(String(describing: defaultTaskScheduleToStartTimeout)), defaultTaskStartToCloseTimeout: \(String(describing: defaultTaskStartToCloseTimeout)))"}
}

/// <p>Configuration settings registered with the activity type.</p>
public struct ActivityTypeConfiguration: Equatable {
    /// <p>
    ///          The default maximum time, in seconds, before which a worker processing a task must report
    ///       progress by calling <a>RecordActivityTaskHeartbeat</a>.</p>
    ///          <p>You can specify this value only when <i>registering</i> an activity type. The registered default value can be
    ///       overridden when you schedule a task through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>. If the activity
    ///       worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an
    ///       <code>UnknownResource</code> fault. In this case, Amazon SWF no longer considers the activity task to be valid;
    ///       the activity worker should clean up the activity task.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskHeartbeatTimeout: String?
    /// <p>
    ///          The default task list specified for this activity type at registration. This default is used if
    ///       a task list isn't provided when a task is scheduled through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>. You can override the default registered task list when scheduling a task through the
    ///       <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    public let defaultTaskList: TaskList?
    /// <p>
    ///          The default task priority for tasks of this activity type, specified at registration. If not
    ///       set, then <code>0</code> is used as the default priority. This default can be overridden when scheduling an activity
    ///       task.</p>
    ///          <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let defaultTaskPriority: String?
    /// <p>
    ///          The default maximum duration, specified when registering the activity type, for tasks of this activity
    ///       type. You can override this default when scheduling a task through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskScheduleToCloseTimeout: String?
    /// <p>
    ///          The default maximum duration, specified when registering the activity type, that a task of an
    ///       activity type can wait before being assigned to a worker. You can override this default when scheduling a task
    ///       through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskScheduleToStartTimeout: String?
    /// <p>
    ///          The default maximum duration for tasks of an activity type specified when registering the activity
    ///       type. You can override this default when scheduling a task through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskStartToCloseTimeout: String?

    public init (
        defaultTaskHeartbeatTimeout: String? = nil,
        defaultTaskList: TaskList? = nil,
        defaultTaskPriority: String? = nil,
        defaultTaskScheduleToCloseTimeout: String? = nil,
        defaultTaskScheduleToStartTimeout: String? = nil,
        defaultTaskStartToCloseTimeout: String? = nil
    )
    {
        self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
    }
}

extension ActivityTypeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityType
        case creationDate
        case deprecationDate
        case description
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let deprecationDate = deprecationDate {
            try encodeContainer.encode(deprecationDate.timeIntervalSince1970, forKey: .deprecationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let deprecationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
    }
}

extension ActivityTypeInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ActivityTypeInfo(activityType: \(String(describing: activityType)), creationDate: \(String(describing: creationDate)), deprecationDate: \(String(describing: deprecationDate)), description: \(String(describing: description)), status: \(String(describing: status)))"}
}

/// <p>Detailed information about an activity type.</p>
public struct ActivityTypeInfo: Equatable {
    /// <p>The <a>ActivityType</a> type structure representing the activity type.</p>
    public let activityType: ActivityType?
    /// <p>The date and time this activity type was created through <a>RegisterActivityType</a>.</p>
    public let creationDate: Date?
    /// <p>If DEPRECATED, the date and time <a>DeprecateActivityType</a> was called.</p>
    public let deprecationDate: Date?
    /// <p>The description of the activity type provided in <a>RegisterActivityType</a>.</p>
    public let description: String?
    /// <p>The current status of the activity type.</p>
    public let status: RegistrationStatus?

    public init (
        activityType: ActivityType? = nil,
        creationDate: Date? = nil,
        deprecationDate: Date? = nil,
        description: String? = nil,
        status: RegistrationStatus? = nil
    )
    {
        self.activityType = activityType
        self.creationDate = creationDate
        self.deprecationDate = deprecationDate
        self.description = description
        self.status = status
    }
}

extension CancelTimerDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
    }
}

extension CancelTimerDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelTimerDecisionAttributes(timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>CancelTimer</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct CancelTimerDecisionAttributes: Equatable {
    /// <p>
    ///          The unique ID of the timer to cancel.</p>
    public let timerId: String?

    public init (
        timerId: String? = nil
    )
    {
        self.timerId = timerId
    }
}

public enum CancelTimerFailedCause {
    case operationNotPermitted
    case timerIdUnknown
    case sdkUnknown(String)
}

extension CancelTimerFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CancelTimerFailedCause] {
        return [
            .operationNotPermitted,
            .timerIdUnknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .timerIdUnknown: return "TIMER_ID_UNKNOWN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CancelTimerFailedCause(rawValue: rawValue) ?? CancelTimerFailedCause.sdkUnknown(rawValue)
    }
}

extension CancelTimerFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(CancelTimerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension CancelTimerFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelTimerFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>CancelTimerFailed</code> event.</p>
public struct CancelTimerFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///         because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: CancelTimerFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The timerId provided in the <code>CancelTimer</code> decision that failed.</p>
    public let timerId: String?

    public init (
        cause: CancelTimerFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0,
        timerId: String? = nil
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.timerId = timerId
    }
}

extension CancelWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension CancelWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelWorkflowExecutionDecisionAttributes(details: \(String(describing: details)))"}
}

/// <p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct CancelWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>
    ///          Details of the cancellation.</p>
    public let details: String?

    public init (
        details: String? = nil
    )
    {
        self.details = details
    }
}

public enum CancelWorkflowExecutionFailedCause {
    case operationNotPermitted
    case unhandledDecision
    case sdkUnknown(String)
}

extension CancelWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CancelWorkflowExecutionFailedCause] {
        return [
            .operationNotPermitted,
            .unhandledDecision,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .unhandledDecision: return "UNHANDLED_DECISION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CancelWorkflowExecutionFailedCause(rawValue: rawValue) ?? CancelWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension CancelWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(CancelWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension CancelWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.</p>
public struct CancelWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///         because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: CancelWorkflowExecutionFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        cause: CancelWorkflowExecutionFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

public enum ChildPolicy {
    case abandon
    case requestCancel
    case terminate
    case sdkUnknown(String)
}

extension ChildPolicy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ChildPolicy] {
        return [
            .abandon,
            .requestCancel,
            .terminate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .abandon: return "ABANDON"
        case .requestCancel: return "REQUEST_CANCEL"
        case .terminate: return "TERMINATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ChildPolicy(rawValue: rawValue) ?? ChildPolicy.sdkUnknown(rawValue)
    }
}

extension ChildWorkflowExecutionCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case initiatedEventId
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ChildWorkflowExecutionCanceledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionCanceledEventAttributes(details: \(String(describing: details)), initiatedEventId: \(String(describing: initiatedEventId)), startedEventId: \(String(describing: startedEventId)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provide details of the <code>ChildWorkflowExecutionCanceled</code> event.</p>
public struct ChildWorkflowExecutionCanceledEventAttributes: Equatable {
    /// <p>Details of the cancellation (if provided).</p>
    public let details: String?
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was
    ///       started. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The child workflow execution that was canceled.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        details: String? = nil,
        initiatedEventId: Int = 0,
        startedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.details = details
        self.initiatedEventId = initiatedEventId
        self.startedEventId = startedEventId
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

extension ChildWorkflowExecutionCompletedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case result
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ChildWorkflowExecutionCompletedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionCompletedEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), result: \(String(describing: result)), startedEventId: \(String(describing: startedEventId)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>ChildWorkflowExecutionCompleted</code> event.</p>
public struct ChildWorkflowExecutionCompletedEventAttributes: Equatable {
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The result of the child workflow execution.</p>
    public let result: String?
    /// <p>The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was
    ///       started. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The child workflow execution that was completed.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        initiatedEventId: Int = 0,
        result: String? = nil,
        startedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.result = result
        self.startedEventId = startedEventId
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

extension ChildWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case initiatedEventId
        case reason
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ChildWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionFailedEventAttributes(details: \(String(describing: details)), initiatedEventId: \(String(describing: initiatedEventId)), reason: \(String(describing: reason)), startedEventId: \(String(describing: startedEventId)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>ChildWorkflowExecutionFailed</code> event.</p>
public struct ChildWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The details of the failure (if provided).</p>
    public let details: String?
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The reason for the failure (if provided).</p>
    public let reason: String?
    /// <p>The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was
    ///       started. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The child workflow execution that failed.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        details: String? = nil,
        initiatedEventId: Int = 0,
        reason: String? = nil,
        startedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.details = details
        self.initiatedEventId = initiatedEventId
        self.reason = reason
        self.startedEventId = startedEventId
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

extension ChildWorkflowExecutionStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension ChildWorkflowExecutionStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionStartedEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>ChildWorkflowExecutionStarted</code> event.</p>
public struct ChildWorkflowExecutionStartedEventAttributes: Equatable {
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The child workflow execution that was started.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        initiatedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

extension ChildWorkflowExecutionTerminatedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ChildWorkflowExecutionTerminatedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionTerminatedEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), startedEventId: \(String(describing: startedEventId)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>ChildWorkflowExecutionTerminated</code> event.</p>
public struct ChildWorkflowExecutionTerminatedEventAttributes: Equatable {
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was
    ///       started. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The child workflow execution that was terminated.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        initiatedEventId: Int = 0,
        startedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.startedEventId = startedEventId
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

extension ChildWorkflowExecutionTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case startedEventId
        case timeoutType
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension ChildWorkflowExecutionTimedOutEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ChildWorkflowExecutionTimedOutEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), startedEventId: \(String(describing: startedEventId)), timeoutType: \(String(describing: timeoutType)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>ChildWorkflowExecutionTimedOut</code> event.</p>
public struct ChildWorkflowExecutionTimedOutEventAttributes: Equatable {
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The ID of the <code>ChildWorkflowExecutionStarted</code> event recorded when this child workflow execution was
    ///       started. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The type of the timeout that caused the child workflow execution to time out.</p>
    public let timeoutType: WorkflowExecutionTimeoutType?
    /// <p>The child workflow execution that timed out.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        initiatedEventId: Int = 0,
        startedEventId: Int = 0,
        timeoutType: WorkflowExecutionTimeoutType? = nil,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.startedEventId = startedEventId
        self.timeoutType = timeoutType
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

public enum CloseStatus {
    case canceled
    case completed
    case continuedAsNew
    case failed
    case terminated
    case timedOut
    case sdkUnknown(String)
}

extension CloseStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CloseStatus] {
        return [
            .canceled,
            .completed,
            .continuedAsNew,
            .failed,
            .terminated,
            .timedOut,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .canceled: return "CANCELED"
        case .completed: return "COMPLETED"
        case .continuedAsNew: return "CONTINUED_AS_NEW"
        case .failed: return "FAILED"
        case .terminated: return "TERMINATED"
        case .timedOut: return "TIMED_OUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CloseStatus(rawValue: rawValue) ?? CloseStatus.sdkUnknown(rawValue)
    }
}

extension CloseStatusFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CloseStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CloseStatusFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CloseStatusFilter(status: \(String(describing: status)))"}
}

/// <p>Used to filter the closed workflow executions in visibility APIs by their close status.</p>
public struct CloseStatusFilter: Equatable {
    /// <p>
    ///          The close status that must match the close status of an execution for it to meet the criteria of
    ///       this filter.</p>
    public let status: CloseStatus?

    public init (
        status: CloseStatus? = nil
    )
    {
        self.status = status
    }
}

extension CompleteWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case result
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
    }
}

extension CompleteWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteWorkflowExecutionDecisionAttributes(result: \(String(describing: result)))"}
}

/// <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct CompleteWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>The result of the workflow execution. The form of the result is implementation defined.</p>
    public let result: String?

    public init (
        result: String? = nil
    )
    {
        self.result = result
    }
}

public enum CompleteWorkflowExecutionFailedCause {
    case operationNotPermitted
    case unhandledDecision
    case sdkUnknown(String)
}

extension CompleteWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CompleteWorkflowExecutionFailedCause] {
        return [
            .operationNotPermitted,
            .unhandledDecision,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .unhandledDecision: return "UNHANDLED_DECISION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CompleteWorkflowExecutionFailedCause(rawValue: rawValue) ?? CompleteWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension CompleteWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(CompleteWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension CompleteWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CompleteWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>CompleteWorkflowExecutionFailed</code> event.</p>
public struct CompleteWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///         because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: CompleteWorkflowExecutionFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>CompleteWorkflowExecution</code> decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        cause: CompleteWorkflowExecutionFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

extension ContinueAsNewWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowTypeVersion
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowTypeVersion = workflowTypeVersion {
            try encodeContainer.encode(workflowTypeVersion, forKey: .workflowTypeVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let workflowTypeVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowTypeVersion)
        workflowTypeVersion = workflowTypeVersionDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension ContinueAsNewWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinueAsNewWorkflowExecutionDecisionAttributes(childPolicy: \(String(describing: childPolicy)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowTypeVersion: \(String(describing: workflowTypeVersion)))"}
}

/// <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>Constrain the following parameters by using a <code>Condition</code> element with the
///               appropriate keys.</p>
///               <ul>
///                   <li>
///                       <p>
///                         <code>tag</code> – A tag used to identify the workflow execution</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p>
///                   </li>
///                </ul>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct ContinueAsNewWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated
    ///       by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy
    ///       overrides the default child policy specified when registering the workflow type using
    ///       <a>RegisterWorkflowType</a>.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let childPolicy: ChildPolicy?
    /// <p>If set, specifies the total duration for this workflow execution. This overrides the
    ///       <code>defaultExecutionStartToCloseTimeout</code> specified when registering the workflow type.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let executionStartToCloseTimeout: String?
    /// <p>The input provided to the new workflow execution.</p>
    public let input: String?
    /// <p>The IAM role to attach to the new (continued) execution.</p>
    public let lambdaRole: String?
    /// <p>The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can
    ///       list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or
    ///       <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>.</p>
    public let tagList: [String]?
    /// <p>The task list to use for the decisions of the new (continued) workflow
    ///       execution.</p>
    public let taskList: TaskList?
    /// <p>
    ///          The task priority that, if set, specifies the priority for the decision tasks for this workflow
    ///       execution. This overrides the defaultTaskPriority specified when registering the workflow type.
    ///       Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a>  in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?
    /// <p>Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the
    ///       <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using
    ///       <a>RegisterWorkflowType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let taskStartToCloseTimeout: String?
    /// <p>The version of the workflow to start.</p>
    public let workflowTypeVersion: String?

    public init (
        childPolicy: ChildPolicy? = nil,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowTypeVersion: String? = nil
    )
    {
        self.childPolicy = childPolicy
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowTypeVersion = workflowTypeVersion
    }
}

public enum ContinueAsNewWorkflowExecutionFailedCause {
    case continueAsNewWorkflowExecutionRateExceeded
    case defaultChildPolicyUndefined
    case defaultExecutionStartToCloseTimeoutUndefined
    case defaultTaskListUndefined
    case defaultTaskStartToCloseTimeoutUndefined
    case operationNotPermitted
    case unhandledDecision
    case workflowTypeDeprecated
    case workflowTypeDoesNotExist
    case sdkUnknown(String)
}

extension ContinueAsNewWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContinueAsNewWorkflowExecutionFailedCause] {
        return [
            .continueAsNewWorkflowExecutionRateExceeded,
            .defaultChildPolicyUndefined,
            .defaultExecutionStartToCloseTimeoutUndefined,
            .defaultTaskListUndefined,
            .defaultTaskStartToCloseTimeoutUndefined,
            .operationNotPermitted,
            .unhandledDecision,
            .workflowTypeDeprecated,
            .workflowTypeDoesNotExist,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .continueAsNewWorkflowExecutionRateExceeded: return "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
        case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
        case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .unhandledDecision: return "UNHANDLED_DECISION"
        case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
        case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContinueAsNewWorkflowExecutionFailedCause(rawValue: rawValue) ?? ContinueAsNewWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension ContinueAsNewWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(ContinueAsNewWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension ContinueAsNewWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinueAsNewWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>ContinueAsNewWorkflowExecutionFailed</code> event.</p>
public struct ContinueAsNewWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///         because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: ContinueAsNewWorkflowExecutionFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        cause: ContinueAsNewWorkflowExecutionFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

public struct CountClosedWorkflowExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "CountClosedWorkflowExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountClosedWorkflowExecutionsOutputError>
}

extension CountClosedWorkflowExecutionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountClosedWorkflowExecutionsInput(closeStatusFilter: \(String(describing: closeStatusFilter)), closeTimeFilter: \(String(describing: closeTimeFilter)), domain: \(String(describing: domain)), executionFilter: \(String(describing: executionFilter)), startTimeFilter: \(String(describing: startTimeFilter)), tagFilter: \(String(describing: tagFilter)), typeFilter: \(String(describing: typeFilter)))"}
}

extension CountClosedWorkflowExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let closeStatusFilter = closeStatusFilter {
            try encodeContainer.encode(closeStatusFilter, forKey: .closeStatusFilter)
        }
        if let closeTimeFilter = closeTimeFilter {
            try encodeContainer.encode(closeTimeFilter, forKey: .closeTimeFilter)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

public struct CountClosedWorkflowExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "CountClosedWorkflowExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountClosedWorkflowExecutionsOutputError>
}

public struct CountClosedWorkflowExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "CountClosedWorkflowExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountClosedWorkflowExecutionsOutputError>
}

public struct CountClosedWorkflowExecutionsInput: Equatable {
    /// <p>If specified, only workflow executions that match this close status are counted. This
    ///       filter has an affect only if <code>executionStatus</code> is specified as
    ///       <code>CLOSED</code>.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let closeStatusFilter: CloseStatusFilter?
    /// <p>If specified, only workflow executions that meet the close time criteria of the filter
    ///       are counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let closeTimeFilter: ExecutionTimeFilter?
    /// <p>The name of the domain containing the workflow executions to count.</p>
    public let domain: String?
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the
    ///       filter are counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let executionFilter: WorkflowExecutionFilter?
    /// <p>If specified, only workflow executions that meet the start time criteria of the filter
    ///       are counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let startTimeFilter: ExecutionTimeFilter?
    /// <p>If specified, only executions that have a tag that matches the filter are
    ///       counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let tagFilter: TagFilter?
    /// <p>If specified, indicates the type of the workflow executions to be counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let typeFilter: WorkflowTypeFilter?

    public init (
        closeStatusFilter: CloseStatusFilter? = nil,
        closeTimeFilter: ExecutionTimeFilter? = nil,
        domain: String? = nil,
        executionFilter: WorkflowExecutionFilter? = nil,
        startTimeFilter: ExecutionTimeFilter? = nil,
        tagFilter: TagFilter? = nil,
        typeFilter: WorkflowTypeFilter? = nil
    )
    {
        self.closeStatusFilter = closeStatusFilter
        self.closeTimeFilter = closeTimeFilter
        self.domain = domain
        self.executionFilter = executionFilter
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct CountClosedWorkflowExecutionsInputBody: Equatable {
    public let domain: String?
    public let startTimeFilter: ExecutionTimeFilter?
    public let closeTimeFilter: ExecutionTimeFilter?
    public let executionFilter: WorkflowExecutionFilter?
    public let typeFilter: WorkflowTypeFilter?
    public let tagFilter: TagFilter?
    public let closeStatusFilter: CloseStatusFilter?
}

extension CountClosedWorkflowExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let closeTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .closeTimeFilter)
        closeTimeFilter = closeTimeFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let closeStatusFilterDecoded = try containerValues.decodeIfPresent(CloseStatusFilter.self, forKey: .closeStatusFilter)
        closeStatusFilter = closeStatusFilterDecoded
    }
}

extension CountClosedWorkflowExecutionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountClosedWorkflowExecutionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CountClosedWorkflowExecutionsOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountClosedWorkflowExecutionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountClosedWorkflowExecutionsOutputResponse(count: \(String(describing: count)), truncated: \(String(describing: truncated)))"}
}

extension CountClosedWorkflowExecutionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CountClosedWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// <p>Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or
///       <a>CountClosedWorkflowExecutions</a>
///          </p>
public struct CountClosedWorkflowExecutionsOutputResponse: Equatable {
    /// <p>The number of workflow executions.</p>
    public let count: Int
    /// <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    public let truncated: Bool

    public init (
        count: Int = 0,
        truncated: Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountClosedWorkflowExecutionsOutputResponseBody: Equatable {
    public let count: Int
    public let truncated: Bool
}

extension CountClosedWorkflowExecutionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let truncatedDecoded = try containerValues.decode(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
    }
}

public struct CountOpenWorkflowExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "CountOpenWorkflowExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountOpenWorkflowExecutionsOutputError>
}

extension CountOpenWorkflowExecutionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountOpenWorkflowExecutionsInput(domain: \(String(describing: domain)), executionFilter: \(String(describing: executionFilter)), startTimeFilter: \(String(describing: startTimeFilter)), tagFilter: \(String(describing: tagFilter)), typeFilter: \(String(describing: typeFilter)))"}
}

extension CountOpenWorkflowExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

public struct CountOpenWorkflowExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "CountOpenWorkflowExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountOpenWorkflowExecutionsOutputError>
}

public struct CountOpenWorkflowExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "CountOpenWorkflowExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<CountOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<CountOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountOpenWorkflowExecutionsOutputError>
}

public struct CountOpenWorkflowExecutionsInput: Equatable {
    /// <p>The name of the domain containing the workflow executions to count.</p>
    public let domain: String?
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the
    ///       filter are counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let executionFilter: WorkflowExecutionFilter?
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be
    ///       counted.</p>
    public let startTimeFilter: ExecutionTimeFilter?
    /// <p>If specified, only executions that have a tag that matches the filter are
    ///       counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let tagFilter: TagFilter?
    /// <p>Specifies the type of the workflow executions to be counted.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let typeFilter: WorkflowTypeFilter?

    public init (
        domain: String? = nil,
        executionFilter: WorkflowExecutionFilter? = nil,
        startTimeFilter: ExecutionTimeFilter? = nil,
        tagFilter: TagFilter? = nil,
        typeFilter: WorkflowTypeFilter? = nil
    )
    {
        self.domain = domain
        self.executionFilter = executionFilter
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct CountOpenWorkflowExecutionsInputBody: Equatable {
    public let domain: String?
    public let startTimeFilter: ExecutionTimeFilter?
    public let typeFilter: WorkflowTypeFilter?
    public let tagFilter: TagFilter?
    public let executionFilter: WorkflowExecutionFilter?
}

extension CountOpenWorkflowExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}

extension CountOpenWorkflowExecutionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountOpenWorkflowExecutionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CountOpenWorkflowExecutionsOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountOpenWorkflowExecutionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountOpenWorkflowExecutionsOutputResponse(count: \(String(describing: count)), truncated: \(String(describing: truncated)))"}
}

extension CountOpenWorkflowExecutionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CountOpenWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// <p>Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or
///       <a>CountClosedWorkflowExecutions</a>
///          </p>
public struct CountOpenWorkflowExecutionsOutputResponse: Equatable {
    /// <p>The number of workflow executions.</p>
    public let count: Int
    /// <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    public let truncated: Bool

    public init (
        count: Int = 0,
        truncated: Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountOpenWorkflowExecutionsOutputResponseBody: Equatable {
    public let count: Int
    public let truncated: Bool
}

extension CountOpenWorkflowExecutionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let truncatedDecoded = try containerValues.decode(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
    }
}

public struct CountPendingActivityTasksInputBodyMiddleware: Middleware {
    public let id: String = "CountPendingActivityTasksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingActivityTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingActivityTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingActivityTasksInput>
    public typealias MOutput = OperationOutput<CountPendingActivityTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingActivityTasksOutputError>
}

extension CountPendingActivityTasksInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountPendingActivityTasksInput(domain: \(String(describing: domain)), taskList: \(String(describing: taskList)))"}
}

extension CountPendingActivityTasksInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case taskList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

public struct CountPendingActivityTasksInputHeadersMiddleware: Middleware {
    public let id: String = "CountPendingActivityTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingActivityTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingActivityTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingActivityTasksInput>
    public typealias MOutput = OperationOutput<CountPendingActivityTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingActivityTasksOutputError>
}

public struct CountPendingActivityTasksInputQueryItemMiddleware: Middleware {
    public let id: String = "CountPendingActivityTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingActivityTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingActivityTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingActivityTasksInput>
    public typealias MOutput = OperationOutput<CountPendingActivityTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingActivityTasksOutputError>
}

public struct CountPendingActivityTasksInput: Equatable {
    /// <p>The name of the domain that contains the task list.</p>
    public let domain: String?
    /// <p>The name of the task list.</p>
    public let taskList: TaskList?

    public init (
        domain: String? = nil,
        taskList: TaskList? = nil
    )
    {
        self.domain = domain
        self.taskList = taskList
    }
}

struct CountPendingActivityTasksInputBody: Equatable {
    public let domain: String?
    public let taskList: TaskList?
}

extension CountPendingActivityTasksInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case taskList
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
    }
}

extension CountPendingActivityTasksOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountPendingActivityTasksOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CountPendingActivityTasksOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountPendingActivityTasksOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountPendingActivityTasksOutputResponse(count: \(String(describing: count)), truncated: \(String(describing: truncated)))"}
}

extension CountPendingActivityTasksOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CountPendingActivityTasksOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// <p>Contains the count of tasks in a task list.</p>
public struct CountPendingActivityTasksOutputResponse: Equatable {
    /// <p>The number of tasks in the task list.</p>
    public let count: Int
    /// <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    public let truncated: Bool

    public init (
        count: Int = 0,
        truncated: Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountPendingActivityTasksOutputResponseBody: Equatable {
    public let count: Int
    public let truncated: Bool
}

extension CountPendingActivityTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let truncatedDecoded = try containerValues.decode(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
    }
}

public struct CountPendingDecisionTasksInputBodyMiddleware: Middleware {
    public let id: String = "CountPendingDecisionTasksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingDecisionTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingDecisionTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingDecisionTasksInput>
    public typealias MOutput = OperationOutput<CountPendingDecisionTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingDecisionTasksOutputError>
}

extension CountPendingDecisionTasksInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountPendingDecisionTasksInput(domain: \(String(describing: domain)), taskList: \(String(describing: taskList)))"}
}

extension CountPendingDecisionTasksInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case taskList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

public struct CountPendingDecisionTasksInputHeadersMiddleware: Middleware {
    public let id: String = "CountPendingDecisionTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingDecisionTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingDecisionTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingDecisionTasksInput>
    public typealias MOutput = OperationOutput<CountPendingDecisionTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingDecisionTasksOutputError>
}

public struct CountPendingDecisionTasksInputQueryItemMiddleware: Middleware {
    public let id: String = "CountPendingDecisionTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CountPendingDecisionTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<CountPendingDecisionTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CountPendingDecisionTasksInput>
    public typealias MOutput = OperationOutput<CountPendingDecisionTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CountPendingDecisionTasksOutputError>
}

public struct CountPendingDecisionTasksInput: Equatable {
    /// <p>The name of the domain that contains the task list.</p>
    public let domain: String?
    /// <p>The name of the task list.</p>
    public let taskList: TaskList?

    public init (
        domain: String? = nil,
        taskList: TaskList? = nil
    )
    {
        self.domain = domain
        self.taskList = taskList
    }
}

struct CountPendingDecisionTasksInputBody: Equatable {
    public let domain: String?
    public let taskList: TaskList?
}

extension CountPendingDecisionTasksInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case taskList
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
    }
}

extension CountPendingDecisionTasksOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountPendingDecisionTasksOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CountPendingDecisionTasksOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountPendingDecisionTasksOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CountPendingDecisionTasksOutputResponse(count: \(String(describing: count)), truncated: \(String(describing: truncated)))"}
}

extension CountPendingDecisionTasksOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CountPendingDecisionTasksOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// <p>Contains the count of tasks in a task list.</p>
public struct CountPendingDecisionTasksOutputResponse: Equatable {
    /// <p>The number of tasks in the task list.</p>
    public let count: Int
    /// <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    public let truncated: Bool

    public init (
        count: Int = 0,
        truncated: Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountPendingDecisionTasksOutputResponseBody: Equatable {
    public let count: Int
    public let truncated: Bool
}

extension CountPendingDecisionTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let truncatedDecoded = try containerValues.decode(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
    }
}

extension Decision: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cancelTimerDecisionAttributes
        case cancelWorkflowExecutionDecisionAttributes
        case completeWorkflowExecutionDecisionAttributes
        case continueAsNewWorkflowExecutionDecisionAttributes
        case decisionType
        case failWorkflowExecutionDecisionAttributes
        case recordMarkerDecisionAttributes
        case requestCancelActivityTaskDecisionAttributes
        case requestCancelExternalWorkflowExecutionDecisionAttributes
        case scheduleActivityTaskDecisionAttributes
        case scheduleLambdaFunctionDecisionAttributes
        case signalExternalWorkflowExecutionDecisionAttributes
        case startChildWorkflowExecutionDecisionAttributes
        case startTimerDecisionAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cancelTimerDecisionAttributes = cancelTimerDecisionAttributes {
            try encodeContainer.encode(cancelTimerDecisionAttributes, forKey: .cancelTimerDecisionAttributes)
        }
        if let cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionDecisionAttributes, forKey: .cancelWorkflowExecutionDecisionAttributes)
        }
        if let completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(completeWorkflowExecutionDecisionAttributes, forKey: .completeWorkflowExecutionDecisionAttributes)
        }
        if let continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionDecisionAttributes, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        }
        if let decisionType = decisionType {
            try encodeContainer.encode(decisionType.rawValue, forKey: .decisionType)
        }
        if let failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(failWorkflowExecutionDecisionAttributes, forKey: .failWorkflowExecutionDecisionAttributes)
        }
        if let recordMarkerDecisionAttributes = recordMarkerDecisionAttributes {
            try encodeContainer.encode(recordMarkerDecisionAttributes, forKey: .recordMarkerDecisionAttributes)
        }
        if let requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes {
            try encodeContainer.encode(requestCancelActivityTaskDecisionAttributes, forKey: .requestCancelActivityTaskDecisionAttributes)
        }
        if let requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionDecisionAttributes, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        }
        if let scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes {
            try encodeContainer.encode(scheduleActivityTaskDecisionAttributes, forKey: .scheduleActivityTaskDecisionAttributes)
        }
        if let scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionDecisionAttributes, forKey: .scheduleLambdaFunctionDecisionAttributes)
        }
        if let signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionDecisionAttributes, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        }
        if let startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionDecisionAttributes, forKey: .startChildWorkflowExecutionDecisionAttributes)
        }
        if let startTimerDecisionAttributes = startTimerDecisionAttributes {
            try encodeContainer.encode(startTimerDecisionAttributes, forKey: .startTimerDecisionAttributes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decisionTypeDecoded = try containerValues.decodeIfPresent(DecisionType.self, forKey: .decisionType)
        decisionType = decisionTypeDecoded
        let scheduleActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(ScheduleActivityTaskDecisionAttributes.self, forKey: .scheduleActivityTaskDecisionAttributes)
        scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributesDecoded
        let requestCancelActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(RequestCancelActivityTaskDecisionAttributes.self, forKey: .requestCancelActivityTaskDecisionAttributes)
        requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributesDecoded
        let completeWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(CompleteWorkflowExecutionDecisionAttributes.self, forKey: .completeWorkflowExecutionDecisionAttributes)
        completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributesDecoded
        let failWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(FailWorkflowExecutionDecisionAttributes.self, forKey: .failWorkflowExecutionDecisionAttributes)
        failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributesDecoded
        let cancelWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(CancelWorkflowExecutionDecisionAttributes.self, forKey: .cancelWorkflowExecutionDecisionAttributes)
        cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributesDecoded
        let continueAsNewWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(ContinueAsNewWorkflowExecutionDecisionAttributes.self, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributesDecoded
        let recordMarkerDecisionAttributesDecoded = try containerValues.decodeIfPresent(RecordMarkerDecisionAttributes.self, forKey: .recordMarkerDecisionAttributes)
        recordMarkerDecisionAttributes = recordMarkerDecisionAttributesDecoded
        let startTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(StartTimerDecisionAttributes.self, forKey: .startTimerDecisionAttributes)
        startTimerDecisionAttributes = startTimerDecisionAttributesDecoded
        let cancelTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(CancelTimerDecisionAttributes.self, forKey: .cancelTimerDecisionAttributes)
        cancelTimerDecisionAttributes = cancelTimerDecisionAttributesDecoded
        let signalExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SignalExternalWorkflowExecutionDecisionAttributes.self, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributesDecoded
        let requestCancelExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(RequestCancelExternalWorkflowExecutionDecisionAttributes.self, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributesDecoded
        let startChildWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(StartChildWorkflowExecutionDecisionAttributes.self, forKey: .startChildWorkflowExecutionDecisionAttributes)
        startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributesDecoded
        let scheduleLambdaFunctionDecisionAttributesDecoded = try containerValues.decodeIfPresent(ScheduleLambdaFunctionDecisionAttributes.self, forKey: .scheduleLambdaFunctionDecisionAttributes)
        scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributesDecoded
    }
}

extension Decision: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Decision(cancelTimerDecisionAttributes: \(String(describing: cancelTimerDecisionAttributes)), cancelWorkflowExecutionDecisionAttributes: \(String(describing: cancelWorkflowExecutionDecisionAttributes)), completeWorkflowExecutionDecisionAttributes: \(String(describing: completeWorkflowExecutionDecisionAttributes)), continueAsNewWorkflowExecutionDecisionAttributes: \(String(describing: continueAsNewWorkflowExecutionDecisionAttributes)), decisionType: \(String(describing: decisionType)), failWorkflowExecutionDecisionAttributes: \(String(describing: failWorkflowExecutionDecisionAttributes)), recordMarkerDecisionAttributes: \(String(describing: recordMarkerDecisionAttributes)), requestCancelActivityTaskDecisionAttributes: \(String(describing: requestCancelActivityTaskDecisionAttributes)), requestCancelExternalWorkflowExecutionDecisionAttributes: \(String(describing: requestCancelExternalWorkflowExecutionDecisionAttributes)), scheduleActivityTaskDecisionAttributes: \(String(describing: scheduleActivityTaskDecisionAttributes)), scheduleLambdaFunctionDecisionAttributes: \(String(describing: scheduleLambdaFunctionDecisionAttributes)), signalExternalWorkflowExecutionDecisionAttributes: \(String(describing: signalExternalWorkflowExecutionDecisionAttributes)), startChildWorkflowExecutionDecisionAttributes: \(String(describing: startChildWorkflowExecutionDecisionAttributes)), startTimerDecisionAttributes: \(String(describing: startTimerDecisionAttributes)))"}
}

/// <p>Specifies a decision made by the decider. A decision can be one of these types:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>CancelTimer</code> – Cancels a previously started timer and records a <code>TimerCanceled</code> event in the
///         history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CancelWorkflowExecution</code> – Closes the workflow execution and records a
///         <code>WorkflowExecutionCanceled</code> event in the history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CompleteWorkflowExecution</code> – Closes the workflow execution and records a
///         <code>WorkflowExecutionCompleted</code> event in the history .</p>
///             </li>
///             <li>
///                <p>
///                   <code>ContinueAsNewWorkflowExecution</code> – Closes the workflow execution and starts a new workflow execution of the
///         same type using the same workflow ID and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event
///         is recorded in the history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>FailWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionFailed</code>
///         event in the history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RecordMarker</code> – Records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding
///         custom information in the history for instance to let deciders know that they don't need to look at the history
///         beyond the marker event.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelActivityTask</code> – Attempts to cancel a previously scheduled activity task. If the activity task
///         was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already
///         assigned to a worker, then the worker is informed that cancellation has been requested in the response to
///         <a>RecordActivityTaskHeartbeat</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelExternalWorkflowExecution</code> – Requests that a request be made to cancel the specified external
///         workflow execution and records a <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the
///         history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ScheduleActivityTask</code> – Schedules an activity task.</p>
///             </li>
///             <li>
///                <p>
///                   <code>SignalExternalWorkflowExecution</code> – Requests a signal to be delivered to the specified external workflow
///         execution and records a <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartChildWorkflowExecution</code> – Requests that a child workflow execution be started and records a
///         <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a
///         separate workflow execution with its own history.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartTimer</code> – Starts a timer for this workflow execution and records a <code>TimerStarted</code> event in
///         the history. This timer fires after the specified delay and record a <code>TimerFired</code> event.</p>
///             </li>
///          </ul>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>If you grant permission to use <code>RespondDecisionTaskCompleted</code>, you can use IAM policies to express
///       permissions for the list of decisions returned by this action as if they were members of the API. Treating
///       decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and
///       example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF
///           Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
///
///          <p>
///             <b>Decision Failure</b>
///          </p>
///
///          <p>Decisions can fail for several reasons</p>
///
///          <ul>
///             <li>
///                <p>The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.</p>
///             </li>
///             <li>
///                <p>A limit on your account was reached.</p>
///             </li>
///             <li>
///                <p>The decision lacks sufficient permissions.</p>
///             </li>
///          </ul>
///
///          <p>One of the following events might be added to the history to indicate an error. The event attribute's
///           <code>cause</code> parameter indicates the cause. If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
///           in the <i>Amazon SWF Developer Guide</i>.</p>
///
///          <ul>
///             <li>
///                <p>
///                   <code>ScheduleActivityTaskFailed</code> – A <code>ScheduleActivityTask</code> decision failed. This could happen if the
///         activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't
///         properly configured.</p>
///             </li>
///             <li>
///                <p>
///                     <code>RequestCancelActivityTaskFailed</code> – A
///                         <code>RequestCancelActivityTask</code> decision failed. This could happen if
///                     there is no open activity task with the specified activityId.</p>
///             </li>
///             <li>
///                <p>
///                     <code>StartTimerFailed</code> – A <code>StartTimer</code> decision failed. This
///                     could happen if there is another open timer with the same timerId.</p>
///             </li>
///             <li>
///                <p>
///                     <code>CancelTimerFailed</code> – A <code>CancelTimer</code> decision failed.
///                     This could happen if there is no open timer with the specified
///                     timerId.</p>
///             </li>
///             <li>
///                <p>
///                     <code>StartChildWorkflowExecutionFailed</code> – A
///                         <code>StartChildWorkflowExecution</code> decision failed. This could happen
///                     if the workflow type specified isn't registered, is deprecated, or the decision
///                     isn't properly configured.</p>
///             </li>
///             <li>
///                <p>
///                     <code>SignalExternalWorkflowExecutionFailed</code> – A
///                         <code>SignalExternalWorkflowExecution</code> decision failed. This could
///                     happen if the <code>workflowID</code> specified in the decision was
///                     incorrect.</p>
///             </li>
///             <li>
///                <p>
///                     <code>RequestCancelExternalWorkflowExecutionFailed</code> – A
///                         <code>RequestCancelExternalWorkflowExecution</code> decision failed. This
///                     could happen if the <code>workflowID</code> specified in the decision was
///                     incorrect.</p>
///             </li>
///             <li>
///                <p>
///                     <code>CancelWorkflowExecutionFailed</code> – A
///                         <code>CancelWorkflowExecution</code> decision failed. This could happen if
///                     there is an unhandled decision task pending in the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                     <code>CompleteWorkflowExecutionFailed</code> – A
///                         <code>CompleteWorkflowExecution</code> decision failed. This could happen if
///                     there is an unhandled decision task pending in the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                     <code>ContinueAsNewWorkflowExecutionFailed</code> – A
///                         <code>ContinueAsNewWorkflowExecution</code> decision failed. This could
///                     happen if there is an unhandled decision task pending in the workflow execution
///                     or the ContinueAsNewWorkflowExecution decision was not configured
///                     correctly.</p>
///             </li>
///             <li>
///                <p>
///                     <code>FailWorkflowExecutionFailed</code> – A <code>FailWorkflowExecution</code>
///                     decision failed. This could happen if there is an unhandled decision task
///                     pending in the workflow execution.</p>
///             </li>
///          </ul>
///          <p>The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.</p>
///          <note>
///             <p>A workflow execution may be closed by the decider by returning one of the following decisions when completing
///       a decision task: <code>CompleteWorkflowExecution</code>, <code>FailWorkflowExecution</code>,
///           <code>CancelWorkflowExecution</code> and <code>ContinueAsNewWorkflowExecution</code>. An <code>UnhandledDecision</code> fault
///       is returned if a workflow closing decision is specified and a signal or activity event had been added to the
///       history while the decision task was being performed by the decider. Unlike the above situations which are logic
///       issues, this fault is always possible because of race conditions in a distributed system. The right action here is
///       to call <a>RespondDecisionTaskCompleted</a>  without any decisions. This would result in another decision task
///       with these new events included in the history. The decider should handle the new events and may decide to close
///       the workflow execution.</p>
///          </note>
///          <p>
///             <b>How to Code a Decision</b>
///          </p>
///          <p>You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>
///                      <a>ScheduleActivityTaskDecisionAttributes</a>
///                     </code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>RequestCancelActivityTaskDecisionAttributes</a>
///                     </code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>CompleteWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>FailWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>CancelWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>ContinueAsNewWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>RecordMarkerDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>StartTimerDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>CancelTimerDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>SignalExternalWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>RequestCancelExternalWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///             <li>
///                <p>
///                   <code>
///                      <a>StartChildWorkflowExecutionDecisionAttributes</a>
///                   </code>
///                 </p>
///             </li>
///          </ul>
public struct Decision: Equatable {
    /// <p>Provides the details of the <code>CancelTimer</code> decision. It isn't set for other decision types.</p>
    public let cancelTimerDecisionAttributes: CancelTimerDecisionAttributes?
    /// <p>Provides the details of the <code>CancelWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes?
    /// <p>Specifies the type of the decision.</p>
    public let decisionType: DecisionType?
    /// <p>Provides the details of the <code>FailWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>RecordMarker</code> decision. It isn't set for other decision types.</p>
    public let recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes?
    /// <p>Provides the details of the <code>RequestCancelActivityTask</code> decision. It isn't set for other decision types.</p>
    public let requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes?
    /// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.
    ///       It isn't set for other decision types.</p>
    public let requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>ScheduleActivityTask</code> decision. It isn't set for other decision types.</p>
    public let scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes?
    /// <p>Provides the details of the <code>ScheduleLambdaFunction</code> decision. It isn't set
    ///       for other decision types.</p>
    public let scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes?
    /// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision. It isn't set for other decision types.</p>
    public let startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes?
    /// <p>Provides the details of the <code>StartTimer</code> decision. It isn't set for other decision types.</p>
    public let startTimerDecisionAttributes: StartTimerDecisionAttributes?

    public init (
        cancelTimerDecisionAttributes: CancelTimerDecisionAttributes? = nil,
        cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes? = nil,
        completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes? = nil,
        continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes? = nil,
        decisionType: DecisionType? = nil,
        failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes? = nil,
        recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes? = nil,
        requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes? = nil,
        requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil,
        scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes? = nil,
        scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes? = nil,
        signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes? = nil,
        startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes? = nil,
        startTimerDecisionAttributes: StartTimerDecisionAttributes? = nil
    )
    {
        self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes
        self.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes
        self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
        self.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes
        self.decisionType = decisionType
        self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
        self.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes
        self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
        self.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes
        self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
        self.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes
        self.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes
        self.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes
        self.startTimerDecisionAttributes = startTimerDecisionAttributes
    }
}

extension DecisionTaskCompletedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case executionContext
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionContext = executionContext {
            try encodeContainer.encode(executionContext, forKey: .executionContext)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionContextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionContext)
        executionContext = executionContextDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension DecisionTaskCompletedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecisionTaskCompletedEventAttributes(executionContext: \(String(describing: executionContext)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>DecisionTaskCompleted</code> event.</p>
public struct DecisionTaskCompletedEventAttributes: Equatable {
    /// <p>User defined context for the workflow execution.</p>
    public let executionContext: String?
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int

    public init (
        executionContext: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.executionContext = executionContext
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension DecisionTaskScheduledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}

extension DecisionTaskScheduledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecisionTaskScheduledEventAttributes(startToCloseTimeout: \(String(describing: startToCloseTimeout)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)))"}
}

/// <p>Provides details about the <code>DecisionTaskScheduled</code> event.</p>
public struct DecisionTaskScheduledEventAttributes: Equatable {
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let startToCloseTimeout: String?
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    public let taskList: TaskList?
    /// <p>
    ///          A task priority that, if set, specifies the priority for this decision task.
    ///       Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?

    public init (
        startToCloseTimeout: String? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil
    )
    {
        self.startToCloseTimeout = startToCloseTimeout
        self.taskList = taskList
        self.taskPriority = taskPriority
    }
}

extension DecisionTaskStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identity
        case scheduledEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identity)
        identity = identityDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension DecisionTaskStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecisionTaskStartedEventAttributes(identity: \(String(describing: identity)), scheduledEventId: \(String(describing: scheduledEventId)))"}
}

/// <p>Provides the details of the <code>DecisionTaskStarted</code> event.</p>
public struct DecisionTaskStartedEventAttributes: Equatable {
    /// <p>Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    public let identity: String?
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let scheduledEventId: Int

    public init (
        identity: String? = nil,
        scheduledEventId: Int = 0
    )
    {
        self.identity = identity
        self.scheduledEventId = scheduledEventId
    }
}

extension DecisionTaskTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(DecisionTaskTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension DecisionTaskTimedOutEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DecisionTaskTimedOutEventAttributes(scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)), timeoutType: \(String(describing: timeoutType)))"}
}

/// <p>Provides the details of the <code>DecisionTaskTimedOut</code> event.</p>
public struct DecisionTaskTimedOutEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let startedEventId: Int
    /// <p>The type of timeout that expired before the decision task could be completed.</p>
    public let timeoutType: DecisionTaskTimeoutType?

    public init (
        scheduledEventId: Int = 0,
        startedEventId: Int = 0,
        timeoutType: DecisionTaskTimeoutType? = nil
    )
    {
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
        self.timeoutType = timeoutType
    }
}

public enum DecisionTaskTimeoutType {
    case startToClose
    case sdkUnknown(String)
}

extension DecisionTaskTimeoutType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DecisionTaskTimeoutType] {
        return [
            .startToClose,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .startToClose: return "START_TO_CLOSE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DecisionTaskTimeoutType(rawValue: rawValue) ?? DecisionTaskTimeoutType.sdkUnknown(rawValue)
    }
}

public enum DecisionType {
    case canceltimer
    case cancelworkflowexecution
    case completeworkflowexecution
    case continueasnewworkflowexecution
    case failworkflowexecution
    case recordmarker
    case requestcancelactivitytask
    case requestcancelexternalworkflowexecution
    case scheduleactivitytask
    case schedulelambdafunction
    case signalexternalworkflowexecution
    case startchildworkflowexecution
    case starttimer
    case sdkUnknown(String)
}

extension DecisionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DecisionType] {
        return [
            .canceltimer,
            .cancelworkflowexecution,
            .completeworkflowexecution,
            .continueasnewworkflowexecution,
            .failworkflowexecution,
            .recordmarker,
            .requestcancelactivitytask,
            .requestcancelexternalworkflowexecution,
            .scheduleactivitytask,
            .schedulelambdafunction,
            .signalexternalworkflowexecution,
            .startchildworkflowexecution,
            .starttimer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .canceltimer: return "CancelTimer"
        case .cancelworkflowexecution: return "CancelWorkflowExecution"
        case .completeworkflowexecution: return "CompleteWorkflowExecution"
        case .continueasnewworkflowexecution: return "ContinueAsNewWorkflowExecution"
        case .failworkflowexecution: return "FailWorkflowExecution"
        case .recordmarker: return "RecordMarker"
        case .requestcancelactivitytask: return "RequestCancelActivityTask"
        case .requestcancelexternalworkflowexecution: return "RequestCancelExternalWorkflowExecution"
        case .scheduleactivitytask: return "ScheduleActivityTask"
        case .schedulelambdafunction: return "ScheduleLambdaFunction"
        case .signalexternalworkflowexecution: return "SignalExternalWorkflowExecution"
        case .startchildworkflowexecution: return "StartChildWorkflowExecution"
        case .starttimer: return "StartTimer"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DecisionType(rawValue: rawValue) ?? DecisionType.sdkUnknown(rawValue)
    }
}

extension DefaultUndefinedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DefaultUndefinedFault(message: \(String(describing: message)))"}
}

extension DefaultUndefinedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DefaultUndefinedFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The <code>StartWorkflowExecution</code> API action was called without the required
///       parameters set.</p>
///          <p>Some workflow execution parameters, such as the decision <code>taskList</code>, must be
///       set to start the execution. However, these parameters might have been set as defaults when the
///       workflow type was registered. In this case, you can omit these parameters from the
///         <code>StartWorkflowExecution</code> call and Amazon SWF uses the values defined in the workflow
///       type.</p>
///          <note>
///             <p>If these parameters aren't set and no default parameters were defined in the workflow
///         type, this error is displayed.</p>
///          </note>
public struct DefaultUndefinedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUndefinedFaultBody: Equatable {
    public let message: String?
}

extension DefaultUndefinedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeprecateActivityTypeInputBodyMiddleware: Middleware {
    public let id: String = "DeprecateActivityTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<DeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateActivityTypeOutputError>
}

extension DeprecateActivityTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateActivityTypeInput(activityType: \(String(describing: activityType)), domain: \(String(describing: domain)))"}
}

extension DeprecateActivityTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

public struct DeprecateActivityTypeInputHeadersMiddleware: Middleware {
    public let id: String = "DeprecateActivityTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<DeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateActivityTypeOutputError>
}

public struct DeprecateActivityTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "DeprecateActivityTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<DeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateActivityTypeOutputError>
}

public struct DeprecateActivityTypeInput: Equatable {
    /// <p>The activity type to deprecate.</p>
    public let activityType: ActivityType?
    /// <p>The name of the domain in which the activity type is registered.</p>
    public let domain: String?

    public init (
        activityType: ActivityType? = nil,
        domain: String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct DeprecateActivityTypeInputBody: Equatable {
    public let domain: String?
    public let activityType: ActivityType?
}

extension DeprecateActivityTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension DeprecateActivityTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateActivityTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeprecateActivityTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateActivityTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateActivityTypeOutputResponse()"}
}

extension DeprecateActivityTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateActivityTypeOutputResponse: Equatable {

    public init() {}
}

struct DeprecateActivityTypeOutputResponseBody: Equatable {
}

extension DeprecateActivityTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeprecateDomainInputBodyMiddleware: Middleware {
    public let id: String = "DeprecateDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateDomainInput>
    public typealias MOutput = OperationOutput<DeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateDomainOutputError>
}

extension DeprecateDomainInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateDomainInput(name: \(String(describing: name)))"}
}

extension DeprecateDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeprecateDomainInputHeadersMiddleware: Middleware {
    public let id: String = "DeprecateDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateDomainInput>
    public typealias MOutput = OperationOutput<DeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateDomainOutputError>
}

public struct DeprecateDomainInputQueryItemMiddleware: Middleware {
    public let id: String = "DeprecateDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateDomainInput>
    public typealias MOutput = OperationOutput<DeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateDomainOutputError>
}

public struct DeprecateDomainInput: Equatable {
    /// <p>The name of the domain to deprecate.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeprecateDomainInputBody: Equatable {
    public let name: String?
}

extension DeprecateDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeprecateDomainOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateDomainOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DomainDeprecatedFault" : self = .domainDeprecatedFault(try DomainDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeprecateDomainOutputError: Equatable {
    case domainDeprecatedFault(DomainDeprecatedFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateDomainOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateDomainOutputResponse()"}
}

extension DeprecateDomainOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateDomainOutputResponse: Equatable {

    public init() {}
}

struct DeprecateDomainOutputResponseBody: Equatable {
}

extension DeprecateDomainOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeprecateWorkflowTypeInputBodyMiddleware: Middleware {
    public let id: String = "DeprecateWorkflowTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateWorkflowTypeOutputError>
}

extension DeprecateWorkflowTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateWorkflowTypeInput(domain: \(String(describing: domain)), workflowType: \(String(describing: workflowType)))"}
}

extension DeprecateWorkflowTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

public struct DeprecateWorkflowTypeInputHeadersMiddleware: Middleware {
    public let id: String = "DeprecateWorkflowTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateWorkflowTypeOutputError>
}

public struct DeprecateWorkflowTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "DeprecateWorkflowTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeprecateWorkflowTypeOutputError>
}

public struct DeprecateWorkflowTypeInput: Equatable {
    /// <p>The name of the domain in which the workflow type is registered.</p>
    public let domain: String?
    /// <p>The workflow type to deprecate.</p>
    public let workflowType: WorkflowType?

    public init (
        domain: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct DeprecateWorkflowTypeInputBody: Equatable {
    public let domain: String?
    public let workflowType: WorkflowType?
}

extension DeprecateWorkflowTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension DeprecateWorkflowTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateWorkflowTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeprecateWorkflowTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateWorkflowTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeprecateWorkflowTypeOutputResponse()"}
}

extension DeprecateWorkflowTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateWorkflowTypeOutputResponse: Equatable {

    public init() {}
}

struct DeprecateWorkflowTypeOutputResponseBody: Equatable {
}

extension DeprecateWorkflowTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeActivityTypeInputBodyMiddleware: Middleware {
    public let id: String = "DescribeActivityTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeActivityTypeInput>
    public typealias MOutput = OperationOutput<DescribeActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeActivityTypeOutputError>
}

extension DescribeActivityTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeActivityTypeInput(activityType: \(String(describing: activityType)), domain: \(String(describing: domain)))"}
}

extension DescribeActivityTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

public struct DescribeActivityTypeInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeActivityTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeActivityTypeInput>
    public typealias MOutput = OperationOutput<DescribeActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeActivityTypeOutputError>
}

public struct DescribeActivityTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeActivityTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeActivityTypeInput>
    public typealias MOutput = OperationOutput<DescribeActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeActivityTypeOutputError>
}

public struct DescribeActivityTypeInput: Equatable {
    /// <p>The activity type to get information about. Activity types are identified by the
    ///         <code>name</code> and <code>version</code> that were supplied when the activity was
    ///       registered.</p>
    public let activityType: ActivityType?
    /// <p>The name of the domain in which the activity type is registered.</p>
    public let domain: String?

    public init (
        activityType: ActivityType? = nil,
        domain: String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct DescribeActivityTypeInputBody: Equatable {
    public let domain: String?
    public let activityType: ActivityType?
}

extension DescribeActivityTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension DescribeActivityTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeActivityTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeActivityTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActivityTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeActivityTypeOutputResponse(configuration: \(String(describing: configuration)), typeInfo: \(String(describing: typeInfo)))"}
}

extension DescribeActivityTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeActivityTypeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configuration = output.configuration
            self.typeInfo = output.typeInfo
        } else {
            self.configuration = nil
            self.typeInfo = nil
        }
    }
}

/// <p>Detailed information about an activity type.</p>
public struct DescribeActivityTypeOutputResponse: Equatable {
    /// <p>The configuration settings registered with the activity type.</p>
    public let configuration: ActivityTypeConfiguration?
    /// <p>General information about the activity type.</p>
    ///          <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>REGISTERED</code> – The type is registered and available. Workers supporting this
    ///         type should be running.
    ///       </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code> – The type was deprecated using <a>DeprecateActivityType</a>, but is
    ///         still in use. You should keep workers supporting this type running.
    ///         You cannot create new tasks of this type.
    ///       </p>
    ///             </li>
    ///          </ul>
    public let typeInfo: ActivityTypeInfo?

    public init (
        configuration: ActivityTypeConfiguration? = nil,
        typeInfo: ActivityTypeInfo? = nil
    )
    {
        self.configuration = configuration
        self.typeInfo = typeInfo
    }
}

struct DescribeActivityTypeOutputResponseBody: Equatable {
    public let typeInfo: ActivityTypeInfo?
    public let configuration: ActivityTypeConfiguration?
}

extension DescribeActivityTypeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration
        case typeInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfoDecoded = try containerValues.decodeIfPresent(ActivityTypeInfo.self, forKey: .typeInfo)
        typeInfo = typeInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(ActivityTypeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

public struct DescribeDomainInputBodyMiddleware: Middleware {
    public let id: String = "DescribeDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDomainInput>
    public typealias MOutput = OperationOutput<DescribeDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDomainOutputError>
}

extension DescribeDomainInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeDomainInput(name: \(String(describing: name)))"}
}

extension DescribeDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DescribeDomainInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDomainInput>
    public typealias MOutput = OperationOutput<DescribeDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDomainOutputError>
}

public struct DescribeDomainInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeDomainInput>
    public typealias MOutput = OperationOutput<DescribeDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeDomainOutputError>
}

public struct DescribeDomainInput: Equatable {
    /// <p>The name of the domain to describe.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeDomainInputBody: Equatable {
    public let name: String?
}

extension DescribeDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DescribeDomainOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDomainOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeDomainOutputResponse(configuration: \(String(describing: configuration)), domainInfo: \(String(describing: domainInfo)))"}
}

extension DescribeDomainOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeDomainOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configuration = output.configuration
            self.domainInfo = output.domainInfo
        } else {
            self.configuration = nil
            self.domainInfo = nil
        }
    }
}

/// <p>Contains details of a domain.</p>
public struct DescribeDomainOutputResponse: Equatable {
    /// <p>The domain configuration. Currently, this includes only the domain's retention
    ///       period.</p>
    public let configuration: DomainConfiguration?
    /// <p>The basic information about a domain, such as its name, status, and
    ///       description.</p>
    public let domainInfo: DomainInfo?

    public init (
        configuration: DomainConfiguration? = nil,
        domainInfo: DomainInfo? = nil
    )
    {
        self.configuration = configuration
        self.domainInfo = domainInfo
    }
}

struct DescribeDomainOutputResponseBody: Equatable {
    public let domainInfo: DomainInfo?
    public let configuration: DomainConfiguration?
}

extension DescribeDomainOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration
        case domainInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainInfoDecoded = try containerValues.decodeIfPresent(DomainInfo.self, forKey: .domainInfo)
        domainInfo = domainInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(DomainConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

public struct DescribeWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "DescribeWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowExecutionOutputError>
}

extension DescribeWorkflowExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWorkflowExecutionInput(domain: \(String(describing: domain)), execution: \(String(describing: execution)))"}
}

extension DescribeWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case execution
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let execution = execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
    }
}

public struct DescribeWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowExecutionOutputError>
}

public struct DescribeWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowExecutionOutputError>
}

public struct DescribeWorkflowExecutionInput: Equatable {
    /// <p>The name of the domain containing the workflow execution.</p>
    public let domain: String?
    /// <p>The workflow execution to describe.</p>
    public let execution: WorkflowExecution?

    public init (
        domain: String? = nil,
        execution: WorkflowExecution? = nil
    )
    {
        self.domain = domain
        self.execution = execution
    }
}

struct DescribeWorkflowExecutionInputBody: Equatable {
    public let domain: String?
    public let execution: WorkflowExecution?
}

extension DescribeWorkflowExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case execution
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let executionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
    }
}

extension DescribeWorkflowExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkflowExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWorkflowExecutionOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkflowExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWorkflowExecutionOutputResponse(executionConfiguration: \(String(describing: executionConfiguration)), executionInfo: \(String(describing: executionInfo)), latestActivityTaskTimestamp: \(String(describing: latestActivityTaskTimestamp)), latestExecutionContext: \(String(describing: latestExecutionContext)), openCounts: \(String(describing: openCounts)))"}
}

extension DescribeWorkflowExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeWorkflowExecutionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.executionConfiguration = output.executionConfiguration
            self.executionInfo = output.executionInfo
            self.latestActivityTaskTimestamp = output.latestActivityTaskTimestamp
            self.latestExecutionContext = output.latestExecutionContext
            self.openCounts = output.openCounts
        } else {
            self.executionConfiguration = nil
            self.executionInfo = nil
            self.latestActivityTaskTimestamp = nil
            self.latestExecutionContext = nil
            self.openCounts = nil
        }
    }
}

/// <p>Contains details about a workflow execution.</p>
public struct DescribeWorkflowExecutionOutputResponse: Equatable {
    /// <p>The configuration settings for this workflow execution including timeout values, tasklist etc.</p>
    public let executionConfiguration: WorkflowExecutionConfiguration?
    /// <p>Information about the workflow execution.</p>
    public let executionInfo: WorkflowExecutionInfo?
    /// <p>The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.</p>
    public let latestActivityTaskTimestamp: Date?
    /// <p>The latest executionContext provided by the decider for this workflow execution. A decider can provide an
    ///       executionContext (a free-form string) when closing a decision task using <a>RespondDecisionTaskCompleted</a>.</p>
    public let latestExecutionContext: String?
    /// <p>The number of tasks for this workflow execution. This includes open and closed tasks of all types.</p>
    public let openCounts: WorkflowExecutionOpenCounts?

    public init (
        executionConfiguration: WorkflowExecutionConfiguration? = nil,
        executionInfo: WorkflowExecutionInfo? = nil,
        latestActivityTaskTimestamp: Date? = nil,
        latestExecutionContext: String? = nil,
        openCounts: WorkflowExecutionOpenCounts? = nil
    )
    {
        self.executionConfiguration = executionConfiguration
        self.executionInfo = executionInfo
        self.latestActivityTaskTimestamp = latestActivityTaskTimestamp
        self.latestExecutionContext = latestExecutionContext
        self.openCounts = openCounts
    }
}

struct DescribeWorkflowExecutionOutputResponseBody: Equatable {
    public let executionInfo: WorkflowExecutionInfo?
    public let executionConfiguration: WorkflowExecutionConfiguration?
    public let openCounts: WorkflowExecutionOpenCounts?
    public let latestActivityTaskTimestamp: Date?
    public let latestExecutionContext: String?
}

extension DescribeWorkflowExecutionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case executionConfiguration
        case executionInfo
        case latestActivityTaskTimestamp
        case latestExecutionContext
        case openCounts
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfoDecoded = try containerValues.decodeIfPresent(WorkflowExecutionInfo.self, forKey: .executionInfo)
        executionInfo = executionInfoDecoded
        let executionConfigurationDecoded = try containerValues.decodeIfPresent(WorkflowExecutionConfiguration.self, forKey: .executionConfiguration)
        executionConfiguration = executionConfigurationDecoded
        let openCountsDecoded = try containerValues.decodeIfPresent(WorkflowExecutionOpenCounts.self, forKey: .openCounts)
        openCounts = openCountsDecoded
        let latestActivityTaskTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestActivityTaskTimestamp)
        latestActivityTaskTimestamp = latestActivityTaskTimestampDecoded
        let latestExecutionContextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .latestExecutionContext)
        latestExecutionContext = latestExecutionContextDecoded
    }
}

public struct DescribeWorkflowTypeInputBodyMiddleware: Middleware {
    public let id: String = "DescribeWorkflowTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowTypeOutputError>
}

extension DescribeWorkflowTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWorkflowTypeInput(domain: \(String(describing: domain)), workflowType: \(String(describing: workflowType)))"}
}

extension DescribeWorkflowTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

public struct DescribeWorkflowTypeInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeWorkflowTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowTypeOutputError>
}

public struct DescribeWorkflowTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeWorkflowTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeWorkflowTypeInput>
    public typealias MOutput = OperationOutput<DescribeWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeWorkflowTypeOutputError>
}

public struct DescribeWorkflowTypeInput: Equatable {
    /// <p>The name of the domain in which this workflow type is registered.</p>
    public let domain: String?
    /// <p>The workflow type to describe.</p>
    public let workflowType: WorkflowType?

    public init (
        domain: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct DescribeWorkflowTypeInputBody: Equatable {
    public let domain: String?
    public let workflowType: WorkflowType?
}

extension DescribeWorkflowTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension DescribeWorkflowTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkflowTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWorkflowTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkflowTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeWorkflowTypeOutputResponse(configuration: \(String(describing: configuration)), typeInfo: \(String(describing: typeInfo)))"}
}

extension DescribeWorkflowTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeWorkflowTypeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.configuration = output.configuration
            self.typeInfo = output.typeInfo
        } else {
            self.configuration = nil
            self.typeInfo = nil
        }
    }
}

/// <p>Contains details about a workflow type.</p>
public struct DescribeWorkflowTypeOutputResponse: Equatable {
    /// <p>Configuration settings of the workflow type registered through <a>RegisterWorkflowType</a>
    ///          </p>
    public let configuration: WorkflowTypeConfiguration?
    /// <p>General information about the workflow type.</p>
    ///          <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code> – The type was deprecated using <a>DeprecateWorkflowType</a>, but is still in use. You should
    ///         keep workers supporting this type running. You cannot create new workflow executions of this type.</p>
    ///             </li>
    ///          </ul>
    public let typeInfo: WorkflowTypeInfo?

    public init (
        configuration: WorkflowTypeConfiguration? = nil,
        typeInfo: WorkflowTypeInfo? = nil
    )
    {
        self.configuration = configuration
        self.typeInfo = typeInfo
    }
}

struct DescribeWorkflowTypeOutputResponseBody: Equatable {
    public let typeInfo: WorkflowTypeInfo?
    public let configuration: WorkflowTypeConfiguration?
}

extension DescribeWorkflowTypeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration
        case typeInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfoDecoded = try containerValues.decodeIfPresent(WorkflowTypeInfo.self, forKey: .typeInfo)
        typeInfo = typeInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(WorkflowTypeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension DomainAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DomainAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension DomainAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DomainAlreadyExistsFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned if the domain already exists. You may get this fault if you are registering a domain that is either already registered or deprecated, or if you undeprecate a domain that is currently registered.</p>
public struct DomainAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DomainAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension DomainAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DomainConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case workflowExecutionRetentionPeriodInDays
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays {
            try encodeContainer.encode(workflowExecutionRetentionPeriodInDays, forKey: .workflowExecutionRetentionPeriodInDays)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
    }
}

extension DomainConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DomainConfiguration(workflowExecutionRetentionPeriodInDays: \(String(describing: workflowExecutionRetentionPeriodInDays)))"}
}

/// <p>Contains the configuration settings of a domain.</p>
public struct DomainConfiguration: Equatable {
    /// <p>The retention period for workflow executions in this domain.</p>
    public let workflowExecutionRetentionPeriodInDays: String?

    public init (
        workflowExecutionRetentionPeriodInDays: String? = nil
    )
    {
        self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
    }
}

extension DomainDeprecatedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DomainDeprecatedFault(message: \(String(describing: message)))"}
}

extension DomainDeprecatedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DomainDeprecatedFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned when the specified domain has been deprecated.</p>
public struct DomainDeprecatedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DomainDeprecatedFaultBody: Equatable {
    public let message: String?
}

extension DomainDeprecatedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DomainInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case description
        case name
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DomainInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DomainInfo(arn: \(String(describing: arn)), description: \(String(describing: description)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>Contains general information about a domain.</p>
public struct DomainInfo: Equatable {
    /// <p>The ARN of the domain.</p>
    public let arn: String?
    /// <p>The description of the domain provided through <a>RegisterDomain</a>.</p>
    public let description: String?
    /// <p>The name of the domain. This name is unique within the account.</p>
    public let name: String?
    /// <p>The status of the domain:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain
    ///          for registering types and creating new workflow executions.
    ///       </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code> – The domain was deprecated using <a>DeprecateDomain</a>, but is
    ///          still in use. You should not create new workflow executions in this domain.
    ///       </p>
    ///             </li>
    ///          </ul>
    public let status: RegistrationStatus?

    public init (
        arn: String? = nil,
        description: String? = nil,
        name: String? = nil,
        status: RegistrationStatus? = nil
    )
    {
        self.arn = arn
        self.description = description
        self.name = name
        self.status = status
    }
}

public enum EventType {
    case activitytaskcancelrequested
    case activitytaskcanceled
    case activitytaskcompleted
    case activitytaskfailed
    case activitytaskscheduled
    case activitytaskstarted
    case activitytasktimedout
    case canceltimerfailed
    case cancelworkflowexecutionfailed
    case childworkflowexecutioncanceled
    case childworkflowexecutioncompleted
    case childworkflowexecutionfailed
    case childworkflowexecutionstarted
    case childworkflowexecutionterminated
    case childworkflowexecutiontimedout
    case completeworkflowexecutionfailed
    case continueasnewworkflowexecutionfailed
    case decisiontaskcompleted
    case decisiontaskscheduled
    case decisiontaskstarted
    case decisiontasktimedout
    case externalworkflowexecutioncancelrequested
    case externalworkflowexecutionsignaled
    case failworkflowexecutionfailed
    case lambdafunctioncompleted
    case lambdafunctionfailed
    case lambdafunctionscheduled
    case lambdafunctionstarted
    case lambdafunctiontimedout
    case markerrecorded
    case recordmarkerfailed
    case requestcancelactivitytaskfailed
    case requestcancelexternalworkflowexecutionfailed
    case requestcancelexternalworkflowexecutioninitiated
    case scheduleactivitytaskfailed
    case schedulelambdafunctionfailed
    case signalexternalworkflowexecutionfailed
    case signalexternalworkflowexecutioninitiated
    case startchildworkflowexecutionfailed
    case startchildworkflowexecutioninitiated
    case startlambdafunctionfailed
    case starttimerfailed
    case timercanceled
    case timerfired
    case timerstarted
    case workflowexecutioncancelrequested
    case workflowexecutioncanceled
    case workflowexecutioncompleted
    case workflowexecutioncontinuedasnew
    case workflowexecutionfailed
    case workflowexecutionsignaled
    case workflowexecutionstarted
    case workflowexecutionterminated
    case workflowexecutiontimedout
    case sdkUnknown(String)
}

extension EventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventType] {
        return [
            .activitytaskcancelrequested,
            .activitytaskcanceled,
            .activitytaskcompleted,
            .activitytaskfailed,
            .activitytaskscheduled,
            .activitytaskstarted,
            .activitytasktimedout,
            .canceltimerfailed,
            .cancelworkflowexecutionfailed,
            .childworkflowexecutioncanceled,
            .childworkflowexecutioncompleted,
            .childworkflowexecutionfailed,
            .childworkflowexecutionstarted,
            .childworkflowexecutionterminated,
            .childworkflowexecutiontimedout,
            .completeworkflowexecutionfailed,
            .continueasnewworkflowexecutionfailed,
            .decisiontaskcompleted,
            .decisiontaskscheduled,
            .decisiontaskstarted,
            .decisiontasktimedout,
            .externalworkflowexecutioncancelrequested,
            .externalworkflowexecutionsignaled,
            .failworkflowexecutionfailed,
            .lambdafunctioncompleted,
            .lambdafunctionfailed,
            .lambdafunctionscheduled,
            .lambdafunctionstarted,
            .lambdafunctiontimedout,
            .markerrecorded,
            .recordmarkerfailed,
            .requestcancelactivitytaskfailed,
            .requestcancelexternalworkflowexecutionfailed,
            .requestcancelexternalworkflowexecutioninitiated,
            .scheduleactivitytaskfailed,
            .schedulelambdafunctionfailed,
            .signalexternalworkflowexecutionfailed,
            .signalexternalworkflowexecutioninitiated,
            .startchildworkflowexecutionfailed,
            .startchildworkflowexecutioninitiated,
            .startlambdafunctionfailed,
            .starttimerfailed,
            .timercanceled,
            .timerfired,
            .timerstarted,
            .workflowexecutioncancelrequested,
            .workflowexecutioncanceled,
            .workflowexecutioncompleted,
            .workflowexecutioncontinuedasnew,
            .workflowexecutionfailed,
            .workflowexecutionsignaled,
            .workflowexecutionstarted,
            .workflowexecutionterminated,
            .workflowexecutiontimedout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activitytaskcancelrequested: return "ActivityTaskCancelRequested"
        case .activitytaskcanceled: return "ActivityTaskCanceled"
        case .activitytaskcompleted: return "ActivityTaskCompleted"
        case .activitytaskfailed: return "ActivityTaskFailed"
        case .activitytaskscheduled: return "ActivityTaskScheduled"
        case .activitytaskstarted: return "ActivityTaskStarted"
        case .activitytasktimedout: return "ActivityTaskTimedOut"
        case .canceltimerfailed: return "CancelTimerFailed"
        case .cancelworkflowexecutionfailed: return "CancelWorkflowExecutionFailed"
        case .childworkflowexecutioncanceled: return "ChildWorkflowExecutionCanceled"
        case .childworkflowexecutioncompleted: return "ChildWorkflowExecutionCompleted"
        case .childworkflowexecutionfailed: return "ChildWorkflowExecutionFailed"
        case .childworkflowexecutionstarted: return "ChildWorkflowExecutionStarted"
        case .childworkflowexecutionterminated: return "ChildWorkflowExecutionTerminated"
        case .childworkflowexecutiontimedout: return "ChildWorkflowExecutionTimedOut"
        case .completeworkflowexecutionfailed: return "CompleteWorkflowExecutionFailed"
        case .continueasnewworkflowexecutionfailed: return "ContinueAsNewWorkflowExecutionFailed"
        case .decisiontaskcompleted: return "DecisionTaskCompleted"
        case .decisiontaskscheduled: return "DecisionTaskScheduled"
        case .decisiontaskstarted: return "DecisionTaskStarted"
        case .decisiontasktimedout: return "DecisionTaskTimedOut"
        case .externalworkflowexecutioncancelrequested: return "ExternalWorkflowExecutionCancelRequested"
        case .externalworkflowexecutionsignaled: return "ExternalWorkflowExecutionSignaled"
        case .failworkflowexecutionfailed: return "FailWorkflowExecutionFailed"
        case .lambdafunctioncompleted: return "LambdaFunctionCompleted"
        case .lambdafunctionfailed: return "LambdaFunctionFailed"
        case .lambdafunctionscheduled: return "LambdaFunctionScheduled"
        case .lambdafunctionstarted: return "LambdaFunctionStarted"
        case .lambdafunctiontimedout: return "LambdaFunctionTimedOut"
        case .markerrecorded: return "MarkerRecorded"
        case .recordmarkerfailed: return "RecordMarkerFailed"
        case .requestcancelactivitytaskfailed: return "RequestCancelActivityTaskFailed"
        case .requestcancelexternalworkflowexecutionfailed: return "RequestCancelExternalWorkflowExecutionFailed"
        case .requestcancelexternalworkflowexecutioninitiated: return "RequestCancelExternalWorkflowExecutionInitiated"
        case .scheduleactivitytaskfailed: return "ScheduleActivityTaskFailed"
        case .schedulelambdafunctionfailed: return "ScheduleLambdaFunctionFailed"
        case .signalexternalworkflowexecutionfailed: return "SignalExternalWorkflowExecutionFailed"
        case .signalexternalworkflowexecutioninitiated: return "SignalExternalWorkflowExecutionInitiated"
        case .startchildworkflowexecutionfailed: return "StartChildWorkflowExecutionFailed"
        case .startchildworkflowexecutioninitiated: return "StartChildWorkflowExecutionInitiated"
        case .startlambdafunctionfailed: return "StartLambdaFunctionFailed"
        case .starttimerfailed: return "StartTimerFailed"
        case .timercanceled: return "TimerCanceled"
        case .timerfired: return "TimerFired"
        case .timerstarted: return "TimerStarted"
        case .workflowexecutioncancelrequested: return "WorkflowExecutionCancelRequested"
        case .workflowexecutioncanceled: return "WorkflowExecutionCanceled"
        case .workflowexecutioncompleted: return "WorkflowExecutionCompleted"
        case .workflowexecutioncontinuedasnew: return "WorkflowExecutionContinuedAsNew"
        case .workflowexecutionfailed: return "WorkflowExecutionFailed"
        case .workflowexecutionsignaled: return "WorkflowExecutionSignaled"
        case .workflowexecutionstarted: return "WorkflowExecutionStarted"
        case .workflowexecutionterminated: return "WorkflowExecutionTerminated"
        case .workflowexecutiontimedout: return "WorkflowExecutionTimedOut"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
    }
}

public enum ExecutionStatus {
    case closed
    case `open`
    case sdkUnknown(String)
}

extension ExecutionStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExecutionStatus] {
        return [
            .closed,
            .open,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .closed: return "CLOSED"
        case .open: return "OPEN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
    }
}

extension ExecutionTimeFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latestDate
        case oldestDate
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestDate = latestDate {
            try encodeContainer.encode(latestDate.timeIntervalSince1970, forKey: .latestDate)
        }
        if let oldestDate = oldestDate {
            try encodeContainer.encode(oldestDate.timeIntervalSince1970, forKey: .oldestDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oldestDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .oldestDate)
        oldestDate = oldestDateDecoded
        let latestDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestDate)
        latestDate = latestDateDecoded
    }
}

extension ExecutionTimeFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecutionTimeFilter(latestDate: \(String(describing: latestDate)), oldestDate: \(String(describing: oldestDate)))"}
}

/// <p>Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if
///       specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example:
///       <code>"oldestDate": 1325376070.</code>
///          </p>
public struct ExecutionTimeFilter: Equatable {
    /// <p>Specifies the latest start or close date and time to return.</p>
    public let latestDate: Date?
    /// <p>Specifies the oldest start or close date and time to return.</p>
    public let oldestDate: Date?

    public init (
        latestDate: Date? = nil,
        oldestDate: Date? = nil
    )
    {
        self.latestDate = latestDate
        self.oldestDate = oldestDate
    }
}

extension ExternalWorkflowExecutionCancelRequestedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case workflowExecution
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension ExternalWorkflowExecutionCancelRequestedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExternalWorkflowExecutionCancelRequestedEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), workflowExecution: \(String(describing: workflowExecution)))"}
}

/// <p>Provides the details of the <code>ExternalWorkflowExecutionCancelRequested</code> event.</p>
public struct ExternalWorkflowExecutionCancelRequestedEventAttributes: Equatable {
    /// <p>The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this external workflow execution. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let initiatedEventId: Int
    /// <p>The external workflow execution to which the cancellation request was delivered.</p>
    public let workflowExecution: WorkflowExecution?

    public init (
        initiatedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.workflowExecution = workflowExecution
    }
}

extension ExternalWorkflowExecutionSignaledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiatedEventId
        case workflowExecution
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension ExternalWorkflowExecutionSignaledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExternalWorkflowExecutionSignaledEventAttributes(initiatedEventId: \(String(describing: initiatedEventId)), workflowExecution: \(String(describing: workflowExecution)))"}
}

/// <p>Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.</p>
public struct ExternalWorkflowExecutionSignaledEventAttributes: Equatable {
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The external workflow execution that the signal was delivered to.</p>
    public let workflowExecution: WorkflowExecution?

    public init (
        initiatedEventId: Int = 0,
        workflowExecution: WorkflowExecution? = nil
    )
    {
        self.initiatedEventId = initiatedEventId
        self.workflowExecution = workflowExecution
    }
}

extension FailWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case reason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension FailWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailWorkflowExecutionDecisionAttributes(details: \(String(describing: details)), reason: \(String(describing: reason)))"}
}

/// <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///   <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
///           in the <i>Amazon SWF Developer Guide</i>.</p>
public struct FailWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>
    ///          Details of the failure.</p>
    public let details: String?
    /// <p>A descriptive reason for the failure that may help in diagnostics.</p>
    public let reason: String?

    public init (
        details: String? = nil,
        reason: String? = nil
    )
    {
        self.details = details
        self.reason = reason
    }
}

public enum FailWorkflowExecutionFailedCause {
    case operationNotPermitted
    case unhandledDecision
    case sdkUnknown(String)
}

extension FailWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FailWorkflowExecutionFailedCause] {
        return [
            .operationNotPermitted,
            .unhandledDecision,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .unhandledDecision: return "UNHANDLED_DECISION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FailWorkflowExecutionFailedCause(rawValue: rawValue) ?? FailWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension FailWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(FailWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension FailWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>FailWorkflowExecutionFailed</code> event.</p>
public struct FailWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: FailWorkflowExecutionFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>FailWorkflowExecution</code> decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        cause: FailWorkflowExecutionFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

public struct GetWorkflowExecutionHistoryInputBodyMiddleware: Middleware {
    public let id: String = "GetWorkflowExecutionHistoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetWorkflowExecutionHistoryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetWorkflowExecutionHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetWorkflowExecutionHistoryInput>
    public typealias MOutput = OperationOutput<GetWorkflowExecutionHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetWorkflowExecutionHistoryOutputError>
}

extension GetWorkflowExecutionHistoryInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetWorkflowExecutionHistoryInput(domain: \(String(describing: domain)), execution: \(String(describing: execution)), maximumPageSize: \(String(describing: maximumPageSize)), nextPageToken: \(String(describing: nextPageToken)), reverseOrder: \(String(describing: reverseOrder)))"}
}

extension GetWorkflowExecutionHistoryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case execution
        case maximumPageSize
        case nextPageToken
        case reverseOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let execution = execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

public struct GetWorkflowExecutionHistoryInputHeadersMiddleware: Middleware {
    public let id: String = "GetWorkflowExecutionHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetWorkflowExecutionHistoryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetWorkflowExecutionHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetWorkflowExecutionHistoryInput>
    public typealias MOutput = OperationOutput<GetWorkflowExecutionHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetWorkflowExecutionHistoryOutputError>
}

public struct GetWorkflowExecutionHistoryInputQueryItemMiddleware: Middleware {
    public let id: String = "GetWorkflowExecutionHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetWorkflowExecutionHistoryInput>,
                  next: H) -> Swift.Result<OperationOutput<GetWorkflowExecutionHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetWorkflowExecutionHistoryInput>
    public typealias MOutput = OperationOutput<GetWorkflowExecutionHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetWorkflowExecutionHistoryOutputError>
}

public struct GetWorkflowExecutionHistoryInput: Equatable {
    /// <p>The name of the domain containing the workflow execution.</p>
    public let domain: String?
    /// <p>Specifies the workflow execution for which to return the history.</p>
    public let execution: WorkflowExecution?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the events in reverse order. By default the
    ///       results are returned in ascending order of the <code>eventTimeStamp</code> of the
    ///       events.</p>
    public let reverseOrder: Bool

    public init (
        domain: String? = nil,
        execution: WorkflowExecution? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false
    )
    {
        self.domain = domain
        self.execution = execution
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
    }
}

struct GetWorkflowExecutionHistoryInputBody: Equatable {
    public let domain: String?
    public let execution: WorkflowExecution?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension GetWorkflowExecutionHistoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case execution
        case maximumPageSize
        case nextPageToken
        case reverseOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let executionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension GetWorkflowExecutionHistoryOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowExecutionHistoryOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetWorkflowExecutionHistoryOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowExecutionHistoryOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetWorkflowExecutionHistoryOutputResponse(events: \(String(describing: events)), nextPageToken: \(String(describing: nextPageToken)))"}
}

extension GetWorkflowExecutionHistoryOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetWorkflowExecutionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.nextPageToken = output.nextPageToken
        } else {
            self.events = nil
            self.nextPageToken = nil
        }
    }
}

/// <p>Paginated representation of a workflow history for a workflow execution. This is the up to date, complete and authoritative record of the events related to all tasks and events in the life of the workflow execution.</p>
public struct GetWorkflowExecutionHistoryOutputResponse: Equatable {
    /// <p>The list of history events.</p>
    public let events: [HistoryEvent]?
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?

    public init (
        events: [HistoryEvent]? = nil,
        nextPageToken: String? = nil
    )
    {
        self.events = events
        self.nextPageToken = nextPageToken
    }
}

struct GetWorkflowExecutionHistoryOutputResponseBody: Equatable {
    public let events: [HistoryEvent]?
    public let nextPageToken: String?
}

extension GetWorkflowExecutionHistoryOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextPageToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension HistoryEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityTaskCancelRequestedEventAttributes
        case activityTaskCanceledEventAttributes
        case activityTaskCompletedEventAttributes
        case activityTaskFailedEventAttributes
        case activityTaskScheduledEventAttributes
        case activityTaskStartedEventAttributes
        case activityTaskTimedOutEventAttributes
        case cancelTimerFailedEventAttributes
        case cancelWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionCanceledEventAttributes
        case childWorkflowExecutionCompletedEventAttributes
        case childWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionStartedEventAttributes
        case childWorkflowExecutionTerminatedEventAttributes
        case childWorkflowExecutionTimedOutEventAttributes
        case completeWorkflowExecutionFailedEventAttributes
        case continueAsNewWorkflowExecutionFailedEventAttributes
        case decisionTaskCompletedEventAttributes
        case decisionTaskScheduledEventAttributes
        case decisionTaskStartedEventAttributes
        case decisionTaskTimedOutEventAttributes
        case eventId
        case eventTimestamp
        case eventType
        case externalWorkflowExecutionCancelRequestedEventAttributes
        case externalWorkflowExecutionSignaledEventAttributes
        case failWorkflowExecutionFailedEventAttributes
        case lambdaFunctionCompletedEventAttributes
        case lambdaFunctionFailedEventAttributes
        case lambdaFunctionScheduledEventAttributes
        case lambdaFunctionStartedEventAttributes
        case lambdaFunctionTimedOutEventAttributes
        case markerRecordedEventAttributes
        case recordMarkerFailedEventAttributes
        case requestCancelActivityTaskFailedEventAttributes
        case requestCancelExternalWorkflowExecutionFailedEventAttributes
        case requestCancelExternalWorkflowExecutionInitiatedEventAttributes
        case scheduleActivityTaskFailedEventAttributes
        case scheduleLambdaFunctionFailedEventAttributes
        case signalExternalWorkflowExecutionFailedEventAttributes
        case signalExternalWorkflowExecutionInitiatedEventAttributes
        case startChildWorkflowExecutionFailedEventAttributes
        case startChildWorkflowExecutionInitiatedEventAttributes
        case startLambdaFunctionFailedEventAttributes
        case startTimerFailedEventAttributes
        case timerCanceledEventAttributes
        case timerFiredEventAttributes
        case timerStartedEventAttributes
        case workflowExecutionCancelRequestedEventAttributes
        case workflowExecutionCanceledEventAttributes
        case workflowExecutionCompletedEventAttributes
        case workflowExecutionContinuedAsNewEventAttributes
        case workflowExecutionFailedEventAttributes
        case workflowExecutionSignaledEventAttributes
        case workflowExecutionStartedEventAttributes
        case workflowExecutionTerminatedEventAttributes
        case workflowExecutionTimedOutEventAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes {
            try encodeContainer.encode(activityTaskCancelRequestedEventAttributes, forKey: .activityTaskCancelRequestedEventAttributes)
        }
        if let activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes {
            try encodeContainer.encode(activityTaskCanceledEventAttributes, forKey: .activityTaskCanceledEventAttributes)
        }
        if let activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes {
            try encodeContainer.encode(activityTaskCompletedEventAttributes, forKey: .activityTaskCompletedEventAttributes)
        }
        if let activityTaskFailedEventAttributes = activityTaskFailedEventAttributes {
            try encodeContainer.encode(activityTaskFailedEventAttributes, forKey: .activityTaskFailedEventAttributes)
        }
        if let activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes {
            try encodeContainer.encode(activityTaskScheduledEventAttributes, forKey: .activityTaskScheduledEventAttributes)
        }
        if let activityTaskStartedEventAttributes = activityTaskStartedEventAttributes {
            try encodeContainer.encode(activityTaskStartedEventAttributes, forKey: .activityTaskStartedEventAttributes)
        }
        if let activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes {
            try encodeContainer.encode(activityTaskTimedOutEventAttributes, forKey: .activityTaskTimedOutEventAttributes)
        }
        if let cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes {
            try encodeContainer.encode(cancelTimerFailedEventAttributes, forKey: .cancelTimerFailedEventAttributes)
        }
        if let cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionFailedEventAttributes, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCanceledEventAttributes, forKey: .childWorkflowExecutionCanceledEventAttributes)
        }
        if let childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCompletedEventAttributes, forKey: .childWorkflowExecutionCompletedEventAttributes)
        }
        if let childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionFailedEventAttributes, forKey: .childWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionStartedEventAttributes, forKey: .childWorkflowExecutionStartedEventAttributes)
        }
        if let childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTerminatedEventAttributes, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        }
        if let childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTimedOutEventAttributes, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        }
        if let completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(completeWorkflowExecutionFailedEventAttributes, forKey: .completeWorkflowExecutionFailedEventAttributes)
        }
        if let continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionFailedEventAttributes, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        }
        if let decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes {
            try encodeContainer.encode(decisionTaskCompletedEventAttributes, forKey: .decisionTaskCompletedEventAttributes)
        }
        if let decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes {
            try encodeContainer.encode(decisionTaskScheduledEventAttributes, forKey: .decisionTaskScheduledEventAttributes)
        }
        if let decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes {
            try encodeContainer.encode(decisionTaskStartedEventAttributes, forKey: .decisionTaskStartedEventAttributes)
        }
        if let decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes {
            try encodeContainer.encode(decisionTaskTimedOutEventAttributes, forKey: .decisionTaskTimedOutEventAttributes)
        }
        if eventId != 0 {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTimestamp = eventTimestamp {
            try encodeContainer.encode(eventTimestamp.timeIntervalSince1970, forKey: .eventTimestamp)
        }
        if let eventType = eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionCancelRequestedEventAttributes, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        }
        if let externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionSignaledEventAttributes, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        }
        if let failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(failWorkflowExecutionFailedEventAttributes, forKey: .failWorkflowExecutionFailedEventAttributes)
        }
        if let lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes {
            try encodeContainer.encode(lambdaFunctionCompletedEventAttributes, forKey: .lambdaFunctionCompletedEventAttributes)
        }
        if let lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(lambdaFunctionFailedEventAttributes, forKey: .lambdaFunctionFailedEventAttributes)
        }
        if let lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes {
            try encodeContainer.encode(lambdaFunctionScheduledEventAttributes, forKey: .lambdaFunctionScheduledEventAttributes)
        }
        if let lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes {
            try encodeContainer.encode(lambdaFunctionStartedEventAttributes, forKey: .lambdaFunctionStartedEventAttributes)
        }
        if let lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes {
            try encodeContainer.encode(lambdaFunctionTimedOutEventAttributes, forKey: .lambdaFunctionTimedOutEventAttributes)
        }
        if let markerRecordedEventAttributes = markerRecordedEventAttributes {
            try encodeContainer.encode(markerRecordedEventAttributes, forKey: .markerRecordedEventAttributes)
        }
        if let recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes {
            try encodeContainer.encode(recordMarkerFailedEventAttributes, forKey: .recordMarkerFailedEventAttributes)
        }
        if let requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes {
            try encodeContainer.encode(requestCancelActivityTaskFailedEventAttributes, forKey: .requestCancelActivityTaskFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionFailedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionInitiatedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes {
            try encodeContainer.encode(scheduleActivityTaskFailedEventAttributes, forKey: .scheduleActivityTaskFailedEventAttributes)
        }
        if let scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionFailedEventAttributes, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionFailedEventAttributes, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionInitiatedEventAttributes, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionFailedEventAttributes, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        }
        if let startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionInitiatedEventAttributes, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        }
        if let startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(startLambdaFunctionFailedEventAttributes, forKey: .startLambdaFunctionFailedEventAttributes)
        }
        if let startTimerFailedEventAttributes = startTimerFailedEventAttributes {
            try encodeContainer.encode(startTimerFailedEventAttributes, forKey: .startTimerFailedEventAttributes)
        }
        if let timerCanceledEventAttributes = timerCanceledEventAttributes {
            try encodeContainer.encode(timerCanceledEventAttributes, forKey: .timerCanceledEventAttributes)
        }
        if let timerFiredEventAttributes = timerFiredEventAttributes {
            try encodeContainer.encode(timerFiredEventAttributes, forKey: .timerFiredEventAttributes)
        }
        if let timerStartedEventAttributes = timerStartedEventAttributes {
            try encodeContainer.encode(timerStartedEventAttributes, forKey: .timerStartedEventAttributes)
        }
        if let workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(workflowExecutionCancelRequestedEventAttributes, forKey: .workflowExecutionCancelRequestedEventAttributes)
        }
        if let workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(workflowExecutionCanceledEventAttributes, forKey: .workflowExecutionCanceledEventAttributes)
        }
        if let workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(workflowExecutionCompletedEventAttributes, forKey: .workflowExecutionCompletedEventAttributes)
        }
        if let workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes {
            try encodeContainer.encode(workflowExecutionContinuedAsNewEventAttributes, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        }
        if let workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes {
            try encodeContainer.encode(workflowExecutionFailedEventAttributes, forKey: .workflowExecutionFailedEventAttributes)
        }
        if let workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(workflowExecutionSignaledEventAttributes, forKey: .workflowExecutionSignaledEventAttributes)
        }
        if let workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes {
            try encodeContainer.encode(workflowExecutionStartedEventAttributes, forKey: .workflowExecutionStartedEventAttributes)
        }
        if let workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(workflowExecutionTerminatedEventAttributes, forKey: .workflowExecutionTerminatedEventAttributes)
        }
        if let workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(workflowExecutionTimedOutEventAttributes, forKey: .workflowExecutionTimedOutEventAttributes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let eventIdDecoded = try containerValues.decode(Int.self, forKey: .eventId)
        eventId = eventIdDecoded
        let workflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionStartedEventAttributes.self, forKey: .workflowExecutionStartedEventAttributes)
        workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributesDecoded
        let workflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionCompletedEventAttributes.self, forKey: .workflowExecutionCompletedEventAttributes)
        workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributesDecoded
        let completeWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(CompleteWorkflowExecutionFailedEventAttributes.self, forKey: .completeWorkflowExecutionFailedEventAttributes)
        completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFailedEventAttributes.self, forKey: .workflowExecutionFailedEventAttributes)
        workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributesDecoded
        let failWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(FailWorkflowExecutionFailedEventAttributes.self, forKey: .failWorkflowExecutionFailedEventAttributes)
        failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTimedOutEventAttributes.self, forKey: .workflowExecutionTimedOutEventAttributes)
        workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributesDecoded
        let workflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionCanceledEventAttributes.self, forKey: .workflowExecutionCanceledEventAttributes)
        workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributesDecoded
        let cancelWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(CancelWorkflowExecutionFailedEventAttributes.self, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionContinuedAsNewEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionContinuedAsNewEventAttributes.self, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributesDecoded
        let continueAsNewWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(ContinueAsNewWorkflowExecutionFailedEventAttributes.self, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTerminatedEventAttributes.self, forKey: .workflowExecutionTerminatedEventAttributes)
        workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributesDecoded
        let workflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionCancelRequestedEventAttributes.self, forKey: .workflowExecutionCancelRequestedEventAttributes)
        workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributesDecoded
        let decisionTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(DecisionTaskScheduledEventAttributes.self, forKey: .decisionTaskScheduledEventAttributes)
        decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributesDecoded
        let decisionTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(DecisionTaskStartedEventAttributes.self, forKey: .decisionTaskStartedEventAttributes)
        decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributesDecoded
        let decisionTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(DecisionTaskCompletedEventAttributes.self, forKey: .decisionTaskCompletedEventAttributes)
        decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributesDecoded
        let decisionTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(DecisionTaskTimedOutEventAttributes.self, forKey: .decisionTaskTimedOutEventAttributes)
        decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributesDecoded
        let activityTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskScheduledEventAttributes.self, forKey: .activityTaskScheduledEventAttributes)
        activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributesDecoded
        let activityTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskStartedEventAttributes.self, forKey: .activityTaskStartedEventAttributes)
        activityTaskStartedEventAttributes = activityTaskStartedEventAttributesDecoded
        let activityTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskCompletedEventAttributes.self, forKey: .activityTaskCompletedEventAttributes)
        activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributesDecoded
        let activityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskFailedEventAttributes.self, forKey: .activityTaskFailedEventAttributes)
        activityTaskFailedEventAttributes = activityTaskFailedEventAttributesDecoded
        let activityTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskTimedOutEventAttributes.self, forKey: .activityTaskTimedOutEventAttributes)
        activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributesDecoded
        let activityTaskCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskCanceledEventAttributes.self, forKey: .activityTaskCanceledEventAttributes)
        activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributesDecoded
        let activityTaskCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(ActivityTaskCancelRequestedEventAttributes.self, forKey: .activityTaskCancelRequestedEventAttributes)
        activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributesDecoded
        let workflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(WorkflowExecutionSignaledEventAttributes.self, forKey: .workflowExecutionSignaledEventAttributes)
        workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributesDecoded
        let markerRecordedEventAttributesDecoded = try containerValues.decodeIfPresent(MarkerRecordedEventAttributes.self, forKey: .markerRecordedEventAttributes)
        markerRecordedEventAttributes = markerRecordedEventAttributesDecoded
        let recordMarkerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(RecordMarkerFailedEventAttributes.self, forKey: .recordMarkerFailedEventAttributes)
        recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributesDecoded
        let timerStartedEventAttributesDecoded = try containerValues.decodeIfPresent(TimerStartedEventAttributes.self, forKey: .timerStartedEventAttributes)
        timerStartedEventAttributes = timerStartedEventAttributesDecoded
        let timerFiredEventAttributesDecoded = try containerValues.decodeIfPresent(TimerFiredEventAttributes.self, forKey: .timerFiredEventAttributes)
        timerFiredEventAttributes = timerFiredEventAttributesDecoded
        let timerCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(TimerCanceledEventAttributes.self, forKey: .timerCanceledEventAttributes)
        timerCanceledEventAttributes = timerCanceledEventAttributesDecoded
        let startChildWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(StartChildWorkflowExecutionInitiatedEventAttributes.self, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributesDecoded
        let childWorkflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionStartedEventAttributes.self, forKey: .childWorkflowExecutionStartedEventAttributes)
        childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributesDecoded
        let childWorkflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionCompletedEventAttributes.self, forKey: .childWorkflowExecutionCompletedEventAttributes)
        childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributesDecoded
        let childWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionFailedEventAttributes.self, forKey: .childWorkflowExecutionFailedEventAttributes)
        childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributesDecoded
        let childWorkflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionTimedOutEventAttributes.self, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributesDecoded
        let childWorkflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionCanceledEventAttributes.self, forKey: .childWorkflowExecutionCanceledEventAttributes)
        childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributesDecoded
        let childWorkflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(ChildWorkflowExecutionTerminatedEventAttributes.self, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributesDecoded
        let signalExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SignalExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let externalWorkflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(ExternalWorkflowExecutionSignaledEventAttributes.self, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributesDecoded
        let signalExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SignalExternalWorkflowExecutionFailedEventAttributes.self, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributesDecoded
        let externalWorkflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(ExternalWorkflowExecutionCancelRequestedEventAttributes.self, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(RequestCancelExternalWorkflowExecutionFailedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded
        let scheduleActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(ScheduleActivityTaskFailedEventAttributes.self, forKey: .scheduleActivityTaskFailedEventAttributes)
        scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributesDecoded
        let requestCancelActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(RequestCancelActivityTaskFailedEventAttributes.self, forKey: .requestCancelActivityTaskFailedEventAttributes)
        requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributesDecoded
        let startTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(StartTimerFailedEventAttributes.self, forKey: .startTimerFailedEventAttributes)
        startTimerFailedEventAttributes = startTimerFailedEventAttributesDecoded
        let cancelTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(CancelTimerFailedEventAttributes.self, forKey: .cancelTimerFailedEventAttributes)
        cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributesDecoded
        let startChildWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(StartChildWorkflowExecutionFailedEventAttributes.self, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributesDecoded
        let lambdaFunctionScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(LambdaFunctionScheduledEventAttributes.self, forKey: .lambdaFunctionScheduledEventAttributes)
        lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributesDecoded
        let lambdaFunctionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(LambdaFunctionStartedEventAttributes.self, forKey: .lambdaFunctionStartedEventAttributes)
        lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributesDecoded
        let lambdaFunctionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(LambdaFunctionCompletedEventAttributes.self, forKey: .lambdaFunctionCompletedEventAttributes)
        lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributesDecoded
        let lambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(LambdaFunctionFailedEventAttributes.self, forKey: .lambdaFunctionFailedEventAttributes)
        lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributesDecoded
        let lambdaFunctionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(LambdaFunctionTimedOutEventAttributes.self, forKey: .lambdaFunctionTimedOutEventAttributes)
        lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributesDecoded
        let scheduleLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(ScheduleLambdaFunctionFailedEventAttributes.self, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributesDecoded
        let startLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(StartLambdaFunctionFailedEventAttributes.self, forKey: .startLambdaFunctionFailedEventAttributes)
        startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributesDecoded
    }
}

extension HistoryEvent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HistoryEvent(activityTaskCancelRequestedEventAttributes: \(String(describing: activityTaskCancelRequestedEventAttributes)), activityTaskCanceledEventAttributes: \(String(describing: activityTaskCanceledEventAttributes)), activityTaskCompletedEventAttributes: \(String(describing: activityTaskCompletedEventAttributes)), activityTaskFailedEventAttributes: \(String(describing: activityTaskFailedEventAttributes)), activityTaskScheduledEventAttributes: \(String(describing: activityTaskScheduledEventAttributes)), activityTaskStartedEventAttributes: \(String(describing: activityTaskStartedEventAttributes)), activityTaskTimedOutEventAttributes: \(String(describing: activityTaskTimedOutEventAttributes)), cancelTimerFailedEventAttributes: \(String(describing: cancelTimerFailedEventAttributes)), cancelWorkflowExecutionFailedEventAttributes: \(String(describing: cancelWorkflowExecutionFailedEventAttributes)), childWorkflowExecutionCanceledEventAttributes: \(String(describing: childWorkflowExecutionCanceledEventAttributes)), childWorkflowExecutionCompletedEventAttributes: \(String(describing: childWorkflowExecutionCompletedEventAttributes)), childWorkflowExecutionFailedEventAttributes: \(String(describing: childWorkflowExecutionFailedEventAttributes)), childWorkflowExecutionStartedEventAttributes: \(String(describing: childWorkflowExecutionStartedEventAttributes)), childWorkflowExecutionTerminatedEventAttributes: \(String(describing: childWorkflowExecutionTerminatedEventAttributes)), childWorkflowExecutionTimedOutEventAttributes: \(String(describing: childWorkflowExecutionTimedOutEventAttributes)), completeWorkflowExecutionFailedEventAttributes: \(String(describing: completeWorkflowExecutionFailedEventAttributes)), continueAsNewWorkflowExecutionFailedEventAttributes: \(String(describing: continueAsNewWorkflowExecutionFailedEventAttributes)), decisionTaskCompletedEventAttributes: \(String(describing: decisionTaskCompletedEventAttributes)), decisionTaskScheduledEventAttributes: \(String(describing: decisionTaskScheduledEventAttributes)), decisionTaskStartedEventAttributes: \(String(describing: decisionTaskStartedEventAttributes)), decisionTaskTimedOutEventAttributes: \(String(describing: decisionTaskTimedOutEventAttributes)), eventId: \(String(describing: eventId)), eventTimestamp: \(String(describing: eventTimestamp)), eventType: \(String(describing: eventType)), externalWorkflowExecutionCancelRequestedEventAttributes: \(String(describing: externalWorkflowExecutionCancelRequestedEventAttributes)), externalWorkflowExecutionSignaledEventAttributes: \(String(describing: externalWorkflowExecutionSignaledEventAttributes)), failWorkflowExecutionFailedEventAttributes: \(String(describing: failWorkflowExecutionFailedEventAttributes)), lambdaFunctionCompletedEventAttributes: \(String(describing: lambdaFunctionCompletedEventAttributes)), lambdaFunctionFailedEventAttributes: \(String(describing: lambdaFunctionFailedEventAttributes)), lambdaFunctionScheduledEventAttributes: \(String(describing: lambdaFunctionScheduledEventAttributes)), lambdaFunctionStartedEventAttributes: \(String(describing: lambdaFunctionStartedEventAttributes)), lambdaFunctionTimedOutEventAttributes: \(String(describing: lambdaFunctionTimedOutEventAttributes)), markerRecordedEventAttributes: \(String(describing: markerRecordedEventAttributes)), recordMarkerFailedEventAttributes: \(String(describing: recordMarkerFailedEventAttributes)), requestCancelActivityTaskFailedEventAttributes: \(String(describing: requestCancelActivityTaskFailedEventAttributes)), requestCancelExternalWorkflowExecutionFailedEventAttributes: \(String(describing: requestCancelExternalWorkflowExecutionFailedEventAttributes)), requestCancelExternalWorkflowExecutionInitiatedEventAttributes: \(String(describing: requestCancelExternalWorkflowExecutionInitiatedEventAttributes)), scheduleActivityTaskFailedEventAttributes: \(String(describing: scheduleActivityTaskFailedEventAttributes)), scheduleLambdaFunctionFailedEventAttributes: \(String(describing: scheduleLambdaFunctionFailedEventAttributes)), signalExternalWorkflowExecutionFailedEventAttributes: \(String(describing: signalExternalWorkflowExecutionFailedEventAttributes)), signalExternalWorkflowExecutionInitiatedEventAttributes: \(String(describing: signalExternalWorkflowExecutionInitiatedEventAttributes)), startChildWorkflowExecutionFailedEventAttributes: \(String(describing: startChildWorkflowExecutionFailedEventAttributes)), startChildWorkflowExecutionInitiatedEventAttributes: \(String(describing: startChildWorkflowExecutionInitiatedEventAttributes)), startLambdaFunctionFailedEventAttributes: \(String(describing: startLambdaFunctionFailedEventAttributes)), startTimerFailedEventAttributes: \(String(describing: startTimerFailedEventAttributes)), timerCanceledEventAttributes: \(String(describing: timerCanceledEventAttributes)), timerFiredEventAttributes: \(String(describing: timerFiredEventAttributes)), timerStartedEventAttributes: \(String(describing: timerStartedEventAttributes)), workflowExecutionCancelRequestedEventAttributes: \(String(describing: workflowExecutionCancelRequestedEventAttributes)), workflowExecutionCanceledEventAttributes: \(String(describing: workflowExecutionCanceledEventAttributes)), workflowExecutionCompletedEventAttributes: \(String(describing: workflowExecutionCompletedEventAttributes)), workflowExecutionContinuedAsNewEventAttributes: \(String(describing: workflowExecutionContinuedAsNewEventAttributes)), workflowExecutionFailedEventAttributes: \(String(describing: workflowExecutionFailedEventAttributes)), workflowExecutionSignaledEventAttributes: \(String(describing: workflowExecutionSignaledEventAttributes)), workflowExecutionStartedEventAttributes: \(String(describing: workflowExecutionStartedEventAttributes)), workflowExecutionTerminatedEventAttributes: \(String(describing: workflowExecutionTerminatedEventAttributes)), workflowExecutionTimedOutEventAttributes: \(String(describing: workflowExecutionTimedOutEventAttributes)))"}
}

/// <p>Event within a workflow execution. A history event can be one of these types:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the
///         system.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling
///         <a>RespondActivityTaskCompleted</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling
///         <a>RespondActivityTaskFailed</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ActivityTaskTimedOut</code> – The activity task timed out.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't
///         configured properly, for example no timer exists with the specified timer Id.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was
///         canceled and closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution,
///         completed successfully and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionFailed</code> – A child workflow execution,
///         started by this workflow execution, failed to complete successfully and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionTerminated</code> –  A child workflow execution, started by this workflow execution, was
///         terminated.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ChildWorkflowExecutionTimedOut</code> –  A child workflow execution, started by this workflow execution, timed
///         out and was closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued
///         as a new workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling
///         <a>RespondDecisionTaskCompleted</a>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DecisionTaskTimedOut</code> – The decision task timed out.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was
///         successfully delivered to the target execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully
///         delivered to the target external workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a
///         <code>RecordMarker</code> decision.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens
///         when the decision isn't configured properly.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution
///         failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an
///         external workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the
///         decision isn't configured properly, for example the activity type specified isn't registered.</p>
///             </li>
///             <li>
///                <p>
///                   <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution
///         failed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens
///         when the decision isn't configured properly, for example the workflow type specified isn't registered.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't
///         configured properly, for example a timer already exists with the specified timer Id.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p>
///             </li>
///             <li>
///                <p>
///                   <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code>
///         decision.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type
///         was created with the same workflowId.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p>
///             </li>
///             <li>
///                <p>
///                   <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p>
///             </li>
///          </ul>
public struct HistoryEvent: Equatable {
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes?
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes?
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes?
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes?
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes?
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes?
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    public let eventId: Int
    /// <p>The date and time when the event occurred.</p>
    public let eventTimestamp: Date?
    /// <p>The type of the history event.</p>
    public let eventType: EventType?
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types. </p>
    public let externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes?
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set
    ///       for other event types.</p>
    public let lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set
    ///       for other event types.</p>
    public let lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes?
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for
    ///       other event types.</p>
    public let lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes?
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let markerRecordedEventAttributes: MarkerRecordedEventAttributes?
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes?
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes?
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't
    ///       set for other event types.</p>
    public let scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes?
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and
    ///       provides detailed information about the event. It isn't set for other event types.</p>
    public let signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes?
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes?
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set
    ///       for other event types.</p>
    public let startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes?
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let startTimerFailedEventAttributes: StartTimerFailedEventAttributes?
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let timerCanceledEventAttributes: TimerCanceledEventAttributes?
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about
    ///       the event. It isn't set for other event types.</p>
    public let timerFiredEventAttributes: TimerFiredEventAttributes?
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information
    ///       about the event. It isn't set for other event types.</p>
    public let timerStartedEventAttributes: TimerStartedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides
    ///       detailed information about the event. It isn't set for other event types.</p>
    public let workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes?
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed
    ///       information about the event. It isn't set for other event types.</p>
    public let workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes?

    public init (
        activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil,
        activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil,
        activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil,
        activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil,
        activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil,
        activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil,
        activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil,
        cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil,
        cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil,
        childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil,
        childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil,
        childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil,
        childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil,
        childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil,
        childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil,
        completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil,
        continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil,
        decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil,
        decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil,
        decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil,
        decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil,
        eventId: Int = 0,
        eventTimestamp: Date? = nil,
        eventType: EventType? = nil,
        externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil,
        externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil,
        failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil,
        lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil,
        lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil,
        lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil,
        lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil,
        lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil,
        markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil,
        recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil,
        requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil,
        requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil,
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil,
        scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil,
        scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil,
        signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil,
        signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil,
        startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil,
        startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil,
        startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil,
        startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil,
        timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil,
        timerFiredEventAttributes: TimerFiredEventAttributes? = nil,
        timerStartedEventAttributes: TimerStartedEventAttributes? = nil,
        workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil,
        workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil,
        workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil,
        workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil,
        workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil,
        workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil,
        workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil,
        workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil,
        workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil
    )
    {
        self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
        self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
        self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
        self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
        self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
        self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
        self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
        self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
        self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
        self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
        self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
        self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
        self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
        self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
        self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
        self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
        self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
        self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
        self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
        self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
        self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
        self.eventId = eventId
        self.eventTimestamp = eventTimestamp
        self.eventType = eventType
        self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
        self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
        self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
        self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
        self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
        self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
        self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
        self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
        self.markerRecordedEventAttributes = markerRecordedEventAttributes
        self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
        self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
        self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
        self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
        self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
        self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
        self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
        self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
        self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
        self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
        self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
        self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
        self.timerCanceledEventAttributes = timerCanceledEventAttributes
        self.timerFiredEventAttributes = timerFiredEventAttributes
        self.timerStartedEventAttributes = timerStartedEventAttributes
        self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
        self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
        self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
        self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
        self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
        self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
        self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
        self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
        self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
    }
}

extension LambdaFunctionCompletedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case result
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
    }
}

extension LambdaFunctionCompletedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionCompletedEventAttributes(result: \(String(describing: result)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set
///       for other event types.</p>
public struct LambdaFunctionCompletedEventAttributes: Equatable {
    /// <p>The results of the Lambda task.</p>
    public let result: String?
    /// <p>The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this
    ///       Lambda task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>LambdaFunctionStarted</code> event recorded when this activity task
    ///       started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let startedEventId: Int

    public init (
        result: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.result = result
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension LambdaFunctionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case reason
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension LambdaFunctionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionFailedEventAttributes(details: \(String(describing: details)), reason: \(String(describing: reason)), scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)))"}
}

/// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for
///       other event types.</p>
public struct LambdaFunctionFailedEventAttributes: Equatable {
    /// <p>The details of the failure.</p>
    public let details: String?
    /// <p>The reason provided for the failure.</p>
    public let reason: String?
    /// <p>The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this
    ///       activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>LambdaFunctionStarted</code> event recorded when this activity task
    ///       started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let startedEventId: Int

    public init (
        details: String? = nil,
        reason: String? = nil,
        scheduledEventId: Int = 0,
        startedEventId: Int = 0
    )
    {
        self.details = details
        self.reason = reason
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
    }
}

extension LambdaFunctionScheduledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case decisionTaskCompletedEventId
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension LambdaFunctionScheduledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionScheduledEventAttributes(control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), id: \(String(describing: id)), input: \(String(describing: input)), name: \(String(describing: name)), startToCloseTimeout: \(String(describing: startToCloseTimeout)))"}
}

/// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set
///       for other event types.</p>
public struct LambdaFunctionScheduledEventAttributes: Equatable {
    /// <p>Data attached to the event that the decider can use in subsequent workflow tasks. This
    ///       data isn't sent to the Lambda task.</p>
    public let control: String?
    /// <p>The ID of the <code>LambdaFunctionCompleted</code> event corresponding to the decision
    ///       that resulted in scheduling this activity task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The unique ID of the Lambda task.</p>
    public let id: String?
    /// <p>The input provided to the Lambda task.</p>
    public let input: String?
    /// <p>The name of the Lambda function.</p>
    public let name: String?
    /// <p>The maximum amount of time a worker can take to process the Lambda task.</p>
    public let startToCloseTimeout: String?

    public init (
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        id: String? = nil,
        input: String? = nil,
        name: String? = nil,
        startToCloseTimeout: String? = nil
    )
    {
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.id = id
        self.input = input
        self.name = name
        self.startToCloseTimeout = startToCloseTimeout
    }
}

extension LambdaFunctionStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduledEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension LambdaFunctionStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionStartedEventAttributes(scheduledEventId: \(String(describing: scheduledEventId)))"}
}

/// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for
///       other event types.</p>
public struct LambdaFunctionStartedEventAttributes: Equatable {
    /// <p>The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this
    ///       activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int

    public init (
        scheduledEventId: Int = 0
    )
    {
        self.scheduledEventId = scheduledEventId
    }
}

extension LambdaFunctionTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(LambdaFunctionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
    }
}

extension LambdaFunctionTimedOutEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionTimedOutEventAttributes(scheduledEventId: \(String(describing: scheduledEventId)), startedEventId: \(String(describing: startedEventId)), timeoutType: \(String(describing: timeoutType)))"}
}

/// <p>Provides details of the <code>LambdaFunctionTimedOut</code> event.</p>
public struct LambdaFunctionTimedOutEventAttributes: Equatable {
    /// <p>The ID of the <code>LambdaFunctionScheduled</code> event that was recorded when this
    ///       activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int
    /// <p>The ID of the <code>ActivityTaskStarted</code> event that was recorded when this
    ///       activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The type of the timeout that caused this event.</p>
    public let timeoutType: LambdaFunctionTimeoutType?

    public init (
        scheduledEventId: Int = 0,
        startedEventId: Int = 0,
        timeoutType: LambdaFunctionTimeoutType? = nil
    )
    {
        self.scheduledEventId = scheduledEventId
        self.startedEventId = startedEventId
        self.timeoutType = timeoutType
    }
}

public enum LambdaFunctionTimeoutType {
    case startToClose
    case sdkUnknown(String)
}

extension LambdaFunctionTimeoutType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LambdaFunctionTimeoutType] {
        return [
            .startToClose,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .startToClose: return "START_TO_CLOSE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LambdaFunctionTimeoutType(rawValue: rawValue) ?? LambdaFunctionTimeoutType.sdkUnknown(rawValue)
    }
}

extension LimitExceededFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededFault(message: \(String(describing: message)))"}
}

extension LimitExceededFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LimitExceededFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned by any operation if a system imposed limitation has been reached. To address this fault you should either clean up unused resources or increase the limit by contacting AWS.</p>
public struct LimitExceededFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Equatable {
    public let message: String?
}

extension LimitExceededFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListActivityTypesInputBodyMiddleware: Middleware {
    public let id: String = "ListActivityTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListActivityTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListActivityTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListActivityTypesInput>
    public typealias MOutput = OperationOutput<ListActivityTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListActivityTypesOutputError>
}

extension ListActivityTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListActivityTypesInput(domain: \(String(describing: domain)), maximumPageSize: \(String(describing: maximumPageSize)), name: \(String(describing: name)), nextPageToken: \(String(describing: nextPageToken)), registrationStatus: \(String(describing: registrationStatus)), reverseOrder: \(String(describing: reverseOrder)))"}
}

extension ListActivityTypesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

public struct ListActivityTypesInputHeadersMiddleware: Middleware {
    public let id: String = "ListActivityTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListActivityTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListActivityTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListActivityTypesInput>
    public typealias MOutput = OperationOutput<ListActivityTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListActivityTypesOutputError>
}

public struct ListActivityTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListActivityTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListActivityTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListActivityTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListActivityTypesInput>
    public typealias MOutput = OperationOutput<ListActivityTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListActivityTypesOutputError>
}

public struct ListActivityTypesInput: Equatable {
    /// <p>The name of the domain in which the activity types have been registered.</p>
    public let domain: String?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If specified, only lists the activity types that have this name.</p>
    public let name: String?
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>Specifies the registration status of the activity types to list.</p>
    public let registrationStatus: RegistrationStatus?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the
    ///       results are returned in ascending alphabetical order by <code>name</code> of the activity
    ///       types.</p>
    public let reverseOrder: Bool

    public init (
        domain: String? = nil,
        maximumPageSize: Int = 0,
        name: String? = nil,
        nextPageToken: String? = nil,
        registrationStatus: RegistrationStatus? = nil,
        reverseOrder: Bool = false
    )
    {
        self.domain = domain
        self.maximumPageSize = maximumPageSize
        self.name = name
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListActivityTypesInputBody: Equatable {
    public let domain: String?
    public let name: String?
    public let registrationStatus: RegistrationStatus?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension ListActivityTypesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension ListActivityTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActivityTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListActivityTypesOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActivityTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListActivityTypesOutputResponse(nextPageToken: \(String(describing: nextPageToken)), typeInfos: \(String(describing: typeInfos)))"}
}

extension ListActivityTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListActivityTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextPageToken = output.nextPageToken
            self.typeInfos = output.typeInfos
        } else {
            self.nextPageToken = nil
            self.typeInfos = nil
        }
    }
}

/// <p>Contains a paginated list of activity type information structures.</p>
public struct ListActivityTypesOutputResponse: Equatable {
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?
    /// <p>List of activity type information.</p>
    public let typeInfos: [ActivityTypeInfo]?

    public init (
        nextPageToken: String? = nil,
        typeInfos: [ActivityTypeInfo]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.typeInfos = typeInfos
    }
}

struct ListActivityTypesOutputResponseBody: Equatable {
    public let typeInfos: [ActivityTypeInfo]?
    public let nextPageToken: String?
}

extension ListActivityTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextPageToken
        case typeInfos
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfosContainer = try containerValues.decodeIfPresent([ActivityTypeInfo?].self, forKey: .typeInfos)
        var typeInfosDecoded0:[ActivityTypeInfo]? = nil
        if let typeInfosContainer = typeInfosContainer {
            typeInfosDecoded0 = [ActivityTypeInfo]()
            for structure0 in typeInfosContainer {
                if let structure0 = structure0 {
                    typeInfosDecoded0?.append(structure0)
                }
            }
        }
        typeInfos = typeInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct ListClosedWorkflowExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "ListClosedWorkflowExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClosedWorkflowExecutionsOutputError>
}

extension ListClosedWorkflowExecutionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClosedWorkflowExecutionsInput(closeStatusFilter: \(String(describing: closeStatusFilter)), closeTimeFilter: \(String(describing: closeTimeFilter)), domain: \(String(describing: domain)), executionFilter: \(String(describing: executionFilter)), maximumPageSize: \(String(describing: maximumPageSize)), nextPageToken: \(String(describing: nextPageToken)), reverseOrder: \(String(describing: reverseOrder)), startTimeFilter: \(String(describing: startTimeFilter)), tagFilter: \(String(describing: tagFilter)), typeFilter: \(String(describing: typeFilter)))"}
}

extension ListClosedWorkflowExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let closeStatusFilter = closeStatusFilter {
            try encodeContainer.encode(closeStatusFilter, forKey: .closeStatusFilter)
        }
        if let closeTimeFilter = closeTimeFilter {
            try encodeContainer.encode(closeTimeFilter, forKey: .closeTimeFilter)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

public struct ListClosedWorkflowExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListClosedWorkflowExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClosedWorkflowExecutionsOutputError>
}

public struct ListClosedWorkflowExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListClosedWorkflowExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClosedWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClosedWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClosedWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListClosedWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClosedWorkflowExecutionsOutputError>
}

public struct ListClosedWorkflowExecutionsInput: Equatable {
    /// <p>If specified, only workflow executions that match this <i>close
    ///         status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED
    ///       workflow executions are listed.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let closeStatusFilter: CloseStatusFilter?
    /// <p>If specified, the workflow executions are included in the returned results based on
    ///       whether their close times are within the range specified by this filter. Also, if this
    ///       parameter is specified, the returned results are ordered by their close times.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let closeTimeFilter: ExecutionTimeFilter?
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    public let domain: String?
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter
    ///       are returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let executionFilter: WorkflowExecutionFilter?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the
    ///       results are returned in descending order of the start or the close time of the
    ///       executions.</p>
    public let reverseOrder: Bool
    /// <p>If specified, the workflow executions are included in the returned results based on
    ///       whether their start times are within the range specified by this filter. Also, if this
    ///       parameter is specified, the returned results are ordered by their start times.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let startTimeFilter: ExecutionTimeFilter?
    /// <p>If specified, only executions that have the matching tag are listed.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let tagFilter: TagFilter?
    /// <p>If specified, only executions of the type specified in the filter are
    ///       returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let typeFilter: WorkflowTypeFilter?

    public init (
        closeStatusFilter: CloseStatusFilter? = nil,
        closeTimeFilter: ExecutionTimeFilter? = nil,
        domain: String? = nil,
        executionFilter: WorkflowExecutionFilter? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false,
        startTimeFilter: ExecutionTimeFilter? = nil,
        tagFilter: TagFilter? = nil,
        typeFilter: WorkflowTypeFilter? = nil
    )
    {
        self.closeStatusFilter = closeStatusFilter
        self.closeTimeFilter = closeTimeFilter
        self.domain = domain
        self.executionFilter = executionFilter
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct ListClosedWorkflowExecutionsInputBody: Equatable {
    public let domain: String?
    public let startTimeFilter: ExecutionTimeFilter?
    public let closeTimeFilter: ExecutionTimeFilter?
    public let executionFilter: WorkflowExecutionFilter?
    public let closeStatusFilter: CloseStatusFilter?
    public let typeFilter: WorkflowTypeFilter?
    public let tagFilter: TagFilter?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension ListClosedWorkflowExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let closeTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .closeTimeFilter)
        closeTimeFilter = closeTimeFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
        let closeStatusFilterDecoded = try containerValues.decodeIfPresent(CloseStatusFilter.self, forKey: .closeStatusFilter)
        closeStatusFilter = closeStatusFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension ListClosedWorkflowExecutionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClosedWorkflowExecutionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListClosedWorkflowExecutionsOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClosedWorkflowExecutionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClosedWorkflowExecutionsOutputResponse(executionInfos: \(String(describing: executionInfos)), nextPageToken: \(String(describing: nextPageToken)))"}
}

extension ListClosedWorkflowExecutionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListClosedWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.executionInfos = output.executionInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.executionInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// <p>Contains a paginated list of information about workflow executions.</p>
public struct ListClosedWorkflowExecutionsOutputResponse: Equatable {
    /// <p>The list of workflow information structures.</p>
    public let executionInfos: [WorkflowExecutionInfo]?
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?

    public init (
        executionInfos: [WorkflowExecutionInfo]? = nil,
        nextPageToken: String? = nil
    )
    {
        self.executionInfos = executionInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListClosedWorkflowExecutionsOutputResponseBody: Equatable {
    public let executionInfos: [WorkflowExecutionInfo]?
    public let nextPageToken: String?
}

extension ListClosedWorkflowExecutionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case executionInfos
        case nextPageToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfosContainer = try containerValues.decodeIfPresent([WorkflowExecutionInfo?].self, forKey: .executionInfos)
        var executionInfosDecoded0:[WorkflowExecutionInfo]? = nil
        if let executionInfosContainer = executionInfosContainer {
            executionInfosDecoded0 = [WorkflowExecutionInfo]()
            for structure0 in executionInfosContainer {
                if let structure0 = structure0 {
                    executionInfosDecoded0?.append(structure0)
                }
            }
        }
        executionInfos = executionInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct ListDomainsInputBodyMiddleware: Middleware {
    public let id: String = "ListDomainsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDomainsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDomainsInput>
    public typealias MOutput = OperationOutput<ListDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDomainsOutputError>
}

extension ListDomainsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDomainsInput(maximumPageSize: \(String(describing: maximumPageSize)), nextPageToken: \(String(describing: nextPageToken)), registrationStatus: \(String(describing: registrationStatus)), reverseOrder: \(String(describing: reverseOrder)))"}
}

extension ListDomainsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumPageSize
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

public struct ListDomainsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDomainsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDomainsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDomainsInput>
    public typealias MOutput = OperationOutput<ListDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDomainsOutputError>
}

public struct ListDomainsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDomainsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDomainsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDomainsInput>
    public typealias MOutput = OperationOutput<ListDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDomainsOutputError>
}

public struct ListDomainsInput: Equatable {
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>Specifies the registration status of the domains to list.</p>
    public let registrationStatus: RegistrationStatus?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the
    ///       results are returned in ascending alphabetical order by <code>name</code> of the
    ///       domains.</p>
    public let reverseOrder: Bool

    public init (
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        registrationStatus: RegistrationStatus? = nil,
        reverseOrder: Bool = false
    )
    {
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListDomainsInputBody: Equatable {
    public let nextPageToken: String?
    public let registrationStatus: RegistrationStatus?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension ListDomainsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maximumPageSize
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension ListDomainsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainsOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDomainsOutputResponse(domainInfos: \(String(describing: domainInfos)), nextPageToken: \(String(describing: nextPageToken)))"}
}

extension ListDomainsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDomainsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.domainInfos = output.domainInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.domainInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// <p>Contains a paginated collection of DomainInfo structures.</p>
public struct ListDomainsOutputResponse: Equatable {
    /// <p>A list of DomainInfo structures.</p>
    public let domainInfos: [DomainInfo]?
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?

    public init (
        domainInfos: [DomainInfo]? = nil,
        nextPageToken: String? = nil
    )
    {
        self.domainInfos = domainInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListDomainsOutputResponseBody: Equatable {
    public let domainInfos: [DomainInfo]?
    public let nextPageToken: String?
}

extension ListDomainsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domainInfos
        case nextPageToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainInfosContainer = try containerValues.decodeIfPresent([DomainInfo?].self, forKey: .domainInfos)
        var domainInfosDecoded0:[DomainInfo]? = nil
        if let domainInfosContainer = domainInfosContainer {
            domainInfosDecoded0 = [DomainInfo]()
            for structure0 in domainInfosContainer {
                if let structure0 = structure0 {
                    domainInfosDecoded0?.append(structure0)
                }
            }
        }
        domainInfos = domainInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct ListOpenWorkflowExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

extension ListOpenWorkflowExecutionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOpenWorkflowExecutionsInput(domain: \(String(describing: domain)), executionFilter: \(String(describing: executionFilter)), maximumPageSize: \(String(describing: maximumPageSize)), nextPageToken: \(String(describing: nextPageToken)), reverseOrder: \(String(describing: reverseOrder)), startTimeFilter: \(String(describing: startTimeFilter)), tagFilter: \(String(describing: tagFilter)), typeFilter: \(String(describing: typeFilter)))"}
}

extension ListOpenWorkflowExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

public struct ListOpenWorkflowExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

public struct ListOpenWorkflowExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

public struct ListOpenWorkflowExecutionsInput: Equatable {
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    public let domain: String?
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter
    ///       are returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let executionFilter: WorkflowExecutionFilter?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the
    ///       results are returned in descending order of the start time of the executions.</p>
    public let reverseOrder: Bool
    /// <p>Workflow executions are included in the returned results based on whether their start
    ///       times are within the range specified by this filter.</p>
    public let startTimeFilter: ExecutionTimeFilter?
    /// <p>If specified, only executions that have the matching tag are listed.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let tagFilter: TagFilter?
    /// <p>If specified, only executions of the type specified in the filter are
    ///       returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are
    ///         mutually exclusive. You can specify at most one of these in a request.</p>
    ///          </note>
    public let typeFilter: WorkflowTypeFilter?

    public init (
        domain: String? = nil,
        executionFilter: WorkflowExecutionFilter? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false,
        startTimeFilter: ExecutionTimeFilter? = nil,
        tagFilter: TagFilter? = nil,
        typeFilter: WorkflowTypeFilter? = nil
    )
    {
        self.domain = domain
        self.executionFilter = executionFilter
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct ListOpenWorkflowExecutionsInputBody: Equatable {
    public let domain: String?
    public let startTimeFilter: ExecutionTimeFilter?
    public let typeFilter: WorkflowTypeFilter?
    public let tagFilter: TagFilter?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
    public let executionFilter: WorkflowExecutionFilter?
}

extension ListOpenWorkflowExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}

extension ListOpenWorkflowExecutionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOpenWorkflowExecutionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOpenWorkflowExecutionsOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOpenWorkflowExecutionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOpenWorkflowExecutionsOutputResponse(executionInfos: \(String(describing: executionInfos)), nextPageToken: \(String(describing: nextPageToken)))"}
}

extension ListOpenWorkflowExecutionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListOpenWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.executionInfos = output.executionInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.executionInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// <p>Contains a paginated list of information about workflow executions.</p>
public struct ListOpenWorkflowExecutionsOutputResponse: Equatable {
    /// <p>The list of workflow information structures.</p>
    public let executionInfos: [WorkflowExecutionInfo]?
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?

    public init (
        executionInfos: [WorkflowExecutionInfo]? = nil,
        nextPageToken: String? = nil
    )
    {
        self.executionInfos = executionInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListOpenWorkflowExecutionsOutputResponseBody: Equatable {
    public let executionInfos: [WorkflowExecutionInfo]?
    public let nextPageToken: String?
}

extension ListOpenWorkflowExecutionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case executionInfos
        case nextPageToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfosContainer = try containerValues.decodeIfPresent([WorkflowExecutionInfo?].self, forKey: .executionInfos)
        var executionInfosDecoded0:[WorkflowExecutionInfo]? = nil
        if let executionInfosContainer = executionInfosContainer {
            executionInfosDecoded0 = [WorkflowExecutionInfo]()
            for structure0 in executionInfosContainer {
                if let structure0 = structure0 {
                    executionInfosDecoded0?.append(structure0)
                }
            }
        }
        executionInfos = executionInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    public let resourceArn: String?

    public init (
        resourceArn: String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Equatable {
    public let resourceArn: String?
}

extension ListTagsForResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>An array of tags associated with the domain.</p>
    public let tags: [ResourceTag]?

    public init (
        tags: [ResourceTag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [ResourceTag]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct ListWorkflowTypesInputBodyMiddleware: Middleware {
    public let id: String = "ListWorkflowTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListWorkflowTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListWorkflowTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListWorkflowTypesInput>
    public typealias MOutput = OperationOutput<ListWorkflowTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListWorkflowTypesOutputError>
}

extension ListWorkflowTypesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListWorkflowTypesInput(domain: \(String(describing: domain)), maximumPageSize: \(String(describing: maximumPageSize)), name: \(String(describing: name)), nextPageToken: \(String(describing: nextPageToken)), registrationStatus: \(String(describing: registrationStatus)), reverseOrder: \(String(describing: reverseOrder)))"}
}

extension ListWorkflowTypesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

public struct ListWorkflowTypesInputHeadersMiddleware: Middleware {
    public let id: String = "ListWorkflowTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListWorkflowTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListWorkflowTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListWorkflowTypesInput>
    public typealias MOutput = OperationOutput<ListWorkflowTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListWorkflowTypesOutputError>
}

public struct ListWorkflowTypesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListWorkflowTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListWorkflowTypesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListWorkflowTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListWorkflowTypesInput>
    public typealias MOutput = OperationOutput<ListWorkflowTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListWorkflowTypesOutputError>
}

public struct ListWorkflowTypesInput: Equatable {
    /// <p>The name of the domain in which the workflow types have been registered.</p>
    public let domain: String?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If specified, lists the workflow type with this name.</p>
    public let name: String?
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>Specifies the registration status of the workflow types to list.</p>
    public let registrationStatus: RegistrationStatus?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the
    ///       results are returned in ascending alphabetical order of the <code>name</code> of the workflow
    ///       types.</p>
    public let reverseOrder: Bool

    public init (
        domain: String? = nil,
        maximumPageSize: Int = 0,
        name: String? = nil,
        nextPageToken: String? = nil,
        registrationStatus: RegistrationStatus? = nil,
        reverseOrder: Bool = false
    )
    {
        self.domain = domain
        self.maximumPageSize = maximumPageSize
        self.name = name
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListWorkflowTypesInputBody: Equatable {
    public let domain: String?
    public let name: String?
    public let registrationStatus: RegistrationStatus?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension ListWorkflowTypesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension ListWorkflowTypesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkflowTypesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListWorkflowTypesOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkflowTypesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListWorkflowTypesOutputResponse(nextPageToken: \(String(describing: nextPageToken)), typeInfos: \(String(describing: typeInfos)))"}
}

extension ListWorkflowTypesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListWorkflowTypesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextPageToken = output.nextPageToken
            self.typeInfos = output.typeInfos
        } else {
            self.nextPageToken = nil
            self.typeInfos = nil
        }
    }
}

/// <p>Contains a paginated list of information structures about workflow types.</p>
public struct ListWorkflowTypesOutputResponse: Equatable {
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?
    /// <p>The list of workflow type information.</p>
    public let typeInfos: [WorkflowTypeInfo]?

    public init (
        nextPageToken: String? = nil,
        typeInfos: [WorkflowTypeInfo]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.typeInfos = typeInfos
    }
}

struct ListWorkflowTypesOutputResponseBody: Equatable {
    public let typeInfos: [WorkflowTypeInfo]?
    public let nextPageToken: String?
}

extension ListWorkflowTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextPageToken
        case typeInfos
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfosContainer = try containerValues.decodeIfPresent([WorkflowTypeInfo?].self, forKey: .typeInfos)
        var typeInfosDecoded0:[WorkflowTypeInfo]? = nil
        if let typeInfosContainer = typeInfosContainer {
            typeInfosDecoded0 = [WorkflowTypeInfo]()
            for structure0 in typeInfosContainer {
                if let structure0 = structure0 {
                    typeInfosDecoded0?.append(structure0)
                }
            }
        }
        typeInfos = typeInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension MarkerRecordedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case details
        case markerName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let markerName = markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension MarkerRecordedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MarkerRecordedEventAttributes(decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), details: \(String(describing: details)), markerName: \(String(describing: markerName)))"}
}

/// <p>Provides the details of the <code>MarkerRecorded</code> event.</p>
public struct MarkerRecordedEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RecordMarker</code> decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The details of the marker.</p>
    public let details: String?
    /// <p>The name of the marker.</p>
    public let markerName: String?

    public init (
        decisionTaskCompletedEventId: Int = 0,
        details: String? = nil,
        markerName: String? = nil
    )
    {
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.details = details
        self.markerName = markerName
    }
}

extension OperationNotPermittedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OperationNotPermittedFault(message: \(String(describing: message)))"}
}

extension OperationNotPermittedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OperationNotPermittedFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned when the caller doesn't have sufficient permissions to invoke the action.</p>
public struct OperationNotPermittedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotPermittedFaultBody: Equatable {
    public let message: String?
}

extension OperationNotPermittedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct PollForActivityTaskInputBodyMiddleware: Middleware {
    public let id: String = "PollForActivityTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForActivityTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForActivityTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForActivityTaskInput>
    public typealias MOutput = OperationOutput<PollForActivityTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForActivityTaskOutputError>
}

extension PollForActivityTaskInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PollForActivityTaskInput(domain: \(String(describing: domain)), identity: \(String(describing: identity)), taskList: \(String(describing: taskList)))"}
}

extension PollForActivityTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case identity
        case taskList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

public struct PollForActivityTaskInputHeadersMiddleware: Middleware {
    public let id: String = "PollForActivityTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForActivityTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForActivityTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForActivityTaskInput>
    public typealias MOutput = OperationOutput<PollForActivityTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForActivityTaskOutputError>
}

public struct PollForActivityTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "PollForActivityTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForActivityTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForActivityTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForActivityTaskInput>
    public typealias MOutput = OperationOutput<PollForActivityTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForActivityTaskOutputError>
}

public struct PollForActivityTaskInput: Equatable {
    /// <p>The name of the domain that contains the task lists being polled.</p>
    public let domain: String?
    /// <p>Identity of the worker making the request, recorded in the
    ///         <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic
    ///       tracing when problems arise. The form of this identity is user defined.</p>
    public let identity: String?
    /// <p>Specifies the task list to poll for activity tasks.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let taskList: TaskList?

    public init (
        domain: String? = nil,
        identity: String? = nil,
        taskList: TaskList? = nil
    )
    {
        self.domain = domain
        self.identity = identity
        self.taskList = taskList
    }
}

struct PollForActivityTaskInputBody: Equatable {
    public let domain: String?
    public let taskList: TaskList?
    public let identity: String?
}

extension PollForActivityTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case identity
        case taskList
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let identityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identity)
        identity = identityDecoded
    }
}

extension PollForActivityTaskOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForActivityTaskOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PollForActivityTaskOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForActivityTaskOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PollForActivityTaskOutputResponse(activityId: \(String(describing: activityId)), activityType: \(String(describing: activityType)), input: \(String(describing: input)), startedEventId: \(String(describing: startedEventId)), taskToken: \(String(describing: taskToken)), workflowExecution: \(String(describing: workflowExecution)))"}
}

extension PollForActivityTaskOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PollForActivityTaskOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.activityId = output.activityId
            self.activityType = output.activityType
            self.input = output.input
            self.startedEventId = output.startedEventId
            self.taskToken = output.taskToken
            self.workflowExecution = output.workflowExecution
        } else {
            self.activityId = nil
            self.activityType = nil
            self.input = nil
            self.startedEventId = 0
            self.taskToken = nil
            self.workflowExecution = nil
        }
    }
}

/// <p>Unit of work sent to an activity worker.</p>
public struct PollForActivityTaskOutputResponse: Equatable {
    /// <p>The unique ID of the task.</p>
    public let activityId: String?
    /// <p>The type of this activity task.</p>
    public let activityType: ActivityType?
    /// <p>The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.</p>
    public let input: String?
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded in the history.</p>
    public let startedEventId: Int
    /// <p>The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.</p>
    public let taskToken: String?
    /// <p>The workflow execution that started this activity task.</p>
    public let workflowExecution: WorkflowExecution?

    public init (
        activityId: String? = nil,
        activityType: ActivityType? = nil,
        input: String? = nil,
        startedEventId: Int = 0,
        taskToken: String? = nil,
        workflowExecution: WorkflowExecution? = nil
    )
    {
        self.activityId = activityId
        self.activityType = activityType
        self.input = input
        self.startedEventId = startedEventId
        self.taskToken = taskToken
        self.workflowExecution = workflowExecution
    }
}

struct PollForActivityTaskOutputResponseBody: Equatable {
    public let taskToken: String?
    public let activityId: String?
    public let startedEventId: Int
    public let workflowExecution: WorkflowExecution?
    public let activityType: ActivityType?
    public let input: String?
}

extension PollForActivityTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activityId
        case activityType
        case input
        case startedEventId
        case taskToken
        case workflowExecution
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
    }
}

public struct PollForDecisionTaskInputBodyMiddleware: Middleware {
    public let id: String = "PollForDecisionTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForDecisionTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForDecisionTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForDecisionTaskInput>
    public typealias MOutput = OperationOutput<PollForDecisionTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForDecisionTaskOutputError>
}

extension PollForDecisionTaskInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PollForDecisionTaskInput(domain: \(String(describing: domain)), identity: \(String(describing: identity)), maximumPageSize: \(String(describing: maximumPageSize)), nextPageToken: \(String(describing: nextPageToken)), reverseOrder: \(String(describing: reverseOrder)), taskList: \(String(describing: taskList)))"}
}

extension PollForDecisionTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case identity
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case taskList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let identity = identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

public struct PollForDecisionTaskInputHeadersMiddleware: Middleware {
    public let id: String = "PollForDecisionTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForDecisionTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForDecisionTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForDecisionTaskInput>
    public typealias MOutput = OperationOutput<PollForDecisionTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForDecisionTaskOutputError>
}

public struct PollForDecisionTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "PollForDecisionTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PollForDecisionTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<PollForDecisionTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PollForDecisionTaskInput>
    public typealias MOutput = OperationOutput<PollForDecisionTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PollForDecisionTaskOutputError>
}

public struct PollForDecisionTaskInput: Equatable {
    /// <p>The name of the domain containing the task lists to poll.</p>
    public let domain: String?
    /// <p>Identity of the decider making the request, which is recorded in the
    ///       DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when
    ///       problems arise. The form of this identity is user defined.</p>
    public let identity: String?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///          <p>This
    ///       is an upper limit only; the actual number of results returned per call may be fewer than the
    ///       specified maximum.</p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    ///          <note>
    ///             <p>The <code>nextPageToken</code> returned by this action cannot be used with <a>GetWorkflowExecutionHistory</a> to get the next page. You must call <a>PollForDecisionTask</a> again (with the <code>nextPageToken</code>) to retrieve
    ///         the next page of history records. Calling <a>PollForDecisionTask</a> with a
    ///           <code>nextPageToken</code> doesn't return a new decision task.</p>
    ///          </note>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the events in reverse order. By default the
    ///       results are returned in ascending order of the <code>eventTimestamp</code> of the
    ///       events.</p>
    public let reverseOrder: Bool
    /// <p>Specifies the task list to poll for decision tasks.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let taskList: TaskList?

    public init (
        domain: String? = nil,
        identity: String? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false,
        taskList: TaskList? = nil
    )
    {
        self.domain = domain
        self.identity = identity
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.taskList = taskList
    }
}

struct PollForDecisionTaskInputBody: Equatable {
    public let domain: String?
    public let taskList: TaskList?
    public let identity: String?
    public let nextPageToken: String?
    public let maximumPageSize: Int
    public let reverseOrder: Bool
}

extension PollForDecisionTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case identity
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case taskList
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let identityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identity)
        identity = identityDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decode(Int.self, forKey: .maximumPageSize)
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decode(Bool.self, forKey: .reverseOrder)
        reverseOrder = reverseOrderDecoded
    }
}

extension PollForDecisionTaskOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForDecisionTaskOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PollForDecisionTaskOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForDecisionTaskOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PollForDecisionTaskOutputResponse(events: \(String(describing: events)), nextPageToken: \(String(describing: nextPageToken)), previousStartedEventId: \(String(describing: previousStartedEventId)), startedEventId: \(String(describing: startedEventId)), taskToken: \(String(describing: taskToken)), workflowExecution: \(String(describing: workflowExecution)), workflowType: \(String(describing: workflowType)))"}
}

extension PollForDecisionTaskOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PollForDecisionTaskOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.events = output.events
            self.nextPageToken = output.nextPageToken
            self.previousStartedEventId = output.previousStartedEventId
            self.startedEventId = output.startedEventId
            self.taskToken = output.taskToken
            self.workflowExecution = output.workflowExecution
            self.workflowType = output.workflowType
        } else {
            self.events = nil
            self.nextPageToken = nil
            self.previousStartedEventId = 0
            self.startedEventId = 0
            self.taskToken = nil
            self.workflowExecution = nil
            self.workflowType = nil
        }
    }
}

/// <p>A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.</p>
public struct PollForDecisionTaskOutputResponse: Equatable {
    /// <p>A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.</p>
    public let events: [HistoryEvent]?
    /// <p>If a <code>NextPageToken</code> was returned by a previous call, there are more
    ///   results available. To retrieve the next page of results, make the call again using the returned token in
    ///   <code>nextPageToken</code>. Keep all other arguments unchanged.</p>
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    public let nextPageToken: String?
    /// <p>The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.</p>
    public let previousStartedEventId: Int
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded in the history.</p>
    public let startedEventId: Int
    /// <p>The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.</p>
    public let taskToken: String?
    /// <p>The workflow execution for which this decision task was created.</p>
    public let workflowExecution: WorkflowExecution?
    /// <p>The type of the workflow execution for which this decision task was created.</p>
    public let workflowType: WorkflowType?

    public init (
        events: [HistoryEvent]? = nil,
        nextPageToken: String? = nil,
        previousStartedEventId: Int = 0,
        startedEventId: Int = 0,
        taskToken: String? = nil,
        workflowExecution: WorkflowExecution? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.events = events
        self.nextPageToken = nextPageToken
        self.previousStartedEventId = previousStartedEventId
        self.startedEventId = startedEventId
        self.taskToken = taskToken
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

struct PollForDecisionTaskOutputResponseBody: Equatable {
    public let taskToken: String?
    public let startedEventId: Int
    public let workflowExecution: WorkflowExecution?
    public let workflowType: WorkflowType?
    public let events: [HistoryEvent]?
    public let nextPageToken: String?
    public let previousStartedEventId: Int
}

extension PollForDecisionTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextPageToken
        case previousStartedEventId
        case startedEventId
        case taskToken
        case workflowExecution
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let eventsContainer = try containerValues.decodeIfPresent([HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let previousStartedEventIdDecoded = try containerValues.decode(Int.self, forKey: .previousStartedEventId)
        previousStartedEventId = previousStartedEventIdDecoded
    }
}

public struct RecordActivityTaskHeartbeatInputBodyMiddleware: Middleware {
    public let id: String = "RecordActivityTaskHeartbeatInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordActivityTaskHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordActivityTaskHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordActivityTaskHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordActivityTaskHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordActivityTaskHeartbeatOutputError>
}

extension RecordActivityTaskHeartbeatInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordActivityTaskHeartbeatInput(details: \(String(describing: details)), taskToken: \(String(describing: taskToken)))"}
}

extension RecordActivityTaskHeartbeatInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

public struct RecordActivityTaskHeartbeatInputHeadersMiddleware: Middleware {
    public let id: String = "RecordActivityTaskHeartbeatInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordActivityTaskHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordActivityTaskHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordActivityTaskHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordActivityTaskHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordActivityTaskHeartbeatOutputError>
}

public struct RecordActivityTaskHeartbeatInputQueryItemMiddleware: Middleware {
    public let id: String = "RecordActivityTaskHeartbeatInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordActivityTaskHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordActivityTaskHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordActivityTaskHeartbeatInput>
    public typealias MOutput = OperationOutput<RecordActivityTaskHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordActivityTaskHeartbeatOutputError>
}

public struct RecordActivityTaskHeartbeatInput: Equatable {
    /// <p>If specified, contains details about the progress of the task.</p>
    public let details: String?
    /// <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p>
    ///          <important>
    ///             <p>
    ///                <code>taskToken</code> is generated by the service and should be treated as an opaque value.
    ///         If the task is passed to another process, its <code>taskToken</code> must also be passed.
    ///         This enables it to provide its progress and respond with results. </p>
    ///          </important>
    public let taskToken: String?

    public init (
        details: String? = nil,
        taskToken: String? = nil
    )
    {
        self.details = details
        self.taskToken = taskToken
    }
}

struct RecordActivityTaskHeartbeatInputBody: Equatable {
    public let taskToken: String?
    public let details: String?
}

extension RecordActivityTaskHeartbeatInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case details
        case taskToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RecordActivityTaskHeartbeatOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RecordActivityTaskHeartbeatOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RecordActivityTaskHeartbeatOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordActivityTaskHeartbeatOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordActivityTaskHeartbeatOutputResponse(cancelRequested: \(String(describing: cancelRequested)))"}
}

extension RecordActivityTaskHeartbeatOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RecordActivityTaskHeartbeatOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cancelRequested = output.cancelRequested
        } else {
            self.cancelRequested = false
        }
    }
}

/// <p>Status information about an activity task.</p>
public struct RecordActivityTaskHeartbeatOutputResponse: Equatable {
    /// <p>Set to <code>true</code> if cancellation of the task is requested.</p>
    public let cancelRequested: Bool

    public init (
        cancelRequested: Bool = false
    )
    {
        self.cancelRequested = cancelRequested
    }
}

struct RecordActivityTaskHeartbeatOutputResponseBody: Equatable {
    public let cancelRequested: Bool
}

extension RecordActivityTaskHeartbeatOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cancelRequested
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cancelRequestedDecoded = try containerValues.decode(Bool.self, forKey: .cancelRequested)
        cancelRequested = cancelRequestedDecoded
    }
}

extension RecordMarkerDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case markerName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let markerName = markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RecordMarkerDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordMarkerDecisionAttributes(details: \(String(describing: details)), markerName: \(String(describing: markerName)))"}
}

/// <p>Provides the details of the <code>RecordMarker</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct RecordMarkerDecisionAttributes: Equatable {
    /// <p>
    ///          The details of the marker.</p>
    public let details: String?
    /// <p>
    ///          The name of the marker.</p>
    public let markerName: String?

    public init (
        details: String? = nil,
        markerName: String? = nil
    )
    {
        self.details = details
        self.markerName = markerName
    }
}

public enum RecordMarkerFailedCause {
    case operationNotPermitted
    case sdkUnknown(String)
}

extension RecordMarkerFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RecordMarkerFailedCause] {
        return [
            .operationNotPermitted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RecordMarkerFailedCause(rawValue: rawValue) ?? RecordMarkerFailedCause.sdkUnknown(rawValue)
    }
}

extension RecordMarkerFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case markerName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let markerName = markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let causeDecoded = try containerValues.decodeIfPresent(RecordMarkerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension RecordMarkerFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RecordMarkerFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), markerName: \(String(describing: markerName)))"}
}

/// <p>Provides the details of the <code>RecordMarkerFailed</code> event.</p>
public struct RecordMarkerFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: RecordMarkerFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The marker's name.</p>
    public let markerName: String?

    public init (
        cause: RecordMarkerFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0,
        markerName: String? = nil
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.markerName = markerName
    }
}

public struct RegisterActivityTypeInputBodyMiddleware: Middleware {
    public let id: String = "RegisterActivityTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterActivityTypeInput>
    public typealias MOutput = OperationOutput<RegisterActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterActivityTypeOutputError>
}

extension RegisterActivityTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterActivityTypeInput(defaultTaskHeartbeatTimeout: \(String(describing: defaultTaskHeartbeatTimeout)), defaultTaskList: \(String(describing: defaultTaskList)), defaultTaskPriority: \(String(describing: defaultTaskPriority)), defaultTaskScheduleToCloseTimeout: \(String(describing: defaultTaskScheduleToCloseTimeout)), defaultTaskScheduleToStartTimeout: \(String(describing: defaultTaskScheduleToStartTimeout)), defaultTaskStartToCloseTimeout: \(String(describing: defaultTaskStartToCloseTimeout)), description: \(String(describing: description)), domain: \(String(describing: domain)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

extension RegisterActivityTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout {
            try encodeContainer.encode(defaultTaskHeartbeatTimeout, forKey: .defaultTaskHeartbeatTimeout)
        }
        if let defaultTaskList = defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout {
            try encodeContainer.encode(defaultTaskScheduleToCloseTimeout, forKey: .defaultTaskScheduleToCloseTimeout)
        }
        if let defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout {
            try encodeContainer.encode(defaultTaskScheduleToStartTimeout, forKey: .defaultTaskScheduleToStartTimeout)
        }
        if let defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct RegisterActivityTypeInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterActivityTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterActivityTypeInput>
    public typealias MOutput = OperationOutput<RegisterActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterActivityTypeOutputError>
}

public struct RegisterActivityTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterActivityTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterActivityTypeInput>
    public typealias MOutput = OperationOutput<RegisterActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterActivityTypeOutputError>
}

public struct RegisterActivityTypeInput: Equatable {
    /// <p>If set, specifies the default maximum time before which a worker processing a task of
    ///       this type must report progress by calling <a>RecordActivityTaskHeartbeat</a>. If
    ///       the timeout is exceeded, the activity task is automatically timed out. This default can be
    ///       overridden when scheduling an activity task using the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>. If the activity worker subsequently attempts to record a heartbeat
    ///       or returns a result, the activity worker receives an <code>UnknownResource</code> fault. In
    ///       this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should
    ///       clean up the activity task.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskHeartbeatTimeout: String?
    /// <p>If set, specifies the default task list to use for scheduling tasks of this activity
    ///       type. This default task list is used if a task list isn't provided when a task is scheduled
    ///       through the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    public let defaultTaskList: TaskList?
    /// <p>The default task priority to assign to the activity type. If not assigned, then
    ///         <code>0</code> is used. Valid values are integers that range from Java's
    ///         <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647).
    ///       Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task
    ///         Priority</a> in the <i>in the
    ///       <i>Amazon SWF Developer Guide</i>.</i>.</p>
    public let defaultTaskPriority: String?
    /// <p>If set, specifies the default maximum duration for a task of this activity type. This
    ///       default can be overridden when scheduling an activity task using the
    ///         <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskScheduleToCloseTimeout: String?
    /// <p>If set, specifies the default maximum duration that a task of this activity type can
    ///       wait before being assigned to a worker. This default can be overridden when scheduling an
    ///       activity task using the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskScheduleToStartTimeout: String?
    /// <p>If set, specifies the default maximum duration that a worker can take to process tasks
    ///       of this activity type. This default can be overridden when scheduling an activity task using
    ///       the <code>ScheduleActivityTask</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskStartToCloseTimeout: String?
    /// <p>A textual description of the activity type.</p>
    public let description: String?
    /// <p>The name of the domain in which this activity is to be registered.</p>
    public let domain: String?
    /// <p>The name of the activity type within the domain.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let name: String?
    /// <p>The version of the activity type.</p>
    ///          <note>
    ///             <p>The activity type consists of the name and version, the combination of which must be
    ///         unique within the domain.</p>
    ///          </note>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let version: String?

    public init (
        defaultTaskHeartbeatTimeout: String? = nil,
        defaultTaskList: TaskList? = nil,
        defaultTaskPriority: String? = nil,
        defaultTaskScheduleToCloseTimeout: String? = nil,
        defaultTaskScheduleToStartTimeout: String? = nil,
        defaultTaskStartToCloseTimeout: String? = nil,
        description: String? = nil,
        domain: String? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        self.description = description
        self.domain = domain
        self.name = name
        self.version = version
    }
}

struct RegisterActivityTypeInputBody: Equatable {
    public let domain: String?
    public let name: String?
    public let version: String?
    public let description: String?
    public let defaultTaskStartToCloseTimeout: String?
    public let defaultTaskHeartbeatTimeout: String?
    public let defaultTaskList: TaskList?
    public let defaultTaskPriority: String?
    public let defaultTaskScheduleToStartTimeout: String?
    public let defaultTaskScheduleToCloseTimeout: String?
}

extension RegisterActivityTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultTaskHeartbeatTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskHeartbeatTimeout)
        defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultTaskScheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskScheduleToStartTimeout)
        defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeoutDecoded
        let defaultTaskScheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskScheduleToCloseTimeout)
        defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeoutDecoded
    }
}

extension RegisterActivityTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterActivityTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterActivityTypeOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterActivityTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterActivityTypeOutputResponse()"}
}

extension RegisterActivityTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterActivityTypeOutputResponse: Equatable {

    public init() {}
}

struct RegisterActivityTypeOutputResponseBody: Equatable {
}

extension RegisterActivityTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RegisterDomainInputBodyMiddleware: Middleware {
    public let id: String = "RegisterDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDomainInput>
    public typealias MOutput = OperationOutput<RegisterDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDomainOutputError>
}

extension RegisterDomainInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterDomainInput(description: \(String(describing: description)), name: \(String(describing: name)), tags: \(String(describing: tags)), workflowExecutionRetentionPeriodInDays: \(String(describing: workflowExecutionRetentionPeriodInDays)))"}
}

extension RegisterDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for resourcetaglist0 in tags {
                try tagsContainer.encode(resourcetaglist0)
            }
        }
        if let workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays {
            try encodeContainer.encode(workflowExecutionRetentionPeriodInDays, forKey: .workflowExecutionRetentionPeriodInDays)
        }
    }
}

public struct RegisterDomainInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDomainInput>
    public typealias MOutput = OperationOutput<RegisterDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDomainOutputError>
}

public struct RegisterDomainInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterDomainInput>
    public typealias MOutput = OperationOutput<RegisterDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterDomainOutputError>
}

public struct RegisterDomainInput: Equatable {
    /// <p>A text description of the domain.</p>
    public let description: String?
    /// <p>Name of the domain to register. The name must be unique in the region that the domain
    ///       is registered in.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let name: String?
    /// <p>Tags to be added when registering a domain.</p>
    ///          <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    public let tags: [ResourceTag]?
    /// <p>The duration (in days) that records and histories of workflow executions on the domain
    ///       should be kept by the service. After the retention period, the workflow execution isn't
    ///       available in the results of visibility calls.</p>
    ///          <p>If you pass the value <code>NONE</code> or <code>0</code> (zero), then the workflow
    ///       execution history isn't retained. As soon as the workflow execution completes, the execution
    ///       record and its history are deleted.</p>
    ///          <p>The maximum workflow execution retention period is 90 days. For more information about
    ///       Amazon SWF service limits, see: <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-limits.html">Amazon SWF Service Limits</a> in the
    ///         <i>Amazon SWF Developer Guide</i>.</p>
    public let workflowExecutionRetentionPeriodInDays: String?

    public init (
        description: String? = nil,
        name: String? = nil,
        tags: [ResourceTag]? = nil,
        workflowExecutionRetentionPeriodInDays: String? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
        self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
    }
}

struct RegisterDomainInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let workflowExecutionRetentionPeriodInDays: String?
    public let tags: [ResourceTag]?
}

extension RegisterDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RegisterDomainOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterDomainOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DomainAlreadyExistsFault" : self = .domainAlreadyExistsFault(try DomainAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsFault" : self = .tooManyTagsFault(try TooManyTagsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterDomainOutputError: Equatable {
    case domainAlreadyExistsFault(DomainAlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case tooManyTagsFault(TooManyTagsFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterDomainOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterDomainOutputResponse()"}
}

extension RegisterDomainOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterDomainOutputResponse: Equatable {

    public init() {}
}

struct RegisterDomainOutputResponseBody: Equatable {
}

extension RegisterDomainOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RegisterWorkflowTypeInputBodyMiddleware: Middleware {
    public let id: String = "RegisterWorkflowTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterWorkflowTypeInput>
    public typealias MOutput = OperationOutput<RegisterWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterWorkflowTypeOutputError>
}

extension RegisterWorkflowTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterWorkflowTypeInput(defaultChildPolicy: \(String(describing: defaultChildPolicy)), defaultExecutionStartToCloseTimeout: \(String(describing: defaultExecutionStartToCloseTimeout)), defaultLambdaRole: \(String(describing: defaultLambdaRole)), defaultTaskList: \(String(describing: defaultTaskList)), defaultTaskPriority: \(String(describing: defaultTaskPriority)), defaultTaskStartToCloseTimeout: \(String(describing: defaultTaskStartToCloseTimeout)), description: \(String(describing: description)), domain: \(String(describing: domain)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

extension RegisterWorkflowTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChildPolicy = defaultChildPolicy {
            try encodeContainer.encode(defaultChildPolicy.rawValue, forKey: .defaultChildPolicy)
        }
        if let defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout {
            try encodeContainer.encode(defaultExecutionStartToCloseTimeout, forKey: .defaultExecutionStartToCloseTimeout)
        }
        if let defaultLambdaRole = defaultLambdaRole {
            try encodeContainer.encode(defaultLambdaRole, forKey: .defaultLambdaRole)
        }
        if let defaultTaskList = defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct RegisterWorkflowTypeInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterWorkflowTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterWorkflowTypeInput>
    public typealias MOutput = OperationOutput<RegisterWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterWorkflowTypeOutputError>
}

public struct RegisterWorkflowTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterWorkflowTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterWorkflowTypeInput>
    public typealias MOutput = OperationOutput<RegisterWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterWorkflowTypeOutputError>
}

public struct RegisterWorkflowTypeInput: Equatable {
    /// <p>If set, specifies the default policy to use for the child workflow executions when a
    ///       workflow execution of this type is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This
    ///       default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///           execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its
    ///           history. It is up to the decider to take appropriate actions when it receives an execution
    ///           history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to
    ///           run.</p>
    ///             </li>
    ///          </ul>
    public let defaultChildPolicy: ChildPolicy?
    /// <p>If set, specifies the default maximum duration for executions of this workflow type.
    ///       You can override this default when starting an execution through the <a>StartWorkflowExecution</a> Action or <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///
    ///          <p>The duration is specified in seconds; an integer greater than or equal to 0. Unlike
    ///       some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for
    ///         <code>defaultExecutionStartToCloseTimeout</code>; there is a one-year max limit on the time
    ///       that a workflow execution can run. Exceeding this limit always causes the workflow execution
    ///       to time out.</p>
    public let defaultExecutionStartToCloseTimeout: String?
    /// <p>The default IAM role attached to this workflow type.</p>
    ///          <note>
    ///             <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you
    ///         don't specify an IAM role when you start this workflow type, the default Lambda role is
    ///         attached to the execution. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the
    ///           <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let defaultLambdaRole: String?
    /// <p>If set, specifies the default task list to use for scheduling decision tasks for
    ///       executions of this workflow type. This default is used only if a task list isn't provided when
    ///       starting the execution through the <a>StartWorkflowExecution</a> Action or
    ///         <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    public let defaultTaskList: TaskList?
    /// <p>The default task priority to assign to the workflow type. If not assigned, then
    ///         <code>0</code> is used. Valid values are integers that range from Java's
    ///         <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647).
    ///       Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task
    ///         Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let defaultTaskPriority: String?
    /// <p>If set, specifies the default maximum duration of decision tasks for this workflow
    ///       type. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskStartToCloseTimeout: String?
    /// <p>Textual description of the workflow type.</p>
    public let description: String?
    /// <p>The name of the domain in which to register the workflow type.</p>
    public let domain: String?
    /// <p>The name of the workflow type.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let name: String?
    /// <p>The version of the workflow type.</p>
    ///          <note>
    ///             <p>The workflow type consists of the name and version, the combination of which must be
    ///         unique within the domain. To get a list of all currently registered workflow types, use the
    ///           <a>ListWorkflowTypes</a> action.</p>
    ///          </note>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let version: String?

    public init (
        defaultChildPolicy: ChildPolicy? = nil,
        defaultExecutionStartToCloseTimeout: String? = nil,
        defaultLambdaRole: String? = nil,
        defaultTaskList: TaskList? = nil,
        defaultTaskPriority: String? = nil,
        defaultTaskStartToCloseTimeout: String? = nil,
        description: String? = nil,
        domain: String? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.defaultChildPolicy = defaultChildPolicy
        self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
        self.defaultLambdaRole = defaultLambdaRole
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        self.description = description
        self.domain = domain
        self.name = name
        self.version = version
    }
}

struct RegisterWorkflowTypeInputBody: Equatable {
    public let domain: String?
    public let name: String?
    public let version: String?
    public let description: String?
    public let defaultTaskStartToCloseTimeout: String?
    public let defaultExecutionStartToCloseTimeout: String?
    public let defaultTaskList: TaskList?
    public let defaultTaskPriority: String?
    public let defaultChildPolicy: ChildPolicy?
    public let defaultLambdaRole: String?
}

extension RegisterWorkflowTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultExecutionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultExecutionStartToCloseTimeout)
        defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultChildPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .defaultChildPolicy)
        defaultChildPolicy = defaultChildPolicyDecoded
        let defaultLambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultLambdaRole)
        defaultLambdaRole = defaultLambdaRoleDecoded
    }
}

extension RegisterWorkflowTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterWorkflowTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterWorkflowTypeOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterWorkflowTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterWorkflowTypeOutputResponse()"}
}

extension RegisterWorkflowTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterWorkflowTypeOutputResponse: Equatable {

    public init() {}
}

struct RegisterWorkflowTypeOutputResponseBody: Equatable {
}

extension RegisterWorkflowTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum RegistrationStatus {
    case deprecated
    case registered
    case sdkUnknown(String)
}

extension RegistrationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RegistrationStatus] {
        return [
            .deprecated,
            .registered,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deprecated: return "DEPRECATED"
        case .registered: return "REGISTERED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
    }
}

extension RequestCancelActivityTaskDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
    }
}

extension RequestCancelActivityTaskDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelActivityTaskDecisionAttributes(activityId: \(String(describing: activityId)))"}
}

/// <p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///   <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
///           in the <i>Amazon SWF Developer Guide</i>.</p>
public struct RequestCancelActivityTaskDecisionAttributes: Equatable {
    /// <p>The <code>activityId</code> of the activity task to be canceled.</p>
    public let activityId: String?

    public init (
        activityId: String? = nil
    )
    {
        self.activityId = activityId
    }
}

public enum RequestCancelActivityTaskFailedCause {
    case activityIdUnknown
    case operationNotPermitted
    case sdkUnknown(String)
}

extension RequestCancelActivityTaskFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RequestCancelActivityTaskFailedCause] {
        return [
            .activityIdUnknown,
            .operationNotPermitted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activityIdUnknown: return "ACTIVITY_ID_UNKNOWN"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RequestCancelActivityTaskFailedCause(rawValue: rawValue) ?? RequestCancelActivityTaskFailedCause.sdkUnknown(rawValue)
    }
}

extension RequestCancelActivityTaskFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(RequestCancelActivityTaskFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension RequestCancelActivityTaskFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelActivityTaskFailedEventAttributes(activityId: \(String(describing: activityId)), cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>RequestCancelActivityTaskFailed</code> event.</p>
public struct RequestCancelActivityTaskFailedEventAttributes: Equatable {
    /// <p>The activityId provided in the <code>RequestCancelActivityTask</code> decision that failed.</p>
    public let activityId: String?
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: RequestCancelActivityTaskFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RequestCancelActivityTask</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        activityId: String? = nil,
        cause: RequestCancelActivityTaskFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.activityId = activityId
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

extension RequestCancelExternalWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension RequestCancelExternalWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelExternalWorkflowExecutionDecisionAttributes(control: \(String(describing: control)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct RequestCancelExternalWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>The data attached to the event that can be used by the decider in subsequent workflow tasks.</p>
    public let control: String?
    /// <p>The <code>runId</code> of the external workflow execution to cancel.</p>
    public let runId: String?
    /// <p>
    ///          The <code>workflowId</code> of the external workflow execution to cancel.</p>
    public let workflowId: String?

    public init (
        control: String? = nil,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.control = control
        self.runId = runId
        self.workflowId = workflowId
    }
}

public enum RequestCancelExternalWorkflowExecutionFailedCause {
    case operationNotPermitted
    case requestCancelExternalWorkflowExecutionRateExceeded
    case unknownExternalWorkflowExecution
    case sdkUnknown(String)
}

extension RequestCancelExternalWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RequestCancelExternalWorkflowExecutionFailedCause] {
        return [
            .operationNotPermitted,
            .requestCancelExternalWorkflowExecutionRateExceeded,
            .unknownExternalWorkflowExecution,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .requestCancelExternalWorkflowExecutionRateExceeded: return "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case .unknownExternalWorkflowExecution: return "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RequestCancelExternalWorkflowExecutionFailedCause(rawValue: rawValue) ?? RequestCancelExternalWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension RequestCancelExternalWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(RequestCancelExternalWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension RequestCancelExternalWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelExternalWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), initiatedEventId: \(String(describing: initiatedEventId)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecutionFailed</code> event.</p>
public struct RequestCancelExternalWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: RequestCancelExternalWorkflowExecutionFailedCause?
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks.
    ///       This data isn't sent to the workflow execution.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RequestCancelExternalWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this external workflow execution. This
    ///       information can be useful for diagnosing problems by tracing back the chain of events leading up to this
    ///       event.</p>
    public let initiatedEventId: Int
    /// <p>The <code>runId</code> of the external workflow execution.</p>
    public let runId: String?
    /// <p>The <code>workflowId</code> of the external workflow to which the cancel request was to be delivered.</p>
    public let workflowId: String?

    public init (
        cause: RequestCancelExternalWorkflowExecutionFailedCause? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        initiatedEventId: Int = 0,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.cause = cause
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.initiatedEventId = initiatedEventId
        self.runId = runId
        self.workflowId = workflowId
    }
}

extension RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case decisionTaskCompletedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes(control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event.</p>
public struct RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: Equatable {
    /// <p>Data attached to the event that can be used by the decider in subsequent workflow tasks.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>RequestCancelExternalWorkflowExecution</code> decision for this cancellation request.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The <code>runId</code> of the external workflow execution to be canceled.</p>
    public let runId: String?
    /// <p>The <code>workflowId</code> of the external workflow execution to be canceled.</p>
    public let workflowId: String?

    public init (
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.runId = runId
        self.workflowId = workflowId
    }
}

public struct RequestCancelWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "RequestCancelWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCancelWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCancelWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCancelWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<RequestCancelWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCancelWorkflowExecutionOutputError>
}

extension RequestCancelWorkflowExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelWorkflowExecutionInput(domain: \(String(describing: domain)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

extension RequestCancelWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

public struct RequestCancelWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "RequestCancelWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCancelWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCancelWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCancelWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<RequestCancelWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCancelWorkflowExecutionOutputError>
}

public struct RequestCancelWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "RequestCancelWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCancelWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCancelWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCancelWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<RequestCancelWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCancelWorkflowExecutionOutputError>
}

public struct RequestCancelWorkflowExecutionInput: Equatable {
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    public let domain: String?
    /// <p>The runId of the workflow execution to cancel.</p>
    public let runId: String?
    /// <p>The workflowId of the workflow execution to cancel.</p>
    public let workflowId: String?

    public init (
        domain: String? = nil,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.domain = domain
        self.runId = runId
        self.workflowId = workflowId
    }
}

struct RequestCancelWorkflowExecutionInputBody: Equatable {
    public let domain: String?
    public let workflowId: String?
    public let runId: String?
}

extension RequestCancelWorkflowExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case runId
        case workflowId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension RequestCancelWorkflowExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RequestCancelWorkflowExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RequestCancelWorkflowExecutionOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestCancelWorkflowExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestCancelWorkflowExecutionOutputResponse()"}
}

extension RequestCancelWorkflowExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RequestCancelWorkflowExecutionOutputResponse: Equatable {

    public init() {}
}

struct RequestCancelWorkflowExecutionOutputResponseBody: Equatable {
}

extension RequestCancelWorkflowExecutionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ResourceTag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ResourceTag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceTag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>Tags are key-value pairs that can be associated with Amazon SWF state machines and
///       activities.</p>
///          <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
public struct ResourceTag: Equatable {
    /// <p>The key of a tag.</p>
    public let key: String?
    /// <p>The value of a tag.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct RespondActivityTaskCanceledInputBodyMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCanceledInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCanceledInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCanceledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCanceledInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCanceledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCanceledOutputError>
}

extension RespondActivityTaskCanceledInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskCanceledInput(details: \(String(describing: details)), taskToken: \(String(describing: taskToken)))"}
}

extension RespondActivityTaskCanceledInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

public struct RespondActivityTaskCanceledInputHeadersMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCanceledInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCanceledInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCanceledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCanceledInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCanceledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCanceledOutputError>
}

public struct RespondActivityTaskCanceledInputQueryItemMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCanceledInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCanceledInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCanceledOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCanceledInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCanceledOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCanceledOutputError>
}

public struct RespondActivityTaskCanceledInput: Equatable {
    /// <p> Information about the cancellation.</p>
    public let details: String?
    /// <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p>
    ///          <important>
    ///             <p>
    ///                <code>taskToken</code> is generated by the service and should be treated as an opaque value.
    ///         If the task is passed to another process, its <code>taskToken</code> must also be passed.
    ///         This enables it to provide its progress and respond with results.</p>
    ///          </important>
    public let taskToken: String?

    public init (
        details: String? = nil,
        taskToken: String? = nil
    )
    {
        self.details = details
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskCanceledInputBody: Equatable {
    public let taskToken: String?
    public let details: String?
}

extension RespondActivityTaskCanceledInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case details
        case taskToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RespondActivityTaskCanceledOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskCanceledOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RespondActivityTaskCanceledOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskCanceledOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskCanceledOutputResponse()"}
}

extension RespondActivityTaskCanceledOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskCanceledOutputResponse: Equatable {

    public init() {}
}

struct RespondActivityTaskCanceledOutputResponseBody: Equatable {
}

extension RespondActivityTaskCanceledOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RespondActivityTaskCompletedInputBodyMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCompletedInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCompletedOutputError>
}

extension RespondActivityTaskCompletedInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskCompletedInput(result: \(String(describing: result)), taskToken: \(String(describing: taskToken)))"}
}

extension RespondActivityTaskCompletedInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case result
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

public struct RespondActivityTaskCompletedInputHeadersMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCompletedInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCompletedOutputError>
}

public struct RespondActivityTaskCompletedInputQueryItemMiddleware: Middleware {
    public let id: String = "RespondActivityTaskCompletedInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskCompletedOutputError>
}

public struct RespondActivityTaskCompletedInput: Equatable {
    /// <p>The result of the activity task. It is a free form string that is implementation
    ///       specific.</p>
    public let result: String?
    /// <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p>
    ///          <important>
    ///             <p>
    ///                <code>taskToken</code> is generated by the service and should be treated as an opaque value.
    ///         If the task is passed to another process, its <code>taskToken</code> must also be passed.
    ///         This enables it to provide its progress and respond with results.</p>
    ///          </important>
    public let taskToken: String?

    public init (
        result: String? = nil,
        taskToken: String? = nil
    )
    {
        self.result = result
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskCompletedInputBody: Equatable {
    public let taskToken: String?
    public let result: String?
}

extension RespondActivityTaskCompletedInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case result
        case taskToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
    }
}

extension RespondActivityTaskCompletedOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskCompletedOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RespondActivityTaskCompletedOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskCompletedOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskCompletedOutputResponse()"}
}

extension RespondActivityTaskCompletedOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskCompletedOutputResponse: Equatable {

    public init() {}
}

struct RespondActivityTaskCompletedOutputResponseBody: Equatable {
}

extension RespondActivityTaskCompletedOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RespondActivityTaskFailedInputBodyMiddleware: Middleware {
    public let id: String = "RespondActivityTaskFailedInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskFailedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskFailedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskFailedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskFailedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskFailedOutputError>
}

extension RespondActivityTaskFailedInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskFailedInput(details: \(String(describing: details)), reason: \(String(describing: reason)), taskToken: \(String(describing: taskToken)))"}
}

extension RespondActivityTaskFailedInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details
        case reason
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

public struct RespondActivityTaskFailedInputHeadersMiddleware: Middleware {
    public let id: String = "RespondActivityTaskFailedInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskFailedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskFailedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskFailedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskFailedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskFailedOutputError>
}

public struct RespondActivityTaskFailedInputQueryItemMiddleware: Middleware {
    public let id: String = "RespondActivityTaskFailedInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondActivityTaskFailedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondActivityTaskFailedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondActivityTaskFailedInput>
    public typealias MOutput = OperationOutput<RespondActivityTaskFailedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondActivityTaskFailedOutputError>
}

public struct RespondActivityTaskFailedInput: Equatable {
    /// <p> Detailed information about the failure.</p>
    public let details: String?
    /// <p>Description of the error that may assist in diagnostics.</p>
    public let reason: String?
    /// <p>The <code>taskToken</code> of the <a>ActivityTask</a>.</p>
    ///
    ///          <important>
    ///             <p>
    ///                <code>taskToken</code> is generated by the service and should be treated as an opaque value.
    ///         If the task is passed to another process, its <code>taskToken</code> must also be passed.
    ///         This enables it to provide its progress and respond with results.</p>
    ///          </important>
    public let taskToken: String?

    public init (
        details: String? = nil,
        reason: String? = nil,
        taskToken: String? = nil
    )
    {
        self.details = details
        self.reason = reason
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskFailedInputBody: Equatable {
    public let taskToken: String?
    public let reason: String?
    public let details: String?
}

extension RespondActivityTaskFailedInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case details
        case reason
        case taskToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RespondActivityTaskFailedOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskFailedOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RespondActivityTaskFailedOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskFailedOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondActivityTaskFailedOutputResponse()"}
}

extension RespondActivityTaskFailedOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskFailedOutputResponse: Equatable {

    public init() {}
}

struct RespondActivityTaskFailedOutputResponseBody: Equatable {
}

extension RespondActivityTaskFailedOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RespondDecisionTaskCompletedInputBodyMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

extension RespondDecisionTaskCompletedInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondDecisionTaskCompletedInput(decisions: \(String(describing: decisions)), executionContext: \(String(describing: executionContext)), taskToken: \(String(describing: taskToken)))"}
}

extension RespondDecisionTaskCompletedInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisions
        case executionContext
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decisions = decisions {
            var decisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .decisions)
            for decisionlist0 in decisions {
                try decisionsContainer.encode(decisionlist0)
            }
        }
        if let executionContext = executionContext {
            try encodeContainer.encode(executionContext, forKey: .executionContext)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

public struct RespondDecisionTaskCompletedInputHeadersMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

public struct RespondDecisionTaskCompletedInputQueryItemMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

/// <p>Input data for a TaskCompleted response to a decision task.</p>
public struct RespondDecisionTaskCompletedInput: Equatable {
    /// <p>The list of decisions (possibly empty) made by the decider while processing this
    ///       decision task. See the docs for the <a>Decision</a> structure for
    ///       details.</p>
    public let decisions: [Decision]?
    /// <p>User defined context to add to workflow execution.</p>
    public let executionContext: String?
    /// <p>The <code>taskToken</code> from the <a>DecisionTask</a>.</p>
    ///          <important>
    ///             <p>
    ///                <code>taskToken</code> is generated by the service and should be treated as an opaque value.
    ///         If the task is passed to another process, its <code>taskToken</code> must also be passed.
    ///         This enables it to provide its progress and respond with results.</p>
    ///          </important>
    public let taskToken: String?

    public init (
        decisions: [Decision]? = nil,
        executionContext: String? = nil,
        taskToken: String? = nil
    )
    {
        self.decisions = decisions
        self.executionContext = executionContext
        self.taskToken = taskToken
    }
}

struct RespondDecisionTaskCompletedInputBody: Equatable {
    public let taskToken: String?
    public let decisions: [Decision]?
    public let executionContext: String?
}

extension RespondDecisionTaskCompletedInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case decisions
        case executionContext
        case taskToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let decisionsContainer = try containerValues.decodeIfPresent([Decision?].self, forKey: .decisions)
        var decisionsDecoded0:[Decision]? = nil
        if let decisionsContainer = decisionsContainer {
            decisionsDecoded0 = [Decision]()
            for structure0 in decisionsContainer {
                if let structure0 = structure0 {
                    decisionsDecoded0?.append(structure0)
                }
            }
        }
        decisions = decisionsDecoded0
        let executionContextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionContext)
        executionContext = executionContextDecoded
    }
}

extension RespondDecisionTaskCompletedOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondDecisionTaskCompletedOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RespondDecisionTaskCompletedOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondDecisionTaskCompletedOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RespondDecisionTaskCompletedOutputResponse()"}
}

extension RespondDecisionTaskCompletedOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RespondDecisionTaskCompletedOutputResponse: Equatable {

    public init() {}
}

struct RespondDecisionTaskCompletedOutputResponseBody: Equatable {
}

extension RespondDecisionTaskCompletedOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ScheduleActivityTaskDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case activityType
        case control
        case heartbeatTimeout
        case input
        case scheduleToCloseTimeout
        case scheduleToStartTimeout
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try encodeContainer.encode(heartbeatTimeout, forKey: .heartbeatTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let scheduleToCloseTimeout = scheduleToCloseTimeout {
            try encodeContainer.encode(scheduleToCloseTimeout, forKey: .scheduleToCloseTimeout)
        }
        if let scheduleToStartTimeout = scheduleToStartTimeout {
            try encodeContainer.encode(scheduleToStartTimeout, forKey: .scheduleToStartTimeout)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let scheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToCloseTimeout)
        scheduleToCloseTimeout = scheduleToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let scheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToStartTimeout)
        scheduleToStartTimeout = scheduleToStartTimeoutDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
    }
}

extension ScheduleActivityTaskDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleActivityTaskDecisionAttributes(activityId: \(String(describing: activityId)), activityType: \(String(describing: activityType)), control: \(String(describing: control)), heartbeatTimeout: \(String(describing: heartbeatTimeout)), input: \(String(describing: input)), scheduleToCloseTimeout: \(String(describing: scheduleToCloseTimeout)), scheduleToStartTimeout: \(String(describing: scheduleToStartTimeout)), startToCloseTimeout: \(String(describing: startToCloseTimeout)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)))"}
}

/// <p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///               <p>Constrain the following parameters by using a <code>Condition</code> element with the
///   appropriate keys.</p>
///               <ul>
///                   <li>
///                      <p>
///                         <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p>
///                   </li>
///                </ul>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///   <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
///           in the <i>Amazon SWF Developer Guide</i>.</p>
public struct ScheduleActivityTaskDecisionAttributes: Equatable {
    /// <p>
    ///          The <code>activityId</code> of the activity task.</p>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let activityId: String?
    /// <p>
    ///          The type of the activity task to schedule.</p>
    public let activityType: ActivityType?
    /// <p>Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.</p>
    public let control: String?
    /// <p>If set, specifies the maximum time before which a worker processing a task of this type must report progress by
    ///       calling <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed
    ///       out. If the worker subsequently attempts to record a heartbeat or returns a result, it is ignored. This
    ///       overrides the default heartbeat timeout specified when registering the activity type using
    ///       <a>RegisterActivityType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let heartbeatTimeout: String?
    /// <p>The input provided to the activity task.</p>
    public let input: String?
    /// <p>The maximum duration for this activity task.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let scheduleToCloseTimeout: String?
    /// <p>
    ///          If set, specifies the maximum duration the activity task can wait to be assigned to a worker.
    ///       This overrides the default schedule-to-start timeout specified when registering the activity type using
    ///       <a>RegisterActivityType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let scheduleToStartTimeout: String?
    /// <p>If set, specifies the maximum duration a worker may take to process this activity task. This overrides the
    ///       default start-to-close timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let startToCloseTimeout: String?
    /// <p>If set, specifies the name of the task list in which to schedule the activity task. If not specified, the
    ///       <code>defaultTaskList</code> registered with the activity type is used.</p>
    ///          <note>
    ///             <p>A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault is returned.</p>
    ///          </note>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let taskList: TaskList?
    /// <p>
    ///          If set, specifies the priority with which the activity task is to be assigned to a worker. This
    ///       overrides the defaultTaskPriority specified when registering the activity type using <a>RegisterActivityType</a>.
    ///       Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a>  in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?

    public init (
        activityId: String? = nil,
        activityType: ActivityType? = nil,
        control: String? = nil,
        heartbeatTimeout: String? = nil,
        input: String? = nil,
        scheduleToCloseTimeout: String? = nil,
        scheduleToStartTimeout: String? = nil,
        startToCloseTimeout: String? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil
    )
    {
        self.activityId = activityId
        self.activityType = activityType
        self.control = control
        self.heartbeatTimeout = heartbeatTimeout
        self.input = input
        self.scheduleToCloseTimeout = scheduleToCloseTimeout
        self.scheduleToStartTimeout = scheduleToStartTimeout
        self.startToCloseTimeout = startToCloseTimeout
        self.taskList = taskList
        self.taskPriority = taskPriority
    }
}

public enum ScheduleActivityTaskFailedCause {
    case activityCreationRateExceeded
    case activityIdAlreadyInUse
    case activityTypeDeprecated
    case activityTypeDoesNotExist
    case defaultHeartbeatTimeoutUndefined
    case defaultScheduleToCloseTimeoutUndefined
    case defaultScheduleToStartTimeoutUndefined
    case defaultStartToCloseTimeoutUndefined
    case defaultTaskListUndefined
    case openActivitiesLimitExceeded
    case operationNotPermitted
    case sdkUnknown(String)
}

extension ScheduleActivityTaskFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScheduleActivityTaskFailedCause] {
        return [
            .activityCreationRateExceeded,
            .activityIdAlreadyInUse,
            .activityTypeDeprecated,
            .activityTypeDoesNotExist,
            .defaultHeartbeatTimeoutUndefined,
            .defaultScheduleToCloseTimeoutUndefined,
            .defaultScheduleToStartTimeoutUndefined,
            .defaultStartToCloseTimeoutUndefined,
            .defaultTaskListUndefined,
            .openActivitiesLimitExceeded,
            .operationNotPermitted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activityCreationRateExceeded: return "ACTIVITY_CREATION_RATE_EXCEEDED"
        case .activityIdAlreadyInUse: return "ACTIVITY_ID_ALREADY_IN_USE"
        case .activityTypeDeprecated: return "ACTIVITY_TYPE_DEPRECATED"
        case .activityTypeDoesNotExist: return "ACTIVITY_TYPE_DOES_NOT_EXIST"
        case .defaultHeartbeatTimeoutUndefined: return "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
        case .defaultScheduleToCloseTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .defaultScheduleToStartTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
        case .defaultStartToCloseTimeoutUndefined: return "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
        case .openActivitiesLimitExceeded: return "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScheduleActivityTaskFailedCause(rawValue: rawValue) ?? ScheduleActivityTaskFailedCause.sdkUnknown(rawValue)
    }
}

extension ScheduleActivityTaskFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case activityType
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(ScheduleActivityTaskFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension ScheduleActivityTaskFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleActivityTaskFailedEventAttributes(activityId: \(String(describing: activityId)), activityType: \(String(describing: activityType)), cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)))"}
}

/// <p>Provides the details of the <code>ScheduleActivityTaskFailed</code> event.</p>
public struct ScheduleActivityTaskFailedEventAttributes: Equatable {
    /// <p>The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    public let activityId: String?
    /// <p>The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    public let activityType: ActivityType?
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: ScheduleActivityTaskFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the
    ///       scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int

    public init (
        activityId: String? = nil,
        activityType: ActivityType? = nil,
        cause: ScheduleActivityTaskFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0
    )
    {
        self.activityId = activityId
        self.activityType = activityType
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    }
}

extension ScheduleLambdaFunctionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}

extension ScheduleLambdaFunctionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleLambdaFunctionDecisionAttributes(control: \(String(describing: control)), id: \(String(describing: id)), input: \(String(describing: input)), name: \(String(describing: name)), startToCloseTimeout: \(String(describing: startToCloseTimeout)))"}
}

/// <p>Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of
///       decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>.</p>
public struct ScheduleLambdaFunctionDecisionAttributes: Equatable {
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks.
    ///       This data isn't sent to the Lambda task.</p>
    public let control: String?
    /// <p>A string that identifies the Lambda function execution in the event history.</p>
    public let id: String?
    /// <p>The optional input data to be supplied to the Lambda function.</p>
    public let input: String?
    /// <p>The name, or ARN, of the Lambda function to schedule.</p>
    public let name: String?
    /// <p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.</p>
    public let startToCloseTimeout: String?

    public init (
        control: String? = nil,
        id: String? = nil,
        input: String? = nil,
        name: String? = nil,
        startToCloseTimeout: String? = nil
    )
    {
        self.control = control
        self.id = id
        self.input = input
        self.name = name
        self.startToCloseTimeout = startToCloseTimeout
    }
}

public enum ScheduleLambdaFunctionFailedCause {
    case idAlreadyInUse
    case lambdaFunctionCreationRateExceeded
    case lambdaServiceNotAvailableInRegion
    case openLambdaFunctionsLimitExceeded
    case sdkUnknown(String)
}

extension ScheduleLambdaFunctionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScheduleLambdaFunctionFailedCause] {
        return [
            .idAlreadyInUse,
            .lambdaFunctionCreationRateExceeded,
            .lambdaServiceNotAvailableInRegion,
            .openLambdaFunctionsLimitExceeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .idAlreadyInUse: return "ID_ALREADY_IN_USE"
        case .lambdaFunctionCreationRateExceeded: return "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
        case .lambdaServiceNotAvailableInRegion: return "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
        case .openLambdaFunctionsLimitExceeded: return "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScheduleLambdaFunctionFailedCause(rawValue: rawValue) ?? ScheduleLambdaFunctionFailedCause.sdkUnknown(rawValue)
    }
}

extension ScheduleLambdaFunctionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case id
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let causeDecoded = try containerValues.decodeIfPresent(ScheduleLambdaFunctionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension ScheduleLambdaFunctionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScheduleLambdaFunctionFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), id: \(String(describing: id)), name: \(String(describing: name)))"}
}

/// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't
///       set for other event types.</p>
public struct ScheduleLambdaFunctionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision
    ///         failed because it lacked sufficient permissions. For details and example IAM policies, see
    ///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using
    ///           IAM to Manage Access to Amazon SWF Workflows</a> in the
    ///           <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: ScheduleLambdaFunctionFailedCause?
    /// <p>The ID of the <code>LambdaFunctionCompleted</code> event corresponding to the decision
    ///       that resulted in scheduling this Lambda task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The ID provided in the <code>ScheduleLambdaFunction</code> decision that failed.
    ///     </p>
    public let id: String?
    /// <p>The name of the Lambda function.</p>
    public let name: String?

    public init (
        cause: ScheduleLambdaFunctionFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0,
        id: String? = nil,
        name: String? = nil
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.id = id
        self.name = name
    }
}

extension SignalExternalWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SignalExternalWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SignalExternalWorkflowExecutionDecisionAttributes(control: \(String(describing: control)), input: \(String(describing: input)), runId: \(String(describing: runId)), signalName: \(String(describing: signalName)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct SignalExternalWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>The data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    public let control: String?
    /// <p>
    ///          The input data to be provided with the signal. The target workflow execution uses the signal
    ///       name and input data to process the signal.</p>
    public let input: String?
    /// <p>The <code>runId</code> of the workflow execution to be signaled.</p>
    public let runId: String?
    /// <p>
    ///          The name of the signal.The target workflow execution uses the signal name and input to
    ///       process the signal.</p>
    public let signalName: String?
    /// <p>
    ///          The <code>workflowId</code> of the workflow execution to be signaled.</p>
    public let workflowId: String?

    public init (
        control: String? = nil,
        input: String? = nil,
        runId: String? = nil,
        signalName: String? = nil,
        workflowId: String? = nil
    )
    {
        self.control = control
        self.input = input
        self.runId = runId
        self.signalName = signalName
        self.workflowId = workflowId
    }
}

public enum SignalExternalWorkflowExecutionFailedCause {
    case operationNotPermitted
    case signalExternalWorkflowExecutionRateExceeded
    case unknownExternalWorkflowExecution
    case sdkUnknown(String)
}

extension SignalExternalWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SignalExternalWorkflowExecutionFailedCause] {
        return [
            .operationNotPermitted,
            .signalExternalWorkflowExecutionRateExceeded,
            .unknownExternalWorkflowExecution,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .signalExternalWorkflowExecutionRateExceeded: return "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case .unknownExternalWorkflowExecution: return "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SignalExternalWorkflowExecutionFailedCause(rawValue: rawValue) ?? SignalExternalWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension SignalExternalWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SignalExternalWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SignalExternalWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SignalExternalWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), initiatedEventId: \(String(describing: initiatedEventId)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>SignalExternalWorkflowExecutionFailed</code> event.</p>
public struct SignalExternalWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: SignalExternalWorkflowExecutionFailedCause?
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks.
    ///       This data isn't sent to the workflow execution.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let initiatedEventId: Int
    /// <p>The <code>runId</code> of the external workflow execution that the signal was being delivered to.</p>
    public let runId: String?
    /// <p>The <code>workflowId</code> of the external workflow execution that the signal was being delivered to.</p>
    public let workflowId: String?

    public init (
        cause: SignalExternalWorkflowExecutionFailedCause? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        initiatedEventId: Int = 0,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.cause = cause
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.initiatedEventId = initiatedEventId
        self.runId = runId
        self.workflowId = workflowId
    }
}

extension SignalExternalWorkflowExecutionInitiatedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case decisionTaskCompletedEventId
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SignalExternalWorkflowExecutionInitiatedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SignalExternalWorkflowExecutionInitiatedEventAttributes(control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), input: \(String(describing: input)), runId: \(String(describing: runId)), signalName: \(String(describing: signalName)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.</p>
public struct SignalExternalWorkflowExecutionInitiatedEventAttributes: Equatable {
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The input provided to the signal.</p>
    public let input: String?
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    public let runId: String?
    /// <p>The name of the signal.</p>
    public let signalName: String?
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    public let workflowId: String?

    public init (
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        input: String? = nil,
        runId: String? = nil,
        signalName: String? = nil,
        workflowId: String? = nil
    )
    {
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.input = input
        self.runId = runId
        self.signalName = signalName
        self.workflowId = workflowId
    }
}

public struct SignalWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "SignalWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SignalWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<SignalWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SignalWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<SignalWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SignalWorkflowExecutionOutputError>
}

extension SignalWorkflowExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SignalWorkflowExecutionInput(domain: \(String(describing: domain)), input: \(String(describing: input)), runId: \(String(describing: runId)), signalName: \(String(describing: signalName)), workflowId: \(String(describing: workflowId)))"}
}

extension SignalWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

public struct SignalWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "SignalWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SignalWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<SignalWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SignalWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<SignalWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SignalWorkflowExecutionOutputError>
}

public struct SignalWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "SignalWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SignalWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<SignalWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SignalWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<SignalWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SignalWorkflowExecutionOutputError>
}

public struct SignalWorkflowExecutionInput: Equatable {
    /// <p>The name of the domain containing the workflow execution to signal.</p>
    public let domain: String?
    /// <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target
    ///       workflow execution's history.</p>
    public let input: String?
    /// <p>The runId of the workflow execution to signal.</p>
    public let runId: String?
    /// <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    public let signalName: String?
    /// <p>The workflowId of the workflow execution to signal.</p>
    public let workflowId: String?

    public init (
        domain: String? = nil,
        input: String? = nil,
        runId: String? = nil,
        signalName: String? = nil,
        workflowId: String? = nil
    )
    {
        self.domain = domain
        self.input = input
        self.runId = runId
        self.signalName = signalName
        self.workflowId = workflowId
    }
}

struct SignalWorkflowExecutionInputBody: Equatable {
    public let domain: String?
    public let workflowId: String?
    public let runId: String?
    public let signalName: String?
    public let input: String?
}

extension SignalWorkflowExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case input
        case runId
        case signalName
        case workflowId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
    }
}

extension SignalWorkflowExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SignalWorkflowExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SignalWorkflowExecutionOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SignalWorkflowExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SignalWorkflowExecutionOutputResponse()"}
}

extension SignalWorkflowExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SignalWorkflowExecutionOutputResponse: Equatable {

    public init() {}
}

struct SignalWorkflowExecutionOutputResponseBody: Equatable {
}

extension SignalWorkflowExecutionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension StartChildWorkflowExecutionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case control
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension StartChildWorkflowExecutionDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartChildWorkflowExecutionDecisionAttributes(childPolicy: \(String(describing: childPolicy)), control: \(String(describing: control)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowId: \(String(describing: workflowId)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>Constrain the following parameters by using a <code>Condition</code> element with the
///              appropriate keys.</p>
///               <ul>
///                   <li>
///                       <p>
///                         <code>tagList.member.N</code> – The key is "swf:tagList.N" where N is the tag number from 0 to 4,
///             inclusive.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p>
///                   </li>
///                   <li>
///                       <p>
///                         <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p>
///                   </li>
///                </ul>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct StartChildWorkflowExecutionDecisionAttributes: Equatable {
    /// <p>
    ///          If set, specifies the policy to use for the child workflow executions if the workflow execution
    ///       being started is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an
    ///       expired timeout. This policy overrides the default child policy specified when registering the workflow type using
    ///       <a>RegisterWorkflowType</a>.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let childPolicy: ChildPolicy?
    /// <p>The data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the child workflow execution.</p>
    public let control: String?
    /// <p>The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let executionStartToCloseTimeout: String?
    /// <p>The input to be provided to the workflow execution.</p>
    public let input: String?
    /// <p>The IAM role attached to the child workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can
    ///       list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or
    ///       <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>.</p>
    public let tagList: [String]?
    /// <p>The name of the task list to be used for decision tasks of the child workflow execution.</p>
    ///          <note>
    ///             <p>A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.</p>
    ///          </note>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let taskList: TaskList?
    /// <p>
    ///          A task priority that, if set, specifies the priority for a decision task of this workflow
    ///       execution. This overrides the defaultTaskPriority specified when registering the workflow type.
    ///       Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?
    /// <p>Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the
    ///       <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using
    ///       <a>RegisterWorkflowType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let taskStartToCloseTimeout: String?
    /// <p>
    ///          The <code>workflowId</code> of the workflow execution.</p>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let workflowId: String?
    /// <p>
    ///          The type of the workflow execution to be started.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        control: String? = nil,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowId: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.control = control
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}

public enum StartChildWorkflowExecutionFailedCause {
    case childCreationRateExceeded
    case defaultChildPolicyUndefined
    case defaultExecutionStartToCloseTimeoutUndefined
    case defaultTaskListUndefined
    case defaultTaskStartToCloseTimeoutUndefined
    case openChildrenLimitExceeded
    case openWorkflowsLimitExceeded
    case operationNotPermitted
    case workflowAlreadyRunning
    case workflowTypeDeprecated
    case workflowTypeDoesNotExist
    case sdkUnknown(String)
}

extension StartChildWorkflowExecutionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StartChildWorkflowExecutionFailedCause] {
        return [
            .childCreationRateExceeded,
            .defaultChildPolicyUndefined,
            .defaultExecutionStartToCloseTimeoutUndefined,
            .defaultTaskListUndefined,
            .defaultTaskStartToCloseTimeoutUndefined,
            .openChildrenLimitExceeded,
            .openWorkflowsLimitExceeded,
            .operationNotPermitted,
            .workflowAlreadyRunning,
            .workflowTypeDeprecated,
            .workflowTypeDoesNotExist,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .childCreationRateExceeded: return "CHILD_CREATION_RATE_EXCEEDED"
        case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
        case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
        case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case .openChildrenLimitExceeded: return "OPEN_CHILDREN_LIMIT_EXCEEDED"
        case .openWorkflowsLimitExceeded: return "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .workflowAlreadyRunning: return "WORKFLOW_ALREADY_RUNNING"
        case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
        case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StartChildWorkflowExecutionFailedCause(rawValue: rawValue) ?? StartChildWorkflowExecutionFailedCause.sdkUnknown(rawValue)
    }
}

extension StartChildWorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let causeDecoded = try containerValues.decodeIfPresent(StartChildWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
    }
}

extension StartChildWorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartChildWorkflowExecutionFailedEventAttributes(cause: \(String(describing: cause)), control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), initiatedEventId: \(String(describing: initiatedEventId)), workflowId: \(String(describing: workflowId)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.</p>
public struct StartChildWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>When <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision fails because it lacks sufficient permissions.
    ///               For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">
    ///                   Using IAM to Manage Access to Amazon SWF Workflows</a>  in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: StartChildWorkflowExecutionFailedCause?
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks.
    ///       This data isn't sent to the child workflow execution.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>When the <code>cause</code> is <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is the ID of the <code>StartChildWorkflowExecutionInitiated</code>
    ///           event that corresponds to the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start the workflow execution. You can use this information to diagnose
    ///           problems by tracing back the chain of events leading up to this event.</p>
    ///          <p>When the <code>cause</code> isn't <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is set to <code>0</code> because the
    ///           <code>StartChildWorkflowExecutionInitiated</code> event doesn't exist.</p>
    public let initiatedEventId: Int
    /// <p>The <code>workflowId</code> of the child workflow execution.</p>
    public let workflowId: String?
    /// <p>The workflow type provided in the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> that failed.</p>
    public let workflowType: WorkflowType?

    public init (
        cause: StartChildWorkflowExecutionFailedCause? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        initiatedEventId: Int = 0,
        workflowId: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.cause = cause
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.initiatedEventId = initiatedEventId
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}

extension StartChildWorkflowExecutionInitiatedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case control
        case decisionTaskCompletedEventId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension StartChildWorkflowExecutionInitiatedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartChildWorkflowExecutionInitiatedEventAttributes(childPolicy: \(String(describing: childPolicy)), control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowId: \(String(describing: workflowId)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>StartChildWorkflowExecutionInitiated</code> event.</p>
public struct StartChildWorkflowExecutionInitiatedEventAttributes: Equatable {
    /// <p>The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the
    ///       <a>TerminateWorkflowExecution</a> action or due to an expired timeout.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks. This data isn't sent to the activity.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to request this child workflow execution. This
    ///       information can be useful for diagnosing problems by tracing back the cause of events.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The maximum duration for the child workflow execution. If the workflow execution isn't closed within this duration, it is timed out and force-terminated.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let executionStartToCloseTimeout: String?
    /// <p>The inputs provided to the child workflow execution.</p>
    public let input: String?
    /// <p>The IAM role to attach to the child workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The list of tags to associated with the child workflow execution.</p>
    public let tagList: [String]?
    /// <p>The name of the task list used for the decision tasks of the child workflow execution.</p>
    public let taskList: TaskList?
    /// <p>
    ///          The priority assigned for the decision tasks for this workflow execution.
    ///       Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?
    /// <p>The maximum duration allowed for the decision tasks for this workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let taskStartToCloseTimeout: String?
    /// <p>The <code>workflowId</code> of the child workflow execution.</p>
    public let workflowId: String?
    /// <p>The type of the child workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowId: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}

public enum StartLambdaFunctionFailedCause {
    case assumeRoleFailed
    case sdkUnknown(String)
}

extension StartLambdaFunctionFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StartLambdaFunctionFailedCause] {
        return [
            .assumeRoleFailed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .assumeRoleFailed: return "ASSUME_ROLE_FAILED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StartLambdaFunctionFailedCause(rawValue: rawValue) ?? StartLambdaFunctionFailedCause.sdkUnknown(rawValue)
    }
}

extension StartLambdaFunctionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case message
        case scheduledEventId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decode(Int.self, forKey: .scheduledEventId)
        scheduledEventId = scheduledEventIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(StartLambdaFunctionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartLambdaFunctionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartLambdaFunctionFailedEventAttributes(cause: \(String(describing: cause)), message: \(String(describing: message)), scheduledEventId: \(String(describing: scheduledEventId)))"}
}

/// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set
///       for other event types.</p>
public struct StartLambdaFunctionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision
    ///         failed because the IAM role attached to the execution lacked sufficient permissions. For
    ///         details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">Lambda Tasks</a> in the
    ///           <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: StartLambdaFunctionFailedCause?
    /// <p>A description that can help diagnose the cause of the fault.</p>
    public let message: String?
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this
    ///       activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.</p>
    public let scheduledEventId: Int

    public init (
        cause: StartLambdaFunctionFailedCause? = nil,
        message: String? = nil,
        scheduledEventId: Int = 0
    )
    {
        self.cause = cause
        self.message = message
        self.scheduledEventId = scheduledEventId
    }
}

extension StartTimerDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case startToFireTimeout
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let startToFireTimeout = startToFireTimeout {
            try encodeContainer.encode(startToFireTimeout, forKey: .startToFireTimeout)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let startToFireTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToFireTimeout)
        startToFireTimeout = startToFireTimeoutDecoded
    }
}

extension StartTimerDecisionAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartTimerDecisionAttributes(control: \(String(describing: control)), startToFireTimeout: \(String(describing: startToFireTimeout)), timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>StartTimer</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct StartTimerDecisionAttributes: Equatable {
    /// <p>The data attached to the event that can be used by the decider in subsequent workflow tasks.</p>
    public let control: String?
    /// <p>
    ///          The duration to wait before firing the timer.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>
    public let startToFireTimeout: String?
    /// <p>
    ///          The unique ID of the timer.</p>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let timerId: String?

    public init (
        control: String? = nil,
        startToFireTimeout: String? = nil,
        timerId: String? = nil
    )
    {
        self.control = control
        self.startToFireTimeout = startToFireTimeout
        self.timerId = timerId
    }
}

public enum StartTimerFailedCause {
    case openTimersLimitExceeded
    case operationNotPermitted
    case timerCreationRateExceeded
    case timerIdAlreadyInUse
    case sdkUnknown(String)
}

extension StartTimerFailedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StartTimerFailedCause] {
        return [
            .openTimersLimitExceeded,
            .operationNotPermitted,
            .timerCreationRateExceeded,
            .timerIdAlreadyInUse,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .openTimersLimitExceeded: return "OPEN_TIMERS_LIMIT_EXCEEDED"
        case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
        case .timerCreationRateExceeded: return "TIMER_CREATION_RATE_EXCEEDED"
        case .timerIdAlreadyInUse: return "TIMER_ID_ALREADY_IN_USE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StartTimerFailedCause(rawValue: rawValue) ?? StartTimerFailedCause.sdkUnknown(rawValue)
    }
}

extension StartTimerFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(StartTimerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension StartTimerFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartTimerFailedEventAttributes(cause: \(String(describing: cause)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>StartTimerFailed</code> event.</p>
public struct StartTimerFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed
    ///   because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a>
    ///           in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: StartTimerFailedCause?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>StartTimer</code> decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The timerId provided in the <code>StartTimer</code> decision that failed.</p>
    public let timerId: String?

    public init (
        cause: StartTimerFailedCause? = nil,
        decisionTaskCompletedEventId: Int = 0,
        timerId: String? = nil
    )
    {
        self.cause = cause
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.timerId = timerId
    }
}

public struct StartWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

extension StartWorkflowExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartWorkflowExecutionInput(childPolicy: \(String(describing: childPolicy)), domain: \(String(describing: domain)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowId: \(String(describing: workflowId)), workflowType: \(String(describing: workflowType)))"}
}

extension StartWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

public struct StartWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

public struct StartWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

public struct StartWorkflowExecutionInput: Equatable {
    /// <p>If set, specifies the policy to use for the child workflow executions of this workflow
    ///       execution if it is terminated, by calling the <a>TerminateWorkflowExecution</a>
    ///       action explicitly or due to an expired timeout. This policy overrides the default child policy
    ///       specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///           execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its
    ///           history. It is up to the decider to take appropriate actions when it receives an execution
    ///           history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to
    ///           run.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>A child policy for this workflow execution must be specified either as a default for
    ///         the workflow type or through this parameter. If neither this parameter is set nor a default
    ///         child policy was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let childPolicy: ChildPolicy?
    /// <p>The name of the domain in which the workflow execution is created.</p>
    public let domain: String?
    /// <p>The total duration for this workflow execution. This overrides the
    ///       defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p>
    ///
    ///          <p>The duration is specified in seconds; an integer greater than or equal to
    ///         <code>0</code>. Exceeding this limit causes the workflow execution to time out. Unlike some
    ///       of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this
    ///       timeout; there is a one-year max limit on the time that a workflow execution can
    ///       run.</p>
    ///
    ///          <note>
    ///             <p>An execution start-to-close timeout must be specified either through this parameter
    ///         or as a default when the workflow type is registered. If neither this parameter nor a
    ///         default execution start-to-close timeout is specified, a fault is returned.</p>
    ///          </note>
    public let executionStartToCloseTimeout: String?
    /// <p>The input for the workflow execution. This is a free form string which should be
    ///       meaningful to the workflow you are starting. This <code>input</code> is made available to the
    ///       new workflow execution in the <code>WorkflowExecutionStarted</code> history event.</p>
    public let input: String?
    /// <p>The IAM role to attach to this workflow execution.</p>
    ///          <note>
    ///             <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you
    ///         don't attach an IAM role, any attempt to schedule a Lambda task fails. This results in a
    ///           <code>ScheduleLambdaFunctionFailed</code> history event. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the
    ///           <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let lambdaRole: String?
    /// <p>The list of tags to associate with the workflow execution. You can specify a maximum of
    ///       5 tags. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and
    ///       specifying a <a>TagFilter</a>.</p>
    public let tagList: [String]?
    /// <p>The task list to use for the decision tasks generated for this workflow execution. This
    ///       overrides the <code>defaultTaskList</code> specified when registering the workflow
    ///       type.</p>
    ///          <note>
    ///             <p>A task list for this workflow execution must be specified either as a default for the
    ///         workflow type or through this parameter. If neither this parameter is set nor a default task
    ///         list was specified at registration time then a fault is returned.</p>
    ///          </note>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let taskList: TaskList?
    /// <p>The task priority to use for this workflow execution. This overrides any default
    ///       priority that was assigned when the workflow type was registered. If not set, then the default
    ///       task priority for the workflow type is used. Valid values are integers that range from Java's
    ///         <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647).
    ///       Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task
    ///         Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?
    /// <p>Specifies the maximum duration of decision tasks for this workflow execution. This
    ///       parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering
    ///       the workflow type using <a>RegisterWorkflowType</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to
    ///         <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///          <note>
    ///             <p>A task start-to-close timeout for this workflow execution must be specified either as
    ///         a default for the workflow type or through this parameter. If neither this parameter is set
    ///         nor a default task start-to-close timeout was specified at registration time then a fault is
    ///         returned.</p>
    ///          </note>
    public let taskStartToCloseTimeout: String?
    /// <p>The user defined identifier associated with the workflow execution. You can use this to
    ///       associate a custom identifier with the workflow execution. You may specify the same identifier
    ///       if a workflow execution is logically a <i>restart</i> of a previous execution.
    ///       You cannot have two open workflow executions with the same <code>workflowId</code> at the same
    ///       time within the same domain.</p>
    ///
    ///          <p>The specified string must not start or end with whitespace. It must not contain a
    ///         <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any
    ///       control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must
    ///       not <i>be</i> the literal string <code>arn</code>.</p>
    public let workflowId: String?
    /// <p>The type of the workflow to start.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        domain: String? = nil,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowId: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.domain = domain
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}

struct StartWorkflowExecutionInputBody: Equatable {
    public let domain: String?
    public let workflowId: String?
    public let workflowType: WorkflowType?
    public let taskList: TaskList?
    public let taskPriority: String?
    public let input: String?
    public let executionStartToCloseTimeout: String?
    public let tagList: [String]?
    public let taskStartToCloseTimeout: String?
    public let childPolicy: ChildPolicy?
    public let lambdaRole: String?
}

extension StartWorkflowExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension StartWorkflowExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartWorkflowExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DefaultUndefinedFault" : self = .defaultUndefinedFault(try DefaultUndefinedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WorkflowExecutionAlreadyStartedFault" : self = .workflowExecutionAlreadyStartedFault(try WorkflowExecutionAlreadyStartedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartWorkflowExecutionOutputError: Equatable {
    case defaultUndefinedFault(DefaultUndefinedFault)
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case workflowExecutionAlreadyStartedFault(WorkflowExecutionAlreadyStartedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartWorkflowExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartWorkflowExecutionOutputResponse(runId: \(String(describing: runId)))"}
}

extension StartWorkflowExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartWorkflowExecutionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.runId = output.runId
        } else {
            self.runId = nil
        }
    }
}

/// <p>Specifies the <code>runId</code> of a workflow execution.</p>
public struct StartWorkflowExecutionOutputResponse: Equatable {
    /// <p>The <code>runId</code> of a workflow execution. This ID is generated by the service and
    ///       can be used to uniquely identify the workflow execution within a domain.</p>
    public let runId: String?

    public init (
        runId: String? = nil
    )
    {
        self.runId = runId
    }
}

struct StartWorkflowExecutionOutputResponseBody: Equatable {
    public let runId: String?
}

extension StartWorkflowExecutionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case runId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension TagFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tag
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tag = tag {
            try encodeContainer.encode(tag, forKey: .tag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tag)
        tag = tagDecoded
    }
}

extension TagFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagFilter(tag: \(String(describing: tag)))"}
}

/// <p>Used to filter the workflow executions in visibility APIs based on a tag.</p>
public struct TagFilter: Equatable {
    /// <p>
    ///          Specifies the tag that must be associated with the execution for it to meet the filter
    ///       criteria.</p>
    ///          <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    public let tag: String?

    public init (
        tag: String? = nil
    )
    {
        self.tag = tag
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for resourcetaglist0 in tags {
                try tagsContainer.encode(resourcetaglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    public let resourceArn: String?
    /// <p>The list of tags to add to a domain. </p>
    ///          <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    public let tags: [ResourceTag]?

    public init (
        resourceArn: String? = nil,
        tags: [ResourceTag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tags: [ResourceTag]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsFault" : self = .tooManyTagsFault(try TooManyTagsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case tooManyTagsFault(TooManyTagsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TaskList: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension TaskList: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TaskList(name: \(String(describing: name)))"}
}

/// <p>Represents a task list.</p>
public struct TaskList: Equatable {
    /// <p>The name of the task list.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

public struct TerminateWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

extension TerminateWorkflowExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateWorkflowExecutionInput(childPolicy: \(String(describing: childPolicy)), details: \(String(describing: details)), domain: \(String(describing: domain)), reason: \(String(describing: reason)), runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

extension TerminateWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case details
        case domain
        case reason
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

public struct TerminateWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

public struct TerminateWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

public struct TerminateWorkflowExecutionInput: Equatable {
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow
    ///       execution being terminated. This policy overrides the child policy specified for the workflow
    ///       execution at registration time or when starting the execution.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///           execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its
    ///           history. It is up to the decider to take appropriate actions when it receives an execution
    ///           history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to
    ///           run.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>A child policy for this workflow execution must be specified either as a default for
    ///         the workflow type or through this parameter. If neither this parameter is set nor a default
    ///         child policy was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let childPolicy: ChildPolicy?
    /// <p> Details for terminating the workflow execution.</p>
    public let details: String?
    /// <p>The domain of the workflow execution to terminate.</p>
    public let domain: String?
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    public let reason: String?
    /// <p>The runId of the workflow execution to terminate.</p>
    public let runId: String?
    /// <p>The workflowId of the workflow execution to terminate.</p>
    public let workflowId: String?

    public init (
        childPolicy: ChildPolicy? = nil,
        details: String? = nil,
        domain: String? = nil,
        reason: String? = nil,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.childPolicy = childPolicy
        self.details = details
        self.domain = domain
        self.reason = reason
        self.runId = runId
        self.workflowId = workflowId
    }
}

struct TerminateWorkflowExecutionInputBody: Equatable {
    public let domain: String?
    public let workflowId: String?
    public let runId: String?
    public let reason: String?
    public let details: String?
    public let childPolicy: ChildPolicy?
}

extension TerminateWorkflowExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case details
        case domain
        case reason
        case runId
        case workflowId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
    }
}

extension TerminateWorkflowExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateWorkflowExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TerminateWorkflowExecutionOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateWorkflowExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateWorkflowExecutionOutputResponse()"}
}

extension TerminateWorkflowExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TerminateWorkflowExecutionOutputResponse: Equatable {

    public init() {}
}

struct TerminateWorkflowExecutionOutputResponseBody: Equatable {
}

extension TerminateWorkflowExecutionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TimerCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case startedEventId
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension TimerCanceledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimerCanceledEventAttributes(decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), startedEventId: \(String(describing: startedEventId)), timerId: \(String(describing: timerId)))"}
}

/// <p>
///       Provides the details of the <code>TimerCanceled</code> event.
///    </p>
public struct TimerCanceledEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The unique ID of the timer that was canceled.</p>
    public let timerId: String?

    public init (
        decisionTaskCompletedEventId: Int = 0,
        startedEventId: Int = 0,
        timerId: String? = nil
    )
    {
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.startedEventId = startedEventId
        self.timerId = timerId
    }
}

extension TimerFiredEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case startedEventId
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
    }
}

extension TimerFiredEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimerFiredEventAttributes(startedEventId: \(String(describing: startedEventId)), timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>TimerFired</code> event.</p>
public struct TimerFiredEventAttributes: Equatable {
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started.
    ///       This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let startedEventId: Int
    /// <p>The unique ID of the timer that fired.</p>
    public let timerId: String?

    public init (
        startedEventId: Int = 0,
        timerId: String? = nil
    )
    {
        self.startedEventId = startedEventId
        self.timerId = timerId
    }
}

extension TimerStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case decisionTaskCompletedEventId
        case startToFireTimeout
        case timerId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let startToFireTimeout = startToFireTimeout {
            try encodeContainer.encode(startToFireTimeout, forKey: .startToFireTimeout)
        }
        if let timerId = timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let startToFireTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToFireTimeout)
        startToFireTimeout = startToFireTimeoutDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension TimerStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimerStartedEventAttributes(control: \(String(describing: control)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), startToFireTimeout: \(String(describing: startToFireTimeout)), timerId: \(String(describing: timerId)))"}
}

/// <p>Provides the details of the <code>TimerStarted</code> event.</p>
public struct TimerStartedEventAttributes: Equatable {
    /// <p>Data attached to the event that can be used by the decider in subsequent workflow tasks.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>StartTimer</code> decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The duration of time after which the timer fires.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>
    public let startToFireTimeout: String?
    /// <p>The unique ID of the timer that was started.</p>
    public let timerId: String?

    public init (
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        startToFireTimeout: String? = nil,
        timerId: String? = nil
    )
    {
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.startToFireTimeout = startToFireTimeout
        self.timerId = timerId
    }
}

extension TooManyTagsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyTagsFault(message: \(String(describing: message)))"}
}

extension TooManyTagsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TooManyTagsFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You've exceeded the number of tags allowed for a domain.</p>
public struct TooManyTagsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsFaultBody: Equatable {
    public let message: String?
}

extension TooManyTagsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TypeAlreadyExistsFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TypeAlreadyExistsFault(message: \(String(describing: message)))"}
}

extension TypeAlreadyExistsFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TypeAlreadyExistsFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned if the type already exists in the specified domain. You may get this fault if you are registering a type that is either already registered or deprecated, or if you undeprecate a type that is currently registered.</p>
public struct TypeAlreadyExistsFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TypeAlreadyExistsFaultBody: Equatable {
    public let message: String?
}

extension TypeAlreadyExistsFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TypeDeprecatedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TypeDeprecatedFault(message: \(String(describing: message)))"}
}

extension TypeDeprecatedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TypeDeprecatedFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned when the specified activity or workflow type was already deprecated.</p>
public struct TypeDeprecatedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TypeDeprecatedFaultBody: Equatable {
    public let message: String?
}

extension TypeDeprecatedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UndeprecateActivityTypeInputBodyMiddleware: Middleware {
    public let id: String = "UndeprecateActivityTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateActivityTypeOutputError>
}

extension UndeprecateActivityTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateActivityTypeInput(activityType: \(String(describing: activityType)), domain: \(String(describing: domain)))"}
}

extension UndeprecateActivityTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

public struct UndeprecateActivityTypeInputHeadersMiddleware: Middleware {
    public let id: String = "UndeprecateActivityTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateActivityTypeOutputError>
}

public struct UndeprecateActivityTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "UndeprecateActivityTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateActivityTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateActivityTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateActivityTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateActivityTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateActivityTypeOutputError>
}

public struct UndeprecateActivityTypeInput: Equatable {
    /// <p>The activity type to undeprecate.</p>
    public let activityType: ActivityType?
    /// <p>The name of the domain of the deprecated activity type.</p>
    public let domain: String?

    public init (
        activityType: ActivityType? = nil,
        domain: String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct UndeprecateActivityTypeInputBody: Equatable {
    public let domain: String?
    public let activityType: ActivityType?
}

extension UndeprecateActivityTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension UndeprecateActivityTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateActivityTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UndeprecateActivityTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateActivityTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateActivityTypeOutputResponse()"}
}

extension UndeprecateActivityTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateActivityTypeOutputResponse: Equatable {

    public init() {}
}

struct UndeprecateActivityTypeOutputResponseBody: Equatable {
}

extension UndeprecateActivityTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UndeprecateDomainInputBodyMiddleware: Middleware {
    public let id: String = "UndeprecateDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateDomainInput>
    public typealias MOutput = OperationOutput<UndeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateDomainOutputError>
}

extension UndeprecateDomainInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateDomainInput(name: \(String(describing: name)))"}
}

extension UndeprecateDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UndeprecateDomainInputHeadersMiddleware: Middleware {
    public let id: String = "UndeprecateDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateDomainInput>
    public typealias MOutput = OperationOutput<UndeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateDomainOutputError>
}

public struct UndeprecateDomainInputQueryItemMiddleware: Middleware {
    public let id: String = "UndeprecateDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateDomainInput>
    public typealias MOutput = OperationOutput<UndeprecateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateDomainOutputError>
}

public struct UndeprecateDomainInput: Equatable {
    /// <p>The name of the domain of the deprecated workflow type.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct UndeprecateDomainInputBody: Equatable {
    public let name: String?
}

extension UndeprecateDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UndeprecateDomainOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateDomainOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DomainAlreadyExistsFault" : self = .domainAlreadyExistsFault(try DomainAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UndeprecateDomainOutputError: Equatable {
    case domainAlreadyExistsFault(DomainAlreadyExistsFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateDomainOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateDomainOutputResponse()"}
}

extension UndeprecateDomainOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateDomainOutputResponse: Equatable {

    public init() {}
}

struct UndeprecateDomainOutputResponseBody: Equatable {
}

extension UndeprecateDomainOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UndeprecateWorkflowTypeInputBodyMiddleware: Middleware {
    public let id: String = "UndeprecateWorkflowTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateWorkflowTypeOutputError>
}

extension UndeprecateWorkflowTypeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateWorkflowTypeInput(domain: \(String(describing: domain)), workflowType: \(String(describing: workflowType)))"}
}

extension UndeprecateWorkflowTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

public struct UndeprecateWorkflowTypeInputHeadersMiddleware: Middleware {
    public let id: String = "UndeprecateWorkflowTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateWorkflowTypeOutputError>
}

public struct UndeprecateWorkflowTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "UndeprecateWorkflowTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UndeprecateWorkflowTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<UndeprecateWorkflowTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UndeprecateWorkflowTypeInput>
    public typealias MOutput = OperationOutput<UndeprecateWorkflowTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UndeprecateWorkflowTypeOutputError>
}

public struct UndeprecateWorkflowTypeInput: Equatable {
    /// <p>The name of the domain of the deprecated workflow type.</p>
    public let domain: String?
    /// <p>The name of the domain of the deprecated workflow type.</p>
    public let workflowType: WorkflowType?

    public init (
        domain: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct UndeprecateWorkflowTypeInputBody: Equatable {
    public let domain: String?
    public let workflowType: WorkflowType?
}

extension UndeprecateWorkflowTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension UndeprecateWorkflowTypeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateWorkflowTypeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UndeprecateWorkflowTypeOutputError: Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateWorkflowTypeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UndeprecateWorkflowTypeOutputResponse()"}
}

extension UndeprecateWorkflowTypeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateWorkflowTypeOutputResponse: Equatable {

    public init() {}
}

struct UndeprecateWorkflowTypeOutputResponseBody: Equatable {
}

extension UndeprecateWorkflowTypeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension UnknownResourceFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnknownResourceFault(message: \(String(describing: message)))"}
}

extension UnknownResourceFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnknownResourceFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned when the named resource cannot be found with in the scope of this operation (region or domain). This could happen if the named resource was never created or is no longer available for this operation.</p>
public struct UnknownResourceFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnknownResourceFaultBody: Equatable {
    public let message: String?
}

extension UnknownResourceFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for resourcetagkeylist0 in tagKeys {
                try tagKeysContainer.encode(resourcetagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    public let resourceArn: String?
    /// <p>The list of tags to remove from the Amazon SWF domain.</p>
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension WorkflowExecution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension WorkflowExecution: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecution(runId: \(String(describing: runId)), workflowId: \(String(describing: workflowId)))"}
}

/// <p>Represents a workflow execution.</p>
public struct WorkflowExecution: Equatable {
    /// <p>A system-generated unique identifier for the workflow execution.</p>
    public let runId: String?
    /// <p>The user defined identifier associated with the workflow execution.</p>
    public let workflowId: String?

    public init (
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.runId = runId
        self.workflowId = workflowId
    }
}

extension WorkflowExecutionAlreadyStartedFault: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionAlreadyStartedFault(message: \(String(describing: message)))"}
}

extension WorkflowExecutionAlreadyStartedFault: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: WorkflowExecutionAlreadyStartedFaultBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Returned by <a>StartWorkflowExecution</a> when an open execution with the same workflowId is already running in
///       the specified domain.</p>
public struct WorkflowExecutionAlreadyStartedFault: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A description that may help with diagnosing the cause of the fault.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct WorkflowExecutionAlreadyStartedFaultBody: Equatable {
    public let message: String?
}

extension WorkflowExecutionAlreadyStartedFaultBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum WorkflowExecutionCancelRequestedCause {
    case childPolicyApplied
    case sdkUnknown(String)
}

extension WorkflowExecutionCancelRequestedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WorkflowExecutionCancelRequestedCause] {
        return [
            .childPolicyApplied,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .childPolicyApplied: return "CHILD_POLICY_APPLIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WorkflowExecutionCancelRequestedCause(rawValue: rawValue) ?? WorkflowExecutionCancelRequestedCause.sdkUnknown(rawValue)
    }
}

extension WorkflowExecutionCancelRequestedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case externalInitiatedEventId
        case externalWorkflowExecution
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .externalInitiatedEventId)
        externalInitiatedEventId = externalInitiatedEventIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(WorkflowExecutionCancelRequestedCause.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension WorkflowExecutionCancelRequestedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionCancelRequestedEventAttributes(cause: \(String(describing: cause)), externalInitiatedEventId: \(String(describing: externalInitiatedEventId)), externalWorkflowExecution: \(String(describing: externalWorkflowExecution)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionCancelRequested</code> event.</p>
public struct WorkflowExecutionCancelRequestedEventAttributes: Equatable {
    /// <p>If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.</p>
    public let cause: WorkflowExecutionCancelRequestedCause?
    /// <p>The ID of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>RequestCancelExternalWorkflowExecution</code> decision to cancel this workflow execution.The source event
    ///       with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let externalInitiatedEventId: Int
    /// <p>The external workflow execution for which the cancellation was requested.</p>
    public let externalWorkflowExecution: WorkflowExecution?

    public init (
        cause: WorkflowExecutionCancelRequestedCause? = nil,
        externalInitiatedEventId: Int = 0,
        externalWorkflowExecution: WorkflowExecution? = nil
    )
    {
        self.cause = cause
        self.externalInitiatedEventId = externalInitiatedEventId
        self.externalWorkflowExecution = externalWorkflowExecution
    }
}

extension WorkflowExecutionCanceledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case details
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension WorkflowExecutionCanceledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionCanceledEventAttributes(decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), details: \(String(describing: details)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionCanceled</code> event.</p>
public struct WorkflowExecutionCanceledEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The details of the cancellation.</p>
    public let details: String?

    public init (
        decisionTaskCompletedEventId: Int = 0,
        details: String? = nil
    )
    {
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.details = details
    }
}

extension WorkflowExecutionCompletedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case result
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .result)
        result = resultDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension WorkflowExecutionCompletedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionCompletedEventAttributes(decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), result: \(String(describing: result)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionCompleted</code> event.</p>
public struct WorkflowExecutionCompletedEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>CompleteWorkflowExecution</code> decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The result produced by the workflow execution upon successful completion.</p>
    public let result: String?

    public init (
        decisionTaskCompletedEventId: Int = 0,
        result: String? = nil
    )
    {
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.result = result
    }
}

extension WorkflowExecutionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case executionStartToCloseTimeout
        case lambdaRole
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension WorkflowExecutionConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionConfiguration(childPolicy: \(String(describing: childPolicy)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), lambdaRole: \(String(describing: lambdaRole)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)))"}
}

/// <p>The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.</p>
public struct WorkflowExecutionConfiguration: Equatable {
    /// <p>The policy to use for the child workflow executions if this workflow execution is terminated, by calling the
    ///       <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>The total duration for this workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let executionStartToCloseTimeout: String?
    /// <p>The IAM role attached to the child workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The task list used for the decision tasks generated for this workflow execution.</p>
    public let taskList: TaskList?
    /// <p>The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let taskPriority: String?
    /// <p>The maximum duration allowed for decision tasks for this workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let taskStartToCloseTimeout: String?

    public init (
        childPolicy: ChildPolicy? = nil,
        executionStartToCloseTimeout: String? = nil,
        lambdaRole: String? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil
    )
    {
        self.childPolicy = childPolicy
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.lambdaRole = lambdaRole
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
    }
}

extension WorkflowExecutionContinuedAsNewEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case decisionTaskCompletedEventId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case newExecutionRunId
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let newExecutionRunId = newExecutionRunId {
            try encodeContainer.encode(newExecutionRunId, forKey: .newExecutionRunId)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let newExecutionRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newExecutionRunId)
        newExecutionRunId = newExecutionRunIdDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension WorkflowExecutionContinuedAsNewEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionContinuedAsNewEventAttributes(childPolicy: \(String(describing: childPolicy)), decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), newExecutionRunId: \(String(describing: newExecutionRunId)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.</p>
public struct WorkflowExecutionContinuedAsNewEventAttributes: Equatable {
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the
    ///       <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The total duration allowed for the new workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let executionStartToCloseTimeout: String?
    /// <p>The input provided to the new workflow execution.</p>
    public let input: String?
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    public let newExecutionRunId: String?
    /// <p>The list of tags associated with the new workflow execution.</p>
    public let tagList: [String]?
    /// <p>The task list to use for the decisions of the new (continued) workflow
    ///       execution.</p>
    public let taskList: TaskList?
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow
    ///       execution.</p>
    public let taskPriority: String?
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let taskStartToCloseTimeout: String?
    /// <p>The workflow type of this execution.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        decisionTaskCompletedEventId: Int = 0,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        newExecutionRunId: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.newExecutionRunId = newExecutionRunId
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowType = workflowType
    }
}

extension WorkflowExecutionFailedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisionTaskCompletedEventId
        case details
        case reason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension WorkflowExecutionFailedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionFailedEventAttributes(decisionTaskCompletedEventId: \(String(describing: decisionTaskCompletedEventId)), details: \(String(describing: details)), reason: \(String(describing: reason)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionFailed</code> event.</p>
public struct WorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>FailWorkflowExecution</code> decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The details of the failure.</p>
    public let details: String?
    /// <p>The descriptive reason provided for the failure.</p>
    public let reason: String?

    public init (
        decisionTaskCompletedEventId: Int = 0,
        details: String? = nil,
        reason: String? = nil
    )
    {
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.details = details
        self.reason = reason
    }
}

extension WorkflowExecutionFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
    }
}

extension WorkflowExecutionFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionFilter(workflowId: \(String(describing: workflowId)))"}
}

/// <p>Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.</p>
public struct WorkflowExecutionFilter: Equatable {
    /// <p>The workflowId to pass of match the criteria of this filter.</p>
    public let workflowId: String?

    public init (
        workflowId: String? = nil
    )
    {
        self.workflowId = workflowId
    }
}

extension WorkflowExecutionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cancelRequested
        case closeStatus
        case closeTimestamp
        case execution
        case executionStatus
        case parent
        case startTimestamp
        case tagList
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cancelRequested != false {
            try encodeContainer.encode(cancelRequested, forKey: .cancelRequested)
        }
        if let closeStatus = closeStatus {
            try encodeContainer.encode(closeStatus.rawValue, forKey: .closeStatus)
        }
        if let closeTimestamp = closeTimestamp {
            try encodeContainer.encode(closeTimestamp.timeIntervalSince1970, forKey: .closeTimestamp)
        }
        if let execution = execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if let executionStatus = executionStatus {
            try encodeContainer.encode(executionStatus.rawValue, forKey: .executionStatus)
        }
        if let parent = parent {
            try encodeContainer.encode(parent, forKey: .parent)
        }
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let closeTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .closeTimestamp)
        closeTimestamp = closeTimestampDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let closeStatusDecoded = try containerValues.decodeIfPresent(CloseStatus.self, forKey: .closeStatus)
        closeStatus = closeStatusDecoded
        let parentDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .parent)
        parent = parentDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let cancelRequestedDecoded = try containerValues.decode(Bool.self, forKey: .cancelRequested)
        cancelRequested = cancelRequestedDecoded
    }
}

extension WorkflowExecutionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionInfo(cancelRequested: \(String(describing: cancelRequested)), closeStatus: \(String(describing: closeStatus)), closeTimestamp: \(String(describing: closeTimestamp)), execution: \(String(describing: execution)), executionStatus: \(String(describing: executionStatus)), parent: \(String(describing: parent)), startTimestamp: \(String(describing: startTimestamp)), tagList: \(String(describing: tagList)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Contains information about a workflow execution.</p>
public struct WorkflowExecutionInfo: Equatable {
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    public let cancelRequested: Bool
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> – the execution was successfully completed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean
    ///         up before the execution is closed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATED</code> – the execution was force terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> – the execution failed to complete.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed
    ///         out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was
    ///         completed and a new execution was started to carry on the workflow.</p>
    ///             </li>
    ///          </ul>
    public let closeStatus: CloseStatus?
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    public let closeTimestamp: Date?
    /// <p>The workflow execution this information is about.</p>
    public let execution: WorkflowExecution?
    /// <p>The current status of the execution.</p>
    public let executionStatus: ExecutionStatus?
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    public let parent: WorkflowExecution?
    /// <p>The time when the execution was started.</p>
    public let startTimestamp: Date?
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    public let tagList: [String]?
    /// <p>The type of the workflow execution.</p>
    public let workflowType: WorkflowType?

    public init (
        cancelRequested: Bool = false,
        closeStatus: CloseStatus? = nil,
        closeTimestamp: Date? = nil,
        execution: WorkflowExecution? = nil,
        executionStatus: ExecutionStatus? = nil,
        parent: WorkflowExecution? = nil,
        startTimestamp: Date? = nil,
        tagList: [String]? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.cancelRequested = cancelRequested
        self.closeStatus = closeStatus
        self.closeTimestamp = closeTimestamp
        self.execution = execution
        self.executionStatus = executionStatus
        self.parent = parent
        self.startTimestamp = startTimestamp
        self.tagList = tagList
        self.workflowType = workflowType
    }
}

extension WorkflowExecutionOpenCounts: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case openActivityTasks
        case openChildWorkflowExecutions
        case openDecisionTasks
        case openLambdaFunctions
        case openTimers
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if openActivityTasks != 0 {
            try encodeContainer.encode(openActivityTasks, forKey: .openActivityTasks)
        }
        if openChildWorkflowExecutions != 0 {
            try encodeContainer.encode(openChildWorkflowExecutions, forKey: .openChildWorkflowExecutions)
        }
        if openDecisionTasks != 0 {
            try encodeContainer.encode(openDecisionTasks, forKey: .openDecisionTasks)
        }
        if openLambdaFunctions != 0 {
            try encodeContainer.encode(openLambdaFunctions, forKey: .openLambdaFunctions)
        }
        if openTimers != 0 {
            try encodeContainer.encode(openTimers, forKey: .openTimers)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openActivityTasksDecoded = try containerValues.decode(Int.self, forKey: .openActivityTasks)
        openActivityTasks = openActivityTasksDecoded
        let openDecisionTasksDecoded = try containerValues.decode(Int.self, forKey: .openDecisionTasks)
        openDecisionTasks = openDecisionTasksDecoded
        let openTimersDecoded = try containerValues.decode(Int.self, forKey: .openTimers)
        openTimers = openTimersDecoded
        let openChildWorkflowExecutionsDecoded = try containerValues.decode(Int.self, forKey: .openChildWorkflowExecutions)
        openChildWorkflowExecutions = openChildWorkflowExecutionsDecoded
        let openLambdaFunctionsDecoded = try containerValues.decode(Int.self, forKey: .openLambdaFunctions)
        openLambdaFunctions = openLambdaFunctionsDecoded
    }
}

extension WorkflowExecutionOpenCounts: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionOpenCounts(openActivityTasks: \(String(describing: openActivityTasks)), openChildWorkflowExecutions: \(String(describing: openChildWorkflowExecutions)), openDecisionTasks: \(String(describing: openDecisionTasks)), openLambdaFunctions: \(String(describing: openLambdaFunctions)), openTimers: \(String(describing: openTimers)))"}
}

/// <p>Contains the counts of open tasks, child workflow executions and timers for a workflow execution.</p>
public struct WorkflowExecutionOpenCounts: Equatable {
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    public let openActivityTasks: Int
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    public let openChildWorkflowExecutions: Int
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    public let openDecisionTasks: Int
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    public let openLambdaFunctions: Int
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    public let openTimers: Int

    public init (
        openActivityTasks: Int = 0,
        openChildWorkflowExecutions: Int = 0,
        openDecisionTasks: Int = 0,
        openLambdaFunctions: Int = 0,
        openTimers: Int = 0
    )
    {
        self.openActivityTasks = openActivityTasks
        self.openChildWorkflowExecutions = openChildWorkflowExecutions
        self.openDecisionTasks = openDecisionTasks
        self.openLambdaFunctions = openLambdaFunctions
        self.openTimers = openTimers
    }
}

extension WorkflowExecutionSignaledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalInitiatedEventId
        case externalWorkflowExecution
        case input
        case signalName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let signalName = signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signalNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .externalInitiatedEventId)
        externalInitiatedEventId = externalInitiatedEventIdDecoded
    }
}

extension WorkflowExecutionSignaledEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionSignaledEventAttributes(externalInitiatedEventId: \(String(describing: externalInitiatedEventId)), externalWorkflowExecution: \(String(describing: externalWorkflowExecution)), input: \(String(describing: input)), signalName: \(String(describing: signalName)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionSignaled</code> event.</p>
public struct WorkflowExecutionSignaledEventAttributes: Equatable {
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>SignalExternalWorkflow</code> decision to signal this workflow execution.The source event with this ID can
    ///       be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event. This field is set only if
    ///       the signal was initiated by another workflow execution.</p>
    public let externalInitiatedEventId: Int
    /// <p>The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.</p>
    public let externalWorkflowExecution: WorkflowExecution?
    /// <p>The inputs provided with the signal. The decider can use the signal name and inputs to determine how to process the signal.</p>
    public let input: String?
    /// <p>The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.</p>
    public let signalName: String?

    public init (
        externalInitiatedEventId: Int = 0,
        externalWorkflowExecution: WorkflowExecution? = nil,
        input: String? = nil,
        signalName: String? = nil
    )
    {
        self.externalInitiatedEventId = externalInitiatedEventId
        self.externalWorkflowExecution = externalWorkflowExecution
        self.input = input
        self.signalName = signalName
    }
}

extension WorkflowExecutionStartedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case continuedExecutionRunId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case parentInitiatedEventId
        case parentWorkflowExecution
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let continuedExecutionRunId = continuedExecutionRunId {
            try encodeContainer.encode(continuedExecutionRunId, forKey: .continuedExecutionRunId)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if parentInitiatedEventId != 0 {
            try encodeContainer.encode(parentInitiatedEventId, forKey: .parentInitiatedEventId)
        }
        if let parentWorkflowExecution = parentWorkflowExecution {
            try encodeContainer.encode(parentWorkflowExecution, forKey: .parentWorkflowExecution)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let tagListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagList)
        var tagListDecoded0:[String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let continuedExecutionRunIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuedExecutionRunId)
        continuedExecutionRunId = continuedExecutionRunIdDecoded
        let parentWorkflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .parentWorkflowExecution)
        parentWorkflowExecution = parentWorkflowExecutionDecoded
        let parentInitiatedEventIdDecoded = try containerValues.decode(Int.self, forKey: .parentInitiatedEventId)
        parentInitiatedEventId = parentInitiatedEventIdDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension WorkflowExecutionStartedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionStartedEventAttributes(childPolicy: \(String(describing: childPolicy)), continuedExecutionRunId: \(String(describing: continuedExecutionRunId)), executionStartToCloseTimeout: \(String(describing: executionStartToCloseTimeout)), input: \(String(describing: input)), lambdaRole: \(String(describing: lambdaRole)), parentInitiatedEventId: \(String(describing: parentInitiatedEventId)), parentWorkflowExecution: \(String(describing: parentWorkflowExecution)), tagList: \(String(describing: tagList)), taskList: \(String(describing: taskList)), taskPriority: \(String(describing: taskPriority)), taskStartToCloseTimeout: \(String(describing: taskStartToCloseTimeout)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Provides details of <code>WorkflowExecutionStarted</code> event.</p>
public struct WorkflowExecutionStartedEventAttributes: Equatable {
    /// <p>The policy to use for the child workflow executions if this workflow execution is terminated, by calling the
    ///       <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>If this workflow execution was started due to a <code>ContinueAsNewWorkflowExecution</code> decision, then it
    ///       contains the <code>runId</code> of the previous workflow execution that was closed and continued as this
    ///       execution.</p>
    public let continuedExecutionRunId: String?
    /// <p>The maximum duration for this workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let executionStartToCloseTimeout: String?
    /// <p>The input provided to the workflow execution.</p>
    public let input: String?
    /// <p>The IAM role attached to the workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The ID of the <code>StartChildWorkflowExecutionInitiated</code> event corresponding to the
    ///       <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start this workflow execution. The source event with
    ///       this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let parentInitiatedEventId: Int
    /// <p>The source workflow execution that started this workflow execution. The member isn't set if the workflow execution was not started by a workflow.</p>
    public let parentWorkflowExecution: WorkflowExecution?
    /// <p>The list of tags associated with this workflow execution. An execution can have up to 5 tags.</p>
    public let tagList: [String]?
    /// <p>The name of the task list for scheduling the decision tasks for this workflow execution.</p>
    public let taskList: TaskList?
    /// <p>The priority of the decision tasks in the workflow execution.</p>
    public let taskPriority: String?
    /// <p>The maximum duration of decision tasks for this workflow type.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let taskStartToCloseTimeout: String?
    /// <p>The workflow type of this execution.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        continuedExecutionRunId: String? = nil,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        parentInitiatedEventId: Int = 0,
        parentWorkflowExecution: WorkflowExecution? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.continuedExecutionRunId = continuedExecutionRunId
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.parentInitiatedEventId = parentInitiatedEventId
        self.parentWorkflowExecution = parentWorkflowExecution
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowType = workflowType
    }
}

public enum WorkflowExecutionTerminatedCause {
    case childPolicyApplied
    case eventLimitExceeded
    case operatorInitiated
    case sdkUnknown(String)
}

extension WorkflowExecutionTerminatedCause : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WorkflowExecutionTerminatedCause] {
        return [
            .childPolicyApplied,
            .eventLimitExceeded,
            .operatorInitiated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .childPolicyApplied: return "CHILD_POLICY_APPLIED"
        case .eventLimitExceeded: return "EVENT_LIMIT_EXCEEDED"
        case .operatorInitiated: return "OPERATOR_INITIATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WorkflowExecutionTerminatedCause(rawValue: rawValue) ?? WorkflowExecutionTerminatedCause.sdkUnknown(rawValue)
    }
}

extension WorkflowExecutionTerminatedEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cause
        case childPolicy
        case details
        case reason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let causeDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTerminatedCause.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension WorkflowExecutionTerminatedEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionTerminatedEventAttributes(cause: \(String(describing: cause)), childPolicy: \(String(describing: childPolicy)), details: \(String(describing: details)), reason: \(String(describing: reason)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionTerminated</code> event.</p>
public struct WorkflowExecutionTerminatedEventAttributes: Equatable {
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    public let cause: WorkflowExecutionTerminatedCause?
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>The details provided for the termination.</p>
    public let details: String?
    /// <p>The reason provided for the termination.</p>
    public let reason: String?

    public init (
        cause: WorkflowExecutionTerminatedCause? = nil,
        childPolicy: ChildPolicy? = nil,
        details: String? = nil,
        reason: String? = nil
    )
    {
        self.cause = cause
        self.childPolicy = childPolicy
        self.details = details
        self.reason = reason
    }
}

extension WorkflowExecutionTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case timeoutType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
    }
}

extension WorkflowExecutionTimedOutEventAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowExecutionTimedOutEventAttributes(childPolicy: \(String(describing: childPolicy)), timeoutType: \(String(describing: timeoutType)))"}
}

/// <p>Provides the details of the <code>WorkflowExecutionTimedOut</code> event.</p>
public struct WorkflowExecutionTimedOutEventAttributes: Equatable {
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>The type of timeout that caused this event.</p>
    public let timeoutType: WorkflowExecutionTimeoutType?

    public init (
        childPolicy: ChildPolicy? = nil,
        timeoutType: WorkflowExecutionTimeoutType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.timeoutType = timeoutType
    }
}

public enum WorkflowExecutionTimeoutType {
    case startToClose
    case sdkUnknown(String)
}

extension WorkflowExecutionTimeoutType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [WorkflowExecutionTimeoutType] {
        return [
            .startToClose,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .startToClose: return "START_TO_CLOSE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = WorkflowExecutionTimeoutType(rawValue: rawValue) ?? WorkflowExecutionTimeoutType.sdkUnknown(rawValue)
    }
}

extension WorkflowType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension WorkflowType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowType(name: \(String(describing: name)), version: \(String(describing: version)))"}
}

/// <p>Represents a workflow type.</p>
public struct WorkflowType: Equatable {
    /// <p>
    ///          The name of the workflow type.</p>
    ///          <note>
    ///             <p>The combination of workflow type name and version must be unique with in a domain.</p>
    ///          </note>
    public let name: String?
    /// <p>
    ///          The version of the workflow type.</p>
    ///          <note>
    ///             <p>The combination of workflow type name and version must be unique with in a domain.</p>
    ///          </note>
    public let version: String?

    public init (
        name: String? = nil,
        version: String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

extension WorkflowTypeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChildPolicy = defaultChildPolicy {
            try encodeContainer.encode(defaultChildPolicy.rawValue, forKey: .defaultChildPolicy)
        }
        if let defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout {
            try encodeContainer.encode(defaultExecutionStartToCloseTimeout, forKey: .defaultExecutionStartToCloseTimeout)
        }
        if let defaultLambdaRole = defaultLambdaRole {
            try encodeContainer.encode(defaultLambdaRole, forKey: .defaultLambdaRole)
        }
        if let defaultTaskList = defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultExecutionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultExecutionStartToCloseTimeout)
        defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultChildPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .defaultChildPolicy)
        defaultChildPolicy = defaultChildPolicyDecoded
        let defaultLambdaRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultLambdaRole)
        defaultLambdaRole = defaultLambdaRoleDecoded
    }
}

extension WorkflowTypeConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowTypeConfiguration(defaultChildPolicy: \(String(describing: defaultChildPolicy)), defaultExecutionStartToCloseTimeout: \(String(describing: defaultExecutionStartToCloseTimeout)), defaultLambdaRole: \(String(describing: defaultLambdaRole)), defaultTaskList: \(String(describing: defaultTaskList)), defaultTaskPriority: \(String(describing: defaultTaskPriority)), defaultTaskStartToCloseTimeout: \(String(describing: defaultTaskStartToCloseTimeout)))"}
}

/// <p>The configuration settings of a workflow type.</p>
public struct WorkflowTypeConfiguration: Equatable {
    /// <p>
    ///          The default policy to use for the child workflow executions when a workflow execution of this
    ///       type is terminated, by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired
    ///       timeout. This default can be overridden when starting a workflow execution using the <a>StartWorkflowExecution</a>
    ///       action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let defaultChildPolicy: ChildPolicy?
    /// <p>
    ///          The default maximum duration, specified when registering the workflow type, for executions of
    ///       this workflow type. This default can be overridden when starting a workflow execution using the
    ///       <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultExecutionStartToCloseTimeout: String?
    /// <p>The default IAM role attached to this workflow type.</p>
    ///          <note>
    ///             <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you
    ///         don't specify an IAM role when starting this workflow type, the default Lambda role is
    ///         attached to the execution. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the
    ///           <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let defaultLambdaRole: String?
    /// <p>
    ///          The default task list, specified when registering the workflow type, for decisions tasks
    ///       scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution
    ///       using the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    public let defaultTaskList: TaskList?
    /// <p>
    ///          The default task priority, specified when registering the workflow type, for all decision tasks
    ///       of this workflow type. This default can be overridden when starting a workflow execution using the
    ///       <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code> decision.</p>
    ///          <p>Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code>
    ///   (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    ///          <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    public let defaultTaskPriority: String?
    /// <p>
    ///          The default maximum duration, specified when registering the workflow type, that a decision task
    ///       for executions of this workflow type might take before returning completion or failure. If the task doesn'tdo  close
    ///       in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports
    ///       a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using
    ///       the <a>StartWorkflowExecution</a> action or the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a>.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let defaultTaskStartToCloseTimeout: String?

    public init (
        defaultChildPolicy: ChildPolicy? = nil,
        defaultExecutionStartToCloseTimeout: String? = nil,
        defaultLambdaRole: String? = nil,
        defaultTaskList: TaskList? = nil,
        defaultTaskPriority: String? = nil,
        defaultTaskStartToCloseTimeout: String? = nil
    )
    {
        self.defaultChildPolicy = defaultChildPolicy
        self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
        self.defaultLambdaRole = defaultLambdaRole
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
    }
}

extension WorkflowTypeFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
    }
}

extension WorkflowTypeFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowTypeFilter(name: \(String(describing: name)), version: \(String(describing: version)))"}
}

/// <p>Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.</p>
public struct WorkflowTypeFilter: Equatable {
    /// <p>
    ///          Name of the workflow type.</p>
    public let name: String?
    /// <p>Version of the workflow type.</p>
    public let version: String?

    public init (
        name: String? = nil,
        version: String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

extension WorkflowTypeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDate
        case deprecationDate
        case description
        case status
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let deprecationDate = deprecationDate {
            try encodeContainer.encode(deprecationDate.timeIntervalSince1970, forKey: .deprecationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let deprecationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
    }
}

extension WorkflowTypeInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WorkflowTypeInfo(creationDate: \(String(describing: creationDate)), deprecationDate: \(String(describing: deprecationDate)), description: \(String(describing: description)), status: \(String(describing: status)), workflowType: \(String(describing: workflowType)))"}
}

/// <p>Contains information about a workflow type.</p>
public struct WorkflowTypeInfo: Equatable {
    /// <p>The date when this type was registered.</p>
    public let creationDate: Date?
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    public let deprecationDate: Date?
    /// <p>The description of the type registered through <a>RegisterWorkflowType</a>.</p>
    public let description: String?
    /// <p>The current status of the workflow type.</p>
    public let status: RegistrationStatus?
    /// <p>The workflow type this information is about.</p>
    public let workflowType: WorkflowType?

    public init (
        creationDate: Date? = nil,
        deprecationDate: Date? = nil,
        description: String? = nil,
        status: RegistrationStatus? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.creationDate = creationDate
        self.deprecationDate = deprecationDate
        self.description = description
        self.status = status
        self.workflowType = workflowType
    }
}
