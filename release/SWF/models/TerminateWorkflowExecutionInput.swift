// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct TerminateWorkflowExecutionInput: Equatable {
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow
    ///       execution being terminated. This policy overrides the child policy specified for the workflow
    ///       execution at registration time or when starting the execution.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///           execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its
    ///           history. It is up to the decider to take appropriate actions when it receives an execution
    ///           history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to
    ///           run.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>A child policy for this workflow execution must be specified either as a default for
    ///         the workflow type or through this parameter. If neither this parameter is set nor a default
    ///         child policy was specified at registration time then a fault is returned.</p>
    ///          </note>
    public let childPolicy: ChildPolicy?
    /// <p> Details for terminating the workflow execution.</p>
    public let details: String?
    /// <p>The domain of the workflow execution to terminate.</p>
    public let domain: String?
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    public let reason: String?
    /// <p>The runId of the workflow execution to terminate.</p>
    public let runId: String?
    /// <p>The workflowId of the workflow execution to terminate.</p>
    public let workflowId: String?

    public init (
        childPolicy: ChildPolicy? = nil,
        details: String? = nil,
        domain: String? = nil,
        reason: String? = nil,
        runId: String? = nil,
        workflowId: String? = nil
    )
    {
        self.childPolicy = childPolicy
        self.details = details
        self.domain = domain
        self.reason = reason
        self.runId = runId
        self.workflowId = workflowId
    }
}
