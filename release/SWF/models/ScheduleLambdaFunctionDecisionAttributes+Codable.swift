// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduleLambdaFunctionDecisionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case control
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}
