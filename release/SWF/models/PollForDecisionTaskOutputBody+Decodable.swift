// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PollForDecisionTaskOutputBody: Equatable {
    public let taskToken: String?
    public let startedEventId: Int
    public let workflowExecution: WorkflowExecution?
    public let workflowType: WorkflowType?
    public let events: [HistoryEvent]?
    public let nextPageToken: String?
    public let previousStartedEventId: Int
}

extension PollForDecisionTaskOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case events
        case nextPageToken
        case previousStartedEventId
        case startedEventId
        case taskToken
        case workflowExecution
        case workflowType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let startedEventIdDecoded = try containerValues.decode(Int.self, forKey: .startedEventId)
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let eventsContainer = try containerValues.decodeIfPresent([HistoryEvent].self, forKey: .events)
        var eventsDecoded0:[HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [HistoryEvent]()
            for structure0 in eventsContainer {
                eventsDecoded0?.append(structure0)
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let previousStartedEventIdDecoded = try containerValues.decode(Int.self, forKey: .previousStartedEventId)
        previousStartedEventId = previousStartedEventIdDecoded
    }
}
