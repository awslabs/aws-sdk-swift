// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkflowExecutionTimedOutEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case timeoutType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let timeoutType = timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(WorkflowExecutionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
    }
}
