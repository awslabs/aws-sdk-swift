// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActivityTaskScheduledEventAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activityId
        case activityType
        case control
        case decisionTaskCompletedEventId
        case heartbeatTimeout
        case input
        case scheduleToCloseTimeout
        case scheduleToStartTimeout
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try encodeContainer.encode(heartbeatTimeout, forKey: .heartbeatTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let scheduleToCloseTimeout = scheduleToCloseTimeout {
            try encodeContainer.encode(scheduleToCloseTimeout, forKey: .scheduleToCloseTimeout)
        }
        if let scheduleToStartTimeout = scheduleToStartTimeout {
            try encodeContainer.encode(scheduleToStartTimeout, forKey: .scheduleToStartTimeout)
        }
        if let startToCloseTimeout = startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let controlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .control)
        control = controlDecoded
        let scheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToStartTimeout)
        scheduleToStartTimeout = scheduleToStartTimeoutDecoded
        let scheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleToCloseTimeout)
        scheduleToCloseTimeout = scheduleToCloseTimeoutDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(String.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
    }
}
