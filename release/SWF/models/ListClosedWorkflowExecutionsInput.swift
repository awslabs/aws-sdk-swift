// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListClosedWorkflowExecutionsInput: Equatable {
    /// <p>If specified, only workflow executions that match this <i>close
    ///         status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED
    ///       workflow executions are listed.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let closeStatusFilter: CloseStatusFilter?
    /// <p>If specified, the workflow executions are included in the returned results based on
    ///       whether their close times are within the range specified by this filter. Also, if this
    ///       parameter is specified, the returned results are ordered by their close times.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let closeTimeFilter: ExecutionTimeFilter?
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    public let domain: String?
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter
    ///       are returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let executionFilter: WorkflowExecutionFilter?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the
    ///       results are returned in descending order of the start or the close time of the
    ///       executions.</p>
    public let reverseOrder: Bool
    /// <p>If specified, the workflow executions are included in the returned results based on
    ///       whether their start times are within the range specified by this filter. Also, if this
    ///       parameter is specified, the returned results are ordered by their start times.</p>
    ///          <note>
    ///             <p>
    ///                <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You
    ///         must specify one of these in a request but not both.</p>
    ///          </note>
    public let startTimeFilter: ExecutionTimeFilter?
    /// <p>If specified, only executions that have the matching tag are listed.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let tagFilter: TagFilter?
    /// <p>If specified, only executions of the type specified in the filter are
    ///       returned.</p>
    ///          <note>
    ///             <p>
    ///                <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and
    ///           <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a
    ///         request.</p>
    ///          </note>
    public let typeFilter: WorkflowTypeFilter?

    public init (
        closeStatusFilter: CloseStatusFilter? = nil,
        closeTimeFilter: ExecutionTimeFilter? = nil,
        domain: String? = nil,
        executionFilter: WorkflowExecutionFilter? = nil,
        maximumPageSize: Int = 0,
        nextPageToken: String? = nil,
        reverseOrder: Bool = false,
        startTimeFilter: ExecutionTimeFilter? = nil,
        tagFilter: TagFilter? = nil,
        typeFilter: WorkflowTypeFilter? = nil
    )
    {
        self.closeStatusFilter = closeStatusFilter
        self.closeTimeFilter = closeTimeFilter
        self.domain = domain
        self.executionFilter = executionFilter
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}
