// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.</p>
public struct WorkflowExecutionContinuedAsNewEventAttributes: Equatable {
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the
    ///       <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout.</p>
    ///          <p>The supported child policies are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATE</code> – The child executions are terminated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child
    ///   execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider
    ///   to take appropriate actions when it receives an execution history with this event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ABANDON</code> – No action is taken. The child executions continue to run.</p>
    ///             </li>
    ///          </ul>
    public let childPolicy: ChildPolicy?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the
    ///       <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of
    ///   events leading up to this event.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>The total duration allowed for the new workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let executionStartToCloseTimeout: String?
    /// <p>The input provided to the new workflow execution.</p>
    public let input: String?
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    public let lambdaRole: String?
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    public let newExecutionRunId: String?
    /// <p>The list of tags associated with the new workflow execution.</p>
    public let tagList: [String]?
    /// <p>The task list to use for the decisions of the new (continued) workflow
    ///       execution.</p>
    public let taskList: TaskList?
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow
    ///       execution.</p>
    public let taskPriority: String?
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    public let taskStartToCloseTimeout: String?
    /// <p>The workflow type of this execution.</p>
    public let workflowType: WorkflowType?

    public init (
        childPolicy: ChildPolicy? = nil,
        decisionTaskCompletedEventId: Int = 0,
        executionStartToCloseTimeout: String? = nil,
        input: String? = nil,
        lambdaRole: String? = nil,
        newExecutionRunId: String? = nil,
        tagList: [String]? = nil,
        taskList: TaskList? = nil,
        taskPriority: String? = nil,
        taskStartToCloseTimeout: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.newExecutionRunId = newExecutionRunId
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowType = workflowType
    }
}
