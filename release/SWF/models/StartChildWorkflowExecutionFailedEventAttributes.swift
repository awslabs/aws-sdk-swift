// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.</p>
public struct StartChildWorkflowExecutionFailedEventAttributes: Equatable {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p>
    ///          <note>
    ///             <p>When <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision fails because it lacks sufficient permissions.
    ///               For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">
    ///                   Using IAM to Manage Access to Amazon SWF Workflows</a>  in the <i>Amazon SWF Developer Guide</i>.</p>
    ///          </note>
    public let cause: StartChildWorkflowExecutionFailedCause?
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks.
    ///       This data isn't sent to the child workflow execution.</p>
    public let control: String?
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.</p>
    public let decisionTaskCompletedEventId: Int
    /// <p>When the <code>cause</code> is <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is the ID of the <code>StartChildWorkflowExecutionInitiated</code>
    ///           event that corresponds to the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> to start the workflow execution. You can use this information to diagnose
    ///           problems by tracing back the chain of events leading up to this event.</p>
    ///          <p>When the <code>cause</code> isn't <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is set to <code>0</code> because the
    ///           <code>StartChildWorkflowExecutionInitiated</code> event doesn't exist.</p>
    public let initiatedEventId: Int
    /// <p>The <code>workflowId</code> of the child workflow execution.</p>
    public let workflowId: String?
    /// <p>The workflow type provided in the <code>StartChildWorkflowExecution</code>
    ///             <a>Decision</a> that failed.</p>
    public let workflowType: WorkflowType?

    public init (
        cause: StartChildWorkflowExecutionFailedCause? = nil,
        control: String? = nil,
        decisionTaskCompletedEventId: Int = 0,
        initiatedEventId: Int = 0,
        workflowId: String? = nil,
        workflowType: WorkflowType? = nil
    )
    {
        self.cause = cause
        self.control = control
        self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        self.initiatedEventId = initiatedEventId
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}
