// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides the details of the <code>StartTimer</code> decision.</p>
///          <p>
///             <b>Access Control</b>
///          </p>
///          <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
///          <ul>
///             <li>
///                <p>Use a <code>Resource</code> element with the domain name to limit the action to only
///   specified domains.</p>
///             </li>
///             <li>
///                <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p>
///             </li>
///             <li>
///                <p>You cannot use an IAM policy to constrain this action's parameters.</p>
///             </li>
///          </ul>
///          <p>If the caller doesn't have sufficient permissions to invoke the action, or the
///   parameter values fall outside the specified constraints, the action fails. The associated event attribute's
///           <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
///           <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
public struct StartTimerDecisionAttributes: Equatable {
    /// <p>The data attached to the event that can be used by the decider in subsequent workflow tasks.</p>
    public let control: String?
    /// <p>
    ///          The duration to wait before firing the timer.</p>
    ///          <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>
    public let startToFireTimeout: String?
    /// <p>
    ///          The unique ID of the timer.</p>
    ///          <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code>
    ///           (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not contain the literal string <code>arn</code>.</p>
    public let timerId: String?

    public init (
        control: String? = nil,
        startToFireTimeout: String? = nil,
        timerId: String? = nil
    )
    {
        self.control = control
        self.startToFireTimeout = startToFireTimeout
        self.timerId = timerId
    }
}
