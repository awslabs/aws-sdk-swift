// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListWorkflowTypesInput: Equatable {
    /// <p>The name of the domain in which the workflow types have been registered.</p>
    public let domain: String?
    /// <p>The maximum number of results that are returned per call.
    ///   Use <code>nextPageToken</code> to obtain further pages of results. </p>
    public let maximumPageSize: Int
    /// <p>If specified, lists the workflow type with this name.</p>
    public let name: String?
    /// <p>If <code>NextPageToken</code> is returned there are more results
    ///       available.  The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using
    ///       the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires
    ///       after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has
    ///       exceeded its maximum lifetime</code>". </p>
    ///
    ///          <p>The configured <code>maximumPageSize</code> determines how many results can be returned
    ///       in a single call. </p>
    public let nextPageToken: String?
    /// <p>Specifies the registration status of the workflow types to list.</p>
    public let registrationStatus: RegistrationStatus?
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the
    ///       results are returned in ascending alphabetical order of the <code>name</code> of the workflow
    ///       types.</p>
    public let reverseOrder: Bool

    public init (
        domain: String? = nil,
        maximumPageSize: Int = 0,
        name: String? = nil,
        nextPageToken: String? = nil,
        registrationStatus: RegistrationStatus? = nil,
        reverseOrder: Bool = false
    )
    {
        self.domain = domain
        self.maximumPageSize = maximumPageSize
        self.name = name
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}
