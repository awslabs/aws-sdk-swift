// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDomainInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let workflowExecutionRetentionPeriodInDays: String?
    public let tags: [ResourceTag]?
}

extension RegisterDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ResourceTag].self, forKey: .tags)
        var tagsDecoded0:[ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ResourceTag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
