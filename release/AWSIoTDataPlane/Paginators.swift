// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListRetainedMessagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListRetainedMessagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListRetainedMessagesOutputResponse`
extension IotDataPlaneClient {
    public func listRetainedMessagesPaginated(input: ListRetainedMessagesInput) -> ClientRuntime.PaginatorSequence<ListRetainedMessagesInput, ListRetainedMessagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRetainedMessagesInput, ListRetainedMessagesOutputResponse>(input: input, inputKey: \ListRetainedMessagesInput.nextToken, outputKey: \ListRetainedMessagesOutputResponse.nextToken, paginationFunction: self.listRetainedMessages(input:))
    }
}

extension ListRetainedMessagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRetainedMessagesInput {
        return ListRetainedMessagesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listRetainedMessagesPaginated`
/// to access the nested member `[IotDataPlaneClientTypes.RetainedMessageSummary]`
/// - Returns: `[IotDataPlaneClientTypes.RetainedMessageSummary]`
extension PaginatorSequence where Input == ListRetainedMessagesInput, Output == ListRetainedMessagesOutputResponse {
    public func retainedTopics() async throws -> [IotDataPlaneClientTypes.RetainedMessageSummary] {
        return try await self.asyncCompactMap { item in item.retainedTopics }
    }
}
