// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocateHostedConnectionInputBody: Equatable {
    public let connectionId: String?
    public let ownerAccount: String?
    public let bandwidth: String?
    public let connectionName: String?
    public let vlan: Int
    public let tags: [Tag]?
}

extension AllocateHostedConnectionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bandwidth
        case connectionId
        case connectionName
        case ownerAccount
        case tags
        case vlan
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let vlanDecoded = try containerValues.decode(Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
