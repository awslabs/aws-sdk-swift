// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about an interconnect.</p>
public struct Interconnect: Equatable {
    /// <p>The Direct Connect endpoint on which the physical connection terminates.</p>
    @available(*, deprecated)
    public let awsDevice: String?
    /// <p>The Direct Connect endpoint on which the physical connection terminates.</p>
    public let awsDeviceV2: String?
    /// <p>The bandwidth of the connection.</p>
    public let bandwidth: String?
    /// <p>Indicates whether the interconnect supports a secondary BGP in the same address family (IPv4/IPv6).</p>
    public let hasLogicalRedundancy: HasLogicalRedundancy?
    /// <p>The ID of the interconnect.</p>
    public let interconnectId: String?
    /// <p>The name of the interconnect.</p>
    public let interconnectName: String?
    /// <p>The state of the interconnect. The following are the possible values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>requested</code>: The initial state of an interconnect. The interconnect stays in the
    ///         requested state until the Letter of Authorization (LOA) is sent to the customer.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code>: The interconnect is approved, and is being initialized.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>available</code>: The network link is up, and the interconnect is ready for use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>down</code>: The network link is down.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleting</code>: The interconnect is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleted</code>: The interconnect is deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>unknown</code>: The state of the interconnect is not available.</p>
    ///             </li>
    ///          </ul>
    public let interconnectState: InterconnectState?
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    public let jumboFrameCapable: Bool?
    /// <p>The ID of the LAG.</p>
    public let lagId: String?
    /// <p>The time of the most recent call to <a>DescribeLoa</a> for this connection.</p>
    public let loaIssueTime: Date?
    /// <p>The location of the connection.</p>
    public let location: String?
    /// <p>The name of the service provider associated with the interconnect.</p>
    public let providerName: String?
    /// <p>The AWS Region where the connection is located.</p>
    public let region: String?
    /// <p>The tags associated with the interconnect.</p>
    public let tags: [Tag]?

    public init (
        awsDevice: String? = nil,
        awsDeviceV2: String? = nil,
        bandwidth: String? = nil,
        hasLogicalRedundancy: HasLogicalRedundancy? = nil,
        interconnectId: String? = nil,
        interconnectName: String? = nil,
        interconnectState: InterconnectState? = nil,
        jumboFrameCapable: Bool? = nil,
        lagId: String? = nil,
        loaIssueTime: Date? = nil,
        location: String? = nil,
        providerName: String? = nil,
        region: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.bandwidth = bandwidth
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.interconnectId = interconnectId
        self.interconnectName = interconnectName
        self.interconnectState = interconnectState
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}
