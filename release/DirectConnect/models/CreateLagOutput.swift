// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about a link aggregation group (LAG).</p>
public struct CreateLagOutput: Equatable {
    /// <p>Indicates whether the LAG can host other connections.</p>
    public let allowsHostedConnections: Bool
    /// <p>The AWS Direct Connect endpoint that hosts the LAG.</p>
    @available(*, deprecated)
    public let awsDevice: String?
    /// <p>The AWS Direct Connect endpoint that hosts the LAG.</p>
    public let awsDeviceV2: String?
    /// <p>The connections bundled by the LAG.</p>
    public let connections: [Connection]?
    /// <p>The individual bandwidth of the physical connections bundled by the LAG. The possible
    ///       values are 1Gbps and 10Gbps. </p>
    public let connectionsBandwidth: String?
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    ///          <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    public let encryptionMode: String?
    /// <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    public let hasLogicalRedundancy: HasLogicalRedundancy?
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    public let jumboFrameCapable: Bool?
    /// <p>The ID of the LAG.</p>
    public let lagId: String?
    /// <p>The name of the LAG.</p>
    public let lagName: String?
    /// <p>The state of the LAG. The following are the possible values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>requested</code>: The initial state of a LAG. The LAG stays in the
    ///                 requested state until the Letter of Authorization (LOA) is available.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code>: The LAG has been approved and is being initialized.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>available</code>: The network link is established and the LAG is ready for use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>down</code>: The network link is down.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleting</code>: The LAG is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleted</code>: The LAG is deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>unknown</code>: The state of the LAG is not available.</p>
    ///             </li>
    ///          </ul>
    public let lagState: LagState?
    /// <p>The location of the LAG.</p>
    public let location: String?
    /// <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    public let macSecCapable: Bool?
    /// <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    public let macSecKeys: [MacSecKey]?
    /// <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    public let minimumLinks: Int
    /// <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    public let numberOfConnections: Int
    /// <p>The ID of the AWS account that owns the LAG.</p>
    public let ownerAccount: String?
    /// <p>The name of the service provider associated with the LAG.</p>
    public let providerName: String?
    /// <p>The AWS Region where the connection is located.</p>
    public let region: String?
    /// <p>The tags associated with the LAG.</p>
    public let tags: [Tag]?

    public init (
        allowsHostedConnections: Bool = false,
        awsDevice: String? = nil,
        awsDeviceV2: String? = nil,
        connections: [Connection]? = nil,
        connectionsBandwidth: String? = nil,
        encryptionMode: String? = nil,
        hasLogicalRedundancy: HasLogicalRedundancy? = nil,
        jumboFrameCapable: Bool? = nil,
        lagId: String? = nil,
        lagName: String? = nil,
        lagState: LagState? = nil,
        location: String? = nil,
        macSecCapable: Bool? = nil,
        macSecKeys: [MacSecKey]? = nil,
        minimumLinks: Int = 0,
        numberOfConnections: Int = 0,
        ownerAccount: String? = nil,
        providerName: String? = nil,
        region: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.allowsHostedConnections = allowsHostedConnections
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.connections = connections
        self.connectionsBandwidth = connectionsBandwidth
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.lagName = lagName
        self.lagState = lagState
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.minimumLinks = minimumLinks
        self.numberOfConnections = numberOfConnections
        self.ownerAccount = ownerAccount
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}
