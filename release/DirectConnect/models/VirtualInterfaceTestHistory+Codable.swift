// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VirtualInterfaceTestHistory: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bgpPeers
        case endTime
        case ownerAccount
        case startTime
        case status
        case testDurationInMinutes
        case testId
        case virtualInterfaceId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let ownerAccount = ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testDurationInMinutes = testDurationInMinutes {
            try encodeContainer.encode(testDurationInMinutes, forKey: .testDurationInMinutes)
        }
        if let testId = testId {
            try encodeContainer.encode(testId, forKey: .testId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .testId)
        testId = testIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let bgpPeersContainer = try containerValues.decodeIfPresent([String].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[String]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [String]()
            for string0 in bgpPeersContainer {
                bgpPeersDecoded0?.append(string0)
            }
        }
        bgpPeers = bgpPeersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let testDurationInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .testDurationInMinutes)
        testDurationInMinutes = testDurationInMinutesDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
