// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectGatewayAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedPrefixesToDirectConnectGateway
        case associatedGateway
        case associationId
        case associationState
        case directConnectGatewayId
        case directConnectGatewayOwnerAccount
        case stateChangeError
        case virtualGatewayId
        case virtualGatewayOwnerAccount
        case virtualGatewayRegion
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGateway {
            var allowedPrefixesToDirectConnectGatewayContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedPrefixesToDirectConnectGateway)
            for routefilterprefixlist0 in allowedPrefixesToDirectConnectGateway {
                try allowedPrefixesToDirectConnectGatewayContainer.encode(routefilterprefixlist0)
            }
        }
        if let associatedGateway = associatedGateway {
            try encodeContainer.encode(associatedGateway, forKey: .associatedGateway)
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let associationState = associationState {
            try encodeContainer.encode(associationState.rawValue, forKey: .associationState)
        }
        if let directConnectGatewayId = directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount {
            try encodeContainer.encode(directConnectGatewayOwnerAccount, forKey: .directConnectGatewayOwnerAccount)
        }
        if let stateChangeError = stateChangeError {
            try encodeContainer.encode(stateChangeError, forKey: .stateChangeError)
        }
        if let virtualGatewayId = virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualGatewayOwnerAccount = virtualGatewayOwnerAccount {
            try encodeContainer.encode(virtualGatewayOwnerAccount, forKey: .virtualGatewayOwnerAccount)
        }
        if let virtualGatewayRegion = virtualGatewayRegion {
            try encodeContainer.encode(virtualGatewayRegion, forKey: .virtualGatewayRegion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let directConnectGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directConnectGatewayOwnerAccount)
        directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccountDecoded
        let associationStateDecoded = try containerValues.decodeIfPresent(DirectConnectGatewayAssociationState.self, forKey: .associationState)
        associationState = associationStateDecoded
        let stateChangeErrorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateChangeError)
        stateChangeError = stateChangeErrorDecoded
        let associatedGatewayDecoded = try containerValues.decodeIfPresent(AssociatedGateway.self, forKey: .associatedGateway)
        associatedGateway = associatedGatewayDecoded
        let associationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let allowedPrefixesToDirectConnectGatewayContainer = try containerValues.decodeIfPresent([RouteFilterPrefix].self, forKey: .allowedPrefixesToDirectConnectGateway)
        var allowedPrefixesToDirectConnectGatewayDecoded0:[RouteFilterPrefix]? = nil
        if let allowedPrefixesToDirectConnectGatewayContainer = allowedPrefixesToDirectConnectGatewayContainer {
            allowedPrefixesToDirectConnectGatewayDecoded0 = [RouteFilterPrefix]()
            for structure0 in allowedPrefixesToDirectConnectGatewayContainer {
                allowedPrefixesToDirectConnectGatewayDecoded0?.append(structure0)
            }
        }
        allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGatewayDecoded0
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let virtualGatewayRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualGatewayRegion)
        virtualGatewayRegion = virtualGatewayRegionDecoded
        let virtualGatewayOwnerAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualGatewayOwnerAccount)
        virtualGatewayOwnerAccount = virtualGatewayOwnerAccountDecoded
    }
}
