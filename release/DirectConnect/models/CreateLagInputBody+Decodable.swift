// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLagInputBody: Equatable {
    public let numberOfConnections: Int
    public let location: String?
    public let connectionsBandwidth: String?
    public let lagName: String?
    public let connectionId: String?
    public let tags: [Tag]?
    public let childConnectionTags: [Tag]?
    public let providerName: String?
    public let requestMACSec: Bool?
}

extension CreateLagInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case childConnectionTags
        case connectionId
        case connectionsBandwidth
        case lagName
        case location
        case numberOfConnections
        case providerName
        case requestMACSec
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfConnectionsDecoded = try containerValues.decode(Int.self, forKey: .numberOfConnections)
        numberOfConnections = numberOfConnectionsDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let childConnectionTagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .childConnectionTags)
        var childConnectionTagsDecoded0:[Tag]? = nil
        if let childConnectionTagsContainer = childConnectionTagsContainer {
            childConnectionTagsDecoded0 = [Tag]()
            for structure0 in childConnectionTagsContainer {
                childConnectionTagsDecoded0?.append(structure0)
            }
        }
        childConnectionTags = childConnectionTagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let requestMACSecDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .requestMACSec)
        requestMACSec = requestMACSecDecoded
    }
}
