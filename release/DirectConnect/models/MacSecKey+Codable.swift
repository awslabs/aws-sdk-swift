// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MacSecKey: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ckn
        case secretARN
        case startOn
        case state
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ckn = ckn {
            try encodeContainer.encode(ckn, forKey: .ckn)
        }
        if let secretARN = secretARN {
            try encodeContainer.encode(secretARN, forKey: .secretARN)
        }
        if let startOn = startOn {
            try encodeContainer.encode(startOn, forKey: .startOn)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretARN)
        secretARN = secretARNDecoded
        let cknDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ckn)
        ckn = cknDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let startOnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startOn)
        startOn = startOnDecoded
    }
}
