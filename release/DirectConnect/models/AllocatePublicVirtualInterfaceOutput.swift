// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about a virtual interface.</p>
public struct AllocatePublicVirtualInterfaceOutput: Equatable {
    /// <p>The address family for the BGP peer.</p>
    public let addressFamily: AddressFamily?
    /// <p>The IP address assigned to the Amazon interface.</p>
    public let amazonAddress: String?
    /// <p>The autonomous system number (ASN) for the Amazon side of the connection.</p>
    public let amazonSideAsn: Int?
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    ///          <p>The valid values are 1-2147483647.</p>
    public let asn: Int
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    public let authKey: String?
    /// <p>The
    ///       Direct Connect endpoint on which the virtual interface terminates.</p>
    public let awsDeviceV2: String?
    /// <p>The BGP peers configured on this virtual interface.</p>
    public let bgpPeers: [BGPPeer]?
    /// <p>The ID of the connection.</p>
    public let connectionId: String?
    /// <p>The IP address assigned to the customer interface.</p>
    public let customerAddress: String?
    /// <p>The customer router configuration.</p>
    public let customerRouterConfig: String?
    /// <p>The ID of the Direct Connect gateway.</p>
    public let directConnectGatewayId: String?
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    public let jumboFrameCapable: Bool?
    /// <p>The location of the connection.</p>
    public let location: String?
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    public let mtu: Int?
    /// <p>The ID of the AWS account that owns the virtual interface.</p>
    public let ownerAccount: String?
    /// <p>The AWS Region where the virtual interface is located.</p>
    public let region: String?
    /// <p>The routes to be advertised to the AWS network in this Region. Applies to public virtual interfaces.</p>
    public let routeFilterPrefixes: [RouteFilterPrefix]?
    /// <p>The tags associated with the virtual interface.</p>
    public let tags: [Tag]?
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    public let virtualGatewayId: String?
    /// <p>The ID of the virtual interface.</p>
    public let virtualInterfaceId: String?
    /// <p>The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).</p>
    public let virtualInterfaceName: String?
    /// <p>The state of the virtual interface. The following are the possible values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>confirming</code>: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>verifying</code>: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code>: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>available</code>: A virtual interface that is able to forward traffic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>down</code>: A virtual interface that is BGP down.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleting</code>: A virtual interface is in this state immediately after calling <a>DeleteVirtualInterface</a> until it can no longer forward traffic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleted</code>: A virtual interface that cannot forward traffic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>rejected</code>: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the <code>Confirming</code> state is deleted by the virtual interface owner, the virtual interface enters the <code>Rejected</code> state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>unknown</code>: The state of the virtual interface is not available.</p>
    ///             </li>
    ///          </ul>
    public let virtualInterfaceState: VirtualInterfaceState?
    /// <p>The type of virtual interface. The possible values are <code>private</code> and <code>public</code>.</p>
    public let virtualInterfaceType: String?
    /// <p>The ID of the VLAN.</p>
    public let vlan: Int

    public init (
        addressFamily: AddressFamily? = nil,
        amazonAddress: String? = nil,
        amazonSideAsn: Int? = nil,
        asn: Int = 0,
        authKey: String? = nil,
        awsDeviceV2: String? = nil,
        bgpPeers: [BGPPeer]? = nil,
        connectionId: String? = nil,
        customerAddress: String? = nil,
        customerRouterConfig: String? = nil,
        directConnectGatewayId: String? = nil,
        jumboFrameCapable: Bool? = nil,
        location: String? = nil,
        mtu: Int? = nil,
        ownerAccount: String? = nil,
        region: String? = nil,
        routeFilterPrefixes: [RouteFilterPrefix]? = nil,
        tags: [Tag]? = nil,
        virtualGatewayId: String? = nil,
        virtualInterfaceId: String? = nil,
        virtualInterfaceName: String? = nil,
        virtualInterfaceState: VirtualInterfaceState? = nil,
        virtualInterfaceType: String? = nil,
        vlan: Int = 0
    )
    {
        self.addressFamily = addressFamily
        self.amazonAddress = amazonAddress
        self.amazonSideAsn = amazonSideAsn
        self.asn = asn
        self.authKey = authKey
        self.awsDeviceV2 = awsDeviceV2
        self.bgpPeers = bgpPeers
        self.connectionId = connectionId
        self.customerAddress = customerAddress
        self.customerRouterConfig = customerRouterConfig
        self.directConnectGatewayId = directConnectGatewayId
        self.jumboFrameCapable = jumboFrameCapable
        self.location = location
        self.mtu = mtu
        self.ownerAccount = ownerAccount
        self.region = region
        self.routeFilterPrefixes = routeFilterPrefixes
        self.tags = tags
        self.virtualGatewayId = virtualGatewayId
        self.virtualInterfaceId = virtualInterfaceId
        self.virtualInterfaceName = virtualInterfaceName
        self.virtualInterfaceState = virtualInterfaceState
        self.virtualInterfaceType = virtualInterfaceType
        self.vlan = vlan
    }
}
