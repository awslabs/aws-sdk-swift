// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssociateConnectionWithLagOutputBody: Equatable {
    public let ownerAccount: String?
    public let connectionId: String?
    public let connectionName: String?
    public let connectionState: ConnectionState?
    public let region: String?
    public let location: String?
    public let bandwidth: String?
    public let vlan: Int
    public let partnerName: String?
    public let loaIssueTime: Date?
    public let lagId: String?
    public let awsDevice: String?
    public let jumboFrameCapable: Bool?
    public let awsDeviceV2: String?
    public let hasLogicalRedundancy: HasLogicalRedundancy?
    public let tags: [Tag]?
    public let providerName: String?
    public let macSecCapable: Bool?
    public let portEncryptionStatus: String?
    public let encryptionMode: String?
    public let macSecKeys: [MacSecKey]?
}

extension AssociateConnectionWithLagOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case awsDevice
        case awsDeviceV2
        case bandwidth
        case connectionId
        case connectionName
        case connectionState
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case macSecCapable
        case macSecKeys
        case ownerAccount
        case partnerName
        case portEncryptionStatus
        case providerName
        case region
        case tags
        case vlan
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let vlanDecoded = try containerValues.decode(Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let portEncryptionStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .portEncryptionStatus)
        portEncryptionStatus = portEncryptionStatusDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([MacSecKey].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [MacSecKey]()
            for structure0 in macSecKeysContainer {
                macSecKeysDecoded0?.append(structure0)
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}
