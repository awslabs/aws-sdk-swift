// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about an AWS Direct Connect connection.</p>
public struct CreateConnectionOutput: Equatable {
    /// <p>The Direct Connect endpoint on which the physical connection terminates.</p>
    @available(*, deprecated)
    public let awsDevice: String?
    /// <p>The Direct Connect endpoint on which the physical connection terminates.</p>
    public let awsDeviceV2: String?
    /// <p>The bandwidth of the connection.</p>
    public let bandwidth: String?
    /// <p>The ID of the connection.</p>
    public let connectionId: String?
    /// <p>The name of the connection.</p>
    public let connectionName: String?
    /// <p>The state of the connection. The following are the possible values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code>: The connection has been approved and is being initialized.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>available</code>: The network link is up and the connection is ready for use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>down</code>: The network link is down.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleting</code>: The connection is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>deleted</code>: The connection has been deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>unknown</code>: The state of the connection is not available.</p>
    ///             </li>
    ///          </ul>
    public let connectionState: ConnectionState?
    /// <p>The MAC Security (MACsec) connection encryption mode.</p>
    ///          <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    public let encryptionMode: String?
    /// <p>Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    public let hasLogicalRedundancy: HasLogicalRedundancy?
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    public let jumboFrameCapable: Bool?
    /// <p>The ID of the LAG.</p>
    public let lagId: String?
    /// <p>The time of the most recent call to <a>DescribeLoa</a> for this connection.</p>
    public let loaIssueTime: Date?
    /// <p>The location of the connection.</p>
    public let location: String?
    /// <p>Indicates whether the connection supports MAC Security (MACsec).</p>
    public let macSecCapable: Bool?
    /// <p>The MAC Security (MACsec) security keys associated with the connection.</p>
    public let macSecKeys: [MacSecKey]?
    /// <p>The ID of the AWS account that owns the connection.</p>
    public let ownerAccount: String?
    /// <p>The name of the AWS Direct Connect service provider associated with the connection.</p>
    public let partnerName: String?
    /// <p>The MAC Security (MACsec) port link status of the connection.</p>
    ///          <p>The valid values are <code>Encryption Up</code>, which means that there is an active Connection Key Name, or <code>Encryption Down</code>.</p>
    public let portEncryptionStatus: String?
    /// <p>The name of the service provider associated with the connection.</p>
    public let providerName: String?
    /// <p>The AWS Region where the connection is located.</p>
    public let region: String?
    /// <p>The tags associated with the connection.</p>
    public let tags: [Tag]?
    /// <p>The ID of the VLAN.</p>
    public let vlan: Int

    public init (
        awsDevice: String? = nil,
        awsDeviceV2: String? = nil,
        bandwidth: String? = nil,
        connectionId: String? = nil,
        connectionName: String? = nil,
        connectionState: ConnectionState? = nil,
        encryptionMode: String? = nil,
        hasLogicalRedundancy: HasLogicalRedundancy? = nil,
        jumboFrameCapable: Bool? = nil,
        lagId: String? = nil,
        loaIssueTime: Date? = nil,
        location: String? = nil,
        macSecCapable: Bool? = nil,
        macSecKeys: [MacSecKey]? = nil,
        ownerAccount: String? = nil,
        partnerName: String? = nil,
        portEncryptionStatus: String? = nil,
        providerName: String? = nil,
        region: String? = nil,
        tags: [Tag]? = nil,
        vlan: Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}
