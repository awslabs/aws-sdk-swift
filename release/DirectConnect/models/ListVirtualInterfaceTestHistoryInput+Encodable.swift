// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListVirtualInterfaceTestHistoryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bgpPeers
        case maxResults
        case nextToken
        case status
        case testId
        case virtualInterfaceId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testId = testId {
            try encodeContainer.encode(testId, forKey: .testId)
        }
        if let virtualInterfaceId = virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }
}
