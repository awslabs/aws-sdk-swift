// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInterconnectInputBody: Equatable {
    public let interconnectName: String?
    public let bandwidth: String?
    public let location: String?
    public let lagId: String?
    public let tags: [Tag]?
    public let providerName: String?
}

extension CreateInterconnectInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bandwidth
        case interconnectName
        case lagId
        case location
        case providerName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .interconnectName)
        interconnectName = interconnectNameDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}
