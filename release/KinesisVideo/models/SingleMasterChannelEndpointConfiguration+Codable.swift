// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SingleMasterChannelEndpointConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case protocols = "Protocols"
        case role = "Role"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for listofprotocols0 in protocols {
                try protocolsContainer.encode(listofprotocols0.rawValue)
            }
        }
        if let role = role {
            try encodeContainer.encode(role.rawValue, forKey: .role)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolsContainer = try containerValues.decodeIfPresent([ChannelProtocol].self, forKey: .protocols)
        var protocolsDecoded0:[ChannelProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [ChannelProtocol]()
            for string0 in protocolsContainer {
                protocolsDecoded0?.append(string0)
            }
        }
        protocols = protocolsDecoded0
        let roleDecoded = try containerValues.decodeIfPresent(ChannelRole.self, forKey: .role)
        role = roleDecoded
    }
}
