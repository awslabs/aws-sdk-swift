// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartCopyJobInputBody: Equatable {
    public let recoveryPointArn: String?
    public let sourceBackupVaultName: String?
    public let destinationBackupVaultArn: String?
    public let iamRoleArn: String?
    public let idempotencyToken: String?
    public let lifecycle: Lifecycle?
}

extension StartCopyJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationBackupVaultArn = "DestinationBackupVaultArn"
        case iamRoleArn = "IamRoleArn"
        case idempotencyToken = "IdempotencyToken"
        case lifecycle = "Lifecycle"
        case recoveryPointArn = "RecoveryPointArn"
        case sourceBackupVaultName = "SourceBackupVaultName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recoveryPointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recoveryPointArn)
        recoveryPointArn = recoveryPointArnDecoded
        let sourceBackupVaultNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBackupVaultName)
        sourceBackupVaultName = sourceBackupVaultNameDecoded
        let destinationBackupVaultArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationBackupVaultArn)
        destinationBackupVaultArn = destinationBackupVaultArnDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(Lifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}
