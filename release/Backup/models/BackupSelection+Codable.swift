// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupSelection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iamRoleArn = "IamRoleArn"
        case listOfTags = "ListOfTags"
        case resources = "Resources"
        case selectionName = "SelectionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let listOfTags = listOfTags {
            var listOfTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listOfTags)
            for listoftags0 in listOfTags {
                try listOfTagsContainer.encode(listoftags0)
            }
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcearns0 in resources {
                try resourcesContainer.encode(resourcearns0)
            }
        }
        if let selectionName = selectionName {
            try encodeContainer.encode(selectionName, forKey: .selectionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let selectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .selectionName)
        selectionName = selectionNameDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([String].self, forKey: .resources)
        var resourcesDecoded0:[String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [String]()
            for string0 in resourcesContainer {
                resourcesDecoded0?.append(string0)
            }
        }
        resources = resourcesDecoded0
        let listOfTagsContainer = try containerValues.decodeIfPresent([Condition].self, forKey: .listOfTags)
        var listOfTagsDecoded0:[Condition]? = nil
        if let listOfTagsContainer = listOfTagsContainer {
            listOfTagsDecoded0 = [Condition]()
            for structure0 in listOfTagsContainer {
                listOfTagsDecoded0?.append(structure0)
            }
        }
        listOfTags = listOfTagsDecoded0
    }
}
