// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBackupPlanOutputBody: Equatable {
    public let backupPlan: BackupPlan?
    public let backupPlanId: String?
    public let backupPlanArn: String?
    public let versionId: String?
    public let creatorRequestId: String?
    public let creationDate: Date?
    public let deletionDate: Date?
    public let lastExecutionDate: Date?
    public let advancedBackupSettings: [AdvancedBackupSetting]?
}

extension GetBackupPlanOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case advancedBackupSettings = "AdvancedBackupSettings"
        case backupPlan = "BackupPlan"
        case backupPlanArn = "BackupPlanArn"
        case backupPlanId = "BackupPlanId"
        case creationDate = "CreationDate"
        case creatorRequestId = "CreatorRequestId"
        case deletionDate = "DeletionDate"
        case lastExecutionDate = "LastExecutionDate"
        case versionId = "VersionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupPlanDecoded = try containerValues.decodeIfPresent(BackupPlan.self, forKey: .backupPlan)
        backupPlan = backupPlanDecoded
        let backupPlanIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupPlanId)
        backupPlanId = backupPlanIdDecoded
        let backupPlanArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupPlanArn)
        backupPlanArn = backupPlanArnDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let deletionDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deletionDate)
        deletionDate = deletionDateDecoded
        let lastExecutionDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastExecutionDate)
        lastExecutionDate = lastExecutionDateDecoded
        let advancedBackupSettingsContainer = try containerValues.decodeIfPresent([AdvancedBackupSetting].self, forKey: .advancedBackupSettings)
        var advancedBackupSettingsDecoded0:[AdvancedBackupSetting]? = nil
        if let advancedBackupSettingsContainer = advancedBackupSettingsContainer {
            advancedBackupSettingsDecoded0 = [AdvancedBackupSetting]()
            for structure0 in advancedBackupSettingsContainer {
                advancedBackupSettingsDecoded0?.append(structure0)
            }
        }
        advancedBackupSettings = advancedBackupSettingsDecoded0
    }
}
