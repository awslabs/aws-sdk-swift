// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AdvancedBackupSetting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupOptions = "BackupOptions"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupOptions = backupOptions {
            var backupOptionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .backupOptions)
            for (dictKey0, backupoptions0) in backupOptions {
                try backupOptionsContainer.encode(backupoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let backupOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .backupOptions)
        var backupOptionsDecoded0: [String:String]? = nil
        if let backupOptionsContainer = backupOptionsContainer {
            backupOptionsDecoded0 = [String:String]()
            for (key0, backupoptionvalue0) in backupOptionsContainer {
                backupOptionsDecoded0?[key0] = backupoptionvalue0
            }
        }
        backupOptions = backupOptionsDecoded0
    }
}
