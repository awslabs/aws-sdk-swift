// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtectedResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastBackupTime = "LastBackupTime"
        case resourceArn = "ResourceArn"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastBackupTime = lastBackupTime {
            try encodeContainer.encode(lastBackupTime.timeIntervalSince1970, forKey: .lastBackupTime)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastBackupTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastBackupTime)
        lastBackupTime = lastBackupTimeDecoded
    }
}
