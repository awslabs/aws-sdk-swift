// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartBackupJobInputBody: Equatable {
    public let backupVaultName: String?
    public let resourceArn: String?
    public let iamRoleArn: String?
    public let idempotencyToken: String?
    public let startWindowMinutes: Int?
    public let completeWindowMinutes: Int?
    public let lifecycle: Lifecycle?
    public let recoveryPointTags: [String:String]?
    public let backupOptions: [String:String]?
}

extension StartBackupJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupOptions = "BackupOptions"
        case backupVaultName = "BackupVaultName"
        case completeWindowMinutes = "CompleteWindowMinutes"
        case iamRoleArn = "IamRoleArn"
        case idempotencyToken = "IdempotencyToken"
        case lifecycle = "Lifecycle"
        case recoveryPointTags = "RecoveryPointTags"
        case resourceArn = "ResourceArn"
        case startWindowMinutes = "StartWindowMinutes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupVaultNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupVaultName)
        backupVaultName = backupVaultNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let startWindowMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startWindowMinutes)
        startWindowMinutes = startWindowMinutesDecoded
        let completeWindowMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .completeWindowMinutes)
        completeWindowMinutes = completeWindowMinutesDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(Lifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let recoveryPointTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .recoveryPointTags)
        var recoveryPointTagsDecoded0: [String:String]? = nil
        if let recoveryPointTagsContainer = recoveryPointTagsContainer {
            recoveryPointTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in recoveryPointTagsContainer {
                recoveryPointTagsDecoded0?[key0] = tagvalue0
            }
        }
        recoveryPointTags = recoveryPointTagsDecoded0
        let backupOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .backupOptions)
        var backupOptionsDecoded0: [String:String]? = nil
        if let backupOptionsContainer = backupOptionsContainer {
            backupOptionsDecoded0 = [String:String]()
            for (key0, backupoptionvalue0) in backupOptionsContainer {
                backupOptionsDecoded0?[key0] = backupoptionvalue0
            }
        }
        backupOptions = backupOptionsDecoded0
    }
}
