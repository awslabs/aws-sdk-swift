// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case backupJobId = "BackupJobId"
        case backupOptions = "BackupOptions"
        case backupSizeInBytes = "BackupSizeInBytes"
        case backupType = "BackupType"
        case backupVaultArn = "BackupVaultArn"
        case backupVaultName = "BackupVaultName"
        case bytesTransferred = "BytesTransferred"
        case completionDate = "CompletionDate"
        case createdBy = "CreatedBy"
        case creationDate = "CreationDate"
        case expectedCompletionDate = "ExpectedCompletionDate"
        case iamRoleArn = "IamRoleArn"
        case percentDone = "PercentDone"
        case recoveryPointArn = "RecoveryPointArn"
        case resourceArn = "ResourceArn"
        case resourceType = "ResourceType"
        case startBy = "StartBy"
        case state = "State"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let backupJobId = backupJobId {
            try encodeContainer.encode(backupJobId, forKey: .backupJobId)
        }
        if let backupOptions = backupOptions {
            var backupOptionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .backupOptions)
            for (dictKey0, backupoptions0) in backupOptions {
                try backupOptionsContainer.encode(backupoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let backupSizeInBytes = backupSizeInBytes {
            try encodeContainer.encode(backupSizeInBytes, forKey: .backupSizeInBytes)
        }
        if let backupType = backupType {
            try encodeContainer.encode(backupType, forKey: .backupType)
        }
        if let backupVaultArn = backupVaultArn {
            try encodeContainer.encode(backupVaultArn, forKey: .backupVaultArn)
        }
        if let backupVaultName = backupVaultName {
            try encodeContainer.encode(backupVaultName, forKey: .backupVaultName)
        }
        if let bytesTransferred = bytesTransferred {
            try encodeContainer.encode(bytesTransferred, forKey: .bytesTransferred)
        }
        if let completionDate = completionDate {
            try encodeContainer.encode(completionDate.timeIntervalSince1970, forKey: .completionDate)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let expectedCompletionDate = expectedCompletionDate {
            try encodeContainer.encode(expectedCompletionDate.timeIntervalSince1970, forKey: .expectedCompletionDate)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let percentDone = percentDone {
            try encodeContainer.encode(percentDone, forKey: .percentDone)
        }
        if let recoveryPointArn = recoveryPointArn {
            try encodeContainer.encode(recoveryPointArn, forKey: .recoveryPointArn)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let startBy = startBy {
            try encodeContainer.encode(startBy.timeIntervalSince1970, forKey: .startBy)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let backupJobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupJobId)
        backupJobId = backupJobIdDecoded
        let backupVaultNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupVaultName)
        backupVaultName = backupVaultNameDecoded
        let backupVaultArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupVaultArn)
        backupVaultArn = backupVaultArnDecoded
        let recoveryPointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recoveryPointArn)
        recoveryPointArn = recoveryPointArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BackupJobState.self, forKey: .state)
        state = stateDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let percentDoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .percentDone)
        percentDone = percentDoneDecoded
        let backupSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupSizeInBytes)
        backupSizeInBytes = backupSizeInBytesDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(RecoveryPointCreator.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let expectedCompletionDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expectedCompletionDate)
        expectedCompletionDate = expectedCompletionDateDecoded
        let startByDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startBy)
        startBy = startByDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let bytesTransferredDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .bytesTransferred)
        bytesTransferred = bytesTransferredDecoded
        let backupOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .backupOptions)
        var backupOptionsDecoded0: [String:String]? = nil
        if let backupOptionsContainer = backupOptionsContainer {
            backupOptionsDecoded0 = [String:String]()
            for (key0, backupoptionvalue0) in backupOptionsContainer {
                backupOptionsDecoded0?[key0] = backupoptionvalue0
            }
        }
        backupOptions = backupOptionsDecoded0
        let backupTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupType)
        backupType = backupTypeDecoded
    }
}
