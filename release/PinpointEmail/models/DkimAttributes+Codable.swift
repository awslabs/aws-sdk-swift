// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DkimAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case signingEnabled = "SigningEnabled"
        case status = "Status"
        case tokens = "Tokens"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokens = tokens {
            var tokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokens)
            for dnstokenlist0 in tokens {
                try tokensContainer.encode(dnstokenlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decode(Bool.self, forKey: .signingEnabled)
        signingEnabled = signingEnabledDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DkimStatus.self, forKey: .status)
        status = statusDecoded
        let tokensContainer = try containerValues.decodeIfPresent([String].self, forKey: .tokens)
        var tokensDecoded0:[String]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [String]()
            for string0 in tokensContainer {
                tokensDecoded0?.append(string0)
            }
        }
        tokens = tokensDecoded0
    }
}
