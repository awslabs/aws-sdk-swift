// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A request to send an email message.</p>
public struct SendEmailInput: Equatable {
    /// <p>The name of the configuration set that you want to use when sending the email.</p>
    public let configurationSetName: String?
    /// <p>An object that contains the body of the message. You can send either a Simple message
    ///             or a Raw message.</p>
    public let content: EmailContent?
    /// <p>An object that contains the recipients of the email message.</p>
    public let destination: Destination?
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
    ///             email that you define, so that you can publish email sending events. </p>
    public let emailTags: [MessageTag]?
    /// <p>The address that Amazon Pinpoint should send bounce and complaint notifications to.</p>
    public let feedbackForwardingEmailAddress: String?
    /// <p>The email address that you want to use as the "From" address for the email. The
    ///             address that you specify has to be verified.
    ///             </p>
    public let fromEmailAddress: String?
    /// <p>The "Reply-to" email addresses for the message. When the recipient replies to the
    ///             message, each Reply-to address receives the reply.</p>
    public let replyToAddresses: [String]?

    public init (
        configurationSetName: String? = nil,
        content: EmailContent? = nil,
        destination: Destination? = nil,
        emailTags: [MessageTag]? = nil,
        feedbackForwardingEmailAddress: String? = nil,
        fromEmailAddress: String? = nil,
        replyToAddresses: [String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.fromEmailAddress = fromEmailAddress
        self.replyToAddresses = replyToAddresses
    }
}
