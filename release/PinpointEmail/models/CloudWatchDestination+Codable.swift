// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionConfigurations)
            for cloudwatchdimensionconfigurations0 in dimensionConfigurations {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfigurations0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionConfigurationsContainer = try containerValues.decodeIfPresent([CloudWatchDimensionConfiguration].self, forKey: .dimensionConfigurations)
        var dimensionConfigurationsDecoded0:[CloudWatchDimensionConfiguration]? = nil
        if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
            dimensionConfigurationsDecoded0 = [CloudWatchDimensionConfiguration]()
            for structure0 in dimensionConfigurationsContainer {
                dimensionConfigurationsDecoded0?.append(structure0)
            }
        }
        dimensionConfigurations = dimensionConfigurationsDecoded0
    }
}
