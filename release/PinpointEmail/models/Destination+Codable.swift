// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Destination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bccAddresses = bccAddresses {
            var bccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bccAddresses)
            for emailaddresslist0 in bccAddresses {
                try bccAddressesContainer.encode(emailaddresslist0)
            }
        }
        if let ccAddresses = ccAddresses {
            var ccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ccAddresses)
            for emailaddresslist0 in ccAddresses {
                try ccAddressesContainer.encode(emailaddresslist0)
            }
        }
        if let toAddresses = toAddresses {
            var toAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .toAddresses)
            for emailaddresslist0 in toAddresses {
                try toAddressesContainer.encode(emailaddresslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .toAddresses)
        var toAddressesDecoded0:[String]? = nil
        if let toAddressesContainer = toAddressesContainer {
            toAddressesDecoded0 = [String]()
            for string0 in toAddressesContainer {
                toAddressesDecoded0?.append(string0)
            }
        }
        toAddresses = toAddressesDecoded0
        let ccAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ccAddresses)
        var ccAddressesDecoded0:[String]? = nil
        if let ccAddressesContainer = ccAddressesContainer {
            ccAddressesDecoded0 = [String]()
            for string0 in ccAddressesContainer {
                ccAddressesDecoded0?.append(string0)
            }
        }
        ccAddresses = ccAddressesDecoded0
        let bccAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .bccAddresses)
        var bccAddressesDecoded0:[String]? = nil
        if let bccAddressesContainer = bccAddressesContainer {
            bccAddressesDecoded0 = [String]()
            for string0 in bccAddressesContainer {
                bccAddressesDecoded0?.append(string0)
            }
        }
        bccAddresses = bccAddressesDecoded0
    }
}
