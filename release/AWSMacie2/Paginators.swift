// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeBucketsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeBucketsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeBucketsOutputResponse`
extension Macie2Client {
    public func describeBucketsPaginated(input: DescribeBucketsInput) -> ClientRuntime.PaginatorSequence<DescribeBucketsInput, DescribeBucketsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeBucketsInput, DescribeBucketsOutputResponse>(input: input, inputKey: \DescribeBucketsInput.nextToken, outputKey: \DescribeBucketsOutputResponse.nextToken, paginationFunction: self.describeBuckets(input:))
    }
}

extension DescribeBucketsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeBucketsInput {
        return DescribeBucketsInput(
            criteria: self.criteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeBucketsPaginated`
/// to access the nested member `[Macie2ClientTypes.BucketMetadata]`
/// - Returns: `[Macie2ClientTypes.BucketMetadata]`
extension PaginatorSequence where Input == DescribeBucketsInput, Output == DescribeBucketsOutputResponse {
    public func buckets() async throws -> [Macie2ClientTypes.BucketMetadata] {
        return try await self.asyncCompactMap { item in item.buckets }
    }
}

/// Paginate over `[GetUsageStatisticsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetUsageStatisticsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetUsageStatisticsOutputResponse`
extension Macie2Client {
    public func getUsageStatisticsPaginated(input: GetUsageStatisticsInput) -> ClientRuntime.PaginatorSequence<GetUsageStatisticsInput, GetUsageStatisticsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetUsageStatisticsInput, GetUsageStatisticsOutputResponse>(input: input, inputKey: \GetUsageStatisticsInput.nextToken, outputKey: \GetUsageStatisticsOutputResponse.nextToken, paginationFunction: self.getUsageStatistics(input:))
    }
}

extension GetUsageStatisticsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetUsageStatisticsInput {
        return GetUsageStatisticsInput(
            filterBy: self.filterBy,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            timeRange: self.timeRange
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `getUsageStatisticsPaginated`
/// to access the nested member `[Macie2ClientTypes.UsageRecord]`
/// - Returns: `[Macie2ClientTypes.UsageRecord]`
extension PaginatorSequence where Input == GetUsageStatisticsInput, Output == GetUsageStatisticsOutputResponse {
    public func records() async throws -> [Macie2ClientTypes.UsageRecord] {
        return try await self.asyncCompactMap { item in item.records }
    }
}

/// Paginate over `[ListClassificationJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListClassificationJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListClassificationJobsOutputResponse`
extension Macie2Client {
    public func listClassificationJobsPaginated(input: ListClassificationJobsInput) -> ClientRuntime.PaginatorSequence<ListClassificationJobsInput, ListClassificationJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListClassificationJobsInput, ListClassificationJobsOutputResponse>(input: input, inputKey: \ListClassificationJobsInput.nextToken, outputKey: \ListClassificationJobsOutputResponse.nextToken, paginationFunction: self.listClassificationJobs(input:))
    }
}

extension ListClassificationJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListClassificationJobsInput {
        return ListClassificationJobsInput(
            filterCriteria: self.filterCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listClassificationJobsPaginated`
/// to access the nested member `[Macie2ClientTypes.JobSummary]`
/// - Returns: `[Macie2ClientTypes.JobSummary]`
extension PaginatorSequence where Input == ListClassificationJobsInput, Output == ListClassificationJobsOutputResponse {
    public func items() async throws -> [Macie2ClientTypes.JobSummary] {
        return try await self.asyncCompactMap { item in item.items }
    }
}

/// Paginate over `[ListCustomDataIdentifiersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListCustomDataIdentifiersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListCustomDataIdentifiersOutputResponse`
extension Macie2Client {
    public func listCustomDataIdentifiersPaginated(input: ListCustomDataIdentifiersInput) -> ClientRuntime.PaginatorSequence<ListCustomDataIdentifiersInput, ListCustomDataIdentifiersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCustomDataIdentifiersInput, ListCustomDataIdentifiersOutputResponse>(input: input, inputKey: \ListCustomDataIdentifiersInput.nextToken, outputKey: \ListCustomDataIdentifiersOutputResponse.nextToken, paginationFunction: self.listCustomDataIdentifiers(input:))
    }
}

extension ListCustomDataIdentifiersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCustomDataIdentifiersInput {
        return ListCustomDataIdentifiersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listCustomDataIdentifiersPaginated`
/// to access the nested member `[Macie2ClientTypes.CustomDataIdentifierSummary]`
/// - Returns: `[Macie2ClientTypes.CustomDataIdentifierSummary]`
extension PaginatorSequence where Input == ListCustomDataIdentifiersInput, Output == ListCustomDataIdentifiersOutputResponse {
    public func items() async throws -> [Macie2ClientTypes.CustomDataIdentifierSummary] {
        return try await self.asyncCompactMap { item in item.items }
    }
}

/// Paginate over `[ListFindingsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFindingsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFindingsOutputResponse`
extension Macie2Client {
    public func listFindingsPaginated(input: ListFindingsInput) -> ClientRuntime.PaginatorSequence<ListFindingsInput, ListFindingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFindingsInput, ListFindingsOutputResponse>(input: input, inputKey: \ListFindingsInput.nextToken, outputKey: \ListFindingsOutputResponse.nextToken, paginationFunction: self.listFindings(input:))
    }
}

extension ListFindingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFindingsInput {
        return ListFindingsInput(
            findingCriteria: self.findingCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listFindingsPaginated`
/// to access the nested member `[Swift.String]`
/// - Returns: `[Swift.String]`
extension PaginatorSequence where Input == ListFindingsInput, Output == ListFindingsOutputResponse {
    public func findingIds() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.findingIds }
    }
}

/// Paginate over `[ListFindingsFiltersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFindingsFiltersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFindingsFiltersOutputResponse`
extension Macie2Client {
    public func listFindingsFiltersPaginated(input: ListFindingsFiltersInput) -> ClientRuntime.PaginatorSequence<ListFindingsFiltersInput, ListFindingsFiltersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFindingsFiltersInput, ListFindingsFiltersOutputResponse>(input: input, inputKey: \ListFindingsFiltersInput.nextToken, outputKey: \ListFindingsFiltersOutputResponse.nextToken, paginationFunction: self.listFindingsFilters(input:))
    }
}

extension ListFindingsFiltersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFindingsFiltersInput {
        return ListFindingsFiltersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listFindingsFiltersPaginated`
/// to access the nested member `[Macie2ClientTypes.FindingsFilterListItem]`
/// - Returns: `[Macie2ClientTypes.FindingsFilterListItem]`
extension PaginatorSequence where Input == ListFindingsFiltersInput, Output == ListFindingsFiltersOutputResponse {
    public func findingsFilterListItems() async throws -> [Macie2ClientTypes.FindingsFilterListItem] {
        return try await self.asyncCompactMap { item in item.findingsFilterListItems }
    }
}

/// Paginate over `[ListInvitationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListInvitationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListInvitationsOutputResponse`
extension Macie2Client {
    public func listInvitationsPaginated(input: ListInvitationsInput) -> ClientRuntime.PaginatorSequence<ListInvitationsInput, ListInvitationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInvitationsInput, ListInvitationsOutputResponse>(input: input, inputKey: \ListInvitationsInput.nextToken, outputKey: \ListInvitationsOutputResponse.nextToken, paginationFunction: self.listInvitations(input:))
    }
}

extension ListInvitationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInvitationsInput {
        return ListInvitationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listInvitationsPaginated`
/// to access the nested member `[Macie2ClientTypes.Invitation]`
/// - Returns: `[Macie2ClientTypes.Invitation]`
extension PaginatorSequence where Input == ListInvitationsInput, Output == ListInvitationsOutputResponse {
    public func invitations() async throws -> [Macie2ClientTypes.Invitation] {
        return try await self.asyncCompactMap { item in item.invitations }
    }
}

/// Paginate over `[ListMembersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListMembersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListMembersOutputResponse`
extension Macie2Client {
    public func listMembersPaginated(input: ListMembersInput) -> ClientRuntime.PaginatorSequence<ListMembersInput, ListMembersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMembersInput, ListMembersOutputResponse>(input: input, inputKey: \ListMembersInput.nextToken, outputKey: \ListMembersOutputResponse.nextToken, paginationFunction: self.listMembers(input:))
    }
}

extension ListMembersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMembersInput {
        return ListMembersInput(
            maxResults: self.maxResults,
            nextToken: token,
            onlyAssociated: self.onlyAssociated
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listMembersPaginated`
/// to access the nested member `[Macie2ClientTypes.Member]`
/// - Returns: `[Macie2ClientTypes.Member]`
extension PaginatorSequence where Input == ListMembersInput, Output == ListMembersOutputResponse {
    public func members() async throws -> [Macie2ClientTypes.Member] {
        return try await self.asyncCompactMap { item in item.members }
    }
}

/// Paginate over `[ListOrganizationAdminAccountsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListOrganizationAdminAccountsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListOrganizationAdminAccountsOutputResponse`
extension Macie2Client {
    public func listOrganizationAdminAccountsPaginated(input: ListOrganizationAdminAccountsInput) -> ClientRuntime.PaginatorSequence<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse>(input: input, inputKey: \ListOrganizationAdminAccountsInput.nextToken, outputKey: \ListOrganizationAdminAccountsOutputResponse.nextToken, paginationFunction: self.listOrganizationAdminAccounts(input:))
    }
}

extension ListOrganizationAdminAccountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListOrganizationAdminAccountsInput {
        return ListOrganizationAdminAccountsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listOrganizationAdminAccountsPaginated`
/// to access the nested member `[Macie2ClientTypes.AdminAccount]`
/// - Returns: `[Macie2ClientTypes.AdminAccount]`
extension PaginatorSequence where Input == ListOrganizationAdminAccountsInput, Output == ListOrganizationAdminAccountsOutputResponse {
    public func adminAccounts() async throws -> [Macie2ClientTypes.AdminAccount] {
        return try await self.asyncCompactMap { item in item.adminAccounts }
    }
}

/// Paginate over `[SearchResourcesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[SearchResourcesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `SearchResourcesOutputResponse`
extension Macie2Client {
    public func searchResourcesPaginated(input: SearchResourcesInput) -> ClientRuntime.PaginatorSequence<SearchResourcesInput, SearchResourcesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchResourcesInput, SearchResourcesOutputResponse>(input: input, inputKey: \SearchResourcesInput.nextToken, outputKey: \SearchResourcesOutputResponse.nextToken, paginationFunction: self.searchResources(input:))
    }
}

extension SearchResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchResourcesInput {
        return SearchResourcesInput(
            bucketCriteria: self.bucketCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `searchResourcesPaginated`
/// to access the nested member `[Macie2ClientTypes.MatchingResource]`
/// - Returns: `[Macie2ClientTypes.MatchingResource]`
extension PaginatorSequence where Input == SearchResourcesInput, Output == SearchResourcesOutputResponse {
    public func matchingResources() async throws -> [Macie2ClientTypes.MatchingResource] {
        return try await self.asyncCompactMap { item in item.matchingResources }
    }
}
