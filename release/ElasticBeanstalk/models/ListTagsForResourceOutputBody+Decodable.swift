// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTagsForResourceOutputBody: Equatable {
    public let resourceArn: String?
    public let resourceTags: [Tag]?
}

extension ListTagsForResourceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case resourceTags = "ResourceTags"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListTagsForResourceResult"))
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        if containerValues.contains(.resourceTags) {
            struct KeyVal0{struct member{}}
            let resourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTags)
            if let resourceTagsWrappedContainer = resourceTagsWrappedContainer {
                let resourceTagsContainer = try resourceTagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var resourceTagsBuffer:[Tag]? = nil
                if let resourceTagsContainer = resourceTagsContainer {
                    resourceTagsBuffer = [Tag]()
                    for structureContainer0 in resourceTagsContainer {
                        resourceTagsBuffer?.append(structureContainer0)
                    }
                }
                resourceTags = resourceTagsBuffer
            } else {
                resourceTags = []
            }
        } else {
            resourceTags = nil
        }
    }
}
