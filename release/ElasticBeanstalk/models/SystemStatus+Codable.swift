// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SystemStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cPUUtilization = "CPUUtilization"
        case loadAverage = "LoadAverage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cPUUtilization = cPUUtilization {
            try container.encode(cPUUtilization, forKey: Key("CPUUtilization"))
        }
        if let loadAverage = loadAverage {
            var loadAverageContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadAverage"))
            for (index0, loadaveragevalue0) in loadAverage.enumerated() {
                try loadAverageContainer.encode(loadaveragevalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cPUUtilizationDecoded = try containerValues.decodeIfPresent(CPUUtilization.self, forKey: .cPUUtilization)
        cPUUtilization = cPUUtilizationDecoded
        if containerValues.contains(.loadAverage) {
            struct KeyVal0{struct member{}}
            let loadAverageWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadAverage)
            if let loadAverageWrappedContainer = loadAverageWrappedContainer {
                let loadAverageContainer = try loadAverageWrappedContainer.decodeIfPresent([Double].self, forKey: .member)
                var loadAverageBuffer:[Double]? = nil
                if let loadAverageContainer = loadAverageContainer {
                    loadAverageBuffer = [Double]()
                    for doubleContainer0 in loadAverageContainer {
                        loadAverageBuffer?.append(doubleContainer0)
                    }
                }
                loadAverage = loadAverageBuffer
            } else {
                loadAverage = []
            }
        } else {
            loadAverage = nil
        }
    }
}
