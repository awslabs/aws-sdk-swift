// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ComposeEnvironmentsOutputBody: Equatable {
    public let environments: [EnvironmentDescription]?
    public let nextToken: String?
}

extension ComposeEnvironmentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case environments = "Environments"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ComposeEnvironmentsResult"))
        if containerValues.contains(.environments) {
            struct KeyVal0{struct member{}}
            let environmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environments)
            if let environmentsWrappedContainer = environmentsWrappedContainer {
                let environmentsContainer = try environmentsWrappedContainer.decodeIfPresent([EnvironmentDescription].self, forKey: .member)
                var environmentsBuffer:[EnvironmentDescription]? = nil
                if let environmentsContainer = environmentsContainer {
                    environmentsBuffer = [EnvironmentDescription]()
                    for structureContainer0 in environmentsContainer {
                        environmentsBuffer?.append(structureContainer0)
                    }
                }
                environments = environmentsBuffer
            } else {
                environments = []
            }
        } else {
            environments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
