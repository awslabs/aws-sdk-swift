// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "Duration"
        case latency = "Latency"
        case requestCount = "RequestCount"
        case statusCodes = "StatusCodes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if let latency = latency {
            try container.encode(latency, forKey: Key("Latency"))
        }
        if requestCount != 0 {
            try container.encode(requestCount, forKey: Key("RequestCount"))
        }
        if let statusCodes = statusCodes {
            try container.encode(statusCodes, forKey: Key("StatusCodes"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .duration)
        duration = durationDecoded
        let requestCountDecoded = try containerValues.decode(Int.self, forKey: .requestCount)
        requestCount = requestCountDecoded
        let statusCodesDecoded = try containerValues.decodeIfPresent(StatusCodes.self, forKey: .statusCodes)
        statusCodes = statusCodesDecoded
        let latencyDecoded = try containerValues.decodeIfPresent(Latency.self, forKey: .latency)
        latency = latencyDecoded
    }
}
