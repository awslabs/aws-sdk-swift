// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EnvironmentHealth {
    case green
    case grey
    case red
    case yellow
    case sdkUnknown(String)
}

extension EnvironmentHealth : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EnvironmentHealth] {
        return [
            .green,
            .grey,
            .red,
            .yellow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .green: return "Green"
        case .grey: return "Grey"
        case .red: return "Red"
        case .yellow: return "Yellow"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EnvironmentHealth(rawValue: rawValue) ?? EnvironmentHealth.sdkUnknown(rawValue)
    }
}
