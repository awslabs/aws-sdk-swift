// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnvironmentResourceDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroups = "AutoScalingGroups"
        case environmentName = "EnvironmentName"
        case instances = "Instances"
        case launchConfigurations = "LaunchConfigurations"
        case launchTemplates = "LaunchTemplates"
        case loadBalancers = "LoadBalancers"
        case queues = "Queues"
        case triggers = "Triggers"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AutoScalingGroups"))
            for (index0, autoscalinggroup0) in autoScalingGroups.enumerated() {
                try autoScalingGroupsContainer.encode(autoscalinggroup0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: Key("EnvironmentName"))
        }
        if let instances = instances {
            var instancesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Instances"))
            for (index0, instance0) in instances.enumerated() {
                try instancesContainer.encode(instance0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let launchConfigurations = launchConfigurations {
            var launchConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LaunchConfigurations"))
            for (index0, launchconfiguration0) in launchConfigurations.enumerated() {
                try launchConfigurationsContainer.encode(launchconfiguration0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let launchTemplates = launchTemplates {
            var launchTemplatesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LaunchTemplates"))
            for (index0, launchtemplate0) in launchTemplates.enumerated() {
                try launchTemplatesContainer.encode(launchtemplate0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadBalancers"))
            for (index0, loadbalancer0) in loadBalancers.enumerated() {
                try loadBalancersContainer.encode(loadbalancer0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let queues = queues {
            var queuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Queues"))
            for (index0, queue0) in queues.enumerated() {
                try queuesContainer.encode(queue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let triggers = triggers {
            var triggersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Triggers"))
            for (index0, trigger0) in triggers.enumerated() {
                try triggersContainer.encode(trigger0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        if containerValues.contains(.autoScalingGroups) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroups)
            if let autoScalingGroupsWrappedContainer = autoScalingGroupsWrappedContainer {
                let autoScalingGroupsContainer = try autoScalingGroupsWrappedContainer.decodeIfPresent([AutoScalingGroup].self, forKey: .member)
                var autoScalingGroupsBuffer:[AutoScalingGroup]? = nil
                if let autoScalingGroupsContainer = autoScalingGroupsContainer {
                    autoScalingGroupsBuffer = [AutoScalingGroup]()
                    for structureContainer0 in autoScalingGroupsContainer {
                        autoScalingGroupsBuffer?.append(structureContainer0)
                    }
                }
                autoScalingGroups = autoScalingGroupsBuffer
            } else {
                autoScalingGroups = []
            }
        } else {
            autoScalingGroups = nil
        }
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([Instance].self, forKey: .member)
                var instancesBuffer:[Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        if containerValues.contains(.launchConfigurations) {
            struct KeyVal0{struct member{}}
            let launchConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurations)
            if let launchConfigurationsWrappedContainer = launchConfigurationsWrappedContainer {
                let launchConfigurationsContainer = try launchConfigurationsWrappedContainer.decodeIfPresent([LaunchConfiguration].self, forKey: .member)
                var launchConfigurationsBuffer:[LaunchConfiguration]? = nil
                if let launchConfigurationsContainer = launchConfigurationsContainer {
                    launchConfigurationsBuffer = [LaunchConfiguration]()
                    for structureContainer0 in launchConfigurationsContainer {
                        launchConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                launchConfigurations = launchConfigurationsBuffer
            } else {
                launchConfigurations = []
            }
        } else {
            launchConfigurations = nil
        }
        if containerValues.contains(.launchTemplates) {
            struct KeyVal0{struct member{}}
            let launchTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchTemplates)
            if let launchTemplatesWrappedContainer = launchTemplatesWrappedContainer {
                let launchTemplatesContainer = try launchTemplatesWrappedContainer.decodeIfPresent([LaunchTemplate].self, forKey: .member)
                var launchTemplatesBuffer:[LaunchTemplate]? = nil
                if let launchTemplatesContainer = launchTemplatesContainer {
                    launchTemplatesBuffer = [LaunchTemplate]()
                    for structureContainer0 in launchTemplatesContainer {
                        launchTemplatesBuffer?.append(structureContainer0)
                    }
                }
                launchTemplates = launchTemplatesBuffer
            } else {
                launchTemplates = []
            }
        } else {
            launchTemplates = nil
        }
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([LoadBalancer].self, forKey: .member)
                var loadBalancersBuffer:[LoadBalancer]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [LoadBalancer]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
        if containerValues.contains(.triggers) {
            struct KeyVal0{struct member{}}
            let triggersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .triggers)
            if let triggersWrappedContainer = triggersWrappedContainer {
                let triggersContainer = try triggersWrappedContainer.decodeIfPresent([Trigger].self, forKey: .member)
                var triggersBuffer:[Trigger]? = nil
                if let triggersContainer = triggersContainer {
                    triggersBuffer = [Trigger]()
                    for structureContainer0 in triggersContainer {
                        triggersBuffer?.append(structureContainer0)
                    }
                }
                triggers = triggersBuffer
            } else {
                triggers = []
            }
        } else {
            triggers = nil
        }
        if containerValues.contains(.queues) {
            struct KeyVal0{struct member{}}
            let queuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .queues)
            if let queuesWrappedContainer = queuesWrappedContainer {
                let queuesContainer = try queuesWrappedContainer.decodeIfPresent([Queue].self, forKey: .member)
                var queuesBuffer:[Queue]? = nil
                if let queuesContainer = queuesContainer {
                    queuesBuffer = [Queue]()
                    for structureContainer0 in queuesContainer {
                        queuesBuffer?.append(structureContainer0)
                    }
                }
                queues = queuesBuffer
            } else {
                queues = []
            }
        } else {
            queues = nil
        }
    }
}
