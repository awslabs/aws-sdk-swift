// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateApplicationVersionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: Key("ApplicationName"))
        }
        if let autoCreateApplication = autoCreateApplication {
            try container.encode(autoCreateApplication, forKey: Key("AutoCreateApplication"))
        }
        if let buildConfiguration = buildConfiguration {
            try container.encode(buildConfiguration, forKey: Key("BuildConfiguration"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let process = process {
            try container.encode(process, forKey: Key("Process"))
        }
        if let sourceBuildInformation = sourceBuildInformation {
            try container.encode(sourceBuildInformation, forKey: Key("SourceBuildInformation"))
        }
        if let sourceBundle = sourceBundle {
            try container.encode(sourceBundle, forKey: Key("SourceBundle"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: Key("VersionLabel"))
        }
        try container.encode("CreateApplicationVersion", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
