// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ComputeType {
    case buildGeneral1Large
    case buildGeneral1Medium
    case buildGeneral1Small
    case sdkUnknown(String)
}

extension ComputeType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComputeType] {
        return [
            .buildGeneral1Large,
            .buildGeneral1Medium,
            .buildGeneral1Small,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .buildGeneral1Large: return "BUILD_GENERAL1_LARGE"
        case .buildGeneral1Medium: return "BUILD_GENERAL1_MEDIUM"
        case .buildGeneral1Small: return "BUILD_GENERAL1_SMALL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComputeType(rawValue: rawValue) ?? ComputeType.sdkUnknown(rawValue)
    }
}
