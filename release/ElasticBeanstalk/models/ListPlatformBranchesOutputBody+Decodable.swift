// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPlatformBranchesOutputBody: Equatable {
    public let platformBranchSummaryList: [PlatformBranchSummary]?
    public let nextToken: String?
}

extension ListPlatformBranchesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case platformBranchSummaryList = "PlatformBranchSummaryList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListPlatformBranchesResult"))
        if containerValues.contains(.platformBranchSummaryList) {
            struct KeyVal0{struct member{}}
            let platformBranchSummaryListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformBranchSummaryList)
            if let platformBranchSummaryListWrappedContainer = platformBranchSummaryListWrappedContainer {
                let platformBranchSummaryListContainer = try platformBranchSummaryListWrappedContainer.decodeIfPresent([PlatformBranchSummary].self, forKey: .member)
                var platformBranchSummaryListBuffer:[PlatformBranchSummary]? = nil
                if let platformBranchSummaryListContainer = platformBranchSummaryListContainer {
                    platformBranchSummaryListBuffer = [PlatformBranchSummary]()
                    for structureContainer0 in platformBranchSummaryListContainer {
                        platformBranchSummaryListBuffer?.append(structureContainer0)
                    }
                }
                platformBranchSummaryList = platformBranchSummaryListBuffer
            } else {
                platformBranchSummaryList = []
            }
        } else {
            platformBranchSummaryList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
