// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidationMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case namespace = "Namespace"
        case optionName = "OptionName"
        case severity = "Severity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: Key("Namespace"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: Key("OptionName"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: Key("Severity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ValidationSeverity.self, forKey: .severity)
        severity = severityDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let optionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .optionName)
        optionName = optionNameDecoded
    }
}
