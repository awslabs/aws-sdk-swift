// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Health details for an AWS Elastic Beanstalk environment.</p>
public struct DescribeEnvironmentHealthOutput: Equatable {
    /// <p>Application request metrics for the environment.</p>
    public let applicationMetrics: ApplicationMetrics?
    /// <p>Descriptions of the data that contributed to the environment's current health
    ///       status.</p>
    public let causes: [String]?
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the
    ///       environment.</p>
    public let color: String?
    /// <p>The environment's name.</p>
    public let environmentName: String?
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the
    ///       environment. For example, <code>Ok</code>.</p>
    public let healthStatus: String?
    /// <p>Summary health information for the instances in the environment.</p>
    public let instancesHealth: InstanceHealthSummary?
    /// <p>The date and time that the health information was retrieved.</p>
    public let refreshedAt: Date?
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>,
    ///         <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    public let status: EnvironmentHealth?

    public init (
        applicationMetrics: ApplicationMetrics? = nil,
        causes: [String]? = nil,
        color: String? = nil,
        environmentName: String? = nil,
        healthStatus: String? = nil,
        instancesHealth: InstanceHealthSummary? = nil,
        refreshedAt: Date? = nil,
        status: EnvironmentHealth? = nil
    )
    {
        self.applicationMetrics = applicationMetrics
        self.causes = causes
        self.color = color
        self.environmentName = environmentName
        self.healthStatus = healthStatus
        self.instancesHealth = instancesHealth
        self.refreshedAt = refreshedAt
        self.status = status
    }
}
