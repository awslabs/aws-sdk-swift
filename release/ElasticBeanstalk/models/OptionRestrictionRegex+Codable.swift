// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OptionRestrictionRegex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case label = "Label"
        case pattern = "Pattern"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let label = label {
            try container.encode(label, forKey: Key("Label"))
        }
        if let pattern = pattern {
            try container.encode(pattern, forKey: Key("Pattern"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pattern)
        pattern = patternDecoded
        let labelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .label)
        label = labelDecoded
    }
}
