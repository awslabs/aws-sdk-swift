// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RetrieveEnvironmentInfoOutputBody: Equatable {
    public let environmentInfo: [EnvironmentInfoDescription]?
}

extension RetrieveEnvironmentInfoOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case environmentInfo = "EnvironmentInfo"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RetrieveEnvironmentInfoResult"))
        if containerValues.contains(.environmentInfo) {
            struct KeyVal0{struct member{}}
            let environmentInfoWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentInfo)
            if let environmentInfoWrappedContainer = environmentInfoWrappedContainer {
                let environmentInfoContainer = try environmentInfoWrappedContainer.decodeIfPresent([EnvironmentInfoDescription].self, forKey: .member)
                var environmentInfoBuffer:[EnvironmentInfoDescription]? = nil
                if let environmentInfoContainer = environmentInfoContainer {
                    environmentInfoBuffer = [EnvironmentInfoDescription]()
                    for structureContainer0 in environmentInfoContainer {
                        environmentInfoBuffer?.append(structureContainer0)
                    }
                }
                environmentInfo = environmentInfoBuffer
            } else {
                environmentInfo = []
            }
        } else {
            environmentInfo = nil
        }
    }
}
