// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListPlatformBranchesInput: Equatable {
    /// <p>Criteria for restricting the resulting list of platform branches. The filter is evaluated
    ///       as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p>
    ///          <p>The following list shows valid attribute values for each of the <code>SearchFilter</code>
    ///       terms. Most operators take a single value. The <code>in</code> and <code>not_in</code>
    ///       operators can take multiple values.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Attribute = BranchName</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code>
    ///               | <code>ends_with</code> | <code>contains</code> | <code>in</code> |
    ///                 <code>not_in</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Attribute = LifecycleState</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> |
    ///                 <code>not_in</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>Values</code>: <code>beta</code> | <code>supported</code> |
    ///                 <code>deprecated</code> | <code>retired</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Attribute = PlatformName</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code>
    ///               | <code>ends_with</code> | <code>contains</code> | <code>in</code> |
    ///               <code>not_in</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Attribute = TierType</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Operator</code>: <code>=</code> | <code>!=</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///          <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p>
    ///          <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10
    ///       items.</p>
    public let filters: [SearchFilter]?
    /// <p>The maximum number of platform branch values returned in one call.</p>
    public let maxRecords: Int?
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the
    ///       next response page. All other parameter values must be identical to the ones specified in the
    ///       initial request.</p>
    ///          <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    public let nextToken: String?

    public init (
        filters: [SearchFilter]? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}
