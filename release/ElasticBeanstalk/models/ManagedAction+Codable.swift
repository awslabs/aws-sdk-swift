// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case status = "Status"
        case windowStartTime = "WindowStartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionDescription = actionDescription {
            try container.encode(actionDescription, forKey: Key("ActionDescription"))
        }
        if let actionId = actionId {
            try container.encode(actionId, forKey: Key("ActionId"))
        }
        if let actionType = actionType {
            try container.encode(actionType, forKey: Key("ActionType"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let windowStartTime = windowStartTime {
            try container.encode(TimestampWrapper(windowStartTime, format: .dateTime), forKey: Key("windowStartTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ActionStatus.self, forKey: .status)
        status = statusDecoded
        let windowStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .windowStartTime)
        var windowStartTimeBuffer:Date? = nil
        if let windowStartTimeDecoded = windowStartTimeDecoded {
            windowStartTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(windowStartTimeDecoded, format: .dateTime)
        }
        windowStartTime = windowStartTimeBuffer
    }
}
