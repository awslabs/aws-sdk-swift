// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEnvironmentManagedActionHistoryOutputBody: Equatable {
    public let managedActionHistoryItems: [ManagedActionHistoryItem]?
    public let nextToken: String?
}

extension DescribeEnvironmentManagedActionHistoryOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case managedActionHistoryItems = "ManagedActionHistoryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeEnvironmentManagedActionHistoryResult"))
        if containerValues.contains(.managedActionHistoryItems) {
            struct KeyVal0{struct member{}}
            let managedActionHistoryItemsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedActionHistoryItems)
            if let managedActionHistoryItemsWrappedContainer = managedActionHistoryItemsWrappedContainer {
                let managedActionHistoryItemsContainer = try managedActionHistoryItemsWrappedContainer.decodeIfPresent([ManagedActionHistoryItem].self, forKey: .member)
                var managedActionHistoryItemsBuffer:[ManagedActionHistoryItem]? = nil
                if let managedActionHistoryItemsContainer = managedActionHistoryItemsContainer {
                    managedActionHistoryItemsBuffer = [ManagedActionHistoryItem]()
                    for structureContainer0 in managedActionHistoryItemsContainer {
                        managedActionHistoryItemsBuffer?.append(structureContainer0)
                    }
                }
                managedActionHistoryItems = managedActionHistoryItemsBuffer
            } else {
                managedActionHistoryItems = []
            }
        } else {
            managedActionHistoryItems = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
