// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Detailed information about a platform version.</p>
public struct PlatformDescription: Equatable {
    /// <p>The custom AMIs supported by the platform version.</p>
    public let customAmiList: [CustomAmi]?
    /// <p>The date when the platform version was created.</p>
    public let dateCreated: Date?
    /// <p>The date when the platform version was last updated.</p>
    public let dateUpdated: Date?
    /// <p>The description of the platform version.</p>
    public let description: String?
    /// <p>The frameworks supported by the platform version.</p>
    public let frameworks: [PlatformFramework]?
    /// <p>Information about the maintainer of the platform version.</p>
    public let maintainer: String?
    /// <p>The operating system used by the platform version.</p>
    public let operatingSystemName: String?
    /// <p>The version of the operating system used by the platform version.</p>
    public let operatingSystemVersion: String?
    /// <p>The ARN of the platform version.</p>
    public let platformArn: String?
    /// <p>The state of the platform version's branch in its lifecycle.</p>
    ///          <p>Possible values: <code>Beta</code> | <code>Supported</code> | <code>Deprecated</code> |
    ///       <code>Retired</code>
    ///          </p>
    public let platformBranchLifecycleState: String?
    /// <p>The platform branch to which the platform version belongs.</p>
    public let platformBranchName: String?
    /// <p>The category of the platform version.</p>
    public let platformCategory: String?
    /// <p>The state of the platform version in its lifecycle.</p>
    ///          <p>Possible values: <code>Recommended</code> | <code>null</code>
    ///          </p>
    ///          <p>If a null value is returned, the platform version isn't the recommended one for its
    ///       branch. Each platform branch has a single recommended platform version, typically the most
    ///       recent one.</p>
    public let platformLifecycleState: String?
    /// <p>The name of the platform version.</p>
    public let platformName: String?
    /// <p>The AWS account ID of the person who created the platform version.</p>
    public let platformOwner: String?
    /// <p>The status of the platform version.</p>
    public let platformStatus: PlatformStatus?
    /// <p>The version of the platform version.</p>
    public let platformVersion: String?
    /// <p>The programming languages supported by the platform version.</p>
    public let programmingLanguages: [PlatformProgrammingLanguage]?
    /// <p>The name of the solution stack used by the platform version.</p>
    public let solutionStackName: String?
    /// <p>The additions supported by the platform version.</p>
    public let supportedAddonList: [String]?
    /// <p>The tiers supported by the platform version.</p>
    public let supportedTierList: [String]?

    public init (
        customAmiList: [CustomAmi]? = nil,
        dateCreated: Date? = nil,
        dateUpdated: Date? = nil,
        description: String? = nil,
        frameworks: [PlatformFramework]? = nil,
        maintainer: String? = nil,
        operatingSystemName: String? = nil,
        operatingSystemVersion: String? = nil,
        platformArn: String? = nil,
        platformBranchLifecycleState: String? = nil,
        platformBranchName: String? = nil,
        platformCategory: String? = nil,
        platformLifecycleState: String? = nil,
        platformName: String? = nil,
        platformOwner: String? = nil,
        platformStatus: PlatformStatus? = nil,
        platformVersion: String? = nil,
        programmingLanguages: [PlatformProgrammingLanguage]? = nil,
        solutionStackName: String? = nil,
        supportedAddonList: [String]? = nil,
        supportedTierList: [String]? = nil
    )
    {
        self.customAmiList = customAmiList
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.description = description
        self.frameworks = frameworks
        self.maintainer = maintainer
        self.operatingSystemName = operatingSystemName
        self.operatingSystemVersion = operatingSystemVersion
        self.platformArn = platformArn
        self.platformBranchLifecycleState = platformBranchLifecycleState
        self.platformBranchName = platformBranchName
        self.platformCategory = platformCategory
        self.platformLifecycleState = platformLifecycleState
        self.platformName = platformName
        self.platformOwner = platformOwner
        self.platformStatus = platformStatus
        self.platformVersion = platformVersion
        self.programmingLanguages = programmingLanguages
        self.solutionStackName = solutionStackName
        self.supportedAddonList = supportedAddonList
        self.supportedTierList = supportedTierList
    }
}
