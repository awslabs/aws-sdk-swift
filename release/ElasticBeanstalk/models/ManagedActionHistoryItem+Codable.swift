// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedActionHistoryItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case executedTime = "ExecutedTime"
        case failureDescription = "FailureDescription"
        case failureType = "FailureType"
        case finishedTime = "FinishedTime"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionDescription = actionDescription {
            try container.encode(actionDescription, forKey: Key("ActionDescription"))
        }
        if let actionId = actionId {
            try container.encode(actionId, forKey: Key("ActionId"))
        }
        if let actionType = actionType {
            try container.encode(actionType, forKey: Key("ActionType"))
        }
        if let executedTime = executedTime {
            try container.encode(TimestampWrapper(executedTime, format: .dateTime), forKey: Key("executedTime"))
        }
        if let failureDescription = failureDescription {
            try container.encode(failureDescription, forKey: Key("FailureDescription"))
        }
        if let failureType = failureType {
            try container.encode(failureType, forKey: Key("FailureType"))
        }
        if let finishedTime = finishedTime {
            try container.encode(TimestampWrapper(finishedTime, format: .dateTime), forKey: Key("finishedTime"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let failureTypeDecoded = try containerValues.decodeIfPresent(FailureType.self, forKey: .failureType)
        failureType = failureTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ActionHistoryStatus.self, forKey: .status)
        status = statusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
        let executedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executedTime)
        var executedTimeBuffer:Date? = nil
        if let executedTimeDecoded = executedTimeDecoded {
            executedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(executedTimeDecoded, format: .dateTime)
        }
        executedTime = executedTimeBuffer
        let finishedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .finishedTime)
        var finishedTimeBuffer:Date? = nil
        if let finishedTimeDecoded = finishedTimeDecoded {
            finishedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(finishedTimeDecoded, format: .dateTime)
        }
        finishedTime = finishedTimeBuffer
    }
}
