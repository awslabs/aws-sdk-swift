// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstancesHealthOutputBody: Equatable {
    public let instanceHealthList: [SingleInstanceHealth]?
    public let refreshedAt: Date?
    public let nextToken: String?
}

extension DescribeInstancesHealthOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceHealthList = "InstanceHealthList"
        case nextToken = "NextToken"
        case refreshedAt = "RefreshedAt"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInstancesHealthResult"))
        if containerValues.contains(.instanceHealthList) {
            struct KeyVal0{struct member{}}
            let instanceHealthListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceHealthList)
            if let instanceHealthListWrappedContainer = instanceHealthListWrappedContainer {
                let instanceHealthListContainer = try instanceHealthListWrappedContainer.decodeIfPresent([SingleInstanceHealth].self, forKey: .member)
                var instanceHealthListBuffer:[SingleInstanceHealth]? = nil
                if let instanceHealthListContainer = instanceHealthListContainer {
                    instanceHealthListBuffer = [SingleInstanceHealth]()
                    for structureContainer0 in instanceHealthListContainer {
                        instanceHealthListBuffer?.append(structureContainer0)
                    }
                }
                instanceHealthList = instanceHealthListBuffer
            } else {
                instanceHealthList = []
            }
        } else {
            instanceHealthList = nil
        }
        let refreshedAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .refreshedAt)
        var refreshedAtBuffer:Date? = nil
        if let refreshedAtDecoded = refreshedAtDecoded {
            refreshedAtBuffer = try TimestampWrapperDecoder.parseDateStringValue(refreshedAtDecoded, format: .dateTime)
        }
        refreshedAt = refreshedAtBuffer
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
