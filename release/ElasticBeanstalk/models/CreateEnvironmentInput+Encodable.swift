// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateEnvironmentInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: Key("ApplicationName"))
        }
        if let cNAMEPrefix = cNAMEPrefix {
            try container.encode(cNAMEPrefix, forKey: Key("CNAMEPrefix"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: Key("EnvironmentName"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: Key("GroupName"))
        }
        if let operationsRole = operationsRole {
            try container.encode(operationsRole, forKey: Key("OperationsRole"))
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OptionSettings"))
            for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                try optionSettingsContainer.encode(configurationoptionsetting0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let optionsToRemove = optionsToRemove {
            var optionsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OptionsToRemove"))
            for (index0, optionspecification0) in optionsToRemove.enumerated() {
                try optionsToRemoveContainer.encode(optionspecification0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: Key("SolutionStackName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: Key("TemplateName"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: Key("Tier"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: Key("VersionLabel"))
        }
        try container.encode("CreateEnvironment", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
