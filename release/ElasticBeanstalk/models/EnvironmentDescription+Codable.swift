// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnvironmentDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cNAME = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let abortableOperationInProgress = abortableOperationInProgress {
            try container.encode(abortableOperationInProgress, forKey: Key("AbortableOperationInProgress"))
        }
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: Key("ApplicationName"))
        }
        if let cNAME = cNAME {
            try container.encode(cNAME, forKey: Key("CNAME"))
        }
        if let dateCreated = dateCreated {
            try container.encode(TimestampWrapper(dateCreated, format: .dateTime), forKey: Key("dateCreated"))
        }
        if let dateUpdated = dateUpdated {
            try container.encode(TimestampWrapper(dateUpdated, format: .dateTime), forKey: Key("dateUpdated"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let endpointURL = endpointURL {
            try container.encode(endpointURL, forKey: Key("EndpointURL"))
        }
        if let environmentArn = environmentArn {
            try container.encode(environmentArn, forKey: Key("EnvironmentArn"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: Key("EnvironmentId"))
        }
        if let environmentLinks = environmentLinks {
            var environmentLinksContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("EnvironmentLinks"))
            for (index0, environmentlink0) in environmentLinks.enumerated() {
                try environmentLinksContainer.encode(environmentlink0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: Key("EnvironmentName"))
        }
        if let health = health {
            try container.encode(health, forKey: Key("Health"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: Key("HealthStatus"))
        }
        if let operationsRole = operationsRole {
            try container.encode(operationsRole, forKey: Key("OperationsRole"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: Key("PlatformArn"))
        }
        if let resources = resources {
            try container.encode(resources, forKey: Key("Resources"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: Key("SolutionStackName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: Key("TemplateName"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: Key("Tier"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: Key("VersionLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cNAMEDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cNAME)
        cNAME = cNAMEDecoded
        let dateCreatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateCreated)
        var dateCreatedBuffer:Date? = nil
        if let dateCreatedDecoded = dateCreatedDecoded {
            dateCreatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateCreatedDecoded, format: .dateTime)
        }
        dateCreated = dateCreatedBuffer
        let dateUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateUpdated)
        var dateUpdatedBuffer:Date? = nil
        if let dateUpdatedDecoded = dateUpdatedDecoded {
            dateUpdatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateUpdatedDecoded, format: .dateTime)
        }
        dateUpdated = dateUpdatedBuffer
        let statusDecoded = try containerValues.decodeIfPresent(EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}
