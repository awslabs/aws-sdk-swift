// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPlatformVersionsOutputBody: Equatable {
    public let platformSummaryList: [PlatformSummary]?
    public let nextToken: String?
}

extension ListPlatformVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case platformSummaryList = "PlatformSummaryList"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListPlatformVersionsResult"))
        if containerValues.contains(.platformSummaryList) {
            struct KeyVal0{struct member{}}
            let platformSummaryListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformSummaryList)
            if let platformSummaryListWrappedContainer = platformSummaryListWrappedContainer {
                let platformSummaryListContainer = try platformSummaryListWrappedContainer.decodeIfPresent([PlatformSummary].self, forKey: .member)
                var platformSummaryListBuffer:[PlatformSummary]? = nil
                if let platformSummaryListContainer = platformSummaryListContainer {
                    platformSummaryListBuffer = [PlatformSummary]()
                    for structureContainer0 in platformSummaryListContainer {
                        platformSummaryListBuffer?.append(structureContainer0)
                    }
                }
                platformSummaryList = platformSummaryListBuffer
            } else {
                platformSummaryList = []
            }
        } else {
            platformSummaryList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
