// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes criteria to restrict a list of results.</p>
///          <p>For operators that apply a single value to the attribute, the filter is evaluated as
///       follows: <code>Attribute Operator Values[1]</code>
///          </p>
///          <p>Some operators, e.g. <code>in</code>, can apply multiple values. In this case, the filter
///       is evaluated as a logical union (OR) of applications of the operator to the attribute with
///       each one of the values: <code>(Attribute Operator Values[1]) OR (Attribute Operator Values[2])
///         OR ...</code>
///          </p>
///          <p>The valid values for attributes of <code>SearchFilter</code> depend on the API action. For
///       valid values, see the reference page for the API action you're calling that takes a
///         <code>SearchFilter</code> parameter.</p>
public struct SearchFilter: Equatable {
    /// <p>The operator to apply to the <code>Attribute</code> with each of the <code>Values</code>.
    ///       Valid values vary by <code>Attribute</code>.</p>
    public let `operator`: String?
    /// <p>The result attribute to which the filter values are applied. Valid values vary by API
    ///       action.</p>
    public let attribute: String?
    /// <p>The list of values applied to the <code>Attribute</code> and <code>Operator</code>
    ///       attributes. Number of values and valid values vary by <code>Attribute</code>.</p>
    public let values: [String]?

    public init (
        `operator`: String? = nil,
        attribute: String? = nil,
        values: [String]? = nil
    )
    {
        self.`operator` = `operator`
        self.attribute = attribute
        self.values = values
    }
}
