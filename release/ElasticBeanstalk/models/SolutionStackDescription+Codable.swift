// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SolutionStackDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case permittedFileTypes = "PermittedFileTypes"
        case solutionStackName = "SolutionStackName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let permittedFileTypes = permittedFileTypes {
            var permittedFileTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PermittedFileTypes"))
            for (index0, filetypeextension0) in permittedFileTypes.enumerated() {
                try permittedFileTypesContainer.encode(filetypeextension0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: Key("SolutionStackName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        if containerValues.contains(.permittedFileTypes) {
            struct KeyVal0{struct member{}}
            let permittedFileTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .permittedFileTypes)
            if let permittedFileTypesWrappedContainer = permittedFileTypesWrappedContainer {
                let permittedFileTypesContainer = try permittedFileTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var permittedFileTypesBuffer:[String]? = nil
                if let permittedFileTypesContainer = permittedFileTypesContainer {
                    permittedFileTypesBuffer = [String]()
                    for stringContainer0 in permittedFileTypesContainer {
                        permittedFileTypesBuffer?.append(stringContainer0)
                    }
                }
                permittedFileTypes = permittedFileTypesBuffer
            } else {
                permittedFileTypes = []
            }
        } else {
            permittedFileTypes = nil
        }
    }
}
