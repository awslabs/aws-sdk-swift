// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request to create a configuration template.</p>
public struct CreateConfigurationTemplateInput: Equatable {
    /// <p>The name of the Elastic Beanstalk application to associate with this configuration
    ///       template.</p>
    public let applicationName: String?
    /// <p>An optional description for this configuration.</p>
    public let description: String?
    /// <p>The ID of an environment whose settings you want to use to create the configuration
    ///       template. You must specify <code>EnvironmentId</code> if you don't specify
    ///         <code>PlatformArn</code>, <code>SolutionStackName</code>, or
    ///         <code>SourceConfiguration</code>.</p>
    public let environmentId: String?
    /// <p>Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these
    ///       values override the values obtained from the solution stack or the source configuration
    ///       template. For a complete list of Elastic Beanstalk configuration options, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">Option Values</a> in the
    ///         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    public let optionSettings: [ConfigurationOptionSetting]?
    /// <p>The Amazon Resource Name (ARN) of the custom platform. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html"> Custom
    ///         Platforms</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    ///          <note>
    ///
    ///             <p>If you specify <code>PlatformArn</code>, then don't specify
    ///           <code>SolutionStackName</code>.</p>
    ///          </note>
    public let platformArn: String?
    /// <p>The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For
    ///       example, <code>64bit Amazon Linux 2013.09 running Tomcat 7 Java 7</code>. A solution stack
    ///       specifies the operating system, runtime, and application server for a configuration template.
    ///       It also determines the set of configuration options as well as the possible and default
    ///       values. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a> in the
    ///         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    ///          <p>You must specify <code>SolutionStackName</code> if you don't specify
    ///         <code>PlatformArn</code>, <code>EnvironmentId</code>, or
    ///       <code>SourceConfiguration</code>.</p>
    ///          <p>Use the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html">
    ///                <code>ListAvailableSolutionStacks</code>
    ///             </a> API to obtain a list of available
    ///       solution stacks.</p>
    public let solutionStackName: String?
    /// <p>An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified
    ///       configuration template to create a new configuration.</p>
    ///          <p>Values specified in <code>OptionSettings</code> override any values obtained from the
    ///         <code>SourceConfiguration</code>.</p>
    ///          <p>You must specify <code>SourceConfiguration</code> if you don't specify
    ///         <code>PlatformArn</code>, <code>EnvironmentId</code>, or
    ///       <code>SolutionStackName</code>.</p>
    ///          <p>Constraint: If both solution stack name and source configuration are specified, the
    ///       solution stack of the source configuration template must match the specified solution stack
    ///       name.</p>
    public let sourceConfiguration: SourceConfiguration?
    /// <p>Specifies the tags applied to the configuration template.</p>
    public let tags: [Tag]?
    /// <p>The name of the configuration template.</p>
    ///          <p>Constraint: This name must be unique per application.</p>
    public let templateName: String?

    public init (
        applicationName: String? = nil,
        description: String? = nil,
        environmentId: String? = nil,
        optionSettings: [ConfigurationOptionSetting]? = nil,
        platformArn: String? = nil,
        solutionStackName: String? = nil,
        sourceConfiguration: SourceConfiguration? = nil,
        tags: [Tag]? = nil,
        templateName: String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.optionSettings = optionSettings
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.sourceConfiguration = sourceConfiguration
        self.tags = tags
        self.templateName = templateName
    }
}
