// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlatformSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case operatingSystemName = "OperatingSystemName"
        case operatingSystemVersion = "OperatingSystemVersion"
        case platformArn = "PlatformArn"
        case platformBranchLifecycleState = "PlatformBranchLifecycleState"
        case platformBranchName = "PlatformBranchName"
        case platformCategory = "PlatformCategory"
        case platformLifecycleState = "PlatformLifecycleState"
        case platformOwner = "PlatformOwner"
        case platformStatus = "PlatformStatus"
        case platformVersion = "PlatformVersion"
        case supportedAddonList = "SupportedAddonList"
        case supportedTierList = "SupportedTierList"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let operatingSystemName = operatingSystemName {
            try container.encode(operatingSystemName, forKey: Key("OperatingSystemName"))
        }
        if let operatingSystemVersion = operatingSystemVersion {
            try container.encode(operatingSystemVersion, forKey: Key("OperatingSystemVersion"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: Key("PlatformArn"))
        }
        if let platformBranchLifecycleState = platformBranchLifecycleState {
            try container.encode(platformBranchLifecycleState, forKey: Key("PlatformBranchLifecycleState"))
        }
        if let platformBranchName = platformBranchName {
            try container.encode(platformBranchName, forKey: Key("PlatformBranchName"))
        }
        if let platformCategory = platformCategory {
            try container.encode(platformCategory, forKey: Key("PlatformCategory"))
        }
        if let platformLifecycleState = platformLifecycleState {
            try container.encode(platformLifecycleState, forKey: Key("PlatformLifecycleState"))
        }
        if let platformOwner = platformOwner {
            try container.encode(platformOwner, forKey: Key("PlatformOwner"))
        }
        if let platformStatus = platformStatus {
            try container.encode(platformStatus, forKey: Key("PlatformStatus"))
        }
        if let platformVersion = platformVersion {
            try container.encode(platformVersion, forKey: Key("PlatformVersion"))
        }
        if let supportedAddonList = supportedAddonList {
            var supportedAddonListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SupportedAddonList"))
            for (index0, supportedaddon0) in supportedAddonList.enumerated() {
                try supportedAddonListContainer.encode(supportedaddon0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let supportedTierList = supportedTierList {
            var supportedTierListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SupportedTierList"))
            for (index0, supportedtier0) in supportedTierList.enumerated() {
                try supportedTierListContainer.encode(supportedtier0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let platformOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformOwner)
        platformOwner = platformOwnerDecoded
        let platformStatusDecoded = try containerValues.decodeIfPresent(PlatformStatus.self, forKey: .platformStatus)
        platformStatus = platformStatusDecoded
        let platformCategoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformCategory)
        platformCategory = platformCategoryDecoded
        let operatingSystemNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operatingSystemName)
        operatingSystemName = operatingSystemNameDecoded
        let operatingSystemVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operatingSystemVersion)
        operatingSystemVersion = operatingSystemVersionDecoded
        if containerValues.contains(.supportedTierList) {
            struct KeyVal0{struct member{}}
            let supportedTierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedTierList)
            if let supportedTierListWrappedContainer = supportedTierListWrappedContainer {
                let supportedTierListContainer = try supportedTierListWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var supportedTierListBuffer:[String]? = nil
                if let supportedTierListContainer = supportedTierListContainer {
                    supportedTierListBuffer = [String]()
                    for stringContainer0 in supportedTierListContainer {
                        supportedTierListBuffer?.append(stringContainer0)
                    }
                }
                supportedTierList = supportedTierListBuffer
            } else {
                supportedTierList = []
            }
        } else {
            supportedTierList = nil
        }
        if containerValues.contains(.supportedAddonList) {
            struct KeyVal0{struct member{}}
            let supportedAddonListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedAddonList)
            if let supportedAddonListWrappedContainer = supportedAddonListWrappedContainer {
                let supportedAddonListContainer = try supportedAddonListWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var supportedAddonListBuffer:[String]? = nil
                if let supportedAddonListContainer = supportedAddonListContainer {
                    supportedAddonListBuffer = [String]()
                    for stringContainer0 in supportedAddonListContainer {
                        supportedAddonListBuffer?.append(stringContainer0)
                    }
                }
                supportedAddonList = supportedAddonListBuffer
            } else {
                supportedAddonList = []
            }
        } else {
            supportedAddonList = nil
        }
        let platformLifecycleStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformLifecycleState)
        platformLifecycleState = platformLifecycleStateDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let platformBranchNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformBranchName)
        platformBranchName = platformBranchNameDecoded
        let platformBranchLifecycleStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformBranchLifecycleState)
        platformBranchLifecycleState = platformBranchLifecycleStateDecoded
    }
}
