// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Deployment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId = "DeploymentId"
        case deploymentTime = "DeploymentTime"
        case status = "Status"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let deploymentId = deploymentId {
            try container.encode(deploymentId, forKey: Key("DeploymentId"))
        }
        if let deploymentTime = deploymentTime {
            try container.encode(TimestampWrapper(deploymentTime, format: .dateTime), forKey: Key("deploymentTime"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: Key("VersionLabel"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let deploymentTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentTime)
        var deploymentTimeBuffer:Date? = nil
        if let deploymentTimeDecoded = deploymentTimeDecoded {
            deploymentTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(deploymentTimeDecoded, format: .dateTime)
        }
        deploymentTime = deploymentTimeBuffer
    }
}
