// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceHealthSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case degraded = "Degraded"
        case info = "Info"
        case noData = "NoData"
        case ok = "Ok"
        case pending = "Pending"
        case severe = "Severe"
        case unknown = "Unknown"
        case warning = "Warning"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let degraded = degraded {
            try container.encode(degraded, forKey: Key("Degraded"))
        }
        if let info = info {
            try container.encode(info, forKey: Key("Info"))
        }
        if let noData = noData {
            try container.encode(noData, forKey: Key("NoData"))
        }
        if let ok = ok {
            try container.encode(ok, forKey: Key("Ok"))
        }
        if let pending = pending {
            try container.encode(pending, forKey: Key("Pending"))
        }
        if let severe = severe {
            try container.encode(severe, forKey: Key("Severe"))
        }
        if let unknown = unknown {
            try container.encode(unknown, forKey: Key("Unknown"))
        }
        if let warning = warning {
            try container.encode(warning, forKey: Key("Warning"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noDataDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .noData)
        noData = noDataDecoded
        let unknownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .unknown)
        unknown = unknownDecoded
        let pendingDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .pending)
        pending = pendingDecoded
        let okDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ok)
        ok = okDecoded
        let infoDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .info)
        info = infoDecoded
        let warningDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .warning)
        warning = warningDecoded
        let degradedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .degraded)
        degraded = degradedDecoded
        let severeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .severe)
        severe = severeDecoded
    }
}
