// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEnvironmentOutputBody: Equatable {
    public let environmentName: String?
    public let environmentId: String?
    public let applicationName: String?
    public let versionLabel: String?
    public let solutionStackName: String?
    public let platformArn: String?
    public let templateName: String?
    public let description: String?
    public let endpointURL: String?
    public let cNAME: String?
    public let dateCreated: Date?
    public let dateUpdated: Date?
    public let status: EnvironmentStatus?
    public let abortableOperationInProgress: Bool?
    public let health: EnvironmentHealth?
    public let healthStatus: EnvironmentHealthStatus?
    public let resources: EnvironmentResourcesDescription?
    public let tier: EnvironmentTier?
    public let environmentLinks: [EnvironmentLink]?
    public let environmentArn: String?
    public let operationsRole: String?
}

extension CreateEnvironmentOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case abortableOperationInProgress = "AbortableOperationInProgress"
        case applicationName = "ApplicationName"
        case cNAME = "CNAME"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointURL = "EndpointURL"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case health = "Health"
        case healthStatus = "HealthStatus"
        case operationsRole = "OperationsRole"
        case platformArn = "PlatformArn"
        case resources = "Resources"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("CreateEnvironmentResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let endpointURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointURL)
        endpointURL = endpointURLDecoded
        let cNAMEDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cNAME)
        cNAME = cNAMEDecoded
        let dateCreatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateCreated)
        var dateCreatedBuffer:Date? = nil
        if let dateCreatedDecoded = dateCreatedDecoded {
            dateCreatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateCreatedDecoded, format: .dateTime)
        }
        dateCreated = dateCreatedBuffer
        let dateUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dateUpdated)
        var dateUpdatedBuffer:Date? = nil
        if let dateUpdatedDecoded = dateUpdatedDecoded {
            dateUpdatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateUpdatedDecoded, format: .dateTime)
        }
        dateUpdated = dateUpdatedBuffer
        let statusDecoded = try containerValues.decodeIfPresent(EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let abortableOperationInProgressDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .abortableOperationInProgress)
        abortableOperationInProgress = abortableOperationInProgressDecoded
        let healthDecoded = try containerValues.decodeIfPresent(EnvironmentHealth.self, forKey: .health)
        health = healthDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(EnvironmentHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(EnvironmentResourcesDescription.self, forKey: .resources)
        resources = resourcesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        if containerValues.contains(.environmentLinks) {
            struct KeyVal0{struct member{}}
            let environmentLinksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentLinks)
            if let environmentLinksWrappedContainer = environmentLinksWrappedContainer {
                let environmentLinksContainer = try environmentLinksWrappedContainer.decodeIfPresent([EnvironmentLink].self, forKey: .member)
                var environmentLinksBuffer:[EnvironmentLink]? = nil
                if let environmentLinksContainer = environmentLinksContainer {
                    environmentLinksBuffer = [EnvironmentLink]()
                    for structureContainer0 in environmentLinksContainer {
                        environmentLinksBuffer?.append(structureContainer0)
                    }
                }
                environmentLinks = environmentLinksBuffer
            } else {
                environmentLinks = []
            }
        } else {
            environmentLinks = nil
        }
        let environmentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let operationsRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationsRole)
        operationsRole = operationsRoleDecoded
    }
}
