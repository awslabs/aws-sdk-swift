// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request to update an environment.</p>
public struct UpdateEnvironmentInput: Equatable {
    /// <p>The name of the application with which the environment is associated.</p>
    public let applicationName: String?
    /// <p>If this parameter is specified, AWS Elastic Beanstalk updates the description of this
    ///       environment.</p>
    public let description: String?
    /// <p>The ID of the environment to update.</p>
    ///          <p>If no environment with this ID exists, AWS Elastic Beanstalk returns an
    ///         <code>InvalidParameterValue</code> error.</p>
    ///          <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not
    ///       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
    ///     </p>
    public let environmentId: String?
    /// <p>The name of the environment to update. If no environment with this name exists, AWS
    ///       Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
    ///          <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not
    ///       specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.
    ///     </p>
    public let environmentName: String?
    /// <p>The name of the group to which the target environment belongs. Specify a group name
    ///       only if the environment's name is specified in an environment manifest and not with the
    ///       environment name or environment ID parameters. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest
    ///         (env.yaml)</a> for details.</p>
    public let groupName: String?
    /// <p>If specified, AWS Elastic Beanstalk updates the configuration set associated with the
    ///       running environment and sets the specified configuration options to the requested
    ///       value.</p>
    public let optionSettings: [ConfigurationOptionSetting]?
    /// <p>A list of custom user-defined configuration options to remove from the configuration
    ///       set for this environment.</p>
    public let optionsToRemove: [OptionSpecification]?
    /// <p>The ARN of the platform, if used.</p>
    public let platformArn: String?
    /// <p>This specifies the platform version that the environment will run after the environment
    ///       is updated.</p>
    public let solutionStackName: String?
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys this configuration
    ///       template to the environment. If no such configuration template is found, AWS Elastic Beanstalk
    ///       returns an <code>InvalidParameterValue</code> error. </p>
    public let templateName: String?
    /// <p>This specifies the tier to use to update the environment.</p>
    ///          <p>Condition: At this time, if you change the tier version, name, or type, AWS Elastic
    ///       Beanstalk returns <code>InvalidParameterValue</code> error. </p>
    public let tier: EnvironmentTier?
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys the named application
    ///       version to the environment. If no such application version is found, returns an
    ///         <code>InvalidParameterValue</code> error. </p>
    public let versionLabel: String?

    public init (
        applicationName: String? = nil,
        description: String? = nil,
        environmentId: String? = nil,
        environmentName: String? = nil,
        groupName: String? = nil,
        optionSettings: [ConfigurationOptionSetting]? = nil,
        optionsToRemove: [OptionSpecification]? = nil,
        platformArn: String? = nil,
        solutionStackName: String? = nil,
        templateName: String? = nil,
        tier: EnvironmentTier? = nil,
        versionLabel: String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.groupName = groupName
        self.optionSettings = optionSettings
        self.optionsToRemove = optionsToRemove
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}
