// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS Elastic Beanstalk</fullname>
///
///
///          <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable,
///       fault-tolerant applications running on the Amazon Web Services cloud.</p>
///          <p>For more information about this product, go to the <a href="http://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a> details page. The location of the
///       latest AWS Elastic Beanstalk WSDL is <a href="https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>.
///       To install the Software Development Kits (SDKs), Integrated Development Environment (IDE)
///       Toolkits, and command line tools that enable you to access the API, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
///          <p>
///             <b>Endpoints</b>
///          </p>
///          <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to
///         <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region">Regions and Endpoints</a> in the <i>Amazon Web Services
///       Glossary</i>.</p>
public protocol ElasticBeanstalkClientProtocol {
    /// <p>Cancels in-progress environment configuration update or application version
    ///       deployment.</p>
    func abortEnvironmentUpdate(input: AbortEnvironmentUpdateInput, completion: @escaping (SdkResult<AbortEnvironmentUpdateOutputResponse, AbortEnvironmentUpdateOutputError>) -> Void)
    /// <p>Applies a scheduled managed action immediately. A managed action can be applied only if
    ///       its status is <code>Scheduled</code>. Get the status and action ID of a managed action with
    ///         <a>DescribeEnvironmentManagedActions</a>.</p>
    func applyEnvironmentManagedAction(input: ApplyEnvironmentManagedActionInput, completion: @escaping (SdkResult<ApplyEnvironmentManagedActionOutputResponse, ApplyEnvironmentManagedActionOutputError>) -> Void)
    /// <p>Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk
    ///       uses the associated operations role for permissions to downstream services during subsequent
    ///       calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
    ///         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    func associateEnvironmentOperationsRole(input: AssociateEnvironmentOperationsRoleInput, completion: @escaping (SdkResult<AssociateEnvironmentOperationsRoleOutputResponse, AssociateEnvironmentOperationsRoleOutputError>) -> Void)
    /// <p>Checks if the specified CNAME is available.</p>
    func checkDNSAvailability(input: CheckDNSAvailabilityInput, completion: @escaping (SdkResult<CheckDNSAvailabilityOutputResponse, CheckDNSAvailabilityOutputError>) -> Void)
    /// <p>Create or update a group of environments that each run a separate component of a single
    ///       application. Takes a list of version labels that specify application source bundles for each
    ///       of the environments to create or update. The name of each environment and other required
    ///       information must be included in the source bundles in an environment manifest named
    ///       <code>env.yaml</code>. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html">Compose Environments</a>
    ///       for details.</p>
    func composeEnvironments(input: ComposeEnvironmentsInput, completion: @escaping (SdkResult<ComposeEnvironmentsOutputResponse, ComposeEnvironmentsOutputError>) -> Void)
    /// <p>Creates an application that has one configuration template named <code>default</code>
    ///       and no application versions.</p>
    func createApplication(input: CreateApplicationInput, completion: @escaping (SdkResult<CreateApplicationOutputResponse, CreateApplicationOutputError>) -> Void)
    /// <p>Creates an application version for the specified application. You can create an
    ///       application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the
    ///       output of an AWS CodeBuild build as follows:</p>
    ///          <p>Specify a commit in an AWS CodeCommit repository with
    ///         <code>SourceBuildInformation</code>.</p>
    ///          <p>Specify a build in an AWS CodeBuild with <code>SourceBuildInformation</code> and
    ///         <code>BuildConfiguration</code>.</p>
    ///          <p>Specify a source bundle in S3 with <code>SourceBundle</code>
    ///          </p>
    ///          <p>Omit both <code>SourceBuildInformation</code> and <code>SourceBundle</code> to use the
    ///       default sample application.</p>
    ///          <note>
    ///             <p>After you create an application version with a specified Amazon S3 bucket and key
    ///         location, you can't change that Amazon S3 location. If you change the Amazon S3 location,
    ///         you receive an exception when you attempt to launch an environment from the application
    ///         version.</p>
    ///          </note>
    func createApplicationVersion(input: CreateApplicationVersionInput, completion: @escaping (SdkResult<CreateApplicationVersionOutputResponse, CreateApplicationVersionOutputError>) -> Void)
    /// <p>Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk
    ///       application. You define application configuration settings in a configuration template. You
    ///       can then use the configuration template to deploy different versions of the application with
    ///       the same configuration settings.</p>
    ///          <p>Templates aren't associated with any environment. The <code>EnvironmentName</code>
    ///       response element is always <code>null</code>.</p>
    ///          <p>Related Topics</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>DescribeConfigurationOptions</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>DescribeConfigurationSettings</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>ListAvailableSolutionStacks</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func createConfigurationTemplate(input: CreateConfigurationTemplateInput, completion: @escaping (SdkResult<CreateConfigurationTemplateOutputResponse, CreateConfigurationTemplateOutputError>) -> Void)
    /// <p>Launches an AWS Elastic Beanstalk environment for the specified application using the specified
    ///       configuration.</p>
    func createEnvironment(input: CreateEnvironmentInput, completion: @escaping (SdkResult<CreateEnvironmentOutputResponse, CreateEnvironmentOutputError>) -> Void)
    /// <p>Create a new version of your custom platform.</p>
    func createPlatformVersion(input: CreatePlatformVersionInput, completion: @escaping (SdkResult<CreatePlatformVersionOutputResponse, CreatePlatformVersionOutputError>) -> Void)
    /// <p>Creates a bucket in Amazon S3 to store application versions, logs, and other files used
    ///       by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the
    ///       first time you create an environment in a region. If the storage location already exists,
    ///         <code>CreateStorageLocation</code> still returns the bucket name but does not create a new
    ///       bucket.</p>
    func createStorageLocation(input: CreateStorageLocationInput, completion: @escaping (SdkResult<CreateStorageLocationOutputResponse, CreateStorageLocationOutputError>) -> Void)
    /// <p>Deletes the specified application along with all associated versions and
    ///       configurations. The application versions will not be deleted from your Amazon S3
    ///       bucket.</p>
    ///          <note>
    ///             <p>You cannot delete an application that has a running environment.</p>
    ///          </note>
    func deleteApplication(input: DeleteApplicationInput, completion: @escaping (SdkResult<DeleteApplicationOutputResponse, DeleteApplicationOutputError>) -> Void)
    /// <p>Deletes the specified version from the specified application.</p>
    ///          <note>
    ///             <p>You cannot delete an application version that is associated with a running
    ///         environment.</p>
    ///          </note>
    func deleteApplicationVersion(input: DeleteApplicationVersionInput, completion: @escaping (SdkResult<DeleteApplicationVersionOutputResponse, DeleteApplicationVersionOutputError>) -> Void)
    /// <p>Deletes the specified configuration template.</p>
    ///          <note>
    ///             <p>When you launch an environment using a configuration template, the environment gets a
    ///         copy of the template. You can delete or modify the environment's copy of the template
    ///         without affecting the running environment.</p>
    ///          </note>
    func deleteConfigurationTemplate(input: DeleteConfigurationTemplateInput, completion: @escaping (SdkResult<DeleteConfigurationTemplateOutputResponse, DeleteConfigurationTemplateOutputError>) -> Void)
    /// <p>Deletes the draft configuration associated with the running environment.</p>
    ///          <p>Updating a running environment with any configuration changes creates a draft
    ///       configuration set. You can get the draft configuration using <a>DescribeConfigurationSettings</a> while the update is in progress or if the update
    ///       fails. The <code>DeploymentStatus</code> for the draft configuration indicates whether the
    ///       deployment is in process or has failed. The draft configuration remains in existence until it
    ///       is deleted with this action.</p>
    func deleteEnvironmentConfiguration(input: DeleteEnvironmentConfigurationInput, completion: @escaping (SdkResult<DeleteEnvironmentConfigurationOutputResponse, DeleteEnvironmentConfigurationOutputError>) -> Void)
    /// <p>Deletes the specified version of a custom platform.</p>
    func deletePlatformVersion(input: DeletePlatformVersionInput, completion: @escaping (SdkResult<DeletePlatformVersionOutputResponse, DeletePlatformVersionOutputError>) -> Void)
    /// <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS
    ///       account.</p>
    ///          <p>The result currently has one set of attributes—resource quotas.</p>
    func describeAccountAttributes(input: DescribeAccountAttributesInput, completion: @escaping (SdkResult<DescribeAccountAttributesOutputResponse, DescribeAccountAttributesOutputError>) -> Void)
    /// <p>Returns the descriptions of existing applications.</p>
    func describeApplications(input: DescribeApplicationsInput, completion: @escaping (SdkResult<DescribeApplicationsOutputResponse, DescribeApplicationsOutputError>) -> Void)
    /// <p>Retrieve a list of application versions.</p>
    func describeApplicationVersions(input: DescribeApplicationVersionsInput, completion: @escaping (SdkResult<DescribeApplicationVersionsOutputResponse, DescribeApplicationVersionsOutputError>) -> Void)
    /// <p>Describes the configuration options that are used in a particular configuration
    ///       template or environment, or that a specified solution stack defines. The description includes
    ///       the values the options, their default values, and an indication of the required action on a
    ///       running environment if an option value is changed.</p>
    func describeConfigurationOptions(input: DescribeConfigurationOptionsInput, completion: @escaping (SdkResult<DescribeConfigurationOptionsOutputResponse, DescribeConfigurationOptionsOutputError>) -> Void)
    /// <p>Returns a description of the settings for the specified configuration set, that is,
    ///       either a configuration template or the configuration set associated with a running
    ///       environment.</p>
    ///          <p>When describing the settings for the configuration set associated with a running
    ///       environment, it is possible to receive two sets of setting descriptions. One is the deployed
    ///       configuration set, and the other is a draft configuration of an environment that is either in
    ///       the process of deployment or that failed to deploy.</p>
    ///          <p>Related Topics</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>DeleteEnvironmentConfiguration</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func describeConfigurationSettings(input: DescribeConfigurationSettingsInput, completion: @escaping (SdkResult<DescribeConfigurationSettingsOutputResponse, DescribeConfigurationSettingsOutputError>) -> Void)
    /// <p>Returns information about the overall health of the specified environment. The
    ///         <b>DescribeEnvironmentHealth</b> operation is only available with
    ///       AWS Elastic Beanstalk Enhanced Health.</p>
    func describeEnvironmentHealth(input: DescribeEnvironmentHealthInput, completion: @escaping (SdkResult<DescribeEnvironmentHealthOutputResponse, DescribeEnvironmentHealthOutputError>) -> Void)
    /// <p>Lists an environment's completed and failed managed actions.</p>
    func describeEnvironmentManagedActionHistory(input: DescribeEnvironmentManagedActionHistoryInput, completion: @escaping (SdkResult<DescribeEnvironmentManagedActionHistoryOutputResponse, DescribeEnvironmentManagedActionHistoryOutputError>) -> Void)
    /// <p>Lists an environment's upcoming and in-progress managed actions.</p>
    func describeEnvironmentManagedActions(input: DescribeEnvironmentManagedActionsInput, completion: @escaping (SdkResult<DescribeEnvironmentManagedActionsOutputResponse, DescribeEnvironmentManagedActionsOutputError>) -> Void)
    /// <p>Returns AWS resources for this environment.</p>
    func describeEnvironmentResources(input: DescribeEnvironmentResourcesInput, completion: @escaping (SdkResult<DescribeEnvironmentResourcesOutputResponse, DescribeEnvironmentResourcesOutputError>) -> Void)
    /// <p>Returns descriptions for existing environments.</p>
    func describeEnvironments(input: DescribeEnvironmentsInput, completion: @escaping (SdkResult<DescribeEnvironmentsOutputResponse, DescribeEnvironmentsOutputError>) -> Void)
    /// <p>Returns list of event descriptions matching criteria up to the last 6 weeks.</p>
    ///          <note>
    ///             <p>This action returns the most recent 1,000 events from the specified
    ///           <code>NextToken</code>.</p>
    ///          </note>
    func describeEvents(input: DescribeEventsInput, completion: @escaping (SdkResult<DescribeEventsOutputResponse, DescribeEventsOutputError>) -> Void)
    /// <p>Retrieves detailed information about the health of instances in your AWS Elastic
    ///       Beanstalk. This operation requires <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html">enhanced health
    ///       reporting</a>.</p>
    func describeInstancesHealth(input: DescribeInstancesHealthInput, completion: @escaping (SdkResult<DescribeInstancesHealthOutputResponse, DescribeInstancesHealthOutputError>) -> Void)
    /// <p>Describes a platform version. Provides full details. Compare to <a>ListPlatformVersions</a>, which provides summary information about a list of
    ///       platform versions.</p>
    ///          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
    ///         Platforms Glossary</a>.</p>
    func describePlatformVersion(input: DescribePlatformVersionInput, completion: @escaping (SdkResult<DescribePlatformVersionOutputResponse, DescribePlatformVersionOutputError>) -> Void)
    /// <p>Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses
    ///       the caller's permissions for permissions to downstream services during subsequent calls acting
    ///       on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
    ///         <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    func disassociateEnvironmentOperationsRole(input: DisassociateEnvironmentOperationsRoleInput, completion: @escaping (SdkResult<DisassociateEnvironmentOperationsRoleOutputResponse, DisassociateEnvironmentOperationsRoleOutputError>) -> Void)
    /// <p>Returns a list of the available solution stack names, with the public version first and
    ///       then in reverse chronological order.</p>
    func listAvailableSolutionStacks(input: ListAvailableSolutionStacksInput, completion: @escaping (SdkResult<ListAvailableSolutionStacksOutputResponse, ListAvailableSolutionStacksOutputError>) -> Void)
    /// <p>Lists the platform branches available for your account in an AWS Region. Provides
    ///       summary information about each platform branch.</p>
    ///          <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
    ///         Platforms Glossary</a>.</p>
    func listPlatformBranches(input: ListPlatformBranchesInput, completion: @escaping (SdkResult<ListPlatformBranchesOutputResponse, ListPlatformBranchesOutputError>) -> Void)
    /// <p>Lists the platform versions available for your account in an AWS Region. Provides
    ///       summary information about each platform version. Compare to <a>DescribePlatformVersion</a>, which provides full details about a single platform
    ///       version.</p>
    ///          <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
    ///         Platforms Glossary</a>.</p>
    func listPlatformVersions(input: ListPlatformVersionsInput, completion: @escaping (SdkResult<ListPlatformVersionsOutputResponse, ListPlatformVersionsOutputError>) -> Void)
    /// <p>Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.</p>
    ///          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
    ///         <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
    ///         Resources</a>.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Deletes and recreates all of the AWS resources (for example: the Auto Scaling group,
    ///       load balancer, etc.) for a specified environment and forces a restart.</p>
    func rebuildEnvironment(input: RebuildEnvironmentInput, completion: @escaping (SdkResult<RebuildEnvironmentOutputResponse, RebuildEnvironmentOutputError>) -> Void)
    /// <p>Initiates a request to compile the specified type of information of the deployed
    ///       environment.</p>
    ///          <p> Setting the <code>InfoType</code> to <code>tail</code> compiles the last lines from
    ///       the application server log files of every Amazon EC2 instance in your environment. </p>
    ///          <p> Setting the <code>InfoType</code> to <code>bundle</code> compresses the application
    ///       server log files for every Amazon EC2 instance into a <code>.zip</code> file. Legacy and .NET
    ///       containers do not support bundle logs. </p>
    ///          <p> Use <a>RetrieveEnvironmentInfo</a> to obtain the set of logs. </p>
    ///          <p>Related Topics</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>RetrieveEnvironmentInfo</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func requestEnvironmentInfo(input: RequestEnvironmentInfoInput, completion: @escaping (SdkResult<RequestEnvironmentInfoOutputResponse, RequestEnvironmentInfoOutputError>) -> Void)
    /// <p>Causes the environment to restart the application container server running on each
    ///       Amazon EC2 instance.</p>
    func restartAppServer(input: RestartAppServerInput, completion: @escaping (SdkResult<RestartAppServerOutputResponse, RestartAppServerOutputError>) -> Void)
    /// <p>Retrieves the compiled information from a <a>RequestEnvironmentInfo</a>
    ///       request.</p>
    ///          <p>Related Topics</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>RequestEnvironmentInfo</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func retrieveEnvironmentInfo(input: RetrieveEnvironmentInfoInput, completion: @escaping (SdkResult<RetrieveEnvironmentInfoOutputResponse, RetrieveEnvironmentInfoOutputError>) -> Void)
    /// <p>Swaps the CNAMEs of two environments.</p>
    func swapEnvironmentCNAMEs(input: SwapEnvironmentCNAMEsInput, completion: @escaping (SdkResult<SwapEnvironmentCNAMEsOutputResponse, SwapEnvironmentCNAMEsOutputError>) -> Void)
    /// <p>Terminates the specified environment.</p>
    func terminateEnvironment(input: TerminateEnvironmentInput, completion: @escaping (SdkResult<TerminateEnvironmentOutputResponse, TerminateEnvironmentOutputError>) -> Void)
    /// <p>Updates the specified application to have the specified properties.</p>
    ///          <note>
    ///             <p>If a property (for example, <code>description</code>) is not provided, the value
    ///         remains unchanged. To clear these properties, specify an empty string.</p>
    ///          </note>
    func updateApplication(input: UpdateApplicationInput, completion: @escaping (SdkResult<UpdateApplicationOutputResponse, UpdateApplicationOutputError>) -> Void)
    /// <p>Modifies lifecycle settings for an application.</p>
    func updateApplicationResourceLifecycle(input: UpdateApplicationResourceLifecycleInput, completion: @escaping (SdkResult<UpdateApplicationResourceLifecycleOutputResponse, UpdateApplicationResourceLifecycleOutputError>) -> Void)
    /// <p>Updates the specified application version to have the specified properties.</p>
    ///          <note>
    ///             <p>If a property (for example, <code>description</code>) is not provided, the value
    ///         remains unchanged. To clear properties, specify an empty string.</p>
    ///          </note>
    func updateApplicationVersion(input: UpdateApplicationVersionInput, completion: @escaping (SdkResult<UpdateApplicationVersionOutputResponse, UpdateApplicationVersionOutputError>) -> Void)
    /// <p>Updates the specified configuration template to have the specified properties or
    ///       configuration option values.</p>
    ///          <note>
    ///             <p>If a property (for example, <code>ApplicationName</code>) is not provided, its value
    ///         remains unchanged. To clear such properties, specify an empty string.</p>
    ///          </note>
    ///          <p>Related Topics</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>DescribeConfigurationOptions</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func updateConfigurationTemplate(input: UpdateConfigurationTemplateInput, completion: @escaping (SdkResult<UpdateConfigurationTemplateOutputResponse, UpdateConfigurationTemplateOutputError>) -> Void)
    /// <p>Updates the environment description, deploys a new application version, updates the
    ///       configuration settings to an entirely new configuration template, or updates select
    ///       configuration option values in the running environment.</p>
    ///          <p> Attempting to update both the release and configuration is not allowed and AWS Elastic
    ///       Beanstalk returns an <code>InvalidParameterCombination</code> error. </p>
    ///          <p> When updating the configuration settings to a new template or individual settings, a
    ///       draft configuration is created and <a>DescribeConfigurationSettings</a> for this
    ///       environment returns two setting descriptions with different <code>DeploymentStatus</code>
    ///       values. </p>
    func updateEnvironment(input: UpdateEnvironmentInput, completion: @escaping (SdkResult<UpdateEnvironmentOutputResponse, UpdateEnvironmentOutputError>) -> Void)
    /// <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code>
    ///       for tags to add or update, and <code>TagsToRemove</code>.</p>
    ///          <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
    ///       <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
    ///         Resources</a>.</p>
    ///          <p>If you create a custom IAM user policy to control permission to this operation, specify
    ///       one of the following two virtual actions (or both) instead of the API operation name:</p>
    ///          <dl>
    ///             <dt>elasticbeanstalk:AddTags</dt>
    ///             <dd>
    ///                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code>
    ///           parameter.</p>
    ///             </dd>
    ///             <dt>elasticbeanstalk:RemoveTags</dt>
    ///             <dd>
    ///                <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code>
    ///           parameter.</p>
    ///             </dd>
    ///          </dl>
    ///          <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
    func updateTagsForResource(input: UpdateTagsForResourceInput, completion: @escaping (SdkResult<UpdateTagsForResourceOutputResponse, UpdateTagsForResourceOutputError>) -> Void)
    /// <p>Takes a set of configuration settings and either a configuration template or
    ///       environment, and determines whether those values are valid.</p>
    ///          <p>This action returns a list of messages indicating any errors or warnings associated
    ///       with the selection of option values.</p>
    func validateConfigurationSettings(input: ValidateConfigurationSettingsInput, completion: @escaping (SdkResult<ValidateConfigurationSettingsOutputResponse, ValidateConfigurationSettingsOutputError>) -> Void)
}
