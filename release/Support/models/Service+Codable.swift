// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Service: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case categories
        case code
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categories = categories {
            var categoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categories)
            for categorylist0 in categories {
                try categoriesContainer.encode(categorylist0)
            }
        }
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let categoriesContainer = try containerValues.decodeIfPresent([Category].self, forKey: .categories)
        var categoriesDecoded0:[Category]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [Category]()
            for structure0 in categoriesContainer {
                categoriesDecoded0?.append(structure0)
            }
        }
        categories = categoriesDecoded0
    }
}
