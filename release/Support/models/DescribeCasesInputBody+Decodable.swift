// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCasesInputBody: Equatable {
    public let caseIdList: [String]?
    public let displayId: String?
    public let afterTime: String?
    public let beforeTime: String?
    public let includeResolvedCases: Bool
    public let nextToken: String?
    public let maxResults: Int?
    public let language: String?
    public let includeCommunications: Bool?
}

extension DescribeCasesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case afterTime
        case beforeTime
        case caseIdList
        case displayId
        case includeCommunications
        case includeResolvedCases
        case language
        case maxResults
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caseIdListContainer = try containerValues.decodeIfPresent([String].self, forKey: .caseIdList)
        var caseIdListDecoded0:[String]? = nil
        if let caseIdListContainer = caseIdListContainer {
            caseIdListDecoded0 = [String]()
            for string0 in caseIdListContainer {
                caseIdListDecoded0?.append(string0)
            }
        }
        caseIdList = caseIdListDecoded0
        let displayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayId)
        displayId = displayIdDecoded
        let afterTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .afterTime)
        afterTime = afterTimeDecoded
        let beforeTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .beforeTime)
        beforeTime = beforeTimeDecoded
        let includeResolvedCasesDecoded = try containerValues.decode(Bool.self, forKey: .includeResolvedCases)
        includeResolvedCases = includeResolvedCasesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let languageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .language)
        language = languageDecoded
        let includeCommunicationsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .includeCommunications)
        includeCommunications = includeCommunicationsDecoded
    }
}
