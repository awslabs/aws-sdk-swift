// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeCasesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case afterTime
        case beforeTime
        case caseIdList
        case displayId
        case includeCommunications
        case includeResolvedCases
        case language
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afterTime = afterTime {
            try encodeContainer.encode(afterTime, forKey: .afterTime)
        }
        if let beforeTime = beforeTime {
            try encodeContainer.encode(beforeTime, forKey: .beforeTime)
        }
        if let caseIdList = caseIdList {
            var caseIdListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .caseIdList)
            for caseidlist0 in caseIdList {
                try caseIdListContainer.encode(caseidlist0)
            }
        }
        if let displayId = displayId {
            try encodeContainer.encode(displayId, forKey: .displayId)
        }
        if let includeCommunications = includeCommunications {
            try encodeContainer.encode(includeCommunications, forKey: .includeCommunications)
        }
        if includeResolvedCases != false {
            try encodeContainer.encode(includeResolvedCases, forKey: .includeResolvedCases)
        }
        if let language = language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}
