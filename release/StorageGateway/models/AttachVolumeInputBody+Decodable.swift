// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AttachVolumeInputBody: Equatable {
    public let gatewayARN: String?
    public let targetName: String?
    public let volumeARN: String?
    public let networkInterfaceId: String?
    public let diskId: String?
}

extension AttachVolumeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case diskId = "DiskId"
        case gatewayARN = "GatewayARN"
        case networkInterfaceId = "NetworkInterfaceId"
        case targetName = "TargetName"
        case volumeARN = "VolumeARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let targetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetName)
        targetName = targetNameDecoded
        let volumeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeARN)
        volumeARN = volumeARNDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let diskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskId)
        diskId = diskIdDecoded
    }
}
