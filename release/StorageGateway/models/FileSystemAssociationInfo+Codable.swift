// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FileSystemAssociationInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case auditDestinationARN = "AuditDestinationARN"
        case cacheAttributes = "CacheAttributes"
        case fileSystemAssociationARN = "FileSystemAssociationARN"
        case fileSystemAssociationStatus = "FileSystemAssociationStatus"
        case gatewayARN = "GatewayARN"
        case locationARN = "LocationARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditDestinationARN = auditDestinationARN {
            try encodeContainer.encode(auditDestinationARN, forKey: .auditDestinationARN)
        }
        if let cacheAttributes = cacheAttributes {
            try encodeContainer.encode(cacheAttributes, forKey: .cacheAttributes)
        }
        if let fileSystemAssociationARN = fileSystemAssociationARN {
            try encodeContainer.encode(fileSystemAssociationARN, forKey: .fileSystemAssociationARN)
        }
        if let fileSystemAssociationStatus = fileSystemAssociationStatus {
            try encodeContainer.encode(fileSystemAssociationStatus, forKey: .fileSystemAssociationStatus)
        }
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let locationARN = locationARN {
            try encodeContainer.encode(locationARN, forKey: .locationARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemAssociationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileSystemAssociationARN)
        fileSystemAssociationARN = fileSystemAssociationARNDecoded
        let locationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .locationARN)
        locationARN = locationARNDecoded
        let fileSystemAssociationStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileSystemAssociationStatus)
        fileSystemAssociationStatus = fileSystemAssociationStatusDecoded
        let auditDestinationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .auditDestinationARN)
        auditDestinationARN = auditDestinationARNDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let cacheAttributesDecoded = try containerValues.decodeIfPresent(CacheAttributes.self, forKey: .cacheAttributes)
        cacheAttributes = cacheAttributesDecoded
    }
}
