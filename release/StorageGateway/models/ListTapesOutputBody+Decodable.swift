// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTapesOutputBody: Equatable {
    public let tapeInfos: [TapeInfo]?
    public let marker: String?
}

extension ListTapesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case tapeInfos = "TapeInfos"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeInfosContainer = try containerValues.decodeIfPresent([TapeInfo].self, forKey: .tapeInfos)
        var tapeInfosDecoded0:[TapeInfo]? = nil
        if let tapeInfosContainer = tapeInfosContainer {
            tapeInfosDecoded0 = [TapeInfo]()
            for structure0 in tapeInfosContainer {
                tapeInfosDecoded0?.append(structure0)
            }
        }
        tapeInfos = tapeInfosDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
