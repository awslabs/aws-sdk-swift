// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutomaticTapeCreationRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case minimumNumTapes = "MinimumNumTapes"
        case poolId = "PoolId"
        case tapeBarcodePrefix = "TapeBarcodePrefix"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case worm = "Worm"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minimumNumTapes = minimumNumTapes {
            try encodeContainer.encode(minimumNumTapes, forKey: .minimumNumTapes)
        }
        if let poolId = poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let tapeBarcodePrefix = tapeBarcodePrefix {
            try encodeContainer.encode(tapeBarcodePrefix, forKey: .tapeBarcodePrefix)
        }
        if let tapeSizeInBytes = tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if worm != false {
            try encodeContainer.encode(worm, forKey: .worm)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeBarcodePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeBarcodePrefix)
        tapeBarcodePrefix = tapeBarcodePrefixDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let tapeSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tapeSizeInBytes)
        tapeSizeInBytes = tapeSizeInBytesDecoded
        let minimumNumTapesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumNumTapes)
        minimumNumTapes = minimumNumTapesDecoded
        let wormDecoded = try containerValues.decode(Bool.self, forKey: .worm)
        worm = wormDecoded
    }
}
