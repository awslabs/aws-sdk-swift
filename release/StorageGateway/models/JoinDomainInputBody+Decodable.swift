// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct JoinDomainInputBody: Equatable {
    public let gatewayARN: String?
    public let domainName: String?
    public let organizationalUnit: String?
    public let domainControllers: [String]?
    public let timeoutInSeconds: Int?
    public let userName: String?
    public let password: String?
}

extension JoinDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domainControllers = "DomainControllers"
        case domainName = "DomainName"
        case gatewayARN = "GatewayARN"
        case organizationalUnit = "OrganizationalUnit"
        case password = "Password"
        case timeoutInSeconds = "TimeoutInSeconds"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
        let domainControllersContainer = try containerValues.decodeIfPresent([String].self, forKey: .domainControllers)
        var domainControllersDecoded0:[String]? = nil
        if let domainControllersContainer = domainControllersContainer {
            domainControllersDecoded0 = [String]()
            for string0 in domainControllersContainer {
                domainControllersDecoded0?.append(string0)
            }
        }
        domainControllers = domainControllersDecoded0
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
    }
}
