// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListTapesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case limit = "Limit"
        case marker = "Marker"
        case tapeARNs = "TapeARNs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let tapeARNs = tapeARNs {
            var tapeARNsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tapeARNs)
            for tapearns0 in tapeARNs {
                try tapeARNsContainer.encode(tapearns0)
            }
        }
    }
}
