// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PoolInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case poolARN = "PoolARN"
        case poolName = "PoolName"
        case poolStatus = "PoolStatus"
        case retentionLockTimeInDays = "RetentionLockTimeInDays"
        case retentionLockType = "RetentionLockType"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let poolARN = poolARN {
            try encodeContainer.encode(poolARN, forKey: .poolARN)
        }
        if let poolName = poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let poolStatus = poolStatus {
            try encodeContainer.encode(poolStatus.rawValue, forKey: .poolStatus)
        }
        if let retentionLockTimeInDays = retentionLockTimeInDays {
            try encodeContainer.encode(retentionLockTimeInDays, forKey: .retentionLockTimeInDays)
        }
        if let retentionLockType = retentionLockType {
            try encodeContainer.encode(retentionLockType.rawValue, forKey: .retentionLockType)
        }
        if let storageClass = storageClass {
            try encodeContainer.encode(storageClass.rawValue, forKey: .storageClass)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolARN)
        poolARN = poolARNDecoded
        let poolNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(TapeStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let retentionLockTypeDecoded = try containerValues.decodeIfPresent(RetentionLockType.self, forKey: .retentionLockType)
        retentionLockType = retentionLockTypeDecoded
        let retentionLockTimeInDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retentionLockTimeInDays)
        retentionLockTimeInDays = retentionLockTimeInDaysDecoded
        let poolStatusDecoded = try containerValues.decodeIfPresent(PoolStatus.self, forKey: .poolStatus)
        poolStatus = poolStatusDecoded
    }
}
