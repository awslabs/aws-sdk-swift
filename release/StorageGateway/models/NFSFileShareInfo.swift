// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The Unix file permissions and ownership information assigned, by default, to native S3
///          objects when file gateway discovers them in S3 buckets. This operation is only supported in
///          file gateways.</p>
public struct NFSFileShareInfo: Equatable {
    /// <p>Refresh cache information for the file share.</p>
    public let cacheAttributes: CacheAttributes?
    /// <p>The list of clients that are allowed to access the file gateway. The list must contain
    ///          either valid IP addresses or valid CIDR blocks.</p>
    public let clientList: [String]?
    /// <p>The default storage class for objects put into an Amazon S3 bucket by the file gateway.
    ///          The default value is <code>S3_INTELLIGENT_TIERING</code>. Optional.</p>
    ///
    ///          <p>Valid Values: <code>S3_STANDARD</code> | <code>S3_INTELLIGENT_TIERING</code> |
    ///             <code>S3_STANDARD_IA</code> | <code>S3_ONEZONE_IA</code>
    ///          </p>
    public let defaultStorageClass: String?
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    public let fileShareARN: String?
    /// <p>The ID of the file share.</p>
    public let fileShareId: String?
    /// <p>The name of the file share. Optional.</p>
    ///
    ///          <note>
    ///             <p>
    ///                <code>FileShareName</code> must be set if an S3 prefix name is set in
    ///                <code>LocationARN</code>.</p>
    ///          </note>
    public let fileShareName: String?
    /// <p>The status of the file share.</p>
    ///
    ///          <p>Valid Values: <code>CREATING</code> | <code>UPDATING</code> | <code>AVAILABLE</code> |
    ///             <code>DELETING</code>
    ///          </p>
    public let fileShareStatus: String?
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a>
    ///          operation to return a list of gateways for your account and AWS Region.</p>
    public let gatewayARN: String?
    /// <p>A value that enables guessing of the MIME type for uploaded objects based on file
    ///          extensions. Set this value to <code>true</code> to enable MIME type guessing, otherwise set
    ///          to <code>false</code>. The default value is <code>true</code>.</p>
    ///
    ///          <p>Valid Values: <code>true</code> | <code>false</code>
    ///          </p>
    public let guessMIMETypeEnabled: Bool?
    /// <p>Set to <code>true</code> to use Amazon S3 server-side encryption with your own AWS KMS
    ///          key, or <code>false</code> to use a key managed by Amazon S3. Optional.</p>
    ///
    ///          <p>Valid Values: <code>true</code> | <code>false</code>
    ///          </p>
    public let kMSEncrypted: Bool
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon
    ///          S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can
    ///          only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    public let kMSKey: String?
    /// <p>The ARN of the backend storage used for storing file data. A prefix name can be added to
    ///          the S3 bucket name. It must end with a "/".</p>
    public let locationARN: String?
    /// <p>Describes Network File System (NFS) file share default values. Files and folders stored
    ///          as Amazon S3 objects in S3 buckets don't, by default, have Unix file permissions
    ///          assigned to them. Upon discovery in an S3 bucket by Storage Gateway, the S3 objects that
    ///          represent files and folders are assigned these default Unix permissions. This operation is
    ///          only supported for file gateways.</p>
    public let nFSFileShareDefaults: NFSFileShareDefaults?
    /// <p>The notification policy of the file share. <code>SettlingTimeInSeconds</code> controls
    ///          the number of seconds to wait after the last point in time a client wrote to a file before
    ///          generating an <code>ObjectUploaded</code> notification. Because clients can make many small
    ///          writes to files, it's best to set this parameter for as long as possible to avoid
    ///          generating multiple notifications for the same file in a small time period.</p>
    ///
    ///          <note>
    ///             <p>
    ///                <code>SettlingTimeInSeconds</code> has no effect on the timing of the object
    ///             uploading to Amazon S3, only the timing of the notification.</p>
    ///          </note>
    ///
    ///          <p>The following example sets <code>NotificationPolicy</code> on with
    ///             <code>SettlingTimeInSeconds</code> set to 60.</p>
    ///
    ///          <p>
    ///             <code>{\"Upload\": {\"SettlingTimeInSeconds\": 60}}</code>
    ///          </p>
    ///
    ///          <p>The following example sets <code>NotificationPolicy</code> off.</p>
    ///
    ///          <p>
    ///             <code>{}</code>
    ///          </p>
    public let notificationPolicy: String?
    /// <p>A value that sets the access control list (ACL) permission for objects in the S3 bucket
    ///          that a file gateway puts objects into. The default value is <code>private</code>.</p>
    public let objectACL: ObjectACL?
    /// <p>The file share path used by the NFS client to identify the mount point.</p>
    public let path: String?
    /// <p>A value that sets the write status of a file share. Set this value to <code>true</code>
    ///          to set the write status to read-only, otherwise set to <code>false</code>.</p>
    ///
    ///          <p>Valid Values: <code>true</code> | <code>false</code>
    ///          </p>
    public let readOnly: Bool?
    /// <p>A value that sets who pays the cost of the request and the cost associated with data
    ///          download from the S3 bucket. If this value is set to <code>true</code>, the requester pays
    ///          the costs; otherwise, the S3 bucket owner pays. However, the S3 bucket owner always pays
    ///          the cost of storing data.</p>
    ///
    ///          <note>
    ///             <p>
    ///                <code>RequesterPays</code> is a configuration for the S3 bucket that backs the file
    ///             share, so make sure that the configuration on the file share is the same as the S3
    ///             bucket configuration.</p>
    ///          </note>
    ///
    ///          <p>Valid Values: <code>true</code> | <code>false</code>
    ///          </p>
    public let requesterPays: Bool?
    /// <p>The ARN of the IAM role that file gateway assumes when it accesses the underlying
    ///          storage.</p>
    public let role: String?
    /// <p>The user mapped to anonymous user. Valid options are the following:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>RootSquash</code>: Only root is mapped to anonymous user.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NoSquash</code>: No one is mapped to anonymous user.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AllSquash</code>: Everyone is mapped to anonymous user.</p>
    ///             </li>
    ///          </ul>
    public let squash: String?
    /// <p>A list of up to 50 tags assigned to the NFS file share, sorted alphabetically by key
    ///          name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can
    ///          view all tags using the <code>ListTagsForResource</code> API operation.</p>
    public let tags: [Tag]?

    public init (
        cacheAttributes: CacheAttributes? = nil,
        clientList: [String]? = nil,
        defaultStorageClass: String? = nil,
        fileShareARN: String? = nil,
        fileShareId: String? = nil,
        fileShareName: String? = nil,
        fileShareStatus: String? = nil,
        gatewayARN: String? = nil,
        guessMIMETypeEnabled: Bool? = nil,
        kMSEncrypted: Bool = false,
        kMSKey: String? = nil,
        locationARN: String? = nil,
        nFSFileShareDefaults: NFSFileShareDefaults? = nil,
        notificationPolicy: String? = nil,
        objectACL: ObjectACL? = nil,
        path: String? = nil,
        readOnly: Bool? = nil,
        requesterPays: Bool? = nil,
        role: String? = nil,
        squash: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.cacheAttributes = cacheAttributes
        self.clientList = clientList
        self.defaultStorageClass = defaultStorageClass
        self.fileShareARN = fileShareARN
        self.fileShareId = fileShareId
        self.fileShareName = fileShareName
        self.fileShareStatus = fileShareStatus
        self.gatewayARN = gatewayARN
        self.guessMIMETypeEnabled = guessMIMETypeEnabled
        self.kMSEncrypted = kMSEncrypted
        self.kMSKey = kMSKey
        self.locationARN = locationARN
        self.nFSFileShareDefaults = nFSFileShareDefaults
        self.notificationPolicy = notificationPolicy
        self.objectACL = objectACL
        self.path = path
        self.readOnly = readOnly
        self.requesterPays = requesterPays
        self.role = role
        self.squash = squash
        self.tags = tags
    }
}
