// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VTLDevice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceiSCSIAttributes = "DeviceiSCSIAttributes"
        case vTLDeviceARN = "VTLDeviceARN"
        case vTLDeviceProductIdentifier = "VTLDeviceProductIdentifier"
        case vTLDeviceType = "VTLDeviceType"
        case vTLDeviceVendor = "VTLDeviceVendor"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceiSCSIAttributes = deviceiSCSIAttributes {
            try encodeContainer.encode(deviceiSCSIAttributes, forKey: .deviceiSCSIAttributes)
        }
        if let vTLDeviceARN = vTLDeviceARN {
            try encodeContainer.encode(vTLDeviceARN, forKey: .vTLDeviceARN)
        }
        if let vTLDeviceProductIdentifier = vTLDeviceProductIdentifier {
            try encodeContainer.encode(vTLDeviceProductIdentifier, forKey: .vTLDeviceProductIdentifier)
        }
        if let vTLDeviceType = vTLDeviceType {
            try encodeContainer.encode(vTLDeviceType, forKey: .vTLDeviceType)
        }
        if let vTLDeviceVendor = vTLDeviceVendor {
            try encodeContainer.encode(vTLDeviceVendor, forKey: .vTLDeviceVendor)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vTLDeviceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vTLDeviceARN)
        vTLDeviceARN = vTLDeviceARNDecoded
        let vTLDeviceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vTLDeviceType)
        vTLDeviceType = vTLDeviceTypeDecoded
        let vTLDeviceVendorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vTLDeviceVendor)
        vTLDeviceVendor = vTLDeviceVendorDecoded
        let vTLDeviceProductIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vTLDeviceProductIdentifier)
        vTLDeviceProductIdentifier = vTLDeviceProductIdentifierDecoded
        let deviceiSCSIAttributesDecoded = try containerValues.decodeIfPresent(DeviceiSCSIAttributes.self, forKey: .deviceiSCSIAttributes)
        deviceiSCSIAttributes = deviceiSCSIAttributesDecoded
    }
}
