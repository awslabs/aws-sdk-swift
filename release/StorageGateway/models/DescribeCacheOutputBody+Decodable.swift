// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheOutputBody: Equatable {
    public let gatewayARN: String?
    public let diskIds: [String]?
    public let cacheAllocatedInBytes: Int
    public let cacheUsedPercentage: Double
    public let cacheDirtyPercentage: Double
    public let cacheHitPercentage: Double
    public let cacheMissPercentage: Double
}

extension DescribeCacheOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheAllocatedInBytes = "CacheAllocatedInBytes"
        case cacheDirtyPercentage = "CacheDirtyPercentage"
        case cacheHitPercentage = "CacheHitPercentage"
        case cacheMissPercentage = "CacheMissPercentage"
        case cacheUsedPercentage = "CacheUsedPercentage"
        case diskIds = "DiskIds"
        case gatewayARN = "GatewayARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let diskIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .diskIds)
        var diskIdsDecoded0:[String]? = nil
        if let diskIdsContainer = diskIdsContainer {
            diskIdsDecoded0 = [String]()
            for string0 in diskIdsContainer {
                diskIdsDecoded0?.append(string0)
            }
        }
        diskIds = diskIdsDecoded0
        let cacheAllocatedInBytesDecoded = try containerValues.decode(Int.self, forKey: .cacheAllocatedInBytes)
        cacheAllocatedInBytes = cacheAllocatedInBytesDecoded
        let cacheUsedPercentageDecoded = try containerValues.decode(Double.self, forKey: .cacheUsedPercentage)
        cacheUsedPercentage = cacheUsedPercentageDecoded
        let cacheDirtyPercentageDecoded = try containerValues.decode(Double.self, forKey: .cacheDirtyPercentage)
        cacheDirtyPercentage = cacheDirtyPercentageDecoded
        let cacheHitPercentageDecoded = try containerValues.decode(Double.self, forKey: .cacheHitPercentage)
        cacheHitPercentage = cacheHitPercentageDecoded
        let cacheMissPercentageDecoded = try containerValues.decode(Double.self, forKey: .cacheMissPercentage)
        cacheMissPercentage = cacheMissPercentageDecoded
    }
}
