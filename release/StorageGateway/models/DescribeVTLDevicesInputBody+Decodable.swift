// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVTLDevicesInputBody: Equatable {
    public let gatewayARN: String?
    public let vTLDeviceARNs: [String]?
    public let marker: String?
    public let limit: Int?
}

extension DescribeVTLDevicesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gatewayARN = "GatewayARN"
        case limit = "Limit"
        case marker = "Marker"
        case vTLDeviceARNs = "VTLDeviceARNs"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let vTLDeviceARNsContainer = try containerValues.decodeIfPresent([String].self, forKey: .vTLDeviceARNs)
        var vTLDeviceARNsDecoded0:[String]? = nil
        if let vTLDeviceARNsContainer = vTLDeviceARNsContainer {
            vTLDeviceARNsDecoded0 = [String]()
            for string0 in vTLDeviceARNsContainer {
                vTLDeviceARNsDecoded0?.append(string0)
            }
        }
        vTLDeviceARNs = vTLDeviceARNsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
