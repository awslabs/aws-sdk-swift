// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VolumeRecoveryPointInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case volumeARN = "VolumeARN"
        case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
        case volumeSizeInBytes = "VolumeSizeInBytes"
        case volumeUsageInBytes = "VolumeUsageInBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let volumeARN = volumeARN {
            try encodeContainer.encode(volumeARN, forKey: .volumeARN)
        }
        if let volumeRecoveryPointTime = volumeRecoveryPointTime {
            try encodeContainer.encode(volumeRecoveryPointTime, forKey: .volumeRecoveryPointTime)
        }
        if volumeSizeInBytes != 0 {
            try encodeContainer.encode(volumeSizeInBytes, forKey: .volumeSizeInBytes)
        }
        if volumeUsageInBytes != 0 {
            try encodeContainer.encode(volumeUsageInBytes, forKey: .volumeUsageInBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeARN)
        volumeARN = volumeARNDecoded
        let volumeSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .volumeSizeInBytes)
        volumeSizeInBytes = volumeSizeInBytesDecoded
        let volumeUsageInBytesDecoded = try containerValues.decode(Int.self, forKey: .volumeUsageInBytes)
        volumeUsageInBytes = volumeUsageInBytesDecoded
        let volumeRecoveryPointTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeRecoveryPointTime)
        volumeRecoveryPointTime = volumeRecoveryPointTimeDecoded
    }
}
