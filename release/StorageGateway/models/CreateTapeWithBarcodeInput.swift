// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>CreateTapeWithBarcodeInput</p>
public struct CreateTapeWithBarcodeInput: Equatable {
    /// <p>The unique Amazon Resource Name (ARN) that represents the gateway to associate the
    ///          virtual tape with. Use the <a>ListGateways</a> operation to return a list of
    ///          gateways for your account and AWS Region.</p>
    public let gatewayARN: String?
    /// <p>Set to <code>true</code> to use Amazon S3 server-side encryption with your own AWS KMS
    ///          key, or <code>false</code> to use a key managed by Amazon S3. Optional.</p>
    ///
    ///          <p>Valid Values: <code>true</code> | <code>false</code>
    ///          </p>
    public let kMSEncrypted: Bool?
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon
    ///          S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can
    ///          only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    public let kMSKey: String?
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this
    ///          pool is archived in the S3 storage class that is associated with the pool. When you use
    ///          your backup application to eject the tape, the tape is archived directly into the storage
    ///          class (S3 Glacier or S3 Deep Archive) that corresponds to the pool.</p>
    ///
    ///          <p>Valid Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code>
    ///          </p>
    public let poolId: String?
    /// <p>A list of up to 50 tags that can be assigned to a virtual tape that has a barcode. Each
    ///          tag is a key-value pair.</p>
    ///
    ///          <note>
    ///             <p>Valid characters for key and value are letters, spaces, and numbers representable in
    ///             UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length
    ///             of a tag's key is 128 characters, and the maximum length for a tag's value is
    ///             256.</p>
    ///          </note>
    public let tags: [Tag]?
    /// <p>The barcode that you want to assign to the tape.</p>
    ///
    ///          <note>
    ///             <p>Barcodes cannot be reused. This includes barcodes used for tapes that have been
    ///             deleted.</p>
    ///          </note>
    public let tapeBarcode: String?
    /// <p>The size, in bytes, of the virtual tape that you want to create.</p>
    ///
    ///          <note>
    ///             <p>The size must be aligned by gigabyte (1024*1024*1024 bytes).</p>
    ///          </note>
    public let tapeSizeInBytes: Int?
    /// <p>Set to <code>TRUE</code> if the tape you are creating is to be configured as a
    ///          write-once-read-many (WORM) tape.</p>
    public let worm: Bool

    public init (
        gatewayARN: String? = nil,
        kMSEncrypted: Bool? = nil,
        kMSKey: String? = nil,
        poolId: String? = nil,
        tags: [Tag]? = nil,
        tapeBarcode: String? = nil,
        tapeSizeInBytes: Int? = nil,
        worm: Bool = false
    )
    {
        self.gatewayARN = gatewayARN
        self.kMSEncrypted = kMSEncrypted
        self.kMSKey = kMSKey
        self.poolId = poolId
        self.tags = tags
        self.tapeBarcode = tapeBarcode
        self.tapeSizeInBytes = tapeSizeInBytes
        self.worm = worm
    }
}
