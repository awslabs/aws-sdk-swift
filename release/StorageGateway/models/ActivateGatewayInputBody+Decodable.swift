// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ActivateGatewayInputBody: Equatable {
    public let activationKey: String?
    public let gatewayName: String?
    public let gatewayTimezone: String?
    public let gatewayRegion: String?
    public let gatewayType: String?
    public let tapeDriveType: String?
    public let mediumChangerType: String?
    public let tags: [Tag]?
}

extension ActivateGatewayInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case activationKey = "ActivationKey"
        case gatewayName = "GatewayName"
        case gatewayRegion = "GatewayRegion"
        case gatewayTimezone = "GatewayTimezone"
        case gatewayType = "GatewayType"
        case mediumChangerType = "MediumChangerType"
        case tags = "Tags"
        case tapeDriveType = "TapeDriveType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activationKey)
        activationKey = activationKeyDecoded
        let gatewayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayName)
        gatewayName = gatewayNameDecoded
        let gatewayTimezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayTimezone)
        gatewayTimezone = gatewayTimezoneDecoded
        let gatewayRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayRegion)
        gatewayRegion = gatewayRegionDecoded
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let tapeDriveTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeDriveType)
        tapeDriveType = tapeDriveTypeDecoded
        let mediumChangerTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediumChangerType)
        mediumChangerType = mediumChangerTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
