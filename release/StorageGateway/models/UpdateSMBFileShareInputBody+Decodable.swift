// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSMBFileShareInputBody: Equatable {
    public let fileShareARN: String?
    public let kMSEncrypted: Bool?
    public let kMSKey: String?
    public let defaultStorageClass: String?
    public let objectACL: ObjectACL?
    public let readOnly: Bool?
    public let guessMIMETypeEnabled: Bool?
    public let requesterPays: Bool?
    public let sMBACLEnabled: Bool?
    public let accessBasedEnumeration: Bool?
    public let adminUserList: [String]?
    public let validUserList: [String]?
    public let invalidUserList: [String]?
    public let auditDestinationARN: String?
    public let caseSensitivity: CaseSensitivity?
    public let fileShareName: String?
    public let cacheAttributes: CacheAttributes?
    public let notificationPolicy: String?
}

extension UpdateSMBFileShareInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessBasedEnumeration = "AccessBasedEnumeration"
        case adminUserList = "AdminUserList"
        case auditDestinationARN = "AuditDestinationARN"
        case cacheAttributes = "CacheAttributes"
        case caseSensitivity = "CaseSensitivity"
        case defaultStorageClass = "DefaultStorageClass"
        case fileShareARN = "FileShareARN"
        case fileShareName = "FileShareName"
        case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
        case invalidUserList = "InvalidUserList"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case notificationPolicy = "NotificationPolicy"
        case objectACL = "ObjectACL"
        case readOnly = "ReadOnly"
        case requesterPays = "RequesterPays"
        case sMBACLEnabled = "SMBACLEnabled"
        case validUserList = "ValidUserList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileShareARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileShareARN)
        fileShareARN = fileShareARNDecoded
        let kMSEncryptedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .kMSEncrypted)
        kMSEncrypted = kMSEncryptedDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let defaultStorageClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultStorageClass)
        defaultStorageClass = defaultStorageClassDecoded
        let objectACLDecoded = try containerValues.decodeIfPresent(ObjectACL.self, forKey: .objectACL)
        objectACL = objectACLDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let guessMIMETypeEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .guessMIMETypeEnabled)
        guessMIMETypeEnabled = guessMIMETypeEnabledDecoded
        let requesterPaysDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .requesterPays)
        requesterPays = requesterPaysDecoded
        let sMBACLEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .sMBACLEnabled)
        sMBACLEnabled = sMBACLEnabledDecoded
        let accessBasedEnumerationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .accessBasedEnumeration)
        accessBasedEnumeration = accessBasedEnumerationDecoded
        let adminUserListContainer = try containerValues.decodeIfPresent([String].self, forKey: .adminUserList)
        var adminUserListDecoded0:[String]? = nil
        if let adminUserListContainer = adminUserListContainer {
            adminUserListDecoded0 = [String]()
            for string0 in adminUserListContainer {
                adminUserListDecoded0?.append(string0)
            }
        }
        adminUserList = adminUserListDecoded0
        let validUserListContainer = try containerValues.decodeIfPresent([String].self, forKey: .validUserList)
        var validUserListDecoded0:[String]? = nil
        if let validUserListContainer = validUserListContainer {
            validUserListDecoded0 = [String]()
            for string0 in validUserListContainer {
                validUserListDecoded0?.append(string0)
            }
        }
        validUserList = validUserListDecoded0
        let invalidUserListContainer = try containerValues.decodeIfPresent([String].self, forKey: .invalidUserList)
        var invalidUserListDecoded0:[String]? = nil
        if let invalidUserListContainer = invalidUserListContainer {
            invalidUserListDecoded0 = [String]()
            for string0 in invalidUserListContainer {
                invalidUserListDecoded0?.append(string0)
            }
        }
        invalidUserList = invalidUserListDecoded0
        let auditDestinationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .auditDestinationARN)
        auditDestinationARN = auditDestinationARNDecoded
        let caseSensitivityDecoded = try containerValues.decodeIfPresent(CaseSensitivity.self, forKey: .caseSensitivity)
        caseSensitivity = caseSensitivityDecoded
        let fileShareNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileShareName)
        fileShareName = fileShareNameDecoded
        let cacheAttributesDecoded = try containerValues.decodeIfPresent(CacheAttributes.self, forKey: .cacheAttributes)
        cacheAttributes = cacheAttributesDecoded
        let notificationPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notificationPolicy)
        notificationPolicy = notificationPolicyDecoded
    }
}
