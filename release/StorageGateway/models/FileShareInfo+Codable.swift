// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FileShareInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fileShareARN = "FileShareARN"
        case fileShareId = "FileShareId"
        case fileShareStatus = "FileShareStatus"
        case fileShareType = "FileShareType"
        case gatewayARN = "GatewayARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileShareARN = fileShareARN {
            try encodeContainer.encode(fileShareARN, forKey: .fileShareARN)
        }
        if let fileShareId = fileShareId {
            try encodeContainer.encode(fileShareId, forKey: .fileShareId)
        }
        if let fileShareStatus = fileShareStatus {
            try encodeContainer.encode(fileShareStatus, forKey: .fileShareStatus)
        }
        if let fileShareType = fileShareType {
            try encodeContainer.encode(fileShareType.rawValue, forKey: .fileShareType)
        }
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileShareTypeDecoded = try containerValues.decodeIfPresent(FileShareType.self, forKey: .fileShareType)
        fileShareType = fileShareTypeDecoded
        let fileShareARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileShareARN)
        fileShareARN = fileShareARNDecoded
        let fileShareIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileShareId)
        fileShareId = fileShareIdDecoded
        let fileShareStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fileShareStatus)
        fileShareStatus = fileShareStatusDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
    }
}
