// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceiSCSIAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case chapEnabled = "ChapEnabled"
        case networkInterfaceId = "NetworkInterfaceId"
        case networkInterfacePort = "NetworkInterfacePort"
        case targetARN = "TargetARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if chapEnabled != false {
            try encodeContainer.encode(chapEnabled, forKey: .chapEnabled)
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if networkInterfacePort != 0 {
            try encodeContainer.encode(networkInterfacePort, forKey: .networkInterfacePort)
        }
        if let targetARN = targetARN {
            try encodeContainer.encode(targetARN, forKey: .targetARN)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetARN)
        targetARN = targetARNDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let networkInterfacePortDecoded = try containerValues.decode(Int.self, forKey: .networkInterfacePort)
        networkInterfacePort = networkInterfacePortDecoded
        let chapEnabledDecoded = try containerValues.decode(Bool.self, forKey: .chapEnabled)
        chapEnabled = chapEnabledDecoded
    }
}
