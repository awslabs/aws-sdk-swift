// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssociateFileSystemInputBody: Equatable {
    public let userName: String?
    public let password: String?
    public let clientToken: String?
    public let gatewayARN: String?
    public let locationARN: String?
    public let tags: [Tag]?
    public let auditDestinationARN: String?
    public let cacheAttributes: CacheAttributes?
}

extension AssociateFileSystemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case auditDestinationARN = "AuditDestinationARN"
        case cacheAttributes = "CacheAttributes"
        case clientToken = "ClientToken"
        case gatewayARN = "GatewayARN"
        case locationARN = "LocationARN"
        case password = "Password"
        case tags = "Tags"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let locationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .locationARN)
        locationARN = locationARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let auditDestinationARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .auditDestinationARN)
        auditDestinationARN = auditDestinationARNDecoded
        let cacheAttributesDecoded = try containerValues.decodeIfPresent(CacheAttributes.self, forKey: .cacheAttributes)
        cacheAttributes = cacheAttributesDecoded
    }
}
