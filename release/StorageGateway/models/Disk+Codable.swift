// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Disk: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case diskAllocationResource = "DiskAllocationResource"
        case diskAllocationType = "DiskAllocationType"
        case diskAttributeList = "DiskAttributeList"
        case diskId = "DiskId"
        case diskNode = "DiskNode"
        case diskPath = "DiskPath"
        case diskSizeInBytes = "DiskSizeInBytes"
        case diskStatus = "DiskStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskAllocationResource = diskAllocationResource {
            try encodeContainer.encode(diskAllocationResource, forKey: .diskAllocationResource)
        }
        if let diskAllocationType = diskAllocationType {
            try encodeContainer.encode(diskAllocationType, forKey: .diskAllocationType)
        }
        if let diskAttributeList = diskAttributeList {
            var diskAttributeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .diskAttributeList)
            for diskattributelist0 in diskAttributeList {
                try diskAttributeListContainer.encode(diskattributelist0)
            }
        }
        if let diskId = diskId {
            try encodeContainer.encode(diskId, forKey: .diskId)
        }
        if let diskNode = diskNode {
            try encodeContainer.encode(diskNode, forKey: .diskNode)
        }
        if let diskPath = diskPath {
            try encodeContainer.encode(diskPath, forKey: .diskPath)
        }
        if diskSizeInBytes != 0 {
            try encodeContainer.encode(diskSizeInBytes, forKey: .diskSizeInBytes)
        }
        if let diskStatus = diskStatus {
            try encodeContainer.encode(diskStatus, forKey: .diskStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskId)
        diskId = diskIdDecoded
        let diskPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskPath)
        diskPath = diskPathDecoded
        let diskNodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskNode)
        diskNode = diskNodeDecoded
        let diskStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskStatus)
        diskStatus = diskStatusDecoded
        let diskSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .diskSizeInBytes)
        diskSizeInBytes = diskSizeInBytesDecoded
        let diskAllocationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskAllocationType)
        diskAllocationType = diskAllocationTypeDecoded
        let diskAllocationResourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskAllocationResource)
        diskAllocationResource = diskAllocationResourceDecoded
        let diskAttributeListContainer = try containerValues.decodeIfPresent([String].self, forKey: .diskAttributeList)
        var diskAttributeListDecoded0:[String]? = nil
        if let diskAttributeListContainer = diskAttributeListContainer {
            diskAttributeListDecoded0 = [String]()
            for string0 in diskAttributeListContainer {
                diskAttributeListDecoded0?.append(string0)
            }
        }
        diskAttributeList = diskAttributeListDecoded0
    }
}
