// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct AssignTapePoolInput: Equatable {
    /// <p>Set permissions to bypass governance retention. If the lock type of the archived tape is
    ///             <code>Governance</code>, the tape's archived age is not older than
    ///             <code>RetentionLockInDays</code>, and the user does not already have
    ///             <code>BypassGovernanceRetention</code>, setting this to TRUE enables the user to bypass
    ///          the retention lock. This parameter is set to true by default for calls from the
    ///          console.</p>
    ///
    ///          <p>Valid values: <code>TRUE</code> | <code>FALSE</code>
    ///          </p>
    public let bypassGovernanceRetention: Bool
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this
    ///          pool is archived in the S3 storage class that is associated with the pool. When you use
    ///          your backup application to eject the tape, the tape is archived directly into the storage
    ///          class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    ///
    ///          <p>Valid Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code>
    ///          </p>
    public let poolId: String?
    /// <p>The unique Amazon Resource Name (ARN) of the virtual tape that you want to add to the
    ///          tape pool.</p>
    public let tapeARN: String?

    public init (
        bypassGovernanceRetention: Bool = false,
        poolId: String? = nil,
        tapeARN: String? = nil
    )
    {
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.poolId = poolId
        self.tapeARN = tapeARN
    }
}
