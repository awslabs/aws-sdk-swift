// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCachediSCSIVolumeInputBody: Equatable {
    public let gatewayARN: String?
    public let volumeSizeInBytes: Int
    public let snapshotId: String?
    public let targetName: String?
    public let sourceVolumeARN: String?
    public let networkInterfaceId: String?
    public let clientToken: String?
    public let kMSEncrypted: Bool?
    public let kMSKey: String?
    public let tags: [Tag]?
}

extension CreateCachediSCSIVolumeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case gatewayARN = "GatewayARN"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case networkInterfaceId = "NetworkInterfaceId"
        case snapshotId = "SnapshotId"
        case sourceVolumeARN = "SourceVolumeARN"
        case tags = "Tags"
        case targetName = "TargetName"
        case volumeSizeInBytes = "VolumeSizeInBytes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let volumeSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .volumeSizeInBytes)
        volumeSizeInBytes = volumeSizeInBytesDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let targetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetName)
        targetName = targetNameDecoded
        let sourceVolumeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVolumeARN)
        sourceVolumeARN = sourceVolumeARNDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let kMSEncryptedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .kMSEncrypted)
        kMSEncrypted = kMSEncryptedDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
