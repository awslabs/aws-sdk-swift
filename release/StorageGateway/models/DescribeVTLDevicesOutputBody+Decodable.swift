// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVTLDevicesOutputBody: Equatable {
    public let gatewayARN: String?
    public let vTLDevices: [VTLDevice]?
    public let marker: String?
}

extension DescribeVTLDevicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gatewayARN = "GatewayARN"
        case marker = "Marker"
        case vTLDevices = "VTLDevices"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let vTLDevicesContainer = try containerValues.decodeIfPresent([VTLDevice].self, forKey: .vTLDevices)
        var vTLDevicesDecoded0:[VTLDevice]? = nil
        if let vTLDevicesContainer = vTLDevicesContainer {
            vTLDevicesDecoded0 = [VTLDevice]()
            for structure0 in vTLDevicesContainer {
                vTLDevicesDecoded0?.append(structure0)
            }
        }
        vTLDevices = vTLDevicesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
