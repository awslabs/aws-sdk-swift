// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TapeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gatewayARN = "GatewayARN"
        case poolEntryDate = "PoolEntryDate"
        case poolId = "PoolId"
        case retentionStartDate = "RetentionStartDate"
        case tapeARN = "TapeARN"
        case tapeBarcode = "TapeBarcode"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case tapeStatus = "TapeStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gatewayARN = gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let poolEntryDate = poolEntryDate {
            try encodeContainer.encode(poolEntryDate.timeIntervalSince1970, forKey: .poolEntryDate)
        }
        if let poolId = poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let retentionStartDate = retentionStartDate {
            try encodeContainer.encode(retentionStartDate.timeIntervalSince1970, forKey: .retentionStartDate)
        }
        if let tapeARN = tapeARN {
            try encodeContainer.encode(tapeARN, forKey: .tapeARN)
        }
        if let tapeBarcode = tapeBarcode {
            try encodeContainer.encode(tapeBarcode, forKey: .tapeBarcode)
        }
        if let tapeSizeInBytes = tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if let tapeStatus = tapeStatus {
            try encodeContainer.encode(tapeStatus, forKey: .tapeStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeARN)
        tapeARN = tapeARNDecoded
        let tapeBarcodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeBarcode)
        tapeBarcode = tapeBarcodeDecoded
        let tapeSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tapeSizeInBytes)
        tapeSizeInBytes = tapeSizeInBytesDecoded
        let tapeStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeStatus)
        tapeStatus = tapeStatusDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let retentionStartDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .retentionStartDate)
        retentionStartDate = retentionStartDateDecoded
        let poolEntryDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .poolEntryDate)
        poolEntryDate = poolEntryDateDecoded
    }
}
