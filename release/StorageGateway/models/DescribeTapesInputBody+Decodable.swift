// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTapesInputBody: Equatable {
    public let gatewayARN: String?
    public let tapeARNs: [String]?
    public let marker: String?
    public let limit: Int?
}

extension DescribeTapesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case gatewayARN = "GatewayARN"
        case limit = "Limit"
        case marker = "Marker"
        case tapeARNs = "TapeARNs"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let tapeARNsContainer = try containerValues.decodeIfPresent([String].self, forKey: .tapeARNs)
        var tapeARNsDecoded0:[String]? = nil
        if let tapeARNsContainer = tapeARNsContainer {
            tapeARNsDecoded0 = [String]()
            for string0 in tapeARNsContainer {
                tapeARNsDecoded0?.append(string0)
            }
        }
        tapeARNs = tapeARNsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
