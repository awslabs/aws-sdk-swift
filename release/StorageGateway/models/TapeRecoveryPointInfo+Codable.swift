// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TapeRecoveryPointInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tapeARN = "TapeARN"
        case tapeRecoveryPointTime = "TapeRecoveryPointTime"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case tapeStatus = "TapeStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tapeARN = tapeARN {
            try encodeContainer.encode(tapeARN, forKey: .tapeARN)
        }
        if let tapeRecoveryPointTime = tapeRecoveryPointTime {
            try encodeContainer.encode(tapeRecoveryPointTime.timeIntervalSince1970, forKey: .tapeRecoveryPointTime)
        }
        if let tapeSizeInBytes = tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if let tapeStatus = tapeStatus {
            try encodeContainer.encode(tapeStatus, forKey: .tapeStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeARN)
        tapeARN = tapeARNDecoded
        let tapeRecoveryPointTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .tapeRecoveryPointTime)
        tapeRecoveryPointTime = tapeRecoveryPointTimeDecoded
        let tapeSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tapeSizeInBytes)
        tapeSizeInBytes = tapeSizeInBytesDecoded
        let tapeStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tapeStatus)
        tapeStatus = tapeStatusDecoded
    }
}
