// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeGatewayInformationOutputBody: Equatable {
    public let gatewayARN: String?
    public let gatewayId: String?
    public let gatewayName: String?
    public let gatewayTimezone: String?
    public let gatewayState: String?
    public let gatewayNetworkInterfaces: [NetworkInterface]?
    public let gatewayType: String?
    public let nextUpdateAvailabilityDate: String?
    public let lastSoftwareUpdate: String?
    public let ec2InstanceId: String?
    public let ec2InstanceRegion: String?
    public let tags: [Tag]?
    public let vPCEndpoint: String?
    public let cloudWatchLogGroupARN: String?
    public let hostEnvironment: HostEnvironment?
    public let endpointType: String?
    public let softwareUpdatesEndDate: String?
    public let deprecationDate: String?
}

extension DescribeGatewayInformationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLogGroupARN = "CloudWatchLogGroupARN"
        case deprecationDate = "DeprecationDate"
        case ec2InstanceId = "Ec2InstanceId"
        case ec2InstanceRegion = "Ec2InstanceRegion"
        case endpointType = "EndpointType"
        case gatewayARN = "GatewayARN"
        case gatewayId = "GatewayId"
        case gatewayName = "GatewayName"
        case gatewayNetworkInterfaces = "GatewayNetworkInterfaces"
        case gatewayState = "GatewayState"
        case gatewayTimezone = "GatewayTimezone"
        case gatewayType = "GatewayType"
        case hostEnvironment = "HostEnvironment"
        case lastSoftwareUpdate = "LastSoftwareUpdate"
        case nextUpdateAvailabilityDate = "NextUpdateAvailabilityDate"
        case softwareUpdatesEndDate = "SoftwareUpdatesEndDate"
        case tags = "Tags"
        case vPCEndpoint = "VPCEndpoint"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let gatewayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayName)
        gatewayName = gatewayNameDecoded
        let gatewayTimezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayTimezone)
        gatewayTimezone = gatewayTimezoneDecoded
        let gatewayStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayState)
        gatewayState = gatewayStateDecoded
        let gatewayNetworkInterfacesContainer = try containerValues.decodeIfPresent([NetworkInterface].self, forKey: .gatewayNetworkInterfaces)
        var gatewayNetworkInterfacesDecoded0:[NetworkInterface]? = nil
        if let gatewayNetworkInterfacesContainer = gatewayNetworkInterfacesContainer {
            gatewayNetworkInterfacesDecoded0 = [NetworkInterface]()
            for structure0 in gatewayNetworkInterfacesContainer {
                gatewayNetworkInterfacesDecoded0?.append(structure0)
            }
        }
        gatewayNetworkInterfaces = gatewayNetworkInterfacesDecoded0
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let nextUpdateAvailabilityDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextUpdateAvailabilityDate)
        nextUpdateAvailabilityDate = nextUpdateAvailabilityDateDecoded
        let lastSoftwareUpdateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastSoftwareUpdate)
        lastSoftwareUpdate = lastSoftwareUpdateDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let ec2InstanceRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceRegion)
        ec2InstanceRegion = ec2InstanceRegionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let vPCEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vPCEndpoint)
        vPCEndpoint = vPCEndpointDecoded
        let cloudWatchLogGroupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudWatchLogGroupARN)
        cloudWatchLogGroupARN = cloudWatchLogGroupARNDecoded
        let hostEnvironmentDecoded = try containerValues.decodeIfPresent(HostEnvironment.self, forKey: .hostEnvironment)
        hostEnvironment = hostEnvironmentDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let softwareUpdatesEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .softwareUpdatesEndDate)
        softwareUpdatesEndDate = softwareUpdatesEndDateDecoded
        let deprecationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
    }
}
