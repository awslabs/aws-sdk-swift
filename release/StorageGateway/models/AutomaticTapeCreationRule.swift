// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An automatic tape creation policy consists of automatic tape creation rules where each
///          rule defines when and how to create new tapes. For more information about automatic tape
///          creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
public struct AutomaticTapeCreationRule: Equatable {
    /// <p>The minimum number of available virtual tapes that the gateway maintains at all times.
    ///          If the number of tapes on the gateway goes below this value, the gateway creates as many
    ///          new tapes as are needed to have <code>MinimumNumTapes</code> on the gateway. For more
    ///          information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
    public let minimumNumTapes: Int?
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this
    ///          pool is archived in the Amazon S3 storage class that is associated with the pool. When you
    ///          use your backup application to eject the tape, the tape is archived directly into the
    ///          storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    ///
    ///          <p>Valid Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code>
    ///          </p>
    public let poolId: String?
    /// <p>A prefix that you append to the barcode of the virtual tape that you are creating. This
    ///          prefix makes the barcode unique.</p>
    ///
    ///          <note>
    ///             <p>The prefix must be 1-4 characters in length and must be one of the uppercase letters
    ///             from A to Z.</p>
    ///          </note>
    public let tapeBarcodePrefix: String?
    /// <p>The size, in bytes, of the virtual tape capacity.</p>
    public let tapeSizeInBytes: Int?
    /// <p>Set to <code>true</code> to indicate that tapes are to be archived as
    ///          write-once-read-many (WORM). Set to <code>false</code> when WORM is not enabled for
    ///          tapes.</p>
    public let worm: Bool

    public init (
        minimumNumTapes: Int? = nil,
        poolId: String? = nil,
        tapeBarcodePrefix: String? = nil,
        tapeSizeInBytes: Int? = nil,
        worm: Bool = false
    )
    {
        self.minimumNumTapes = minimumNumTapes
        self.poolId = poolId
        self.tapeBarcodePrefix = tapeBarcodePrefix
        self.tapeSizeInBytes = tapeSizeInBytes
        self.worm = worm
    }
}
