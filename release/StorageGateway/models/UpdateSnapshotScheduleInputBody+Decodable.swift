// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSnapshotScheduleInputBody: Equatable {
    public let volumeARN: String?
    public let startAt: Int?
    public let recurrenceInHours: Int?
    public let description: String?
    public let tags: [Tag]?
}

extension UpdateSnapshotScheduleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case recurrenceInHours = "RecurrenceInHours"
        case startAt = "StartAt"
        case tags = "Tags"
        case volumeARN = "VolumeARN"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeARN)
        volumeARN = volumeARNDecoded
        let startAtDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startAt)
        startAt = startAtDecoded
        let recurrenceInHoursDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .recurrenceInHours)
        recurrenceInHours = recurrenceInHoursDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
