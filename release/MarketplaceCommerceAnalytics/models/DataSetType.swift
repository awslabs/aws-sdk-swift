// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DataSetType {
    case customerProfileByGeography
    case customerProfileByIndustry
    case customerProfileByRevenue
    case customerSubscriberAnnualSubscriptions
    case customerSubscriberHourlyMonthlySubscriptions
    case dailyBusinessCanceledProductSubscribers
    case dailyBusinessFees
    case dailyBusinessFreeTrialConversions
    case dailyBusinessNewInstances
    case dailyBusinessNewProductSubscribers
    case dailyBusinessUsageByInstanceType
    case disbursedAmountByAgeOfDisbursedFunds
    case disbursedAmountByAgeOfPastDueFunds
    case disbursedAmountByAgeOfUncollectedFunds
    case disbursedAmountByCustomerGeo
    case disbursedAmountByInstanceHours
    case disbursedAmountByProduct
    case disbursedAmountByProductWithUncollectedFunds
    case disbursedAmountByUncollectedFundsBreakdown
    case monthlyRevenueAnnualSubscriptions
    case monthlyRevenueBillingAndRevenueData
    case monthlyRevenueFieldDemonstrationUsage
    case monthlyRevenueFlexiblePaymentSchedule
    case salesCompensationBilledRevenue
    case usSalesAndUseTaxRecords
    case sdkUnknown(String)
}

extension DataSetType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DataSetType] {
        return [
            .customerProfileByGeography,
            .customerProfileByIndustry,
            .customerProfileByRevenue,
            .customerSubscriberAnnualSubscriptions,
            .customerSubscriberHourlyMonthlySubscriptions,
            .dailyBusinessCanceledProductSubscribers,
            .dailyBusinessFees,
            .dailyBusinessFreeTrialConversions,
            .dailyBusinessNewInstances,
            .dailyBusinessNewProductSubscribers,
            .dailyBusinessUsageByInstanceType,
            .disbursedAmountByAgeOfDisbursedFunds,
            .disbursedAmountByAgeOfPastDueFunds,
            .disbursedAmountByAgeOfUncollectedFunds,
            .disbursedAmountByCustomerGeo,
            .disbursedAmountByInstanceHours,
            .disbursedAmountByProduct,
            .disbursedAmountByProductWithUncollectedFunds,
            .disbursedAmountByUncollectedFundsBreakdown,
            .monthlyRevenueAnnualSubscriptions,
            .monthlyRevenueBillingAndRevenueData,
            .monthlyRevenueFieldDemonstrationUsage,
            .monthlyRevenueFlexiblePaymentSchedule,
            .salesCompensationBilledRevenue,
            .usSalesAndUseTaxRecords,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .customerProfileByGeography: return "customer_profile_by_geography"
        case .customerProfileByIndustry: return "customer_profile_by_industry"
        case .customerProfileByRevenue: return "customer_profile_by_revenue"
        case .customerSubscriberAnnualSubscriptions: return "customer_subscriber_annual_subscriptions"
        case .customerSubscriberHourlyMonthlySubscriptions: return "customer_subscriber_hourly_monthly_subscriptions"
        case .dailyBusinessCanceledProductSubscribers: return "daily_business_canceled_product_subscribers"
        case .dailyBusinessFees: return "daily_business_fees"
        case .dailyBusinessFreeTrialConversions: return "daily_business_free_trial_conversions"
        case .dailyBusinessNewInstances: return "daily_business_new_instances"
        case .dailyBusinessNewProductSubscribers: return "daily_business_new_product_subscribers"
        case .dailyBusinessUsageByInstanceType: return "daily_business_usage_by_instance_type"
        case .disbursedAmountByAgeOfDisbursedFunds: return "disbursed_amount_by_age_of_disbursed_funds"
        case .disbursedAmountByAgeOfPastDueFunds: return "disbursed_amount_by_age_of_past_due_funds"
        case .disbursedAmountByAgeOfUncollectedFunds: return "disbursed_amount_by_age_of_uncollected_funds"
        case .disbursedAmountByCustomerGeo: return "disbursed_amount_by_customer_geo"
        case .disbursedAmountByInstanceHours: return "disbursed_amount_by_instance_hours"
        case .disbursedAmountByProduct: return "disbursed_amount_by_product"
        case .disbursedAmountByProductWithUncollectedFunds: return "disbursed_amount_by_product_with_uncollected_funds"
        case .disbursedAmountByUncollectedFundsBreakdown: return "disbursed_amount_by_uncollected_funds_breakdown"
        case .monthlyRevenueAnnualSubscriptions: return "monthly_revenue_annual_subscriptions"
        case .monthlyRevenueBillingAndRevenueData: return "monthly_revenue_billing_and_revenue_data"
        case .monthlyRevenueFieldDemonstrationUsage: return "monthly_revenue_field_demonstration_usage"
        case .monthlyRevenueFlexiblePaymentSchedule: return "monthly_revenue_flexible_payment_schedule"
        case .salesCompensationBilledRevenue: return "sales_compensation_billed_revenue"
        case .usSalesAndUseTaxRecords: return "us_sales_and_use_tax_records"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DataSetType(rawValue: rawValue) ?? DataSetType.sdkUnknown(rawValue)
    }
}
