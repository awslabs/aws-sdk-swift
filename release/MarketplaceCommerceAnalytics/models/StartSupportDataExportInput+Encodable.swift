// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartSupportDataExportInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerDefinedValues
        case dataSetType
        case destinationS3BucketName
        case destinationS3Prefix
        case fromDate
        case roleNameArn
        case snsTopicArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerDefinedValues = customerDefinedValues {
            var customerDefinedValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .customerDefinedValues)
            for (dictKey0, customerdefinedvalues0) in customerDefinedValues {
                try customerDefinedValuesContainer.encode(customerdefinedvalues0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dataSetType = dataSetType {
            try encodeContainer.encode(dataSetType.rawValue, forKey: .dataSetType)
        }
        if let destinationS3BucketName = destinationS3BucketName {
            try encodeContainer.encode(destinationS3BucketName, forKey: .destinationS3BucketName)
        }
        if let destinationS3Prefix = destinationS3Prefix {
            try encodeContainer.encode(destinationS3Prefix, forKey: .destinationS3Prefix)
        }
        if let fromDate = fromDate {
            try encodeContainer.encode(fromDate.timeIntervalSince1970, forKey: .fromDate)
        }
        if let roleNameArn = roleNameArn {
            try encodeContainer.encode(roleNameArn, forKey: .roleNameArn)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }
}
