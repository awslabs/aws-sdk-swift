// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SearchInputQueryItemMiddleware: Middleware {
    public let id: String = "SearchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "format", value: "sdk"))
        input.builder.withQueryItem(URLQueryItem(name: "pretty", value: "true"))
        if let cursor = input.operationInput.cursor {
            let cursorQueryItem = URLQueryItem(name: "cursor".urlPercentEncoding(), value: String(cursor).urlPercentEncoding())
            input.builder.withQueryItem(cursorQueryItem)
        }
        if let queryOptions = input.operationInput.queryOptions {
            let queryOptionsQueryItem = URLQueryItem(name: "q.options".urlPercentEncoding(), value: String(queryOptions).urlPercentEncoding())
            input.builder.withQueryItem(queryOptionsQueryItem)
        }
        if let query = input.operationInput.query {
            let queryQueryItem = URLQueryItem(name: "q".urlPercentEncoding(), value: String(query).urlPercentEncoding())
            input.builder.withQueryItem(queryQueryItem)
        }
        let startQueryItem = URLQueryItem(name: "start".urlPercentEncoding(), value: String(input.operationInput.start).urlPercentEncoding())
        input.builder.withQueryItem(startQueryItem)
        if let sort = input.operationInput.sort {
            let sortQueryItem = URLQueryItem(name: "sort".urlPercentEncoding(), value: String(sort).urlPercentEncoding())
            input.builder.withQueryItem(sortQueryItem)
        }
        if let queryParser = input.operationInput.queryParser {
            let queryParserQueryItem = URLQueryItem(name: "q.parser".urlPercentEncoding(), value: String(queryParser.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryParserQueryItem)
        }
        if let highlight = input.operationInput.highlight {
            let highlightQueryItem = URLQueryItem(name: "highlight".urlPercentEncoding(), value: String(highlight).urlPercentEncoding())
            input.builder.withQueryItem(highlightQueryItem)
        }
        let sizeQueryItem = URLQueryItem(name: "size".urlPercentEncoding(), value: String(input.operationInput.size).urlPercentEncoding())
        input.builder.withQueryItem(sizeQueryItem)
        if let stats = input.operationInput.stats {
            let statsQueryItem = URLQueryItem(name: "stats".urlPercentEncoding(), value: String(stats).urlPercentEncoding())
            input.builder.withQueryItem(statsQueryItem)
        }
        if let expr = input.operationInput.expr {
            let exprQueryItem = URLQueryItem(name: "expr".urlPercentEncoding(), value: String(expr).urlPercentEncoding())
            input.builder.withQueryItem(exprQueryItem)
        }
        if let facet = input.operationInput.facet {
            let facetQueryItem = URLQueryItem(name: "facet".urlPercentEncoding(), value: String(facet).urlPercentEncoding())
            input.builder.withQueryItem(facetQueryItem)
        }
        let partialQueryItem = URLQueryItem(name: "partial".urlPercentEncoding(), value: String(input.operationInput.partial).urlPercentEncoding())
        input.builder.withQueryItem(partialQueryItem)
        if let `return` = input.operationInput.`return` {
            let returnQueryItem = URLQueryItem(name: "return".urlPercentEncoding(), value: String(`return`).urlPercentEncoding())
            input.builder.withQueryItem(returnQueryItem)
        }
        if let filterQuery = input.operationInput.filterQuery {
            let filterQueryQueryItem = URLQueryItem(name: "fq".urlPercentEncoding(), value: String(filterQuery).urlPercentEncoding())
            input.builder.withQueryItem(filterQueryQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchInput>
    public typealias MOutput = OperationOutput<SearchOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<SearchOutputError>
}
