// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SuggestModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case found
        case query
        case suggestions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if found != 0 {
            try encodeContainer.encode(found, forKey: .found)
        }
        if let query = query {
            try encodeContainer.encode(query, forKey: .query)
        }
        if let suggestions = suggestions {
            var suggestionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suggestions)
            for suggestions0 in suggestions {
                try suggestionsContainer.encode(suggestions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .query)
        query = queryDecoded
        let foundDecoded = try containerValues.decode(Int.self, forKey: .found)
        found = foundDecoded
        let suggestionsContainer = try containerValues.decodeIfPresent([SuggestionMatch].self, forKey: .suggestions)
        var suggestionsDecoded0:[SuggestionMatch]? = nil
        if let suggestionsContainer = suggestionsContainer {
            suggestionsDecoded0 = [SuggestionMatch]()
            for structure0 in suggestionsContainer {
                suggestionsDecoded0?.append(structure0)
            }
        }
        suggestions = suggestionsDecoded0
    }
}
