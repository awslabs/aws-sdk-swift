// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AutoScalingClientTypes.AcceleratorCountRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the AcceleratorCount object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct AcceleratorCountRequest: Swift.Equatable {
        /// The maximum value.
        public var max: Swift.Int?
        /// The minimum value.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes {
    public enum AcceleratorManufacturer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonWebServices
        case amd
        case nvidia
        case xilinx
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorManufacturer] {
            return [
                .amazonWebServices,
                .amd,
                .nvidia,
                .xilinx,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonWebServices: return "amazon-web-services"
            case .amd: return "amd"
            case .nvidia: return "nvidia"
            case .xilinx: return "xilinx"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AcceleratorManufacturer(rawValue: rawValue) ?? AcceleratorManufacturer.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum AcceleratorName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case a100
        case k80
        case m60
        case radeonProV520
        case t4
        case v100
        case vu9p
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorName] {
            return [
                .a100,
                .k80,
                .m60,
                .radeonProV520,
                .t4,
                .v100,
                .vu9p,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .a100: return "a100"
            case .k80: return "k80"
            case .m60: return "m60"
            case .radeonProV520: return "radeon-pro-v520"
            case .t4: return "t4"
            case .v100: return "v100"
            case .vu9p: return "vu9p"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AcceleratorName(rawValue: rawValue) ?? AcceleratorName.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the AcceleratorTotalMemoryMiB object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct AcceleratorTotalMemoryMiBRequest: Swift.Equatable {
        /// The memory maximum in MiB.
        public var max: Swift.Int?
        /// The memory minimum in MiB.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes {
    public enum AcceleratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fpga
        case gpu
        case inference
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorType] {
            return [
                .fpga,
                .gpu,
                .inference,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fpga: return "fpga"
            case .gpu: return "gpu"
            case .inference: return "inference"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AcceleratorType(rawValue: rawValue) ?? AcceleratorType.sdkUnknown(rawValue)
        }
    }
}

extension ActiveInstanceRefreshNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ActiveInstanceRefreshNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because an active instance refresh for the specified Auto Scaling group was not found.
public struct ActiveInstanceRefreshNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActiveInstanceRefreshNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActiveInstanceRefreshNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.Activity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId = "ActivityId"
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case autoScalingGroupState = "AutoScalingGroupState"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case progress = "Progress"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityId = activityId {
            try container.encode(activityId, forKey: ClientRuntime.Key("ActivityId"))
        }
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: ClientRuntime.Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let autoScalingGroupState = autoScalingGroupState {
            try container.encode(autoScalingGroupState, forKey: ClientRuntime.Key("AutoScalingGroupState"))
        }
        if let cause = cause {
            try container.encode(cause, forKey: ClientRuntime.Key("Cause"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let details = details {
            try container.encode(details, forKey: ClientRuntime.Key("Details"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if progress != 0 {
            try container.encode(progress, forKey: ClientRuntime.Key("Progress"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let progressDecoded = try containerValues.decode(Swift.Int.self, forKey: .progress)
        progress = progressDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let autoScalingGroupStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupState)
        autoScalingGroupState = autoScalingGroupStateDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes scaling activity, which is a long-running process that represents a change to your Auto Scaling group, such as changing its size or replacing an instance.
    public struct Activity: Swift.Equatable {
        /// The ID of the activity.
        /// This member is required.
        public var activityId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The state of the Auto Scaling group, which is either InService or Deleted.
        public var autoScalingGroupState: Swift.String?
        /// The reason the activity began.
        /// This member is required.
        public var cause: Swift.String?
        /// A friendly, more verbose description of the activity.
        public var description: Swift.String?
        /// The details about the activity.
        public var details: Swift.String?
        /// The end time of the activity.
        public var endTime: ClientRuntime.Date?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public var progress: Swift.Int
        /// The start time of the activity.
        /// This member is required.
        public var startTime: ClientRuntime.Date?
        /// The current status of the activity.
        /// This member is required.
        public var statusCode: AutoScalingClientTypes.ScalingActivityStatusCode?
        /// A friendly, more verbose description of the activity status.
        public var statusMessage: Swift.String?

        public init (
            activityId: Swift.String? = nil,
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            autoScalingGroupState: Swift.String? = nil,
            cause: Swift.String? = nil,
            description: Swift.String? = nil,
            details: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            progress: Swift.Int = 0,
            startTime: ClientRuntime.Date? = nil,
            statusCode: AutoScalingClientTypes.ScalingActivityStatusCode? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.autoScalingGroupState = autoScalingGroupState
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.progress = progress
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }
    }

}

extension AutoScalingClientTypes.AdjustmentType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a policy adjustment type.
    public struct AdjustmentType: Swift.Equatable {
        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?

        public init (
            adjustmentType: Swift.String? = nil
        )
        {
            self.adjustmentType = adjustmentType
        }
    }

}

extension AutoScalingClientTypes.Alarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmARN = "AlarmARN"
        case alarmName = "AlarmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmARN = alarmARN {
            try container.encode(alarmARN, forKey: ClientRuntime.Key("AlarmARN"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmARN)
        alarmARN = alarmARNDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an alarm.
    public struct Alarm: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmARN: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?

        public init (
            alarmARN: Swift.String? = nil,
            alarmName: Swift.String? = nil
        )
        {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }
    }

}

extension AlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have an Auto Scaling group or launch configuration with this name.
public struct AlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AttachInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AttachInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachInstancesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

struct AttachInstancesInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
}

extension AttachInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceIds = "InstanceIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
    }
}

extension AttachInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachInstancesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachInstancesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AttachLoadBalancerTargetGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            if !targetGroupARNs.isEmpty {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                    try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                try targetGroupARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AttachLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachLoadBalancerTargetGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

struct AttachLoadBalancerTargetGroupsInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let targetGroupARNs: [Swift.String]?
}

extension AttachLoadBalancerTargetGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case targetGroupARNs = "TargetGroupARNs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
    }
}

extension AttachLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {

    public init () { }
}

extension AttachLoadBalancersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            if !loadBalancerNames.isEmpty {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                    try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                try loadBalancerNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AttachLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachLoadBalancersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

struct AttachLoadBalancersInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let loadBalancerNames: [Swift.String]?
}

extension AttachLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case loadBalancerNames = "LoadBalancerNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
    }
}

extension AttachLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancersOutputResponse: Swift.Equatable {

    public init () { }
}

extension AttachTrafficSourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let trafficSources = trafficSources {
            if !trafficSources.isEmpty {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                for (index0, trafficsourceidentifier0) in trafficSources.enumerated() {
                    try trafficSourcesContainer.encode(trafficsourceidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                try trafficSourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AttachTrafficSources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AttachTrafficSourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachTrafficSourcesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. Amazon EC2 Auto Scaling registers the running instances with the attached target groups. The target groups receive incoming traffic and route requests to one or more registered targets.
    /// This member is required.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.trafficSources = trafficSources
    }
}

struct AttachTrafficSourcesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
}

extension AttachTrafficSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case trafficSources = "TrafficSources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.trafficSources) {
            struct KeyVal0{struct member{}}
            let trafficSourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trafficSources)
            if let trafficSourcesWrappedContainer = trafficSourcesWrappedContainer {
                let trafficSourcesContainer = try trafficSourcesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TrafficSourceIdentifier].self, forKey: .member)
                var trafficSourcesBuffer:[AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
                if let trafficSourcesContainer = trafficSourcesContainer {
                    trafficSourcesBuffer = [AutoScalingClientTypes.TrafficSourceIdentifier]()
                    for structureContainer0 in trafficSourcesContainer {
                        trafficSourcesBuffer?.append(structureContainer0)
                    }
                }
                trafficSources = trafficSourcesBuffer
            } else {
                trafficSources = []
            }
        } else {
            trafficSources = nil
        }
    }
}

extension AttachTrafficSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachTrafficSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachTrafficSourcesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachTrafficSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachTrafficSourcesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.AutoScalingGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case context = "Context"
        case createdTime = "CreatedTime"
        case defaultCooldown = "DefaultCooldown"
        case defaultInstanceWarmup = "DefaultInstanceWarmup"
        case desiredCapacity = "DesiredCapacity"
        case desiredCapacityType = "DesiredCapacityType"
        case enabledMetrics = "EnabledMetrics"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case instances = "Instances"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case loadBalancerNames = "LoadBalancerNames"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case predictedCapacity = "PredictedCapacity"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case status = "Status"
        case suspendedProcesses = "SuspendedProcesses"
        case tags = "Tags"
        case targetGroupARNs = "TargetGroupARNs"
        case terminationPolicies = "TerminationPolicies"
        case trafficSources = "TrafficSources"
        case vpcZoneIdentifier = "VPCZoneIdentifier"
        case warmPoolConfiguration = "WarmPoolConfiguration"
        case warmPoolSize = "WarmPoolSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: ClientRuntime.Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let createdTime = createdTime {
            try container.encodeTimestamp(createdTime, format: .dateTime, forKey: ClientRuntime.Key("createdTime"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let defaultInstanceWarmup = defaultInstanceWarmup {
            try container.encode(defaultInstanceWarmup, forKey: ClientRuntime.Key("DefaultInstanceWarmup"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let desiredCapacityType = desiredCapacityType {
            try container.encode(desiredCapacityType, forKey: ClientRuntime.Key("DesiredCapacityType"))
        }
        if let enabledMetrics = enabledMetrics {
            if !enabledMetrics.isEmpty {
                var enabledMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledMetrics"))
                for (index0, enabledmetric0) in enabledMetrics.enumerated() {
                    try enabledMetricsContainer.encode(enabledmetric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enabledMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledMetrics"))
                try enabledMetricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
                for (index0, instance0) in instances.enumerated() {
                    try instancesContainer.encode(instance0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
                try instancesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let loadBalancerNames = loadBalancerNames {
            if !loadBalancerNames.isEmpty {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                    try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                try loadBalancerNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let predictedCapacity = predictedCapacity {
            try container.encode(predictedCapacity, forKey: ClientRuntime.Key("PredictedCapacity"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let suspendedProcesses = suspendedProcesses {
            if !suspendedProcesses.isEmpty {
                var suspendedProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SuspendedProcesses"))
                for (index0, suspendedprocess0) in suspendedProcesses.enumerated() {
                    try suspendedProcessesContainer.encode(suspendedprocess0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var suspendedProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SuspendedProcesses"))
                try suspendedProcessesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tagdescription0) in tags.enumerated() {
                    try tagsContainer.encode(tagdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            if !targetGroupARNs.isEmpty {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                    try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                try targetGroupARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let terminationPolicies = terminationPolicies {
            if !terminationPolicies.isEmpty {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                    try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                try terminationPoliciesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trafficSources = trafficSources {
            if !trafficSources.isEmpty {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                for (index0, trafficsourceidentifier0) in trafficSources.enumerated() {
                    try trafficSourcesContainer.encode(trafficsourceidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                try trafficSourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcZoneIdentifier = vpcZoneIdentifier {
            try container.encode(vpcZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        if let warmPoolConfiguration = warmPoolConfiguration {
            try container.encode(warmPoolConfiguration, forKey: ClientRuntime.Key("WarmPoolConfiguration"))
        }
        if let warmPoolSize = warmPoolSize {
            try container.encode(warmPoolSize, forKey: ClientRuntime.Key("WarmPoolSize"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let predictedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .predictedCapacity)
        predictedCapacity = predictedCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[AutoScalingClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [AutoScalingClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let createdTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdTime)
        createdTime = createdTimeDecoded
        if containerValues.contains(.suspendedProcesses) {
            struct KeyVal0{struct member{}}
            let suspendedProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suspendedProcesses)
            if let suspendedProcessesWrappedContainer = suspendedProcessesWrappedContainer {
                let suspendedProcessesContainer = try suspendedProcessesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.SuspendedProcess].self, forKey: .member)
                var suspendedProcessesBuffer:[AutoScalingClientTypes.SuspendedProcess]? = nil
                if let suspendedProcessesContainer = suspendedProcessesContainer {
                    suspendedProcessesBuffer = [AutoScalingClientTypes.SuspendedProcess]()
                    for structureContainer0 in suspendedProcessesContainer {
                        suspendedProcessesBuffer?.append(structureContainer0)
                    }
                }
                suspendedProcesses = suspendedProcessesBuffer
            } else {
                suspendedProcesses = []
            }
        } else {
            suspendedProcesses = nil
        }
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vpcZoneIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcZoneIdentifier)
        vpcZoneIdentifier = vpcZoneIdentifierDecoded
        if containerValues.contains(.enabledMetrics) {
            struct KeyVal0{struct member{}}
            let enabledMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .enabledMetrics)
            if let enabledMetricsWrappedContainer = enabledMetricsWrappedContainer {
                let enabledMetricsContainer = try enabledMetricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.EnabledMetric].self, forKey: .member)
                var enabledMetricsBuffer:[AutoScalingClientTypes.EnabledMetric]? = nil
                if let enabledMetricsContainer = enabledMetricsContainer {
                    enabledMetricsBuffer = [AutoScalingClientTypes.EnabledMetric]()
                    for structureContainer0 in enabledMetricsContainer {
                        enabledMetricsBuffer?.append(structureContainer0)
                    }
                }
                enabledMetrics = enabledMetricsBuffer
            } else {
                enabledMetrics = []
            }
        } else {
            enabledMetrics = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TagDescription].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPoliciesBuffer:[Swift.String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        let warmPoolSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmPoolSize)
        warmPoolSize = warmPoolSizeDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
        let desiredCapacityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredCapacityType)
        desiredCapacityType = desiredCapacityTypeDecoded
        let defaultInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultInstanceWarmup)
        defaultInstanceWarmup = defaultInstanceWarmupDecoded
        if containerValues.contains(.trafficSources) {
            struct KeyVal0{struct member{}}
            let trafficSourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trafficSources)
            if let trafficSourcesWrappedContainer = trafficSourcesWrappedContainer {
                let trafficSourcesContainer = try trafficSourcesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TrafficSourceIdentifier].self, forKey: .member)
                var trafficSourcesBuffer:[AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
                if let trafficSourcesContainer = trafficSourcesContainer {
                    trafficSourcesBuffer = [AutoScalingClientTypes.TrafficSourceIdentifier]()
                    for structureContainer0 in trafficSourcesContainer {
                        trafficSourcesBuffer?.append(structureContainer0)
                    }
                }
                trafficSources = trafficSourcesBuffer
            } else {
                trafficSources = []
            }
        } else {
            trafficSources = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Describes an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// One or more Availability Zones for the group.
        /// This member is required.
        public var availabilityZones: [Swift.String]?
        /// Indicates whether Capacity Rebalancing is enabled.
        public var capacityRebalance: Swift.Bool?
        /// Reserved.
        public var context: Swift.String?
        /// The date and time the group was created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The duration of the default cooldown period, in seconds.
        /// This member is required.
        public var defaultCooldown: Swift.Int?
        /// The duration of the default instance warmup, in seconds.
        public var defaultInstanceWarmup: Swift.Int?
        /// The desired size of the group.
        /// This member is required.
        public var desiredCapacity: Swift.Int?
        /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only.
        public var desiredCapacityType: Swift.String?
        /// The metrics enabled for the group.
        public var enabledMetrics: [AutoScalingClientTypes.EnabledMetric]?
        /// The duration of the health check grace period, in seconds.
        public var healthCheckGracePeriod: Swift.Int?
        /// Determines whether any additional health checks are performed on the instances in this group. Amazon EC2 health checks are always on. The valid values are EC2 (default), ELB, and VPC_LATTICE. The VPC_LATTICE health check type is reserved for use with VPC Lattice, which is in preview release and is subject to change.
        /// This member is required.
        public var healthCheckType: Swift.String?
        /// The EC2 instances associated with the group.
        public var instances: [AutoScalingClientTypes.Instance]?
        /// The name of the associated launch configuration.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the group.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// One or more load balancers associated with the group.
        public var loadBalancerNames: [Swift.String]?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 0.
        public var maxInstanceLifetime: Swift.Int?
        /// The maximum size of the group.
        /// This member is required.
        public var maxSize: Swift.Int?
        /// The minimum size of the group.
        /// This member is required.
        public var minSize: Swift.Int?
        /// The mixed instances policy for the group.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public var newInstancesProtectedFromScaleIn: Swift.Bool?
        /// The name of the placement group into which to launch your instances, if any.
        public var placementGroup: Swift.String?
        /// The predicted capacity of the group when it has a predictive scaling policy.
        public var predictedCapacity: Swift.Int?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf.
        public var serviceLinkedRoleARN: Swift.String?
        /// The current state of the group when the [DeleteAutoScalingGroup] operation is in progress.
        public var status: Swift.String?
        /// The suspended processes associated with the group.
        public var suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]?
        /// The tags for the group.
        public var tags: [AutoScalingClientTypes.TagDescription]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public var targetGroupARNs: [Swift.String]?
        /// The termination policies for the group.
        public var terminationPolicies: [Swift.String]?
        /// The unique identifiers of the traffic sources.
        public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
        /// One or more subnet IDs, if applicable, separated by commas.
        public var vpcZoneIdentifier: Swift.String?
        /// The warm pool for the group.
        public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
        /// The current size of the warm pool.
        public var warmPoolSize: Swift.Int?

        public init (
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            capacityRebalance: Swift.Bool? = nil,
            context: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            defaultCooldown: Swift.Int? = nil,
            defaultInstanceWarmup: Swift.Int? = nil,
            desiredCapacity: Swift.Int? = nil,
            desiredCapacityType: Swift.String? = nil,
            enabledMetrics: [AutoScalingClientTypes.EnabledMetric]? = nil,
            healthCheckGracePeriod: Swift.Int? = nil,
            healthCheckType: Swift.String? = nil,
            instances: [AutoScalingClientTypes.Instance]? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            loadBalancerNames: [Swift.String]? = nil,
            maxInstanceLifetime: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
            newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
            placementGroup: Swift.String? = nil,
            predictedCapacity: Swift.Int? = nil,
            serviceLinkedRoleARN: Swift.String? = nil,
            status: Swift.String? = nil,
            suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]? = nil,
            tags: [AutoScalingClientTypes.TagDescription]? = nil,
            targetGroupARNs: [Swift.String]? = nil,
            terminationPolicies: [Swift.String]? = nil,
            trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil,
            vpcZoneIdentifier: Swift.String? = nil,
            warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil,
            warmPoolSize: Swift.Int? = nil
        )
        {
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.capacityRebalance = capacityRebalance
            self.context = context
            self.createdTime = createdTime
            self.defaultCooldown = defaultCooldown
            self.defaultInstanceWarmup = defaultInstanceWarmup
            self.desiredCapacity = desiredCapacity
            self.desiredCapacityType = desiredCapacityType
            self.enabledMetrics = enabledMetrics
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instances = instances
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.predictedCapacity = predictedCapacity
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.status = status
            self.suspendedProcesses = suspendedProcesses
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.trafficSources = trafficSources
            self.vpcZoneIdentifier = vpcZoneIdentifier
            self.warmPoolConfiguration = warmPoolConfiguration
            self.warmPoolSize = warmPoolSize
        }
    }

}

extension AutoScalingClientTypes.AutoScalingInstanceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an EC2 instance associated with an Auto Scaling group.
    public struct AutoScalingInstanceDetails: Swift.Equatable {
        /// The name of the Auto Scaling group for the instance.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The Availability Zone for the instance.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of this instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration used to launch the instance. This value is not available if you attached the instance to the Auto Scaling group.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// The lifecycle state for the instance. The Quarantined state is not used. For information about lifecycle states, see [Instance lifecycle](https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Pending | Pending:Wait | Pending:Proceed | Quarantined | InService | Terminating | Terminating:Wait | Terminating:Proceed | Terminated | Detaching | Detached | EnteringStandby | Standby | Warmed:Pending | Warmed:Pending:Wait | Warmed:Pending:Proceed | Warmed:Terminating | Warmed:Terminating:Wait | Warmed:Terminating:Proceed | Warmed:Terminated | Warmed:Stopped | Warmed:Running
        /// This member is required.
        public var lifecycleState: Swift.String?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: Swift.String? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension AutoScalingClientTypes {
    public enum BareMetal: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [BareMetal] {
            return [
                .excluded,
                .included,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BareMetal(rawValue: rawValue) ?? BareMetal.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the BaselineEbsBandwidthMbps object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct BaselineEbsBandwidthMbpsRequest: Swift.Equatable {
        /// The maximum value in Mbps.
        public var max: Swift.Int?
        /// The minimum value in Mbps.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension BatchDeleteScheduledActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledActionNames = scheduledActionNames {
            if !scheduledActionNames.isEmpty {
                var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
                for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                    try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
                try scheduledActionNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchDeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchDeleteScheduledActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteScheduledActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the scheduled actions to delete. The maximum number allowed is 50.
    /// This member is required.
    public var scheduledActionNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionNames = scheduledActionNames
    }
}

struct BatchDeleteScheduledActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionNames: [Swift.String]?
}

extension BatchDeleteScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scheduledActionNames = "ScheduledActionNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scheduledActionNames) {
            struct KeyVal0{struct member{}}
            let scheduledActionNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledActionNames)
            if let scheduledActionNamesWrappedContainer = scheduledActionNamesWrappedContainer {
                let scheduledActionNamesContainer = try scheduledActionNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduledActionNamesBuffer:[Swift.String]? = nil
                if let scheduledActionNamesContainer = scheduledActionNamesContainer {
                    scheduledActionNamesBuffer = [Swift.String]()
                    for stringContainer0 in scheduledActionNamesContainer {
                        scheduledActionNamesBuffer?.append(stringContainer0)
                    }
                }
                scheduledActionNames = scheduledActionNamesBuffer
            } else {
                scheduledActionNames = []
            }
        } else {
            scheduledActionNames = nil
        }
    }
}

extension BatchDeleteScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchDeleteScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDeleteScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDeleteScheduledActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedScheduledActions = output.failedScheduledActions
        } else {
            self.failedScheduledActions = nil
        }
    }
}

public struct BatchDeleteScheduledActionOutputResponse: Swift.Equatable {
    /// The names of the scheduled actions that could not be deleted, including an error message.
    public var failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledActions = failedScheduledActions
    }
}

struct BatchDeleteScheduledActionOutputResponseBody: Swift.Equatable {
    let failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?
}

extension BatchDeleteScheduledActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedScheduledActions = "FailedScheduledActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchDeleteScheduledActionResult"))
        if containerValues.contains(.failedScheduledActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledActions)
            if let failedScheduledActionsWrappedContainer = failedScheduledActionsWrappedContainer {
                let failedScheduledActionsContainer = try failedScheduledActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledActionsBuffer:[AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledActionsContainer = failedScheduledActionsContainer {
                    failedScheduledActionsBuffer = [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledActionsContainer {
                        failedScheduledActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledActions = failedScheduledActionsBuffer
            } else {
                failedScheduledActions = []
            }
        } else {
            failedScheduledActions = nil
        }
    }
}

extension BatchPutScheduledUpdateGroupActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledUpdateGroupActions = scheduledUpdateGroupActions {
            if !scheduledUpdateGroupActions.isEmpty {
                var scheduledUpdateGroupActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledUpdateGroupActions"))
                for (index0, scheduledupdategroupactionrequest0) in scheduledUpdateGroupActions.enumerated() {
                    try scheduledUpdateGroupActionsContainer.encode(scheduledupdategroupactionrequest0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduledUpdateGroupActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledUpdateGroupActions"))
                try scheduledUpdateGroupActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchPutScheduledUpdateGroupAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchPutScheduledUpdateGroupActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchPutScheduledUpdateGroupActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more scheduled actions. The maximum number allowed is 50.
    /// This member is required.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

struct BatchPutScheduledUpdateGroupActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]?
}

extension BatchPutScheduledUpdateGroupActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScheduledUpdateGroupActionRequest].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchPutScheduledUpdateGroupActionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutScheduledUpdateGroupActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchPutScheduledUpdateGroupActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedScheduledUpdateGroupActions = output.failedScheduledUpdateGroupActions
        } else {
            self.failedScheduledUpdateGroupActions = nil
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionOutputResponse: Swift.Equatable {
    /// The names of the scheduled actions that could not be created or updated, including an error message.
    public var failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
    }
}

struct BatchPutScheduledUpdateGroupActionOutputResponseBody: Swift.Equatable {
    let failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?
}

extension BatchPutScheduledUpdateGroupActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedScheduledUpdateGroupActions = "FailedScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchPutScheduledUpdateGroupActionResult"))
        if containerValues.contains(.failedScheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledUpdateGroupActions)
            if let failedScheduledUpdateGroupActionsWrappedContainer = failedScheduledUpdateGroupActionsWrappedContainer {
                let failedScheduledUpdateGroupActionsContainer = try failedScheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledUpdateGroupActionsContainer = failedScheduledUpdateGroupActionsContainer {
                    failedScheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledUpdateGroupActionsContainer {
                        failedScheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActionsBuffer
            } else {
                failedScheduledUpdateGroupActions = []
            }
        } else {
            failedScheduledUpdateGroupActions = nil
        }
    }
}

extension AutoScalingClientTypes.BlockDeviceMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceName = "DeviceName"
        case ebs = "Ebs"
        case noDevice = "NoDevice"
        case virtualName = "VirtualName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deviceName = deviceName {
            try container.encode(deviceName, forKey: ClientRuntime.Key("DeviceName"))
        }
        if let ebs = ebs {
            try container.encode(ebs, forKey: ClientRuntime.Key("Ebs"))
        }
        if let noDevice = noDevice {
            try container.encode(noDevice, forKey: ClientRuntime.Key("NoDevice"))
        }
        if let virtualName = virtualName {
            try container.encode(virtualName, forKey: ClientRuntime.Key("VirtualName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualName)
        virtualName = virtualNameDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let ebsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Ebs.self, forKey: .ebs)
        ebs = ebsDecoded
        let noDeviceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noDevice)
        noDevice = noDeviceDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a block device mapping.
    public struct BlockDeviceMapping: Swift.Equatable {
        /// The device name assigned to the volume (for example, /dev/sdh or xvdh). For more information, see [Device naming on Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html) in the Amazon EC2 User Guide for Linux Instances. To define a block device mapping, set the device name and exactly one of the following properties: Ebs, NoDevice, or VirtualName.
        /// This member is required.
        public var deviceName: Swift.String?
        /// Information to attach an EBS volume to an instance at launch.
        public var ebs: AutoScalingClientTypes.Ebs?
        /// Setting this value to true prevents a volume that is included in the block device mapping of the AMI from being mapped to the specified device name at launch. If NoDevice is true for the root device, instances might fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches replacement instances.
        public var noDevice: Swift.Bool?
        /// The name of the instance store volume (virtual device) to attach to an instance at launch. The name must be in the form ephemeralX where X is a number starting from zero (0), for example, ephemeral0.
        public var virtualName: Swift.String?

        public init (
            deviceName: Swift.String? = nil,
            ebs: AutoScalingClientTypes.Ebs? = nil,
            noDevice: Swift.Bool? = nil,
            virtualName: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }
    }

}

extension AutoScalingClientTypes {
    public enum BurstablePerformance: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [BurstablePerformance] {
            return [
                .excluded,
                .included,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurstablePerformance(rawValue: rawValue) ?? BurstablePerformance.sdkUnknown(rawValue)
        }
    }
}

extension CancelInstanceRefreshInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        try container.encode("CancelInstanceRefresh", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelInstanceRefreshInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelInstanceRefreshInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
    }
}

struct CancelInstanceRefreshInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
}

extension CancelInstanceRefreshInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
    }
}

extension CancelInstanceRefreshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CancelInstanceRefreshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActiveInstanceRefreshNotFound" : self = .activeInstanceRefreshNotFoundFault(try ActiveInstanceRefreshNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelInstanceRefreshOutputError: Swift.Error, Swift.Equatable {
    case activeInstanceRefreshNotFoundFault(ActiveInstanceRefreshNotFoundFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelInstanceRefreshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct CancelInstanceRefreshOutputResponse: Swift.Equatable {
    /// The instance refresh ID.
    public var instanceRefreshId: Swift.String?

    public init (
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct CancelInstanceRefreshOutputResponseBody: Swift.Equatable {
    let instanceRefreshId: Swift.String?
}

extension CancelInstanceRefreshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CancelInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension AutoScalingClientTypes.CapacityForecast: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let timestamps = timestamps {
            if !timestamps.isEmpty {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                for (index0, timestamptype0) in timestamps.enumerated() {
                    try timestampsContainer.encodeTimestamp(timestamptype0, format: .dateTime, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                try timestampsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, metricscale0) in values.enumerated() {
                    try valuesContainer.encode(metricscale0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(timestampsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// A GetPredictiveScalingForecast call returns the capacity forecast for a predictive scaling policy. This structure includes the data points for that capacity forecast, along with the timestamps of those data points.
    public struct CapacityForecast: Swift.Equatable {
        /// The timestamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [ClientRuntime.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init (
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension CompleteLifecycleActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let lifecycleActionResult = lifecycleActionResult {
            try container.encode(lifecycleActionResult, forKey: ClientRuntime.Key("LifecycleActionResult"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: ClientRuntime.Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("CompleteLifecycleAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CompleteLifecycleActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CompleteLifecycleActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// The action for the group to take. You can specify either CONTINUE or ABANDON.
    /// This member is required.
    public var lifecycleActionResult: Swift.String?
    /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionResult: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionResult = lifecycleActionResult
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

struct CompleteLifecycleActionInputBody: Swift.Equatable {
    let lifecycleHookName: Swift.String?
    let autoScalingGroupName: Swift.String?
    let lifecycleActionToken: Swift.String?
    let lifecycleActionResult: Swift.String?
    let instanceId: Swift.String?
}

extension CompleteLifecycleActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceId = "InstanceId"
        case lifecycleActionResult = "LifecycleActionResult"
        case lifecycleActionToken = "LifecycleActionToken"
        case lifecycleHookName = "LifecycleHookName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleActionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleActionToken)
        lifecycleActionToken = lifecycleActionTokenDecoded
        let lifecycleActionResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleActionResult)
        lifecycleActionResult = lifecycleActionResultDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension CompleteLifecycleActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteLifecycleActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CompleteLifecycleActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteLifecycleActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CompleteLifecycleActionOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes {
    public enum CpuManufacturer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonWebServices
        case amd
        case intel
        case sdkUnknown(Swift.String)

        public static var allCases: [CpuManufacturer] {
            return [
                .amazonWebServices,
                .amd,
                .intel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonWebServices: return "amazon-web-services"
            case .amd: return "amd"
            case .intel: return "intel"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CpuManufacturer(rawValue: rawValue) ?? CpuManufacturer.sdkUnknown(rawValue)
        }
    }
}

extension CreateAutoScalingGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let defaultInstanceWarmup = defaultInstanceWarmup {
            try container.encode(defaultInstanceWarmup, forKey: ClientRuntime.Key("DefaultInstanceWarmup"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let desiredCapacityType = desiredCapacityType {
            try container.encode(desiredCapacityType, forKey: ClientRuntime.Key("DesiredCapacityType"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleHookSpecificationList = lifecycleHookSpecificationList {
            if !lifecycleHookSpecificationList.isEmpty {
                var lifecycleHookSpecificationListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookSpecificationList"))
                for (index0, lifecyclehookspecification0) in lifecycleHookSpecificationList.enumerated() {
                    try lifecycleHookSpecificationListContainer.encode(lifecyclehookspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var lifecycleHookSpecificationListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookSpecificationList"))
                try lifecycleHookSpecificationListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancerNames = loadBalancerNames {
            if !loadBalancerNames.isEmpty {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                    try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                try loadBalancerNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            if !targetGroupARNs.isEmpty {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                    try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                try targetGroupARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let terminationPolicies = terminationPolicies {
            if !terminationPolicies.isEmpty {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                    try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                try terminationPoliciesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trafficSources = trafficSources {
            if !trafficSources.isEmpty {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                for (index0, trafficsourceidentifier0) in trafficSources.enumerated() {
                    try trafficSourcesContainer.encode(trafficsourceidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                try trafficSourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcZoneIdentifier = vpcZoneIdentifier {
            try container.encode(vpcZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        try container.encode("CreateAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateAutoScalingGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You cannot use a colon (:) in the name.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the VPCZoneIdentifier property, or for attaching a network interface when an existing network interface ID is specified in a launch template.
    public var availabilityZones: [Swift.String]?
    /// Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the in the Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// Only needed if you use simple scaling policies. The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the Amazon EC2 Auto Scaling User Guide. Default: 300 seconds
    public var defaultCooldown: Swift.Int?
    /// The amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. For more information, see [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the Amazon EC2 Auto Scaling User Guide. To manage your warm-up settings at the group level, we recommend that you set the default instance warmup, even if its value is set to 0 seconds. This also optimizes the performance of scaling policies that scale continuously, such as target tracking and step scaling policies. If you need to remove a value that you previously set, include the property but specify -1 for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a minimum value of 0. Default: None
    public var defaultInstanceWarmup: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
    public var desiredCapacity: Swift.Int?
    /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only. For more information, see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in the Amazon EC2 Auto Scaling User Guide. By default, Amazon EC2 Auto Scaling specifies units, which translates into number of instances. Valid values: units | vcpu | memory-mib
    public var desiredCapacityType: Swift.String?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the InService state. For more information, see [Set the health check grace period for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the Amazon EC2 Auto Scaling User Guide. Default: 0 seconds
    public var healthCheckGracePeriod: Swift.Int?
    /// Determines whether any additional health checks are performed on the instances in this group. Amazon EC2 health checks are always on. For more information, see [Health checks for Auto Scaling instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html) in the Amazon EC2 Auto Scaling User Guide. The valid values are EC2 (default), ELB, and VPC_LATTICE. The VPC_LATTICE health check type is reserved for use with VPC Lattice, which is in preview release and is subject to change.
    public var healthCheckType: Swift.String?
    /// The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 [DescribeInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html) API operation. For more information, see [Creating an Auto Scaling group using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceId: Swift.String?
    /// The name of the launch configuration to use to launch instances. Conditional: You must specify either a launch template (LaunchTemplate or MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName or InstanceId).
    public var launchConfigurationName: Swift.String?
    /// Information used to specify the launch template and version to use to launch instances. Conditional: You must specify either a launch template (LaunchTemplate or MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName or InstanceId). The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see [Creating a launch template for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the Amazon EC2 Auto Scaling User Guide.
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
    public var lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]?
    /// A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancer, specify the TargetGroupARNs property instead.
    public var loadBalancerNames: [Swift.String]?
    /// The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see [Replacing Auto Scaling instances based on maximum instance lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above MaxSize to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).
    /// This member is required.
    public var maxSize: Swift.Int?
    /// The minimum size of the group.
    /// This member is required.
    public var minSize: Swift.Int?
    /// The mixed instances policy. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of the placement group into which to launch your instances. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. A cluster placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see [Service-linked roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see [Tag Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the Amazon EC2 Auto Scaling User Guide.
    public var tags: [AutoScalingClientTypes.Tag]?
    /// The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the Amazon EC2 Auto Scaling User Guide.
    public var targetGroupARNs: [Swift.String]?
    /// A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see [Work with Amazon EC2 Auto Scaling termination policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Default | AllocationStrategy | ClosestToNextInstanceHour | NewestInstance | OldestInstance | OldestLaunchConfiguration | OldestLaunchTemplate | arn:aws:lambda:region:account-id:function:my-function:my-alias
    public var terminationPolicies: [Swift.String]?
    /// Reserved for use with Amazon VPC Lattice, which is in preview release and is subject to change. Do not use this parameter for production workloads. It is also subject to change. The unique identifiers of one or more traffic sources. Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. Amazon EC2 Auto Scaling registers the running instances with the attached target groups. The target groups receive incoming traffic and route requests to one or more registered targets.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify must reside in those Availability Zones.
    public var vpcZoneIdentifier: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        defaultInstanceWarmup: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        desiredCapacityType: Swift.String? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]? = nil,
        loadBalancerNames: [Swift.String]? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        tags: [AutoScalingClientTypes.Tag]? = nil,
        targetGroupARNs: [Swift.String]? = nil,
        terminationPolicies: [Swift.String]? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil,
        vpcZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.defaultInstanceWarmup = defaultInstanceWarmup
        self.desiredCapacity = desiredCapacity
        self.desiredCapacityType = desiredCapacityType
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instanceId = instanceId
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.trafficSources = trafficSources
        self.vpcZoneIdentifier = vpcZoneIdentifier
    }
}

struct CreateAutoScalingGroupInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let launchConfigurationName: Swift.String?
    let launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    let mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    let instanceId: Swift.String?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let desiredCapacity: Swift.Int?
    let defaultCooldown: Swift.Int?
    let availabilityZones: [Swift.String]?
    let loadBalancerNames: [Swift.String]?
    let targetGroupARNs: [Swift.String]?
    let healthCheckType: Swift.String?
    let healthCheckGracePeriod: Swift.Int?
    let placementGroup: Swift.String?
    let vpcZoneIdentifier: Swift.String?
    let terminationPolicies: [Swift.String]?
    let newInstancesProtectedFromScaleIn: Swift.Bool?
    let capacityRebalance: Swift.Bool?
    let lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]?
    let tags: [AutoScalingClientTypes.Tag]?
    let serviceLinkedRoleARN: Swift.String?
    let maxInstanceLifetime: Swift.Int?
    let context: Swift.String?
    let desiredCapacityType: Swift.String?
    let defaultInstanceWarmup: Swift.Int?
    let trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
}

extension CreateAutoScalingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case context = "Context"
        case defaultCooldown = "DefaultCooldown"
        case defaultInstanceWarmup = "DefaultInstanceWarmup"
        case desiredCapacity = "DesiredCapacity"
        case desiredCapacityType = "DesiredCapacityType"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case instanceId = "InstanceId"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleHookSpecificationList = "LifecycleHookSpecificationList"
        case loadBalancerNames = "LoadBalancerNames"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case tags = "Tags"
        case targetGroupARNs = "TargetGroupARNs"
        case terminationPolicies = "TerminationPolicies"
        case trafficSources = "TrafficSources"
        case vpcZoneIdentifier = "VPCZoneIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vpcZoneIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcZoneIdentifier)
        vpcZoneIdentifier = vpcZoneIdentifierDecoded
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPoliciesBuffer:[Swift.String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        if containerValues.contains(.lifecycleHookSpecificationList) {
            struct KeyVal0{struct member{}}
            let lifecycleHookSpecificationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookSpecificationList)
            if let lifecycleHookSpecificationListWrappedContainer = lifecycleHookSpecificationListWrappedContainer {
                let lifecycleHookSpecificationListContainer = try lifecycleHookSpecificationListWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LifecycleHookSpecification].self, forKey: .member)
                var lifecycleHookSpecificationListBuffer:[AutoScalingClientTypes.LifecycleHookSpecification]? = nil
                if let lifecycleHookSpecificationListContainer = lifecycleHookSpecificationListContainer {
                    lifecycleHookSpecificationListBuffer = [AutoScalingClientTypes.LifecycleHookSpecification]()
                    for structureContainer0 in lifecycleHookSpecificationListContainer {
                        lifecycleHookSpecificationListBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHookSpecificationList = lifecycleHookSpecificationListBuffer
            } else {
                lifecycleHookSpecificationList = []
            }
        } else {
            lifecycleHookSpecificationList = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
        let desiredCapacityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredCapacityType)
        desiredCapacityType = desiredCapacityTypeDecoded
        let defaultInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultInstanceWarmup)
        defaultInstanceWarmup = defaultInstanceWarmupDecoded
        if containerValues.contains(.trafficSources) {
            struct KeyVal0{struct member{}}
            let trafficSourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trafficSources)
            if let trafficSourcesWrappedContainer = trafficSourcesWrappedContainer {
                let trafficSourcesContainer = try trafficSourcesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TrafficSourceIdentifier].self, forKey: .member)
                var trafficSourcesBuffer:[AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
                if let trafficSourcesContainer = trafficSourcesContainer {
                    trafficSourcesBuffer = [AutoScalingClientTypes.TrafficSourceIdentifier]()
                    for structureContainer0 in trafficSourcesContainer {
                        trafficSourcesBuffer?.append(structureContainer0)
                    }
                }
                trafficSources = trafficSourcesBuffer
            } else {
                trafficSources = []
            }
        } else {
            trafficSources = nil
        }
    }
}

extension CreateAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAutoScalingGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateLaunchConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: ClientRuntime.Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
                for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                    try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
                try blockDeviceMappingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: ClientRuntime.Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            if !classicLinkVPCSecurityGroups.isEmpty {
                var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
                for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                    try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
                try classicLinkVPCSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: ClientRuntime.Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: ClientRuntime.Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: ClientRuntime.Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: ClientRuntime.Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, xmlstring0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
        try container.encode("CreateLaunchConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateLaunchConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLaunchConfigurationInput: Swift.Equatable {
    /// Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet. If you specify true, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see [Launching Auto Scaling instances in a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide. If you specify this property, you must specify at least one subnet for VPCZoneIdentifier when you create your group.
    public var associatePublicIpAddress: Swift.Bool?
    /// The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see [Block device mappings](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
    public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
    /// Available for backward compatibility.
    public var classicLinkVPCId: Swift.String?
    /// Available for backward compatibility.
    public var classicLinkVPCSecurityGroups: [Swift.String]?
    /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see [Amazon EBS-optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) in the Amazon EC2 User Guide for Linux Instances. The default value is false.
    public var ebsOptimized: Swift.Bool?
    /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var iamInstanceProfile: Swift.String?
    /// The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see [Finding a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances. If you specify InstanceId, an ImageId is not required.
    public var imageId: Swift.String?
    /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see [Creating a launch configuration using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceId: Swift.String?
    /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. The default value is true (enabled). When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see [Configure Monitoring for Auto Scaling Instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
    /// Specifies the instance type of the EC2 instance. For information about available instance types, see [Available instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances. If you specify InstanceId, an InstanceType is not required.
    public var instanceType: Swift.String?
    /// The ID of the kernel associated with the AMI. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html) in the Amazon EC2 User Guide for Linux Instances.
    public var kernelId: Swift.String?
    /// The name of the key pair. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
    public var keyName: Swift.String?
    /// The name of the launch configuration. This name must be unique per Region per account.
    /// This member is required.
    public var launchConfigurationName: Swift.String?
    /// The metadata options for the instances. For more information, see [Configuring the Instance Metadata Options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
    public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
    /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to default), you must set the value of this property to dedicated. For more information, see [Configuring instance tenancy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html) in the Amazon EC2 Auto Scaling User Guide. If you specify PlacementTenancy, you must specify at least one subnet for VPCZoneIdentifier when you create your group. Valid values: default | dedicated
    public var placementTenancy: Swift.String?
    /// The ID of the RAM disk to select. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html) in the Amazon EC2 User Guide for Linux Instances.
    public var ramdiskId: Swift.String?
    /// A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see [Control traffic to resources using security groups](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide.
    public var securityGroups: [Swift.String]?
    /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Request Spot Instances for fault-tolerant and flexible applications](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide. Valid Range: Minimum value of 0.001 When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.
    public var spotPrice: Swift.String?
    /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
    public var userData: Swift.String?

    public init (
        associatePublicIpAddress: Swift.Bool? = nil,
        blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
        classicLinkVPCId: Swift.String? = nil,
        classicLinkVPCSecurityGroups: [Swift.String]? = nil,
        ebsOptimized: Swift.Bool? = nil,
        iamInstanceProfile: Swift.String? = nil,
        imageId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
        instanceType: Swift.String? = nil,
        kernelId: Swift.String? = nil,
        keyName: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
        placementTenancy: Swift.String? = nil,
        ramdiskId: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        spotPrice: Swift.String? = nil,
        userData: Swift.String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}

struct CreateLaunchConfigurationInputBody: Swift.Equatable {
    let launchConfigurationName: Swift.String?
    let imageId: Swift.String?
    let keyName: Swift.String?
    let securityGroups: [Swift.String]?
    let classicLinkVPCId: Swift.String?
    let classicLinkVPCSecurityGroups: [Swift.String]?
    let userData: Swift.String?
    let instanceId: Swift.String?
    let instanceType: Swift.String?
    let kernelId: Swift.String?
    let ramdiskId: Swift.String?
    let blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
    let instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
    let spotPrice: Swift.String?
    let iamInstanceProfile: Swift.String?
    let ebsOptimized: Swift.Bool?
    let associatePublicIpAddress: Swift.Bool?
    let placementTenancy: Swift.String?
    let metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
}

extension CreateLaunchConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case blockDeviceMappings = "BlockDeviceMappings"
        case classicLinkVPCId = "ClassicLinkVPCId"
        case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
        case ebsOptimized = "EbsOptimized"
        case iamInstanceProfile = "IamInstanceProfile"
        case imageId = "ImageId"
        case instanceId = "InstanceId"
        case instanceMonitoring = "InstanceMonitoring"
        case instanceType = "InstanceType"
        case kernelId = "KernelId"
        case keyName = "KeyName"
        case launchConfigurationName = "LaunchConfigurationName"
        case metadataOptions = "MetadataOptions"
        case placementTenancy = "PlacementTenancy"
        case ramdiskId = "RamdiskId"
        case securityGroups = "SecurityGroups"
        case spotPrice = "SpotPrice"
        case userData = "UserData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupsBuffer:[Swift.String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let classicLinkVPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classicLinkVPCId)
        classicLinkVPCId = classicLinkVPCIdDecoded
        if containerValues.contains(.classicLinkVPCSecurityGroups) {
            struct KeyVal0{struct member{}}
            let classicLinkVPCSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .classicLinkVPCSecurityGroups)
            if let classicLinkVPCSecurityGroupsWrappedContainer = classicLinkVPCSecurityGroupsWrappedContainer {
                let classicLinkVPCSecurityGroupsContainer = try classicLinkVPCSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var classicLinkVPCSecurityGroupsBuffer:[Swift.String]? = nil
                if let classicLinkVPCSecurityGroupsContainer = classicLinkVPCSecurityGroupsContainer {
                    classicLinkVPCSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in classicLinkVPCSecurityGroupsContainer {
                        classicLinkVPCSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroupsBuffer
            } else {
                classicLinkVPCSecurityGroups = []
            }
        } else {
            classicLinkVPCSecurityGroups = nil
        }
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct member{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[AutoScalingClientTypes.BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [AutoScalingClientTypes.BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let instanceMonitoringDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMonitoring.self, forKey: .instanceMonitoring)
        instanceMonitoring = instanceMonitoringDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .associatePublicIpAddress)
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let placementTenancyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementTenancy)
        placementTenancy = placementTenancyDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}

extension CreateLaunchConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateLaunchConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLaunchConfigurationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLaunchConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateLaunchConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateOrUpdateTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateOrUpdateTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateOrUpdateTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateOrUpdateTagsInput: Swift.Equatable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init (
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct CreateOrUpdateTagsInputBody: Swift.Equatable {
    let tags: [AutoScalingClientTypes.Tag]?
}

extension CreateOrUpdateTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateOrUpdateTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateOrUpdateTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateOrUpdateTagsOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrUpdateTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateOrUpdateTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.CustomizedMetricSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case metrics = "Metrics"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, metricdimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(metricdimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, targettrackingmetricdataquery0) in metrics.enumerated() {
                    try metricsContainer.encode(targettrackingmetricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDimension].self, forKey: .member)
                var dimensionsBuffer:[AutoScalingClientTypes.MetricDimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [AutoScalingClientTypes.MetricDimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statisticDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TargetTrackingMetricDataQuery].self, forKey: .member)
                var metricsBuffer:[AutoScalingClientTypes.TargetTrackingMetricDataQuery]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [AutoScalingClientTypes.TargetTrackingMetricDataQuery]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Amazon EC2 Auto Scaling. To create your customized metric specification:
    ///
    /// * Add values for each required property from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see [Publish custom metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    ///
    /// * Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases.
    ///
    ///
    /// For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html). Each individual service provides information about the metrics, namespace, and dimensions they use. For more information, see [Amazon Web Services services that publish CloudWatch metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide.
    public struct CustomizedMetricSpecification: Swift.Equatable {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public var dimensions: [AutoScalingClientTypes.MetricDimension]?
        /// The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html).
        public var metricName: Swift.String?
        /// The metrics to include in the target tracking scaling policy, as a metric data query. This can include both raw metric and metric math expressions.
        public var metrics: [AutoScalingClientTypes.TargetTrackingMetricDataQuery]?
        /// The namespace of the metric.
        public var namespace: Swift.String?
        /// The statistic of the metric.
        public var statistic: AutoScalingClientTypes.MetricStatistic?
        /// The unit of the metric. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init (
            dimensions: [AutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            metrics: [AutoScalingClientTypes.TargetTrackingMetricDataQuery]? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

extension DeleteAutoScalingGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: ClientRuntime.Key("ForceDelete"))
        }
        try container.encode("DeleteAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAutoScalingGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group.
    public var forceDelete: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

struct DeleteAutoScalingGroupInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let forceDelete: Swift.Bool?
}

extension DeleteAutoScalingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case forceDelete = "ForceDelete"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let forceDeleteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDelete)
        forceDelete = forceDeleteDecoded
    }
}

extension DeleteAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAutoScalingGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLaunchConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        try container.encode("DeleteLaunchConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteLaunchConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLaunchConfigurationInput: Swift.Equatable {
    /// The name of the launch configuration.
    /// This member is required.
    public var launchConfigurationName: Swift.String?

    public init (
        launchConfigurationName: Swift.String? = nil
    )
    {
        self.launchConfigurationName = launchConfigurationName
    }
}

struct DeleteLaunchConfigurationInputBody: Swift.Equatable {
    let launchConfigurationName: Swift.String?
}

extension DeleteLaunchConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchConfigurationName = "LaunchConfigurationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
    }
}

extension DeleteLaunchConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLaunchConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLaunchConfigurationOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLaunchConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLaunchConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLifecycleHookInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("DeleteLifecycleHook", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteLifecycleHookInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLifecycleHookInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookName = lifecycleHookName
    }
}

struct DeleteLifecycleHookInputBody: Swift.Equatable {
    let lifecycleHookName: Swift.String?
    let autoScalingGroupName: Swift.String?
}

extension DeleteLifecycleHookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case lifecycleHookName = "LifecycleHookName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
    }
}

extension DeleteLifecycleHookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLifecycleHookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLifecycleHookOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLifecycleHookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLifecycleHookOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteNotificationConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
        try container.encode("DeleteNotificationConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteNotificationConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteNotificationConfigurationInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.topicARN = topicARN
    }
}

struct DeleteNotificationConfigurationInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let topicARN: Swift.String?
}

extension DeleteNotificationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case topicARN = "TopicARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
    }
}

extension DeleteNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNotificationConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeletePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePolicyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.policyName = policyName
    }
}

struct DeletePolicyInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyName: Swift.String?
}

extension DeletePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension DeletePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePolicyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteScheduledActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        try container.encode("DeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteScheduledActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteScheduledActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionName = scheduledActionName
    }
}

struct DeleteScheduledActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionName: Swift.String?
}

extension DeleteScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scheduledActionName = "ScheduledActionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
    }
}

extension DeleteScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScheduledActionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTagsInput: Swift.Equatable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init (
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
    let tags: [AutoScalingClientTypes.Tag]?
}

extension DeleteTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteWarmPoolInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: ClientRuntime.Key("ForceDelete"))
        }
        try container.encode("DeleteWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteWarmPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances.
    public var forceDelete: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

struct DeleteWarmPoolInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let forceDelete: Swift.Bool?
}

extension DeleteWarmPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case forceDelete = "ForceDelete"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let forceDeleteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDelete)
        forceDelete = forceDeleteDecoded
    }
}

extension DeleteWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWarmPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeAccountLimitsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAccountLimitsInput: Swift.Equatable {

    public init () { }
}

extension DescribeAccountLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAccountLimitsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAccountLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.maxNumberOfAutoScalingGroups = output.maxNumberOfAutoScalingGroups
            self.maxNumberOfLaunchConfigurations = output.maxNumberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = output.numberOfAutoScalingGroups
            self.numberOfLaunchConfigurations = output.numberOfLaunchConfigurations
        } else {
            self.maxNumberOfAutoScalingGroups = nil
            self.maxNumberOfLaunchConfigurations = nil
            self.numberOfAutoScalingGroups = nil
            self.numberOfLaunchConfigurations = nil
        }
    }
}

public struct DescribeAccountLimitsOutputResponse: Swift.Equatable {
    /// The maximum number of groups allowed for your account. The default is 200 groups per Region.
    public var maxNumberOfAutoScalingGroups: Swift.Int?
    /// The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.
    public var maxNumberOfLaunchConfigurations: Swift.Int?
    /// The current number of groups for your account.
    public var numberOfAutoScalingGroups: Swift.Int?
    /// The current number of launch configurations for your account.
    public var numberOfLaunchConfigurations: Swift.Int?

    public init (
        maxNumberOfAutoScalingGroups: Swift.Int? = nil,
        maxNumberOfLaunchConfigurations: Swift.Int? = nil,
        numberOfAutoScalingGroups: Swift.Int? = nil,
        numberOfLaunchConfigurations: Swift.Int? = nil
    )
    {
        self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
        self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
        self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
    }
}

struct DescribeAccountLimitsOutputResponseBody: Swift.Equatable {
    let maxNumberOfAutoScalingGroups: Swift.Int?
    let maxNumberOfLaunchConfigurations: Swift.Int?
    let numberOfAutoScalingGroups: Swift.Int?
    let numberOfLaunchConfigurations: Swift.Int?
}

extension DescribeAccountLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
        case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
        case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
        case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountLimitsResult"))
        let maxNumberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfAutoScalingGroups)
        maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroupsDecoded
        let maxNumberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfLaunchConfigurations)
        maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurationsDecoded
        let numberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAutoScalingGroups)
        numberOfAutoScalingGroups = numberOfAutoScalingGroupsDecoded
        let numberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLaunchConfigurations)
        numberOfLaunchConfigurations = numberOfLaunchConfigurationsDecoded
    }
}

extension DescribeAdjustmentTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAdjustmentTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAdjustmentTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAdjustmentTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeAdjustmentTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAdjustmentTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAdjustmentTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAdjustmentTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAdjustmentTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.adjustmentTypes = output.adjustmentTypes
        } else {
            self.adjustmentTypes = nil
        }
    }
}

public struct DescribeAdjustmentTypesOutputResponse: Swift.Equatable {
    /// The policy adjustment types.
    public var adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?

    public init (
        adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]? = nil
    )
    {
        self.adjustmentTypes = adjustmentTypes
    }
}

struct DescribeAdjustmentTypesOutputResponseBody: Swift.Equatable {
    let adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?
}

extension DescribeAdjustmentTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentTypes = "AdjustmentTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAdjustmentTypesResult"))
        if containerValues.contains(.adjustmentTypes) {
            struct KeyVal0{struct member{}}
            let adjustmentTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .adjustmentTypes)
            if let adjustmentTypesWrappedContainer = adjustmentTypesWrappedContainer {
                let adjustmentTypesContainer = try adjustmentTypesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AdjustmentType].self, forKey: .member)
                var adjustmentTypesBuffer:[AutoScalingClientTypes.AdjustmentType]? = nil
                if let adjustmentTypesContainer = adjustmentTypesContainer {
                    adjustmentTypesBuffer = [AutoScalingClientTypes.AdjustmentType]()
                    for structureContainer0 in adjustmentTypesContainer {
                        adjustmentTypesBuffer?.append(structureContainer0)
                    }
                }
                adjustmentTypes = adjustmentTypesBuffer
            } else {
                adjustmentTypes = []
            }
        } else {
            adjustmentTypes = nil
        }
    }
}

extension DescribeAutoScalingGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            if !autoScalingGroupNames.isEmpty {
                var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
                for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                    try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
                try autoScalingGroupNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAutoScalingGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAutoScalingGroupsInput: Swift.Equatable {
    /// The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the MaxRecords property. If you omit this property, all Auto Scaling groups are described.
    public var autoScalingGroupNames: [Swift.String]?
    /// One or more filters to limit the results based on specific tags.
    public var filters: [AutoScalingClientTypes.Filter]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupNames: [Swift.String]? = nil,
        filters: [AutoScalingClientTypes.Filter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingGroupsInputBody: Swift.Equatable {
    let autoScalingGroupNames: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
    let filters: [AutoScalingClientTypes.Filter]?
}

extension DescribeAutoScalingGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupNames = "AutoScalingGroupNames"
        case filters = "Filters"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.autoScalingGroupNames) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroupNames)
            if let autoScalingGroupNamesWrappedContainer = autoScalingGroupNamesWrappedContainer {
                let autoScalingGroupNamesContainer = try autoScalingGroupNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var autoScalingGroupNamesBuffer:[Swift.String]? = nil
                if let autoScalingGroupNamesContainer = autoScalingGroupNamesContainer {
                    autoScalingGroupNamesBuffer = [Swift.String]()
                    for stringContainer0 in autoScalingGroupNamesContainer {
                        autoScalingGroupNamesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingGroupNames = autoScalingGroupNamesBuffer
            } else {
                autoScalingGroupNames = []
            }
        } else {
            autoScalingGroupNames = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[AutoScalingClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [AutoScalingClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
    }
}

extension DescribeAutoScalingGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAutoScalingGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAutoScalingGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingGroups = output.autoScalingGroups
            self.nextToken = output.nextToken
        } else {
            self.autoScalingGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingGroupsOutputResponse: Swift.Equatable {
    /// The groups.
    /// This member is required.
    public var autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingGroupsOutputResponseBody: Swift.Equatable {
    let autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]?
    let nextToken: Swift.String?
}

extension DescribeAutoScalingGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroups = "AutoScalingGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingGroupsResult"))
        if containerValues.contains(.autoScalingGroups) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroups)
            if let autoScalingGroupsWrappedContainer = autoScalingGroupsWrappedContainer {
                let autoScalingGroupsContainer = try autoScalingGroupsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AutoScalingGroup].self, forKey: .member)
                var autoScalingGroupsBuffer:[AutoScalingClientTypes.AutoScalingGroup]? = nil
                if let autoScalingGroupsContainer = autoScalingGroupsContainer {
                    autoScalingGroupsBuffer = [AutoScalingClientTypes.AutoScalingGroup]()
                    for structureContainer0 in autoScalingGroupsContainer {
                        autoScalingGroupsBuffer?.append(structureContainer0)
                    }
                }
                autoScalingGroups = autoScalingGroupsBuffer
            } else {
                autoScalingGroups = []
            }
        } else {
            autoScalingGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAutoScalingInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAutoScalingInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAutoScalingInstancesInput: Swift.Equatable {
    /// The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error. Array Members: Maximum number of 50 items.
    public var instanceIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        instanceIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceIds = instanceIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingInstancesInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeAutoScalingInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceIds = "InstanceIds"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAutoScalingInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAutoScalingInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAutoScalingInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingInstances = output.autoScalingInstances
            self.nextToken = output.nextToken
        } else {
            self.autoScalingInstances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingInstancesOutputResponse: Swift.Equatable {
    /// The instances.
    public var autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingInstances = autoScalingInstances
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingInstancesOutputResponseBody: Swift.Equatable {
    let autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]?
    let nextToken: Swift.String?
}

extension DescribeAutoScalingInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingInstances = "AutoScalingInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingInstancesResult"))
        if containerValues.contains(.autoScalingInstances) {
            struct KeyVal0{struct member{}}
            let autoScalingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingInstances)
            if let autoScalingInstancesWrappedContainer = autoScalingInstancesWrappedContainer {
                let autoScalingInstancesContainer = try autoScalingInstancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AutoScalingInstanceDetails].self, forKey: .member)
                var autoScalingInstancesBuffer:[AutoScalingClientTypes.AutoScalingInstanceDetails]? = nil
                if let autoScalingInstancesContainer = autoScalingInstancesContainer {
                    autoScalingInstancesBuffer = [AutoScalingClientTypes.AutoScalingInstanceDetails]()
                    for structureContainer0 in autoScalingInstancesContainer {
                        autoScalingInstancesBuffer?.append(structureContainer0)
                    }
                }
                autoScalingInstances = autoScalingInstancesBuffer
            } else {
                autoScalingInstances = []
            }
        } else {
            autoScalingInstances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAutoScalingNotificationTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAutoScalingNotificationTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAutoScalingNotificationTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAutoScalingNotificationTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeAutoScalingNotificationTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingNotificationTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAutoScalingNotificationTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingNotificationTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAutoScalingNotificationTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingNotificationTypes = output.autoScalingNotificationTypes
        } else {
            self.autoScalingNotificationTypes = nil
        }
    }
}

public struct DescribeAutoScalingNotificationTypesOutputResponse: Swift.Equatable {
    /// The notification types.
    public var autoScalingNotificationTypes: [Swift.String]?

    public init (
        autoScalingNotificationTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingNotificationTypes = autoScalingNotificationTypes
    }
}

struct DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Equatable {
    let autoScalingNotificationTypes: [Swift.String]?
}

extension DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingNotificationTypesResult"))
        if containerValues.contains(.autoScalingNotificationTypes) {
            struct KeyVal0{struct member{}}
            let autoScalingNotificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingNotificationTypes)
            if let autoScalingNotificationTypesWrappedContainer = autoScalingNotificationTypesWrappedContainer {
                let autoScalingNotificationTypesContainer = try autoScalingNotificationTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var autoScalingNotificationTypesBuffer:[Swift.String]? = nil
                if let autoScalingNotificationTypesContainer = autoScalingNotificationTypesContainer {
                    autoScalingNotificationTypesBuffer = [Swift.String]()
                    for stringContainer0 in autoScalingNotificationTypesContainer {
                        autoScalingNotificationTypesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingNotificationTypes = autoScalingNotificationTypesBuffer
            } else {
                autoScalingNotificationTypes = []
            }
        } else {
            autoScalingNotificationTypes = nil
        }
    }
}

extension DescribeInstanceRefreshesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceRefreshIds = instanceRefreshIds {
            if !instanceRefreshIds.isEmpty {
                var instanceRefreshIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceRefreshIds"))
                for (index0, xmlstringmaxlen2550) in instanceRefreshIds.enumerated() {
                    try instanceRefreshIdsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceRefreshIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceRefreshIds"))
                try instanceRefreshIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeInstanceRefreshes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeInstanceRefreshesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInstanceRefreshesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance refresh IDs.
    public var instanceRefreshIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceRefreshIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceRefreshIds = instanceRefreshIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeInstanceRefreshesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let instanceRefreshIds: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeInstanceRefreshesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceRefreshIds = "InstanceRefreshIds"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.instanceRefreshIds) {
            struct KeyVal0{struct member{}}
            let instanceRefreshIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshIds)
            if let instanceRefreshIdsWrappedContainer = instanceRefreshIdsWrappedContainer {
                let instanceRefreshIdsContainer = try instanceRefreshIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceRefreshIdsBuffer:[Swift.String]? = nil
                if let instanceRefreshIdsContainer = instanceRefreshIdsContainer {
                    instanceRefreshIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceRefreshIdsContainer {
                        instanceRefreshIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceRefreshIds = instanceRefreshIdsBuffer
            } else {
                instanceRefreshIds = []
            }
        } else {
            instanceRefreshIds = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeInstanceRefreshesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInstanceRefreshesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInstanceRefreshesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceRefreshesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInstanceRefreshesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshes = output.instanceRefreshes
            self.nextToken = output.nextToken
        } else {
            self.instanceRefreshes = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInstanceRefreshesOutputResponse: Swift.Equatable {
    /// The instance refreshes for the specified group, sorted by creation timestamp in descending order.
    public var instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceRefreshes = instanceRefreshes
        self.nextToken = nextToken
    }
}

struct DescribeInstanceRefreshesOutputResponseBody: Swift.Equatable {
    let instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]?
    let nextToken: Swift.String?
}

extension DescribeInstanceRefreshesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshes = "InstanceRefreshes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInstanceRefreshesResult"))
        if containerValues.contains(.instanceRefreshes) {
            struct KeyVal0{struct member{}}
            let instanceRefreshesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshes)
            if let instanceRefreshesWrappedContainer = instanceRefreshesWrappedContainer {
                let instanceRefreshesContainer = try instanceRefreshesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.InstanceRefresh].self, forKey: .member)
                var instanceRefreshesBuffer:[AutoScalingClientTypes.InstanceRefresh]? = nil
                if let instanceRefreshesContainer = instanceRefreshesContainer {
                    instanceRefreshesBuffer = [AutoScalingClientTypes.InstanceRefresh]()
                    for structureContainer0 in instanceRefreshesContainer {
                        instanceRefreshesBuffer?.append(structureContainer0)
                    }
                }
                instanceRefreshes = instanceRefreshesBuffer
            } else {
                instanceRefreshes = []
            }
        } else {
            instanceRefreshes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeLaunchConfigurationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchConfigurationNames = launchConfigurationNames {
            if !launchConfigurationNames.isEmpty {
                var launchConfigurationNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchConfigurationNames"))
                for (index0, xmlstringmaxlen2550) in launchConfigurationNames.enumerated() {
                    try launchConfigurationNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var launchConfigurationNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchConfigurationNames"))
                try launchConfigurationNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLaunchConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLaunchConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLaunchConfigurationsInput: Swift.Equatable {
    /// The launch configuration names. If you omit this property, all launch configurations are described. Array Members: Maximum number of 50 items.
    public var launchConfigurationNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        launchConfigurationNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurationNames = launchConfigurationNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeLaunchConfigurationsInputBody: Swift.Equatable {
    let launchConfigurationNames: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeLaunchConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchConfigurationNames = "LaunchConfigurationNames"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.launchConfigurationNames) {
            struct KeyVal0{struct member{}}
            let launchConfigurationNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurationNames)
            if let launchConfigurationNamesWrappedContainer = launchConfigurationNamesWrappedContainer {
                let launchConfigurationNamesContainer = try launchConfigurationNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var launchConfigurationNamesBuffer:[Swift.String]? = nil
                if let launchConfigurationNamesContainer = launchConfigurationNamesContainer {
                    launchConfigurationNamesBuffer = [Swift.String]()
                    for stringContainer0 in launchConfigurationNamesContainer {
                        launchConfigurationNamesBuffer?.append(stringContainer0)
                    }
                }
                launchConfigurationNames = launchConfigurationNamesBuffer
            } else {
                launchConfigurationNames = []
            }
        } else {
            launchConfigurationNames = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeLaunchConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLaunchConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLaunchConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLaunchConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLaunchConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.launchConfigurations = output.launchConfigurations
            self.nextToken = output.nextToken
        } else {
            self.launchConfigurations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLaunchConfigurationsOutputResponse: Swift.Equatable {
    /// The launch configurations.
    /// This member is required.
    public var launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurations = launchConfigurations
        self.nextToken = nextToken
    }
}

struct DescribeLaunchConfigurationsOutputResponseBody: Swift.Equatable {
    let launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeLaunchConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchConfigurations = "LaunchConfigurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLaunchConfigurationsResult"))
        if containerValues.contains(.launchConfigurations) {
            struct KeyVal0{struct member{}}
            let launchConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurations)
            if let launchConfigurationsWrappedContainer = launchConfigurationsWrappedContainer {
                let launchConfigurationsContainer = try launchConfigurationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LaunchConfiguration].self, forKey: .member)
                var launchConfigurationsBuffer:[AutoScalingClientTypes.LaunchConfiguration]? = nil
                if let launchConfigurationsContainer = launchConfigurationsContainer {
                    launchConfigurationsBuffer = [AutoScalingClientTypes.LaunchConfiguration]()
                    for structureContainer0 in launchConfigurationsContainer {
                        launchConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                launchConfigurations = launchConfigurationsBuffer
            } else {
                launchConfigurations = []
            }
        } else {
            launchConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeLifecycleHookTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeLifecycleHookTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLifecycleHookTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLifecycleHookTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeLifecycleHookTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHookTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLifecycleHookTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHookTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLifecycleHookTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycleHookTypes = output.lifecycleHookTypes
        } else {
            self.lifecycleHookTypes = nil
        }
    }
}

public struct DescribeLifecycleHookTypesOutputResponse: Swift.Equatable {
    /// The lifecycle hook types.
    public var lifecycleHookTypes: [Swift.String]?

    public init (
        lifecycleHookTypes: [Swift.String]? = nil
    )
    {
        self.lifecycleHookTypes = lifecycleHookTypes
    }
}

struct DescribeLifecycleHookTypesOutputResponseBody: Swift.Equatable {
    let lifecycleHookTypes: [Swift.String]?
}

extension DescribeLifecycleHookTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleHookTypes = "LifecycleHookTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLifecycleHookTypesResult"))
        if containerValues.contains(.lifecycleHookTypes) {
            struct KeyVal0{struct member{}}
            let lifecycleHookTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookTypes)
            if let lifecycleHookTypesWrappedContainer = lifecycleHookTypesWrappedContainer {
                let lifecycleHookTypesContainer = try lifecycleHookTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var lifecycleHookTypesBuffer:[Swift.String]? = nil
                if let lifecycleHookTypesContainer = lifecycleHookTypesContainer {
                    lifecycleHookTypesBuffer = [Swift.String]()
                    for stringContainer0 in lifecycleHookTypesContainer {
                        lifecycleHookTypesBuffer?.append(stringContainer0)
                    }
                }
                lifecycleHookTypes = lifecycleHookTypesBuffer
            } else {
                lifecycleHookTypes = []
            }
        } else {
            lifecycleHookTypes = nil
        }
    }
}

extension DescribeLifecycleHooksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let lifecycleHookNames = lifecycleHookNames {
            if !lifecycleHookNames.isEmpty {
                var lifecycleHookNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookNames"))
                for (index0, asciistringmaxlen2550) in lifecycleHookNames.enumerated() {
                    try lifecycleHookNamesContainer.encode(asciistringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var lifecycleHookNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookNames"))
                try lifecycleHookNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeLifecycleHooks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLifecycleHooksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLifecycleHooksInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described.
    public var lifecycleHookNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookNames = lifecycleHookNames
    }
}

struct DescribeLifecycleHooksInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let lifecycleHookNames: [Swift.String]?
}

extension DescribeLifecycleHooksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case lifecycleHookNames = "LifecycleHookNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.lifecycleHookNames) {
            struct KeyVal0{struct member{}}
            let lifecycleHookNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookNames)
            if let lifecycleHookNamesWrappedContainer = lifecycleHookNamesWrappedContainer {
                let lifecycleHookNamesContainer = try lifecycleHookNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var lifecycleHookNamesBuffer:[Swift.String]? = nil
                if let lifecycleHookNamesContainer = lifecycleHookNamesContainer {
                    lifecycleHookNamesBuffer = [Swift.String]()
                    for stringContainer0 in lifecycleHookNamesContainer {
                        lifecycleHookNamesBuffer?.append(stringContainer0)
                    }
                }
                lifecycleHookNames = lifecycleHookNamesBuffer
            } else {
                lifecycleHookNames = []
            }
        } else {
            lifecycleHookNames = nil
        }
    }
}

extension DescribeLifecycleHooksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHooksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLifecycleHooksOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHooksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLifecycleHooksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycleHooks = output.lifecycleHooks
        } else {
            self.lifecycleHooks = nil
        }
    }
}

public struct DescribeLifecycleHooksOutputResponse: Swift.Equatable {
    /// The lifecycle hooks for the specified group.
    public var lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?

    public init (
        lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]? = nil
    )
    {
        self.lifecycleHooks = lifecycleHooks
    }
}

struct DescribeLifecycleHooksOutputResponseBody: Swift.Equatable {
    let lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?
}

extension DescribeLifecycleHooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleHooks = "LifecycleHooks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLifecycleHooksResult"))
        if containerValues.contains(.lifecycleHooks) {
            struct KeyVal0{struct member{}}
            let lifecycleHooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHooks)
            if let lifecycleHooksWrappedContainer = lifecycleHooksWrappedContainer {
                let lifecycleHooksContainer = try lifecycleHooksWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LifecycleHook].self, forKey: .member)
                var lifecycleHooksBuffer:[AutoScalingClientTypes.LifecycleHook]? = nil
                if let lifecycleHooksContainer = lifecycleHooksContainer {
                    lifecycleHooksBuffer = [AutoScalingClientTypes.LifecycleHook]()
                    for structureContainer0 in lifecycleHooksContainer {
                        lifecycleHooksBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHooks = lifecycleHooksBuffer
            } else {
                lifecycleHooks = []
            }
        } else {
            lifecycleHooks = nil
        }
    }
}

extension DescribeLoadBalancerTargetGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoadBalancerTargetGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancerTargetGroupsInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeLoadBalancerTargetGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLoadBalancerTargetGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancerTargetGroups = output.loadBalancerTargetGroups
            self.nextToken = output.nextToken
        } else {
            self.loadBalancerTargetGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {
    /// Information about the target groups.
    public var loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancerTargetGroups = loadBalancerTargetGroups
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Equatable {
    let loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    let nextToken: Swift.String?
}

extension DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoadBalancerTargetGroupsResult"))
        if containerValues.contains(.loadBalancerTargetGroups) {
            struct KeyVal0{struct member{}}
            let loadBalancerTargetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerTargetGroups)
            if let loadBalancerTargetGroupsWrappedContainer = loadBalancerTargetGroupsWrappedContainer {
                let loadBalancerTargetGroupsContainer = try loadBalancerTargetGroupsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadBalancerTargetGroupState].self, forKey: .member)
                var loadBalancerTargetGroupsBuffer:[AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil
                if let loadBalancerTargetGroupsContainer = loadBalancerTargetGroupsContainer {
                    loadBalancerTargetGroupsBuffer = [AutoScalingClientTypes.LoadBalancerTargetGroupState]()
                    for structureContainer0 in loadBalancerTargetGroupsContainer {
                        loadBalancerTargetGroupsBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerTargetGroups = loadBalancerTargetGroupsBuffer
            } else {
                loadBalancerTargetGroups = []
            }
        } else {
            loadBalancerTargetGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeLoadBalancersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoadBalancersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancersInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLoadBalancersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancers = output.loadBalancers
            self.nextToken = output.nextToken
        } else {
            self.loadBalancers = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancersOutputResponse: Swift.Equatable {
    /// The load balancers.
    public var loadBalancers: [AutoScalingClientTypes.LoadBalancerState]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        loadBalancers: [AutoScalingClientTypes.LoadBalancerState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancersOutputResponseBody: Swift.Equatable {
    let loadBalancers: [AutoScalingClientTypes.LoadBalancerState]?
    let nextToken: Swift.String?
}

extension DescribeLoadBalancersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancers = "LoadBalancers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoadBalancersResult"))
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadBalancerState].self, forKey: .member)
                var loadBalancersBuffer:[AutoScalingClientTypes.LoadBalancerState]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [AutoScalingClientTypes.LoadBalancerState]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMetricCollectionTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeMetricCollectionTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeMetricCollectionTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMetricCollectionTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeMetricCollectionTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeMetricCollectionTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMetricCollectionTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMetricCollectionTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMetricCollectionTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.granularities = output.granularities
            self.metrics = output.metrics
        } else {
            self.granularities = nil
            self.metrics = nil
        }
    }
}

public struct DescribeMetricCollectionTypesOutputResponse: Swift.Equatable {
    /// The granularities for the metrics.
    public var granularities: [AutoScalingClientTypes.MetricGranularityType]?
    /// The metrics.
    public var metrics: [AutoScalingClientTypes.MetricCollectionType]?

    public init (
        granularities: [AutoScalingClientTypes.MetricGranularityType]? = nil,
        metrics: [AutoScalingClientTypes.MetricCollectionType]? = nil
    )
    {
        self.granularities = granularities
        self.metrics = metrics
    }
}

struct DescribeMetricCollectionTypesOutputResponseBody: Swift.Equatable {
    let metrics: [AutoScalingClientTypes.MetricCollectionType]?
    let granularities: [AutoScalingClientTypes.MetricGranularityType]?
}

extension DescribeMetricCollectionTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularities = "Granularities"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeMetricCollectionTypesResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricCollectionType].self, forKey: .member)
                var metricsBuffer:[AutoScalingClientTypes.MetricCollectionType]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [AutoScalingClientTypes.MetricCollectionType]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        if containerValues.contains(.granularities) {
            struct KeyVal0{struct member{}}
            let granularitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .granularities)
            if let granularitiesWrappedContainer = granularitiesWrappedContainer {
                let granularitiesContainer = try granularitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricGranularityType].self, forKey: .member)
                var granularitiesBuffer:[AutoScalingClientTypes.MetricGranularityType]? = nil
                if let granularitiesContainer = granularitiesContainer {
                    granularitiesBuffer = [AutoScalingClientTypes.MetricGranularityType]()
                    for structureContainer0 in granularitiesContainer {
                        granularitiesBuffer?.append(structureContainer0)
                    }
                }
                granularities = granularitiesBuffer
            } else {
                granularities = []
            }
        } else {
            granularities = nil
        }
    }
}

extension DescribeNotificationConfigurationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            if !autoScalingGroupNames.isEmpty {
                var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
                for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                    try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
                try autoScalingGroupNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeNotificationConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeNotificationConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeNotificationConfigurationsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeNotificationConfigurationsInputBody: Swift.Equatable {
    let autoScalingGroupNames: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeNotificationConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupNames = "AutoScalingGroupNames"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.autoScalingGroupNames) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroupNames)
            if let autoScalingGroupNamesWrappedContainer = autoScalingGroupNamesWrappedContainer {
                let autoScalingGroupNamesContainer = try autoScalingGroupNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var autoScalingGroupNamesBuffer:[Swift.String]? = nil
                if let autoScalingGroupNamesContainer = autoScalingGroupNamesContainer {
                    autoScalingGroupNamesBuffer = [Swift.String]()
                    for stringContainer0 in autoScalingGroupNamesContainer {
                        autoScalingGroupNamesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingGroupNames = autoScalingGroupNamesBuffer
            } else {
                autoScalingGroupNames = []
            }
        } else {
            autoScalingGroupNames = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeNotificationConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeNotificationConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeNotificationConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotificationConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeNotificationConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.notificationConfigurations = output.notificationConfigurations
        } else {
            self.nextToken = nil
            self.notificationConfigurations = nil
        }
    }
}

public struct DescribeNotificationConfigurationsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The notification configurations.
    /// This member is required.
    public var notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?

    public init (
        nextToken: Swift.String? = nil,
        notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.notificationConfigurations = notificationConfigurations
    }
}

struct DescribeNotificationConfigurationsOutputResponseBody: Swift.Equatable {
    let notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeNotificationConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case notificationConfigurations = "NotificationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeNotificationConfigurationsResult"))
        if containerValues.contains(.notificationConfigurations) {
            struct KeyVal0{struct member{}}
            let notificationConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationConfigurations)
            if let notificationConfigurationsWrappedContainer = notificationConfigurationsWrappedContainer {
                let notificationConfigurationsContainer = try notificationConfigurationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.NotificationConfiguration].self, forKey: .member)
                var notificationConfigurationsBuffer:[AutoScalingClientTypes.NotificationConfiguration]? = nil
                if let notificationConfigurationsContainer = notificationConfigurationsContainer {
                    notificationConfigurationsBuffer = [AutoScalingClientTypes.NotificationConfiguration]()
                    for structureContainer0 in notificationConfigurationsContainer {
                        notificationConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                notificationConfigurations = notificationConfigurationsBuffer
            } else {
                notificationConfigurations = []
            }
        } else {
            notificationConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePoliciesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let policyNames = policyNames {
            if !policyNames.isEmpty {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                for (index0, resourcename0) in policyNames.enumerated() {
                    try policyNamesContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                try policyNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let policyTypes = policyTypes {
            if !policyTypes.isEmpty {
                var policyTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyTypes"))
                for (index0, xmlstringmaxlen640) in policyTypes.enumerated() {
                    try policyTypesContainer.encode(xmlstringmaxlen640, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var policyTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyTypes"))
                try policyTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribePolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePoliciesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to be returned with each call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error. Array Members: Maximum number of 50 items.
    public var policyNames: [Swift.String]?
    /// One or more policy types. The valid values are SimpleScaling, StepScaling, TargetTrackingScaling, and PredictiveScaling.
    public var policyTypes: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        policyTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.policyNames = policyNames
        self.policyTypes = policyTypes
    }
}

struct DescribePoliciesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyNames: [Swift.String]?
    let policyTypes: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case policyNames = "PolicyNames"
        case policyTypes = "PolicyTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
        if containerValues.contains(.policyTypes) {
            struct KeyVal0{struct member{}}
            let policyTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyTypes)
            if let policyTypesWrappedContainer = policyTypesWrappedContainer {
                let policyTypesContainer = try policyTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyTypesBuffer:[Swift.String]? = nil
                if let policyTypesContainer = policyTypesContainer {
                    policyTypesBuffer = [Swift.String]()
                    for stringContainer0 in policyTypesContainer {
                        policyTypesBuffer?.append(stringContainer0)
                    }
                }
                policyTypes = policyTypesBuffer
            } else {
                policyTypes = []
            }
        } else {
            policyTypes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

public struct DescribePoliciesOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scaling policies.
    public var scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribePoliciesOutputResponseBody: Swift.Equatable {
    let scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?
    let nextToken: Swift.String?
}

extension DescribePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePoliciesResult"))
        if containerValues.contains(.scalingPolicies) {
            struct KeyVal0{struct member{}}
            let scalingPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingPolicies)
            if let scalingPoliciesWrappedContainer = scalingPoliciesWrappedContainer {
                let scalingPoliciesContainer = try scalingPoliciesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScalingPolicy].self, forKey: .member)
                var scalingPoliciesBuffer:[AutoScalingClientTypes.ScalingPolicy]? = nil
                if let scalingPoliciesContainer = scalingPoliciesContainer {
                    scalingPoliciesBuffer = [AutoScalingClientTypes.ScalingPolicy]()
                    for structureContainer0 in scalingPoliciesContainer {
                        scalingPoliciesBuffer?.append(structureContainer0)
                    }
                }
                scalingPolicies = scalingPoliciesBuffer
            } else {
                scalingPolicies = []
            }
        } else {
            scalingPolicies = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingActivitiesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityIds = activityIds {
            if !activityIds.isEmpty {
                var activityIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActivityIds"))
                for (index0, xmlstring0) in activityIds.enumerated() {
                    try activityIdsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var activityIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActivityIds"))
                try activityIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let includeDeletedGroups = includeDeletedGroups {
            try container.encode(includeDeletedGroups, forKey: ClientRuntime.Key("IncludeDeletedGroups"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeScalingActivities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeScalingActivitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScalingActivitiesInput: Swift.Equatable {
    /// The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group. Array Members: Maximum number of 50 IDs.
    public var activityIds: [Swift.String]?
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// Indicates whether to include scaling activity from deleted Auto Scaling groups.
    public var includeDeletedGroups: Swift.Bool?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        activityIds: [Swift.String]? = nil,
        autoScalingGroupName: Swift.String? = nil,
        includeDeletedGroups: Swift.Bool? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activityIds = activityIds
        self.autoScalingGroupName = autoScalingGroupName
        self.includeDeletedGroups = includeDeletedGroups
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeScalingActivitiesInputBody: Swift.Equatable {
    let activityIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
    let includeDeletedGroups: Swift.Bool?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeScalingActivitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityIds = "ActivityIds"
        case autoScalingGroupName = "AutoScalingGroupName"
        case includeDeletedGroups = "IncludeDeletedGroups"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.activityIds) {
            struct KeyVal0{struct member{}}
            let activityIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activityIds)
            if let activityIdsWrappedContainer = activityIdsWrappedContainer {
                let activityIdsContainer = try activityIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var activityIdsBuffer:[Swift.String]? = nil
                if let activityIdsContainer = activityIdsContainer {
                    activityIdsBuffer = [Swift.String]()
                    for stringContainer0 in activityIdsContainer {
                        activityIdsBuffer?.append(stringContainer0)
                    }
                }
                activityIds = activityIdsBuffer
            } else {
                activityIds = []
            }
        } else {
            activityIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let includeDeletedGroupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDeletedGroups)
        includeDeletedGroups = includeDeletedGroupsDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingActivitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingActivitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScalingActivitiesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingActivitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScalingActivitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
            self.nextToken = output.nextToken
        } else {
            self.activities = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeScalingActivitiesOutputResponse: Swift.Equatable {
    /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
    /// This member is required.
    public var activities: [AutoScalingClientTypes.Activity]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activities = activities
        self.nextToken = nextToken
    }
}

struct DescribeScalingActivitiesOutputResponseBody: Swift.Equatable {
    let activities: [AutoScalingClientTypes.Activity]?
    let nextToken: Swift.String?
}

extension DescribeScalingActivitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScalingActivitiesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingProcessTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeScalingProcessTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeScalingProcessTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScalingProcessTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeScalingProcessTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingProcessTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScalingProcessTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingProcessTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScalingProcessTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processes = output.processes
        } else {
            self.processes = nil
        }
    }
}

public struct DescribeScalingProcessTypesOutputResponse: Swift.Equatable {
    /// The names of the process types.
    public var processes: [AutoScalingClientTypes.ProcessType]?

    public init (
        processes: [AutoScalingClientTypes.ProcessType]? = nil
    )
    {
        self.processes = processes
    }
}

struct DescribeScalingProcessTypesOutputResponseBody: Swift.Equatable {
    let processes: [AutoScalingClientTypes.ProcessType]?
}

extension DescribeScalingProcessTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processes = "Processes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScalingProcessTypesResult"))
        if containerValues.contains(.processes) {
            struct KeyVal0{struct member{}}
            let processesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .processes)
            if let processesWrappedContainer = processesWrappedContainer {
                let processesContainer = try processesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ProcessType].self, forKey: .member)
                var processesBuffer:[AutoScalingClientTypes.ProcessType]? = nil
                if let processesContainer = processesContainer {
                    processesBuffer = [AutoScalingClientTypes.ProcessType]()
                    for structureContainer0 in processesContainer {
                        processesBuffer?.append(structureContainer0)
                    }
                }
                processes = processesBuffer
            } else {
                processes = []
            }
        } else {
            processes = nil
        }
    }
}

extension DescribeScheduledActionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scheduledActionNames = scheduledActionNames {
            if !scheduledActionNames.isEmpty {
                var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
                for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                    try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
                try scheduledActionNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("DescribeScheduledActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeScheduledActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScheduledActionsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The latest scheduled start time to return. If scheduled action names are provided, this property is ignored.
    public var endTime: ClientRuntime.Date?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error. Array Members: Maximum number of 50 actions.
    public var scheduledActionNames: [Swift.String]?
    /// The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored.
    public var startTime: ClientRuntime.Date?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scheduledActionNames = scheduledActionNames
        self.startTime = startTime
    }
}

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionNames: [Swift.String]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case endTime = "EndTime"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case scheduledActionNames = "ScheduledActionNames"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scheduledActionNames) {
            struct KeyVal0{struct member{}}
            let scheduledActionNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledActionNames)
            if let scheduledActionNamesWrappedContainer = scheduledActionNamesWrappedContainer {
                let scheduledActionNamesContainer = try scheduledActionNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduledActionNamesBuffer:[Swift.String]? = nil
                if let scheduledActionNamesContainer = scheduledActionNamesContainer {
                    scheduledActionNamesBuffer = [Swift.String]()
                    for stringContainer0 in scheduledActionNamesContainer {
                        scheduledActionNamesBuffer?.append(stringContainer0)
                    }
                }
                scheduledActionNames = scheduledActionNamesBuffer
            } else {
                scheduledActionNames = []
            }
        } else {
            scheduledActionNames = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeScheduledActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScheduledActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScheduledActionsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduledActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScheduledActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scheduledUpdateGroupActions = output.scheduledUpdateGroupActions
        } else {
            self.nextToken = nil
            self.scheduledUpdateGroupActions = nil
        }
    }
}

public struct DescribeScheduledActionsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scheduled actions.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]?

    public init (
        nextToken: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

struct DescribeScheduledActionsOutputResponseBody: Swift.Equatable {
    let scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]?
    let nextToken: Swift.String?
}

extension DescribeScheduledActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScheduledActionsResult"))
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScheduledUpdateGroupAction].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.ScheduledUpdateGroupAction]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.ScheduledUpdateGroupAction]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTagsInput: Swift.Equatable {
    /// One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, auto-scaling-group) is 1000.
    public var filters: [AutoScalingClientTypes.Filter]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        filters: [AutoScalingClientTypes.Filter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeTagsInputBody: Swift.Equatable {
    let filters: [AutoScalingClientTypes.Filter]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[AutoScalingClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [AutoScalingClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct DescribeTagsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// One or more tags.
    public var tags: [AutoScalingClientTypes.TagDescription]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [AutoScalingClientTypes.TagDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct DescribeTagsOutputResponseBody: Swift.Equatable {
    let tags: [AutoScalingClientTypes.TagDescription]?
    let nextToken: Swift.String?
}

extension DescribeTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TagDescription].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeTerminationPolicyTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeTerminationPolicyTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTerminationPolicyTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTerminationPolicyTypesInput: Swift.Equatable {

    public init () { }
}

extension DescribeTerminationPolicyTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTerminationPolicyTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTerminationPolicyTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTerminationPolicyTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTerminationPolicyTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.terminationPolicyTypes = output.terminationPolicyTypes
        } else {
            self.terminationPolicyTypes = nil
        }
    }
}

public struct DescribeTerminationPolicyTypesOutputResponse: Swift.Equatable {
    /// The termination policies supported by Amazon EC2 Auto Scaling: OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, Default, OldestLaunchTemplate, and AllocationStrategy.
    public var terminationPolicyTypes: [Swift.String]?

    public init (
        terminationPolicyTypes: [Swift.String]? = nil
    )
    {
        self.terminationPolicyTypes = terminationPolicyTypes
    }
}

struct DescribeTerminationPolicyTypesOutputResponseBody: Swift.Equatable {
    let terminationPolicyTypes: [Swift.String]?
}

extension DescribeTerminationPolicyTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case terminationPolicyTypes = "TerminationPolicyTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTerminationPolicyTypesResult"))
        if containerValues.contains(.terminationPolicyTypes) {
            struct KeyVal0{struct member{}}
            let terminationPolicyTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicyTypes)
            if let terminationPolicyTypesWrappedContainer = terminationPolicyTypesWrappedContainer {
                let terminationPolicyTypesContainer = try terminationPolicyTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPolicyTypesBuffer:[Swift.String]? = nil
                if let terminationPolicyTypesContainer = terminationPolicyTypesContainer {
                    terminationPolicyTypesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPolicyTypesContainer {
                        terminationPolicyTypesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicyTypes = terminationPolicyTypesBuffer
            } else {
                terminationPolicyTypes = []
            }
        } else {
            terminationPolicyTypes = nil
        }
    }
}

extension DescribeTrafficSourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let trafficSourceType = trafficSourceType {
            try container.encode(trafficSourceType, forKey: ClientRuntime.Key("TrafficSourceType"))
        }
        try container.encode("DescribeTrafficSources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTrafficSourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTrafficSourcesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The type of traffic source you are describing. Currently, the only valid value is vpc-lattice.
    /// This member is required.
    public var trafficSourceType: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        trafficSourceType: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.trafficSourceType = trafficSourceType
    }
}

struct DescribeTrafficSourcesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let trafficSourceType: Swift.String?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeTrafficSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case trafficSourceType = "TrafficSourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let trafficSourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficSourceType)
        trafficSourceType = trafficSourceTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeTrafficSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTrafficSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTrafficSourcesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTrafficSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTrafficSourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trafficSources = output.trafficSources
        } else {
            self.nextToken = nil
            self.trafficSources = nil
        }
    }
}

public struct DescribeTrafficSourcesOutputResponse: Swift.Equatable {
    /// This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// Information about the traffic sources.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceState]?

    public init (
        nextToken: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceState]? = nil
    )
    {
        self.nextToken = nextToken
        self.trafficSources = trafficSources
    }
}

struct DescribeTrafficSourcesOutputResponseBody: Swift.Equatable {
    let trafficSources: [AutoScalingClientTypes.TrafficSourceState]?
    let nextToken: Swift.String?
}

extension DescribeTrafficSourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trafficSources = "TrafficSources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTrafficSourcesResult"))
        if containerValues.contains(.trafficSources) {
            struct KeyVal0{struct member{}}
            let trafficSourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trafficSources)
            if let trafficSourcesWrappedContainer = trafficSourcesWrappedContainer {
                let trafficSourcesContainer = try trafficSourcesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TrafficSourceState].self, forKey: .member)
                var trafficSourcesBuffer:[AutoScalingClientTypes.TrafficSourceState]? = nil
                if let trafficSourcesContainer = trafficSourcesContainer {
                    trafficSourcesBuffer = [AutoScalingClientTypes.TrafficSourceState]()
                    for structureContainer0 in trafficSourcesContainer {
                        trafficSourcesBuffer?.append(structureContainer0)
                    }
                }
                trafficSources = trafficSourcesBuffer
            } else {
                trafficSources = []
            }
        } else {
            trafficSources = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeWarmPoolInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeWarmPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of instances to return with this call. The maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of instances to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

struct DescribeWarmPoolInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeWarmPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeWarmPoolOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.nextToken = output.nextToken
            self.warmPoolConfiguration = output.warmPoolConfiguration
        } else {
            self.instances = nil
            self.nextToken = nil
            self.warmPoolConfiguration = nil
        }
    }
}

public struct DescribeWarmPoolOutputResponse: Swift.Equatable {
    /// The instances that are currently in the warm pool.
    public var instances: [AutoScalingClientTypes.Instance]?
    /// This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The warm pool configuration details.
    public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?

    public init (
        instances: [AutoScalingClientTypes.Instance]? = nil,
        nextToken: Swift.String? = nil,
        warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
        self.warmPoolConfiguration = warmPoolConfiguration
    }
}

struct DescribeWarmPoolOutputResponseBody: Swift.Equatable {
    let warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
    let instances: [AutoScalingClientTypes.Instance]?
    let nextToken: Swift.String?
}

extension DescribeWarmPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances = "Instances"
        case nextToken = "NextToken"
        case warmPoolConfiguration = "WarmPoolConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeWarmPoolResult"))
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[AutoScalingClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [AutoScalingClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AutoScalingClientTypes.DesiredConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplate = "LaunchTemplate"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the desired configuration for an instance refresh. If you specify a desired configuration, you must specify either a LaunchTemplate or a MixedInstancesPolicy.
    public struct DesiredConfiguration: Swift.Equatable {
        /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling uses to launch Amazon EC2 instances. For more information about launch templates, see [Launch templates](https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html) in the Amazon EC2 Auto Scaling User Guide.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?

        public init (
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil
        )
        {
            self.launchTemplate = launchTemplate
            self.mixedInstancesPolicy = mixedInstancesPolicy
        }
    }

}

extension DetachInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("DetachInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachInstancesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

struct DetachInstancesInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
    let shouldDecrementDesiredCapacity: Swift.Bool?
}

extension DetachInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceIds = "InstanceIds"
        case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let shouldDecrementDesiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shouldDecrementDesiredCapacity)
        shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacityDecoded
    }
}

extension DetachInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachInstancesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetachInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct DetachInstancesOutputResponse: Swift.Equatable {
    /// The activities related to detaching the instances from the Auto Scaling group.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct DetachInstancesOutputResponseBody: Swift.Equatable {
    let activities: [AutoScalingClientTypes.Activity]?
}

extension DetachInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetachInstancesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

extension DetachLoadBalancerTargetGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            if !targetGroupARNs.isEmpty {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                    try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
                try targetGroupARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DetachLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachLoadBalancerTargetGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

struct DetachLoadBalancerTargetGroupsInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let targetGroupARNs: [Swift.String]?
}

extension DetachLoadBalancerTargetGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case targetGroupARNs = "TargetGroupARNs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
    }
}

extension DetachLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DetachLoadBalancersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            if !loadBalancerNames.isEmpty {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                    try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
                try loadBalancerNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DetachLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachLoadBalancersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

struct DetachLoadBalancersInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let loadBalancerNames: [Swift.String]?
}

extension DetachLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case loadBalancerNames = "LoadBalancerNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
    }
}

extension DetachLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancersOutputResponse: Swift.Equatable {

    public init () { }
}

extension DetachTrafficSourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let trafficSources = trafficSources {
            if !trafficSources.isEmpty {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                for (index0, trafficsourceidentifier0) in trafficSources.enumerated() {
                    try trafficSourcesContainer.encode(trafficsourceidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var trafficSourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrafficSources"))
                try trafficSourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DetachTrafficSources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetachTrafficSourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachTrafficSourcesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The unique identifiers of one or more traffic sources you are detaching. You can specify up to 10 traffic sources. Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. When you detach a target group, it enters the Removing state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the [DescribeTrafficSources] API call. The instances continue to run.
    /// This member is required.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.trafficSources = trafficSources
    }
}

struct DetachTrafficSourcesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
}

extension DetachTrafficSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case trafficSources = "TrafficSources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.trafficSources) {
            struct KeyVal0{struct member{}}
            let trafficSourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trafficSources)
            if let trafficSourcesWrappedContainer = trafficSourcesWrappedContainer {
                let trafficSourcesContainer = try trafficSourcesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TrafficSourceIdentifier].self, forKey: .member)
                var trafficSourcesBuffer:[AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
                if let trafficSourcesContainer = trafficSourcesContainer {
                    trafficSourcesBuffer = [AutoScalingClientTypes.TrafficSourceIdentifier]()
                    for structureContainer0 in trafficSourcesContainer {
                        trafficSourcesBuffer?.append(structureContainer0)
                    }
                }
                trafficSources = trafficSourcesBuffer
            } else {
                trafficSources = []
            }
        } else {
            trafficSources = nil
        }
    }
}

extension DetachTrafficSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachTrafficSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachTrafficSourcesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachTrafficSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachTrafficSourcesOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisableMetricsCollectionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                    try metricsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DisableMetricsCollection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableMetricsCollectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableMetricsCollectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Identifies the metrics to disable. You can specify one or more of the following metrics:
    ///
    /// * GroupMinSize
    ///
    /// * GroupMaxSize
    ///
    /// * GroupDesiredCapacity
    ///
    /// * GroupInServiceInstances
    ///
    /// * GroupPendingInstances
    ///
    /// * GroupStandbyInstances
    ///
    /// * GroupTerminatingInstances
    ///
    /// * GroupTotalInstances
    ///
    /// * GroupInServiceCapacity
    ///
    /// * GroupPendingCapacity
    ///
    /// * GroupStandbyCapacity
    ///
    /// * GroupTerminatingCapacity
    ///
    /// * GroupTotalCapacity
    ///
    /// * WarmPoolDesiredCapacity
    ///
    /// * WarmPoolWarmedCapacity
    ///
    /// * WarmPoolPendingCapacity
    ///
    /// * WarmPoolTerminatingCapacity
    ///
    /// * WarmPoolTotalCapacity
    ///
    /// * GroupAndWarmPoolDesiredCapacity
    ///
    /// * GroupAndWarmPoolTotalCapacity
    ///
    ///
    /// If you omit this property, all metrics are disabled. For more information, see [Auto Scaling group metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics) in the Amazon EC2 Auto Scaling User Guide.
    public var metrics: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.metrics = metrics
    }
}

struct DisableMetricsCollectionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let metrics: [Swift.String]?
}

extension DisableMetricsCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var metricsBuffer:[Swift.String]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [Swift.String]()
                    for stringContainer0 in metricsContainer {
                        metricsBuffer?.append(stringContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
    }
}

extension DisableMetricsCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableMetricsCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableMetricsCollectionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableMetricsCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableMetricsCollectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.Ebs: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteOnTermination = "DeleteOnTermination"
        case encrypted = "Encrypted"
        case iops = "Iops"
        case snapshotId = "SnapshotId"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: ClientRuntime.Key("DeleteOnTermination"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let throughput = throughput {
            try container.encode(throughput, forKey: ClientRuntime.Key("Throughput"))
        }
        if let volumeSize = volumeSize {
            try container.encode(volumeSize, forKey: ClientRuntime.Key("VolumeSize"))
        }
        if let volumeType = volumeType {
            try container.encode(volumeType, forKey: ClientRuntime.Key("VolumeType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes information used to set up an Amazon EBS volume specified in a block device mapping.
    public struct Ebs: Swift.Equatable {
        /// Indicates whether the volume is deleted on instance termination. For Amazon EC2 Auto Scaling, the default value is true.
        public var deleteOnTermination: Swift.Bool?
        /// Specifies whether the volume should be encrypted. Encrypted EBS volumes can only be attached to instances that support Amazon EBS encryption. For more information, see [Supported instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances). If your AMI uses encrypted volumes, you can also only launch it on supported instance types. If you are creating a volume from a snapshot, you cannot create an unencrypted volume from an encrypted snapshot. Also, you cannot specify a KMS key ID when using a launch configuration. If you enable encryption by default, the EBS volumes that you create are always encrypted, either using the Amazon Web Services managed KMS key or a customer-managed KMS key, regardless of whether the snapshot was encrypted. For more information, see [Use Amazon Web Services KMS keys to encrypt Amazon EBS volumes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-data-protection.html#encryption) in the Amazon EC2 Auto Scaling User Guide.
        public var encrypted: Swift.Bool?
        /// The number of input/output (I/O) operations per second (IOPS) to provision for the volume. For gp3 and io1 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:
        ///
        /// * gp3: 3,000-16,000 IOPS
        ///
        /// * io1: 100-64,000 IOPS
        ///
        ///
        /// For io1 volumes, we guarantee 64,000 IOPS only for [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. Iops is supported when the volume type is gp3 or io1 and required only when the volume type is io1. (Not used with standard, gp2, st1, or sc1 volumes.)
        public var iops: Swift.Int?
        /// The snapshot ID of the volume to use. You must specify either a VolumeSize or a SnapshotId.
        public var snapshotId: Swift.String?
        /// The throughput (MiBps) to provision for a gp3 volume.
        public var throughput: Swift.Int?
        /// The volume size, in GiBs. The following are the supported volumes sizes for each volume type:
        ///
        /// * gp2 and gp3: 1-16,384
        ///
        /// * io1: 4-16,384
        ///
        /// * st1 and sc1: 125-16,384
        ///
        /// * standard: 1-1,024
        ///
        ///
        /// You must specify either a SnapshotId or a VolumeSize. If you specify both SnapshotId and VolumeSize, the volume size must be equal or greater than the size of the snapshot.
        public var volumeSize: Swift.Int?
        /// The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon EC2 User Guide for Linux Instances. Valid values: standard | io1 | gp2 | st1 | sc1 | gp3
        public var volumeType: Swift.String?

        public init (
            deleteOnTermination: Swift.Bool? = nil,
            encrypted: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            snapshotId: Swift.String? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension EnableMetricsCollectionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                    try metricsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("EnableMetricsCollection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableMetricsCollectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableMetricsCollectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is 1Minute.
    /// This member is required.
    public var granularity: Swift.String?
    /// Identifies the metrics to enable. You can specify one or more of the following metrics:
    ///
    /// * GroupMinSize
    ///
    /// * GroupMaxSize
    ///
    /// * GroupDesiredCapacity
    ///
    /// * GroupInServiceInstances
    ///
    /// * GroupPendingInstances
    ///
    /// * GroupStandbyInstances
    ///
    /// * GroupTerminatingInstances
    ///
    /// * GroupTotalInstances
    ///
    /// * GroupInServiceCapacity
    ///
    /// * GroupPendingCapacity
    ///
    /// * GroupStandbyCapacity
    ///
    /// * GroupTerminatingCapacity
    ///
    /// * GroupTotalCapacity
    ///
    /// * WarmPoolDesiredCapacity
    ///
    /// * WarmPoolWarmedCapacity
    ///
    /// * WarmPoolPendingCapacity
    ///
    /// * WarmPoolTerminatingCapacity
    ///
    /// * WarmPoolTotalCapacity
    ///
    /// * GroupAndWarmPoolDesiredCapacity
    ///
    /// * GroupAndWarmPoolTotalCapacity
    ///
    ///
    /// If you specify Granularity and don't specify any metrics, all metrics are enabled. For more information, see [Auto Scaling group metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics) in the Amazon EC2 Auto Scaling User Guide.
    public var metrics: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        granularity: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.granularity = granularity
        self.metrics = metrics
    }
}

struct EnableMetricsCollectionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let metrics: [Swift.String]?
    let granularity: Swift.String?
}

extension EnableMetricsCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case granularity = "Granularity"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var metricsBuffer:[Swift.String]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [Swift.String]()
                    for stringContainer0 in metricsContainer {
                        metricsBuffer?.append(stringContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let granularityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension EnableMetricsCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableMetricsCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableMetricsCollectionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableMetricsCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableMetricsCollectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.EnabledMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularity = "Granularity"
        case metric = "Metric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
        let granularityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an enabled Auto Scaling group metric.
    public struct EnabledMetric: Swift.Equatable {
        /// The granularity of the metric. The only valid value is 1Minute.
        public var granularity: Swift.String?
        /// One of the following metrics:
        ///
        /// * GroupMinSize
        ///
        /// * GroupMaxSize
        ///
        /// * GroupDesiredCapacity
        ///
        /// * GroupInServiceInstances
        ///
        /// * GroupPendingInstances
        ///
        /// * GroupStandbyInstances
        ///
        /// * GroupTerminatingInstances
        ///
        /// * GroupTotalInstances
        ///
        /// * GroupInServiceCapacity
        ///
        /// * GroupPendingCapacity
        ///
        /// * GroupStandbyCapacity
        ///
        /// * GroupTerminatingCapacity
        ///
        /// * GroupTotalCapacity
        ///
        /// * WarmPoolDesiredCapacity
        ///
        /// * WarmPoolWarmedCapacity
        ///
        /// * WarmPoolPendingCapacity
        ///
        /// * WarmPoolTerminatingCapacity
        ///
        /// * WarmPoolTotalCapacity
        ///
        /// * GroupAndWarmPoolDesiredCapacity
        ///
        /// * GroupAndWarmPoolTotalCapacity
        ///
        ///
        /// For more information, see [Auto Scaling group metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics) in the Amazon EC2 Auto Scaling User Guide.
        public var metric: Swift.String?

        public init (
            granularity: Swift.String? = nil,
            metric: Swift.String? = nil
        )
        {
            self.granularity = granularity
            self.metric = metric
        }
    }

}

extension EnterStandbyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("EnterStandby", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnterStandbyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnterStandbyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to Standby mode.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

struct EnterStandbyInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
    let shouldDecrementDesiredCapacity: Swift.Bool?
}

extension EnterStandbyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceIds = "InstanceIds"
        case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let shouldDecrementDesiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shouldDecrementDesiredCapacity)
        shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacityDecoded
    }
}

extension EnterStandbyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnterStandbyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnterStandbyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnterStandbyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnterStandbyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct EnterStandbyOutputResponse: Swift.Equatable {
    /// The activities related to moving instances into Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct EnterStandbyOutputResponseBody: Swift.Equatable {
    let activities: [AutoScalingClientTypes.Activity]?
}

extension EnterStandbyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnterStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

extension ExecutePolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let breachThreshold = breachThreshold {
            try container.encode(breachThreshold, forKey: ClientRuntime.Key("BreachThreshold"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: ClientRuntime.Key("HonorCooldown"))
        }
        if let metricValue = metricValue {
            try container.encode(metricValue, forKey: ClientRuntime.Key("MetricValue"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("ExecutePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ExecutePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExecutePolicyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The breach threshold for the alarm. Required if the policy type is StepScaling and not supported otherwise.
    public var breachThreshold: Swift.Double?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy. Valid only if the policy type is SimpleScaling. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the Amazon EC2 Auto Scaling User Guide.
    public var honorCooldown: Swift.Bool?
    /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. Required if the policy type is StepScaling and not supported otherwise.
    public var metricValue: Swift.Double?
    /// The name or ARN of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        breachThreshold: Swift.Double? = nil,
        honorCooldown: Swift.Bool? = nil,
        metricValue: Swift.Double? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.breachThreshold = breachThreshold
        self.honorCooldown = honorCooldown
        self.metricValue = metricValue
        self.policyName = policyName
    }
}

struct ExecutePolicyInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyName: Swift.String?
    let honorCooldown: Swift.Bool?
    let metricValue: Swift.Double?
    let breachThreshold: Swift.Double?
}

extension ExecutePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case breachThreshold = "BreachThreshold"
        case honorCooldown = "HonorCooldown"
        case metricValue = "MetricValue"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let honorCooldownDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .honorCooldown)
        honorCooldown = honorCooldownDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let breachThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .breachThreshold)
        breachThreshold = breachThresholdDecoded
    }
}

extension ExecutePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExecutePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExecutePolicyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecutePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ExecutePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension ExitStandbyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ExitStandby", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ExitStandbyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExitStandbyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

struct ExitStandbyInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
}

extension ExitStandbyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceIds = "InstanceIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
    }
}

extension ExitStandbyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExitStandbyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExitStandbyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExitStandbyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExitStandbyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct ExitStandbyOutputResponse: Swift.Equatable {
    /// The activities related to moving instances out of Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct ExitStandbyOutputResponseBody: Swift.Equatable {
    let activities: [AutoScalingClientTypes.Activity]?
}

extension ExitStandbyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ExitStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

extension AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case scheduledActionName = "ScheduledActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a scheduled action that could not be created, updated, or deleted.
    public struct FailedScheduledUpdateGroupActionRequest: Swift.Equatable {
        /// The error code.
        public var errorCode: Swift.String?
        /// The error message accompanying the error code.
        public var errorMessage: Swift.String?
        /// The name of the scheduled action.
        /// This member is required.
        public var scheduledActionName: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.scheduledActionName = scheduledActionName
        }
    }

}

extension AutoScalingClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, xmlstring0) in values.enumerated() {
                    try valuesContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Describes a filter that is used to return a more specific list of results from a describe operation. If you specify multiple filters, the filters are automatically logically joined with an AND, and the request returns only the results that match all of the specified filters. For more information, see [Tag Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct Filter: Swift.Equatable {
        /// The name of the filter. The valid values for Name depend on which API operation you're using with the filter ([DescribeAutoScalingGroups] or [DescribeTags]). DescribeAutoScalingGroups Valid values for Name include the following:
        ///
        /// * tag-key - Accepts tag keys. The results only include information about the Auto Scaling groups associated with these tag keys.
        ///
        /// * tag-value - Accepts tag values. The results only include information about the Auto Scaling groups associated with these tag values.
        ///
        /// * tag: - Accepts the key/value combination of the tag. Use the tag key in the filter name and the tag value as the filter value. The results only include information about the Auto Scaling groups associated with the specified key/value combination.
        ///
        ///
        /// DescribeTags Valid values for Name include the following:
        ///
        /// * auto-scaling-group - Accepts the names of Auto Scaling groups. The results only include information about the tags associated with these Auto Scaling groups.
        ///
        /// * key - Accepts tag keys. The results only include information about the tags associated with these tag keys.
        ///
        /// * value - Accepts tag values. The results only include information about the tags associated with these tag values.
        ///
        /// * propagate-at-launch - Accepts a Boolean value, which specifies whether tags propagate to instances at launch. The results only include information about the tags associated with the specified Boolean value.
        public var name: Swift.String?
        /// One or more filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are automatically logically joined with an OR, and the request returns all results that match any of the specified values. For example, specify "tag:environment" for the filter name and "production,development" for the filter values to find Auto Scaling groups with the tag "environment=production" or "environment=development".
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension GetPredictiveScalingForecastInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetPredictiveScalingForecast", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetPredictiveScalingForecastInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPredictiveScalingForecastInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        policyName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.policyName = policyName
        self.startTime = startTime
    }
}

struct GetPredictiveScalingForecastInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension GetPredictiveScalingForecastInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case endTime = "EndTime"
        case policyName = "PolicyName"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension GetPredictiveScalingForecastOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPredictiveScalingForecastOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPredictiveScalingForecastOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPredictiveScalingForecastOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPredictiveScalingForecastOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacityForecast = output.capacityForecast
            self.loadForecast = output.loadForecast
            self.updateTime = output.updateTime
        } else {
            self.capacityForecast = nil
            self.loadForecast = nil
            self.updateTime = nil
        }
    }
}

public struct GetPredictiveScalingForecastOutputResponse: Swift.Equatable {
    /// The capacity forecast.
    /// This member is required.
    public var capacityForecast: AutoScalingClientTypes.CapacityForecast?
    /// The load forecast.
    /// This member is required.
    public var loadForecast: [AutoScalingClientTypes.LoadForecast]?
    /// The time the forecast was made.
    /// This member is required.
    public var updateTime: ClientRuntime.Date?

    public init (
        capacityForecast: AutoScalingClientTypes.CapacityForecast? = nil,
        loadForecast: [AutoScalingClientTypes.LoadForecast]? = nil,
        updateTime: ClientRuntime.Date? = nil
    )
    {
        self.capacityForecast = capacityForecast
        self.loadForecast = loadForecast
        self.updateTime = updateTime
    }
}

struct GetPredictiveScalingForecastOutputResponseBody: Swift.Equatable {
    let loadForecast: [AutoScalingClientTypes.LoadForecast]?
    let capacityForecast: AutoScalingClientTypes.CapacityForecast?
    let updateTime: ClientRuntime.Date?
}

extension GetPredictiveScalingForecastOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityForecast = "CapacityForecast"
        case loadForecast = "LoadForecast"
        case updateTime = "UpdateTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetPredictiveScalingForecastResult"))
        if containerValues.contains(.loadForecast) {
            struct KeyVal0{struct member{}}
            let loadForecastWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadForecast)
            if let loadForecastWrappedContainer = loadForecastWrappedContainer {
                let loadForecastContainer = try loadForecastWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadForecast].self, forKey: .member)
                var loadForecastBuffer:[AutoScalingClientTypes.LoadForecast]? = nil
                if let loadForecastContainer = loadForecastContainer {
                    loadForecastBuffer = [AutoScalingClientTypes.LoadForecast]()
                    for structureContainer0 in loadForecastContainer {
                        loadForecastBuffer?.append(structureContainer0)
                    }
                }
                loadForecast = loadForecastBuffer
            } else {
                loadForecast = []
            }
        } else {
            loadForecast = nil
        }
        let capacityForecastDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.CapacityForecast.self, forKey: .capacityForecast)
        capacityForecast = capacityForecastDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}

extension AutoScalingClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LifecycleState.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an EC2 instance.
    public struct Instance: Swift.Equatable {
        /// The Availability Zone in which the instance is running.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of the instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and that Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration associated with the instance.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// A description of the current lifecycle state. The Quarantined state is not used. For information about lifecycle states, see [Instance lifecycle](https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html) in the Amazon EC2 Auto Scaling User Guide.
        /// This member is required.
        public var lifecycleState: AutoScalingClientTypes.LifecycleState?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: AutoScalingClientTypes.LifecycleState? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension AutoScalingClientTypes {
    public enum InstanceGeneration: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case previous
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGeneration] {
            return [
                .current,
                .previous,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "current"
            case .previous: return "previous"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceGeneration(rawValue: rawValue) ?? InstanceGeneration.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum InstanceMetadataEndpointState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataEndpointState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetadataEndpointState(rawValue: rawValue) ?? InstanceMetadataEndpointState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum InstanceMetadataHttpTokensState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataHttpTokensState] {
            return [
                .optional,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetadataHttpTokensState(rawValue: rawValue) ?? InstanceMetadataHttpTokensState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.InstanceMetadataOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
        case httpTokens = "HttpTokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let httpEndpoint = httpEndpoint {
            try container.encode(httpEndpoint, forKey: ClientRuntime.Key("HttpEndpoint"))
        }
        if let httpPutResponseHopLimit = httpPutResponseHopLimit {
            try container.encode(httpPutResponseHopLimit, forKey: ClientRuntime.Key("HttpPutResponseHopLimit"))
        }
        if let httpTokens = httpTokens {
            try container.encode(httpTokens, forKey: ClientRuntime.Key("HttpTokens"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpTokensDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataHttpTokensState.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataEndpointState.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
    }
}

extension AutoScalingClientTypes {
    /// The metadata options for the instances. For more information, see [Configuring the Instance Metadata Options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
    public struct InstanceMetadataOptions: Swift.Equatable {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled. If you specify a value of disabled, you will not be able to access your instance metadata.
        public var httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1
        public var httpPutResponseHopLimit: Swift.Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public var httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState?

        public init (
            httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState? = nil,
            httpPutResponseHopLimit: Swift.Int? = nil,
            httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }
    }

}

extension AutoScalingClientTypes.InstanceMonitoring: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes whether detailed monitoring is enabled for the Auto Scaling instances.
    public struct InstanceMonitoring: Swift.Equatable {
        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension AutoScalingClientTypes.InstanceRefresh: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredConfiguration = "DesiredConfiguration"
        case endTime = "EndTime"
        case instanceRefreshId = "InstanceRefreshId"
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
        case preferences = "Preferences"
        case progressDetails = "ProgressDetails"
        case startTime = "StartTime"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredConfiguration = desiredConfiguration {
            try container.encode(desiredConfiguration, forKey: ClientRuntime.Key("DesiredConfiguration"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let instanceRefreshId = instanceRefreshId {
            try container.encode(instanceRefreshId, forKey: ClientRuntime.Key("InstanceRefreshId"))
        }
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: ClientRuntime.Key("Preferences"))
        }
        if let progressDetails = progressDetails {
            try container.encode(progressDetails, forKey: ClientRuntime.Key("ProgressDetails"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
        let progressDetailsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshProgressDetails.self, forKey: .progressDetails)
        progressDetails = progressDetailsDecoded
        let preferencesDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.RefreshPreferences.self, forKey: .preferences)
        preferences = preferencesDecoded
        let desiredConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.DesiredConfiguration.self, forKey: .desiredConfiguration)
        desiredConfiguration = desiredConfigurationDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an instance refresh for an Auto Scaling group.
    public struct InstanceRefresh: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// Describes the specific update you want to deploy.
        public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
        /// The date and time at which the instance refresh ended.
        public var endTime: ClientRuntime.Date?
        /// The instance refresh ID.
        public var instanceRefreshId: Swift.String?
        /// The number of instances remaining to update before the instance refresh is complete.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?
        /// Describes the preferences for an instance refresh.
        public var preferences: AutoScalingClientTypes.RefreshPreferences?
        /// Additional progress details for an Auto Scaling group that has a warm pool.
        public var progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails?
        /// The date and time at which the instance refresh began.
        public var startTime: ClientRuntime.Date?
        /// The current status for the instance refresh operation:
        ///
        /// * Pending - The request was created, but the operation has not started.
        ///
        /// * InProgress - The operation is in progress.
        ///
        /// * Successful - The operation completed successfully.
        ///
        /// * Failed - The operation failed to complete. You can troubleshoot using the status reason and the scaling activities.
        ///
        /// * Cancelling - An ongoing operation is being cancelled. Cancellation does not roll back any replacements that have already been completed, but it prevents new replacements from being started.
        ///
        /// * Cancelled - The operation is cancelled.
        public var status: AutoScalingClientTypes.InstanceRefreshStatus?
        /// Provides more details about the current status of the instance refresh.
        public var statusReason: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
            endTime: ClientRuntime.Date? = nil,
            instanceRefreshId: Swift.String? = nil,
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil,
            preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
            progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: AutoScalingClientTypes.InstanceRefreshStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredConfiguration = desiredConfiguration
            self.endTime = endTime
            self.instanceRefreshId = instanceRefreshId
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
            self.preferences = preferences
            self.progressDetails = progressDetails
            self.startTime = startTime
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension InstanceRefreshInProgressFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InstanceRefreshInProgressFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because an active instance refresh operation already exists for the specified Auto Scaling group.
public struct InstanceRefreshInProgressFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceRefreshInProgressFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceRefreshInProgressFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefreshLivePoolProgress: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on instances that are in the Auto Scaling group.
    public struct InstanceRefreshLivePoolProgress: Swift.Equatable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the Auto Scaling group that have been replaced. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?

        public init (
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }

}

extension AutoScalingClientTypes.InstanceRefreshProgressDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case livePoolProgress = "LivePoolProgress"
        case warmPoolProgress = "WarmPoolProgress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let livePoolProgress = livePoolProgress {
            try container.encode(livePoolProgress, forKey: ClientRuntime.Key("LivePoolProgress"))
        }
        if let warmPoolProgress = warmPoolProgress {
            try container.encode(warmPoolProgress, forKey: ClientRuntime.Key("WarmPoolProgress"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let livePoolProgressDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshLivePoolProgress.self, forKey: .livePoolProgress)
        livePoolProgress = livePoolProgressDecoded
        let warmPoolProgressDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshWarmPoolProgress.self, forKey: .warmPoolProgress)
        warmPoolProgress = warmPoolProgressDecoded
    }
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on an Auto Scaling group that has a warm pool. This includes separate details for instances in the warm pool and instances in the Auto Scaling group (the live pool).
    public struct InstanceRefreshProgressDetails: Swift.Equatable {
        /// Indicates the progress of an instance refresh on instances that are in the Auto Scaling group.
        public var livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress?
        /// Indicates the progress of an instance refresh on instances that are in the warm pool.
        public var warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress?

        public init (
            livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress? = nil,
            warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress? = nil
        )
        {
            self.livePoolProgress = livePoolProgress
            self.warmPoolProgress = warmPoolProgress
        }
    }

}

extension AutoScalingClientTypes {
    public enum InstanceRefreshStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case failed
        case inprogress
        case pending
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRefreshStatus] {
            return [
                .cancelled,
                .cancelling,
                .failed,
                .inprogress,
                .pending,
                .successful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .cancelling: return "Cancelling"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRefreshStatus(rawValue: rawValue) ?? InstanceRefreshStatus.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.InstanceRefreshWarmPoolProgress: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on instances that are in the warm pool.
    public struct InstanceRefreshWarmPoolProgress: Swift.Equatable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the warm pool that have been replaced. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?

        public init (
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }

}

extension AutoScalingClientTypes.InstanceRequirements: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorCount = "AcceleratorCount"
        case acceleratorManufacturers = "AcceleratorManufacturers"
        case acceleratorNames = "AcceleratorNames"
        case acceleratorTotalMemoryMiB = "AcceleratorTotalMemoryMiB"
        case acceleratorTypes = "AcceleratorTypes"
        case allowedInstanceTypes = "AllowedInstanceTypes"
        case bareMetal = "BareMetal"
        case baselineEbsBandwidthMbps = "BaselineEbsBandwidthMbps"
        case burstablePerformance = "BurstablePerformance"
        case cpuManufacturers = "CpuManufacturers"
        case excludedInstanceTypes = "ExcludedInstanceTypes"
        case instanceGenerations = "InstanceGenerations"
        case localStorage = "LocalStorage"
        case localStorageTypes = "LocalStorageTypes"
        case memoryGiBPerVCpu = "MemoryGiBPerVCpu"
        case memoryMiB = "MemoryMiB"
        case networkBandwidthGbps = "NetworkBandwidthGbps"
        case networkInterfaceCount = "NetworkInterfaceCount"
        case onDemandMaxPricePercentageOverLowestPrice = "OnDemandMaxPricePercentageOverLowestPrice"
        case requireHibernateSupport = "RequireHibernateSupport"
        case spotMaxPricePercentageOverLowestPrice = "SpotMaxPricePercentageOverLowestPrice"
        case totalLocalStorageGB = "TotalLocalStorageGB"
        case vCpuCount = "VCpuCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceleratorCount = acceleratorCount {
            try container.encode(acceleratorCount, forKey: ClientRuntime.Key("AcceleratorCount"))
        }
        if let acceleratorManufacturers = acceleratorManufacturers {
            if !acceleratorManufacturers.isEmpty {
                var acceleratorManufacturersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorManufacturers"))
                for (index0, acceleratormanufacturer0) in acceleratorManufacturers.enumerated() {
                    try acceleratorManufacturersContainer.encode(acceleratormanufacturer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var acceleratorManufacturersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorManufacturers"))
                try acceleratorManufacturersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let acceleratorNames = acceleratorNames {
            if !acceleratorNames.isEmpty {
                var acceleratorNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorNames"))
                for (index0, acceleratorname0) in acceleratorNames.enumerated() {
                    try acceleratorNamesContainer.encode(acceleratorname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var acceleratorNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorNames"))
                try acceleratorNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiB {
            try container.encode(acceleratorTotalMemoryMiB, forKey: ClientRuntime.Key("AcceleratorTotalMemoryMiB"))
        }
        if let acceleratorTypes = acceleratorTypes {
            if !acceleratorTypes.isEmpty {
                var acceleratorTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorTypes"))
                for (index0, acceleratortype0) in acceleratorTypes.enumerated() {
                    try acceleratorTypesContainer.encode(acceleratortype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var acceleratorTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AcceleratorTypes"))
                try acceleratorTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let allowedInstanceTypes = allowedInstanceTypes {
            if !allowedInstanceTypes.isEmpty {
                var allowedInstanceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedInstanceTypes"))
                for (index0, allowedinstancetype0) in allowedInstanceTypes.enumerated() {
                    try allowedInstanceTypesContainer.encode(allowedinstancetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var allowedInstanceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedInstanceTypes"))
                try allowedInstanceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let bareMetal = bareMetal {
            try container.encode(bareMetal, forKey: ClientRuntime.Key("BareMetal"))
        }
        if let baselineEbsBandwidthMbps = baselineEbsBandwidthMbps {
            try container.encode(baselineEbsBandwidthMbps, forKey: ClientRuntime.Key("BaselineEbsBandwidthMbps"))
        }
        if let burstablePerformance = burstablePerformance {
            try container.encode(burstablePerformance, forKey: ClientRuntime.Key("BurstablePerformance"))
        }
        if let cpuManufacturers = cpuManufacturers {
            if !cpuManufacturers.isEmpty {
                var cpuManufacturersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CpuManufacturers"))
                for (index0, cpumanufacturer0) in cpuManufacturers.enumerated() {
                    try cpuManufacturersContainer.encode(cpumanufacturer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var cpuManufacturersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CpuManufacturers"))
                try cpuManufacturersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let excludedInstanceTypes = excludedInstanceTypes {
            if !excludedInstanceTypes.isEmpty {
                var excludedInstanceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedInstanceTypes"))
                for (index0, excludedinstance0) in excludedInstanceTypes.enumerated() {
                    try excludedInstanceTypesContainer.encode(excludedinstance0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludedInstanceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedInstanceTypes"))
                try excludedInstanceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let instanceGenerations = instanceGenerations {
            if !instanceGenerations.isEmpty {
                var instanceGenerationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceGenerations"))
                for (index0, instancegeneration0) in instanceGenerations.enumerated() {
                    try instanceGenerationsContainer.encode(instancegeneration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceGenerationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceGenerations"))
                try instanceGenerationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let localStorage = localStorage {
            try container.encode(localStorage, forKey: ClientRuntime.Key("LocalStorage"))
        }
        if let localStorageTypes = localStorageTypes {
            if !localStorageTypes.isEmpty {
                var localStorageTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LocalStorageTypes"))
                for (index0, localstoragetype0) in localStorageTypes.enumerated() {
                    try localStorageTypesContainer.encode(localstoragetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var localStorageTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LocalStorageTypes"))
                try localStorageTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let memoryGiBPerVCpu = memoryGiBPerVCpu {
            try container.encode(memoryGiBPerVCpu, forKey: ClientRuntime.Key("MemoryGiBPerVCpu"))
        }
        if let memoryMiB = memoryMiB {
            try container.encode(memoryMiB, forKey: ClientRuntime.Key("MemoryMiB"))
        }
        if let networkBandwidthGbps = networkBandwidthGbps {
            try container.encode(networkBandwidthGbps, forKey: ClientRuntime.Key("NetworkBandwidthGbps"))
        }
        if let networkInterfaceCount = networkInterfaceCount {
            try container.encode(networkInterfaceCount, forKey: ClientRuntime.Key("NetworkInterfaceCount"))
        }
        if let onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice {
            try container.encode(onDemandMaxPricePercentageOverLowestPrice, forKey: ClientRuntime.Key("OnDemandMaxPricePercentageOverLowestPrice"))
        }
        if let requireHibernateSupport = requireHibernateSupport {
            try container.encode(requireHibernateSupport, forKey: ClientRuntime.Key("RequireHibernateSupport"))
        }
        if let spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice {
            try container.encode(spotMaxPricePercentageOverLowestPrice, forKey: ClientRuntime.Key("SpotMaxPricePercentageOverLowestPrice"))
        }
        if let totalLocalStorageGB = totalLocalStorageGB {
            try container.encode(totalLocalStorageGB, forKey: ClientRuntime.Key("TotalLocalStorageGB"))
        }
        if let vCpuCount = vCpuCount {
            try container.encode(vCpuCount, forKey: ClientRuntime.Key("VCpuCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vCpuCountDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.VCpuCountRequest.self, forKey: .vCpuCount)
        vCpuCount = vCpuCountDecoded
        let memoryMiBDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MemoryMiBRequest.self, forKey: .memoryMiB)
        memoryMiB = memoryMiBDecoded
        if containerValues.contains(.cpuManufacturers) {
            struct KeyVal0{struct member{}}
            let cpuManufacturersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .cpuManufacturers)
            if let cpuManufacturersWrappedContainer = cpuManufacturersWrappedContainer {
                let cpuManufacturersContainer = try cpuManufacturersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.CpuManufacturer].self, forKey: .member)
                var cpuManufacturersBuffer:[AutoScalingClientTypes.CpuManufacturer]? = nil
                if let cpuManufacturersContainer = cpuManufacturersContainer {
                    cpuManufacturersBuffer = [AutoScalingClientTypes.CpuManufacturer]()
                    for enumContainer0 in cpuManufacturersContainer {
                        cpuManufacturersBuffer?.append(enumContainer0)
                    }
                }
                cpuManufacturers = cpuManufacturersBuffer
            } else {
                cpuManufacturers = []
            }
        } else {
            cpuManufacturers = nil
        }
        let memoryGiBPerVCpuDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MemoryGiBPerVCpuRequest.self, forKey: .memoryGiBPerVCpu)
        memoryGiBPerVCpu = memoryGiBPerVCpuDecoded
        if containerValues.contains(.excludedInstanceTypes) {
            struct KeyVal0{struct member{}}
            let excludedInstanceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludedInstanceTypes)
            if let excludedInstanceTypesWrappedContainer = excludedInstanceTypesWrappedContainer {
                let excludedInstanceTypesContainer = try excludedInstanceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var excludedInstanceTypesBuffer:[Swift.String]? = nil
                if let excludedInstanceTypesContainer = excludedInstanceTypesContainer {
                    excludedInstanceTypesBuffer = [Swift.String]()
                    for stringContainer0 in excludedInstanceTypesContainer {
                        excludedInstanceTypesBuffer?.append(stringContainer0)
                    }
                }
                excludedInstanceTypes = excludedInstanceTypesBuffer
            } else {
                excludedInstanceTypes = []
            }
        } else {
            excludedInstanceTypes = nil
        }
        if containerValues.contains(.instanceGenerations) {
            struct KeyVal0{struct member{}}
            let instanceGenerationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceGenerations)
            if let instanceGenerationsWrappedContainer = instanceGenerationsWrappedContainer {
                let instanceGenerationsContainer = try instanceGenerationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.InstanceGeneration].self, forKey: .member)
                var instanceGenerationsBuffer:[AutoScalingClientTypes.InstanceGeneration]? = nil
                if let instanceGenerationsContainer = instanceGenerationsContainer {
                    instanceGenerationsBuffer = [AutoScalingClientTypes.InstanceGeneration]()
                    for enumContainer0 in instanceGenerationsContainer {
                        instanceGenerationsBuffer?.append(enumContainer0)
                    }
                }
                instanceGenerations = instanceGenerationsBuffer
            } else {
                instanceGenerations = []
            }
        } else {
            instanceGenerations = nil
        }
        let spotMaxPricePercentageOverLowestPriceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spotMaxPricePercentageOverLowestPrice)
        spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPriceDecoded
        let onDemandMaxPricePercentageOverLowestPriceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandMaxPricePercentageOverLowestPrice)
        onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPriceDecoded
        let bareMetalDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.BareMetal.self, forKey: .bareMetal)
        bareMetal = bareMetalDecoded
        let burstablePerformanceDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.BurstablePerformance.self, forKey: .burstablePerformance)
        burstablePerformance = burstablePerformanceDecoded
        let requireHibernateSupportDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireHibernateSupport)
        requireHibernateSupport = requireHibernateSupportDecoded
        let networkInterfaceCountDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.NetworkInterfaceCountRequest.self, forKey: .networkInterfaceCount)
        networkInterfaceCount = networkInterfaceCountDecoded
        let localStorageDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LocalStorage.self, forKey: .localStorage)
        localStorage = localStorageDecoded
        if containerValues.contains(.localStorageTypes) {
            struct KeyVal0{struct member{}}
            let localStorageTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .localStorageTypes)
            if let localStorageTypesWrappedContainer = localStorageTypesWrappedContainer {
                let localStorageTypesContainer = try localStorageTypesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LocalStorageType].self, forKey: .member)
                var localStorageTypesBuffer:[AutoScalingClientTypes.LocalStorageType]? = nil
                if let localStorageTypesContainer = localStorageTypesContainer {
                    localStorageTypesBuffer = [AutoScalingClientTypes.LocalStorageType]()
                    for enumContainer0 in localStorageTypesContainer {
                        localStorageTypesBuffer?.append(enumContainer0)
                    }
                }
                localStorageTypes = localStorageTypesBuffer
            } else {
                localStorageTypes = []
            }
        } else {
            localStorageTypes = nil
        }
        let totalLocalStorageGBDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TotalLocalStorageGBRequest.self, forKey: .totalLocalStorageGB)
        totalLocalStorageGB = totalLocalStorageGBDecoded
        let baselineEbsBandwidthMbpsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest.self, forKey: .baselineEbsBandwidthMbps)
        baselineEbsBandwidthMbps = baselineEbsBandwidthMbpsDecoded
        if containerValues.contains(.acceleratorTypes) {
            struct KeyVal0{struct member{}}
            let acceleratorTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .acceleratorTypes)
            if let acceleratorTypesWrappedContainer = acceleratorTypesWrappedContainer {
                let acceleratorTypesContainer = try acceleratorTypesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AcceleratorType].self, forKey: .member)
                var acceleratorTypesBuffer:[AutoScalingClientTypes.AcceleratorType]? = nil
                if let acceleratorTypesContainer = acceleratorTypesContainer {
                    acceleratorTypesBuffer = [AutoScalingClientTypes.AcceleratorType]()
                    for enumContainer0 in acceleratorTypesContainer {
                        acceleratorTypesBuffer?.append(enumContainer0)
                    }
                }
                acceleratorTypes = acceleratorTypesBuffer
            } else {
                acceleratorTypes = []
            }
        } else {
            acceleratorTypes = nil
        }
        let acceleratorCountDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.AcceleratorCountRequest.self, forKey: .acceleratorCount)
        acceleratorCount = acceleratorCountDecoded
        if containerValues.contains(.acceleratorManufacturers) {
            struct KeyVal0{struct member{}}
            let acceleratorManufacturersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .acceleratorManufacturers)
            if let acceleratorManufacturersWrappedContainer = acceleratorManufacturersWrappedContainer {
                let acceleratorManufacturersContainer = try acceleratorManufacturersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AcceleratorManufacturer].self, forKey: .member)
                var acceleratorManufacturersBuffer:[AutoScalingClientTypes.AcceleratorManufacturer]? = nil
                if let acceleratorManufacturersContainer = acceleratorManufacturersContainer {
                    acceleratorManufacturersBuffer = [AutoScalingClientTypes.AcceleratorManufacturer]()
                    for enumContainer0 in acceleratorManufacturersContainer {
                        acceleratorManufacturersBuffer?.append(enumContainer0)
                    }
                }
                acceleratorManufacturers = acceleratorManufacturersBuffer
            } else {
                acceleratorManufacturers = []
            }
        } else {
            acceleratorManufacturers = nil
        }
        if containerValues.contains(.acceleratorNames) {
            struct KeyVal0{struct member{}}
            let acceleratorNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .acceleratorNames)
            if let acceleratorNamesWrappedContainer = acceleratorNamesWrappedContainer {
                let acceleratorNamesContainer = try acceleratorNamesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AcceleratorName].self, forKey: .member)
                var acceleratorNamesBuffer:[AutoScalingClientTypes.AcceleratorName]? = nil
                if let acceleratorNamesContainer = acceleratorNamesContainer {
                    acceleratorNamesBuffer = [AutoScalingClientTypes.AcceleratorName]()
                    for enumContainer0 in acceleratorNamesContainer {
                        acceleratorNamesBuffer?.append(enumContainer0)
                    }
                }
                acceleratorNames = acceleratorNamesBuffer
            } else {
                acceleratorNames = []
            }
        } else {
            acceleratorNames = nil
        }
        let acceleratorTotalMemoryMiBDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest.self, forKey: .acceleratorTotalMemoryMiB)
        acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiBDecoded
        let networkBandwidthGbpsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.NetworkBandwidthGbpsRequest.self, forKey: .networkBandwidthGbps)
        networkBandwidthGbps = networkBandwidthGbpsDecoded
        if containerValues.contains(.allowedInstanceTypes) {
            struct KeyVal0{struct member{}}
            let allowedInstanceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .allowedInstanceTypes)
            if let allowedInstanceTypesWrappedContainer = allowedInstanceTypesWrappedContainer {
                let allowedInstanceTypesContainer = try allowedInstanceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedInstanceTypesBuffer:[Swift.String]? = nil
                if let allowedInstanceTypesContainer = allowedInstanceTypesContainer {
                    allowedInstanceTypesBuffer = [Swift.String]()
                    for stringContainer0 in allowedInstanceTypesContainer {
                        allowedInstanceTypesBuffer?.append(stringContainer0)
                    }
                }
                allowedInstanceTypes = allowedInstanceTypesBuffer
            } else {
                allowedInstanceTypes = []
            }
        } else {
            allowedInstanceTypes = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:
    ///
    /// * AllowedInstanceTypes - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
    ///
    /// * ExcludedInstanceTypes - The instance types to exclude from the list, even if they match your specified attributes.
    ///
    ///
    /// You must specify VCpuCount and MemoryMiB. All other attributes are optional. Any unspecified optional attribute is set to its default. For more information, see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in the Amazon EC2 Auto Scaling User Guide. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements) in the Amazon EC2 User Guide for Linux Instances.
    public struct InstanceRequirements: Swift.Equatable {
        /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) for an instance type. To exclude accelerator-enabled instance types, set Max to 0. Default: No minimum or maximum limits
        public var acceleratorCount: AutoScalingClientTypes.AcceleratorCountRequest?
        /// Indicates whether instance types must have accelerators by specific manufacturers.
        ///
        /// * For instance types with NVIDIA devices, specify nvidia.
        ///
        /// * For instance types with AMD devices, specify amd.
        ///
        /// * For instance types with Amazon Web Services devices, specify amazon-web-services.
        ///
        /// * For instance types with Xilinx devices, specify xilinx.
        ///
        ///
        /// Default: Any manufacturer
        public var acceleratorManufacturers: [AutoScalingClientTypes.AcceleratorManufacturer]?
        /// Lists the accelerators that must be on an instance type.
        ///
        /// * For instance types with NVIDIA A100 GPUs, specify a100.
        ///
        /// * For instance types with NVIDIA V100 GPUs, specify v100.
        ///
        /// * For instance types with NVIDIA K80 GPUs, specify k80.
        ///
        /// * For instance types with NVIDIA T4 GPUs, specify t4.
        ///
        /// * For instance types with NVIDIA M60 GPUs, specify m60.
        ///
        /// * For instance types with AMD Radeon Pro V520 GPUs, specify radeon-pro-v520.
        ///
        /// * For instance types with Xilinx VU9P FPGAs, specify vu9p.
        ///
        ///
        /// Default: Any accelerator
        public var acceleratorNames: [AutoScalingClientTypes.AcceleratorName]?
        /// The minimum and maximum total memory size for the accelerators on an instance type, in MiB. Default: No minimum or maximum limits
        public var acceleratorTotalMemoryMiB: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest?
        /// Lists the accelerator types that must be on an instance type.
        ///
        /// * For instance types with GPU accelerators, specify gpu.
        ///
        /// * For instance types with FPGA accelerators, specify fpga.
        ///
        /// * For instance types with inference accelerators, specify inference.
        ///
        ///
        /// Default: Any accelerator type
        public var acceleratorTypes: [AutoScalingClientTypes.AcceleratorType]?
        /// The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, Amazon EC2 Auto Scaling will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 Auto Scaling will allow all the M5a instance types, but not the M5n instance types. If you specify AllowedInstanceTypes, you can't specify ExcludedInstanceTypes. Default: All instance types
        public var allowedInstanceTypes: [Swift.String]?
        /// Indicates whether bare metal instance types are included, excluded, or required. Default: excluded
        public var bareMetal: AutoScalingClientTypes.BareMetal?
        /// The minimum and maximum baseline bandwidth performance for an instance type, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the Amazon EC2 User Guide for Linux Instances. Default: No minimum or maximum limits
        public var baselineEbsBandwidthMbps: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest?
        /// Indicates whether burstable performance instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) in the Amazon EC2 User Guide for Linux Instances. Default: excluded
        public var burstablePerformance: AutoScalingClientTypes.BurstablePerformance?
        /// Lists which specific CPU manufacturers to include.
        ///
        /// * For instance types with Intel CPUs, specify intel.
        ///
        /// * For instance types with AMD CPUs, specify amd.
        ///
        /// * For instance types with Amazon Web Services CPUs, specify amazon-web-services.
        ///
        ///
        /// Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template. Default: Any manufacturer
        public var cpuManufacturers: [AutoScalingClientTypes.CpuManufacturer]?
        /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance family, type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 Auto Scaling will exclude all the M5a instance types, but not the M5n instance types. If you specify ExcludedInstanceTypes, you can't specify AllowedInstanceTypes. Default: No excluded instance types
        public var excludedInstanceTypes: [Swift.String]?
        /// Indicates whether current or previous generation instance types are included.
        ///
        /// * For current generation instance types, specify current. The current generation includes EC2 instance types currently recommended for use. This typically includes the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide for Linux Instances.
        ///
        /// * For previous generation instance types, specify previous.
        ///
        ///
        /// Default: Any current or previous generation
        public var instanceGenerations: [AutoScalingClientTypes.InstanceGeneration]?
        /// Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, see [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Linux Instances. Default: included
        public var localStorage: AutoScalingClientTypes.LocalStorage?
        /// Indicates the type of local storage that is required.
        ///
        /// * For instance types with hard disk drive (HDD) storage, specify hdd.
        ///
        /// * For instance types with solid state drive (SSD) storage, specify ssd.
        ///
        ///
        /// Default: Any local storage type
        public var localStorageTypes: [AutoScalingClientTypes.LocalStorageType]?
        /// The minimum and maximum amount of memory per vCPU for an instance type, in GiB. Default: No minimum or maximum limits
        public var memoryGiBPerVCpu: AutoScalingClientTypes.MemoryGiBPerVCpuRequest?
        /// The minimum and maximum instance memory size for an instance type, in MiB.
        /// This member is required.
        public var memoryMiB: AutoScalingClientTypes.MemoryMiBRequest?
        /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default: No minimum or maximum limits
        public var networkBandwidthGbps: AutoScalingClientTypes.NetworkBandwidthGbpsRequest?
        /// The minimum and maximum number of network interfaces for an instance type. Default: No minimum or maximum limits
        public var networkInterfaceCount: AutoScalingClientTypes.NetworkInterfaceCountRequest?
        /// The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the least expensive current generation M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price. Default: 20
        public var onDemandMaxPricePercentageOverLowestPrice: Swift.Int?
        /// Indicates whether instance types must provide On-Demand Instance hibernation support. Default: false
        public var requireHibernateSupport: Swift.Bool?
        /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the least expensive current generation M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price. Default: 100
        public var spotMaxPricePercentageOverLowestPrice: Swift.Int?
        /// The minimum and maximum total local storage size for an instance type, in GB. Default: No minimum or maximum limits
        public var totalLocalStorageGB: AutoScalingClientTypes.TotalLocalStorageGBRequest?
        /// The minimum and maximum number of vCPUs for an instance type.
        /// This member is required.
        public var vCpuCount: AutoScalingClientTypes.VCpuCountRequest?

        public init (
            acceleratorCount: AutoScalingClientTypes.AcceleratorCountRequest? = nil,
            acceleratorManufacturers: [AutoScalingClientTypes.AcceleratorManufacturer]? = nil,
            acceleratorNames: [AutoScalingClientTypes.AcceleratorName]? = nil,
            acceleratorTotalMemoryMiB: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest? = nil,
            acceleratorTypes: [AutoScalingClientTypes.AcceleratorType]? = nil,
            allowedInstanceTypes: [Swift.String]? = nil,
            bareMetal: AutoScalingClientTypes.BareMetal? = nil,
            baselineEbsBandwidthMbps: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest? = nil,
            burstablePerformance: AutoScalingClientTypes.BurstablePerformance? = nil,
            cpuManufacturers: [AutoScalingClientTypes.CpuManufacturer]? = nil,
            excludedInstanceTypes: [Swift.String]? = nil,
            instanceGenerations: [AutoScalingClientTypes.InstanceGeneration]? = nil,
            localStorage: AutoScalingClientTypes.LocalStorage? = nil,
            localStorageTypes: [AutoScalingClientTypes.LocalStorageType]? = nil,
            memoryGiBPerVCpu: AutoScalingClientTypes.MemoryGiBPerVCpuRequest? = nil,
            memoryMiB: AutoScalingClientTypes.MemoryMiBRequest? = nil,
            networkBandwidthGbps: AutoScalingClientTypes.NetworkBandwidthGbpsRequest? = nil,
            networkInterfaceCount: AutoScalingClientTypes.NetworkInterfaceCountRequest? = nil,
            onDemandMaxPricePercentageOverLowestPrice: Swift.Int? = nil,
            requireHibernateSupport: Swift.Bool? = nil,
            spotMaxPricePercentageOverLowestPrice: Swift.Int? = nil,
            totalLocalStorageGB: AutoScalingClientTypes.TotalLocalStorageGBRequest? = nil,
            vCpuCount: AutoScalingClientTypes.VCpuCountRequest? = nil
        )
        {
            self.acceleratorCount = acceleratorCount
            self.acceleratorManufacturers = acceleratorManufacturers
            self.acceleratorNames = acceleratorNames
            self.acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiB
            self.acceleratorTypes = acceleratorTypes
            self.allowedInstanceTypes = allowedInstanceTypes
            self.bareMetal = bareMetal
            self.baselineEbsBandwidthMbps = baselineEbsBandwidthMbps
            self.burstablePerformance = burstablePerformance
            self.cpuManufacturers = cpuManufacturers
            self.excludedInstanceTypes = excludedInstanceTypes
            self.instanceGenerations = instanceGenerations
            self.localStorage = localStorage
            self.localStorageTypes = localStorageTypes
            self.memoryGiBPerVCpu = memoryGiBPerVCpu
            self.memoryMiB = memoryMiB
            self.networkBandwidthGbps = networkBandwidthGbps
            self.networkInterfaceCount = networkInterfaceCount
            self.onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice
            self.requireHibernateSupport = requireHibernateSupport
            self.spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice
            self.totalLocalStorageGB = totalLocalStorageGB
            self.vCpuCount = vCpuCount
        }
    }

}

extension AutoScalingClientTypes.InstanceReusePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reuseOnScaleIn = "ReuseOnScaleIn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let reuseOnScaleIn = reuseOnScaleIn {
            try container.encode(reuseOnScaleIn, forKey: ClientRuntime.Key("ReuseOnScaleIn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reuseOnScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reuseOnScaleIn)
        reuseOnScaleIn = reuseOnScaleInDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an instance reuse policy for a warm pool. For more information, see [Warm pools for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct InstanceReusePolicy: Swift.Equatable {
        /// Specifies whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
        public var reuseOnScaleIn: Swift.Bool?

        public init (
            reuseOnScaleIn: Swift.Bool? = nil
        )
        {
            self.reuseOnScaleIn = reuseOnScaleIn
        }
    }

}

extension AutoScalingClientTypes.InstancesDistribution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onDemandAllocationStrategy = "OnDemandAllocationStrategy"
        case onDemandBaseCapacity = "OnDemandBaseCapacity"
        case onDemandPercentageAboveBaseCapacity = "OnDemandPercentageAboveBaseCapacity"
        case spotAllocationStrategy = "SpotAllocationStrategy"
        case spotInstancePools = "SpotInstancePools"
        case spotMaxPrice = "SpotMaxPrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let onDemandAllocationStrategy = onDemandAllocationStrategy {
            try container.encode(onDemandAllocationStrategy, forKey: ClientRuntime.Key("OnDemandAllocationStrategy"))
        }
        if let onDemandBaseCapacity = onDemandBaseCapacity {
            try container.encode(onDemandBaseCapacity, forKey: ClientRuntime.Key("OnDemandBaseCapacity"))
        }
        if let onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity {
            try container.encode(onDemandPercentageAboveBaseCapacity, forKey: ClientRuntime.Key("OnDemandPercentageAboveBaseCapacity"))
        }
        if let spotAllocationStrategy = spotAllocationStrategy {
            try container.encode(spotAllocationStrategy, forKey: ClientRuntime.Key("SpotAllocationStrategy"))
        }
        if let spotInstancePools = spotInstancePools {
            try container.encode(spotInstancePools, forKey: ClientRuntime.Key("SpotInstancePools"))
        }
        if let spotMaxPrice = spotMaxPrice {
            try container.encode(spotMaxPrice, forKey: ClientRuntime.Key("SpotMaxPrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onDemandAllocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onDemandAllocationStrategy)
        onDemandAllocationStrategy = onDemandAllocationStrategyDecoded
        let onDemandBaseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandBaseCapacity)
        onDemandBaseCapacity = onDemandBaseCapacityDecoded
        let onDemandPercentageAboveBaseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandPercentageAboveBaseCapacity)
        onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacityDecoded
        let spotAllocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotAllocationStrategy)
        spotAllocationStrategy = spotAllocationStrategyDecoded
        let spotInstancePoolsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spotInstancePools)
        spotInstancePools = spotInstancePoolsDecoded
        let spotMaxPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotMaxPrice)
        spotMaxPrice = spotMaxPriceDecoded
    }
}

extension AutoScalingClientTypes {
    /// Use this structure to specify the distribution of On-Demand Instances and Spot Instances and the allocation strategies used to fulfill On-Demand and Spot capacities for a mixed instances policy.
    public struct InstancesDistribution: Swift.Equatable {
        /// The allocation strategy to apply to your On-Demand Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify. The following lists the valid values: lowest-price Uses price to determine which instance types are the highest priority, launching the lowest priced instance types within an Availability Zone first. This is the default value for Auto Scaling groups that specify [InstanceRequirements]. prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling launches your highest priority instance types first. If all your On-Demand capacity cannot be fulfilled using your highest priority instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the second priority instance type, and so on. This is the default value for Auto Scaling groups that don't specify [InstanceRequirements] and cannot be used for groups that do.
        public var onDemandAllocationStrategy: Swift.String?
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is launched first as your group scales. This number has the same unit of measurement as the group's desired capacity. If you change the default unit of measurement (number of instances) by specifying weighted capacity values in your launch template overrides list, or by changing the default desired capacity type setting of the group, you must specify this number using the same unit of measurement. Default: 0
        public var onDemandBaseCapacity: Swift.Int?
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot Instances). If set to 100, only On-Demand Instances are used. Default: 100
        public var onDemandPercentageAboveBaseCapacity: Swift.Int?
        /// The allocation strategy to apply to your Spot Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify. The following lists the valid values: capacity-optimized Requests Spot Instances using pools that are optimally chosen based on the available Spot capacity. This strategy has the lowest risk of interruption. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. capacity-optimized-prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes for capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify [InstanceRequirements]. lowest-price Requests Spot Instances using the lowest priced pools within an Availability Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it might lead to high interruption rates because this strategy only considers instance price and not available capacity. price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price.
        public var spotAllocationStrategy: Swift.String?
        /// The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the SpotAllocationStrategy is lowest-price. Value must be in the range of 1–20. Default: 2
        public var spotInstancePools: Swift.Int?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If your maximum price is lower than the Spot price for the instance types that you selected, your Spot Instances are not launched. We do not recommend specifying a maximum price because it can lead to increased interruptions. When Spot Instances launch, you pay the current Spot price. To remove a maximum price that you previously set, include the property but specify an empty string ("") for the value. If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify one. Valid Range: Minimum value of 0.001
        public var spotMaxPrice: Swift.String?

        public init (
            onDemandAllocationStrategy: Swift.String? = nil,
            onDemandBaseCapacity: Swift.Int? = nil,
            onDemandPercentageAboveBaseCapacity: Swift.Int? = nil,
            spotAllocationStrategy: Swift.String? = nil,
            spotInstancePools: Swift.Int? = nil,
            spotMaxPrice: Swift.String? = nil
        )
        {
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandBaseCapacity = onDemandBaseCapacity
            self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
            self.spotAllocationStrategy = spotAllocationStrategy
            self.spotInstancePools = spotInstancePools
            self.spotMaxPrice = spotMaxPrice
        }
    }

}

extension InvalidNextToken {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidNextTokenBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The NextToken value is not valid.
public struct InvalidNextToken: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNextTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.LaunchConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case blockDeviceMappings = "BlockDeviceMappings"
        case classicLinkVPCId = "ClassicLinkVPCId"
        case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
        case createdTime = "CreatedTime"
        case ebsOptimized = "EbsOptimized"
        case iamInstanceProfile = "IamInstanceProfile"
        case imageId = "ImageId"
        case instanceMonitoring = "InstanceMonitoring"
        case instanceType = "InstanceType"
        case kernelId = "KernelId"
        case keyName = "KeyName"
        case launchConfigurationARN = "LaunchConfigurationARN"
        case launchConfigurationName = "LaunchConfigurationName"
        case metadataOptions = "MetadataOptions"
        case placementTenancy = "PlacementTenancy"
        case ramdiskId = "RamdiskId"
        case securityGroups = "SecurityGroups"
        case spotPrice = "SpotPrice"
        case userData = "UserData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: ClientRuntime.Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
                for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                    try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
                try blockDeviceMappingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: ClientRuntime.Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            if !classicLinkVPCSecurityGroups.isEmpty {
                var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
                for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                    try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
                try classicLinkVPCSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let createdTime = createdTime {
            try container.encodeTimestamp(createdTime, format: .dateTime, forKey: ClientRuntime.Key("createdTime"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: ClientRuntime.Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: ClientRuntime.Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let launchConfigurationARN = launchConfigurationARN {
            try container.encode(launchConfigurationARN, forKey: ClientRuntime.Key("LaunchConfigurationARN"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: ClientRuntime.Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: ClientRuntime.Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, xmlstring0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchConfigurationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationARN)
        launchConfigurationARN = launchConfigurationARNDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupsBuffer:[Swift.String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let classicLinkVPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classicLinkVPCId)
        classicLinkVPCId = classicLinkVPCIdDecoded
        if containerValues.contains(.classicLinkVPCSecurityGroups) {
            struct KeyVal0{struct member{}}
            let classicLinkVPCSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .classicLinkVPCSecurityGroups)
            if let classicLinkVPCSecurityGroupsWrappedContainer = classicLinkVPCSecurityGroupsWrappedContainer {
                let classicLinkVPCSecurityGroupsContainer = try classicLinkVPCSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var classicLinkVPCSecurityGroupsBuffer:[Swift.String]? = nil
                if let classicLinkVPCSecurityGroupsContainer = classicLinkVPCSecurityGroupsContainer {
                    classicLinkVPCSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in classicLinkVPCSecurityGroupsContainer {
                        classicLinkVPCSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroupsBuffer
            } else {
                classicLinkVPCSecurityGroups = []
            }
        } else {
            classicLinkVPCSecurityGroups = nil
        }
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct member{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[AutoScalingClientTypes.BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [AutoScalingClientTypes.BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let instanceMonitoringDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMonitoring.self, forKey: .instanceMonitoring)
        instanceMonitoring = instanceMonitoringDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let createdTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .associatePublicIpAddress)
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let placementTenancyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementTenancy)
        placementTenancy = placementTenancyDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a launch configuration.
    public struct LaunchConfiguration: Swift.Equatable {
        /// Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet. For more information, see [Launching Auto Scaling instances in a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide.
        public var associatePublicIpAddress: Swift.Bool?
        /// The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see [Block Device Mapping](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
        public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
        /// Available for backward compatibility.
        public var classicLinkVPCId: Swift.String?
        /// Available for backward compatibility.
        public var classicLinkVPCSecurityGroups: [Swift.String]?
        /// The creation date and time for the launch configuration.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). For more information, see [Amazon EBS-Optimized Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) in the Amazon EC2 User Guide for Linux Instances.
        public var ebsOptimized: Swift.Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
        public var iamInstanceProfile: Swift.String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more information, see [Find a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var imageId: Swift.String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. For more information, see [Configure Monitoring for Auto Scaling Instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
        public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
        /// The instance type for the instances. For information about available instance types, see [Available instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The ID of the kernel associated with the AMI.
        public var kernelId: Swift.String?
        /// The name of the key pair. For more information, see [Amazon EC2 Key Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
        public var keyName: Swift.String?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public var launchConfigurationARN: Swift.String?
        /// The name of the launch configuration.
        /// This member is required.
        public var launchConfigurationName: Swift.String?
        /// The metadata options for the instances. For more information, see [Configuring the Instance Metadata Options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
        public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. For more information, see [Configuring instance tenancy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html) in the Amazon EC2 Auto Scaling User Guide.
        public var placementTenancy: Swift.String?
        /// The ID of the RAM disk associated with the AMI.
        public var ramdiskId: Swift.String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group. For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide.
        public var securityGroups: [Swift.String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Requesting Spot Instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide.
        public var spotPrice: Swift.String?
        /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public var userData: Swift.String?

        public init (
            associatePublicIpAddress: Swift.Bool? = nil,
            blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
            classicLinkVPCId: Swift.String? = nil,
            classicLinkVPCSecurityGroups: [Swift.String]? = nil,
            createdTime: ClientRuntime.Date? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
            instanceType: Swift.String? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            launchConfigurationARN: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
            placementTenancy: Swift.String? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            spotPrice: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.createdTime = createdTime
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.metadataOptions = metadataOptions
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case overrides = "Overrides"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: ClientRuntime.Key("LaunchTemplateSpecification"))
        }
        if let overrides = overrides {
            if !overrides.isEmpty {
                var overridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Overrides"))
                for (index0, launchtemplateoverrides0) in overrides.enumerated() {
                    try overridesContainer.encode(launchtemplateoverrides0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var overridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Overrides"))
                try overridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
        if containerValues.contains(.overrides) {
            struct KeyVal0{struct member{}}
            let overridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .overrides)
            if let overridesWrappedContainer = overridesWrappedContainer {
                let overridesContainer = try overridesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LaunchTemplateOverrides].self, forKey: .member)
                var overridesBuffer:[AutoScalingClientTypes.LaunchTemplateOverrides]? = nil
                if let overridesContainer = overridesContainer {
                    overridesBuffer = [AutoScalingClientTypes.LaunchTemplateOverrides]()
                    for structureContainer0 in overridesContainer {
                        overridesBuffer?.append(structureContainer0)
                    }
                }
                overrides = overridesBuffer
            } else {
                overrides = []
            }
        } else {
            overrides = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Use this structure to specify the launch templates and instance types (overrides) for a mixed instances policy.
    public struct LaunchTemplate: Swift.Equatable {
        /// The launch template.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Any properties that you specify override the same properties in the launch template.
        public var overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]?

        public init (
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]? = nil
        )
        {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplateOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRequirements = "InstanceRequirements"
        case instanceType = "InstanceType"
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceRequirements = instanceRequirements {
            try container.encode(instanceRequirements, forKey: ClientRuntime.Key("InstanceRequirements"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: ClientRuntime.Key("LaunchTemplateSpecification"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
        let instanceRequirementsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRequirements.self, forKey: .instanceRequirements)
        instanceRequirements = instanceRequirementsDecoded
    }
}

extension AutoScalingClientTypes {
    /// Use this structure to let Amazon EC2 Auto Scaling do the following when the Auto Scaling group has a mixed instances policy:
    ///
    /// * Override the instance type that is specified in the launch template.
    ///
    /// * Use multiple instance types.
    ///
    ///
    /// Specify the instance types that you want, or define your instance requirements instead and let Amazon EC2 Auto Scaling provision the available instance types that meet your requirements. This can provide Amazon EC2 Auto Scaling with a larger selection of instance types to choose from when fulfilling Spot and On-Demand capacities. You can view which instance types are matched before you apply the instance requirements to your Auto Scaling group. After you define your instance requirements, you don't have to keep updating these settings to get new EC2 instance types automatically. Amazon EC2 Auto Scaling uses the instance requirements of the Auto Scaling group to determine whether a new EC2 instance type can be used.
    public struct LaunchTemplateOverrides: Swift.Equatable {
        /// The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a compatible set of instance requirements for each launch template. If you specify InstanceRequirements, you can't specify InstanceType.
        public var instanceRequirements: AutoScalingClientTypes.InstanceRequirements?
        /// The instance type, such as m3.xlarge. You must specify an instance type that is supported in your requested Region and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon Elastic Compute Cloud User Guide. You can specify up to 40 instance types per Auto Scaling group.
        public var instanceType: Swift.String?
        /// Provides a launch template for the specified instance type or set of instance requirements. For example, some instance types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling uses the launch template that's specified in the LaunchTemplate definition. For more information, see [Specifying a different launch template for an instance type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html) in the Amazon EC2 Auto Scaling User Guide. You can specify up to 20 launch templates per Auto Scaling group. The launch templates specified in the overrides and in the LaunchTemplate definition count towards this limit.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a WeightedCapacity of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see [Configuring instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide. Value must be in the range of 1–999. If you specify a value for WeightedCapacity for one instance type, you must specify a value for WeightedCapacity for all of them. Every Auto Scaling group has three size parameters (DesiredCapacity, MaxSize, and MinSize). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.
        public var weightedCapacity: Swift.String?

        public init (
            instanceRequirements: AutoScalingClientTypes.InstanceRequirements? = nil,
            instanceType: Swift.String? = nil,
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.launchTemplateSpecification = launchTemplateSpecification
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplateSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: ClientRuntime.Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: ClientRuntime.Key("LaunchTemplateName"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling uses to launch Amazon EC2 instances. For more information about launch templates, see [Launch templates](https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// The ID of the launch template. To get the template ID, use the Amazon EC2 [DescribeLaunchTemplates](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html) API operation. New launch templates can be created using the Amazon EC2 [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) API. Conditional: You must specify either a LaunchTemplateId or a LaunchTemplateName.
        public var launchTemplateId: Swift.String?
        /// The name of the launch template. To get the template name, use the Amazon EC2 [DescribeLaunchTemplates](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html) API operation. New launch templates can be created using the Amazon EC2 [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) API. Conditional: You must specify either a LaunchTemplateId or a LaunchTemplateName.
        public var launchTemplateName: Swift.String?
        /// The version number, $Latest, or $Default. To get the version number, use the Amazon EC2 [DescribeLaunchTemplateVersions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplateVersions.html) API operation. New launch template versions can be created using the Amazon EC2 [CreateLaunchTemplateVersion](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplateVersion.html) API. If the value is $Latest, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is $Default, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is $Default.
        public var version: Swift.String?

        public init (
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension AutoScalingClientTypes.LifecycleHook: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case defaultResult = "DefaultResult"
        case globalTimeout = "GlobalTimeout"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let globalTimeout = globalTimeout {
            try container.encode(globalTimeout, forKey: ClientRuntime.Key("GlobalTimeout"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let globalTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .globalTimeout)
        globalTimeout = globalTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a lifecycle hook. A lifecycle hook lets you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.
    public struct LifecycleHook: Swift.Equatable {
        /// The name of the Auto Scaling group for the lifecycle hook.
        public var autoScalingGroupName: Swift.String?
        /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. Valid values: CONTINUE | ABANDON
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public var globalTimeout: Swift.Int?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        public var lifecycleHookName: Swift.String?
        /// The lifecycle transition. Valid values: autoscaling:EC2_INSTANCE_LAUNCHING | autoscaling:EC2_INSTANCE_TERMINATING
        public var lifecycleTransition: Swift.String?
        /// Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public var notificationMetadata: Swift.String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).
        public var roleARN: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            defaultResult: Swift.String? = nil,
            globalTimeout: Swift.Int? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.defaultResult = defaultResult
            self.globalTimeout = globalTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }

}

extension AutoScalingClientTypes.LifecycleHookSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes information used to specify a lifecycle hook for an Auto Scaling group. For more information, see [Amazon EC2 Auto Scaling lifecycle hooks](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct LifecycleHookSpecification: Swift.Equatable {
        /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ABANDON. Valid values: CONTINUE | ABANDON
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour).
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        /// This member is required.
        public var lifecycleHookName: Swift.String?
        /// The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
        ///
        /// * To create a lifecycle hook for scale-out events, specify autoscaling:EC2_INSTANCE_LAUNCHING.
        ///
        /// * To create a lifecycle hook for scale-in events, specify autoscaling:EC2_INSTANCE_TERMINATING.
        /// This member is required.
        public var lifecycleTransition: Swift.String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public var notificationMetadata: Swift.String?
        /// The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify an Amazon SNS topic or an Amazon SQS queue.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. For information about creating this role, see [Configure a notification target for a lifecycle hook](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html#lifecycle-hook-notification-target) in the Amazon EC2 Auto Scaling User Guide. Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue.
        public var roleARN: Swift.String?

        public init (
            defaultResult: Swift.String? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.defaultResult = defaultResult
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }

}

extension AutoScalingClientTypes {
    public enum LifecycleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detached
        case detaching
        case enteringStandby
        case inService
        case pending
        case pendingProceed
        case pendingWait
        case quarantined
        case standby
        case terminated
        case terminating
        case terminatingProceed
        case terminatingWait
        case warmedHibernated
        case warmedPending
        case warmedPendingProceed
        case warmedPendingWait
        case warmedRunning
        case warmedStopped
        case warmedTerminated
        case warmedTerminating
        case warmedTerminatingProceed
        case warmedTerminatingWait
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleState] {
            return [
                .detached,
                .detaching,
                .enteringStandby,
                .inService,
                .pending,
                .pendingProceed,
                .pendingWait,
                .quarantined,
                .standby,
                .terminated,
                .terminating,
                .terminatingProceed,
                .terminatingWait,
                .warmedHibernated,
                .warmedPending,
                .warmedPendingProceed,
                .warmedPendingWait,
                .warmedRunning,
                .warmedStopped,
                .warmedTerminated,
                .warmedTerminating,
                .warmedTerminatingProceed,
                .warmedTerminatingWait,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detached: return "Detached"
            case .detaching: return "Detaching"
            case .enteringStandby: return "EnteringStandby"
            case .inService: return "InService"
            case .pending: return "Pending"
            case .pendingProceed: return "Pending:Proceed"
            case .pendingWait: return "Pending:Wait"
            case .quarantined: return "Quarantined"
            case .standby: return "Standby"
            case .terminated: return "Terminated"
            case .terminating: return "Terminating"
            case .terminatingProceed: return "Terminating:Proceed"
            case .terminatingWait: return "Terminating:Wait"
            case .warmedHibernated: return "Warmed:Hibernated"
            case .warmedPending: return "Warmed:Pending"
            case .warmedPendingProceed: return "Warmed:Pending:Proceed"
            case .warmedPendingWait: return "Warmed:Pending:Wait"
            case .warmedRunning: return "Warmed:Running"
            case .warmedStopped: return "Warmed:Stopped"
            case .warmedTerminated: return "Warmed:Terminated"
            case .warmedTerminating: return "Warmed:Terminating"
            case .warmedTerminatingProceed: return "Warmed:Terminating:Proceed"
            case .warmedTerminatingWait: return "Warmed:Terminating:Wait"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LifecycleState(rawValue: rawValue) ?? LifecycleState.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have already reached a limit for your Amazon EC2 Auto Scaling resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For more information, see [DescribeAccountLimits](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html) in the Amazon EC2 Auto Scaling API Reference.
public struct LimitExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.LoadBalancerState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerName = loadBalancerName {
            try container.encode(loadBalancerName, forKey: ClientRuntime.Key("LoadBalancerName"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the state of a Classic Load Balancer.
    public struct LoadBalancerState: Swift.Equatable {
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// One of the following load balancer states:
        ///
        /// * Adding - The Auto Scaling instances are being registered with the load balancer.
        ///
        /// * Added - All Auto Scaling instances are registered with the load balancer.
        ///
        /// * InService - At least one Auto Scaling instance passed an ELB health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the load balancer.
        public var state: Swift.String?

        public init (
            loadBalancerName: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }
    }

}

extension AutoScalingClientTypes.LoadBalancerTargetGroupState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerTargetGroupARN = loadBalancerTargetGroupARN {
            try container.encode(loadBalancerTargetGroupARN, forKey: ClientRuntime.Key("LoadBalancerTargetGroupARN"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerTargetGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerTargetGroupARN)
        loadBalancerTargetGroupARN = loadBalancerTargetGroupARNDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the state of a target group.
    public struct LoadBalancerTargetGroupState: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the target group.
        public var loadBalancerTargetGroupARN: Swift.String?
        /// The state of the target group.
        ///
        /// * Adding - The Auto Scaling instances are being registered with the target group.
        ///
        /// * Added - All Auto Scaling instances are registered with the target group.
        ///
        /// * InService - At least one Auto Scaling instance passed an ELB health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the target group.
        public var state: Swift.String?

        public init (
            loadBalancerTargetGroupARN: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }
    }

}

extension AutoScalingClientTypes.LoadForecast: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricSpecification = "MetricSpecification"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricSpecification = metricSpecification {
            try container.encode(metricSpecification, forKey: ClientRuntime.Key("MetricSpecification"))
        }
        if let timestamps = timestamps {
            if !timestamps.isEmpty {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                for (index0, timestamptype0) in timestamps.enumerated() {
                    try timestampsContainer.encodeTimestamp(timestamptype0, format: .dateTime, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                try timestampsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, metricscale0) in values.enumerated() {
                    try valuesContainer.encode(metricscale0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(timestampsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let metricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMetricSpecification.self, forKey: .metricSpecification)
        metricSpecification = metricSpecificationDecoded
    }
}

extension AutoScalingClientTypes {
    /// A GetPredictiveScalingForecast call returns the load forecast for a predictive scaling policy. This structure includes the data points for that load forecast, along with the timestamps of those data points and the metric specification.
    public struct LoadForecast: Swift.Equatable {
        /// The metric specification for the load forecast.
        /// This member is required.
        public var metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification?
        /// The timestamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [ClientRuntime.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init (
            metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.metricSpecification = metricSpecification
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension AutoScalingClientTypes {
    public enum LocalStorage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [LocalStorage] {
            return [
                .excluded,
                .included,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocalStorage(rawValue: rawValue) ?? LocalStorage.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum LocalStorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hdd
        case ssd
        case sdkUnknown(Swift.String)

        public static var allCases: [LocalStorageType] {
            return [
                .hdd,
                .ssd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hdd: return "hdd"
            case .ssd: return "ssd"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocalStorageType(rawValue: rawValue) ?? LocalStorageType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.MemoryGiBPerVCpuRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the MemoryGiBPerVCpu object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct MemoryGiBPerVCpuRequest: Swift.Equatable {
        /// The memory maximum in GiB.
        public var max: Swift.Double?
        /// The memory minimum in GiB.
        public var min: Swift.Double?

        public init (
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.MemoryMiBRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the MemoryMiB object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct MemoryMiBRequest: Swift.Equatable {
        /// The memory maximum in MiB.
        public var max: Swift.Int?
        /// The memory minimum in MiB.
        /// This member is required.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.Metric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, metricdimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(metricdimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDimension].self, forKey: .member)
                var dimensionsBuffer:[AutoScalingClientTypes.MetricDimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [AutoScalingClientTypes.MetricDimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Represents a specific metric.
    public struct Metric: Swift.Equatable {
        /// The dimensions for the metric. For the list of available dimensions, see the Amazon Web Services documentation available from the table in [Amazon Web Services services that publish CloudWatch metrics ](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public var dimensions: [AutoScalingClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric. For more information, see the table in [Amazon Web Services services that publish CloudWatch metrics ](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide.
        /// This member is required.
        public var namespace: Swift.String?

        public init (
            dimensions: [AutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension AutoScalingClientTypes.MetricCollectionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a metric.
    public struct MetricCollectionType: Swift.Equatable {
        /// One of the following metrics:
        ///
        /// * GroupMinSize
        ///
        /// * GroupMaxSize
        ///
        /// * GroupDesiredCapacity
        ///
        /// * GroupInServiceInstances
        ///
        /// * GroupPendingInstances
        ///
        /// * GroupStandbyInstances
        ///
        /// * GroupTerminatingInstances
        ///
        /// * GroupTotalInstances
        ///
        /// * GroupInServiceCapacity
        ///
        /// * GroupPendingCapacity
        ///
        /// * GroupStandbyCapacity
        ///
        /// * GroupTerminatingCapacity
        ///
        /// * GroupTotalCapacity
        ///
        /// * WarmPoolDesiredCapacity
        ///
        /// * WarmPoolWarmedCapacity
        ///
        /// * WarmPoolPendingCapacity
        ///
        /// * WarmPoolTerminatingCapacity
        ///
        /// * WarmPoolTotalCapacity
        ///
        /// * GroupAndWarmPoolDesiredCapacity
        ///
        /// * GroupAndWarmPoolTotalCapacity
        public var metric: Swift.String?

        public init (
            metric: Swift.String? = nil
        )
        {
            self.metric = metric
        }
    }

}

extension AutoScalingClientTypes.MetricDataQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case id = "Id"
        case label = "Label"
        case metricStat = "MetricStat"
        case returnData = "ReturnData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let metricStat = metricStat {
            try container.encode(metricStat, forKey: ClientRuntime.Key("MetricStat"))
        }
        if let returnData = returnData {
            try container.encode(returnData, forKey: ClientRuntime.Key("ReturnData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let metricStatDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MetricStat.self, forKey: .metricStat)
        metricStat = metricStatDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let returnDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .returnData)
        returnData = returnDataDecoded
    }
}

extension AutoScalingClientTypes {
    /// The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp. For more information and examples, see [Advanced predictive scaling policy configurations using custom metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct MetricDataQuery: Swift.Equatable {
        /// The math expression to perform on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. Conditional: Within each MetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var expression: Swift.String?
        /// A short name that identifies the object's results in the response. This name must be unique among all MetricDataQuery objects specified for a single scaling policy. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscores. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
        public var label: Swift.String?
        /// Information about the metric data to return. Conditional: Within each MetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var metricStat: AutoScalingClientTypes.MetricStat?
        /// Indicates whether to return the timestamps and raw data values of this metric. If you use any math expressions, specify true for this value for only the final math expression that the metric specification is based on. You must specify false for ReturnData for all the other metrics and expressions used in the metric specification. If you are only retrieving metrics and not performing any math expressions, do not specify anything for ReturnData. This sets it to its default (true).
        public var returnData: Swift.Bool?

        public init (
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: AutoScalingClientTypes.MetricStat? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.returnData = returnData
        }
    }

}

extension AutoScalingClientTypes.MetricDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the dimension of a metric.
    public struct MetricDimension: Swift.Equatable {
        /// The name of the dimension.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.MetricGranularityType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularity = "Granularity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granularityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a granularity of a metric.
    public struct MetricGranularityType: Swift.Equatable {
        /// The granularity. The only valid value is 1Minute.
        public var granularity: Swift.String?

        public init (
            granularity: Swift.String? = nil
        )
        {
            self.granularity = granularity
        }
    }

}

extension AutoScalingClientTypes.MetricStat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Metric.self, forKey: .metric)
        metric = metricDecoded
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AutoScalingClientTypes {
    /// This structure defines the CloudWatch metric to return, along with the statistic, period, and unit. For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct MetricStat: Swift.Equatable {
        /// The CloudWatch metric to return, including the metric name, namespace, and dimensions. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html).
        /// This member is required.
        public var metric: AutoScalingClientTypes.Metric?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the Amazon CloudWatch User Guide. The most commonly used metrics for predictive scaling are Average and Sum.
        /// This member is required.
        public var stat: Swift.String?
        /// The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init (
            metric: AutoScalingClientTypes.Metric? = nil,
            stat: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.metric = metric
            self.stat = stat
            self.unit = unit
        }
    }

}

extension AutoScalingClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum MetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.MixedInstancesPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesDistribution = "InstancesDistribution"
        case launchTemplate = "LaunchTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesDistribution = instancesDistribution {
            try container.encode(instancesDistribution, forKey: ClientRuntime.Key("InstancesDistribution"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplate.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instancesDistributionDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstancesDistribution.self, forKey: .instancesDistribution)
        instancesDistribution = instancesDistributionDecoded
    }
}

extension AutoScalingClientTypes {
    /// Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct MixedInstancesPolicy: Swift.Equatable {
        /// The instances distribution.
        public var instancesDistribution: AutoScalingClientTypes.InstancesDistribution?
        /// One or more launch templates and the instance types (overrides) that are used to launch EC2 instances to fulfill On-Demand and Spot capacities.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplate?

        public init (
            instancesDistribution: AutoScalingClientTypes.InstancesDistribution? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplate? = nil
        )
        {
            self.instancesDistribution = instancesDistribution
            self.launchTemplate = launchTemplate
        }
    }

}

extension AutoScalingClientTypes.NetworkBandwidthGbpsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the NetworkBandwidthGbps object when you specify [InstanceRequirements] for an Auto Scaling group. Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the Amazon EC2 User Guide for Linux Instances.
    public struct NetworkBandwidthGbpsRequest: Swift.Equatable {
        /// The maximum amount of network bandwidth, in gigabits per second (Gbps).
        public var max: Swift.Double?
        /// The minimum amount of network bandwidth, in gigabits per second (Gbps).
        public var min: Swift.Double?

        public init (
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.NetworkInterfaceCountRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the NetworkInterfaceCount object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct NetworkInterfaceCountRequest: Swift.Equatable {
        /// The maximum number of network interfaces.
        public var max: Swift.Int?
        /// The minimum number of network interfaces.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.NotificationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case notificationType = "NotificationType"
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
        let notificationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a notification.
    public struct NotificationConfiguration: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// One of the following event notification types:
        ///
        /// * autoscaling:EC2_INSTANCE_LAUNCH
        ///
        /// * autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        ///
        /// * autoscaling:EC2_INSTANCE_TERMINATE
        ///
        /// * autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        ///
        /// * autoscaling:TEST_NOTIFICATION
        public var notificationType: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
        public var topicARN: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            notificationType: Swift.String? = nil,
            topicARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
            self.topicARN = topicARN
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredefinedLoadMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albtargetgrouprequestcount
        case asgtotalcpuutilization
        case asgtotalnetworkin
        case asgtotalnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedLoadMetricType] {
            return [
                .albtargetgrouprequestcount,
                .asgtotalcpuutilization,
                .asgtotalnetworkin,
                .asgtotalnetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
            case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
            case .asgtotalnetworkin: return "ASGTotalNetworkIn"
            case .asgtotalnetworkout: return "ASGTotalNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedLoadMetricType(rawValue: rawValue) ?? PredefinedLoadMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum PredefinedMetricPairType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcount
        case asgcpuutilization
        case asgnetworkin
        case asgnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedMetricPairType] {
            return [
                .albrequestcount,
                .asgcpuutilization,
                .asgnetworkin,
                .asgnetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcount: return "ALBRequestCount"
            case .asgcpuutilization: return "ASGCPUUtilization"
            case .asgnetworkin: return "ASGNetworkIn"
            case .asgnetworkout: return "ASGNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedMetricPairType(rawValue: rawValue) ?? PredefinedMetricPairType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredefinedMetricSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes {
    /// Represents a predefined metric for a target tracking scaling policy to use with Amazon EC2 Auto Scaling.
    public struct PredefinedMetricSpecification: Swift.Equatable {
        /// The metric type. The following predefined metrics are available:
        ///
        /// * ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling group.
        ///
        /// * ASGAverageNetworkIn - Average number of bytes received on all network interfaces by the Auto Scaling group.
        ///
        /// * ASGAverageNetworkOut - Average number of bytes sent out on all network interfaces by the Auto Scaling group.
        ///
        /// * ALBRequestCountPerTarget - Average Application Load Balancer request count per target for your Auto Scaling group.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.MetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.MetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredefinedScalingMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedScalingMetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedScalingMetricType(rawValue: rawValue) ?? PredefinedScalingMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacityBreachBehavior = "MaxCapacityBreachBehavior"
        case maxCapacityBuffer = "MaxCapacityBuffer"
        case metricSpecifications = "MetricSpecifications"
        case mode = "Mode"
        case schedulingBufferTime = "SchedulingBufferTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxCapacityBreachBehavior = maxCapacityBreachBehavior {
            try container.encode(maxCapacityBreachBehavior, forKey: ClientRuntime.Key("MaxCapacityBreachBehavior"))
        }
        if let maxCapacityBuffer = maxCapacityBuffer {
            try container.encode(maxCapacityBuffer, forKey: ClientRuntime.Key("MaxCapacityBuffer"))
        }
        if let metricSpecifications = metricSpecifications {
            if !metricSpecifications.isEmpty {
                var metricSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricSpecifications"))
                for (index0, predictivescalingmetricspecification0) in metricSpecifications.enumerated() {
                    try metricSpecificationsContainer.encode(predictivescalingmetricspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricSpecifications"))
                try metricSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let schedulingBufferTime = schedulingBufferTime {
            try container.encode(schedulingBufferTime, forKey: ClientRuntime.Key("SchedulingBufferTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricSpecifications) {
            struct KeyVal0{struct member{}}
            let metricSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricSpecifications)
            if let metricSpecificationsWrappedContainer = metricSpecificationsWrappedContainer {
                let metricSpecificationsContainer = try metricSpecificationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.PredictiveScalingMetricSpecification].self, forKey: .member)
                var metricSpecificationsBuffer:[AutoScalingClientTypes.PredictiveScalingMetricSpecification]? = nil
                if let metricSpecificationsContainer = metricSpecificationsContainer {
                    metricSpecificationsBuffer = [AutoScalingClientTypes.PredictiveScalingMetricSpecification]()
                    for structureContainer0 in metricSpecificationsContainer {
                        metricSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                metricSpecifications = metricSpecificationsBuffer
            } else {
                metricSpecifications = []
            }
        } else {
            metricSpecifications = nil
        }
        let modeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMode.self, forKey: .mode)
        mode = modeDecoded
        let schedulingBufferTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingBufferTime)
        schedulingBufferTime = schedulingBufferTimeDecoded
        let maxCapacityBreachBehaviorDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior.self, forKey: .maxCapacityBreachBehavior)
        maxCapacityBreachBehavior = maxCapacityBreachBehaviorDecoded
        let maxCapacityBufferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacityBuffer)
        maxCapacityBuffer = maxCapacityBufferDecoded
    }
}

extension AutoScalingClientTypes {
    /// Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct PredictiveScalingConfiguration: Swift.Equatable {
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Defaults to HonorMaxCapacity if not specified. The following are possible values:
        ///
        /// * HonorMaxCapacity - Amazon EC2 Auto Scaling cannot scale out capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit.
        ///
        /// * IncreaseMaxCapacity - Amazon EC2 Auto Scaling can scale out capacity higher than the maximum capacity when the forecast capacity is close to or exceeds the maximum capacity. The upper limit is determined by the forecasted capacity and the value for MaxCapacityBuffer.
        public var maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior?
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity. Required if the MaxCapacityBreachBehavior property is set to IncreaseMaxCapacity, and cannot be used otherwise.
        public var maxCapacityBuffer: Swift.Int?
        /// This structure includes the metrics and target utilization to use for predictive scaling. This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.
        /// This member is required.
        public var metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]?
        /// The predictive scaling mode. Defaults to ForecastOnly if not specified.
        public var mode: AutoScalingClientTypes.PredictiveScalingMode?
        /// The amount of time, in seconds, by which the instance launch time can be advanced. For example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The intention is to give resources time to be provisioned. It can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.
        public var schedulingBufferTime: Swift.Int?

        public init (
            maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior? = nil,
            maxCapacityBuffer: Swift.Int? = nil,
            metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]? = nil,
            mode: AutoScalingClientTypes.PredictiveScalingMode? = nil,
            schedulingBufferTime: Swift.Int? = nil
        )
        {
            self.maxCapacityBreachBehavior = maxCapacityBreachBehavior
            self.maxCapacityBuffer = maxCapacityBuffer
            self.metricSpecifications = metricSpecifications
            self.mode = mode
            self.schedulingBufferTime = schedulingBufferTime
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDataQueries = "MetricDataQueries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricDataQueries = metricDataQueries {
            if !metricDataQueries.isEmpty {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                    try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                try metricDataQueriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[AutoScalingClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [AutoScalingClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Describes a customized capacity metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedCapacityMetric: Swift.Equatable {
        /// One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init (
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDataQueries = "MetricDataQueries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricDataQueries = metricDataQueries {
            if !metricDataQueries.isEmpty {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                    try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                try metricDataQueriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[AutoScalingClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [AutoScalingClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Describes a custom load metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedLoadMetric: Swift.Equatable {
        /// One or more metric data queries to provide the data points for a load metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init (
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDataQueries = "MetricDataQueries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricDataQueries = metricDataQueries {
            if !metricDataQueries.isEmpty {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                    try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                try metricDataQueriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[AutoScalingClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [AutoScalingClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
    }
}

extension AutoScalingClientTypes {
    /// Describes a custom scaling metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedScalingMetric: Swift.Equatable {
        /// One or more metric data queries to provide the data points for a scaling metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init (
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredictiveScalingMaxCapacityBreachBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case honormaxcapacity
        case increasemaxcapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMaxCapacityBreachBehavior] {
            return [
                .honormaxcapacity,
                .increasemaxcapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .honormaxcapacity: return "HonorMaxCapacity"
            case .increasemaxcapacity: return "IncreaseMaxCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMaxCapacityBreachBehavior(rawValue: rawValue) ?? PredictiveScalingMaxCapacityBreachBehavior.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingMetricSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedCapacityMetricSpecification = "CustomizedCapacityMetricSpecification"
        case customizedLoadMetricSpecification = "CustomizedLoadMetricSpecification"
        case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
        case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
        case predefinedMetricPairSpecification = "PredefinedMetricPairSpecification"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customizedCapacityMetricSpecification = customizedCapacityMetricSpecification {
            try container.encode(customizedCapacityMetricSpecification, forKey: ClientRuntime.Key("CustomizedCapacityMetricSpecification"))
        }
        if let customizedLoadMetricSpecification = customizedLoadMetricSpecification {
            try container.encode(customizedLoadMetricSpecification, forKey: ClientRuntime.Key("CustomizedLoadMetricSpecification"))
        }
        if let customizedScalingMetricSpecification = customizedScalingMetricSpecification {
            try container.encode(customizedScalingMetricSpecification, forKey: ClientRuntime.Key("CustomizedScalingMetricSpecification"))
        }
        if let predefinedLoadMetricSpecification = predefinedLoadMetricSpecification {
            try container.encode(predefinedLoadMetricSpecification, forKey: ClientRuntime.Key("PredefinedLoadMetricSpecification"))
        }
        if let predefinedMetricPairSpecification = predefinedMetricPairSpecification {
            try container.encode(predefinedMetricPairSpecification, forKey: ClientRuntime.Key("PredefinedMetricPairSpecification"))
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try container.encode(predefinedScalingMetricSpecification, forKey: ClientRuntime.Key("PredefinedScalingMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let predefinedMetricPairSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair.self, forKey: .predefinedMetricPairSpecification)
        predefinedMetricPairSpecification = predefinedMetricPairSpecificationDecoded
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let predefinedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric.self, forKey: .predefinedLoadMetricSpecification)
        predefinedLoadMetricSpecification = predefinedLoadMetricSpecificationDecoded
        let customizedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric.self, forKey: .customizedScalingMetricSpecification)
        customizedScalingMetricSpecification = customizedScalingMetricSpecificationDecoded
        let customizedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric.self, forKey: .customizedLoadMetricSpecification)
        customizedLoadMetricSpecification = customizedLoadMetricSpecificationDecoded
        let customizedCapacityMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric.self, forKey: .customizedCapacityMetricSpecification)
        customizedCapacityMetricSpecification = customizedCapacityMetricSpecificationDecoded
    }
}

extension AutoScalingClientTypes {
    /// This structure specifies the metrics and target utilization settings for a predictive scaling policy. You must specify either a metric pair, or a load metric and a scaling metric individually. Specifying a metric pair instead of individual metrics provides a simpler way to configure metrics for a scaling policy. You choose the metric pair, and the policy automatically knows the correct sum and average statistics to use for the load metric and the scaling metric. Example
    ///
    /// * You create a predictive scaling policy and specify ALBRequestCount as the value for the metric pair and 1000.0 as the target value. For this type of metric, you must provide the metric dimension for the corresponding target group, so you also provide a resource label for the Application Load Balancer target group that is attached to your Auto Scaling group.
    ///
    /// * The number of requests the target group receives per minute provides the load metric, and the request count averaged between the members of the target group provides the scaling metric. In CloudWatch, this refers to the RequestCount and RequestCountPerTarget metrics, respectively.
    ///
    /// * For optimal use of predictive scaling, you adhere to the best practice of using a dynamic scaling policy to automatically scale between the minimum capacity and maximum capacity in response to real-time changes in resource utilization.
    ///
    /// * Amazon EC2 Auto Scaling consumes data points for the load metric over the last 14 days and creates an hourly load forecast for predictive scaling. (A minimum of 24 hours of data is required.)
    ///
    /// * After creating the load forecast, Amazon EC2 Auto Scaling determines when to reduce or increase the capacity of your Auto Scaling group in each hour of the forecast period so that the average number of requests received by each instance is as close to 1000 requests per minute as possible at all times.
    ///
    ///
    /// For information about using custom metrics with predictive scaling, see [Advanced predictive scaling policy configurations using custom metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct PredictiveScalingMetricSpecification: Swift.Equatable {
        /// The customized capacity metric specification.
        public var customizedCapacityMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric?
        /// The customized load metric specification.
        public var customizedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric?
        /// The customized scaling metric specification.
        public var customizedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric?
        /// The predefined load metric specification.
        public var predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric?
        /// The predefined metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
        public var predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair?
        /// The predefined scaling metric specification.
        public var predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric?
        /// Specifies the target utilization. Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            customizedCapacityMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric? = nil,
            customizedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric? = nil,
            customizedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric? = nil,
            predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric? = nil,
            predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair? = nil,
            predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedCapacityMetricSpecification = customizedCapacityMetricSpecification
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predefinedMetricPairSpecification = predefinedMetricPairSpecification
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.targetValue = targetValue
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredictiveScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forecastandscale
        case forecastonly
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMode] {
            return [
                .forecastandscale,
                .forecastonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forecastandscale: return "ForecastAndScale"
            case .forecastonly: return "ForecastOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMode(rawValue: rawValue) ?? PredictiveScalingMode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedLoadMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a load metric for a predictive scaling policy. When returned in the output of DescribePolicies, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.
    public struct PredictiveScalingPredefinedLoadMetric: Swift.Equatable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedMetricPairType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes {
    /// Represents a metric pair for a predictive scaling policy.
    public struct PredictiveScalingPredefinedMetricPair: Swift.Equatable {
        /// Indicates which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is ASGCPUUtilization, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the total and average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedScalingMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a scaling metric for a predictive scaling policy. When returned in the output of DescribePolicies, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.
    public struct PredictiveScalingPredefinedScalingMetric: Swift.Equatable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.ProcessType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processName = "ProcessName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: ClientRuntime.Key("ProcessName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processName)
        processName = processNameDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a process type. For more information, see [Scaling processes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types) in the Amazon EC2 Auto Scaling User Guide.
    public struct ProcessType: Swift.Equatable {
        /// One of the following processes:
        ///
        /// * Launch
        ///
        /// * Terminate
        ///
        /// * AddToLoadBalancer
        ///
        /// * AlarmNotification
        ///
        /// * AZRebalance
        ///
        /// * HealthCheck
        ///
        /// * InstanceRefresh
        ///
        /// * ReplaceUnhealthy
        ///
        /// * ScheduledActions
        /// This member is required.
        public var processName: Swift.String?

        public init (
            processName: Swift.String? = nil
        )
        {
            self.processName = processName
        }
    }

}

extension PutLifecycleHookInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        try container.encode("PutLifecycleHook", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutLifecycleHookInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLifecycleHookInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ABANDON. Valid values: CONTINUE | ABANDON
    public var defaultResult: Swift.String?
    /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour).
    public var heartbeatTimeout: Swift.Int?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?
    /// The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
    ///
    /// * To create a lifecycle hook for scale-out events, specify autoscaling:EC2_INSTANCE_LAUNCHING.
    ///
    /// * To create a lifecycle hook for scale-in events, specify autoscaling:EC2_INSTANCE_TERMINATING.
    ///
    ///
    /// Required for new lifecycle hooks, but optional when updating existing hooks.
    public var lifecycleTransition: Swift.String?
    /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
    public var notificationMetadata: Swift.String?
    /// The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: "Event": "autoscaling:TEST_NOTIFICATION".
    public var notificationTargetARN: Swift.String?
    /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.
    public var roleARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        defaultResult: Swift.String? = nil,
        heartbeatTimeout: Swift.Int? = nil,
        lifecycleHookName: Swift.String? = nil,
        lifecycleTransition: Swift.String? = nil,
        notificationMetadata: Swift.String? = nil,
        notificationTargetARN: Swift.String? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

struct PutLifecycleHookInputBody: Swift.Equatable {
    let lifecycleHookName: Swift.String?
    let autoScalingGroupName: Swift.String?
    let lifecycleTransition: Swift.String?
    let roleARN: Swift.String?
    let notificationTargetARN: Swift.String?
    let notificationMetadata: Swift.String?
    let heartbeatTimeout: Swift.Int?
    let defaultResult: Swift.String?
}

extension PutLifecycleHookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
    }
}

extension PutLifecycleHookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutLifecycleHookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLifecycleHookOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecycleHookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutLifecycleHookOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutNotificationConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let notificationTypes = notificationTypes {
            if !notificationTypes.isEmpty {
                var notificationTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationTypes"))
                for (index0, xmlstringmaxlen2550) in notificationTypes.enumerated() {
                    try notificationTypesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationTypes"))
                try notificationTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
        try container.encode("PutNotificationConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutNotificationConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutNotificationConfigurationInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the [DescribeAutoScalingNotificationTypes] API.
    /// This member is required.
    public var notificationTypes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        notificationTypes: [Swift.String]? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.notificationTypes = notificationTypes
        self.topicARN = topicARN
    }
}

struct PutNotificationConfigurationInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let topicARN: Swift.String?
    let notificationTypes: [Swift.String]?
}

extension PutNotificationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case notificationTypes = "NotificationTypes"
        case topicARN = "TopicARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
        if containerValues.contains(.notificationTypes) {
            struct KeyVal0{struct member{}}
            let notificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationTypes)
            if let notificationTypesWrappedContainer = notificationTypesWrappedContainer {
                let notificationTypesContainer = try notificationTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationTypesBuffer:[Swift.String]? = nil
                if let notificationTypesContainer = notificationTypesContainer {
                    notificationTypesBuffer = [Swift.String]()
                    for stringContainer0 in notificationTypesContainer {
                        notificationTypesBuffer?.append(stringContainer0)
                    }
                }
                notificationTypes = notificationTypesBuffer
            } else {
                notificationTypes = []
            }
        } else {
            notificationTypes = nil
        }
    }
}

extension PutNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutNotificationConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutScalingPolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: ClientRuntime.Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: ClientRuntime.Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: ClientRuntime.Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: ClientRuntime.Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: ClientRuntime.Key("MinAdjustmentStep"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: ClientRuntime.Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: ClientRuntime.Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            if !stepAdjustments.isEmpty {
                var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
                for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                    try stepAdjustmentsContainer.encode(stepadjustment0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
                try stepAdjustmentsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: ClientRuntime.Key("TargetTrackingConfiguration"))
        }
        try container.encode("PutScalingPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutScalingPolicyInput: Swift.Equatable {
    /// Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. Required if the policy type is StepScaling or SimpleScaling. For more information, see [Scaling adjustment types](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment) in the Amazon EC2 Auto Scaling User Guide.
    public var adjustmentType: Swift.String?
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown. Valid only if the policy type is SimpleScaling. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the Amazon EC2 Auto Scaling User Guide. Default: None
    public var cooldown: Swift.Int?
    /// Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see [Disabling a scaling policy for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html) in the Amazon EC2 Auto Scaling User Guide.
    public var enabled: Swift.Bool?
    /// Not needed if the default instance warmup is defined for the group. The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup. Valid only if the policy type is TargetTrackingScaling or StepScaling. The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then EstimatedInstanceWarmup falls back to the value of default cooldown.
    public var estimatedInstanceWarmup: Swift.Int?
    /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
    public var metricAggregationType: Swift.String?
    /// The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances. Valid only if the policy type is StepScaling or SimpleScaling. For more information, see [Scaling adjustment types](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment) in the Amazon EC2 Auto Scaling User Guide. Some Auto Scaling groups use instance weights. In this case, set the MinAdjustmentMagnitude to a value that is at least as large as your largest instance weight.
    public var minAdjustmentMagnitude: Swift.Int?
    /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
    @available(*, deprecated)
    public var minAdjustmentStep: Swift.Int?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// One of the following policy types:
    ///
    /// * TargetTrackingScaling
    ///
    /// * StepScaling
    ///
    /// * SimpleScaling (default)
    ///
    /// * PredictiveScaling
    public var policyType: Swift.String?
    /// A predictive scaling policy. Provides support for predefined and custom metrics. Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count. For more information, see [PredictiveScalingConfiguration](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html) in the Amazon EC2 Auto Scaling API Reference. Required if the policy type is PredictiveScaling.
    public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
    /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value. Required if the policy type is SimpleScaling. (Not used with any other policy type.)
    public var scalingAdjustment: Swift.Int?
    /// A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is StepScaling. (Not used with any other policy type.)
    public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
    /// A target tracking scaling policy. Provides support for predefined or custom metrics. The following predefined metrics are available:
    ///
    /// * ASGAverageCPUUtilization
    ///
    /// * ASGAverageNetworkIn
    ///
    /// * ASGAverageNetworkOut
    ///
    /// * ALBRequestCountPerTarget
    ///
    ///
    /// If you specify ALBRequestCountPerTarget for the metric, you must specify the ResourceLabel property with the PredefinedMetricSpecification. For more information, see [TargetTrackingConfiguration](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html) in the Amazon EC2 Auto Scaling API Reference. Required if the policy type is TargetTrackingScaling.
    public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

    public init (
        adjustmentType: Swift.String? = nil,
        autoScalingGroupName: Swift.String? = nil,
        cooldown: Swift.Int? = nil,
        enabled: Swift.Bool? = nil,
        estimatedInstanceWarmup: Swift.Int? = nil,
        metricAggregationType: Swift.String? = nil,
        minAdjustmentMagnitude: Swift.Int? = nil,
        minAdjustmentStep: Swift.Int? = nil,
        policyName: Swift.String? = nil,
        policyType: Swift.String? = nil,
        predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Swift.Int? = nil,
        stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
        targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

struct PutScalingPolicyInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyName: Swift.String?
    let policyType: Swift.String?
    let adjustmentType: Swift.String?
    let minAdjustmentStep: Swift.Int?
    let minAdjustmentMagnitude: Swift.Int?
    let scalingAdjustment: Swift.Int?
    let cooldown: Swift.Int?
    let metricAggregationType: Swift.String?
    let stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
    let estimatedInstanceWarmup: Swift.Int?
    let targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?
    let enabled: Swift.Bool?
    let predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
}

extension PutScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case autoScalingGroupName = "AutoScalingGroupName"
        case cooldown = "Cooldown"
        case enabled = "Enabled"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case minAdjustmentStep = "MinAdjustmentStep"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case predictiveScalingConfiguration = "PredictiveScalingConfiguration"
        case scalingAdjustment = "ScalingAdjustment"
        case stepAdjustments = "StepAdjustments"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let minAdjustmentStepDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentStep)
        minAdjustmentStep = minAdjustmentStepDecoded
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
        if containerValues.contains(.stepAdjustments) {
            struct KeyVal0{struct member{}}
            let stepAdjustmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stepAdjustments)
            if let stepAdjustmentsWrappedContainer = stepAdjustmentsWrappedContainer {
                let stepAdjustmentsContainer = try stepAdjustmentsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.StepAdjustment].self, forKey: .member)
                var stepAdjustmentsBuffer:[AutoScalingClientTypes.StepAdjustment]? = nil
                if let stepAdjustmentsContainer = stepAdjustmentsContainer {
                    stepAdjustmentsBuffer = [AutoScalingClientTypes.StepAdjustment]()
                    for structureContainer0 in stepAdjustmentsContainer {
                        stepAdjustmentsBuffer?.append(structureContainer0)
                    }
                }
                stepAdjustments = stepAdjustmentsBuffer
            } else {
                stepAdjustments = []
            }
        } else {
            stepAdjustments = nil
        }
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let predictiveScalingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingConfiguration.self, forKey: .predictiveScalingConfiguration)
        predictiveScalingConfiguration = predictiveScalingConfigurationDecoded
    }
}

extension PutScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarms = output.alarms
            self.policyARN = output.policyARN
        } else {
            self.alarms = nil
            self.policyARN = nil
        }
    }
}

/// Contains the output of PutScalingPolicy.
public struct PutScalingPolicyOutputResponse: Swift.Equatable {
    /// The CloudWatch alarms created for the target tracking scaling policy.
    public var alarms: [AutoScalingClientTypes.Alarm]?
    /// The Amazon Resource Name (ARN) of the policy.
    public var policyARN: Swift.String?

    public init (
        alarms: [AutoScalingClientTypes.Alarm]? = nil,
        policyARN: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.policyARN = policyARN
    }
}

struct PutScalingPolicyOutputResponseBody: Swift.Equatable {
    let policyARN: Swift.String?
    let alarms: [AutoScalingClientTypes.Alarm]?
}

extension PutScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
        case policyARN = "PolicyARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutScalingPolicyResult"))
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Alarm].self, forKey: .member)
                var alarmsBuffer:[AutoScalingClientTypes.Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [AutoScalingClientTypes.Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
    }
}

extension PutScheduledUpdateGroupActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let time = time {
            try container.encodeTimestamp(time, format: .dateTime, forKey: ClientRuntime.Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
        try container.encode("PutScheduledUpdateGroupAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutScheduledUpdateGroupActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutScheduledUpdateGroupActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. You must specify at least one of the following properties: MaxSize, MinSize, or DesiredCapacity.
    public var desiredCapacity: Swift.Int?
    /// The date and time for the recurring schedule to end, in UTC. For example, "2021-06-01T00:00:00Z".
    public var endTime: ClientRuntime.Date?
    /// The maximum size of the Auto Scaling group.
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see [Crontab](http://crontab.org). When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops. Cron expressions use Universal Coordinated Time (UTC) by default.
    public var recurrence: Swift.String?
    /// The name of this scaling action.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2021-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.
    public var startTime: ClientRuntime.Date?
    /// This property is no longer used.
    public var time: ClientRuntime.Date?
    /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For more information, see [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
    public var timeZone: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        recurrence: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        time: ClientRuntime.Date? = nil,
        timeZone: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.time = time
        self.timeZone = timeZone
    }
}

struct PutScheduledUpdateGroupActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionName: Swift.String?
    let time: ClientRuntime.Date?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let recurrence: Swift.String?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let desiredCapacity: Swift.Int?
    let timeZone: Swift.String?
}

extension PutScheduledUpdateGroupActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let timeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .time)
        time = timeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension PutScheduledUpdateGroupActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScheduledUpdateGroupActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutScheduledUpdateGroupActionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScheduledUpdateGroupActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutScheduledUpdateGroupActionOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutWarmPoolInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceReusePolicy = instanceReusePolicy {
            try container.encode(instanceReusePolicy, forKey: ClientRuntime.Key("InstanceReusePolicy"))
        }
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: ClientRuntime.Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: ClientRuntime.Key("PoolState"))
        }
        try container.encode("PutWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutWarmPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
    public var instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy?
    /// Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity. If a value for MaxGroupPreparedCapacity is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for MaxGroupPreparedCapacity, Amazon EC2 Auto Scaling uses the difference between the MaxGroupPreparedCapacity and the desired capacity instead. The size of the warm pool is dynamic. Only when MaxGroupPreparedCapacity and MinSize are set to the same value does the warm pool have an absolute size. If the desired capacity of the Auto Scaling group is higher than the MaxGroupPreparedCapacity, the capacity of the warm pool is 0, unless you specify a value for MinSize. To remove a value that you previously set, include the property but specify -1 for the value.
    public var maxGroupPreparedCapacity: Swift.Int?
    /// Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
    public var minSize: Swift.Int?
    /// Sets the instance state to transition to after the lifecycle actions are complete. Default is Stopped.
    public var poolState: AutoScalingClientTypes.WarmPoolState?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy? = nil,
        maxGroupPreparedCapacity: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        poolState: AutoScalingClientTypes.WarmPoolState? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceReusePolicy = instanceReusePolicy
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
    }
}

struct PutWarmPoolInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let maxGroupPreparedCapacity: Swift.Int?
    let minSize: Swift.Int?
    let poolState: AutoScalingClientTypes.WarmPoolState?
    let instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy?
}

extension PutWarmPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceReusePolicy = "InstanceReusePolicy"
        case maxGroupPreparedCapacity = "MaxGroupPreparedCapacity"
        case minSize = "MinSize"
        case poolState = "PoolState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let maxGroupPreparedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxGroupPreparedCapacity)
        maxGroupPreparedCapacity = maxGroupPreparedCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let poolStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolState.self, forKey: .poolState)
        poolState = poolStateDecoded
        let instanceReusePolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceReusePolicy.self, forKey: .instanceReusePolicy)
        instanceReusePolicy = instanceReusePolicyDecoded
    }
}

extension PutWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutWarmPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension RecordLifecycleActionHeartbeatInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: ClientRuntime.Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("RecordLifecycleActionHeartbeat", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RecordLifecycleActionHeartbeatInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RecordLifecycleActionHeartbeatInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

struct RecordLifecycleActionHeartbeatInputBody: Swift.Equatable {
    let lifecycleHookName: Swift.String?
    let autoScalingGroupName: Swift.String?
    let lifecycleActionToken: Swift.String?
    let instanceId: Swift.String?
}

extension RecordLifecycleActionHeartbeatInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceId = "InstanceId"
        case lifecycleActionToken = "LifecycleActionToken"
        case lifecycleHookName = "LifecycleHookName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleActionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleActionToken)
        lifecycleActionToken = lifecycleActionTokenDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension RecordLifecycleActionHeartbeatOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RecordLifecycleActionHeartbeatOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RecordLifecycleActionHeartbeatOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordLifecycleActionHeartbeatOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RecordLifecycleActionHeartbeatOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.RefreshPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkpointDelay = "CheckpointDelay"
        case checkpointPercentages = "CheckpointPercentages"
        case instanceWarmup = "InstanceWarmup"
        case minHealthyPercentage = "MinHealthyPercentage"
        case skipMatching = "SkipMatching"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let checkpointDelay = checkpointDelay {
            try container.encode(checkpointDelay, forKey: ClientRuntime.Key("CheckpointDelay"))
        }
        if let checkpointPercentages = checkpointPercentages {
            if !checkpointPercentages.isEmpty {
                var checkpointPercentagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CheckpointPercentages"))
                for (index0, nonzerointpercent0) in checkpointPercentages.enumerated() {
                    try checkpointPercentagesContainer.encode(nonzerointpercent0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var checkpointPercentagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CheckpointPercentages"))
                try checkpointPercentagesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let instanceWarmup = instanceWarmup {
            try container.encode(instanceWarmup, forKey: ClientRuntime.Key("InstanceWarmup"))
        }
        if let minHealthyPercentage = minHealthyPercentage {
            try container.encode(minHealthyPercentage, forKey: ClientRuntime.Key("MinHealthyPercentage"))
        }
        if let skipMatching = skipMatching {
            try container.encode(skipMatching, forKey: ClientRuntime.Key("SkipMatching"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minHealthyPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minHealthyPercentage)
        minHealthyPercentage = minHealthyPercentageDecoded
        let instanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceWarmup)
        instanceWarmup = instanceWarmupDecoded
        if containerValues.contains(.checkpointPercentages) {
            struct KeyVal0{struct member{}}
            let checkpointPercentagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .checkpointPercentages)
            if let checkpointPercentagesWrappedContainer = checkpointPercentagesWrappedContainer {
                let checkpointPercentagesContainer = try checkpointPercentagesWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var checkpointPercentagesBuffer:[Swift.Int]? = nil
                if let checkpointPercentagesContainer = checkpointPercentagesContainer {
                    checkpointPercentagesBuffer = [Swift.Int]()
                    for integerContainer0 in checkpointPercentagesContainer {
                        checkpointPercentagesBuffer?.append(integerContainer0)
                    }
                }
                checkpointPercentages = checkpointPercentagesBuffer
            } else {
                checkpointPercentages = []
            }
        } else {
            checkpointPercentages = nil
        }
        let checkpointDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .checkpointDelay)
        checkpointDelay = checkpointDelayDecoded
        let skipMatchingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipMatching)
        skipMatching = skipMatchingDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the preferences for an instance refresh.
    public struct RefreshPreferences: Swift.Equatable {
        /// The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for CheckpointPercentages. If you specify a value for CheckpointPercentages and not for CheckpointDelay, the CheckpointDelay defaults to 3600 (1 hour).
        public var checkpointDelay: Swift.Int?
        /// Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be 100. For usage examples, see [Adding checkpoints to an instance refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html) in the Amazon EC2 Auto Scaling User Guide.
        public var checkpointPercentages: [Swift.Int]?
        /// Not needed if the default instance warmup is defined for the group. The duration of the instance warmup, in seconds. The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then InstanceWarmup falls back to the value of the health check grace period.
        public var instanceWarmup: Swift.Int?
        /// The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is 90. Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time.
        public var minHealthyPercentage: Swift.Int?
        /// A boolean value that indicates whether skip matching is enabled. If true, then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same configuration that is already set on the group. The default is false.
        public var skipMatching: Swift.Bool?

        public init (
            checkpointDelay: Swift.Int? = nil,
            checkpointPercentages: [Swift.Int]? = nil,
            instanceWarmup: Swift.Int? = nil,
            minHealthyPercentage: Swift.Int? = nil,
            skipMatching: Swift.Bool? = nil
        )
        {
            self.checkpointDelay = checkpointDelay
            self.checkpointPercentages = checkpointPercentages
            self.instanceWarmup = instanceWarmup
            self.minHealthyPercentage = minHealthyPercentage
            self.skipMatching = skipMatching
        }
    }

}

extension AutoScalingClientTypes {
    public enum RefreshStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rolling
        case sdkUnknown(Swift.String)

        public static var allCases: [RefreshStrategy] {
            return [
                .rolling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rolling: return "Rolling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RefreshStrategy(rawValue: rawValue) ?? RefreshStrategy.sdkUnknown(rawValue)
        }
    }
}

extension ResourceContentionFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceContentionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group, instance, or load balancer).
public struct ResourceContentionFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceContentionFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceContentionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceInUseFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation can't be performed because the resource is in use.
public struct ResourceInUseFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResumeProcessesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            if !scalingProcesses.isEmpty {
                var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
                for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                    try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
                try scalingProcessesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ResumeProcesses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResumeProcessesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResumeProcessesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    /// * Launch
    ///
    /// * Terminate
    ///
    /// * AddToLoadBalancer
    ///
    /// * AlarmNotification
    ///
    /// * AZRebalance
    ///
    /// * HealthCheck
    ///
    /// * InstanceRefresh
    ///
    /// * ReplaceUnhealthy
    ///
    /// * ScheduledActions
    ///
    ///
    /// If you omit this property, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

struct ResumeProcessesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scalingProcesses: [Swift.String]?
}

extension ResumeProcessesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scalingProcesses = "ScalingProcesses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scalingProcesses) {
            struct KeyVal0{struct member{}}
            let scalingProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingProcesses)
            if let scalingProcessesWrappedContainer = scalingProcessesWrappedContainer {
                let scalingProcessesContainer = try scalingProcessesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scalingProcessesBuffer:[Swift.String]? = nil
                if let scalingProcessesContainer = scalingProcessesContainer {
                    scalingProcessesBuffer = [Swift.String]()
                    for stringContainer0 in scalingProcessesContainer {
                        scalingProcessesBuffer?.append(stringContainer0)
                    }
                }
                scalingProcesses = scalingProcessesBuffer
            } else {
                scalingProcesses = []
            }
        } else {
            scalingProcesses = nil
        }
    }
}

extension ResumeProcessesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResumeProcessesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ResumeProcessesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeProcessesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResumeProcessesOutputResponse: Swift.Equatable {

    public init () { }
}

extension ScalingActivityInProgressFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScalingActivityInProgressFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation can't be performed because there are scaling activities in progress.
public struct ScalingActivityInProgressFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ScalingActivityInProgressFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScalingActivityInProgressFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes {
    public enum ScalingActivityStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case midlifecycleaction
        case pendingspotbidplacement
        case preinservice
        case successful
        case waitingforelbconnectiondraining
        case waitingforinstanceid
        case waitingforinstancewarmup
        case waitingforspotinstanceid
        case waitingforspotinstancerequestid
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingActivityStatusCode] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .midlifecycleaction,
                .pendingspotbidplacement,
                .preinservice,
                .successful,
                .waitingforelbconnectiondraining,
                .waitingforinstanceid,
                .waitingforinstancewarmup,
                .waitingforspotinstanceid,
                .waitingforspotinstancerequestid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .midlifecycleaction: return "MidLifecycleAction"
            case .pendingspotbidplacement: return "PendingSpotBidPlacement"
            case .preinservice: return "PreInService"
            case .successful: return "Successful"
            case .waitingforelbconnectiondraining: return "WaitingForELBConnectionDraining"
            case .waitingforinstanceid: return "WaitingForInstanceId"
            case .waitingforinstancewarmup: return "WaitingForInstanceWarmup"
            case .waitingforspotinstanceid: return "WaitingForSpotInstanceId"
            case .waitingforspotinstancerequestid: return "WaitingForSpotInstanceRequestId"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingActivityStatusCode(rawValue: rawValue) ?? ScalingActivityStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.ScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case alarms = "Alarms"
        case autoScalingGroupName = "AutoScalingGroupName"
        case cooldown = "Cooldown"
        case enabled = "Enabled"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case minAdjustmentStep = "MinAdjustmentStep"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case predictiveScalingConfiguration = "PredictiveScalingConfiguration"
        case scalingAdjustment = "ScalingAdjustment"
        case stepAdjustments = "StepAdjustments"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
        if let alarms = alarms {
            if !alarms.isEmpty {
                var alarmsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Alarms"))
                for (index0, alarm0) in alarms.enumerated() {
                    try alarmsContainer.encode(alarm0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Alarms"))
                try alarmsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: ClientRuntime.Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: ClientRuntime.Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: ClientRuntime.Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: ClientRuntime.Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: ClientRuntime.Key("MinAdjustmentStep"))
        }
        if let policyARN = policyARN {
            try container.encode(policyARN, forKey: ClientRuntime.Key("PolicyARN"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: ClientRuntime.Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: ClientRuntime.Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            if !stepAdjustments.isEmpty {
                var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
                for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                    try stepAdjustmentsContainer.encode(stepadjustment0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
                try stepAdjustmentsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: ClientRuntime.Key("TargetTrackingConfiguration"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let minAdjustmentStepDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentStep)
        minAdjustmentStep = minAdjustmentStepDecoded
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        if containerValues.contains(.stepAdjustments) {
            struct KeyVal0{struct member{}}
            let stepAdjustmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stepAdjustments)
            if let stepAdjustmentsWrappedContainer = stepAdjustmentsWrappedContainer {
                let stepAdjustmentsContainer = try stepAdjustmentsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.StepAdjustment].self, forKey: .member)
                var stepAdjustmentsBuffer:[AutoScalingClientTypes.StepAdjustment]? = nil
                if let stepAdjustmentsContainer = stepAdjustmentsContainer {
                    stepAdjustmentsBuffer = [AutoScalingClientTypes.StepAdjustment]()
                    for structureContainer0 in stepAdjustmentsContainer {
                        stepAdjustmentsBuffer?.append(structureContainer0)
                    }
                }
                stepAdjustments = stepAdjustmentsBuffer
            } else {
                stepAdjustments = []
            }
        } else {
            stepAdjustments = nil
        }
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Alarm].self, forKey: .member)
                var alarmsBuffer:[AutoScalingClientTypes.Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [AutoScalingClientTypes.Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let predictiveScalingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingConfiguration.self, forKey: .predictiveScalingConfiguration)
        predictiveScalingConfiguration = predictiveScalingConfigurationDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a scaling policy.
    public struct ScalingPolicy: Swift.Equatable {
        /// Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?
        /// The CloudWatch alarms related to the policy.
        public var alarms: [AutoScalingClientTypes.Alarm]?
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The duration of the policy's cooldown period, in seconds.
        public var cooldown: Swift.Int?
        /// Indicates whether the policy is enabled (true) or disabled (false).
        public var enabled: Swift.Bool?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public var estimatedInstanceWarmup: Swift.Int?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average.
        public var metricAggregationType: Swift.String?
        /// The minimum value to scale by when the adjustment type is PercentChangeInCapacity.
        public var minAdjustmentMagnitude: Swift.Int?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        @available(*, deprecated)
        public var minAdjustmentStep: Swift.Int?
        /// The Amazon Resource Name (ARN) of the policy.
        public var policyARN: Swift.String?
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// One of the following policy types:
        ///
        /// * TargetTrackingScaling
        ///
        /// * StepScaling
        ///
        /// * SimpleScaling (default)
        ///
        /// * PredictiveScaling
        ///
        ///
        /// For more information, see [Target tracking scaling policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html) and [Step and simple scaling policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html) in the Amazon EC2 Auto Scaling User Guide.
        public var policyType: Swift.String?
        /// A predictive scaling policy.
        public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public var scalingAdjustment: Swift.Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
        /// A target tracking scaling policy.
        public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

        public init (
            adjustmentType: Swift.String? = nil,
            alarms: [AutoScalingClientTypes.Alarm]? = nil,
            autoScalingGroupName: Swift.String? = nil,
            cooldown: Swift.Int? = nil,
            enabled: Swift.Bool? = nil,
            estimatedInstanceWarmup: Swift.Int? = nil,
            metricAggregationType: Swift.String? = nil,
            minAdjustmentMagnitude: Swift.Int? = nil,
            minAdjustmentStep: Swift.Int? = nil,
            policyARN: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: Swift.String? = nil,
            predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
            scalingAdjustment: Swift.Int? = nil,
            stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
            targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.alarms = alarms
            self.autoScalingGroupName = autoScalingGroupName
            self.cooldown = cooldown
            self.enabled = enabled
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.minAdjustmentStep = minAdjustmentStep
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.predictiveScalingConfiguration = predictiveScalingConfiguration
            self.scalingAdjustment = scalingAdjustment
            self.stepAdjustments = stepAdjustments
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }

}

extension AutoScalingClientTypes.ScheduledUpdateGroupAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionARN = scheduledActionARN {
            try container.encode(scheduledActionARN, forKey: ClientRuntime.Key("ScheduledActionARN"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let time = time {
            try container.encodeTimestamp(time, format: .dateTime, forKey: ClientRuntime.Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let timeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .time)
        time = timeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a scheduled scaling action.
    public struct ScheduledUpdateGroupAction: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time in UTC for the recurring schedule to end. For example, "2019-06-01T00:00:00Z".
        public var endTime: ClientRuntime.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public var recurrence: Swift.String?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public var scheduledActionARN: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The date and time in UTC for this action to start. For example, "2019-06-01T00:00:00Z".
        public var startTime: ClientRuntime.Date?
        /// This property is no longer used.
        public var time: ClientRuntime.Date?
        /// The time zone for the cron expression.
        public var timeZone: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            desiredCapacity: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionARN: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            time: ClientRuntime.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.time = time
            self.timeZone = timeZone
        }
    }

}

extension AutoScalingClientTypes.ScheduledUpdateGroupActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes information used for one or more scheduled scaling action updates in a [BatchPutScheduledUpdateGroupAction] operation.
    public struct ScheduledUpdateGroupActionRequest: Swift.Equatable {
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time for the recurring schedule to end, in UTC.
        public var endTime: ClientRuntime.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see [Crontab](http://crontab.org). When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops. Cron expressions use Universal Coordinated Time (UTC) by default.
        public var recurrence: Swift.String?
        /// The name of the scaling action.
        /// This member is required.
        public var scheduledActionName: Swift.String?
        /// The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2019-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error message.
        public var startTime: ClientRuntime.Date?
        /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For more information, see [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
        public var timeZone: Swift.String?

        public init (
            desiredCapacity: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.timeZone = timeZone
        }
    }

}

extension ServiceLinkedRoleFailure {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceLinkedRoleFailureBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service-linked role is not yet ready for use.
public struct ServiceLinkedRoleFailure: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceLinkedRoleFailureBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceLinkedRoleFailureBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SetDesiredCapacityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: ClientRuntime.Key("HonorCooldown"))
        }
        try container.encode("SetDesiredCapacity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetDesiredCapacityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetDesiredCapacityInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain.
    /// This member is required.
    public var desiredCapacity: Swift.Int?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
    public var honorCooldown: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        honorCooldown: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.honorCooldown = honorCooldown
    }
}

struct SetDesiredCapacityInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let desiredCapacity: Swift.Int?
    let honorCooldown: Swift.Bool?
}

extension SetDesiredCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case honorCooldown = "HonorCooldown"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let honorCooldownDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .honorCooldown)
        honorCooldown = honorCooldownDecoded
    }
}

extension SetDesiredCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetDesiredCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetDesiredCapacityOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDesiredCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetDesiredCapacityOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetInstanceHealthInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let shouldRespectGracePeriod = shouldRespectGracePeriod {
            try container.encode(shouldRespectGracePeriod, forKey: ClientRuntime.Key("ShouldRespectGracePeriod"))
        }
        try container.encode("SetInstanceHealth", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetInstanceHealthInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetInstanceHealthInput: Swift.Equatable {
    /// The health status of the instance. Set to Healthy to have the instance remain in service. Set to Unhealthy to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
    /// This member is required.
    public var healthStatus: Swift.String?
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call respects the grace period. Set this to False, to have the call not respect the grace period associated with the group. For more information about the health check grace period, see [CreateAutoScalingGroup](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html) in the Amazon EC2 Auto Scaling API Reference.
    public var shouldRespectGracePeriod: Swift.Bool?

    public init (
        healthStatus: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        shouldRespectGracePeriod: Swift.Bool? = nil
    )
    {
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.shouldRespectGracePeriod = shouldRespectGracePeriod
    }
}

struct SetInstanceHealthInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let healthStatus: Swift.String?
    let shouldRespectGracePeriod: Swift.Bool?
}

extension SetInstanceHealthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case shouldRespectGracePeriod = "ShouldRespectGracePeriod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let shouldRespectGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shouldRespectGracePeriod)
        shouldRespectGracePeriod = shouldRespectGracePeriodDecoded
    }
}

extension SetInstanceHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetInstanceHealthOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceHealthOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetInstanceProtectionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                    try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        try container.encode("SetInstanceProtection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetInstanceProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetInstanceProtectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance IDs. You can specify up to 50 instances.
    /// This member is required.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
    /// This member is required.
    public var protectedFromScaleIn: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        protectedFromScaleIn: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.protectedFromScaleIn = protectedFromScaleIn
    }
}

struct SetInstanceProtectionInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let autoScalingGroupName: Swift.String?
    let protectedFromScaleIn: Swift.Bool?
}

extension SetInstanceProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceIds = "InstanceIds"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct member{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
    }
}

extension SetInstanceProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetInstanceProtectionOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceProtectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension StartInstanceRefreshInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredConfiguration = desiredConfiguration {
            try container.encode(desiredConfiguration, forKey: ClientRuntime.Key("DesiredConfiguration"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: ClientRuntime.Key("Preferences"))
        }
        if let strategy = strategy {
            try container.encode(strategy, forKey: ClientRuntime.Key("Strategy"))
        }
        try container.encode("StartInstanceRefresh", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartInstanceRefreshInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartInstanceRefreshInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template. Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the SkipMatching property in preferences. If it's enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and version. This can help you reduce the number of replacements that are required to apply updates.
    public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
    /// Set of preferences associated with the instance refresh request. If not provided, the default values are used.
    public var preferences: AutoScalingClientTypes.RefreshPreferences?
    /// The strategy to use for the instance refresh. The only valid value is Rolling. A rolling update helps you update your instances gradually. A rolling update can fail due to failed health checks or if instances are on standby or are protected from scale in. If the rolling update process fails, any instances that are replaced are not rolled back to their previous configuration.
    public var strategy: AutoScalingClientTypes.RefreshStrategy?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
        preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
        strategy: AutoScalingClientTypes.RefreshStrategy? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredConfiguration = desiredConfiguration
        self.preferences = preferences
        self.strategy = strategy
    }
}

struct StartInstanceRefreshInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let strategy: AutoScalingClientTypes.RefreshStrategy?
    let desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
    let preferences: AutoScalingClientTypes.RefreshPreferences?
}

extension StartInstanceRefreshInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredConfiguration = "DesiredConfiguration"
        case preferences = "Preferences"
        case strategy = "Strategy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let strategyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.RefreshStrategy.self, forKey: .strategy)
        strategy = strategyDecoded
        let desiredConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.DesiredConfiguration.self, forKey: .desiredConfiguration)
        desiredConfiguration = desiredConfigurationDecoded
        let preferencesDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.RefreshPreferences.self, forKey: .preferences)
        preferences = preferencesDecoded
    }
}

extension StartInstanceRefreshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartInstanceRefreshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceRefreshInProgress" : self = .instanceRefreshInProgressFault(try InstanceRefreshInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartInstanceRefreshOutputError: Swift.Error, Swift.Equatable {
    case instanceRefreshInProgressFault(InstanceRefreshInProgressFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInstanceRefreshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct StartInstanceRefreshOutputResponse: Swift.Equatable {
    /// A unique ID for tracking the progress of the request.
    public var instanceRefreshId: Swift.String?

    public init (
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct StartInstanceRefreshOutputResponseBody: Swift.Equatable {
    let instanceRefreshId: Swift.String?
}

extension StartInstanceRefreshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("StartInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension AutoScalingClientTypes.StepAdjustment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricIntervalLowerBound = "MetricIntervalLowerBound"
        case metricIntervalUpperBound = "MetricIntervalUpperBound"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricIntervalLowerBound = metricIntervalLowerBound {
            try container.encode(metricIntervalLowerBound, forKey: ClientRuntime.Key("MetricIntervalLowerBound"))
        }
        if let metricIntervalUpperBound = metricIntervalUpperBound {
            try container.encode(metricIntervalUpperBound, forKey: ClientRuntime.Key("MetricIntervalUpperBound"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalLowerBound)
        metricIntervalLowerBound = metricIntervalLowerBoundDecoded
        let metricIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalUpperBound)
        metricIntervalUpperBound = metricIntervalUpperBoundDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes information used to create a step adjustment for a step scaling policy. For the following examples, suppose that you have an alarm with a breach threshold of 50:
    ///
    /// * To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.
    ///
    /// * To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.
    ///
    ///
    /// There are a few rules for the step adjustments for your step policy:
    ///
    /// * The ranges of your step adjustments can't overlap or have a gap.
    ///
    /// * At most, one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.
    ///
    /// * At most, one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.
    ///
    /// * The upper and lower bound can't be null in the same step adjustment.
    ///
    ///
    /// For more information, see [Step adjustments](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps) in the Amazon EC2 Auto Scaling User Guide.
    public struct StepAdjustment: Swift.Equatable {
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public var metricIntervalLowerBound: Swift.Double?
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public var metricIntervalUpperBound: Swift.Double?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. The amount by which to scale. The adjustment is based on the value that you specified in the AdjustmentType property (either an absolute number or a percentage). A positive value adds to the current capacity and a negative number subtracts from the current capacity.
        /// This member is required.
        public var scalingAdjustment: Swift.Int?

        public init (
            metricIntervalLowerBound: Swift.Double? = nil,
            metricIntervalUpperBound: Swift.Double? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }
    }

}

extension SuspendProcessesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            if !scalingProcesses.isEmpty {
                var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
                for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                    try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
                try scalingProcessesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SuspendProcesses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SuspendProcessesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SuspendProcessesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    /// * Launch
    ///
    /// * Terminate
    ///
    /// * AddToLoadBalancer
    ///
    /// * AlarmNotification
    ///
    /// * AZRebalance
    ///
    /// * HealthCheck
    ///
    /// * InstanceRefresh
    ///
    /// * ReplaceUnhealthy
    ///
    /// * ScheduledActions
    ///
    ///
    /// If you omit this property, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

struct SuspendProcessesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scalingProcesses: [Swift.String]?
}

extension SuspendProcessesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scalingProcesses = "ScalingProcesses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scalingProcesses) {
            struct KeyVal0{struct member{}}
            let scalingProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingProcesses)
            if let scalingProcessesWrappedContainer = scalingProcessesWrappedContainer {
                let scalingProcessesContainer = try scalingProcessesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scalingProcessesBuffer:[Swift.String]? = nil
                if let scalingProcessesContainer = scalingProcessesContainer {
                    scalingProcessesBuffer = [Swift.String]()
                    for stringContainer0 in scalingProcessesContainer {
                        scalingProcessesBuffer?.append(stringContainer0)
                    }
                }
                scalingProcesses = scalingProcessesBuffer
            } else {
                scalingProcesses = []
            }
        } else {
            scalingProcesses = nil
        }
    }
}

extension SuspendProcessesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SuspendProcessesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SuspendProcessesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendProcessesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SuspendProcessesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.SuspendedProcess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processName = "ProcessName"
        case suspensionReason = "SuspensionReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: ClientRuntime.Key("ProcessName"))
        }
        if let suspensionReason = suspensionReason {
            try container.encode(suspensionReason, forKey: ClientRuntime.Key("SuspensionReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processName)
        processName = processNameDecoded
        let suspensionReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .suspensionReason)
        suspensionReason = suspensionReasonDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes an auto scaling process that has been suspended. For more information, see [Scaling processes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types) in the Amazon EC2 Auto Scaling User Guide.
    public struct SuspendedProcess: Swift.Equatable {
        /// The name of the suspended process.
        public var processName: Swift.String?
        /// The reason that the process was suspended.
        public var suspensionReason: Swift.String?

        public init (
            processName: Swift.String? = nil,
            suspensionReason: Swift.String? = nil
        )
        {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }
    }

}

extension AutoScalingClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: ClientRuntime.Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a tag for an Auto Scaling group.
    public struct Tag: Swift.Equatable {
        /// The tag key.
        /// This member is required.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the Auto Scaling group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.TagDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: ClientRuntime.Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a tag for an Auto Scaling group.
    public struct TagDescription: Swift.Equatable {
        /// The tag key.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.TargetTrackingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedMetricSpecification = "CustomizedMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case predefinedMetricSpecification = "PredefinedMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customizedMetricSpecification = customizedMetricSpecification {
            try container.encode(customizedMetricSpecification, forKey: ClientRuntime.Key("CustomizedMetricSpecification"))
        }
        if let disableScaleIn = disableScaleIn {
            try container.encode(disableScaleIn, forKey: ClientRuntime.Key("DisableScaleIn"))
        }
        if let predefinedMetricSpecification = predefinedMetricSpecification {
            try container.encode(predefinedMetricSpecification, forKey: ClientRuntime.Key("PredefinedMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedMetricSpecification.self, forKey: .predefinedMetricSpecification)
        predefinedMetricSpecification = predefinedMetricSpecificationDecoded
        let customizedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.CustomizedMetricSpecification.self, forKey: .customizedMetricSpecification)
        customizedMetricSpecification = customizedMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
    }
}

extension AutoScalingClientTypes {
    /// Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct TargetTrackingConfiguration: Swift.Equatable {
        /// A customized metric. You must specify either a predefined metric or a customized metric.
        public var customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification?
        /// Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is false.
        public var disableScaleIn: Swift.Bool?
        /// A predefined metric. You must specify either a predefined metric or a customized metric.
        public var predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification?
        /// The target value for the metric. Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.targetValue = targetValue
        }
    }

}

extension AutoScalingClientTypes.TargetTrackingMetricDataQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case id = "Id"
        case label = "Label"
        case metricStat = "MetricStat"
        case returnData = "ReturnData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let metricStat = metricStat {
            try container.encode(metricStat, forKey: ClientRuntime.Key("MetricStat"))
        }
        if let returnData = returnData {
            try container.encode(returnData, forKey: ClientRuntime.Key("ReturnData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let metricStatDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TargetTrackingMetricStat.self, forKey: .metricStat)
        metricStat = metricStatDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let returnDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .returnData)
        returnData = returnDataDecoded
    }
}

extension AutoScalingClientTypes {
    /// The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.
    public struct TargetTrackingMetricDataQuery: Swift.Equatable {
        /// The math expression to perform on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. Conditional: Within each TargetTrackingMetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var expression: Swift.String?
        /// A short name that identifies the object's results in the response. This name must be unique among all TargetTrackingMetricDataQuery objects specified for a single scaling policy. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscores. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
        public var label: Swift.String?
        /// Information about the metric data to return. Conditional: Within each TargetTrackingMetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var metricStat: AutoScalingClientTypes.TargetTrackingMetricStat?
        /// Indicates whether to return the timestamps and raw data values of this metric. If you use any math expressions, specify true for this value for only the final math expression that the metric specification is based on. You must specify false for ReturnData for all the other metrics and expressions used in the metric specification. If you are only retrieving metrics and not performing any math expressions, do not specify anything for ReturnData. This sets it to its default (true).
        public var returnData: Swift.Bool?

        public init (
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: AutoScalingClientTypes.TargetTrackingMetricStat? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.returnData = returnData
        }
    }

}

extension AutoScalingClientTypes.TargetTrackingMetricStat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Metric.self, forKey: .metric)
        metric = metricDecoded
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AutoScalingClientTypes {
    /// This structure defines the CloudWatch metric to return, along with the statistic, period, and unit. For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct TargetTrackingMetricStat: Swift.Equatable {
        /// Represents a specific metric.
        /// This member is required.
        public var metric: AutoScalingClientTypes.Metric?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the Amazon CloudWatch User Guide. The most commonly used metrics for scaling is Average
        /// This member is required.
        public var stat: Swift.String?
        /// The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init (
            metric: AutoScalingClientTypes.Metric? = nil,
            stat: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.metric = metric
            self.stat = stat
            self.unit = unit
        }
    }

}

extension TerminateInstanceInAutoScalingGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("TerminateInstanceInAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension TerminateInstanceInAutoScalingGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TerminateInstanceInAutoScalingGroupInput: Swift.Equatable {
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        instanceId: Swift.String? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.instanceId = instanceId
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

struct TerminateInstanceInAutoScalingGroupInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let shouldDecrementDesiredCapacity: Swift.Bool?
}

extension TerminateInstanceInAutoScalingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
        case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let shouldDecrementDesiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shouldDecrementDesiredCapacity)
        shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacityDecoded
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TerminateInstanceInAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateInstanceInAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TerminateInstanceInAutoScalingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activity = output.activity
        } else {
            self.activity = nil
        }
    }
}

public struct TerminateInstanceInAutoScalingGroupOutputResponse: Swift.Equatable {
    /// A scaling activity.
    public var activity: AutoScalingClientTypes.Activity?

    public init (
        activity: AutoScalingClientTypes.Activity? = nil
    )
    {
        self.activity = activity
    }
}

struct TerminateInstanceInAutoScalingGroupOutputResponseBody: Swift.Equatable {
    let activity: AutoScalingClientTypes.Activity?
}

extension TerminateInstanceInAutoScalingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activity = "Activity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TerminateInstanceInAutoScalingGroupResult"))
        let activityDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Activity.self, forKey: .activity)
        activity = activityDecoded
    }
}

extension AutoScalingClientTypes.TotalLocalStorageGBRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the TotalLocalStorageGB object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct TotalLocalStorageGBRequest: Swift.Equatable {
        /// The storage maximum in GB.
        public var max: Swift.Double?
        /// The storage minimum in GB.
        public var min: Swift.Double?

        public init (
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.TrafficSourceIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identifier = identifier {
            try container.encode(identifier, forKey: ClientRuntime.Key("Identifier"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the identifier of a traffic source. Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group.
    public struct TrafficSourceIdentifier: Swift.Equatable {
        /// The unique identifier of the traffic source.
        public var identifier: Swift.String?

        public init (
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension AutoScalingClientTypes.TrafficSourceState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case trafficSource = "TrafficSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let trafficSource = trafficSource {
            try container.encode(trafficSource, forKey: ClientRuntime.Key("TrafficSource"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficSource)
        trafficSource = trafficSourceDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes the state of a traffic source.
    public struct TrafficSourceState: Swift.Equatable {
        /// The following are the possible states for a VPC Lattice target group:
        ///
        /// * Adding - The Auto Scaling instances are being registered with the target group.
        ///
        /// * Added - All Auto Scaling instances are registered with the target group.
        ///
        /// * InService - At least one Auto Scaling instance passed the VPC_LATTICE health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, VPC Lattice waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the target group.
        public var state: Swift.String?
        /// The unique identifier of the traffic source. Currently, this is the Amazon Resource Name (ARN) for a VPC Lattice target group.
        public var trafficSource: Swift.String?

        public init (
            state: Swift.String? = nil,
            trafficSource: Swift.String? = nil
        )
        {
            self.state = state
            self.trafficSource = trafficSource
        }
    }

}

extension UpdateAutoScalingGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let defaultInstanceWarmup = defaultInstanceWarmup {
            try container.encode(defaultInstanceWarmup, forKey: ClientRuntime.Key("DefaultInstanceWarmup"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let desiredCapacityType = desiredCapacityType {
            try container.encode(desiredCapacityType, forKey: ClientRuntime.Key("DesiredCapacityType"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let terminationPolicies = terminationPolicies {
            if !terminationPolicies.isEmpty {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                    try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
                try terminationPoliciesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcZoneIdentifier = vpcZoneIdentifier {
            try container.encode(vpcZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        try container.encode("UpdateAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAutoScalingGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more Availability Zones for the group.
    public var availabilityZones: [Swift.String]?
    /// Enables or disables Capacity Rebalancing. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// Only needed if you use simple scaling policies. The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the Amazon EC2 Auto Scaling User Guide.
    public var defaultCooldown: Swift.Int?
    /// The amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. For more information, see [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the Amazon EC2 Auto Scaling User Guide. To manage your warm-up settings at the group level, we recommend that you set the default instance warmup, even if its value is set to 0 seconds. This also optimizes the performance of scaling policies that scale continuously, such as target tracking and step scaling policies. If you need to remove a value that you previously set, include the property but specify -1 for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a minimum value of 0.
    public var defaultInstanceWarmup: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
    public var desiredCapacity: Swift.Int?
    /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only. For more information, see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in the Amazon EC2 Auto Scaling User Guide. By default, Amazon EC2 Auto Scaling specifies units, which translates into number of instances. Valid values: units | vcpu | memory-mib
    public var desiredCapacityType: Swift.String?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the InService state. For more information, see [Set the health check grace period for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the Amazon EC2 Auto Scaling User Guide.
    public var healthCheckGracePeriod: Swift.Int?
    /// Determines whether any additional health checks are performed on the instances in this group. Amazon EC2 health checks are always on. The valid values are EC2 (default), ELB, and VPC_LATTICE. The VPC_LATTICE health check type is reserved for use with VPC Lattice, which is in preview release and is subject to change.
    public var healthCheckType: Swift.String?
    /// The name of the launch configuration. If you specify LaunchConfigurationName in your update request, you can't specify LaunchTemplate or MixedInstancesPolicy.
    public var launchConfigurationName: Swift.String?
    /// The launch template and version to use to specify the updates. If you specify LaunchTemplate in your update request, you can't specify LaunchConfigurationName or MixedInstancesPolicy.
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see [Replacing Auto Scaling instances based on maximum instance lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the Auto Scaling group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above MaxSize to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// The mixed instances policy. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of an existing placement group into which to launch your instances. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. A cluster placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see [Service-linked roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see [Work with Amazon EC2 Auto Scaling termination policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Default | AllocationStrategy | ClosestToNextInstanceHour | NewestInstance | OldestInstance | OldestLaunchConfiguration | OldestLaunchTemplate | arn:aws:lambda:region:account-id:function:my-function:my-alias
    public var terminationPolicies: [Swift.String]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify must reside in those Availability Zones.
    public var vpcZoneIdentifier: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        defaultInstanceWarmup: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        desiredCapacityType: Swift.String? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        terminationPolicies: [Swift.String]? = nil,
        vpcZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.defaultInstanceWarmup = defaultInstanceWarmup
        self.desiredCapacity = desiredCapacity
        self.desiredCapacityType = desiredCapacityType
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.terminationPolicies = terminationPolicies
        self.vpcZoneIdentifier = vpcZoneIdentifier
    }
}

struct UpdateAutoScalingGroupInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let launchConfigurationName: Swift.String?
    let launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    let mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let desiredCapacity: Swift.Int?
    let defaultCooldown: Swift.Int?
    let availabilityZones: [Swift.String]?
    let healthCheckType: Swift.String?
    let healthCheckGracePeriod: Swift.Int?
    let placementGroup: Swift.String?
    let vpcZoneIdentifier: Swift.String?
    let terminationPolicies: [Swift.String]?
    let newInstancesProtectedFromScaleIn: Swift.Bool?
    let serviceLinkedRoleARN: Swift.String?
    let maxInstanceLifetime: Swift.Int?
    let capacityRebalance: Swift.Bool?
    let context: Swift.String?
    let desiredCapacityType: Swift.String?
    let defaultInstanceWarmup: Swift.Int?
}

extension UpdateAutoScalingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case context = "Context"
        case defaultCooldown = "DefaultCooldown"
        case defaultInstanceWarmup = "DefaultInstanceWarmup"
        case desiredCapacity = "DesiredCapacity"
        case desiredCapacityType = "DesiredCapacityType"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case terminationPolicies = "TerminationPolicies"
        case vpcZoneIdentifier = "VPCZoneIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vpcZoneIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcZoneIdentifier)
        vpcZoneIdentifier = vpcZoneIdentifierDecoded
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPoliciesBuffer:[Swift.String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
        let desiredCapacityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredCapacityType)
        desiredCapacityType = desiredCapacityTypeDecoded
        let defaultInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultInstanceWarmup)
        defaultInstanceWarmup = defaultInstanceWarmupDecoded
    }
}

extension UpdateAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAutoScalingGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension AutoScalingClientTypes.VCpuCountRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case min = "Min"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let min = min {
            try container.encode(min, forKey: ClientRuntime.Key("Min"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .max)
        max = maxDecoded
    }
}

extension AutoScalingClientTypes {
    /// Specifies the minimum and maximum for the VCpuCount object when you specify [InstanceRequirements] for an Auto Scaling group.
    public struct VCpuCountRequest: Swift.Equatable {
        /// The maximum number of vCPUs.
        public var max: Swift.Int?
        /// The minimum number of vCPUs.
        /// This member is required.
        public var min: Swift.Int?

        public init (
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }

}

extension AutoScalingClientTypes.WarmPoolConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceReusePolicy = "InstanceReusePolicy"
        case maxGroupPreparedCapacity = "MaxGroupPreparedCapacity"
        case minSize = "MinSize"
        case poolState = "PoolState"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceReusePolicy = instanceReusePolicy {
            try container.encode(instanceReusePolicy, forKey: ClientRuntime.Key("InstanceReusePolicy"))
        }
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: ClientRuntime.Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: ClientRuntime.Key("PoolState"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxGroupPreparedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxGroupPreparedCapacity)
        maxGroupPreparedCapacity = maxGroupPreparedCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let poolStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolState.self, forKey: .poolState)
        poolState = poolStateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolStatus.self, forKey: .status)
        status = statusDecoded
        let instanceReusePolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceReusePolicy.self, forKey: .instanceReusePolicy)
        instanceReusePolicy = instanceReusePolicyDecoded
    }
}

extension AutoScalingClientTypes {
    /// Describes a warm pool configuration.
    public struct WarmPoolConfiguration: Swift.Equatable {
        /// The instance reuse policy.
        public var instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy?
        /// The maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
        public var maxGroupPreparedCapacity: Swift.Int?
        /// The minimum number of instances to maintain in the warm pool.
        public var minSize: Swift.Int?
        /// The instance state to transition to after the lifecycle actions are complete.
        public var poolState: AutoScalingClientTypes.WarmPoolState?
        /// The status of a warm pool that is marked for deletion.
        public var status: AutoScalingClientTypes.WarmPoolStatus?

        public init (
            instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy? = nil,
            maxGroupPreparedCapacity: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            poolState: AutoScalingClientTypes.WarmPoolState? = nil,
            status: AutoScalingClientTypes.WarmPoolStatus? = nil
        )
        {
            self.instanceReusePolicy = instanceReusePolicy
            self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
            self.minSize = minSize
            self.poolState = poolState
            self.status = status
        }
    }

}

extension AutoScalingClientTypes {
    public enum WarmPoolState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hibernated
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolState] {
            return [
                .hibernated,
                .running,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hibernated: return "Hibernated"
            case .running: return "Running"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmPoolState(rawValue: rawValue) ?? WarmPoolState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum WarmPoolStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pendingdelete
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolStatus] {
            return [
                .pendingdelete,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pendingdelete: return "PendingDelete"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmPoolStatus(rawValue: rawValue) ?? WarmPoolStatus.sdkUnknown(rawValue)
        }
    }
}
