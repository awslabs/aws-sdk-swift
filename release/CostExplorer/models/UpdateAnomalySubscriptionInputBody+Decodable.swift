// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateAnomalySubscriptionInputBody: Equatable {
    public let subscriptionArn: String?
    public let threshold: Double?
    public let frequency: AnomalySubscriptionFrequency?
    public let monitorArnList: [String]?
    public let subscribers: [Subscriber]?
    public let subscriptionName: String?
}

extension UpdateAnomalySubscriptionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case frequency = "Frequency"
        case monitorArnList = "MonitorArnList"
        case subscribers = "Subscribers"
        case subscriptionArn = "SubscriptionArn"
        case subscriptionName = "SubscriptionName"
        case threshold = "Threshold"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subscriptionArn)
        subscriptionArn = subscriptionArnDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(AnomalySubscriptionFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let monitorArnListContainer = try containerValues.decodeIfPresent([String].self, forKey: .monitorArnList)
        var monitorArnListDecoded0:[String]? = nil
        if let monitorArnListContainer = monitorArnListContainer {
            monitorArnListDecoded0 = [String]()
            for string0 in monitorArnListContainer {
                monitorArnListDecoded0?.append(string0)
            }
        }
        monitorArnList = monitorArnListDecoded0
        let subscribersContainer = try containerValues.decodeIfPresent([Subscriber].self, forKey: .subscribers)
        var subscribersDecoded0:[Subscriber]? = nil
        if let subscribersContainer = subscribersContainer {
            subscribersDecoded0 = [Subscriber]()
            for structure0 in subscribersContainer {
                subscribersDecoded0?.append(structure0)
            }
        }
        subscribers = subscribersDecoded0
        let subscriptionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subscriptionName)
        subscriptionName = subscriptionNameDecoded
    }
}
