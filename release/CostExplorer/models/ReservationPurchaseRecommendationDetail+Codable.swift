// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReservationPurchaseRecommendationDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case averageNormalizedUnitsUsedPerHour = "AverageNormalizedUnitsUsedPerHour"
        case averageNumberOfInstancesUsedPerHour = "AverageNumberOfInstancesUsedPerHour"
        case averageUtilization = "AverageUtilization"
        case currencyCode = "CurrencyCode"
        case estimatedBreakEvenInMonths = "EstimatedBreakEvenInMonths"
        case estimatedMonthlyOnDemandCost = "EstimatedMonthlyOnDemandCost"
        case estimatedMonthlySavingsAmount = "EstimatedMonthlySavingsAmount"
        case estimatedMonthlySavingsPercentage = "EstimatedMonthlySavingsPercentage"
        case estimatedReservationCostForLookbackPeriod = "EstimatedReservationCostForLookbackPeriod"
        case instanceDetails = "InstanceDetails"
        case maximumNormalizedUnitsUsedPerHour = "MaximumNormalizedUnitsUsedPerHour"
        case maximumNumberOfInstancesUsedPerHour = "MaximumNumberOfInstancesUsedPerHour"
        case minimumNormalizedUnitsUsedPerHour = "MinimumNormalizedUnitsUsedPerHour"
        case minimumNumberOfInstancesUsedPerHour = "MinimumNumberOfInstancesUsedPerHour"
        case recommendedNormalizedUnitsToPurchase = "RecommendedNormalizedUnitsToPurchase"
        case recommendedNumberOfInstancesToPurchase = "RecommendedNumberOfInstancesToPurchase"
        case recurringStandardMonthlyCost = "RecurringStandardMonthlyCost"
        case upfrontCost = "UpfrontCost"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let averageNormalizedUnitsUsedPerHour = averageNormalizedUnitsUsedPerHour {
            try encodeContainer.encode(averageNormalizedUnitsUsedPerHour, forKey: .averageNormalizedUnitsUsedPerHour)
        }
        if let averageNumberOfInstancesUsedPerHour = averageNumberOfInstancesUsedPerHour {
            try encodeContainer.encode(averageNumberOfInstancesUsedPerHour, forKey: .averageNumberOfInstancesUsedPerHour)
        }
        if let averageUtilization = averageUtilization {
            try encodeContainer.encode(averageUtilization, forKey: .averageUtilization)
        }
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let estimatedBreakEvenInMonths = estimatedBreakEvenInMonths {
            try encodeContainer.encode(estimatedBreakEvenInMonths, forKey: .estimatedBreakEvenInMonths)
        }
        if let estimatedMonthlyOnDemandCost = estimatedMonthlyOnDemandCost {
            try encodeContainer.encode(estimatedMonthlyOnDemandCost, forKey: .estimatedMonthlyOnDemandCost)
        }
        if let estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount {
            try encodeContainer.encode(estimatedMonthlySavingsAmount, forKey: .estimatedMonthlySavingsAmount)
        }
        if let estimatedMonthlySavingsPercentage = estimatedMonthlySavingsPercentage {
            try encodeContainer.encode(estimatedMonthlySavingsPercentage, forKey: .estimatedMonthlySavingsPercentage)
        }
        if let estimatedReservationCostForLookbackPeriod = estimatedReservationCostForLookbackPeriod {
            try encodeContainer.encode(estimatedReservationCostForLookbackPeriod, forKey: .estimatedReservationCostForLookbackPeriod)
        }
        if let instanceDetails = instanceDetails {
            try encodeContainer.encode(instanceDetails, forKey: .instanceDetails)
        }
        if let maximumNormalizedUnitsUsedPerHour = maximumNormalizedUnitsUsedPerHour {
            try encodeContainer.encode(maximumNormalizedUnitsUsedPerHour, forKey: .maximumNormalizedUnitsUsedPerHour)
        }
        if let maximumNumberOfInstancesUsedPerHour = maximumNumberOfInstancesUsedPerHour {
            try encodeContainer.encode(maximumNumberOfInstancesUsedPerHour, forKey: .maximumNumberOfInstancesUsedPerHour)
        }
        if let minimumNormalizedUnitsUsedPerHour = minimumNormalizedUnitsUsedPerHour {
            try encodeContainer.encode(minimumNormalizedUnitsUsedPerHour, forKey: .minimumNormalizedUnitsUsedPerHour)
        }
        if let minimumNumberOfInstancesUsedPerHour = minimumNumberOfInstancesUsedPerHour {
            try encodeContainer.encode(minimumNumberOfInstancesUsedPerHour, forKey: .minimumNumberOfInstancesUsedPerHour)
        }
        if let recommendedNormalizedUnitsToPurchase = recommendedNormalizedUnitsToPurchase {
            try encodeContainer.encode(recommendedNormalizedUnitsToPurchase, forKey: .recommendedNormalizedUnitsToPurchase)
        }
        if let recommendedNumberOfInstancesToPurchase = recommendedNumberOfInstancesToPurchase {
            try encodeContainer.encode(recommendedNumberOfInstancesToPurchase, forKey: .recommendedNumberOfInstancesToPurchase)
        }
        if let recurringStandardMonthlyCost = recurringStandardMonthlyCost {
            try encodeContainer.encode(recurringStandardMonthlyCost, forKey: .recurringStandardMonthlyCost)
        }
        if let upfrontCost = upfrontCost {
            try encodeContainer.encode(upfrontCost, forKey: .upfrontCost)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let instanceDetailsDecoded = try containerValues.decodeIfPresent(InstanceDetails.self, forKey: .instanceDetails)
        instanceDetails = instanceDetailsDecoded
        let recommendedNumberOfInstancesToPurchaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendedNumberOfInstancesToPurchase)
        recommendedNumberOfInstancesToPurchase = recommendedNumberOfInstancesToPurchaseDecoded
        let recommendedNormalizedUnitsToPurchaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recommendedNormalizedUnitsToPurchase)
        recommendedNormalizedUnitsToPurchase = recommendedNormalizedUnitsToPurchaseDecoded
        let minimumNumberOfInstancesUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumNumberOfInstancesUsedPerHour)
        minimumNumberOfInstancesUsedPerHour = minimumNumberOfInstancesUsedPerHourDecoded
        let minimumNormalizedUnitsUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumNormalizedUnitsUsedPerHour)
        minimumNormalizedUnitsUsedPerHour = minimumNormalizedUnitsUsedPerHourDecoded
        let maximumNumberOfInstancesUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maximumNumberOfInstancesUsedPerHour)
        maximumNumberOfInstancesUsedPerHour = maximumNumberOfInstancesUsedPerHourDecoded
        let maximumNormalizedUnitsUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maximumNormalizedUnitsUsedPerHour)
        maximumNormalizedUnitsUsedPerHour = maximumNormalizedUnitsUsedPerHourDecoded
        let averageNumberOfInstancesUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .averageNumberOfInstancesUsedPerHour)
        averageNumberOfInstancesUsedPerHour = averageNumberOfInstancesUsedPerHourDecoded
        let averageNormalizedUnitsUsedPerHourDecoded = try containerValues.decodeIfPresent(String.self, forKey: .averageNormalizedUnitsUsedPerHour)
        averageNormalizedUnitsUsedPerHour = averageNormalizedUnitsUsedPerHourDecoded
        let averageUtilizationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .averageUtilization)
        averageUtilization = averageUtilizationDecoded
        let estimatedBreakEvenInMonthsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedBreakEvenInMonths)
        estimatedBreakEvenInMonths = estimatedBreakEvenInMonthsDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let estimatedMonthlySavingsAmountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedMonthlySavingsAmount)
        estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmountDecoded
        let estimatedMonthlySavingsPercentageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedMonthlySavingsPercentage)
        estimatedMonthlySavingsPercentage = estimatedMonthlySavingsPercentageDecoded
        let estimatedMonthlyOnDemandCostDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedMonthlyOnDemandCost)
        estimatedMonthlyOnDemandCost = estimatedMonthlyOnDemandCostDecoded
        let estimatedReservationCostForLookbackPeriodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedReservationCostForLookbackPeriod)
        estimatedReservationCostForLookbackPeriod = estimatedReservationCostForLookbackPeriodDecoded
        let upfrontCostDecoded = try containerValues.decodeIfPresent(String.self, forKey: .upfrontCost)
        upfrontCost = upfrontCostDecoded
        let recurringStandardMonthlyCostDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recurringStandardMonthlyCost)
        recurringStandardMonthlyCost = recurringStandardMonthlyCostDecoded
    }
}
