// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetDimensionValuesInput: Equatable {
    /// <p>The context for the call to <code>GetDimensionValues</code>. This can be <code>RESERVATIONS</code> or <code>COST_AND_USAGE</code>.
    /// 			The default value is <code>COST_AND_USAGE</code>. If the context is set to <code>RESERVATIONS</code>, the resulting dimension values
    /// 			can be used in the <code>GetReservationUtilization</code> operation. If the context is set to <code>COST_AND_USAGE</code>,
    /// 			the resulting dimension values can be used in the <code>GetCostAndUsage</code> operation.</p>
    /// 		       <p>If you set the context to <code>COST_AND_USAGE</code>, you can use the following
    ///            dimensions for searching:</p>
    ///            <ul>
    ///             <li>
    ///                <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>DATABASE_ENGINE - The Amazon Relational Database Service database. Examples are Aurora or MySQL.</p>
    ///             </li>
    ///             <li>
    ///                <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>LEGAL_ENTITY_NAME - The name of the organization that sells you AWS services, such as Amazon Web Services.</p>
    ///             </li>
    ///             <li>
    ///                <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value
    ///                field contains the AWS ID of the member account.</p>
    ///             </li>
    ///             <li>
    ///                <p>OPERATING_SYSTEM - The operating system. Examples are Windows or Linux.</p>
    ///             </li>
    ///             <li>
    ///                <p>OPERATION - The action performed. Examples include <code>RunInstance</code> and <code>CreateBucket</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p>
    ///             </li>
    ///             <li>
    ///                <p>PURCHASE_TYPE - The reservation type of the purchase to which this usage is related. Examples include On-Demand
    ///                Instances and Standard Reserved Instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>SERVICE - The AWS service such as Amazon DynamoDB.</p>
    ///             </li>
    ///             <li>
    ///                <p>USAGE_TYPE - The type of usage. An example is DataTransfer-In-Bytes. The response for the <code>GetDimensionValues</code> operation
    ///            includes a unit attribute. Examples include GB and Hrs.</p>
    ///             </li>
    ///             <li>
    ///                <p>USAGE_TYPE_GROUP - The grouping of common usage types. An example is Amazon EC2: CloudWatch – Alarms. The response for this
    ///                operation includes a unit attribute.</p>
    ///             </li>
    ///             <li>
    ///                <p>REGION - The AWS Region.</p>
    ///             </li>
    ///             <li>
    ///                <p>RECORD_TYPE - The different types of charges such as RI fees, usage costs, tax refunds, and credits.</p>
    ///             </li>
    ///             <li>
    ///                <p>RESOURCE_ID - The unique identifier of the resource. ResourceId is an opt-in feature only available for last 14 days for EC2-Compute Service.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you set the context to <code>RESERVATIONS</code>, you can use the following
    ///            dimensions for searching:</p>
    ///          <ul>
    ///             <li>
    ///                <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>CACHE_ENGINE - The Amazon ElastiCache operating system. Examples are Windows or Linux.</p>
    ///             </li>
    ///             <li>
    ///                <p>DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments. Valid values are <code>SingleAZ</code> and <code>MultiAZ</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value
    ///                field contains the AWS ID of the member account.</p>
    ///             </li>
    ///             <li>
    ///                <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p>
    ///             </li>
    ///             <li>
    ///                <p>REGION - The AWS Region.</p>
    ///             </li>
    ///             <li>
    ///                <p>SCOPE (Utilization only) - The scope of a Reserved Instance (RI). Values are regional or a single Availability Zone.</p>
    ///             </li>
    ///             <li>
    ///                <p>TAG (Coverage only) - The tags that are associated with a Reserved Instance (RI).</p>
    ///             </li>
    ///             <li>
    ///                <p>TENANCY - The tenancy of a resource. Examples are shared or dedicated.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you set the context to <code>SAVINGS_PLANS</code>, you can use the following dimensions for searching:</p>
    ///          <ul>
    ///             <li>
    ///                <p>SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute)</p>
    ///             </li>
    ///             <li>
    ///                <p>PAYMENT_OPTION - Payment option for the given Savings Plans (for example, All Upfront)</p>
    ///             </li>
    ///             <li>
    ///                <p>REGION - The AWS Region.</p>
    ///             </li>
    ///             <li>
    ///                <p>INSTANCE_TYPE_FAMILY - The family of instances (For example, <code>m5</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value
    ///                field contains the AWS ID of the member account.</p>
    ///             </li>
    ///             <li>
    ///                <p>SAVINGS_PLAN_ARN - The unique identifier for your Savings Plan</p>
    ///             </li>
    ///          </ul>
    public let context: Context?
    /// <p>The name of the dimension. Each <code>Dimension</code> is available for a different <code>Context</code>.
    /// 			For more information, see <code>Context</code>.
    /// 			
    /// 		</p>
    public let dimension: Dimension?
    /// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>Simple dimension values - You can set the dimension name and values for the
    ///                     filters that you plan to use. For example, you can filter for
    ///                     <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>. The
    ///                         <code>Expression</code> example looks like:</p>
    ///                 <p>
    ///                   <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1",
    ///                         “us-west-1” ] } }</code>
    ///                 </p>
    ///                 <p>The list of dimension values are OR'd together to retrieve cost or usage
    ///                     data. You can create <code>Expression</code> and <code>DimensionValues</code>
    ///                     objects using either <code>with*</code> methods or <code>set*</code> methods in
    ///                     multiple lines. </p>
    ///             </li>
    ///             <li>
    ///                 <p>Compound dimension values with logical operations - You can use multiple
    ///                         <code>Expression</code> types and the logical operators
    ///                         <code>AND/OR/NOT</code> to create a list of one or more
    ///                         <code>Expression</code> objects. This allows you to filter on more advanced
    ///                     options. For example, you can filter on <code>((REGION == us-east-1 OR
    ///                         REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE !=
    ///                         DataTransfer)</code>. The <code>Expression</code> for that looks like
    ///                     this:</p>
    ///                 <p>
    ///                   <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION",
    ///                         "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName",
    ///                         "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE",
    ///                         "Values": ["DataTransfer"] }}} ] } </code>
    ///                </p>
    ///                 <note>
    ///                     <p>Because each <code>Expression</code> can have only one operator, the
    ///                         service returns an error if more than one is specified. The following
    ///                         example shows an <code>Expression</code> object that creates an
    ///                         error.</p>
    ///                 </note>
    ///                 <p>
    ///                     <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE",
    ///                         "Values": [ "DataTransfer" ] } } </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///         <note>
    ///             <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not
    ///                 supported. OR is not supported between different dimensions, or dimensions and tags.
    ///                 NOT operators aren't supported.
    ///                 Dimensions
    ///                 are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or
    ///                     <code>RIGHTSIZING_TYPE</code>.</p>
    /// 					
    /// 					       <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR are not supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>
    /// 					
    /// 					
    /// 					
    ///          </note>
    public let filter: Expression?
    /// <p>This field is only used when SortBy is provided in the request. The maximum number of objects that to be returned for this request. If MaxResults is not specified with SortBy, the request will return 1000 results as the default value for this parameter.</p>
    /// 	        <p>For <code>GetDimensionValues</code>, MaxResults has an upper limit of 1000.</p>
    public let maxResults: Int
    /// <p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>
    public let nextPageToken: String?
    /// <p>The value that you want to search the filter values for.</p>
    public let searchString: String?
    /// <p>The value by which you want to sort the data.</p>
    /// 	        <p>The key represents cost and usage metrics. The following values are supported:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>BlendedCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UnblendedCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AmortizedCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NetAmortizedCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NetUnblendedCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UsageQuantity</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NormalizedUsageAmount</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    ///          <p>When you specify a <code>SortBy</code> paramater, the context must be <code>COST_AND_USAGE</code>. Further, when using <code>SortBy</code>, <code>NextPageToken</code> and <code>SearchString</code> are not supported.</p>
    public let sortBy: [SortDefinition]?
    /// <p>The start and end dates for retrieving the dimension values. The start date is inclusive,  but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is
    ///             retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    public let timePeriod: DateInterval?

    public init (
        context: Context? = nil,
        dimension: Dimension? = nil,
        filter: Expression? = nil,
        maxResults: Int = 0,
        nextPageToken: String? = nil,
        searchString: String? = nil,
        sortBy: [SortDefinition]? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.context = context
        self.dimension = dimension
        self.filter = filter
        self.maxResults = maxResults
        self.nextPageToken = nextPageToken
        self.searchString = searchString
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
