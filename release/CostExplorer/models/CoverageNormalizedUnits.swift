// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The amount of instance usage, in normalized units. Normalized units enable you to
///             see your EC2 usage for multiple sizes of instances in a uniform way. For example,
///             suppose you run an xlarge instance and a 2xlarge instance. If you run both instances for
///             the same amount of time, the 2xlarge instance uses twice as much of your reservation as
///             the xlarge instance, even though both instances show only one instance-hour. Using
///             normalized units instead of instance-hours, the xlarge instance used 8 normalized units,
///             and the 2xlarge instance used 16 normalized units.</p>
///         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide for
///                 Linux Instances</i>.</p>
public struct CoverageNormalizedUnits: Equatable {
    /// <p>The percentage of your used instance normalized units that a reservation
    ///             covers.</p>
    public let coverageNormalizedUnitsPercentage: String?
    /// <p>The number of normalized units that are covered by On-Demand Instances instead of a
    ///             reservation.</p>
    public let onDemandNormalizedUnits: String?
    /// <p>The number of normalized units that a reservation covers.</p>
    public let reservedNormalizedUnits: String?
    /// <p>The total number of normalized units that you used.</p>
    public let totalRunningNormalizedUnits: String?

    public init (
        coverageNormalizedUnitsPercentage: String? = nil,
        onDemandNormalizedUnits: String? = nil,
        reservedNormalizedUnits: String? = nil,
        totalRunningNormalizedUnits: String? = nil
    )
    {
        self.coverageNormalizedUnitsPercentage = coverageNormalizedUnitsPercentage
        self.onDemandNormalizedUnits = onDemandNormalizedUnits
        self.reservedNormalizedUnits = reservedNormalizedUnits
        self.totalRunningNormalizedUnits = totalRunningNormalizedUnits
    }
}
