// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SavingsPlansUtilization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case totalCommitment = "TotalCommitment"
        case unusedCommitment = "UnusedCommitment"
        case usedCommitment = "UsedCommitment"
        case utilizationPercentage = "UtilizationPercentage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalCommitment = totalCommitment {
            try encodeContainer.encode(totalCommitment, forKey: .totalCommitment)
        }
        if let unusedCommitment = unusedCommitment {
            try encodeContainer.encode(unusedCommitment, forKey: .unusedCommitment)
        }
        if let usedCommitment = usedCommitment {
            try encodeContainer.encode(usedCommitment, forKey: .usedCommitment)
        }
        if let utilizationPercentage = utilizationPercentage {
            try encodeContainer.encode(utilizationPercentage, forKey: .utilizationPercentage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalCommitmentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalCommitment)
        totalCommitment = totalCommitmentDecoded
        let usedCommitmentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usedCommitment)
        usedCommitment = usedCommitmentDecoded
        let unusedCommitmentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unusedCommitment)
        unusedCommitment = unusedCommitmentDecoded
        let utilizationPercentageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .utilizationPercentage)
        utilizationPercentage = utilizationPercentageDecoded
    }
}
