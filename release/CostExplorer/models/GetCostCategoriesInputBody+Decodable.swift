// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostCategoriesInputBody: Equatable {
    public let searchString: String?
    public let timePeriod: DateInterval?
    public let costCategoryName: String?
    public let filter: Expression?
    public let sortBy: [SortDefinition]?
    public let maxResults: Int
    public let nextPageToken: String?
}

extension GetCostCategoriesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case costCategoryName = "CostCategoryName"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextPageToken = "NextPageToken"
        case searchString = "SearchString"
        case sortBy = "SortBy"
        case timePeriod = "TimePeriod"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let timePeriodDecoded = try containerValues.decodeIfPresent(DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let costCategoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .costCategoryName)
        costCategoryName = costCategoryNameDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Expression.self, forKey: .filter)
        filter = filterDecoded
        let sortByContainer = try containerValues.decodeIfPresent([SortDefinition].self, forKey: .sortBy)
        var sortByDecoded0:[SortDefinition]? = nil
        if let sortByContainer = sortByContainer {
            sortByDecoded0 = [SortDefinition]()
            for structure0 in sortByContainer {
                sortByDecoded0?.append(structure0)
            }
        }
        sortBy = sortByDecoded0
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
