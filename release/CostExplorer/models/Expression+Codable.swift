// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Expression: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case and = "And"
        case costCategories = "CostCategories"
        case dimensions = "Dimensions"
        case not = "Not"
        case or = "Or"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let and = and {
            var andContainer = encodeContainer.nestedUnkeyedContainer(forKey: .and)
            for expressions0 in and {
                try andContainer.encode(expressions0)
            }
        }
        if let costCategories = costCategories {
            try encodeContainer.encode(costCategories, forKey: .costCategories)
        }
        if let dimensions = dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let not = not {
            try encodeContainer.encode(not.value, forKey: .not)
        }
        if let or = or {
            var orContainer = encodeContainer.nestedUnkeyedContainer(forKey: .or)
            for expressions0 in or {
                try orContainer.encode(expressions0)
            }
        }
        if let tags = tags {
            try encodeContainer.encode(tags, forKey: .tags)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orContainer = try containerValues.decodeIfPresent([Expression].self, forKey: .or)
        var orDecoded0:[Expression]? = nil
        if let orContainer = orContainer {
            orDecoded0 = [Expression]()
            for structure0 in orContainer {
                orDecoded0?.append(structure0)
            }
        }
        or = orDecoded0
        let andContainer = try containerValues.decodeIfPresent([Expression].self, forKey: .and)
        var andDecoded0:[Expression]? = nil
        if let andContainer = andContainer {
            andDecoded0 = [Expression]()
            for structure0 in andContainer {
                andDecoded0?.append(structure0)
            }
        }
        and = andDecoded0
        let notDecoded = try containerValues.decodeIfPresent(Box<Expression>.self, forKey: .not)
        not = notDecoded
        let dimensionsDecoded = try containerValues.decodeIfPresent(DimensionValues.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let tagsDecoded = try containerValues.decodeIfPresent(TagValues.self, forKey: .tags)
        tags = tagsDecoded
        let costCategoriesDecoded = try containerValues.decodeIfPresent(CostCategoryValues.self, forKey: .costCategories)
        costCategories = costCategoriesDecoded
    }
}
