// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSavingsPlansCoverageInput: Equatable {
    /// <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LINKED_ACCOUNT</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REGION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SERVICE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSTANCE_FAMILY</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <code>GetSavingsPlansCoverage</code> uses the same
    ///       <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object
    ///       as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>
    ///          <p>Cost category is also supported.</p>
    public let filter: Expression?
    /// <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>
    /// 	        <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    public let granularity: Granularity?
    /// <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    public let groupBy: [GroupDefinition]?
    /// <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    public let maxResults: Int
    /// <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    public let metrics: [String]?
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    public let nextToken: String?
    /// <p>The value by which you want to sort the data.</p>
    /// 	  	     <p>The following values are supported for <code>Key</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SpendCoveredBySavingsPlan</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OnDemandCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CoveragePercentage</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalCost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>InstanceFamily</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Region</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Service</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    public let sortBy: SortDefinition?
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    public let timePeriod: DateInterval?

    public init (
        filter: Expression? = nil,
        granularity: Granularity? = nil,
        groupBy: [GroupDefinition]? = nil,
        maxResults: Int = 0,
        metrics: [String]? = nil,
        nextToken: String? = nil,
        sortBy: SortDefinition? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.metrics = metrics
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
