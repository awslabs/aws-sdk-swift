// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTagsOutputBody: Equatable {
    public let nextPageToken: String?
    public let tags: [String]?
    public let returnSize: Int?
    public let totalSize: Int?
}

extension GetTagsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextPageToken = "NextPageToken"
        case returnSize = "ReturnSize"
        case tags = "Tags"
        case totalSize = "TotalSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String].self, forKey: .tags)
        var tagsDecoded0:[String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String]()
            for string0 in tagsContainer {
                tagsDecoded0?.append(string0)
            }
        }
        tags = tagsDecoded0
        let returnSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .returnSize)
        returnSize = returnSizeDecoded
        let totalSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalSize)
        totalSize = totalSizeDecoded
    }
}
