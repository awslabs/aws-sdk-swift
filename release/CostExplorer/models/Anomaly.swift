// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>
///         An unusual cost pattern. This consists of the detailed metadata and the current status of the anomaly object.
///     </p>
public struct Anomaly: Equatable {
    /// <p>
    ///         The last day the anomaly is detected.
    ///     </p>
    public let anomalyEndDate: String?
    /// <p>
    ///         The unique identifier for the anomaly.
    ///     </p>
    public let anomalyId: String?
    /// <p>
    ///         The latest and maximum score for the anomaly.
    ///     </p>
    public let anomalyScore: AnomalyScore?
    /// <p>
    ///         The first day the anomaly is detected.
    ///     </p>
    public let anomalyStartDate: String?
    /// <p>
    ///         The dimension for the anomaly. For example, an AWS service in a service monitor.
    ///     </p>
    public let dimensionValue: String?
    /// <p>
    ///         The feedback value.
    ///     </p>
    public let feedback: AnomalyFeedbackType?
    /// <p>
    ///         The dollar impact for the anomaly.
    ///     </p>
    public let impact: Impact?
    /// <p> The Amazon Resource Name (ARN) for the cost monitor that generated this anomaly. </p>
    public let monitorArn: String?
    /// <p>
    ///         The list of identified root causes for the anomaly.
    ///     </p>
    public let rootCauses: [RootCause]?

    public init (
        anomalyEndDate: String? = nil,
        anomalyId: String? = nil,
        anomalyScore: AnomalyScore? = nil,
        anomalyStartDate: String? = nil,
        dimensionValue: String? = nil,
        feedback: AnomalyFeedbackType? = nil,
        impact: Impact? = nil,
        monitorArn: String? = nil,
        rootCauses: [RootCause]? = nil
    )
    {
        self.anomalyEndDate = anomalyEndDate
        self.anomalyId = anomalyId
        self.anomalyScore = anomalyScore
        self.anomalyStartDate = anomalyStartDate
        self.dimensionValue = dimensionValue
        self.feedback = feedback
        self.impact = impact
        self.monitorArn = monitorArn
        self.rootCauses = rootCauses
    }
}
