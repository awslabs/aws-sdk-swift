// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnomalyMonitor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDate = "CreationDate"
        case dimensionalValueCount = "DimensionalValueCount"
        case lastEvaluatedDate = "LastEvaluatedDate"
        case lastUpdatedDate = "LastUpdatedDate"
        case monitorArn = "MonitorArn"
        case monitorDimension = "MonitorDimension"
        case monitorName = "MonitorName"
        case monitorSpecification = "MonitorSpecification"
        case monitorType = "MonitorType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if dimensionalValueCount != 0 {
            try encodeContainer.encode(dimensionalValueCount, forKey: .dimensionalValueCount)
        }
        if let lastEvaluatedDate = lastEvaluatedDate {
            try encodeContainer.encode(lastEvaluatedDate, forKey: .lastEvaluatedDate)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate, forKey: .lastUpdatedDate)
        }
        if let monitorArn = monitorArn {
            try encodeContainer.encode(monitorArn, forKey: .monitorArn)
        }
        if let monitorDimension = monitorDimension {
            try encodeContainer.encode(monitorDimension.rawValue, forKey: .monitorDimension)
        }
        if let monitorName = monitorName {
            try encodeContainer.encode(monitorName, forKey: .monitorName)
        }
        if let monitorSpecification = monitorSpecification {
            try encodeContainer.encode(monitorSpecification, forKey: .monitorSpecification)
        }
        if let monitorType = monitorType {
            try encodeContainer.encode(monitorType.rawValue, forKey: .monitorType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitorArn)
        monitorArn = monitorArnDecoded
        let monitorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitorName)
        monitorName = monitorNameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let lastEvaluatedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedDate)
        lastEvaluatedDate = lastEvaluatedDateDecoded
        let monitorTypeDecoded = try containerValues.decodeIfPresent(MonitorType.self, forKey: .monitorType)
        monitorType = monitorTypeDecoded
        let monitorDimensionDecoded = try containerValues.decodeIfPresent(MonitorDimension.self, forKey: .monitorDimension)
        monitorDimension = monitorDimensionDecoded
        let monitorSpecificationDecoded = try containerValues.decodeIfPresent(Expression.self, forKey: .monitorSpecification)
        monitorSpecification = monitorSpecificationDecoded
        let dimensionalValueCountDecoded = try containerValues.decode(Int.self, forKey: .dimensionalValueCount)
        dimensionalValueCount = dimensionalValueCountDecoded
    }
}
