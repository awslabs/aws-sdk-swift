// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Dimension {
    case agreementEndDateTimeAfter
    case agreementEndDateTimeBefore
    case az
    case billingEntity
    case cacheEngine
    case databaseEngine
    case deploymentOption
    case instanceType
    case instanceTypeFamily
    case legalEntityName
    case linkedAccount
    case linkedAccountName
    case operatingSystem
    case operation
    case paymentOption
    case platform
    case purchaseType
    case recordType
    case region
    case reservationId
    case resourceId
    case rightsizingType
    case savingsPlansType
    case savingsPlanArn
    case scope
    case service
    case serviceCode
    case subscriptionId
    case tenancy
    case usageType
    case usageTypeGroup
    case sdkUnknown(String)
}

extension Dimension : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Dimension] {
        return [
            .agreementEndDateTimeAfter,
            .agreementEndDateTimeBefore,
            .az,
            .billingEntity,
            .cacheEngine,
            .databaseEngine,
            .deploymentOption,
            .instanceType,
            .instanceTypeFamily,
            .legalEntityName,
            .linkedAccount,
            .linkedAccountName,
            .operatingSystem,
            .operation,
            .paymentOption,
            .platform,
            .purchaseType,
            .recordType,
            .region,
            .reservationId,
            .resourceId,
            .rightsizingType,
            .savingsPlansType,
            .savingsPlanArn,
            .scope,
            .service,
            .serviceCode,
            .subscriptionId,
            .tenancy,
            .usageType,
            .usageTypeGroup,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agreementEndDateTimeAfter: return "AGREEMENT_END_DATE_TIME_AFTER"
        case .agreementEndDateTimeBefore: return "AGREEMENT_END_DATE_TIME_BEFORE"
        case .az: return "AZ"
        case .billingEntity: return "BILLING_ENTITY"
        case .cacheEngine: return "CACHE_ENGINE"
        case .databaseEngine: return "DATABASE_ENGINE"
        case .deploymentOption: return "DEPLOYMENT_OPTION"
        case .instanceType: return "INSTANCE_TYPE"
        case .instanceTypeFamily: return "INSTANCE_TYPE_FAMILY"
        case .legalEntityName: return "LEGAL_ENTITY_NAME"
        case .linkedAccount: return "LINKED_ACCOUNT"
        case .linkedAccountName: return "LINKED_ACCOUNT_NAME"
        case .operatingSystem: return "OPERATING_SYSTEM"
        case .operation: return "OPERATION"
        case .paymentOption: return "PAYMENT_OPTION"
        case .platform: return "PLATFORM"
        case .purchaseType: return "PURCHASE_TYPE"
        case .recordType: return "RECORD_TYPE"
        case .region: return "REGION"
        case .reservationId: return "RESERVATION_ID"
        case .resourceId: return "RESOURCE_ID"
        case .rightsizingType: return "RIGHTSIZING_TYPE"
        case .savingsPlansType: return "SAVINGS_PLANS_TYPE"
        case .savingsPlanArn: return "SAVINGS_PLAN_ARN"
        case .scope: return "SCOPE"
        case .service: return "SERVICE"
        case .serviceCode: return "SERVICE_CODE"
        case .subscriptionId: return "SUBSCRIPTION_ID"
        case .tenancy: return "TENANCY"
        case .usageType: return "USAGE_TYPE"
        case .usageTypeGroup: return "USAGE_TYPE_GROUP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Dimension(rawValue: rawValue) ?? Dimension.sdkUnknown(rawValue)
    }
}
