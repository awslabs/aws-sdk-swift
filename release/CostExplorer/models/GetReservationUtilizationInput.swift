// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetReservationUtilizationInput: Equatable {
    /// <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>AZ</p>
    ///             </li>
    ///             <li>
    ///                <p>CACHE_ENGINE</p>
    ///             </li>
    ///             <li>
    ///                <p>DEPLOYMENT_OPTION</p>
    ///             </li>
    ///             <li>
    ///                <p>INSTANCE_TYPE</p>
    ///             </li>
    ///             <li>
    ///                <p>LINKED_ACCOUNT</p>
    ///             </li>
    ///             <li>
    ///                <p>OPERATING_SYSTEM</p>
    ///             </li>
    ///             <li>
    ///                <p>PLATFORM</p>
    ///             </li>
    ///             <li>
    ///                <p>REGION</p>
    ///             </li>
    ///             <li>
    ///                <p>SERVICE</p>
    ///             </li>
    ///             <li>
    ///                <p>SCOPE</p>
    ///             </li>
    ///             <li>
    ///                <p>TENANCY</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>
    ///             <code>GetReservationUtilization</code> uses the same
    /// 			<a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object
    /// 			as the other operations, but only <code>AND</code> is supported among each dimension, and nesting is supported up to
    /// 			only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>
    public let filter: Expression?
    /// <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set,
    /// 			the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>.
    /// 			If both <code>GroupBy</code> and <code>Granularity</code> aren't set, <code>GetReservationUtilization</code> defaults to <code>DAILY</code>.</p>
    /// 		       <p>The <code>GetReservationUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    public let granularity: Granularity?
    /// <p>Groups only by <code>SUBSCRIPTION_ID</code>. Metadata is included.</p>
    public let groupBy: [GroupDefinition]?
    /// <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, AWS provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    public let maxResults: Int
    /// <p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>
    public let nextPageToken: String?
    /// <p>The value by which you want to sort the data.</p>
    /// 	
    /// 	        <p>The following values are supported for <code>Key</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>UtilizationPercentage</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UtilizationPercentageInUnits</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PurchasedHours</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PurchasedUnits</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalActualHours</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalActualUnits</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UnusedHours</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UnusedUnits</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OnDemandCostOfRIHoursUsed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NetRISavings</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalPotentialRISavings</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AmortizedUpfrontFee</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AmortizedRecurringFee</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalAmortizedFee</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RICostForUnusedHours</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RealizedSavings</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UnrealizedSavings</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    public let sortBy: SortDefinition?
    /// <p>Sets the start and end dates for retrieving RI utilization. The start date is inclusive,  but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is
    ///             retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. </p>
    public let timePeriod: DateInterval?

    public init (
        filter: Expression? = nil,
        granularity: Granularity? = nil,
        groupBy: [GroupDefinition]? = nil,
        maxResults: Int = 0,
        nextPageToken: String? = nil,
        sortBy: SortDefinition? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.nextPageToken = nextPageToken
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
