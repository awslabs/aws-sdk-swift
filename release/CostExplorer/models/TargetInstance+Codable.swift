// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currencyCode = "CurrencyCode"
        case defaultTargetInstance = "DefaultTargetInstance"
        case estimatedMonthlyCost = "EstimatedMonthlyCost"
        case estimatedMonthlySavings = "EstimatedMonthlySavings"
        case expectedResourceUtilization = "ExpectedResourceUtilization"
        case platformDifferences = "PlatformDifferences"
        case resourceDetails = "ResourceDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if defaultTargetInstance != false {
            try encodeContainer.encode(defaultTargetInstance, forKey: .defaultTargetInstance)
        }
        if let estimatedMonthlyCost = estimatedMonthlyCost {
            try encodeContainer.encode(estimatedMonthlyCost, forKey: .estimatedMonthlyCost)
        }
        if let estimatedMonthlySavings = estimatedMonthlySavings {
            try encodeContainer.encode(estimatedMonthlySavings, forKey: .estimatedMonthlySavings)
        }
        if let expectedResourceUtilization = expectedResourceUtilization {
            try encodeContainer.encode(expectedResourceUtilization, forKey: .expectedResourceUtilization)
        }
        if let platformDifferences = platformDifferences {
            var platformDifferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformDifferences)
            for platformdifferences0 in platformDifferences {
                try platformDifferencesContainer.encode(platformdifferences0.rawValue)
            }
        }
        if let resourceDetails = resourceDetails {
            try encodeContainer.encode(resourceDetails, forKey: .resourceDetails)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedMonthlyCostDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedMonthlyCost)
        estimatedMonthlyCost = estimatedMonthlyCostDecoded
        let estimatedMonthlySavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedMonthlySavings)
        estimatedMonthlySavings = estimatedMonthlySavingsDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let defaultTargetInstanceDecoded = try containerValues.decode(Bool.self, forKey: .defaultTargetInstance)
        defaultTargetInstance = defaultTargetInstanceDecoded
        let resourceDetailsDecoded = try containerValues.decodeIfPresent(ResourceDetails.self, forKey: .resourceDetails)
        resourceDetails = resourceDetailsDecoded
        let expectedResourceUtilizationDecoded = try containerValues.decodeIfPresent(ResourceUtilization.self, forKey: .expectedResourceUtilization)
        expectedResourceUtilization = expectedResourceUtilizationDecoded
        let platformDifferencesContainer = try containerValues.decodeIfPresent([PlatformDifference].self, forKey: .platformDifferences)
        var platformDifferencesDecoded0:[PlatformDifference]? = nil
        if let platformDifferencesContainer = platformDifferencesContainer {
            platformDifferencesDecoded0 = [PlatformDifference]()
            for string0 in platformDifferencesContainer {
                platformDifferencesDecoded0?.append(string0)
            }
        }
        platformDifferences = platformDifferencesDecoded0
    }
}
