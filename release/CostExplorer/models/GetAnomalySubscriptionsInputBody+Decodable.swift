// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAnomalySubscriptionsInputBody: Equatable {
    public let subscriptionArnList: [String]?
    public let monitorArn: String?
    public let nextPageToken: String?
    public let maxResults: Int?
}

extension GetAnomalySubscriptionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case monitorArn = "MonitorArn"
        case nextPageToken = "NextPageToken"
        case subscriptionArnList = "SubscriptionArnList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionArnListContainer = try containerValues.decodeIfPresent([String].self, forKey: .subscriptionArnList)
        var subscriptionArnListDecoded0:[String]? = nil
        if let subscriptionArnListContainer = subscriptionArnListContainer {
            subscriptionArnListDecoded0 = [String]()
            for string0 in subscriptionArnListContainer {
                subscriptionArnListDecoded0?.append(string0)
            }
        }
        subscriptionArnList = subscriptionArnListDecoded0
        let monitorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitorArn)
        monitorArn = monitorArnDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
