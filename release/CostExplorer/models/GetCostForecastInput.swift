// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCostForecastInput: Equatable {
    /// <p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>
    /// 		
    /// 	        <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AZ</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSTANCE_TYPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LINKED_ACCOUNT</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LINKED_ACCOUNT_NAME</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OPERATION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PURCHASE_TYPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REGION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SERVICE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>USAGE_TYPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>USAGE_TYPE_GROUP</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RECORD_TYPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OPERATING_SYSTEM</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TENANCY</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SCOPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PLATFORM</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SUBSCRIPTION_ID</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LEGAL_ENTITY_NAME</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPLOYMENT_OPTION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DATABASE_ENGINE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSTANCE_TYPE_FAMILY</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BILLING_ENTITY</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RESERVATION_ID</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SAVINGS_PLAN_ARN</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let filter: Expression?
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// 		       <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    public let granularity: Granularity?
    /// <p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see
    /// 			<a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation
    /// 				appear on some line items in my bill?</a>. </p>
    /// 		       <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>AMORTIZED_COST</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>BLENDED_COST</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>NET_AMORTIZED_COST</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>NET_UNBLENDED_COST</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>UNBLENDED_COST</p>
    /// 			         </li>
    ///          </ul>
    public let metric: Metric?
    /// <p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean
    /// 			by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value
    /// 			falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    public let predictionIntervalLevel: Int?
    /// <p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p>
    public let timePeriod: DateInterval?

    public init (
        filter: Expression? = nil,
        granularity: Granularity? = nil,
        metric: Metric? = nil,
        predictionIntervalLevel: Int? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.metric = metric
        self.predictionIntervalLevel = predictionIntervalLevel
        self.timePeriod = timePeriod
    }
}
