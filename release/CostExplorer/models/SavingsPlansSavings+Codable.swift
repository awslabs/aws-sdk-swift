// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SavingsPlansSavings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case netSavings = "NetSavings"
        case onDemandCostEquivalent = "OnDemandCostEquivalent"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let netSavings = netSavings {
            try encodeContainer.encode(netSavings, forKey: .netSavings)
        }
        if let onDemandCostEquivalent = onDemandCostEquivalent {
            try encodeContainer.encode(onDemandCostEquivalent, forKey: .onDemandCostEquivalent)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let netSavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .netSavings)
        netSavings = netSavingsDecoded
        let onDemandCostEquivalentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onDemandCostEquivalent)
        onDemandCostEquivalent = onDemandCostEquivalentDecoded
    }
}
