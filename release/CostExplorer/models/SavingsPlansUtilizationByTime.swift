// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The amount of Savings Plans utilization, in hours.</p>
public struct SavingsPlansUtilizationByTime: Equatable {
    /// <p>The total amortized commitment for a Savings Plans. This includes the sum of the upfront and recurring Savings Plans fees.</p>
    public let amortizedCommitment: SavingsPlansAmortizedCommitment?
    /// <p>The amount saved by using existing Savings Plans. Savings returns both net savings from Savings Plans as well as the <code>onDemandCostEquivalent</code> of the Savings Plans when considering the utilization rate.</p>
    public let savings: SavingsPlansSavings?
    /// <p>The time period of the request.
    ///         </p>
    public let timePeriod: DateInterval?
    /// <p>A ratio of your effectiveness of using existing Savings Plans to apply to workloads that are Savings Plans eligible.</p>
    public let utilization: SavingsPlansUtilization?

    public init (
        amortizedCommitment: SavingsPlansAmortizedCommitment? = nil,
        savings: SavingsPlansSavings? = nil,
        timePeriod: DateInterval? = nil,
        utilization: SavingsPlansUtilization? = nil
    )
    {
        self.amortizedCommitment = amortizedCommitment
        self.savings = savings
        self.timePeriod = timePeriod
        self.utilization = utilization
    }
}
