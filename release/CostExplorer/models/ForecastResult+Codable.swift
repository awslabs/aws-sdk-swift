// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForecastResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case meanValue = "MeanValue"
        case predictionIntervalLowerBound = "PredictionIntervalLowerBound"
        case predictionIntervalUpperBound = "PredictionIntervalUpperBound"
        case timePeriod = "TimePeriod"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meanValue = meanValue {
            try encodeContainer.encode(meanValue, forKey: .meanValue)
        }
        if let predictionIntervalLowerBound = predictionIntervalLowerBound {
            try encodeContainer.encode(predictionIntervalLowerBound, forKey: .predictionIntervalLowerBound)
        }
        if let predictionIntervalUpperBound = predictionIntervalUpperBound {
            try encodeContainer.encode(predictionIntervalUpperBound, forKey: .predictionIntervalUpperBound)
        }
        if let timePeriod = timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let meanValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .meanValue)
        meanValue = meanValueDecoded
        let predictionIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(String.self, forKey: .predictionIntervalLowerBound)
        predictionIntervalLowerBound = predictionIntervalLowerBoundDecoded
        let predictionIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(String.self, forKey: .predictionIntervalUpperBound)
        predictionIntervalUpperBound = predictionIntervalUpperBoundDecoded
    }
}
