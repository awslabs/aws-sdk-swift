// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Details about your recommended reservation purchase.</p>
public struct ReservationPurchaseRecommendationDetail: Equatable {
    /// <p>The account that this RI recommendation is for.</p>
    public let accountId: String?
    /// <p>The average number of normalized units that you used in an hour during the
    ///             historical period. AWS uses this to calculate your recommended reservation
    ///             purchases.</p>
    public let averageNormalizedUnitsUsedPerHour: String?
    /// <p>The average number of instances that you used in an hour during the historical
    ///             period. AWS uses this to calculate your recommended reservation purchases.</p>
    public let averageNumberOfInstancesUsedPerHour: String?
    /// <p>The average utilization of your instances. AWS uses this to calculate your
    ///             recommended reservation purchases.</p>
    public let averageUtilization: String?
    /// <p>The currency code that AWS used to calculate the costs for this instance.</p>
    public let currencyCode: String?
    /// <p>How long AWS estimates that it takes for this instance to start saving you money,
    ///             in months.</p>
    public let estimatedBreakEvenInMonths: String?
    /// <p>How much AWS estimates that you spend on On-Demand Instances in a month.</p>
    public let estimatedMonthlyOnDemandCost: String?
    /// <p>How much AWS estimates that this specific recommendation could save you in a
    ///             month.</p>
    public let estimatedMonthlySavingsAmount: String?
    /// <p>How much AWS estimates that this specific recommendation could save you in a month,
    ///             as a percentage of your overall costs.</p>
    public let estimatedMonthlySavingsPercentage: String?
    /// <p>How much AWS estimates that you would have spent for all usage during the specified
    ///             historical period if you had
    ///             a
    ///             reservation.</p>
    public let estimatedReservationCostForLookbackPeriod: String?
    /// <p>Details about the instances that AWS recommends that you purchase.</p>
    public let instanceDetails: InstanceDetails?
    /// <p>The maximum number of normalized units that you used in an hour during the
    ///             historical period. AWS uses this to calculate your recommended reservation
    ///             purchases.</p>
    public let maximumNormalizedUnitsUsedPerHour: String?
    /// <p>The maximum number of instances that you used in an hour during the historical
    ///             period. AWS uses this to calculate your recommended reservation purchases.</p>
    public let maximumNumberOfInstancesUsedPerHour: String?
    /// <p>The minimum number of normalized units that you used in an hour during the
    ///             historical period. AWS uses this to calculate your recommended reservation
    ///             purchases.</p>
    public let minimumNormalizedUnitsUsedPerHour: String?
    /// <p>The minimum number of instances that you used in an hour during the historical
    ///             period. AWS uses this to calculate your recommended reservation purchases.</p>
    public let minimumNumberOfInstancesUsedPerHour: String?
    /// <p>The number of normalized units that AWS recommends that you purchase.</p>
    public let recommendedNormalizedUnitsToPurchase: String?
    /// <p>The number of instances that AWS recommends that you purchase.</p>
    public let recommendedNumberOfInstancesToPurchase: String?
    /// <p>How much purchasing this instance costs you on a monthly basis.</p>
    public let recurringStandardMonthlyCost: String?
    /// <p>How much purchasing this instance costs you upfront.</p>
    public let upfrontCost: String?

    public init (
        accountId: String? = nil,
        averageNormalizedUnitsUsedPerHour: String? = nil,
        averageNumberOfInstancesUsedPerHour: String? = nil,
        averageUtilization: String? = nil,
        currencyCode: String? = nil,
        estimatedBreakEvenInMonths: String? = nil,
        estimatedMonthlyOnDemandCost: String? = nil,
        estimatedMonthlySavingsAmount: String? = nil,
        estimatedMonthlySavingsPercentage: String? = nil,
        estimatedReservationCostForLookbackPeriod: String? = nil,
        instanceDetails: InstanceDetails? = nil,
        maximumNormalizedUnitsUsedPerHour: String? = nil,
        maximumNumberOfInstancesUsedPerHour: String? = nil,
        minimumNormalizedUnitsUsedPerHour: String? = nil,
        minimumNumberOfInstancesUsedPerHour: String? = nil,
        recommendedNormalizedUnitsToPurchase: String? = nil,
        recommendedNumberOfInstancesToPurchase: String? = nil,
        recurringStandardMonthlyCost: String? = nil,
        upfrontCost: String? = nil
    )
    {
        self.accountId = accountId
        self.averageNormalizedUnitsUsedPerHour = averageNormalizedUnitsUsedPerHour
        self.averageNumberOfInstancesUsedPerHour = averageNumberOfInstancesUsedPerHour
        self.averageUtilization = averageUtilization
        self.currencyCode = currencyCode
        self.estimatedBreakEvenInMonths = estimatedBreakEvenInMonths
        self.estimatedMonthlyOnDemandCost = estimatedMonthlyOnDemandCost
        self.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount
        self.estimatedMonthlySavingsPercentage = estimatedMonthlySavingsPercentage
        self.estimatedReservationCostForLookbackPeriod = estimatedReservationCostForLookbackPeriod
        self.instanceDetails = instanceDetails
        self.maximumNormalizedUnitsUsedPerHour = maximumNormalizedUnitsUsedPerHour
        self.maximumNumberOfInstancesUsedPerHour = maximumNumberOfInstancesUsedPerHour
        self.minimumNormalizedUnitsUsedPerHour = minimumNormalizedUnitsUsedPerHour
        self.minimumNumberOfInstancesUsedPerHour = minimumNumberOfInstancesUsedPerHour
        self.recommendedNormalizedUnitsToPurchase = recommendedNormalizedUnitsToPurchase
        self.recommendedNumberOfInstancesToPurchase = recommendedNumberOfInstancesToPurchase
        self.recurringStandardMonthlyCost = recurringStandardMonthlyCost
        self.upfrontCost = upfrontCost
    }
}
