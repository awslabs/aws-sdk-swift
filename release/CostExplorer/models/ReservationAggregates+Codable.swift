// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReservationAggregates: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amortizedRecurringFee = "AmortizedRecurringFee"
        case amortizedUpfrontFee = "AmortizedUpfrontFee"
        case netRISavings = "NetRISavings"
        case onDemandCostOfRIHoursUsed = "OnDemandCostOfRIHoursUsed"
        case purchasedHours = "PurchasedHours"
        case purchasedUnits = "PurchasedUnits"
        case rICostForUnusedHours = "RICostForUnusedHours"
        case realizedSavings = "RealizedSavings"
        case totalActualHours = "TotalActualHours"
        case totalActualUnits = "TotalActualUnits"
        case totalAmortizedFee = "TotalAmortizedFee"
        case totalPotentialRISavings = "TotalPotentialRISavings"
        case unrealizedSavings = "UnrealizedSavings"
        case unusedHours = "UnusedHours"
        case unusedUnits = "UnusedUnits"
        case utilizationPercentage = "UtilizationPercentage"
        case utilizationPercentageInUnits = "UtilizationPercentageInUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amortizedRecurringFee = amortizedRecurringFee {
            try encodeContainer.encode(amortizedRecurringFee, forKey: .amortizedRecurringFee)
        }
        if let amortizedUpfrontFee = amortizedUpfrontFee {
            try encodeContainer.encode(amortizedUpfrontFee, forKey: .amortizedUpfrontFee)
        }
        if let netRISavings = netRISavings {
            try encodeContainer.encode(netRISavings, forKey: .netRISavings)
        }
        if let onDemandCostOfRIHoursUsed = onDemandCostOfRIHoursUsed {
            try encodeContainer.encode(onDemandCostOfRIHoursUsed, forKey: .onDemandCostOfRIHoursUsed)
        }
        if let purchasedHours = purchasedHours {
            try encodeContainer.encode(purchasedHours, forKey: .purchasedHours)
        }
        if let purchasedUnits = purchasedUnits {
            try encodeContainer.encode(purchasedUnits, forKey: .purchasedUnits)
        }
        if let rICostForUnusedHours = rICostForUnusedHours {
            try encodeContainer.encode(rICostForUnusedHours, forKey: .rICostForUnusedHours)
        }
        if let realizedSavings = realizedSavings {
            try encodeContainer.encode(realizedSavings, forKey: .realizedSavings)
        }
        if let totalActualHours = totalActualHours {
            try encodeContainer.encode(totalActualHours, forKey: .totalActualHours)
        }
        if let totalActualUnits = totalActualUnits {
            try encodeContainer.encode(totalActualUnits, forKey: .totalActualUnits)
        }
        if let totalAmortizedFee = totalAmortizedFee {
            try encodeContainer.encode(totalAmortizedFee, forKey: .totalAmortizedFee)
        }
        if let totalPotentialRISavings = totalPotentialRISavings {
            try encodeContainer.encode(totalPotentialRISavings, forKey: .totalPotentialRISavings)
        }
        if let unrealizedSavings = unrealizedSavings {
            try encodeContainer.encode(unrealizedSavings, forKey: .unrealizedSavings)
        }
        if let unusedHours = unusedHours {
            try encodeContainer.encode(unusedHours, forKey: .unusedHours)
        }
        if let unusedUnits = unusedUnits {
            try encodeContainer.encode(unusedUnits, forKey: .unusedUnits)
        }
        if let utilizationPercentage = utilizationPercentage {
            try encodeContainer.encode(utilizationPercentage, forKey: .utilizationPercentage)
        }
        if let utilizationPercentageInUnits = utilizationPercentageInUnits {
            try encodeContainer.encode(utilizationPercentageInUnits, forKey: .utilizationPercentageInUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let utilizationPercentageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .utilizationPercentage)
        utilizationPercentage = utilizationPercentageDecoded
        let utilizationPercentageInUnitsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .utilizationPercentageInUnits)
        utilizationPercentageInUnits = utilizationPercentageInUnitsDecoded
        let purchasedHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .purchasedHours)
        purchasedHours = purchasedHoursDecoded
        let purchasedUnitsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .purchasedUnits)
        purchasedUnits = purchasedUnitsDecoded
        let totalActualHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalActualHours)
        totalActualHours = totalActualHoursDecoded
        let totalActualUnitsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalActualUnits)
        totalActualUnits = totalActualUnitsDecoded
        let unusedHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unusedHours)
        unusedHours = unusedHoursDecoded
        let unusedUnitsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unusedUnits)
        unusedUnits = unusedUnitsDecoded
        let onDemandCostOfRIHoursUsedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onDemandCostOfRIHoursUsed)
        onDemandCostOfRIHoursUsed = onDemandCostOfRIHoursUsedDecoded
        let netRISavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .netRISavings)
        netRISavings = netRISavingsDecoded
        let totalPotentialRISavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalPotentialRISavings)
        totalPotentialRISavings = totalPotentialRISavingsDecoded
        let amortizedUpfrontFeeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amortizedUpfrontFee)
        amortizedUpfrontFee = amortizedUpfrontFeeDecoded
        let amortizedRecurringFeeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amortizedRecurringFee)
        amortizedRecurringFee = amortizedRecurringFeeDecoded
        let totalAmortizedFeeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalAmortizedFee)
        totalAmortizedFee = totalAmortizedFeeDecoded
        let rICostForUnusedHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rICostForUnusedHours)
        rICostForUnusedHours = rICostForUnusedHoursDecoded
        let realizedSavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .realizedSavings)
        realizedSavings = realizedSavingsDecoded
        let unrealizedSavingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unrealizedSavings)
        unrealizedSavings = unrealizedSavingsDecoded
    }
}
