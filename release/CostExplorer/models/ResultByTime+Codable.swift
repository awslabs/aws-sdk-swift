// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResultByTime: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case estimated = "Estimated"
        case groups = "Groups"
        case timePeriod = "TimePeriod"
        case total = "Total"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if estimated != false {
            try encodeContainer.encode(estimated, forKey: .estimated)
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
        if let timePeriod = timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
        if let total = total {
            var totalContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .total)
            for (dictKey0, metrics0) in total {
                try totalContainer.encode(metrics0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let totalContainer = try containerValues.decodeIfPresent([String:MetricValue].self, forKey: .total)
        var totalDecoded0: [String:MetricValue]? = nil
        if let totalContainer = totalContainer {
            totalDecoded0 = [String:MetricValue]()
            for (key0, metricvalue0) in totalContainer {
                totalDecoded0?[key0] = metricvalue0
            }
        }
        total = totalDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([Group].self, forKey: .groups)
        var groupsDecoded0:[Group]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Group]()
            for structure0 in groupsContainer {
                groupsDecoded0?.append(structure0)
            }
        }
        groups = groupsDecoded0
        let estimatedDecoded = try containerValues.decode(Bool.self, forKey: .estimated)
        estimated = estimatedDecoded
    }
}
