// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSavingsPlansUtilizationInput: Equatable {
    /// <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions.  You can filter data with the following dimensions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LINKED_ACCOUNT</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SAVINGS_PLAN_ARN</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SAVINGS_PLANS_TYPE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REGION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAYMENT_OPTION</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSTANCE_TYPE_FAMILY</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <code>GetSavingsPlansUtilization</code> uses the same
    ///       <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object
    ///       as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    public let filter: Expression?
    /// <p>The granularity of the Amazon Web Services utillization data for your Savings Plans.</p>
    /// 	        <p>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    public let granularity: Granularity?
    /// <p>The value by which you want to sort the data.</p>
    /// 	        <p>The following values are supported for <code>Key</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>UtilizationPercentage</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TotalCommitment</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UsedCommitment</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UnusedCommitment</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NetSavings</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    public let sortBy: SortDefinition?
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    public let timePeriod: DateInterval?

    public init (
        filter: Expression? = nil,
        granularity: Granularity? = nil,
        sortBy: SortDefinition? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
