// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDimensionValuesOutputBody: Equatable {
    public let dimensionValues: [DimensionValuesWithAttributes]?
    public let returnSize: Int?
    public let totalSize: Int?
    public let nextPageToken: String?
}

extension GetDimensionValuesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dimensionValues = "DimensionValues"
        case nextPageToken = "NextPageToken"
        case returnSize = "ReturnSize"
        case totalSize = "TotalSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionValuesContainer = try containerValues.decodeIfPresent([DimensionValuesWithAttributes].self, forKey: .dimensionValues)
        var dimensionValuesDecoded0:[DimensionValuesWithAttributes]? = nil
        if let dimensionValuesContainer = dimensionValuesContainer {
            dimensionValuesDecoded0 = [DimensionValuesWithAttributes]()
            for structure0 in dimensionValuesContainer {
                dimensionValuesDecoded0?.append(structure0)
            }
        }
        dimensionValues = dimensionValuesDecoded0
        let returnSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .returnSize)
        returnSize = returnSizeDecoded
        let totalSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalSize)
        totalSize = totalSizeDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
