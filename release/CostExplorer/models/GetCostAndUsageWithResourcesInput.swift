// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCostAndUsageWithResourcesInput: Equatable {
    /// <p>Filters Amazon Web Services costs by different dimensions. For example, you can specify
    ///       <code>SERVICE</code> and <code>LINKED_ACCOUNT</code> and get the costs that are associated
    ///       with that account's usage of that service. You can nest <code>Expression</code> objects to
    ///       define any combination of dimension filters. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. </p>
    ///          <p>The <code>GetCostAndUsageWithResources</code> operation requires that you either group by or filter by a
    ///       <code>ResourceId</code>. It requires the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
    ///             <code>"SERVICE = Amazon Elastic Compute Cloud - Compute"</code> in the filter.</p>
    public let filter: Expression?
    /// <p>Sets the AWS cost granularity to <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>. If
    /// 	    <code>Granularity</code> isn't set, the response object doesn't include the
    /// 	    <code>Granularity</code>, <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>. </p>
    public let granularity: Granularity?
    /// <p>You can group Amazon Web Services costs using up to two different groups: <code>DIMENSION</code>, <code>TAG</code>, <code>COST_CATEGORY</code>.</p>
    public let groupBy: [GroupDefinition]?
    /// <p>Which metrics are returned in the query. For more information about blended and
    ///       unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does
    ///         the "blended" annotation appear on some line items in my bill?</a>. </p>
    ///          <p>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>,
    ///       <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>,
    ///       <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and
    ///       <code>UsageQuantity</code>. </p>
    ///          <note>
    ///             <p>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage
    ///         numbers without taking the units into account. For example, if you aggregate
    ///         <code>usageQuantity</code> across all of Amazon EC2, the results aren't meaningful because
    ///         Amazon EC2 compute hours and data transfer are measured in different units (for example, hours
    ///         vs. GB). To get more meaningful <code>UsageQuantity</code> metrics, filter by
    ///         <code>UsageType</code> or <code>UsageTypeGroups</code>. </p>
    ///          </note>
    ///          <p>
    ///             <code>Metrics</code> is required for <code>GetCostAndUsageWithResources</code> requests.</p>
    public let metrics: [String]?
    /// <p>The token to retrieve the next set of results. AWS provides the token when the response from a previous call has more results than the maximum page size.</p>
    public let nextPageToken: String?
    /// <p>Sets the start and end dates for retrieving Amazon Web Services costs. The range must be within the last 14 days (the start date cannot be earlier than 14 days ago). The start date is inclusive,  but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is
    ///             retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    public let timePeriod: DateInterval?

    public init (
        filter: Expression? = nil,
        granularity: Granularity? = nil,
        groupBy: [GroupDefinition]? = nil,
        metrics: [String]? = nil,
        nextPageToken: String? = nil,
        timePeriod: DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.groupBy = groupBy
        self.metrics = metrics
        self.nextPageToken = nextPageToken
        self.timePeriod = timePeriod
    }
}
