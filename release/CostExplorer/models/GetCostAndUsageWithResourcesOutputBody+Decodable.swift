// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostAndUsageWithResourcesOutputBody: Equatable {
    public let nextPageToken: String?
    public let groupDefinitions: [GroupDefinition]?
    public let resultsByTime: [ResultByTime]?
    public let dimensionValueAttributes: [DimensionValuesWithAttributes]?
}

extension GetCostAndUsageWithResourcesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dimensionValueAttributes = "DimensionValueAttributes"
        case groupDefinitions = "GroupDefinitions"
        case nextPageToken = "NextPageToken"
        case resultsByTime = "ResultsByTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let groupDefinitionsContainer = try containerValues.decodeIfPresent([GroupDefinition].self, forKey: .groupDefinitions)
        var groupDefinitionsDecoded0:[GroupDefinition]? = nil
        if let groupDefinitionsContainer = groupDefinitionsContainer {
            groupDefinitionsDecoded0 = [GroupDefinition]()
            for structure0 in groupDefinitionsContainer {
                groupDefinitionsDecoded0?.append(structure0)
            }
        }
        groupDefinitions = groupDefinitionsDecoded0
        let resultsByTimeContainer = try containerValues.decodeIfPresent([ResultByTime].self, forKey: .resultsByTime)
        var resultsByTimeDecoded0:[ResultByTime]? = nil
        if let resultsByTimeContainer = resultsByTimeContainer {
            resultsByTimeDecoded0 = [ResultByTime]()
            for structure0 in resultsByTimeContainer {
                resultsByTimeDecoded0?.append(structure0)
            }
        }
        resultsByTime = resultsByTimeDecoded0
        let dimensionValueAttributesContainer = try containerValues.decodeIfPresent([DimensionValuesWithAttributes].self, forKey: .dimensionValueAttributes)
        var dimensionValueAttributesDecoded0:[DimensionValuesWithAttributes]? = nil
        if let dimensionValueAttributesContainer = dimensionValueAttributesContainer {
            dimensionValueAttributesDecoded0 = [DimensionValuesWithAttributes]()
            for structure0 in dimensionValueAttributesContainer {
                dimensionValueAttributesDecoded0?.append(structure0)
            }
        }
        dimensionValueAttributes = dimensionValueAttributesDecoded0
    }
}
