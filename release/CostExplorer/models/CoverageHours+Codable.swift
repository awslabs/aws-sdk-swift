// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CoverageHours: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case coverageHoursPercentage = "CoverageHoursPercentage"
        case onDemandHours = "OnDemandHours"
        case reservedHours = "ReservedHours"
        case totalRunningHours = "TotalRunningHours"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coverageHoursPercentage = coverageHoursPercentage {
            try encodeContainer.encode(coverageHoursPercentage, forKey: .coverageHoursPercentage)
        }
        if let onDemandHours = onDemandHours {
            try encodeContainer.encode(onDemandHours, forKey: .onDemandHours)
        }
        if let reservedHours = reservedHours {
            try encodeContainer.encode(reservedHours, forKey: .reservedHours)
        }
        if let totalRunningHours = totalRunningHours {
            try encodeContainer.encode(totalRunningHours, forKey: .totalRunningHours)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onDemandHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onDemandHours)
        onDemandHours = onDemandHoursDecoded
        let reservedHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedHours)
        reservedHours = reservedHoursDecoded
        let totalRunningHoursDecoded = try containerValues.decodeIfPresent(String.self, forKey: .totalRunningHours)
        totalRunningHours = totalRunningHoursDecoded
        let coverageHoursPercentageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .coverageHoursPercentage)
        coverageHoursPercentage = coverageHoursPercentageDecoded
    }
}
