// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssumeRoleInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: Key("DurationSeconds"))
        }
        if let externalId = externalId {
            try container.encode(externalId, forKey: Key("ExternalId"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: Key("Policy"))
        }
        if let policyArns = policyArns {
            var policyArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyArns"))
            for (index0, policydescriptortype0) in policyArns.enumerated() {
                try policyArnsContainer.encode(policydescriptortype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: Key("RoleArn"))
        }
        if let roleSessionName = roleSessionName {
            try container.encode(roleSessionName, forKey: Key("RoleSessionName"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: Key("SerialNumber"))
        }
        if let sourceIdentity = sourceIdentity {
            try container.encode(sourceIdentity, forKey: Key("SourceIdentity"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tokenCode = tokenCode {
            try container.encode(tokenCode, forKey: Key("TokenCode"))
        }
        if let transitiveTagKeys = transitiveTagKeys {
            var transitiveTagKeysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TransitiveTagKeys"))
            for (index0, tagkeytype0) in transitiveTagKeys.enumerated() {
                try transitiveTagKeysContainer.encode(tagkeytype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AssumeRole", forKey:Key("Action"))
        try container.encode("2011-06-15", forKey:Key("Version"))
    }
}
