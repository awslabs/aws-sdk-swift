// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateIntegrationResponseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentHandlingStrategy = "contentHandlingStrategy"
        case integrationResponseKey = "integrationResponseKey"
        case responseParameters = "responseParameters"
        case responseTemplates = "responseTemplates"
        case templateSelectionExpression = "templateSelectionExpression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentHandlingStrategy = contentHandlingStrategy {
            try encodeContainer.encode(contentHandlingStrategy.rawValue, forKey: .contentHandlingStrategy)
        }
        if let integrationResponseKey = integrationResponseKey {
            try encodeContainer.encode(integrationResponseKey, forKey: .integrationResponseKey)
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseParameters)
            for (dictKey0, integrationparameters0) in responseParameters {
                try responseParametersContainer.encode(integrationparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseTemplates = responseTemplates {
            var responseTemplatesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseTemplates)
            for (dictKey0, templatemap0) in responseTemplates {
                try responseTemplatesContainer.encode(templatemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let templateSelectionExpression = templateSelectionExpression {
            try encodeContainer.encode(templateSelectionExpression, forKey: .templateSelectionExpression)
        }
    }
}
