// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ExportApiInputQueryItemMiddleware: Middleware {
    public let id: String = "ExportApiInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportApiInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportApiOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let stageName = input.operationInput.stageName {
            let stageNameQueryItem = URLQueryItem(name: "stageName".urlPercentEncoding(), value: String(stageName).urlPercentEncoding())
            input.builder.withQueryItem(stageNameQueryItem)
        }
        let includeExtensionsQueryItem = URLQueryItem(name: "includeExtensions".urlPercentEncoding(), value: String(input.operationInput.includeExtensions).urlPercentEncoding())
        input.builder.withQueryItem(includeExtensionsQueryItem)
        if let exportVersion = input.operationInput.exportVersion {
            let exportVersionQueryItem = URLQueryItem(name: "exportVersion".urlPercentEncoding(), value: String(exportVersion).urlPercentEncoding())
            input.builder.withQueryItem(exportVersionQueryItem)
        }
        if let outputType = input.operationInput.outputType {
            let outputTypeQueryItem = URLQueryItem(name: "outputType".urlPercentEncoding(), value: String(outputType).urlPercentEncoding())
            input.builder.withQueryItem(outputTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportApiInput>
    public typealias MOutput = OperationOutput<ExportApiOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<ExportApiOutputError>
}
