// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateStageInputBody: Equatable {
    public let accessLogSettings: AccessLogSettings?
    public let autoDeploy: Bool
    public let clientCertificateId: String?
    public let defaultRouteSettings: RouteSettings?
    public let deploymentId: String?
    public let description: String?
    public let routeSettings: [String:RouteSettings]?
    public let stageVariables: [String:String]?
}

extension UpdateStageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessLogSettings = "accessLogSettings"
        case autoDeploy = "autoDeploy"
        case clientCertificateId = "clientCertificateId"
        case defaultRouteSettings = "defaultRouteSettings"
        case deploymentId = "deploymentId"
        case description = "description"
        case routeSettings = "routeSettings"
        case stageVariables = "stageVariables"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessLogSettingsDecoded = try containerValues.decodeIfPresent(AccessLogSettings.self, forKey: .accessLogSettings)
        accessLogSettings = accessLogSettingsDecoded
        let autoDeployDecoded = try containerValues.decode(Bool.self, forKey: .autoDeploy)
        autoDeploy = autoDeployDecoded
        let clientCertificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientCertificateId)
        clientCertificateId = clientCertificateIdDecoded
        let defaultRouteSettingsDecoded = try containerValues.decodeIfPresent(RouteSettings.self, forKey: .defaultRouteSettings)
        defaultRouteSettings = defaultRouteSettingsDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let routeSettingsContainer = try containerValues.decodeIfPresent([String:RouteSettings].self, forKey: .routeSettings)
        var routeSettingsDecoded0: [String:RouteSettings]? = nil
        if let routeSettingsContainer = routeSettingsContainer {
            routeSettingsDecoded0 = [String:RouteSettings]()
            for (key0, routesettings0) in routeSettingsContainer {
                routeSettingsDecoded0?[key0] = routesettings0
            }
        }
        routeSettings = routeSettingsDecoded0
        let stageVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .stageVariables)
        var stageVariablesDecoded0: [String:String]? = nil
        if let stageVariablesContainer = stageVariablesContainer {
            stageVariablesDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween0and20480) in stageVariablesContainer {
                stageVariablesDecoded0?[key0] = stringwithlengthbetween0and20480
            }
        }
        stageVariables = stageVariablesDecoded0
    }
}
