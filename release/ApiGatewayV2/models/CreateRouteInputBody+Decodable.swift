// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRouteInputBody: Equatable {
    public let apiKeyRequired: Bool
    public let authorizationScopes: [String]?
    public let authorizationType: AuthorizationType?
    public let authorizerId: String?
    public let modelSelectionExpression: String?
    public let operationName: String?
    public let requestModels: [String:String]?
    public let requestParameters: [String:ParameterConstraints]?
    public let routeKey: String?
    public let routeResponseSelectionExpression: String?
    public let target: String?
}

extension CreateRouteInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case apiKeyRequired = "apiKeyRequired"
        case authorizationScopes = "authorizationScopes"
        case authorizationType = "authorizationType"
        case authorizerId = "authorizerId"
        case modelSelectionExpression = "modelSelectionExpression"
        case operationName = "operationName"
        case requestModels = "requestModels"
        case requestParameters = "requestParameters"
        case routeKey = "routeKey"
        case routeResponseSelectionExpression = "routeResponseSelectionExpression"
        case target = "target"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiKeyRequiredDecoded = try containerValues.decode(Bool.self, forKey: .apiKeyRequired)
        apiKeyRequired = apiKeyRequiredDecoded
        let authorizationScopesContainer = try containerValues.decodeIfPresent([String].self, forKey: .authorizationScopes)
        var authorizationScopesDecoded0:[String]? = nil
        if let authorizationScopesContainer = authorizationScopesContainer {
            authorizationScopesDecoded0 = [String]()
            for string0 in authorizationScopesContainer {
                authorizationScopesDecoded0?.append(string0)
            }
        }
        authorizationScopes = authorizationScopesDecoded0
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(AuthorizationType.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let authorizerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizerId)
        authorizerId = authorizerIdDecoded
        let modelSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelSelectionExpression)
        modelSelectionExpression = modelSelectionExpressionDecoded
        let operationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationName)
        operationName = operationNameDecoded
        let requestModelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestModels)
        var requestModelsDecoded0: [String:String]? = nil
        if let requestModelsContainer = requestModelsContainer {
            requestModelsDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween1and1280) in requestModelsContainer {
                requestModelsDecoded0?[key0] = stringwithlengthbetween1and1280
            }
        }
        requestModels = requestModelsDecoded0
        let requestParametersContainer = try containerValues.decodeIfPresent([String:ParameterConstraints].self, forKey: .requestParameters)
        var requestParametersDecoded0: [String:ParameterConstraints]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [String:ParameterConstraints]()
            for (key0, parameterconstraints0) in requestParametersContainer {
                requestParametersDecoded0?[key0] = parameterconstraints0
            }
        }
        requestParameters = requestParametersDecoded0
        let routeKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeKey)
        routeKey = routeKeyDecoded
        let routeResponseSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeResponseSelectionExpression)
        routeResponseSelectionExpression = routeResponseSelectionExpressionDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
    }
}
