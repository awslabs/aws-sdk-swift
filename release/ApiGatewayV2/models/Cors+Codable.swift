// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Cors: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowCredentials = "allowCredentials"
        case allowHeaders = "allowHeaders"
        case allowMethods = "allowMethods"
        case allowOrigins = "allowOrigins"
        case exposeHeaders = "exposeHeaders"
        case maxAge = "maxAge"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowCredentials != false {
            try encodeContainer.encode(allowCredentials, forKey: .allowCredentials)
        }
        if let allowHeaders = allowHeaders {
            var allowHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowHeaders)
            for corsheaderlist0 in allowHeaders {
                try allowHeadersContainer.encode(corsheaderlist0)
            }
        }
        if let allowMethods = allowMethods {
            var allowMethodsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowMethods)
            for corsmethodlist0 in allowMethods {
                try allowMethodsContainer.encode(corsmethodlist0)
            }
        }
        if let allowOrigins = allowOrigins {
            var allowOriginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowOrigins)
            for corsoriginlist0 in allowOrigins {
                try allowOriginsContainer.encode(corsoriginlist0)
            }
        }
        if let exposeHeaders = exposeHeaders {
            var exposeHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exposeHeaders)
            for corsheaderlist0 in exposeHeaders {
                try exposeHeadersContainer.encode(corsheaderlist0)
            }
        }
        if maxAge != 0 {
            try encodeContainer.encode(maxAge, forKey: .maxAge)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowCredentialsDecoded = try containerValues.decode(Bool.self, forKey: .allowCredentials)
        allowCredentials = allowCredentialsDecoded
        let allowHeadersContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowHeaders)
        var allowHeadersDecoded0:[String]? = nil
        if let allowHeadersContainer = allowHeadersContainer {
            allowHeadersDecoded0 = [String]()
            for string0 in allowHeadersContainer {
                allowHeadersDecoded0?.append(string0)
            }
        }
        allowHeaders = allowHeadersDecoded0
        let allowMethodsContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowMethods)
        var allowMethodsDecoded0:[String]? = nil
        if let allowMethodsContainer = allowMethodsContainer {
            allowMethodsDecoded0 = [String]()
            for string0 in allowMethodsContainer {
                allowMethodsDecoded0?.append(string0)
            }
        }
        allowMethods = allowMethodsDecoded0
        let allowOriginsContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowOrigins)
        var allowOriginsDecoded0:[String]? = nil
        if let allowOriginsContainer = allowOriginsContainer {
            allowOriginsDecoded0 = [String]()
            for string0 in allowOriginsContainer {
                allowOriginsDecoded0?.append(string0)
            }
        }
        allowOrigins = allowOriginsDecoded0
        let exposeHeadersContainer = try containerValues.decodeIfPresent([String].self, forKey: .exposeHeaders)
        var exposeHeadersDecoded0:[String]? = nil
        if let exposeHeadersContainer = exposeHeadersContainer {
            exposeHeadersDecoded0 = [String]()
            for string0 in exposeHeadersContainer {
                exposeHeadersDecoded0?.append(string0)
            }
        }
        exposeHeaders = exposeHeadersDecoded0
        let maxAgeDecoded = try containerValues.decode(Int.self, forKey: .maxAge)
        maxAge = maxAgeDecoded
    }
}
