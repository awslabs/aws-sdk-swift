// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DomainName: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiMappingSelectionExpression = "apiMappingSelectionExpression"
        case domainName = "domainName"
        case domainNameConfigurations = "domainNameConfigurations"
        case mutualTlsAuthentication = "mutualTlsAuthentication"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiMappingSelectionExpression = apiMappingSelectionExpression {
            try encodeContainer.encode(apiMappingSelectionExpression, forKey: .apiMappingSelectionExpression)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainNameConfigurations = domainNameConfigurations {
            var domainNameConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainNameConfigurations)
            for domainnameconfigurations0 in domainNameConfigurations {
                try domainNameConfigurationsContainer.encode(domainnameconfigurations0)
            }
        }
        if let mutualTlsAuthentication = mutualTlsAuthentication {
            try encodeContainer.encode(mutualTlsAuthentication, forKey: .mutualTlsAuthentication)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiMappingSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .apiMappingSelectionExpression)
        apiMappingSelectionExpression = apiMappingSelectionExpressionDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainNameConfigurationsContainer = try containerValues.decodeIfPresent([DomainNameConfiguration].self, forKey: .domainNameConfigurations)
        var domainNameConfigurationsDecoded0:[DomainNameConfiguration]? = nil
        if let domainNameConfigurationsContainer = domainNameConfigurationsContainer {
            domainNameConfigurationsDecoded0 = [DomainNameConfiguration]()
            for structure0 in domainNameConfigurationsContainer {
                domainNameConfigurationsDecoded0?.append(structure0)
            }
        }
        domainNameConfigurations = domainNameConfigurationsDecoded0
        let mutualTlsAuthenticationDecoded = try containerValues.decodeIfPresent(MutualTlsAuthentication.self, forKey: .mutualTlsAuthentication)
        mutualTlsAuthentication = mutualTlsAuthenticationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween1and16000) in tagsContainer {
                tagsDecoded0?[key0] = stringwithlengthbetween1and16000
            }
        }
        tags = tagsDecoded0
    }
}
