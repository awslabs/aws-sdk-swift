// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateStageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessLogSettings = "accessLogSettings"
        case autoDeploy = "autoDeploy"
        case clientCertificateId = "clientCertificateId"
        case defaultRouteSettings = "defaultRouteSettings"
        case deploymentId = "deploymentId"
        case description = "description"
        case routeSettings = "routeSettings"
        case stageVariables = "stageVariables"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLogSettings = accessLogSettings {
            try encodeContainer.encode(accessLogSettings, forKey: .accessLogSettings)
        }
        if autoDeploy != false {
            try encodeContainer.encode(autoDeploy, forKey: .autoDeploy)
        }
        if let clientCertificateId = clientCertificateId {
            try encodeContainer.encode(clientCertificateId, forKey: .clientCertificateId)
        }
        if let defaultRouteSettings = defaultRouteSettings {
            try encodeContainer.encode(defaultRouteSettings, forKey: .defaultRouteSettings)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let routeSettings = routeSettings {
            var routeSettingsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .routeSettings)
            for (dictKey0, routesettingsmap0) in routeSettings {
                try routeSettingsContainer.encode(routesettingsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let stageVariables = stageVariables {
            var stageVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .stageVariables)
            for (dictKey0, stagevariablesmap0) in stageVariables {
                try stageVariablesContainer.encode(stagevariablesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
