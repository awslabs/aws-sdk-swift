// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RouteResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case modelSelectionExpression = "modelSelectionExpression"
        case responseModels = "responseModels"
        case responseParameters = "responseParameters"
        case routeResponseId = "routeResponseId"
        case routeResponseKey = "routeResponseKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelSelectionExpression = modelSelectionExpression {
            try encodeContainer.encode(modelSelectionExpression, forKey: .modelSelectionExpression)
        }
        if let responseModels = responseModels {
            var responseModelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseModels)
            for (dictKey0, routemodels0) in responseModels {
                try responseModelsContainer.encode(routemodels0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseParameters)
            for (dictKey0, routeparameters0) in responseParameters {
                try responseParametersContainer.encode(routeparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let routeResponseId = routeResponseId {
            try encodeContainer.encode(routeResponseId, forKey: .routeResponseId)
        }
        if let routeResponseKey = routeResponseKey {
            try encodeContainer.encode(routeResponseKey, forKey: .routeResponseKey)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelSelectionExpression)
        modelSelectionExpression = modelSelectionExpressionDecoded
        let responseModelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .responseModels)
        var responseModelsDecoded0: [String:String]? = nil
        if let responseModelsContainer = responseModelsContainer {
            responseModelsDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween1and1280) in responseModelsContainer {
                responseModelsDecoded0?[key0] = stringwithlengthbetween1and1280
            }
        }
        responseModels = responseModelsDecoded0
        let responseParametersContainer = try containerValues.decodeIfPresent([String:ParameterConstraints].self, forKey: .responseParameters)
        var responseParametersDecoded0: [String:ParameterConstraints]? = nil
        if let responseParametersContainer = responseParametersContainer {
            responseParametersDecoded0 = [String:ParameterConstraints]()
            for (key0, parameterconstraints0) in responseParametersContainer {
                responseParametersDecoded0?[key0] = parameterconstraints0
            }
        }
        responseParameters = responseParametersDecoded0
        let routeResponseIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeResponseId)
        routeResponseId = routeResponseIdDecoded
        let routeResponseKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeResponseKey)
        routeResponseKey = routeResponseKeyDecoded
    }
}
