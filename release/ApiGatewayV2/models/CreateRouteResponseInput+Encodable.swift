// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRouteResponseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case modelSelectionExpression = "modelSelectionExpression"
        case responseModels = "responseModels"
        case responseParameters = "responseParameters"
        case routeResponseKey = "routeResponseKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelSelectionExpression = modelSelectionExpression {
            try encodeContainer.encode(modelSelectionExpression, forKey: .modelSelectionExpression)
        }
        if let responseModels = responseModels {
            var responseModelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseModels)
            for (dictKey0, routemodels0) in responseModels {
                try responseModelsContainer.encode(routemodels0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .responseParameters)
            for (dictKey0, routeparameters0) in responseParameters {
                try responseParametersContainer.encode(routeparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let routeResponseKey = routeResponseKey {
            try encodeContainer.encode(routeResponseKey, forKey: .routeResponseKey)
        }
    }
}
