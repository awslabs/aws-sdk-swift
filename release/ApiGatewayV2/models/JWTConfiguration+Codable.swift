// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JWTConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audience = "audience"
        case issuer = "issuer"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audience = audience {
            var audienceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audience)
            for __listof__string0 in audience {
                try audienceContainer.encode(__listof__string0)
            }
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audienceContainer = try containerValues.decodeIfPresent([String].self, forKey: .audience)
        var audienceDecoded0:[String]? = nil
        if let audienceContainer = audienceContainer {
            audienceDecoded0 = [String]()
            for string0 in audienceContainer {
                audienceDecoded0?.append(string0)
            }
        }
        audience = audienceDecoded0
        let issuerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuer)
        issuer = issuerDecoded
    }
}
