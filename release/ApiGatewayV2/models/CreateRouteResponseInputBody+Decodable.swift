// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRouteResponseInputBody: Equatable {
    public let modelSelectionExpression: String?
    public let responseModels: [String:String]?
    public let responseParameters: [String:ParameterConstraints]?
    public let routeResponseKey: String?
}

extension CreateRouteResponseInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case modelSelectionExpression = "modelSelectionExpression"
        case responseModels = "responseModels"
        case responseParameters = "responseParameters"
        case routeResponseKey = "routeResponseKey"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelSelectionExpression)
        modelSelectionExpression = modelSelectionExpressionDecoded
        let responseModelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .responseModels)
        var responseModelsDecoded0: [String:String]? = nil
        if let responseModelsContainer = responseModelsContainer {
            responseModelsDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween1and1280) in responseModelsContainer {
                responseModelsDecoded0?[key0] = stringwithlengthbetween1and1280
            }
        }
        responseModels = responseModelsDecoded0
        let responseParametersContainer = try containerValues.decodeIfPresent([String:ParameterConstraints].self, forKey: .responseParameters)
        var responseParametersDecoded0: [String:ParameterConstraints]? = nil
        if let responseParametersContainer = responseParametersContainer {
            responseParametersDecoded0 = [String:ParameterConstraints]()
            for (key0, parameterconstraints0) in responseParametersContainer {
                responseParametersDecoded0?[key0] = parameterconstraints0
            }
        }
        responseParameters = responseParametersDecoded0
        let routeResponseKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeResponseKey)
        routeResponseKey = routeResponseKeyDecoded
    }
}
