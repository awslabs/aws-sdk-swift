// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateIntegrationInputBody: Equatable {
    public let connectionId: String?
    public let connectionType: ConnectionType?
    public let contentHandlingStrategy: ContentHandlingStrategy?
    public let credentialsArn: String?
    public let description: String?
    public let integrationMethod: String?
    public let integrationSubtype: String?
    public let integrationType: IntegrationType?
    public let integrationUri: String?
    public let passthroughBehavior: PassthroughBehavior?
    public let payloadFormatVersion: String?
    public let requestParameters: [String:String]?
    public let requestTemplates: [String:String]?
    public let responseParameters: [String:[String:String]?]?
    public let templateSelectionExpression: String?
    public let timeoutInMillis: Int
    public let tlsConfig: TlsConfigInput?
}

extension UpdateIntegrationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case connectionId = "connectionId"
        case connectionType = "connectionType"
        case contentHandlingStrategy = "contentHandlingStrategy"
        case credentialsArn = "credentialsArn"
        case description = "description"
        case integrationMethod = "integrationMethod"
        case integrationSubtype = "integrationSubtype"
        case integrationType = "integrationType"
        case integrationUri = "integrationUri"
        case passthroughBehavior = "passthroughBehavior"
        case payloadFormatVersion = "payloadFormatVersion"
        case requestParameters = "requestParameters"
        case requestTemplates = "requestTemplates"
        case responseParameters = "responseParameters"
        case templateSelectionExpression = "templateSelectionExpression"
        case timeoutInMillis = "timeoutInMillis"
        case tlsConfig = "tlsConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let contentHandlingStrategyDecoded = try containerValues.decodeIfPresent(ContentHandlingStrategy.self, forKey: .contentHandlingStrategy)
        contentHandlingStrategy = contentHandlingStrategyDecoded
        let credentialsArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .credentialsArn)
        credentialsArn = credentialsArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let integrationMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationMethod)
        integrationMethod = integrationMethodDecoded
        let integrationSubtypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationSubtype)
        integrationSubtype = integrationSubtypeDecoded
        let integrationTypeDecoded = try containerValues.decodeIfPresent(IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationUri)
        integrationUri = integrationUriDecoded
        let passthroughBehaviorDecoded = try containerValues.decodeIfPresent(PassthroughBehavior.self, forKey: .passthroughBehavior)
        passthroughBehavior = passthroughBehaviorDecoded
        let payloadFormatVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .payloadFormatVersion)
        payloadFormatVersion = payloadFormatVersionDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestParameters)
        var requestParametersDecoded0: [String:String]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween1and5120) in requestParametersContainer {
                requestParametersDecoded0?[key0] = stringwithlengthbetween1and5120
            }
        }
        requestParameters = requestParametersDecoded0
        let requestTemplatesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestTemplates)
        var requestTemplatesDecoded0: [String:String]? = nil
        if let requestTemplatesContainer = requestTemplatesContainer {
            requestTemplatesDecoded0 = [String:String]()
            for (key0, stringwithlengthbetween0and32k0) in requestTemplatesContainer {
                requestTemplatesDecoded0?[key0] = stringwithlengthbetween0and32k0
            }
        }
        requestTemplates = requestTemplatesDecoded0
        let responseParametersContainer = try containerValues.decodeIfPresent([String:[String:String]?].self, forKey: .responseParameters)
        var responseParametersDecoded0: [String:[String:String]?]? = nil
        if let responseParametersContainer = responseParametersContainer {
            responseParametersDecoded0 = [String:[String:String]?]()
            for (key0, integrationparameters0) in responseParametersContainer {
                var integrationparameters0Decoded0 = [String:String]()
                if let integrationparameters0 = integrationparameters0 {
                    for (key1, stringwithlengthbetween1and5121) in integrationparameters0 {
                        integrationparameters0Decoded0[key1] = stringwithlengthbetween1and5121
                    }
                }
                responseParametersDecoded0?[key0] = integrationparameters0Decoded0
            }
        }
        responseParameters = responseParametersDecoded0
        let templateSelectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateSelectionExpression)
        templateSelectionExpression = templateSelectionExpressionDecoded
        let timeoutInMillisDecoded = try containerValues.decode(Int.self, forKey: .timeoutInMillis)
        timeoutInMillis = timeoutInMillisDecoded
        let tlsConfigDecoded = try containerValues.decodeIfPresent(TlsConfigInput.self, forKey: .tlsConfig)
        tlsConfig = tlsConfigDecoded
    }
}
