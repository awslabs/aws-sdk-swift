// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRouteInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiKeyRequired = "apiKeyRequired"
        case authorizationScopes = "authorizationScopes"
        case authorizationType = "authorizationType"
        case authorizerId = "authorizerId"
        case modelSelectionExpression = "modelSelectionExpression"
        case operationName = "operationName"
        case requestModels = "requestModels"
        case requestParameters = "requestParameters"
        case routeKey = "routeKey"
        case routeResponseSelectionExpression = "routeResponseSelectionExpression"
        case target = "target"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if apiKeyRequired != false {
            try encodeContainer.encode(apiKeyRequired, forKey: .apiKeyRequired)
        }
        if let authorizationScopes = authorizationScopes {
            var authorizationScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorizationScopes)
            for authorizationscopes0 in authorizationScopes {
                try authorizationScopesContainer.encode(authorizationscopes0)
            }
        }
        if let authorizationType = authorizationType {
            try encodeContainer.encode(authorizationType.rawValue, forKey: .authorizationType)
        }
        if let authorizerId = authorizerId {
            try encodeContainer.encode(authorizerId, forKey: .authorizerId)
        }
        if let modelSelectionExpression = modelSelectionExpression {
            try encodeContainer.encode(modelSelectionExpression, forKey: .modelSelectionExpression)
        }
        if let operationName = operationName {
            try encodeContainer.encode(operationName, forKey: .operationName)
        }
        if let requestModels = requestModels {
            var requestModelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestModels)
            for (dictKey0, routemodels0) in requestModels {
                try requestModelsContainer.encode(routemodels0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestParameters)
            for (dictKey0, routeparameters0) in requestParameters {
                try requestParametersContainer.encode(routeparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let routeKey = routeKey {
            try encodeContainer.encode(routeKey, forKey: .routeKey)
        }
        if let routeResponseSelectionExpression = routeResponseSelectionExpression {
            try encodeContainer.encode(routeResponseSelectionExpression, forKey: .routeResponseSelectionExpression)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}
