// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ReimportApiOutput: Equatable {
    /// <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
    public let apiEndpoint: String?
    /// <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
    public let apiGatewayManaged: Bool
    /// <p>The API ID.</p>
    public let apiId: String?
    /// <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
    public let apiKeySelectionExpression: String?
    /// <p>A CORS configuration. Supported only for HTTP APIs.</p>
    public let corsConfiguration: Cors?
    /// <p>The timestamp when the API was created.</p>
    public let createdDate: Date?
    /// <p>The description of the API.</p>
    public let description: String?
    /// <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
    public let disableExecuteApiEndpoint: Bool
    /// <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
    public let disableSchemaValidation: Bool
    /// <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
    public let importInfo: [String]?
    /// <p>The name of the API.</p>
    public let name: String?
    /// <p>The API protocol.</p>
    public let protocolType: ProtocolType?
    /// <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
    public let routeSelectionExpression: String?
    /// <p>A collection of tags associated with the API.</p>
    public let tags: [String:String]?
    /// <p>A version identifier for the API.</p>
    public let version: String?
    /// <p>The warning messages reported when failonwarnings is turned on during API import.</p>
    public let warnings: [String]?

    public init (
        apiEndpoint: String? = nil,
        apiGatewayManaged: Bool = false,
        apiId: String? = nil,
        apiKeySelectionExpression: String? = nil,
        corsConfiguration: Cors? = nil,
        createdDate: Date? = nil,
        description: String? = nil,
        disableExecuteApiEndpoint: Bool = false,
        disableSchemaValidation: Bool = false,
        importInfo: [String]? = nil,
        name: String? = nil,
        protocolType: ProtocolType? = nil,
        routeSelectionExpression: String? = nil,
        tags: [String:String]? = nil,
        version: String? = nil,
        warnings: [String]? = nil
    )
    {
        self.apiEndpoint = apiEndpoint
        self.apiGatewayManaged = apiGatewayManaged
        self.apiId = apiId
        self.apiKeySelectionExpression = apiKeySelectionExpression
        self.corsConfiguration = corsConfiguration
        self.createdDate = createdDate
        self.description = description
        self.disableExecuteApiEndpoint = disableExecuteApiEndpoint
        self.disableSchemaValidation = disableSchemaValidation
        self.importInfo = importInfo
        self.name = name
        self.protocolType = protocolType
        self.routeSelectionExpression = routeSelectionExpression
        self.tags = tags
        self.version = version
        self.warnings = warnings
    }
}
