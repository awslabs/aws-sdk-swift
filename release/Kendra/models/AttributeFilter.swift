// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides filtering the query results based on document
///          attributes.</p>
///          <p>When you use the <code>AndAllFilters</code> or
///             <code>OrAllFilters</code>, filters you can use 2 layers under the
///          first attribute filter. For example, you can use:</p>
///          <p>
///             <code><AndAllFilters></code>
///          </p>
///          <ol>
///             <li>
///                <p>
///                   <code> <OrAllFilters></code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code> <EqualTo></code>
///                </p>
///             </li>
///          </ol>
///          <p>If you use more than 2 layers, you receive a
///             <code>ValidationException</code> exception with the message
///             "<code>AttributeFilter</code> cannot have a depth of more than
///          2."</p>
public struct AttributeFilter: Equatable {
    /// <p>Performs a logical <code>AND</code> operation on all supplied
    ///          filters.</p>
    public let andAllFilters: [AttributeFilter]?
    /// <p>Returns true when a document contains all of the specified document
    ///          attributes. This filter is only applicable to
    ///             <code>StringListValue</code> metadata.</p>
    public let containsAll: DocumentAttribute?
    /// <p>Returns true when a document contains any of the specified document
    ///          attributes. This filter is only applicable to
    ///             <code>StringListValue</code> metadata.</p>
    public let containsAny: DocumentAttribute?
    /// <p>Performs an equals operation on two document attributes.</p>
    public let equalsTo: DocumentAttribute?
    /// <p>Performs a greater than operation on two document attributes. Use
    ///          with a document attribute of type <code>Integer</code> or
    ///             <code>Long</code>.</p>
    public let greaterThan: DocumentAttribute?
    /// <p>Performs a greater or equals than operation on two document
    ///          attributes. Use with a document attribute of type <code>Integer</code>
    ///          or <code>Long</code>.</p>
    public let greaterThanOrEquals: DocumentAttribute?
    /// <p>Performs a less than operation on two document attributes. Use with
    ///          a document attribute of type <code>Integer</code> or
    ///          <code>Long</code>.</p>
    public let lessThan: DocumentAttribute?
    /// <p>Performs a less than or equals operation on two document attributes.
    ///          Use with a document attribute of type <code>Integer</code> or
    ///             <code>Long</code>.</p>
    public let lessThanOrEquals: DocumentAttribute?
    /// <p>Performs a logical <code>NOT</code> operation on all supplied
    ///          filters.</p>
    public let notFilter: Box<AttributeFilter>?
    /// <p>Performs a logical <code>OR</code> operation on all supplied
    ///          filters.</p>
    public let orAllFilters: [AttributeFilter]?

    public init (
        andAllFilters: [AttributeFilter]? = nil,
        containsAll: DocumentAttribute? = nil,
        containsAny: DocumentAttribute? = nil,
        equalsTo: DocumentAttribute? = nil,
        greaterThan: DocumentAttribute? = nil,
        greaterThanOrEquals: DocumentAttribute? = nil,
        lessThan: DocumentAttribute? = nil,
        lessThanOrEquals: DocumentAttribute? = nil,
        notFilter: Box<AttributeFilter>? = nil,
        orAllFilters: [AttributeFilter]? = nil
    )
    {
        self.andAllFilters = andAllFilters
        self.containsAll = containsAll
        self.containsAny = containsAny
        self.equalsTo = equalsTo
        self.greaterThan = greaterThan
        self.greaterThanOrEquals = greaterThanOrEquals
        self.lessThan = lessThan
        self.lessThanOrEquals = lessThanOrEquals
        self.notFilter = notFilter
        self.orAllFilters = orAllFilters
    }
}
