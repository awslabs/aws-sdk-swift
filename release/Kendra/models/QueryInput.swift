// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct QueryInput: Equatable {
    /// <p>Enables filtered searches based on document attributes. You can only
    ///          provide one attribute filter; however, the <code>AndAllFilters</code>,
    ///             <code>NotFilter</code>, and <code>OrAllFilters</code> parameters
    ///          contain a list of other filters.</p>
    ///          <p>The <code>AttributeFilter</code> parameter enables you to create a
    ///          set of filtering rules that a document must satisfy to be included in
    ///          the query results.</p>
    public let attributeFilter: AttributeFilter?
    /// <p>Overrides relevance tuning configurations of fields or attributes set at the index level.</p>
    ///          <p>If you use this API to override the relevance tuning configured at the index
    ///          level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning.</p>
    ///          <p>If there is relevance tuning configured at the index level, but you do not use this API
    ///          to override any relevance tuning in the index, then Amazon Kendra uses the relevance tuning that is configured at the index level.</p>
    ///          <p>If there is relevance tuning configured for fields at the index level,
    ///          but you use this API to override only some of these fields, then for the fields you did not override,
    ///          the importance is set to 1.</p>
    public let documentRelevanceOverrideConfigurations: [DocumentRelevanceConfiguration]?
    /// <p>An array of documents attributes. Amazon Kendra returns a count for
    ///          each attribute key specified. You can use this information to help
    ///          narrow the search for your user.</p>
    public let facets: [Facet]?
    /// <p>The unique identifier of the index to search. The identifier is
    ///          returned in the response from the <code>CreateIndex</code>
    ///          operation.</p>
    public let indexId: String?
    /// <p>Query results are returned in pages the size of the
    ///             <code>PageSize</code> parameter. By default, Amazon Kendra returns
    ///          the first page of results. Use this parameter to get result pages after
    ///          the first one.</p>
    public let pageNumber: Int?
    /// <p>Sets the number of results that are returned in each page of
    ///          results. The default page size is 10. The maximum number of results
    ///          returned is 100. If you ask for more than 100 results, only 100 are
    ///          returned.</p>
    public let pageSize: Int?
    /// <p>Sets the type of query. Only results for the specified query type
    ///          are returned.</p>
    public let queryResultTypeFilter: QueryResultType?
    /// <p>The text to search for.</p>
    public let queryText: String?
    /// <p>An array of document attributes to include in the response. No other
    ///          document attributes are included in the response. By default all
    ///          document attributes are included in the response. </p>
    public let requestedDocumentAttributes: [String]?
    /// <p>Provides information that determines how the results of the query
    ///          are sorted. You can set the field that Amazon Kendra should sort the results
    ///          on, and specify whether the results should be sorted in ascending or
    ///          descending order. In the case of ties in sorting the results, the
    ///          results are sorted by relevance.</p>
    ///          <p>If you don't provide sorting configuration, the results are sorted
    ///          by the relevance that Amazon Kendra determines for the result.</p>
    public let sortingConfiguration: SortingConfiguration?
    /// <p>The user context token.</p>
    public let userContext: UserContext?
    /// <p>Provides an identifier for a specific user. The
    ///             <code>VisitorId</code> should be a unique identifier, such as a
    ///          GUID. Don't use personally identifiable information, such as the user's
    ///          email address, as the <code>VisitorId</code>.</p>
    public let visitorId: String?

    public init (
        attributeFilter: AttributeFilter? = nil,
        documentRelevanceOverrideConfigurations: [DocumentRelevanceConfiguration]? = nil,
        facets: [Facet]? = nil,
        indexId: String? = nil,
        pageNumber: Int? = nil,
        pageSize: Int? = nil,
        queryResultTypeFilter: QueryResultType? = nil,
        queryText: String? = nil,
        requestedDocumentAttributes: [String]? = nil,
        sortingConfiguration: SortingConfiguration? = nil,
        userContext: UserContext? = nil,
        visitorId: String? = nil
    )
    {
        self.attributeFilter = attributeFilter
        self.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations
        self.facets = facets
        self.indexId = indexId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.queryResultTypeFilter = queryResultTypeFilter
        self.queryText = queryText
        self.requestedDocumentAttributes = requestedDocumentAttributes
        self.sortingConfiguration = sortingConfiguration
        self.userContext = userContext
        self.visitorId = visitorId
    }
}
