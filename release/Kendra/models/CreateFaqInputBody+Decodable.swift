// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFaqInputBody: Equatable {
    public let indexId: String?
    public let name: String?
    public let description: String?
    public let s3Path: S3Path?
    public let roleArn: String?
    public let tags: [Tag]?
    public let fileFormat: FaqFileFormat?
    public let clientToken: String?
}

extension CreateFaqInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case fileFormat = "FileFormat"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let fileFormatDecoded = try containerValues.decodeIfPresent(FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
