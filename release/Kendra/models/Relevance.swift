// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides information for manually tuning the relevance of a field
///             in a search. When a query includes terms that match the field, the
///             results are given a boost in the response based on these tuning
///             parameters.</p>
public struct Relevance: Equatable {
    /// <p>Specifies the time period that the boost applies to. For example,
    ///             to make the boost apply to documents with the field value within the
    ///             last month, you would use "2628000s". Once the field value is beyond
    ///             the specified range, the effect of the boost drops off. The higher
    ///             the importance, the faster the effect drops off. If you don't
    ///             specify a value, the default is 3 months. The value of the field is
    ///             a numeric string followed by the character "s", for example "86400s"
    ///             for one day, or "604800s" for one week. </p>
    ///         <p>Only applies to <code>DATE</code> fields.</p>
    public let duration: String?
    /// <p>Indicates that this field determines how "fresh" a document is.
    ///             For example, if document 1 was created on November 5, and document 2
    ///             was created on October 31, document 1 is "fresher" than document 2.
    ///             You can only set the <code>Freshness</code> field on one
    ///                 <code>DATE</code> type field. Only applies to <code>DATE</code>
    ///             fields.</p>
    public let freshness: Bool?
    /// <p>The relative importance of the field in the search. Larger numbers
    ///             provide more of a boost than smaller numbers.</p>
    public let importance: Int?
    /// <p>Determines how values should be interpreted.</p>
    ///         <p>When the <code>RankOrder</code> field is <code>ASCENDING</code>,
    ///             higher numbers are better. For example, a document with a rating
    ///             score of 10 is higher ranking than a document with a rating score of
    ///             1.</p>
    ///         <p>When the <code>RankOrder</code> field is <code>DESCENDING</code>,
    ///             lower numbers are better. For example, in a task tracking
    ///             application, a priority 1 task is more important than a priority 5
    ///             task.</p>
    ///         <p>Only applies to <code>LONG</code> and <code>DOUBLE</code>
    ///             fields.</p>
    public let rankOrder: Order?
    /// <p>A list of values that should be given a different boost when they
    ///             appear in the result list. For example, if you are boosting a field
    ///             called "department," query terms that match the department field are
    ///             boosted in the result. However, you can add entries from the
    ///             department field to boost documents with those values higher. </p>
    ///         <p>For example, you can add entries to the map with names of
    ///             departments. If you add "HR",5 and "Legal",3 those departments are
    ///             given special attention when they appear in the metadata of a
    ///             document. When those terms appear they are given the specified
    ///             importance instead of the regular importance for the boost.</p>
    public let valueImportanceMap: [String:Int]?

    public init (
        duration: String? = nil,
        freshness: Bool? = nil,
        importance: Int? = nil,
        rankOrder: Order? = nil,
        valueImportanceMap: [String:Int]? = nil
    )
    {
        self.duration = duration
        self.freshness = freshness
        self.importance = importance
        self.rankOrder = rankOrder
        self.valueImportanceMap = valueImportanceMap
    }
}
