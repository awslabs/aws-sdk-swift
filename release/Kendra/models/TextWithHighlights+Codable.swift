// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextWithHighlights: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case highlights = "Highlights"
        case text = "Text"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let highlights = highlights {
            var highlightsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .highlights)
            for highlightlist0 in highlights {
                try highlightsContainer.encode(highlightlist0)
            }
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(String.self, forKey: .text)
        text = textDecoded
        let highlightsContainer = try containerValues.decodeIfPresent([Highlight].self, forKey: .highlights)
        var highlightsDecoded0:[Highlight]? = nil
        if let highlightsContainer = highlightsContainer {
            highlightsDecoded0 = [Highlight]()
            for structure0 in highlightsContainer {
                highlightsDecoded0?.append(structure0)
            }
        }
        highlights = highlightsDecoded0
    }
}
