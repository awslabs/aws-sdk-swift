// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListIndicesOutputBody: Equatable {
    public let indexConfigurationSummaryItems: [IndexConfigurationSummary]?
    public let nextToken: String?
}

extension ListIndicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case indexConfigurationSummaryItems = "IndexConfigurationSummaryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexConfigurationSummaryItemsContainer = try containerValues.decodeIfPresent([IndexConfigurationSummary].self, forKey: .indexConfigurationSummaryItems)
        var indexConfigurationSummaryItemsDecoded0:[IndexConfigurationSummary]? = nil
        if let indexConfigurationSummaryItemsContainer = indexConfigurationSummaryItemsContainer {
            indexConfigurationSummaryItemsDecoded0 = [IndexConfigurationSummary]()
            for structure0 in indexConfigurationSummaryItemsContainer {
                indexConfigurationSummaryItemsDecoded0?.append(structure0)
            }
        }
        indexConfigurationSummaryItems = indexConfigurationSummaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
