// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateValue = "DateValue"
        case longValue = "LongValue"
        case stringListValue = "StringListValue"
        case stringValue = "StringValue"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .dateValue(dateValue):
                if let dateValue = dateValue {
                    try container.encode(dateValue.timeIntervalSince1970, forKey: .dateValue)
                }
            case let .longValue(longValue):
                if let longValue = longValue {
                    try container.encode(longValue, forKey: .longValue)
                }
            case let .stringListValue(stringListValue):
                if let stringListValue = stringListValue {
                    var stringListValueContainer = container.nestedUnkeyedContainer(forKey: .stringListValue)
                    for documentattributestringlistvalue0 in stringListValue {
                        try stringListValueContainer.encode(documentattributestringlistvalue0)
                    }
                }
            case let .stringValue(stringValue):
                if let stringValue = stringValue {
                    try container.encode(stringValue, forKey: .stringValue)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try values.decodeIfPresent(String.self, forKey: .stringValue)
        if let stringValue = stringValueDecoded {
            self = .stringValue(stringValue)
            return
        }
        let stringListValueContainer = try values.decodeIfPresent([String].self, forKey: .stringListValue)
        var stringListValueDecoded0:[String]? = nil
        if let stringListValueContainer = stringListValueContainer {
            stringListValueDecoded0 = [String]()
            for string0 in stringListValueContainer {
                stringListValueDecoded0?.append(string0)
            }
        }
        if let stringListValue = stringListValueDecoded0 {
            self = .stringListValue(stringListValue)
            return
        }
        let longValueDecoded = try values.decodeIfPresent(Int.self, forKey: .longValue)
        if let longValue = longValueDecoded {
            self = .longValue(longValue)
            return
        }
        let dateValueDecoded = try values.decodeIfPresent(Date.self, forKey: .dateValue)
        if let dateValue = dateValueDecoded {
            self = .dateValue(dateValue)
            return
        }
        self = .sdkUnknown("")
    }
}
