// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Relevance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case duration = "Duration"
        case freshness = "Freshness"
        case importance = "Importance"
        case rankOrder = "RankOrder"
        case valueImportanceMap = "ValueImportanceMap"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let freshness = freshness {
            try encodeContainer.encode(freshness, forKey: .freshness)
        }
        if let importance = importance {
            try encodeContainer.encode(importance, forKey: .importance)
        }
        if let rankOrder = rankOrder {
            try encodeContainer.encode(rankOrder.rawValue, forKey: .rankOrder)
        }
        if let valueImportanceMap = valueImportanceMap {
            var valueImportanceMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .valueImportanceMap)
            for (dictKey0, valueimportancemap0) in valueImportanceMap {
                try valueImportanceMapContainer.encode(valueimportancemap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let freshnessDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .freshness)
        freshness = freshnessDecoded
        let importanceDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .importance)
        importance = importanceDecoded
        let durationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .duration)
        duration = durationDecoded
        let rankOrderDecoded = try containerValues.decodeIfPresent(Order.self, forKey: .rankOrder)
        rankOrder = rankOrderDecoded
        let valueImportanceMapContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .valueImportanceMap)
        var valueImportanceMapDecoded0: [String:Int]? = nil
        if let valueImportanceMapContainer = valueImportanceMapContainer {
            valueImportanceMapDecoded0 = [String:Int]()
            for (key0, importance0) in valueImportanceMapContainer {
                valueImportanceMapDecoded0?[key0] = importance0
            }
        }
        valueImportanceMap = valueImportanceMapDecoded0
    }
}
