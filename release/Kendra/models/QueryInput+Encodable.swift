// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QueryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeFilter = "AttributeFilter"
        case documentRelevanceOverrideConfigurations = "DocumentRelevanceOverrideConfigurations"
        case facets = "Facets"
        case indexId = "IndexId"
        case pageNumber = "PageNumber"
        case pageSize = "PageSize"
        case queryResultTypeFilter = "QueryResultTypeFilter"
        case queryText = "QueryText"
        case requestedDocumentAttributes = "RequestedDocumentAttributes"
        case sortingConfiguration = "SortingConfiguration"
        case userContext = "UserContext"
        case visitorId = "VisitorId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeFilter = attributeFilter {
            try encodeContainer.encode(attributeFilter, forKey: .attributeFilter)
        }
        if let documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations {
            var documentRelevanceOverrideConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentRelevanceOverrideConfigurations)
            for documentrelevanceoverrideconfigurationlist0 in documentRelevanceOverrideConfigurations {
                try documentRelevanceOverrideConfigurationsContainer.encode(documentrelevanceoverrideconfigurationlist0)
            }
        }
        if let facets = facets {
            var facetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .facets)
            for facetlist0 in facets {
                try facetsContainer.encode(facetlist0)
            }
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let pageNumber = pageNumber {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
        if let pageSize = pageSize {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
        if let queryResultTypeFilter = queryResultTypeFilter {
            try encodeContainer.encode(queryResultTypeFilter.rawValue, forKey: .queryResultTypeFilter)
        }
        if let queryText = queryText {
            try encodeContainer.encode(queryText, forKey: .queryText)
        }
        if let requestedDocumentAttributes = requestedDocumentAttributes {
            var requestedDocumentAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedDocumentAttributes)
            for documentattributekeylist0 in requestedDocumentAttributes {
                try requestedDocumentAttributesContainer.encode(documentattributekeylist0)
            }
        }
        if let sortingConfiguration = sortingConfiguration {
            try encodeContainer.encode(sortingConfiguration, forKey: .sortingConfiguration)
        }
        if let userContext = userContext {
            try encodeContainer.encode(userContext, forKey: .userContext)
        }
        if let visitorId = visitorId {
            try encodeContainer.encode(visitorId, forKey: .visitorId)
        }
    }
}
