// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JwtTokenTypeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case claimRegex = "ClaimRegex"
        case groupAttributeField = "GroupAttributeField"
        case issuer = "Issuer"
        case keyLocation = "KeyLocation"
        case secretManagerArn = "SecretManagerArn"
        case uRL = "URL"
        case userNameAttributeField = "UserNameAttributeField"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let claimRegex = claimRegex {
            try encodeContainer.encode(claimRegex, forKey: .claimRegex)
        }
        if let groupAttributeField = groupAttributeField {
            try encodeContainer.encode(groupAttributeField, forKey: .groupAttributeField)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyLocation = keyLocation {
            try encodeContainer.encode(keyLocation.rawValue, forKey: .keyLocation)
        }
        if let secretManagerArn = secretManagerArn {
            try encodeContainer.encode(secretManagerArn, forKey: .secretManagerArn)
        }
        if let uRL = uRL {
            try encodeContainer.encode(uRL, forKey: .uRL)
        }
        if let userNameAttributeField = userNameAttributeField {
            try encodeContainer.encode(userNameAttributeField, forKey: .userNameAttributeField)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyLocationDecoded = try containerValues.decodeIfPresent(KeyLocation.self, forKey: .keyLocation)
        keyLocation = keyLocationDecoded
        let uRLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uRL)
        uRL = uRLDecoded
        let secretManagerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretManagerArn)
        secretManagerArn = secretManagerArnDecoded
        let userNameAttributeFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userNameAttributeField)
        userNameAttributeField = userNameAttributeFieldDecoded
        let groupAttributeFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupAttributeField)
        groupAttributeField = groupAttributeFieldDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuer)
        issuer = issuerDecoded
        let claimRegexDecoded = try containerValues.decodeIfPresent(String.self, forKey: .claimRegex)
        claimRegex = claimRegexDecoded
    }
}
