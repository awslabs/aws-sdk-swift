// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aclConfiguration = "AclConfiguration"
        case columnConfiguration = "ColumnConfiguration"
        case connectionConfiguration = "ConnectionConfiguration"
        case databaseEngineType = "DatabaseEngineType"
        case sqlConfiguration = "SqlConfiguration"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aclConfiguration = aclConfiguration {
            try encodeContainer.encode(aclConfiguration, forKey: .aclConfiguration)
        }
        if let columnConfiguration = columnConfiguration {
            try encodeContainer.encode(columnConfiguration, forKey: .columnConfiguration)
        }
        if let connectionConfiguration = connectionConfiguration {
            try encodeContainer.encode(connectionConfiguration, forKey: .connectionConfiguration)
        }
        if let databaseEngineType = databaseEngineType {
            try encodeContainer.encode(databaseEngineType.rawValue, forKey: .databaseEngineType)
        }
        if let sqlConfiguration = sqlConfiguration {
            try encodeContainer.encode(sqlConfiguration, forKey: .sqlConfiguration)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseEngineTypeDecoded = try containerValues.decodeIfPresent(DatabaseEngineType.self, forKey: .databaseEngineType)
        databaseEngineType = databaseEngineTypeDecoded
        let connectionConfigurationDecoded = try containerValues.decodeIfPresent(ConnectionConfiguration.self, forKey: .connectionConfiguration)
        connectionConfiguration = connectionConfigurationDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let columnConfigurationDecoded = try containerValues.decodeIfPresent(ColumnConfiguration.self, forKey: .columnConfiguration)
        columnConfiguration = columnConfigurationDecoded
        let aclConfigurationDecoded = try containerValues.decodeIfPresent(AclConfiguration.self, forKey: .aclConfiguration)
        aclConfiguration = aclConfigurationDecoded
        let sqlConfigurationDecoded = try containerValues.decodeIfPresent(SqlConfiguration.self, forKey: .sqlConfiguration)
        sqlConfiguration = sqlConfigurationDecoded
    }
}
