// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIndexInputBody: Equatable {
    public let name: String?
    public let edition: IndexEdition?
    public let roleArn: String?
    public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
    public let description: String?
    public let clientToken: String?
    public let tags: [Tag]?
    public let userTokenConfigurations: [UserTokenConfiguration]?
    public let userContextPolicy: UserContextPolicy?
}

extension CreateIndexInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case edition = "Edition"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case tags = "Tags"
        case userContextPolicy = "UserContextPolicy"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let editionDecoded = try containerValues.decodeIfPresent(IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([UserTokenConfiguration].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                userTokenConfigurationsDecoded0?.append(structure0)
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
    }
}
