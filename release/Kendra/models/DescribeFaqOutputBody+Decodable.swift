// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFaqOutputBody: Equatable {
    public let id: String?
    public let indexId: String?
    public let name: String?
    public let description: String?
    public let createdAt: Date?
    public let updatedAt: Date?
    public let s3Path: S3Path?
    public let status: FaqStatus?
    public let roleArn: String?
    public let errorMessage: String?
    public let fileFormat: FaqFileFormat?
}

extension DescribeFaqOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case fileFormat = "FileFormat"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FaqStatus.self, forKey: .status)
        status = statusDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
    }
}
