// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceNowServiceCatalogConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case crawlAttachments = "CrawlAttachments"
        case documentDataFieldName = "DocumentDataFieldName"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case excludeAttachmentFilePatterns = "ExcludeAttachmentFilePatterns"
        case fieldMappings = "FieldMappings"
        case includeAttachmentFilePatterns = "IncludeAttachmentFilePatterns"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if let documentDataFieldName = documentDataFieldName {
            try encodeContainer.encode(documentDataFieldName, forKey: .documentDataFieldName)
        }
        if let documentTitleFieldName = documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let excludeAttachmentFilePatterns = excludeAttachmentFilePatterns {
            var excludeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in excludeAttachmentFilePatterns {
                try excludeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let includeAttachmentFilePatterns = includeAttachmentFilePatterns {
            var includeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in includeAttachmentFilePatterns {
                try includeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crawlAttachmentsDecoded = try containerValues.decode(Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let includeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .includeAttachmentFilePatterns)
        var includeAttachmentFilePatternsDecoded0:[String]? = nil
        if let includeAttachmentFilePatternsContainer = includeAttachmentFilePatternsContainer {
            includeAttachmentFilePatternsDecoded0 = [String]()
            for string0 in includeAttachmentFilePatternsContainer {
                includeAttachmentFilePatternsDecoded0?.append(string0)
            }
        }
        includeAttachmentFilePatterns = includeAttachmentFilePatternsDecoded0
        let excludeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .excludeAttachmentFilePatterns)
        var excludeAttachmentFilePatternsDecoded0:[String]? = nil
        if let excludeAttachmentFilePatternsContainer = excludeAttachmentFilePatternsContainer {
            excludeAttachmentFilePatternsDecoded0 = [String]()
            for string0 in excludeAttachmentFilePatternsContainer {
                excludeAttachmentFilePatternsDecoded0?.append(string0)
            }
        }
        excludeAttachmentFilePatterns = excludeAttachmentFilePatternsDecoded0
        let documentDataFieldNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentDataFieldName)
        documentDataFieldName = documentDataFieldNameDecoded
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([DataSourceToIndexFieldMapping].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                fieldMappingsDecoded0?.append(structure0)
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}
