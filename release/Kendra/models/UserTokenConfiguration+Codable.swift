// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserTokenConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jsonTokenTypeConfiguration = "JsonTokenTypeConfiguration"
        case jwtTokenTypeConfiguration = "JwtTokenTypeConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonTokenTypeConfiguration = jsonTokenTypeConfiguration {
            try encodeContainer.encode(jsonTokenTypeConfiguration, forKey: .jsonTokenTypeConfiguration)
        }
        if let jwtTokenTypeConfiguration = jwtTokenTypeConfiguration {
            try encodeContainer.encode(jwtTokenTypeConfiguration, forKey: .jwtTokenTypeConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jwtTokenTypeConfigurationDecoded = try containerValues.decodeIfPresent(JwtTokenTypeConfiguration.self, forKey: .jwtTokenTypeConfiguration)
        jwtTokenTypeConfiguration = jwtTokenTypeConfigurationDecoded
        let jsonTokenTypeConfigurationDecoded = try containerValues.decodeIfPresent(JsonTokenTypeConfiguration.self, forKey: .jsonTokenTypeConfiguration)
        jsonTokenTypeConfiguration = jsonTokenTypeConfigurationDecoded
    }
}
