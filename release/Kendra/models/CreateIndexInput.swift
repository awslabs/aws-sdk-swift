// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateIndexInput: Equatable {
    /// <p>A token that you provide to identify the request to create an index.
    ///       Multiple calls to the <code>CreateIndex</code> operation with the same
    ///       client token will create only one index.</p>
    public var clientToken: String?
    /// <p>A description for the index.</p>
    public let description: String?
    /// <p>The Amazon Kendra edition to use for the index. Choose
    ///         <code>DEVELOPER_EDITION</code> for indexes intended for development,
    ///       testing, or proof of concept. Use <code>ENTERPRISE_EDITION</code> for your
    ///       production databases. Once you set the edition for an index, it can't be
    ///       changed. </p>
    ///          <p>The <code>Edition</code> parameter is optional. If you don't supply a
    ///       value, the default is <code>ENTERPRISE_EDITION</code>.</p>
    public let edition: IndexEdition?
    /// <p>The name for the new index.</p>
    public let name: String?
    /// <p>An AWS Identity and Access Management (IAM) role that gives
    ///       Amazon Kendra permissions to access your Amazon CloudWatch logs and
    ///       metrics. This is also the role used when you use the
    ///         <code>BatchPutDocument</code> operation to index documents from an
    ///       Amazon S3 bucket.</p>
    public let roleArn: String?
    /// <p>The identifier of the AWS KMS customer managed key (CMK) to use to
    ///       encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support
    ///       asymmetric CMKs.</p>
    public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
    /// <p>A list of key-value pairs that identify the index. You can use the
    ///       tags to identify and organize your resources and to control access to
    ///       resources.</p>
    public let tags: [Tag]?
    /// <p>The user context policy.</p>
    ///          <dl>
    ///             <dt>ATTRIBUTE_FILTER</dt>
    ///             <dd>
    ///                <p>All indexed content is searchable and displayable
    ///                   for all users. If there is an access control list, it
    ///                   is ignored. You can filter on user and group attributes.
    ///                </p>
    ///             </dd>
    ///             <dt>USER_TOKEN</dt>
    ///             <dd>
    ///                <p>Enables SSO and token-based user access control.
    ///                All documents with no access control and all documents
    ///                accessible to the user will be searchable and
    ///                displayable.
    ///                </p>
    ///             </dd>
    ///          </dl>
    public let userContextPolicy: UserContextPolicy?
    /// <p>The user token configuration.</p>
    public let userTokenConfigurations: [UserTokenConfiguration]?

    public init (
        clientToken: String? = nil,
        description: String? = nil,
        edition: IndexEdition? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil,
        tags: [Tag]? = nil,
        userContextPolicy: UserContextPolicy? = nil,
        userTokenConfigurations: [UserTokenConfiguration]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.edition = edition
        self.name = name
        self.roleArn = roleArn
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.tags = tags
        self.userContextPolicy = userContextPolicy
        self.userTokenConfigurations = userTokenConfigurations
    }
}
