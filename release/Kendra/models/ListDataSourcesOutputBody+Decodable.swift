// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataSourcesOutputBody: Equatable {
    public let summaryItems: [DataSourceSummary]?
    public let nextToken: String?
}

extension ListDataSourcesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case summaryItems = "SummaryItems"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryItemsContainer = try containerValues.decodeIfPresent([DataSourceSummary].self, forKey: .summaryItems)
        var summaryItemsDecoded0:[DataSourceSummary]? = nil
        if let summaryItemsContainer = summaryItemsContainer {
            summaryItemsDecoded0 = [DataSourceSummary]()
            for structure0 in summaryItemsContainer {
                summaryItemsDecoded0?.append(structure0)
            }
        }
        summaryItems = summaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
