// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Document: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControlList = "AccessControlList"
        case attributes = "Attributes"
        case blob = "Blob"
        case contentType = "ContentType"
        case id = "Id"
        case s3Path = "S3Path"
        case title = "Title"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlList = accessControlList {
            var accessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessControlList)
            for principallist0 in accessControlList {
                try accessControlListContainer.encode(principallist0)
            }
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for documentattributelist0 in attributes {
                try attributesContainer.encode(documentattributelist0)
            }
        }
        if let blob = blob {
            try encodeContainer.encode(blob.base64EncodedString(), forKey: .blob)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let s3Path = s3Path {
            try encodeContainer.encode(s3Path, forKey: .s3Path)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let blobDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .blob)
        blob = blobDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let attributesContainer = try containerValues.decodeIfPresent([DocumentAttribute].self, forKey: .attributes)
        var attributesDecoded0:[DocumentAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [DocumentAttribute]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
        let accessControlListContainer = try containerValues.decodeIfPresent([Principal].self, forKey: .accessControlList)
        var accessControlListDecoded0:[Principal]? = nil
        if let accessControlListContainer = accessControlListContainer {
            accessControlListDecoded0 = [Principal]()
            for structure0 in accessControlListContainer {
                accessControlListDecoded0?.append(structure0)
            }
        }
        accessControlList = accessControlListDecoded0
        let contentTypeDecoded = try containerValues.decodeIfPresent(ContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
    }
}
