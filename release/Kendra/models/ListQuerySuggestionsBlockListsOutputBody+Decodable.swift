// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQuerySuggestionsBlockListsOutputBody: Equatable {
    public let blockListSummaryItems: [QuerySuggestionsBlockListSummary]?
    public let nextToken: String?
}

extension ListQuerySuggestionsBlockListsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockListSummaryItems = "BlockListSummaryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockListSummaryItemsContainer = try containerValues.decodeIfPresent([QuerySuggestionsBlockListSummary].self, forKey: .blockListSummaryItems)
        var blockListSummaryItemsDecoded0:[QuerySuggestionsBlockListSummary]? = nil
        if let blockListSummaryItemsContainer = blockListSummaryItemsContainer {
            blockListSummaryItemsDecoded0 = [QuerySuggestionsBlockListSummary]()
            for structure0 in blockListSummaryItemsContainer {
                blockListSummaryItemsDecoded0?.append(structure0)
            }
        }
        blockListSummaryItems = blockListSummaryItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
