// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeThesaurusOutputBody: Equatable {
    public let id: String?
    public let indexId: String?
    public let name: String?
    public let description: String?
    public let status: ThesaurusStatus?
    public let errorMessage: String?
    public let createdAt: Date?
    public let updatedAt: Date?
    public let roleArn: String?
    public let sourceS3Path: S3Path?
    public let fileSizeBytes: Int?
    public let termCount: Int?
    public let synonymRuleCount: Int?
}

extension DescribeThesaurusOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case fileSizeBytes = "FileSizeBytes"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
        case roleArn = "RoleArn"
        case sourceS3Path = "SourceS3Path"
        case status = "Status"
        case synonymRuleCount = "SynonymRuleCount"
        case termCount = "TermCount"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let indexIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ThesaurusStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourceS3PathDecoded = try containerValues.decodeIfPresent(S3Path.self, forKey: .sourceS3Path)
        sourceS3Path = sourceS3PathDecoded
        let fileSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .fileSizeBytes)
        fileSizeBytes = fileSizeBytesDecoded
        let termCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .termCount)
        termCount = termCountDecoded
        let synonymRuleCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .synonymRuleCount)
        synonymRuleCount = synonymRuleCountDecoded
    }
}
