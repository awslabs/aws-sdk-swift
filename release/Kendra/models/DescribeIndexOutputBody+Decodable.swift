// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIndexOutputBody: Equatable {
    public let name: String?
    public let id: String?
    public let edition: IndexEdition?
    public let roleArn: String?
    public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
    public let status: IndexStatus?
    public let description: String?
    public let createdAt: Date?
    public let updatedAt: Date?
    public let documentMetadataConfigurations: [DocumentMetadataConfiguration]?
    public let indexStatistics: IndexStatistics?
    public let errorMessage: String?
    public let capacityUnits: CapacityUnitsConfiguration?
    public let userTokenConfigurations: [UserTokenConfiguration]?
    public let userContextPolicy: UserContextPolicy?
}

extension DescribeIndexOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capacityUnits = "CapacityUnits"
        case createdAt = "CreatedAt"
        case description = "Description"
        case documentMetadataConfigurations = "DocumentMetadataConfigurations"
        case edition = "Edition"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case indexStatistics = "IndexStatistics"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case status = "Status"
        case updatedAt = "UpdatedAt"
        case userContextPolicy = "UserContextPolicy"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let editionDecoded = try containerValues.decodeIfPresent(IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IndexStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let documentMetadataConfigurationsContainer = try containerValues.decodeIfPresent([DocumentMetadataConfiguration].self, forKey: .documentMetadataConfigurations)
        var documentMetadataConfigurationsDecoded0:[DocumentMetadataConfiguration]? = nil
        if let documentMetadataConfigurationsContainer = documentMetadataConfigurationsContainer {
            documentMetadataConfigurationsDecoded0 = [DocumentMetadataConfiguration]()
            for structure0 in documentMetadataConfigurationsContainer {
                documentMetadataConfigurationsDecoded0?.append(structure0)
            }
        }
        documentMetadataConfigurations = documentMetadataConfigurationsDecoded0
        let indexStatisticsDecoded = try containerValues.decodeIfPresent(IndexStatistics.self, forKey: .indexStatistics)
        indexStatistics = indexStatisticsDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(CapacityUnitsConfiguration.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([UserTokenConfiguration].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                userTokenConfigurationsDecoded0?.append(structure0)
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
    }
}
