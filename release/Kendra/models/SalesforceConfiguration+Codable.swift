// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SalesforceConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case chatterFeedConfiguration = "ChatterFeedConfiguration"
        case crawlAttachments = "CrawlAttachments"
        case excludeAttachmentFilePatterns = "ExcludeAttachmentFilePatterns"
        case includeAttachmentFilePatterns = "IncludeAttachmentFilePatterns"
        case knowledgeArticleConfiguration = "KnowledgeArticleConfiguration"
        case secretArn = "SecretArn"
        case serverUrl = "ServerUrl"
        case standardObjectAttachmentConfiguration = "StandardObjectAttachmentConfiguration"
        case standardObjectConfigurations = "StandardObjectConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chatterFeedConfiguration = chatterFeedConfiguration {
            try encodeContainer.encode(chatterFeedConfiguration, forKey: .chatterFeedConfiguration)
        }
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if let excludeAttachmentFilePatterns = excludeAttachmentFilePatterns {
            var excludeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in excludeAttachmentFilePatterns {
                try excludeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let includeAttachmentFilePatterns = includeAttachmentFilePatterns {
            var includeAttachmentFilePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeAttachmentFilePatterns)
            for datasourceinclusionsexclusionsstrings0 in includeAttachmentFilePatterns {
                try includeAttachmentFilePatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let knowledgeArticleConfiguration = knowledgeArticleConfiguration {
            try encodeContainer.encode(knowledgeArticleConfiguration, forKey: .knowledgeArticleConfiguration)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let serverUrl = serverUrl {
            try encodeContainer.encode(serverUrl, forKey: .serverUrl)
        }
        if let standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration {
            try encodeContainer.encode(standardObjectAttachmentConfiguration, forKey: .standardObjectAttachmentConfiguration)
        }
        if let standardObjectConfigurations = standardObjectConfigurations {
            var standardObjectConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .standardObjectConfigurations)
            for salesforcestandardobjectconfigurationlist0 in standardObjectConfigurations {
                try standardObjectConfigurationsContainer.encode(salesforcestandardobjectconfigurationlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverUrl)
        serverUrl = serverUrlDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let standardObjectConfigurationsContainer = try containerValues.decodeIfPresent([SalesforceStandardObjectConfiguration].self, forKey: .standardObjectConfigurations)
        var standardObjectConfigurationsDecoded0:[SalesforceStandardObjectConfiguration]? = nil
        if let standardObjectConfigurationsContainer = standardObjectConfigurationsContainer {
            standardObjectConfigurationsDecoded0 = [SalesforceStandardObjectConfiguration]()
            for structure0 in standardObjectConfigurationsContainer {
                standardObjectConfigurationsDecoded0?.append(structure0)
            }
        }
        standardObjectConfigurations = standardObjectConfigurationsDecoded0
        let knowledgeArticleConfigurationDecoded = try containerValues.decodeIfPresent(SalesforceKnowledgeArticleConfiguration.self, forKey: .knowledgeArticleConfiguration)
        knowledgeArticleConfiguration = knowledgeArticleConfigurationDecoded
        let chatterFeedConfigurationDecoded = try containerValues.decodeIfPresent(SalesforceChatterFeedConfiguration.self, forKey: .chatterFeedConfiguration)
        chatterFeedConfiguration = chatterFeedConfigurationDecoded
        let crawlAttachmentsDecoded = try containerValues.decode(Bool.self, forKey: .crawlAttachments)
        crawlAttachments = crawlAttachmentsDecoded
        let standardObjectAttachmentConfigurationDecoded = try containerValues.decodeIfPresent(SalesforceStandardObjectAttachmentConfiguration.self, forKey: .standardObjectAttachmentConfiguration)
        standardObjectAttachmentConfiguration = standardObjectAttachmentConfigurationDecoded
        let includeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .includeAttachmentFilePatterns)
        var includeAttachmentFilePatternsDecoded0:[String]? = nil
        if let includeAttachmentFilePatternsContainer = includeAttachmentFilePatternsContainer {
            includeAttachmentFilePatternsDecoded0 = [String]()
            for string0 in includeAttachmentFilePatternsContainer {
                includeAttachmentFilePatternsDecoded0?.append(string0)
            }
        }
        includeAttachmentFilePatterns = includeAttachmentFilePatternsDecoded0
        let excludeAttachmentFilePatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .excludeAttachmentFilePatterns)
        var excludeAttachmentFilePatternsDecoded0:[String]? = nil
        if let excludeAttachmentFilePatternsContainer = excludeAttachmentFilePatternsContainer {
            excludeAttachmentFilePatternsDecoded0 = [String]()
            for string0 in excludeAttachmentFilePatternsContainer {
                excludeAttachmentFilePatternsDecoded0?.append(string0)
            }
        }
        excludeAttachmentFilePatterns = excludeAttachmentFilePatternsDecoded0
    }
}
