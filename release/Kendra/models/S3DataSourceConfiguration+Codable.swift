// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3DataSourceConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessControlListConfiguration = "AccessControlListConfiguration"
        case bucketName = "BucketName"
        case documentsMetadataConfiguration = "DocumentsMetadataConfiguration"
        case exclusionPatterns = "ExclusionPatterns"
        case inclusionPatterns = "InclusionPatterns"
        case inclusionPrefixes = "InclusionPrefixes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlListConfiguration = accessControlListConfiguration {
            try encodeContainer.encode(accessControlListConfiguration, forKey: .accessControlListConfiguration)
        }
        if let bucketName = bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let documentsMetadataConfiguration = documentsMetadataConfiguration {
            try encodeContainer.encode(documentsMetadataConfiguration, forKey: .documentsMetadataConfiguration)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPrefixes = inclusionPrefixes {
            var inclusionPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPrefixes)
            for datasourceinclusionsexclusionsstrings0 in inclusionPrefixes {
                try inclusionPrefixesContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let inclusionPrefixesContainer = try containerValues.decodeIfPresent([String].self, forKey: .inclusionPrefixes)
        var inclusionPrefixesDecoded0:[String]? = nil
        if let inclusionPrefixesContainer = inclusionPrefixesContainer {
            inclusionPrefixesDecoded0 = [String]()
            for string0 in inclusionPrefixesContainer {
                inclusionPrefixesDecoded0?.append(string0)
            }
        }
        inclusionPrefixes = inclusionPrefixesDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [String]()
            for string0 in inclusionPatternsContainer {
                inclusionPatternsDecoded0?.append(string0)
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([String].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [String]()
            for string0 in exclusionPatternsContainer {
                exclusionPatternsDecoded0?.append(string0)
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let documentsMetadataConfigurationDecoded = try containerValues.decodeIfPresent(DocumentsMetadataConfiguration.self, forKey: .documentsMetadataConfiguration)
        documentsMetadataConfiguration = documentsMetadataConfigurationDecoded
        let accessControlListConfigurationDecoded = try containerValues.decodeIfPresent(AccessControlListConfiguration.self, forKey: .accessControlListConfiguration)
        accessControlListConfiguration = accessControlListConfigurationDecoded
    }
}
