// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon Kendra is a service for indexing large document sets.</p>
public protocol KendraClientProtocol {
    /// <p>Removes one or more documents from an index. The documents must have
    ///       been added with the <code>BatchPutDocument</code> operation.</p>
    ///          <p>The documents are deleted asynchronously. You can see the progress of
    ///       the deletion by using AWS CloudWatch. Any error messages related to the
    ///       processing of the batch are sent to you CloudWatch log.</p>
    func batchDeleteDocument(input: BatchDeleteDocumentInput, completion: @escaping (SdkResult<BatchDeleteDocumentOutputResponse, BatchDeleteDocumentOutputError>) -> Void)
    /// <p>Adds one or more documents to an index.</p>
    ///          <p>The <code>BatchPutDocument</code> operation enables you to ingest
    ///       inline documents or a set of documents stored in an Amazon S3 bucket. Use
    ///       this operation to ingest your text and unstructured text into an index,
    ///       add custom attributes to the documents, and to attach an access control
    ///       list to the documents added to the index.</p>
    ///          <p>The documents are indexed asynchronously. You can see the progress of
    ///       the batch using AWS CloudWatch. Any error messages related to processing
    ///       the batch are sent to your AWS CloudWatch log.</p>
    func batchPutDocument(input: BatchPutDocumentInput, completion: @escaping (SdkResult<BatchPutDocumentOutputResponse, BatchPutDocumentOutputError>) -> Void)
    /// <p>Clears existing query suggestions from an index.</p>
    ///         <p>This deletes existing suggestions only, not the queries
    ///             in the query log. After you clear suggestions, Amazon Kendra learns
    ///             new suggestions based on new queries added to the query log
    ///             from the time you cleared suggestions. If you do not see any
    ///             new suggestions, then please allow Amazon Kendra to collect
    ///             enough queries to learn new suggestions.</p>
    func clearQuerySuggestions(input: ClearQuerySuggestionsInput, completion: @escaping (SdkResult<ClearQuerySuggestionsOutputResponse, ClearQuerySuggestionsOutputError>) -> Void)
    /// <p>Creates a data source that you use to with an Amazon Kendra index. </p>
    ///          <p>You specify a name, data source connector type and description for
    ///       your data source. You also specify configuration information such as
    ///       document metadata (author, source URI, and so on) and user context
    ///       information.</p>
    ///          <p>
    ///             <code>CreateDataSource</code> is a synchronous operation. The
    ///       operation returns 200 if the data source was successfully created.
    ///       Otherwise, an exception is raised.</p>
    func createDataSource(input: CreateDataSourceInput, completion: @escaping (SdkResult<CreateDataSourceOutputResponse, CreateDataSourceOutputError>) -> Void)
    /// <p>Creates an new set of frequently asked question (FAQ) questions and answers.</p>
    func createFaq(input: CreateFaqInput, completion: @escaping (SdkResult<CreateFaqOutputResponse, CreateFaqOutputError>) -> Void)
    /// <p>Creates a new Amazon Kendra index. Index creation is an asynchronous
    ///       operation. To determine if index creation has completed, check the
    ///         <code>Status</code> field returned from a call to
    ///         <code>DescribeIndex</code>. The <code>Status</code> field is set to
    ///         <code>ACTIVE</code> when the index is ready to use.</p>
    ///          <p>Once the index is active you can index your documents using the
    ///         <code>BatchPutDocument</code> operation or using one of the supported
    ///       data sources. </p>
    func createIndex(input: CreateIndexInput, completion: @escaping (SdkResult<CreateIndexOutputResponse, CreateIndexOutputError>) -> Void)
    /// <p>Creates a block list to exlcude certain queries from suggestions.</p>
    ///         <p>Any query that contains words or phrases specified in the block
    ///             list is blocked or filtered out from being shown as a suggestion.</p>
    ///         <p>You need to provide the file location of your block list text file
    ///             in your S3 bucket. In your text file, enter each block word or phrase
    ///             on a separate line.</p>
    ///         <p>For information on the current quota limits for block lists, see
    ///             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
    ///                 for Amazon Kendra</a>.</p>
    func createQuerySuggestionsBlockList(input: CreateQuerySuggestionsBlockListInput, completion: @escaping (SdkResult<CreateQuerySuggestionsBlockListOutputResponse, CreateQuerySuggestionsBlockListOutputError>) -> Void)
    /// <p>Creates a thesaurus for an index. The thesaurus
    ///       contains a list of synonyms in Solr format.</p>
    func createThesaurus(input: CreateThesaurusInput, completion: @escaping (SdkResult<CreateThesaurusOutputResponse, CreateThesaurusOutputError>) -> Void)
    /// <p>Deletes an Amazon Kendra data source. An exception is not thrown if the
    ///       data source is already being deleted. While the data source is being
    ///       deleted, the <code>Status</code> field returned by a call to the
    ///         <code>DescribeDataSource</code> operation is set to
    ///         <code>DELETING</code>. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html">Deleting Data Sources</a>.</p>
    func deleteDataSource(input: DeleteDataSourceInput, completion: @escaping (SdkResult<DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>) -> Void)
    /// <p>Removes an FAQ from an index.</p>
    func deleteFaq(input: DeleteFaqInput, completion: @escaping (SdkResult<DeleteFaqOutputResponse, DeleteFaqOutputError>) -> Void)
    /// <p>Deletes an existing Amazon Kendra index. An exception is not thrown if
    ///       the index is already being deleted. While the index is being deleted, the
    ///         <code>Status</code> field returned by a call to the
    ///         <code>DescribeIndex</code> operation is set to
    ///       <code>DELETING</code>.</p>
    func deleteIndex(input: DeleteIndexInput, completion: @escaping (SdkResult<DeleteIndexOutputResponse, DeleteIndexOutputError>) -> Void)
    /// <p>Deletes a block list used for query suggestions for an index.</p>
    ///         <p>A deleted block list might not take effect right away. Amazon Kendra
    ///             needs to refresh the entire suggestions list to add back the
    ///             queries that were previously blocked.</p>
    func deleteQuerySuggestionsBlockList(input: DeleteQuerySuggestionsBlockListInput, completion: @escaping (SdkResult<DeleteQuerySuggestionsBlockListOutputResponse, DeleteQuerySuggestionsBlockListOutputError>) -> Void)
    /// <p>Deletes an existing Amazon Kendra thesaurus.
    ///       </p>
    func deleteThesaurus(input: DeleteThesaurusInput, completion: @escaping (SdkResult<DeleteThesaurusOutputResponse, DeleteThesaurusOutputError>) -> Void)
    /// <p>Gets information about a Amazon Kendra data source.</p>
    func describeDataSource(input: DescribeDataSourceInput, completion: @escaping (SdkResult<DescribeDataSourceOutputResponse, DescribeDataSourceOutputError>) -> Void)
    /// <p>Gets information about an FAQ list.</p>
    func describeFaq(input: DescribeFaqInput, completion: @escaping (SdkResult<DescribeFaqOutputResponse, DescribeFaqOutputError>) -> Void)
    /// <p>Describes an existing Amazon Kendra index</p>
    func describeIndex(input: DescribeIndexInput, completion: @escaping (SdkResult<DescribeIndexOutputResponse, DescribeIndexOutputError>) -> Void)
    /// <p>Describes a block list used for query suggestions for an index.</p>
    ///         <p>This is used to check the current settings that are applied to a
    ///             block list.</p>
    func describeQuerySuggestionsBlockList(input: DescribeQuerySuggestionsBlockListInput, completion: @escaping (SdkResult<DescribeQuerySuggestionsBlockListOutputResponse, DescribeQuerySuggestionsBlockListOutputError>) -> Void)
    /// <p>Describes the settings of query suggestions for an index.</p>
    ///         <p>This is used to check the current settings applied
    ///             to query suggestions.</p>
    func describeQuerySuggestionsConfig(input: DescribeQuerySuggestionsConfigInput, completion: @escaping (SdkResult<DescribeQuerySuggestionsConfigOutputResponse, DescribeQuerySuggestionsConfigOutputError>) -> Void)
    /// <p>Describes an existing Amazon Kendra thesaurus.</p>
    func describeThesaurus(input: DescribeThesaurusInput, completion: @escaping (SdkResult<DescribeThesaurusOutputResponse, DescribeThesaurusOutputError>) -> Void)
    /// <p>Fetches the queries that are suggested to your users.</p>
    func getQuerySuggestions(input: GetQuerySuggestionsInput, completion: @escaping (SdkResult<GetQuerySuggestionsOutputResponse, GetQuerySuggestionsOutputError>) -> Void)
    /// <p>Lists the data sources that you have created.</p>
    func listDataSources(input: ListDataSourcesInput, completion: @escaping (SdkResult<ListDataSourcesOutputResponse, ListDataSourcesOutputError>) -> Void)
    /// <p>Gets statistics about synchronizing Amazon Kendra with a data
    ///       source.</p>
    func listDataSourceSyncJobs(input: ListDataSourceSyncJobsInput, completion: @escaping (SdkResult<ListDataSourceSyncJobsOutputResponse, ListDataSourceSyncJobsOutputError>) -> Void)
    /// <p>Gets a list of FAQ lists associated with an index.</p>
    func listFaqs(input: ListFaqsInput, completion: @escaping (SdkResult<ListFaqsOutputResponse, ListFaqsOutputError>) -> Void)
    /// <p>Lists the Amazon Kendra indexes that you have created.</p>
    func listIndices(input: ListIndicesInput, completion: @escaping (SdkResult<ListIndicesOutputResponse, ListIndicesOutputError>) -> Void)
    /// <p>Lists the block lists used for query suggestions for an index.</p>
    ///         <p>For information on the current quota limits for block lists, see
    ///             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
    ///                 for Amazon Kendra</a>.</p>
    func listQuerySuggestionsBlockLists(input: ListQuerySuggestionsBlockListsInput, completion: @escaping (SdkResult<ListQuerySuggestionsBlockListsOutputResponse, ListQuerySuggestionsBlockListsOutputError>) -> Void)
    /// <p>Gets a list of tags associated with a specified resource. Indexes,
    ///       FAQs, and data sources can have tags associated with them.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists the Amazon Kendra thesauri associated with an index.</p>
    func listThesauri(input: ListThesauriInput, completion: @escaping (SdkResult<ListThesauriOutputResponse, ListThesauriOutputError>) -> Void)
    /// <p>Searches an active index. Use this API to search your documents
    ///          using query. The <code>Query</code> operation enables to do faceted
    ///          search and to filter results based on document attributes.</p>
    ///          <p>It also enables you to provide user context that Amazon Kendra uses
    ///          to enforce document access control in the search results. </p>
    ///          <p>Amazon Kendra searches your index for text content and question and
    ///          answer (FAQ) content. By default the response contains three types of
    ///          results.</p>
    ///          <ul>
    ///             <li>
    ///                <p>Relevant passages</p>
    ///             </li>
    ///             <li>
    ///                <p>Matching FAQs</p>
    ///             </li>
    ///             <li>
    ///                <p>Relevant documents</p>
    ///             </li>
    ///          </ul>
    ///          <p>You can specify that the query return only one type of result using
    ///          the <code>QueryResultTypeConfig</code> parameter.</p>
    ///          <p>Each query returns the 100 most relevant results. </p>
    func query(input: QueryInput, completion: @escaping (SdkResult<QueryOutputResponse, QueryOutputError>) -> Void)
    /// <p>Starts a synchronization job for a data source. If a synchronization
    ///       job is already in progress, Amazon Kendra returns a
    ///         <code>ResourceInUseException</code> exception.</p>
    func startDataSourceSyncJob(input: StartDataSourceSyncJobInput, completion: @escaping (SdkResult<StartDataSourceSyncJobOutputResponse, StartDataSourceSyncJobOutputError>) -> Void)
    /// <p>Stops a running synchronization job. You can't stop a scheduled
    ///       synchronization job.</p>
    func stopDataSourceSyncJob(input: StopDataSourceSyncJobInput, completion: @escaping (SdkResult<StopDataSourceSyncJobOutputResponse, StopDataSourceSyncJobOutputError>) -> Void)
    /// <p>Enables you to provide feedback to Amazon Kendra to improve the
    ///             performance of the service. </p>
    func submitFeedback(input: SubmitFeedbackInput, completion: @escaping (SdkResult<SubmitFeedbackOutputResponse, SubmitFeedbackOutputError>) -> Void)
    /// <p>Adds the specified tag to the specified index, FAQ, or data source
    ///       resource. If the tag already exists, the existing value is replaced with
    ///       the new value.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes a tag from an index, FAQ, or a data source.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates an existing Amazon Kendra data source.</p>
    func updateDataSource(input: UpdateDataSourceInput, completion: @escaping (SdkResult<UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>) -> Void)
    /// <p>Updates an existing Amazon Kendra index.</p>
    func updateIndex(input: UpdateIndexInput, completion: @escaping (SdkResult<UpdateIndexOutputResponse, UpdateIndexOutputError>) -> Void)
    /// <p>Updates a block list used for query suggestions for an index.</p>
    ///         <p>Updates to a block list might not take effect right away. Amazon Kendra
    ///             needs to refresh the entire suggestions list to apply any updates to the
    ///             block list. Other changes not related to the block list apply immediately.</p>
    ///         <p>If a block list is updating, then you need to wait for the first update to
    ///             finish before submitting another update.</p>
    ///         <p>Amazon Kendra supports partial updates, so you only need to provide the fields
    ///             you want to update.</p>
    func updateQuerySuggestionsBlockList(input: UpdateQuerySuggestionsBlockListInput, completion: @escaping (SdkResult<UpdateQuerySuggestionsBlockListOutputResponse, UpdateQuerySuggestionsBlockListOutputError>) -> Void)
    /// <p>Updates the settings of query suggestions for an index.</p>
    ///         <p>Amazon Kendra supports partial updates, so you only need to provide
    ///             the fields you want to update.</p>
    ///         <p>If an update is currently processing (i.e. 'happening'), you
    ///             need to wait for the update to finish before making another update.</p>
    ///         <p>Updates to query suggestions settings might not take effect right away.
    ///             The time for your updated settings to take effect depends on the updates
    ///             made and the number of search queries in your index.</p>
    ///         <p>You can still enable/disable query suggestions at any time.</p>
    func updateQuerySuggestionsConfig(input: UpdateQuerySuggestionsConfigInput, completion: @escaping (SdkResult<UpdateQuerySuggestionsConfigOutputResponse, UpdateQuerySuggestionsConfigOutputError>) -> Void)
    /// <p>Updates a thesaurus file associated with an index.</p>
    func updateThesaurus(input: UpdateThesaurusInput, completion: @escaping (SdkResult<UpdateThesaurusOutputResponse, UpdateThesaurusOutputError>) -> Void)
}
