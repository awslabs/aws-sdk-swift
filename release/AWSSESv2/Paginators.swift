// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[GetDedicatedIpsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetDedicatedIpsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetDedicatedIpsOutputResponse`
extension SesV2Client {
    public func getDedicatedIpsPaginated(input: GetDedicatedIpsInput) -> ClientRuntime.PaginatorSequence<GetDedicatedIpsInput, GetDedicatedIpsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetDedicatedIpsInput, GetDedicatedIpsOutputResponse>(input: input, inputKey: \GetDedicatedIpsInput.nextToken, outputKey: \GetDedicatedIpsOutputResponse.nextToken, paginationFunction: self.getDedicatedIps(input:))
    }
}

extension GetDedicatedIpsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetDedicatedIpsInput {
        return GetDedicatedIpsInput(
            nextToken: token,
            pageSize: self.pageSize,
            poolName: self.poolName
        )}
}

/// Paginate over `[ListConfigurationSetsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListConfigurationSetsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListConfigurationSetsOutputResponse`
extension SesV2Client {
    public func listConfigurationSetsPaginated(input: ListConfigurationSetsInput) -> ClientRuntime.PaginatorSequence<ListConfigurationSetsInput, ListConfigurationSetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListConfigurationSetsInput, ListConfigurationSetsOutputResponse>(input: input, inputKey: \ListConfigurationSetsInput.nextToken, outputKey: \ListConfigurationSetsOutputResponse.nextToken, paginationFunction: self.listConfigurationSets(input:))
    }
}

extension ListConfigurationSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConfigurationSetsInput {
        return ListConfigurationSetsInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListContactListsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListContactListsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListContactListsOutputResponse`
extension SesV2Client {
    public func listContactListsPaginated(input: ListContactListsInput) -> ClientRuntime.PaginatorSequence<ListContactListsInput, ListContactListsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListContactListsInput, ListContactListsOutputResponse>(input: input, inputKey: \ListContactListsInput.nextToken, outputKey: \ListContactListsOutputResponse.nextToken, paginationFunction: self.listContactLists(input:))
    }
}

extension ListContactListsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContactListsInput {
        return ListContactListsInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListContactsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListContactsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListContactsOutputResponse`
extension SesV2Client {
    public func listContactsPaginated(input: ListContactsInput) -> ClientRuntime.PaginatorSequence<ListContactsInput, ListContactsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListContactsInput, ListContactsOutputResponse>(input: input, inputKey: \ListContactsInput.nextToken, outputKey: \ListContactsOutputResponse.nextToken, paginationFunction: self.listContacts(input:))
    }
}

extension ListContactsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContactsInput {
        return ListContactsInput(
            contactListName: self.contactListName,
            filter: self.filter,
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListCustomVerificationEmailTemplatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListCustomVerificationEmailTemplatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListCustomVerificationEmailTemplatesOutputResponse`
extension SesV2Client {
    public func listCustomVerificationEmailTemplatesPaginated(input: ListCustomVerificationEmailTemplatesInput) -> ClientRuntime.PaginatorSequence<ListCustomVerificationEmailTemplatesInput, ListCustomVerificationEmailTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCustomVerificationEmailTemplatesInput, ListCustomVerificationEmailTemplatesOutputResponse>(input: input, inputKey: \ListCustomVerificationEmailTemplatesInput.nextToken, outputKey: \ListCustomVerificationEmailTemplatesOutputResponse.nextToken, paginationFunction: self.listCustomVerificationEmailTemplates(input:))
    }
}

extension ListCustomVerificationEmailTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCustomVerificationEmailTemplatesInput {
        return ListCustomVerificationEmailTemplatesInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListDedicatedIpPoolsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDedicatedIpPoolsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDedicatedIpPoolsOutputResponse`
extension SesV2Client {
    public func listDedicatedIpPoolsPaginated(input: ListDedicatedIpPoolsInput) -> ClientRuntime.PaginatorSequence<ListDedicatedIpPoolsInput, ListDedicatedIpPoolsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDedicatedIpPoolsInput, ListDedicatedIpPoolsOutputResponse>(input: input, inputKey: \ListDedicatedIpPoolsInput.nextToken, outputKey: \ListDedicatedIpPoolsOutputResponse.nextToken, paginationFunction: self.listDedicatedIpPools(input:))
    }
}

extension ListDedicatedIpPoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDedicatedIpPoolsInput {
        return ListDedicatedIpPoolsInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListDeliverabilityTestReportsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDeliverabilityTestReportsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDeliverabilityTestReportsOutputResponse`
extension SesV2Client {
    public func listDeliverabilityTestReportsPaginated(input: ListDeliverabilityTestReportsInput) -> ClientRuntime.PaginatorSequence<ListDeliverabilityTestReportsInput, ListDeliverabilityTestReportsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDeliverabilityTestReportsInput, ListDeliverabilityTestReportsOutputResponse>(input: input, inputKey: \ListDeliverabilityTestReportsInput.nextToken, outputKey: \ListDeliverabilityTestReportsOutputResponse.nextToken, paginationFunction: self.listDeliverabilityTestReports(input:))
    }
}

extension ListDeliverabilityTestReportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDeliverabilityTestReportsInput {
        return ListDeliverabilityTestReportsInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListDomainDeliverabilityCampaignsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDomainDeliverabilityCampaignsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDomainDeliverabilityCampaignsOutputResponse`
extension SesV2Client {
    public func listDomainDeliverabilityCampaignsPaginated(input: ListDomainDeliverabilityCampaignsInput) -> ClientRuntime.PaginatorSequence<ListDomainDeliverabilityCampaignsInput, ListDomainDeliverabilityCampaignsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDomainDeliverabilityCampaignsInput, ListDomainDeliverabilityCampaignsOutputResponse>(input: input, inputKey: \ListDomainDeliverabilityCampaignsInput.nextToken, outputKey: \ListDomainDeliverabilityCampaignsOutputResponse.nextToken, paginationFunction: self.listDomainDeliverabilityCampaigns(input:))
    }
}

extension ListDomainDeliverabilityCampaignsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDomainDeliverabilityCampaignsInput {
        return ListDomainDeliverabilityCampaignsInput(
            endDate: self.endDate,
            nextToken: token,
            pageSize: self.pageSize,
            startDate: self.startDate,
            subscribedDomain: self.subscribedDomain
        )}
}

/// Paginate over `[ListEmailIdentitiesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListEmailIdentitiesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListEmailIdentitiesOutputResponse`
extension SesV2Client {
    public func listEmailIdentitiesPaginated(input: ListEmailIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListEmailIdentitiesInput, ListEmailIdentitiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEmailIdentitiesInput, ListEmailIdentitiesOutputResponse>(input: input, inputKey: \ListEmailIdentitiesInput.nextToken, outputKey: \ListEmailIdentitiesOutputResponse.nextToken, paginationFunction: self.listEmailIdentities(input:))
    }
}

extension ListEmailIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEmailIdentitiesInput {
        return ListEmailIdentitiesInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListEmailTemplatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListEmailTemplatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListEmailTemplatesOutputResponse`
extension SesV2Client {
    public func listEmailTemplatesPaginated(input: ListEmailTemplatesInput) -> ClientRuntime.PaginatorSequence<ListEmailTemplatesInput, ListEmailTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEmailTemplatesInput, ListEmailTemplatesOutputResponse>(input: input, inputKey: \ListEmailTemplatesInput.nextToken, outputKey: \ListEmailTemplatesOutputResponse.nextToken, paginationFunction: self.listEmailTemplates(input:))
    }
}

extension ListEmailTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEmailTemplatesInput {
        return ListEmailTemplatesInput(
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListImportJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImportJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImportJobsOutputResponse`
extension SesV2Client {
    public func listImportJobsPaginated(input: ListImportJobsInput) -> ClientRuntime.PaginatorSequence<ListImportJobsInput, ListImportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImportJobsInput, ListImportJobsOutputResponse>(input: input, inputKey: \ListImportJobsInput.nextToken, outputKey: \ListImportJobsOutputResponse.nextToken, paginationFunction: self.listImportJobs(input:))
    }
}

extension ListImportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImportJobsInput {
        return ListImportJobsInput(
            importDestinationType: self.importDestinationType,
            nextToken: token,
            pageSize: self.pageSize
        )}
}

/// Paginate over `[ListSuppressedDestinationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListSuppressedDestinationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListSuppressedDestinationsOutputResponse`
extension SesV2Client {
    public func listSuppressedDestinationsPaginated(input: ListSuppressedDestinationsInput) -> ClientRuntime.PaginatorSequence<ListSuppressedDestinationsInput, ListSuppressedDestinationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSuppressedDestinationsInput, ListSuppressedDestinationsOutputResponse>(input: input, inputKey: \ListSuppressedDestinationsInput.nextToken, outputKey: \ListSuppressedDestinationsOutputResponse.nextToken, paginationFunction: self.listSuppressedDestinations(input:))
    }
}

extension ListSuppressedDestinationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSuppressedDestinationsInput {
        return ListSuppressedDestinationsInput(
            endDate: self.endDate,
            nextToken: token,
            pageSize: self.pageSize,
            reasons: self.reasons,
            startDate: self.startDate
        )}
}
