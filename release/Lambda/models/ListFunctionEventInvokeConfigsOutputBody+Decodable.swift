// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFunctionEventInvokeConfigsOutputBody: Equatable {
    public let functionEventInvokeConfigs: [FunctionEventInvokeConfig]?
    public let nextMarker: String?
}

extension ListFunctionEventInvokeConfigsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case functionEventInvokeConfigs = "FunctionEventInvokeConfigs"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionEventInvokeConfigsContainer = try containerValues.decodeIfPresent([FunctionEventInvokeConfig].self, forKey: .functionEventInvokeConfigs)
        var functionEventInvokeConfigsDecoded0:[FunctionEventInvokeConfig]? = nil
        if let functionEventInvokeConfigsContainer = functionEventInvokeConfigsContainer {
            functionEventInvokeConfigsDecoded0 = [FunctionEventInvokeConfig]()
            for structure0 in functionEventInvokeConfigsContainer {
                functionEventInvokeConfigsDecoded0?.append(structure0)
            }
        }
        functionEventInvokeConfigs = functionEventInvokeConfigsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
