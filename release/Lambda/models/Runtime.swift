// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Runtime {
    case dotnetcore10
    case dotnetcore20
    case dotnetcore21
    case dotnetcore31
    case go1x
    case java11
    case java8
    case java8al2
    case nodejs
    case nodejs10x
    case nodejs12x
    case nodejs14x
    case nodejs43
    case nodejs43edge
    case nodejs610
    case nodejs810
    case provided
    case providedal2
    case python27
    case python36
    case python37
    case python38
    case ruby25
    case ruby27
    case sdkUnknown(String)
}

extension Runtime : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Runtime] {
        return [
            .dotnetcore10,
            .dotnetcore20,
            .dotnetcore21,
            .dotnetcore31,
            .go1x,
            .java11,
            .java8,
            .java8al2,
            .nodejs,
            .nodejs10x,
            .nodejs12x,
            .nodejs14x,
            .nodejs43,
            .nodejs43edge,
            .nodejs610,
            .nodejs810,
            .provided,
            .providedal2,
            .python27,
            .python36,
            .python37,
            .python38,
            .ruby25,
            .ruby27,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dotnetcore10: return "dotnetcore1.0"
        case .dotnetcore20: return "dotnetcore2.0"
        case .dotnetcore21: return "dotnetcore2.1"
        case .dotnetcore31: return "dotnetcore3.1"
        case .go1x: return "go1.x"
        case .java11: return "java11"
        case .java8: return "java8"
        case .java8al2: return "java8.al2"
        case .nodejs: return "nodejs"
        case .nodejs10x: return "nodejs10.x"
        case .nodejs12x: return "nodejs12.x"
        case .nodejs14x: return "nodejs14.x"
        case .nodejs43: return "nodejs4.3"
        case .nodejs43edge: return "nodejs4.3-edge"
        case .nodejs610: return "nodejs6.10"
        case .nodejs810: return "nodejs8.10"
        case .provided: return "provided"
        case .providedal2: return "provided.al2"
        case .python27: return "python2.7"
        case .python36: return "python3.6"
        case .python37: return "python3.7"
        case .python38: return "python3.8"
        case .ruby25: return "ruby2.5"
        case .ruby27: return "ruby2.7"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Runtime(rawValue: rawValue) ?? Runtime.sdkUnknown(rawValue)
    }
}
