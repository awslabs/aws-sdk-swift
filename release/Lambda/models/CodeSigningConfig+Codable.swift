// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeSigningConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedPublishers = "AllowedPublishers"
        case codeSigningConfigArn = "CodeSigningConfigArn"
        case codeSigningConfigId = "CodeSigningConfigId"
        case codeSigningPolicies = "CodeSigningPolicies"
        case description = "Description"
        case lastModified = "LastModified"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedPublishers = allowedPublishers {
            try encodeContainer.encode(allowedPublishers, forKey: .allowedPublishers)
        }
        if let codeSigningConfigArn = codeSigningConfigArn {
            try encodeContainer.encode(codeSigningConfigArn, forKey: .codeSigningConfigArn)
        }
        if let codeSigningConfigId = codeSigningConfigId {
            try encodeContainer.encode(codeSigningConfigId, forKey: .codeSigningConfigId)
        }
        if let codeSigningPolicies = codeSigningPolicies {
            try encodeContainer.encode(codeSigningPolicies, forKey: .codeSigningPolicies)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeSigningConfigIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .codeSigningConfigId)
        codeSigningConfigId = codeSigningConfigIdDecoded
        let codeSigningConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .codeSigningConfigArn)
        codeSigningConfigArn = codeSigningConfigArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let allowedPublishersDecoded = try containerValues.decodeIfPresent(AllowedPublishers.self, forKey: .allowedPublishers)
        allowedPublishers = allowedPublishersDecoded
        let codeSigningPoliciesDecoded = try containerValues.decodeIfPresent(CodeSigningPolicies.self, forKey: .codeSigningPolicies)
        codeSigningPolicies = codeSigningPoliciesDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
    }
}
