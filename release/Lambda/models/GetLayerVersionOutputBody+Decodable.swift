// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLayerVersionOutputBody: Equatable {
    public let content: LayerVersionContentOutput?
    public let layerArn: String?
    public let layerVersionArn: String?
    public let description: String?
    public let createdDate: String?
    public let version: Int
    public let compatibleRuntimes: [Runtime]?
    public let licenseInfo: String?
}

extension GetLayerVersionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compatibleRuntimes = "CompatibleRuntimes"
        case content = "Content"
        case createdDate = "CreatedDate"
        case description = "Description"
        case layerArn = "LayerArn"
        case layerVersionArn = "LayerVersionArn"
        case licenseInfo = "LicenseInfo"
        case version = "Version"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(LayerVersionContentOutput.self, forKey: .content)
        content = contentDecoded
        let layerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerArn)
        layerArn = layerArnDecoded
        let layerVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerVersionArn)
        layerVersionArn = layerVersionArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let compatibleRuntimesContainer = try containerValues.decodeIfPresent([Runtime].self, forKey: .compatibleRuntimes)
        var compatibleRuntimesDecoded0:[Runtime]? = nil
        if let compatibleRuntimesContainer = compatibleRuntimesContainer {
            compatibleRuntimesDecoded0 = [Runtime]()
            for string0 in compatibleRuntimesContainer {
                compatibleRuntimesDecoded0?.append(string0)
            }
        }
        compatibleRuntimes = compatibleRuntimesDecoded0
        let licenseInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseInfo)
        licenseInfo = licenseInfoDecoded
    }
}
