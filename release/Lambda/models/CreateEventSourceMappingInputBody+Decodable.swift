// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEventSourceMappingInputBody: Equatable {
    public let eventSourceArn: String?
    public let functionName: String?
    public let enabled: Bool?
    public let batchSize: Int?
    public let maximumBatchingWindowInSeconds: Int?
    public let parallelizationFactor: Int?
    public let startingPosition: EventSourcePosition?
    public let startingPositionTimestamp: Date?
    public let destinationConfig: DestinationConfig?
    public let maximumRecordAgeInSeconds: Int?
    public let bisectBatchOnFunctionError: Bool?
    public let maximumRetryAttempts: Int?
    public let tumblingWindowInSeconds: Int?
    public let topics: [String]?
    public let queues: [String]?
    public let sourceAccessConfigurations: [SourceAccessConfiguration]?
    public let selfManagedEventSource: SelfManagedEventSource?
    public let functionResponseTypes: [FunctionResponseType]?
}

extension CreateEventSourceMappingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case batchSize = "BatchSize"
        case bisectBatchOnFunctionError = "BisectBatchOnFunctionError"
        case destinationConfig = "DestinationConfig"
        case enabled = "Enabled"
        case eventSourceArn = "EventSourceArn"
        case functionName = "FunctionName"
        case functionResponseTypes = "FunctionResponseTypes"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case parallelizationFactor = "ParallelizationFactor"
        case queues = "Queues"
        case selfManagedEventSource = "SelfManagedEventSource"
        case sourceAccessConfigurations = "SourceAccessConfigurations"
        case startingPosition = "StartingPosition"
        case startingPositionTimestamp = "StartingPositionTimestamp"
        case topics = "Topics"
        case tumblingWindowInSeconds = "TumblingWindowInSeconds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let functionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(EventSourcePosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let startingPositionTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startingPositionTimestamp)
        startingPositionTimestamp = startingPositionTimestampDecoded
        let destinationConfigDecoded = try containerValues.decodeIfPresent(DestinationConfig.self, forKey: .destinationConfig)
        destinationConfig = destinationConfigDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let bisectBatchOnFunctionErrorDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .bisectBatchOnFunctionError)
        bisectBatchOnFunctionError = bisectBatchOnFunctionErrorDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let tumblingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tumblingWindowInSeconds)
        tumblingWindowInSeconds = tumblingWindowInSecondsDecoded
        let topicsContainer = try containerValues.decodeIfPresent([String].self, forKey: .topics)
        var topicsDecoded0:[String]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [String]()
            for string0 in topicsContainer {
                topicsDecoded0?.append(string0)
            }
        }
        topics = topicsDecoded0
        let queuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .queues)
        var queuesDecoded0:[String]? = nil
        if let queuesContainer = queuesContainer {
            queuesDecoded0 = [String]()
            for string0 in queuesContainer {
                queuesDecoded0?.append(string0)
            }
        }
        queues = queuesDecoded0
        let sourceAccessConfigurationsContainer = try containerValues.decodeIfPresent([SourceAccessConfiguration].self, forKey: .sourceAccessConfigurations)
        var sourceAccessConfigurationsDecoded0:[SourceAccessConfiguration]? = nil
        if let sourceAccessConfigurationsContainer = sourceAccessConfigurationsContainer {
            sourceAccessConfigurationsDecoded0 = [SourceAccessConfiguration]()
            for structure0 in sourceAccessConfigurationsContainer {
                sourceAccessConfigurationsDecoded0?.append(structure0)
            }
        }
        sourceAccessConfigurations = sourceAccessConfigurationsDecoded0
        let selfManagedEventSourceDecoded = try containerValues.decodeIfPresent(SelfManagedEventSource.self, forKey: .selfManagedEventSource)
        selfManagedEventSource = selfManagedEventSourceDecoded
        let functionResponseTypesContainer = try containerValues.decodeIfPresent([FunctionResponseType].self, forKey: .functionResponseTypes)
        var functionResponseTypesDecoded0:[FunctionResponseType]? = nil
        if let functionResponseTypesContainer = functionResponseTypesContainer {
            functionResponseTypesDecoded0 = [FunctionResponseType]()
            for string0 in functionResponseTypesContainer {
                functionResponseTypesDecoded0?.append(string0)
            }
        }
        functionResponseTypes = functionResponseTypesDecoded0
    }
}
