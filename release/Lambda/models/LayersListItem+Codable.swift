// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LayersListItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latestMatchingVersion = "LatestMatchingVersion"
        case layerArn = "LayerArn"
        case layerName = "LayerName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestMatchingVersion = latestMatchingVersion {
            try encodeContainer.encode(latestMatchingVersion, forKey: .latestMatchingVersion)
        }
        if let layerArn = layerArn {
            try encodeContainer.encode(layerArn, forKey: .layerArn)
        }
        if let layerName = layerName {
            try encodeContainer.encode(layerName, forKey: .layerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let layerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerName)
        layerName = layerNameDecoded
        let layerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerArn)
        layerArn = layerArnDecoded
        let latestMatchingVersionDecoded = try containerValues.decodeIfPresent(LayerVersionsListItem.self, forKey: .latestMatchingVersion)
        latestMatchingVersion = latestMatchingVersionDecoded
    }
}
