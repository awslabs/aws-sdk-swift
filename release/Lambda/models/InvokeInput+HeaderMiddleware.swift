// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct InvokeInputHeadersMiddleware: Middleware {
    public let id: String = "InvokeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InvokeInput>,
                  next: H) -> Swift.Result<OperationOutput<InvokeOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let clientContext = input.operationInput.clientContext {
            input.builder.withHeader(name: "X-Amz-Client-Context", value: String(clientContext))
        }
        if let invocationType = input.operationInput.invocationType {
            input.builder.withHeader(name: "X-Amz-Invocation-Type", value: String(invocationType.rawValue))
        }
        if let logType = input.operationInput.logType {
            input.builder.withHeader(name: "X-Amz-Log-Type", value: String(logType.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InvokeInput>
    public typealias MOutput = OperationOutput<InvokeOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<InvokeOutputError>
}
