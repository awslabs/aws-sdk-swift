// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLayerVersionsOutputBody: Equatable {
    public let nextMarker: String?
    public let layerVersions: [LayerVersionsListItem]?
}

extension ListLayerVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case layerVersions = "LayerVersions"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let layerVersionsContainer = try containerValues.decodeIfPresent([LayerVersionsListItem].self, forKey: .layerVersions)
        var layerVersionsDecoded0:[LayerVersionsListItem]? = nil
        if let layerVersionsContainer = layerVersionsContainer {
            layerVersionsDecoded0 = [LayerVersionsListItem]()
            for structure0 in layerVersionsContainer {
                layerVersionsDecoded0?.append(structure0)
            }
        }
        layerVersions = layerVersionsDecoded0
    }
}
