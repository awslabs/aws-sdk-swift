// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrantEntitlementRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
        case description = "description"
        case encryption = "encryption"
        case entitlementStatus = "entitlementStatus"
        case name = "name"
        case subscribers = "subscribers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dataTransferSubscriberFeePercent != 0 {
            try encodeContainer.encode(dataTransferSubscriberFeePercent, forKey: .dataTransferSubscriberFeePercent)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let entitlementStatus = entitlementStatus {
            try encodeContainer.encode(entitlementStatus.rawValue, forKey: .entitlementStatus)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let subscribers = subscribers {
            var subscribersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscribers)
            for __listof__string0 in subscribers {
                try subscribersContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTransferSubscriberFeePercentDecoded = try containerValues.decode(Int.self, forKey: .dataTransferSubscriberFeePercent)
        dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let entitlementStatusDecoded = try containerValues.decodeIfPresent(EntitlementStatus.self, forKey: .entitlementStatus)
        entitlementStatus = entitlementStatusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let subscribersContainer = try containerValues.decodeIfPresent([String].self, forKey: .subscribers)
        var subscribersDecoded0:[String]? = nil
        if let subscribersContainer = subscribersContainer {
            subscribersDecoded0 = [String]()
            for string0 in subscribersContainer {
                subscribersDecoded0?.append(string0)
            }
        }
        subscribers = subscribersDecoded0
    }
}
