// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reservedBitrate = "reservedBitrate"
        case resourceType = "resourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if reservedBitrate != 0 {
            try encodeContainer.encode(reservedBitrate, forKey: .reservedBitrate)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedBitrateDecoded = try containerValues.decode(Int.self, forKey: .reservedBitrate)
        reservedBitrate = reservedBitrateDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}
