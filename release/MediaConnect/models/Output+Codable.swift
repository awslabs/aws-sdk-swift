// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Output: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
        case description = "description"
        case destination = "destination"
        case encryption = "encryption"
        case entitlementArn = "entitlementArn"
        case listenerAddress = "listenerAddress"
        case mediaLiveInputArn = "mediaLiveInputArn"
        case mediaStreamOutputConfigurations = "mediaStreamOutputConfigurations"
        case name = "name"
        case outputArn = "outputArn"
        case port = "port"
        case transport = "transport"
        case vpcInterfaceAttachment = "vpcInterfaceAttachment"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dataTransferSubscriberFeePercent != 0 {
            try encodeContainer.encode(dataTransferSubscriberFeePercent, forKey: .dataTransferSubscriberFeePercent)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let entitlementArn = entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
        if let listenerAddress = listenerAddress {
            try encodeContainer.encode(listenerAddress, forKey: .listenerAddress)
        }
        if let mediaLiveInputArn = mediaLiveInputArn {
            try encodeContainer.encode(mediaLiveInputArn, forKey: .mediaLiveInputArn)
        }
        if let mediaStreamOutputConfigurations = mediaStreamOutputConfigurations {
            var mediaStreamOutputConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreamOutputConfigurations)
            for __listofmediastreamoutputconfiguration0 in mediaStreamOutputConfigurations {
                try mediaStreamOutputConfigurationsContainer.encode(__listofmediastreamoutputconfiguration0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputArn = outputArn {
            try encodeContainer.encode(outputArn, forKey: .outputArn)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let transport = transport {
            try encodeContainer.encode(transport, forKey: .transport)
        }
        if let vpcInterfaceAttachment = vpcInterfaceAttachment {
            try encodeContainer.encode(vpcInterfaceAttachment, forKey: .vpcInterfaceAttachment)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTransferSubscriberFeePercentDecoded = try containerValues.decode(Int.self, forKey: .dataTransferSubscriberFeePercent)
        dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let entitlementArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
        let listenerAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .listenerAddress)
        listenerAddress = listenerAddressDecoded
        let mediaLiveInputArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaLiveInputArn)
        mediaLiveInputArn = mediaLiveInputArnDecoded
        let mediaStreamOutputConfigurationsContainer = try containerValues.decodeIfPresent([MediaStreamOutputConfiguration].self, forKey: .mediaStreamOutputConfigurations)
        var mediaStreamOutputConfigurationsDecoded0:[MediaStreamOutputConfiguration]? = nil
        if let mediaStreamOutputConfigurationsContainer = mediaStreamOutputConfigurationsContainer {
            mediaStreamOutputConfigurationsDecoded0 = [MediaStreamOutputConfiguration]()
            for structure0 in mediaStreamOutputConfigurationsContainer {
                mediaStreamOutputConfigurationsDecoded0?.append(structure0)
            }
        }
        mediaStreamOutputConfigurations = mediaStreamOutputConfigurationsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let outputArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputArn)
        outputArn = outputArnDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let transportDecoded = try containerValues.decodeIfPresent(Transport.self, forKey: .transport)
        transport = transportDecoded
        let vpcInterfaceAttachmentDecoded = try containerValues.decodeIfPresent(VpcInterfaceAttachment.self, forKey: .vpcInterfaceAttachment)
        vpcInterfaceAttachment = vpcInterfaceAttachmentDecoded
    }
}
