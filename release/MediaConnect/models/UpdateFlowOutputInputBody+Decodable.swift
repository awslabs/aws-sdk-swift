// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFlowOutputInputBody: Equatable {
    public let cidrAllowList: [String]?
    public let description: String?
    public let destination: String?
    public let encryption: UpdateEncryption?
    public let maxLatency: Int
    public let mediaStreamOutputConfigurations: [MediaStreamOutputConfigurationRequest]?
    public let minLatency: Int
    public let port: Int
    public let `protocol`: `Protocol`?
    public let remoteId: String?
    public let smoothingLatency: Int
    public let streamId: String?
    public let vpcInterfaceAttachment: VpcInterfaceAttachment?
}

extension UpdateFlowOutputInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cidrAllowList = "cidrAllowList"
        case description = "description"
        case destination = "destination"
        case encryption = "encryption"
        case maxLatency = "maxLatency"
        case mediaStreamOutputConfigurations = "mediaStreamOutputConfigurations"
        case minLatency = "minLatency"
        case port = "port"
        case `protocol` = "protocol"
        case remoteId = "remoteId"
        case smoothingLatency = "smoothingLatency"
        case streamId = "streamId"
        case vpcInterfaceAttachment = "vpcInterfaceAttachment"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrAllowListContainer = try containerValues.decodeIfPresent([String].self, forKey: .cidrAllowList)
        var cidrAllowListDecoded0:[String]? = nil
        if let cidrAllowListContainer = cidrAllowListContainer {
            cidrAllowListDecoded0 = [String]()
            for string0 in cidrAllowListContainer {
                cidrAllowListDecoded0?.append(string0)
            }
        }
        cidrAllowList = cidrAllowListDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destination)
        destination = destinationDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(UpdateEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let maxLatencyDecoded = try containerValues.decode(Int.self, forKey: .maxLatency)
        maxLatency = maxLatencyDecoded
        let mediaStreamOutputConfigurationsContainer = try containerValues.decodeIfPresent([MediaStreamOutputConfigurationRequest].self, forKey: .mediaStreamOutputConfigurations)
        var mediaStreamOutputConfigurationsDecoded0:[MediaStreamOutputConfigurationRequest]? = nil
        if let mediaStreamOutputConfigurationsContainer = mediaStreamOutputConfigurationsContainer {
            mediaStreamOutputConfigurationsDecoded0 = [MediaStreamOutputConfigurationRequest]()
            for structure0 in mediaStreamOutputConfigurationsContainer {
                mediaStreamOutputConfigurationsDecoded0?.append(structure0)
            }
        }
        mediaStreamOutputConfigurations = mediaStreamOutputConfigurationsDecoded0
        let minLatencyDecoded = try containerValues.decode(Int.self, forKey: .minLatency)
        minLatency = minLatencyDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(`Protocol`.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let remoteIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .remoteId)
        remoteId = remoteIdDecoded
        let smoothingLatencyDecoded = try containerValues.decode(Int.self, forKey: .smoothingLatency)
        smoothingLatency = smoothingLatencyDecoded
        let streamIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let vpcInterfaceAttachmentDecoded = try containerValues.decodeIfPresent(VpcInterfaceAttachment.self, forKey: .vpcInterfaceAttachment)
        vpcInterfaceAttachment = vpcInterfaceAttachmentDecoded
    }
}
