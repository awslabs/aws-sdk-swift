// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFlowInputBody: Equatable {
    public let availabilityZone: String?
    public let entitlements: [GrantEntitlementRequest]?
    public let mediaStreams: [AddMediaStreamRequest]?
    public let name: String?
    public let outputs: [AddOutputRequest]?
    public let source: SetSourceRequest?
    public let sourceFailoverConfig: FailoverConfig?
    public let sources: [SetSourceRequest]?
    public let vpcInterfaces: [VpcInterfaceRequest]?
}

extension CreateFlowInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case entitlements = "entitlements"
        case mediaStreams = "mediaStreams"
        case name = "name"
        case outputs = "outputs"
        case source = "source"
        case sourceFailoverConfig = "sourceFailoverConfig"
        case sources = "sources"
        case vpcInterfaces = "vpcInterfaces"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([GrantEntitlementRequest].self, forKey: .entitlements)
        var entitlementsDecoded0:[GrantEntitlementRequest]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [GrantEntitlementRequest]()
            for structure0 in entitlementsContainer {
                entitlementsDecoded0?.append(structure0)
            }
        }
        entitlements = entitlementsDecoded0
        let mediaStreamsContainer = try containerValues.decodeIfPresent([AddMediaStreamRequest].self, forKey: .mediaStreams)
        var mediaStreamsDecoded0:[AddMediaStreamRequest]? = nil
        if let mediaStreamsContainer = mediaStreamsContainer {
            mediaStreamsDecoded0 = [AddMediaStreamRequest]()
            for structure0 in mediaStreamsContainer {
                mediaStreamsDecoded0?.append(structure0)
            }
        }
        mediaStreams = mediaStreamsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let outputsContainer = try containerValues.decodeIfPresent([AddOutputRequest].self, forKey: .outputs)
        var outputsDecoded0:[AddOutputRequest]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [AddOutputRequest]()
            for structure0 in outputsContainer {
                outputsDecoded0?.append(structure0)
            }
        }
        outputs = outputsDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(SetSourceRequest.self, forKey: .source)
        source = sourceDecoded
        let sourceFailoverConfigDecoded = try containerValues.decodeIfPresent(FailoverConfig.self, forKey: .sourceFailoverConfig)
        sourceFailoverConfig = sourceFailoverConfigDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([SetSourceRequest].self, forKey: .sources)
        var sourcesDecoded0:[SetSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [SetSourceRequest]()
            for structure0 in sourcesContainer {
                sourcesDecoded0?.append(structure0)
            }
        }
        sources = sourcesDecoded0
        let vpcInterfacesContainer = try containerValues.decodeIfPresent([VpcInterfaceRequest].self, forKey: .vpcInterfaces)
        var vpcInterfacesDecoded0:[VpcInterfaceRequest]? = nil
        if let vpcInterfacesContainer = vpcInterfacesContainer {
            vpcInterfacesDecoded0 = [VpcInterfaceRequest]()
            for structure0 in vpcInterfacesContainer {
                vpcInterfacesDecoded0?.append(structure0)
            }
        }
        vpcInterfaces = vpcInterfacesDecoded0
    }
}
