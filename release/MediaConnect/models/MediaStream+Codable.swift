// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "attributes"
        case clockRate = "clockRate"
        case description = "description"
        case fmt = "fmt"
        case mediaStreamId = "mediaStreamId"
        case mediaStreamName = "mediaStreamName"
        case mediaStreamType = "mediaStreamType"
        case videoFormat = "videoFormat"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            try encodeContainer.encode(attributes, forKey: .attributes)
        }
        if clockRate != 0 {
            try encodeContainer.encode(clockRate, forKey: .clockRate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if fmt != 0 {
            try encodeContainer.encode(fmt, forKey: .fmt)
        }
        if mediaStreamId != 0 {
            try encodeContainer.encode(mediaStreamId, forKey: .mediaStreamId)
        }
        if let mediaStreamName = mediaStreamName {
            try encodeContainer.encode(mediaStreamName, forKey: .mediaStreamName)
        }
        if let mediaStreamType = mediaStreamType {
            try encodeContainer.encode(mediaStreamType.rawValue, forKey: .mediaStreamType)
        }
        if let videoFormat = videoFormat {
            try encodeContainer.encode(videoFormat, forKey: .videoFormat)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesDecoded = try containerValues.decodeIfPresent(MediaStreamAttributes.self, forKey: .attributes)
        attributes = attributesDecoded
        let clockRateDecoded = try containerValues.decode(Int.self, forKey: .clockRate)
        clockRate = clockRateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let fmtDecoded = try containerValues.decode(Int.self, forKey: .fmt)
        fmt = fmtDecoded
        let mediaStreamIdDecoded = try containerValues.decode(Int.self, forKey: .mediaStreamId)
        mediaStreamId = mediaStreamIdDecoded
        let mediaStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaStreamName)
        mediaStreamName = mediaStreamNameDecoded
        let mediaStreamTypeDecoded = try containerValues.decodeIfPresent(MediaStreamType.self, forKey: .mediaStreamType)
        mediaStreamType = mediaStreamTypeDecoded
        let videoFormatDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoFormat)
        videoFormat = videoFormatDecoded
    }
}
