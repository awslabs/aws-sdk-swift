// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The settings for the source of the flow.
public struct SetSourceRequest: Equatable {
    /// The protocol that is used by the source.
    public let `protocol`: `Protocol`?
    /// The type of encryption that is used on the content ingested from this source.
    public let decryption: Encryption?
    /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    public let description: String?
    /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
    public let entitlementArn: String?
    /// The port that the flow will be listening on for incoming content.
    public let ingestPort: Int
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    public let maxBitrate: Int
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
    public let maxLatency: Int
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    public let maxSyncBuffer: Int
    /// The media streams that are associated with the source, and the parameters for those associations.
    public let mediaStreamSourceConfigurations: [MediaStreamSourceConfigurationRequest]?
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    public let minLatency: Int
    /// The name of the source.
    public let name: String?
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    public let streamId: String?
    /// The name of the VPC interface to use for this source.
    public let vpcInterfaceName: String?
    /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    public let whitelistCidr: String?

    public init (
        `protocol`: `Protocol`? = nil,
        decryption: Encryption? = nil,
        description: String? = nil,
        entitlementArn: String? = nil,
        ingestPort: Int = 0,
        maxBitrate: Int = 0,
        maxLatency: Int = 0,
        maxSyncBuffer: Int = 0,
        mediaStreamSourceConfigurations: [MediaStreamSourceConfigurationRequest]? = nil,
        minLatency: Int = 0,
        name: String? = nil,
        streamId: String? = nil,
        vpcInterfaceName: String? = nil,
        whitelistCidr: String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.decryption = decryption
        self.description = description
        self.entitlementArn = entitlementArn
        self.ingestPort = ingestPort
        self.maxBitrate = maxBitrate
        self.maxLatency = maxLatency
        self.maxSyncBuffer = maxSyncBuffer
        self.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations
        self.minLatency = minLatency
        self.name = name
        self.streamId = streamId
        self.vpcInterfaceName = vpcInterfaceName
        self.whitelistCidr = whitelistCidr
    }
}
