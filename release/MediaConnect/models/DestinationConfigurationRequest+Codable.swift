// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DestinationConfigurationRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationIp = "destinationIp"
        case destinationPort = "destinationPort"
        case interface = "interface"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationIp = destinationIp {
            try encodeContainer.encode(destinationIp, forKey: .destinationIp)
        }
        if destinationPort != 0 {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let interface = interface {
            try encodeContainer.encode(interface, forKey: .interface)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationIp)
        destinationIp = destinationIpDecoded
        let destinationPortDecoded = try containerValues.decode(Int.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
        let interfaceDecoded = try containerValues.decodeIfPresent(InterfaceRequest.self, forKey: .interface)
        interface = interfaceDecoded
    }
}
