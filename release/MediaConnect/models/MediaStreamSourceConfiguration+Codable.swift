// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaStreamSourceConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encodingName = "encodingName"
        case inputConfigurations = "inputConfigurations"
        case mediaStreamName = "mediaStreamName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encodingName = encodingName {
            try encodeContainer.encode(encodingName.rawValue, forKey: .encodingName)
        }
        if let inputConfigurations = inputConfigurations {
            var inputConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputConfigurations)
            for __listofinputconfiguration0 in inputConfigurations {
                try inputConfigurationsContainer.encode(__listofinputconfiguration0)
            }
        }
        if let mediaStreamName = mediaStreamName {
            try encodeContainer.encode(mediaStreamName, forKey: .mediaStreamName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encodingNameDecoded = try containerValues.decodeIfPresent(EncodingName.self, forKey: .encodingName)
        encodingName = encodingNameDecoded
        let inputConfigurationsContainer = try containerValues.decodeIfPresent([InputConfiguration].self, forKey: .inputConfigurations)
        var inputConfigurationsDecoded0:[InputConfiguration]? = nil
        if let inputConfigurationsContainer = inputConfigurationsContainer {
            inputConfigurationsDecoded0 = [InputConfiguration]()
            for structure0 in inputConfigurationsContainer {
                inputConfigurationsDecoded0?.append(structure0)
            }
        }
        inputConfigurations = inputConfigurationsDecoded0
        let mediaStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaStreamName)
        mediaStreamName = mediaStreamNameDecoded
    }
}
