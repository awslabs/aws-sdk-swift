// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The settings for the source of the flow.
public struct Source: Equatable {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    public let dataTransferSubscriberFeePercent: Int
    /// The type of encryption that is used on the content ingested from this source.
    public let decryption: Encryption?
    /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    public let description: String?
    /// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
    public let entitlementArn: String?
    /// The IP address that the flow will be listening on for incoming content.
    public let ingestIp: String?
    /// The port that the flow will be listening on for incoming content.
    public let ingestPort: Int
    /// The media streams that are associated with the source, and the parameters for those associations.
    public let mediaStreamSourceConfigurations: [MediaStreamSourceConfiguration]?
    /// The name of the source.
    public let name: String?
    /// The ARN of the source.
    public let sourceArn: String?
    /// Attributes related to the transport stream that are used in the source.
    public let transport: Transport?
    /// The name of the VPC interface that is used for this source.
    public let vpcInterfaceName: String?
    /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    public let whitelistCidr: String?

    public init (
        dataTransferSubscriberFeePercent: Int = 0,
        decryption: Encryption? = nil,
        description: String? = nil,
        entitlementArn: String? = nil,
        ingestIp: String? = nil,
        ingestPort: Int = 0,
        mediaStreamSourceConfigurations: [MediaStreamSourceConfiguration]? = nil,
        name: String? = nil,
        sourceArn: String? = nil,
        transport: Transport? = nil,
        vpcInterfaceName: String? = nil,
        whitelistCidr: String? = nil
    )
    {
        self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
        self.decryption = decryption
        self.description = description
        self.entitlementArn = entitlementArn
        self.ingestIp = ingestIp
        self.ingestPort = ingestPort
        self.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations
        self.name = name
        self.sourceArn = sourceArn
        self.transport = transport
        self.vpcInterfaceName = vpcInterfaceName
        self.whitelistCidr = whitelistCidr
    }
}
