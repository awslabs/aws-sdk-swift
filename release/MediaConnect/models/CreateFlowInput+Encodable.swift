// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFlowInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case entitlements = "entitlements"
        case mediaStreams = "mediaStreams"
        case name = "name"
        case outputs = "outputs"
        case source = "source"
        case sourceFailoverConfig = "sourceFailoverConfig"
        case sources = "sources"
        case vpcInterfaces = "vpcInterfaces"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for __listofgrantentitlementrequest0 in entitlements {
                try entitlementsContainer.encode(__listofgrantentitlementrequest0)
            }
        }
        if let mediaStreams = mediaStreams {
            var mediaStreamsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreams)
            for __listofaddmediastreamrequest0 in mediaStreams {
                try mediaStreamsContainer.encode(__listofaddmediastreamrequest0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for __listofaddoutputrequest0 in outputs {
                try outputsContainer.encode(__listofaddoutputrequest0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceFailoverConfig = sourceFailoverConfig {
            try encodeContainer.encode(sourceFailoverConfig, forKey: .sourceFailoverConfig)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for __listofsetsourcerequest0 in sources {
                try sourcesContainer.encode(__listofsetsourcerequest0)
            }
        }
        if let vpcInterfaces = vpcInterfaces {
            var vpcInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcInterfaces)
            for __listofvpcinterfacerequest0 in vpcInterfaces {
                try vpcInterfacesContainer.encode(__listofvpcinterfacerequest0)
            }
        }
    }
}
