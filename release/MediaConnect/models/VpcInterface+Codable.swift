// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VpcInterface: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "name"
        case networkInterfaceIds = "networkInterfaceIds"
        case networkInterfaceType = "networkInterfaceType"
        case roleArn = "roleArn"
        case securityGroupIds = "securityGroupIds"
        case subnetId = "subnetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for __listof__string0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(__listof__string0)
            }
        }
        if let networkInterfaceType = networkInterfaceType {
            try encodeContainer.encode(networkInterfaceType.rawValue, forKey: .networkInterfaceType)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for __listof__string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(__listof__string0)
            }
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [String]()
            for string0 in networkInterfaceIdsContainer {
                networkInterfaceIdsDecoded0?.append(string0)
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let networkInterfaceTypeDecoded = try containerValues.decodeIfPresent(NetworkInterfaceType.self, forKey: .networkInterfaceType)
        networkInterfaceType = networkInterfaceTypeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
    }
}
