// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Colorimetry {
    case bt2020
    case bt2100
    case bt601
    case bt709
    case st20651
    case st20653
    case xyz
    case sdkUnknown(String)
}

extension Colorimetry : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Colorimetry] {
        return [
            .bt2020,
            .bt2100,
            .bt601,
            .bt709,
            .st20651,
            .st20653,
            .xyz,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bt2020: return "BT2020"
        case .bt2100: return "BT2100"
        case .bt601: return "BT601"
        case .bt709: return "BT709"
        case .st20651: return "ST2065-1"
        case .st20653: return "ST2065-3"
        case .xyz: return "XYZ"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Colorimetry(rawValue: rawValue) ?? Colorimetry.sdkUnknown(rawValue)
    }
}
