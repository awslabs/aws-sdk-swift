// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The fields that you want to update in the output.
public struct UpdateFlowOutputInput: Equatable {
    /// The protocol to use for the output.
    public let `protocol`: `Protocol`?
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    public let cidrAllowList: [String]?
    /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
    public let description: String?
    /// The IP address where you want to send the output.
    public let destination: String?
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    public let encryption: UpdateEncryption?
    /// The flow that is associated with the output that you want to update.
    public let flowArn: String?
    /// The maximum latency in milliseconds for Zixi-based streams.
    public let maxLatency: Int
    /// The media streams that are associated with the output, and the parameters for those associations.
    public let mediaStreamOutputConfigurations: [MediaStreamOutputConfigurationRequest]?
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    public let minLatency: Int
    /// The ARN of the output that you want to update.
    public let outputArn: String?
    /// The port to use when content is distributed to this output.
    public let port: Int
    /// The remote ID for the Zixi-pull stream.
    public let remoteId: String?
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    public let smoothingLatency: Int
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    public let streamId: String?
    /// The name of the VPC interface attachment to use for this output.
    public let vpcInterfaceAttachment: VpcInterfaceAttachment?

    public init (
        `protocol`: `Protocol`? = nil,
        cidrAllowList: [String]? = nil,
        description: String? = nil,
        destination: String? = nil,
        encryption: UpdateEncryption? = nil,
        flowArn: String? = nil,
        maxLatency: Int = 0,
        mediaStreamOutputConfigurations: [MediaStreamOutputConfigurationRequest]? = nil,
        minLatency: Int = 0,
        outputArn: String? = nil,
        port: Int = 0,
        remoteId: String? = nil,
        smoothingLatency: Int = 0,
        streamId: String? = nil,
        vpcInterfaceAttachment: VpcInterfaceAttachment? = nil
    )
    {
        self.`protocol` = `protocol`
        self.cidrAllowList = cidrAllowList
        self.description = description
        self.destination = destination
        self.encryption = encryption
        self.flowArn = flowArn
        self.maxLatency = maxLatency
        self.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations
        self.minLatency = minLatency
        self.outputArn = outputArn
        self.port = port
        self.remoteId = remoteId
        self.smoothingLatency = smoothingLatency
        self.streamId = streamId
        self.vpcInterfaceAttachment = vpcInterfaceAttachment
    }
}
