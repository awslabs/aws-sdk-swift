// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateFlowSourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decryption = "decryption"
        case description = "description"
        case entitlementArn = "entitlementArn"
        case ingestPort = "ingestPort"
        case maxBitrate = "maxBitrate"
        case maxLatency = "maxLatency"
        case maxSyncBuffer = "maxSyncBuffer"
        case mediaStreamSourceConfigurations = "mediaStreamSourceConfigurations"
        case minLatency = "minLatency"
        case `protocol` = "protocol"
        case streamId = "streamId"
        case vpcInterfaceName = "vpcInterfaceName"
        case whitelistCidr = "whitelistCidr"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decryption = decryption {
            try encodeContainer.encode(decryption, forKey: .decryption)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entitlementArn = entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
        if ingestPort != 0 {
            try encodeContainer.encode(ingestPort, forKey: .ingestPort)
        }
        if maxBitrate != 0 {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if maxLatency != 0 {
            try encodeContainer.encode(maxLatency, forKey: .maxLatency)
        }
        if maxSyncBuffer != 0 {
            try encodeContainer.encode(maxSyncBuffer, forKey: .maxSyncBuffer)
        }
        if let mediaStreamSourceConfigurations = mediaStreamSourceConfigurations {
            var mediaStreamSourceConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreamSourceConfigurations)
            for __listofmediastreamsourceconfigurationrequest0 in mediaStreamSourceConfigurations {
                try mediaStreamSourceConfigurationsContainer.encode(__listofmediastreamsourceconfigurationrequest0)
            }
        }
        if minLatency != 0 {
            try encodeContainer.encode(minLatency, forKey: .minLatency)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let vpcInterfaceName = vpcInterfaceName {
            try encodeContainer.encode(vpcInterfaceName, forKey: .vpcInterfaceName)
        }
        if let whitelistCidr = whitelistCidr {
            try encodeContainer.encode(whitelistCidr, forKey: .whitelistCidr)
        }
    }
}
