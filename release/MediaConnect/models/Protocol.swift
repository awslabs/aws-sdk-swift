// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum `Protocol` {
    case cdi
    case rist
    case rtp
    case rtpFec
    case srtListener
    case st2110Jpegxs
    case zixiPull
    case zixiPush
    case sdkUnknown(String)
}

extension `Protocol` : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [`Protocol`] {
        return [
            .cdi,
            .rist,
            .rtp,
            .rtpFec,
            .srtListener,
            .st2110Jpegxs,
            .zixiPull,
            .zixiPush,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cdi: return "cdi"
        case .rist: return "rist"
        case .rtp: return "rtp"
        case .rtpFec: return "rtp-fec"
        case .srtListener: return "srt-listener"
        case .st2110Jpegxs: return "st2110-jpegxs"
        case .zixiPull: return "zixi-pull"
        case .zixiPush: return "zixi-push"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = `Protocol`(rawValue: rawValue) ?? `Protocol`.sdkUnknown(rawValue)
    }
}
