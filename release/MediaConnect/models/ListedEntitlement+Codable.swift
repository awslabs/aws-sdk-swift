// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListedEntitlement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
        case entitlementArn = "entitlementArn"
        case entitlementName = "entitlementName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dataTransferSubscriberFeePercent != 0 {
            try encodeContainer.encode(dataTransferSubscriberFeePercent, forKey: .dataTransferSubscriberFeePercent)
        }
        if let entitlementArn = entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
        if let entitlementName = entitlementName {
            try encodeContainer.encode(entitlementName, forKey: .entitlementName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTransferSubscriberFeePercentDecoded = try containerValues.decode(Int.self, forKey: .dataTransferSubscriberFeePercent)
        dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercentDecoded
        let entitlementArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
        let entitlementNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entitlementName)
        entitlementName = entitlementNameDecoded
    }
}
