// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>EC2 Image Builder is a fully managed AWS service that makes it easier to automate the
///       creation, management, and deployment of customized, secure, and up-to-date "golden" server
///       images that are pre-installed and pre-configured with software and settings to meet specific
///       IT standards.</p>
public protocol ImagebuilderClientProtocol {
    /// <p>CancelImageCreation cancels the creation of Image. This operation can only be used on
    ///       images in a non-terminal state.</p>
    func cancelImageCreation(input: CancelImageCreationInput, completion: @escaping (SdkResult<CancelImageCreationOutputResponse, CancelImageCreationOutputError>) -> Void)
    /// <p>Creates a new component that can be used to build, validate, test, and assess your
    ///       image.</p>
    func createComponent(input: CreateComponentInput, completion: @escaping (SdkResult<CreateComponentOutputResponse, CreateComponentOutputError>) -> Void)
    /// <p>Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.</p>
    func createContainerRecipe(input: CreateContainerRecipeInput, completion: @escaping (SdkResult<CreateContainerRecipeOutputResponse, CreateContainerRecipeOutputError>) -> Void)
    /// <p>Creates a new distribution configuration. Distribution configurations define and configure
    ///       the outputs of your pipeline.</p>
    func createDistributionConfiguration(input: CreateDistributionConfigurationInput, completion: @escaping (SdkResult<CreateDistributionConfigurationOutputResponse, CreateDistributionConfigurationOutputError>) -> Void)
    /// <p> Creates a new image. This request will create a new image along with all of the
    ///       configured output resources defined in the distribution configuration. You must specify
    ///       exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.</p>
    func createImage(input: CreateImageInput, completion: @escaping (SdkResult<CreateImageOutputResponse, CreateImageOutputError>) -> Void)
    /// <p> Creates a new image pipeline. Image pipelines enable you to automate the creation and
    ///       distribution of images.</p>
    func createImagePipeline(input: CreateImagePipelineInput, completion: @escaping (SdkResult<CreateImagePipelineOutputResponse, CreateImagePipelineOutputError>) -> Void)
    /// <p> Creates a new image recipe. Image recipes define how images are configured, tested, and
    ///       assessed.</p>
    func createImageRecipe(input: CreateImageRecipeInput, completion: @escaping (SdkResult<CreateImageRecipeOutputResponse, CreateImageRecipeOutputError>) -> Void)
    /// <p> Creates a new infrastructure configuration. An infrastructure configuration defines the
    ///       environment in which your image will be built and tested.</p>
    func createInfrastructureConfiguration(input: CreateInfrastructureConfigurationInput, completion: @escaping (SdkResult<CreateInfrastructureConfigurationOutputResponse, CreateInfrastructureConfigurationOutputError>) -> Void)
    /// <p> Deletes a component build version.</p>
    func deleteComponent(input: DeleteComponentInput, completion: @escaping (SdkResult<DeleteComponentOutputResponse, DeleteComponentOutputError>) -> Void)
    /// <p>Deletes a container recipe.</p>
    func deleteContainerRecipe(input: DeleteContainerRecipeInput, completion: @escaping (SdkResult<DeleteContainerRecipeOutputResponse, DeleteContainerRecipeOutputError>) -> Void)
    /// <p> Deletes a distribution configuration.</p>
    func deleteDistributionConfiguration(input: DeleteDistributionConfigurationInput, completion: @escaping (SdkResult<DeleteDistributionConfigurationOutputResponse, DeleteDistributionConfigurationOutputError>) -> Void)
    /// <p> Deletes an image.</p>
    func deleteImage(input: DeleteImageInput, completion: @escaping (SdkResult<DeleteImageOutputResponse, DeleteImageOutputError>) -> Void)
    /// <p> Deletes an image pipeline.</p>
    func deleteImagePipeline(input: DeleteImagePipelineInput, completion: @escaping (SdkResult<DeleteImagePipelineOutputResponse, DeleteImagePipelineOutputError>) -> Void)
    /// <p> Deletes an image recipe.</p>
    func deleteImageRecipe(input: DeleteImageRecipeInput, completion: @escaping (SdkResult<DeleteImageRecipeOutputResponse, DeleteImageRecipeOutputError>) -> Void)
    /// <p> Deletes an infrastructure configuration.</p>
    func deleteInfrastructureConfiguration(input: DeleteInfrastructureConfigurationInput, completion: @escaping (SdkResult<DeleteInfrastructureConfigurationOutputResponse, DeleteInfrastructureConfigurationOutputError>) -> Void)
    /// <p> Gets a component object.</p>
    func getComponent(input: GetComponentInput, completion: @escaping (SdkResult<GetComponentOutputResponse, GetComponentOutputError>) -> Void)
    /// <p> Gets a component policy.</p>
    func getComponentPolicy(input: GetComponentPolicyInput, completion: @escaping (SdkResult<GetComponentPolicyOutputResponse, GetComponentPolicyOutputError>) -> Void)
    /// <p>Retrieves a container recipe.</p>
    func getContainerRecipe(input: GetContainerRecipeInput, completion: @escaping (SdkResult<GetContainerRecipeOutputResponse, GetContainerRecipeOutputError>) -> Void)
    /// <p>Retrieves the policy for a container recipe.</p>
    func getContainerRecipePolicy(input: GetContainerRecipePolicyInput, completion: @escaping (SdkResult<GetContainerRecipePolicyOutputResponse, GetContainerRecipePolicyOutputError>) -> Void)
    /// <p> Gets a distribution configuration.</p>
    func getDistributionConfiguration(input: GetDistributionConfigurationInput, completion: @escaping (SdkResult<GetDistributionConfigurationOutputResponse, GetDistributionConfigurationOutputError>) -> Void)
    /// <p> Gets an image.</p>
    func getImage(input: GetImageInput, completion: @escaping (SdkResult<GetImageOutputResponse, GetImageOutputError>) -> Void)
    /// <p> Gets an image pipeline.</p>
    func getImagePipeline(input: GetImagePipelineInput, completion: @escaping (SdkResult<GetImagePipelineOutputResponse, GetImagePipelineOutputError>) -> Void)
    /// <p> Gets an image policy.</p>
    func getImagePolicy(input: GetImagePolicyInput, completion: @escaping (SdkResult<GetImagePolicyOutputResponse, GetImagePolicyOutputError>) -> Void)
    /// <p> Gets an image recipe.</p>
    func getImageRecipe(input: GetImageRecipeInput, completion: @escaping (SdkResult<GetImageRecipeOutputResponse, GetImageRecipeOutputError>) -> Void)
    /// <p> Gets an image recipe policy.</p>
    func getImageRecipePolicy(input: GetImageRecipePolicyInput, completion: @escaping (SdkResult<GetImageRecipePolicyOutputResponse, GetImageRecipePolicyOutputError>) -> Void)
    /// <p> Gets an infrastructure configuration.</p>
    func getInfrastructureConfiguration(input: GetInfrastructureConfigurationInput, completion: @escaping (SdkResult<GetInfrastructureConfigurationOutputResponse, GetInfrastructureConfigurationOutputError>) -> Void)
    /// <p>Imports a component and transforms its data into a component document.</p>
    func importComponent(input: ImportComponentInput, completion: @escaping (SdkResult<ImportComponentOutputResponse, ImportComponentOutputError>) -> Void)
    /// <p> Returns the list of component build versions for the specified semantic version.</p>
    func listComponentBuildVersions(input: ListComponentBuildVersionsInput, completion: @escaping (SdkResult<ListComponentBuildVersionsOutputResponse, ListComponentBuildVersionsOutputError>) -> Void)
    /// <p>Returns the list of component build versions for the specified semantic version.</p>
    func listComponents(input: ListComponentsInput, completion: @escaping (SdkResult<ListComponentsOutputResponse, ListComponentsOutputError>) -> Void)
    /// <p>Returns a list of container recipes.</p>
    func listContainerRecipes(input: ListContainerRecipesInput, completion: @escaping (SdkResult<ListContainerRecipesOutputResponse, ListContainerRecipesOutputError>) -> Void)
    /// <p>Returns a list of distribution configurations.</p>
    func listDistributionConfigurations(input: ListDistributionConfigurationsInput, completion: @escaping (SdkResult<ListDistributionConfigurationsOutputResponse, ListDistributionConfigurationsOutputError>) -> Void)
    /// <p> Returns a list of image build versions.</p>
    func listImageBuildVersions(input: ListImageBuildVersionsInput, completion: @escaping (SdkResult<ListImageBuildVersionsOutputResponse, ListImageBuildVersionsOutputError>) -> Void)
    /// <p>List the Packages that are associated with an Image Build Version, as determined by AWS Systems Manager Inventory at build time.</p>
    func listImagePackages(input: ListImagePackagesInput, completion: @escaping (SdkResult<ListImagePackagesOutputResponse, ListImagePackagesOutputError>) -> Void)
    /// <p> Returns a list of images created by the specified pipeline.</p>
    func listImagePipelineImages(input: ListImagePipelineImagesInput, completion: @escaping (SdkResult<ListImagePipelineImagesOutputResponse, ListImagePipelineImagesOutputError>) -> Void)
    /// <p>Returns a list of image pipelines.</p>
    func listImagePipelines(input: ListImagePipelinesInput, completion: @escaping (SdkResult<ListImagePipelinesOutputResponse, ListImagePipelinesOutputError>) -> Void)
    /// <p> Returns a list of image recipes.</p>
    func listImageRecipes(input: ListImageRecipesInput, completion: @escaping (SdkResult<ListImageRecipesOutputResponse, ListImageRecipesOutputError>) -> Void)
    /// <p> Returns the list of images that you have access to.</p>
    func listImages(input: ListImagesInput, completion: @escaping (SdkResult<ListImagesOutputResponse, ListImagesOutputError>) -> Void)
    /// <p> Returns a list of infrastructure configurations.</p>
    func listInfrastructureConfigurations(input: ListInfrastructureConfigurationsInput, completion: @escaping (SdkResult<ListInfrastructureConfigurationsOutputResponse, ListInfrastructureConfigurationsOutputError>) -> Void)
    /// <p> Returns the list of tags for the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p> Applies a policy to a component. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutComponentPolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putComponentPolicy(input: PutComponentPolicyInput, completion: @escaping (SdkResult<PutComponentPolicyOutputResponse, PutComponentPolicyOutputError>) -> Void)
    /// <p>Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API <code>PutContainerImagePolicy</code>, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.</p>
    func putContainerRecipePolicy(input: PutContainerRecipePolicyInput, completion: @escaping (SdkResult<PutContainerRecipePolicyOutputResponse, PutContainerRecipePolicyOutputError>) -> Void)
    /// <p>Applies a policy to an image. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutImagePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putImagePolicy(input: PutImagePolicyInput, completion: @escaping (SdkResult<PutImagePolicyOutputResponse, PutImagePolicyOutputError>) -> Void)
    /// <p> Applies a policy to an image recipe. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutImageRecipePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putImageRecipePolicy(input: PutImageRecipePolicyInput, completion: @escaping (SdkResult<PutImageRecipePolicyOutputResponse, PutImageRecipePolicyOutputError>) -> Void)
    /// <p> Manually triggers a pipeline to create an image.</p>
    func startImagePipelineExecution(input: StartImagePipelineExecutionInput, completion: @escaping (SdkResult<StartImagePipelineExecutionOutputResponse, StartImagePipelineExecutionOutputError>) -> Void)
    /// <p> Adds a tag to a resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p> Removes a tag from a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p> Updates a new distribution configuration. Distribution configurations define and
    ///       configure the outputs of your pipeline.</p>
    func updateDistributionConfiguration(input: UpdateDistributionConfigurationInput, completion: @escaping (SdkResult<UpdateDistributionConfigurationOutputResponse, UpdateDistributionConfigurationOutputError>) -> Void)
    /// <p> Updates an image pipeline. Image pipelines enable you to automate the creation and
    ///       distribution of images.</p>
    ///   	      <note>
    ///             <p>UpdateImagePipeline does not support selective updates for the pipeline.
    ///   		You must specify all of the required properties in the update request, not just
    ///   		the properties that have changed.</p>
    ///          </note>
    func updateImagePipeline(input: UpdateImagePipelineInput, completion: @escaping (SdkResult<UpdateImagePipelineOutputResponse, UpdateImagePipelineOutputError>) -> Void)
    /// <p> Updates a new infrastructure configuration. An infrastructure configuration defines the
    ///       environment in which your image will be built and tested.</p>
    func updateInfrastructureConfiguration(input: UpdateInfrastructureConfigurationInput, completion: @escaping (SdkResult<UpdateInfrastructureConfigurationOutputResponse, UpdateInfrastructureConfigurationOutputError>) -> Void)
}
