// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateImageRecipeInput: Equatable {
    /// <p>The block device mappings of the image recipe.</p>
    public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
    /// <p>The idempotency token used to make this request idempotent.</p>
    public var clientToken: String?
    /// <p>The components of the image recipe.</p>
    public let components: [ComponentConfiguration]?
    /// <p> The description of the image recipe.</p>
    public let description: String?
    /// <p> The name of the image recipe.</p>
    public let name: String?
    /// <p>The parent image of the image recipe. The value of the string can be the ARN of the parent
    ///       image or an AMI ID. The format for the ARN follows this example:
    ///         <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>.
    ///       You can provide the specific version that you want to use, or you can use a wildcard in all of
    ///       the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and
    ///       the AMI must be in the same Region in which you are using Image Builder.</p>
    public let parentImage: String?
    /// <p>The semantic version of the image recipe.</p>
    public let semanticVersion: String?
    /// <p> The tags of the image recipe.</p>
    public let tags: [String:String]?
    /// <p>The working directory to be used during build and test workflows.</p>
    public let workingDirectory: String?

    public init (
        blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil,
        clientToken: String? = nil,
        components: [ComponentConfiguration]? = nil,
        description: String? = nil,
        name: String? = nil,
        parentImage: String? = nil,
        semanticVersion: String? = nil,
        tags: [String:String]? = nil,
        workingDirectory: String? = nil
    )
    {
        self.blockDeviceMappings = blockDeviceMappings
        self.clientToken = clientToken
        self.components = components
        self.description = description
        self.name = name
        self.parentImage = parentImage
        self.semanticVersion = semanticVersion
        self.tags = tags
        self.workingDirectory = workingDirectory
    }
}
