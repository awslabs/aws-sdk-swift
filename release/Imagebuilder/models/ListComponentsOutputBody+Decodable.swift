// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentsOutputBody: Equatable {
    public let requestId: String?
    public let componentVersionList: [ComponentVersion]?
    public let nextToken: String?
}

extension ListComponentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case componentVersionList
        case nextToken
        case requestId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let componentVersionListContainer = try containerValues.decodeIfPresent([ComponentVersion].self, forKey: .componentVersionList)
        var componentVersionListDecoded0:[ComponentVersion]? = nil
        if let componentVersionListContainer = componentVersionListContainer {
            componentVersionListDecoded0 = [ComponentVersion]()
            for structure0 in componentVersionListContainer {
                componentVersionListDecoded0?.append(structure0)
            }
        }
        componentVersionList = componentVersionListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
