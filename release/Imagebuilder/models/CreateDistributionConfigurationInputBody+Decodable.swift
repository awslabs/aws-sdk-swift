// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDistributionConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let distributions: [Distribution]?
    public let tags: [String:String]?
    public let clientToken: String?
}

extension CreateDistributionConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case description
        case distributions
        case name
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let distributionsContainer = try containerValues.decodeIfPresent([Distribution].self, forKey: .distributions)
        var distributionsDecoded0:[Distribution]? = nil
        if let distributionsContainer = distributionsContainer {
            distributionsDecoded0 = [Distribution]()
            for structure0 in distributionsContainer {
                distributionsDecoded0?.append(structure0)
            }
        }
        distributions = distributionsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
