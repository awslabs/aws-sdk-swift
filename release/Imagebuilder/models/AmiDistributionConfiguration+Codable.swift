// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmiDistributionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiTags
        case description
        case kmsKeyId
        case launchPermission
        case name
        case targetAccountIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiTags = amiTags {
            var amiTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .amiTags)
            for (dictKey0, tagmap0) in amiTags {
                try amiTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let launchPermission = launchPermission {
            try encodeContainer.encode(launchPermission, forKey: .launchPermission)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetAccountIds = targetAccountIds {
            var targetAccountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetAccountIds)
            for accountlist0 in targetAccountIds {
                try targetAccountIdsContainer.encode(accountlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let targetAccountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetAccountIds)
        var targetAccountIdsDecoded0:[String]? = nil
        if let targetAccountIdsContainer = targetAccountIdsContainer {
            targetAccountIdsDecoded0 = [String]()
            for string0 in targetAccountIdsContainer {
                targetAccountIdsDecoded0?.append(string0)
            }
        }
        targetAccountIds = targetAccountIdsDecoded0
        let amiTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .amiTags)
        var amiTagsDecoded0: [String:String]? = nil
        if let amiTagsContainer = amiTagsContainer {
            amiTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in amiTagsContainer {
                amiTagsDecoded0?[key0] = tagvalue0
            }
        }
        amiTags = amiTagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let launchPermissionDecoded = try containerValues.decodeIfPresent(LaunchPermissionConfiguration.self, forKey: .launchPermission)
        launchPermission = launchPermissionDecoded
    }
}
