// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateImagePipelineInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case containerRecipeArn
        case description
        case distributionConfigurationArn
        case enhancedImageMetadataEnabled
        case imagePipelineArn
        case imageRecipeArn
        case imageTestsConfiguration
        case infrastructureConfigurationArn
        case schedule
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let containerRecipeArn = containerRecipeArn {
            try encodeContainer.encode(containerRecipeArn, forKey: .containerRecipeArn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let distributionConfigurationArn = distributionConfigurationArn {
            try encodeContainer.encode(distributionConfigurationArn, forKey: .distributionConfigurationArn)
        }
        if let enhancedImageMetadataEnabled = enhancedImageMetadataEnabled {
            try encodeContainer.encode(enhancedImageMetadataEnabled, forKey: .enhancedImageMetadataEnabled)
        }
        if let imagePipelineArn = imagePipelineArn {
            try encodeContainer.encode(imagePipelineArn, forKey: .imagePipelineArn)
        }
        if let imageRecipeArn = imageRecipeArn {
            try encodeContainer.encode(imageRecipeArn, forKey: .imageRecipeArn)
        }
        if let imageTestsConfiguration = imageTestsConfiguration {
            try encodeContainer.encode(imageTestsConfiguration, forKey: .imageTestsConfiguration)
        }
        if let infrastructureConfigurationArn = infrastructureConfigurationArn {
            try encodeContainer.encode(infrastructureConfigurationArn, forKey: .infrastructureConfigurationArn)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}
