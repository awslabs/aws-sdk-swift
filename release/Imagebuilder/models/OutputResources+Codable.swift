// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutputResources: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amis
        case containers
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amis = amis {
            var amisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .amis)
            for amilist0 in amis {
                try amisContainer.encode(amilist0)
            }
        }
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for containerlist0 in containers {
                try containersContainer.encode(containerlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amisContainer = try containerValues.decodeIfPresent([Ami].self, forKey: .amis)
        var amisDecoded0:[Ami]? = nil
        if let amisContainer = amisContainer {
            amisDecoded0 = [Ami]()
            for structure0 in amisContainer {
                amisDecoded0?.append(structure0)
            }
        }
        amis = amisDecoded0
        let containersContainer = try containerValues.decodeIfPresent([Container].self, forKey: .containers)
        var containersDecoded0:[Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Container]()
            for structure0 in containersContainer {
                containersDecoded0?.append(structure0)
            }
        }
        containers = containersDecoded0
    }
}
