// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDistributionConfigurationInputBody: Equatable {
    public let distributionConfigurationArn: String?
    public let description: String?
    public let distributions: [Distribution]?
    public let clientToken: String?
}

extension UpdateDistributionConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case description
        case distributionConfigurationArn
        case distributions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionConfigurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributionConfigurationArn)
        distributionConfigurationArn = distributionConfigurationArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let distributionsContainer = try containerValues.decodeIfPresent([Distribution].self, forKey: .distributions)
        var distributionsDecoded0:[Distribution]? = nil
        if let distributionsContainer = distributionsContainer {
            distributionsDecoded0 = [Distribution]()
            for structure0 in distributionsContainer {
                distributionsDecoded0?.append(structure0)
            }
        }
        distributions = distributionsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
