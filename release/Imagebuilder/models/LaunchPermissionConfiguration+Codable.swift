// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchPermissionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case userGroups
        case userIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userGroups = userGroups {
            var userGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userGroups)
            for stringlist0 in userGroups {
                try userGroupsContainer.encode(stringlist0)
            }
        }
        if let userIds = userIds {
            var userIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIds)
            for accountlist0 in userIds {
                try userIdsContainer.encode(accountlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .userIds)
        var userIdsDecoded0:[String]? = nil
        if let userIdsContainer = userIdsContainer {
            userIdsDecoded0 = [String]()
            for string0 in userIdsContainer {
                userIdsDecoded0?.append(string0)
            }
        }
        userIds = userIdsDecoded0
        let userGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .userGroups)
        var userGroupsDecoded0:[String]? = nil
        if let userGroupsContainer = userGroupsContainer {
            userGroupsDecoded0 = [String]()
            for string0 in userGroupsContainer {
                userGroupsDecoded0?.append(string0)
            }
        }
        userGroups = userGroupsDecoded0
    }
}
