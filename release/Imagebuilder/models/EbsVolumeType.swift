// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EbsVolumeType {
    case gp2
    case gp3
    case io1
    case io2
    case sc1
    case st1
    case standard
    case sdkUnknown(String)
}

extension EbsVolumeType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EbsVolumeType] {
        return [
            .gp2,
            .gp3,
            .io1,
            .io2,
            .sc1,
            .st1,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .gp2: return "gp2"
        case .gp3: return "gp3"
        case .io1: return "io1"
        case .io2: return "io2"
        case .sc1: return "sc1"
        case .st1: return "st1"
        case .standard: return "standard"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EbsVolumeType(rawValue: rawValue) ?? EbsVolumeType.sdkUnknown(rawValue)
    }
}
