// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentBuildVersionsOutputBody: Equatable {
    public let requestId: String?
    public let componentSummaryList: [ComponentSummary]?
    public let nextToken: String?
}

extension ListComponentBuildVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case componentSummaryList
        case nextToken
        case requestId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let componentSummaryListContainer = try containerValues.decodeIfPresent([ComponentSummary].self, forKey: .componentSummaryList)
        var componentSummaryListDecoded0:[ComponentSummary]? = nil
        if let componentSummaryListContainer = componentSummaryListContainer {
            componentSummaryListDecoded0 = [ComponentSummary]()
            for structure0 in componentSummaryListContainer {
                componentSummaryListDecoded0?.append(structure0)
            }
        }
        componentSummaryList = componentSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
