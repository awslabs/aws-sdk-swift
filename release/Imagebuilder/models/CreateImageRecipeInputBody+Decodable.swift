// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateImageRecipeInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let semanticVersion: String?
    public let components: [ComponentConfiguration]?
    public let parentImage: String?
    public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
    public let tags: [String:String]?
    public let workingDirectory: String?
    public let clientToken: String?
}

extension CreateImageRecipeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockDeviceMappings
        case clientToken
        case components
        case description
        case name
        case parentImage
        case semanticVersion
        case tags
        case workingDirectory
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let componentsContainer = try containerValues.decodeIfPresent([ComponentConfiguration].self, forKey: .components)
        var componentsDecoded0:[ComponentConfiguration]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [ComponentConfiguration]()
            for structure0 in componentsContainer {
                componentsDecoded0?.append(structure0)
            }
        }
        components = componentsDecoded0
        let parentImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentImage)
        parentImage = parentImageDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([InstanceBlockDeviceMapping].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[InstanceBlockDeviceMapping]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [InstanceBlockDeviceMapping]()
            for structure0 in blockDeviceMappingsContainer {
                blockDeviceMappingsDecoded0?.append(structure0)
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let workingDirectoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workingDirectory)
        workingDirectory = workingDirectoryDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
