// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockDeviceMappings
        case image
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockDeviceMappings)
            for instanceblockdevicemappings0 in blockDeviceMappings {
                try blockDeviceMappingsContainer.encode(instanceblockdevicemappings0)
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([InstanceBlockDeviceMapping].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[InstanceBlockDeviceMapping]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [InstanceBlockDeviceMapping]()
            for structure0 in blockDeviceMappingsContainer {
                blockDeviceMappingsDecoded0?.append(structure0)
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
    }
}
