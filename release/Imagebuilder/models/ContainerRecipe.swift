// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A container recipe.</p>
public struct ContainerRecipe: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the container recipe.</p>
    public let arn: String?
    /// <p>Components for build and test that are included in the container recipe.</p>
    public let components: [ComponentConfiguration]?
    /// <p>Specifies the type of container, such as Docker.</p>
    public let containerType: ContainerType?
    /// <p>The date when this container recipe was created.</p>
    public let dateCreated: String?
    /// <p>The description of the container recipe.</p>
    public let description: String?
    /// <p>Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.</p>
    public let dockerfileTemplateData: String?
    /// <p>A flag that indicates if the target container is encrypted.</p>
    public let encrypted: Bool?
    /// <p>A group of options that can be used to configure an instance for building and testing container images.</p>
    public let instanceConfiguration: InstanceConfiguration?
    /// <p>Identifies which KMS key is used to encrypt the container image for distribution to the target Region.</p>
    public let kmsKeyId: String?
    /// <p>The name of the container recipe.</p>
    public let name: String?
    /// <p>The owner of the container recipe.</p>
    public let owner: String?
    /// <p>The source image for the container recipe.</p>
    public let parentImage: String?
    /// <p>The system platform for the container, such as Windows or Linux.</p>
    public let platform: Platform?
    /// <p>Tags that are attached to the container recipe.</p>
    public let tags: [String:String]?
    /// <p>The destination repository for the container image.</p>
    public let targetRepository: TargetContainerRepository?
    /// <p>The semantic version of the container recipe (<major>.<minor>.<patch>).</p>
    public let version: String?
    /// <p>The working directory for use during build and test workflows.</p>
    public let workingDirectory: String?

    public init (
        arn: String? = nil,
        components: [ComponentConfiguration]? = nil,
        containerType: ContainerType? = nil,
        dateCreated: String? = nil,
        description: String? = nil,
        dockerfileTemplateData: String? = nil,
        encrypted: Bool? = nil,
        instanceConfiguration: InstanceConfiguration? = nil,
        kmsKeyId: String? = nil,
        name: String? = nil,
        owner: String? = nil,
        parentImage: String? = nil,
        platform: Platform? = nil,
        tags: [String:String]? = nil,
        targetRepository: TargetContainerRepository? = nil,
        version: String? = nil,
        workingDirectory: String? = nil
    )
    {
        self.arn = arn
        self.components = components
        self.containerType = containerType
        self.dateCreated = dateCreated
        self.description = description
        self.dockerfileTemplateData = dockerfileTemplateData
        self.encrypted = encrypted
        self.instanceConfiguration = instanceConfiguration
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.owner = owner
        self.parentImage = parentImage
        self.platform = platform
        self.tags = tags
        self.targetRepository = targetRepository
        self.version = version
        self.workingDirectory = workingDirectory
    }
}
