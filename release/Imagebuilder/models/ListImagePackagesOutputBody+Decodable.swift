// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListImagePackagesOutputBody: Equatable {
    public let requestId: String?
    public let imagePackageList: [ImagePackage]?
    public let nextToken: String?
}

extension ListImagePackagesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case imagePackageList
        case nextToken
        case requestId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let imagePackageListContainer = try containerValues.decodeIfPresent([ImagePackage].self, forKey: .imagePackageList)
        var imagePackageListDecoded0:[ImagePackage]? = nil
        if let imagePackageListContainer = imagePackageListContainer {
            imagePackageListDecoded0 = [ImagePackage]()
            for structure0 in imagePackageListContainer {
                imagePackageListDecoded0?.append(structure0)
            }
        }
        imagePackageList = imagePackageListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
