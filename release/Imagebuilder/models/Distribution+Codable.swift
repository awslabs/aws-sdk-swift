// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Distribution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiDistributionConfiguration
        case containerDistributionConfiguration
        case launchTemplateConfigurations
        case licenseConfigurationArns
        case region
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiDistributionConfiguration = amiDistributionConfiguration {
            try encodeContainer.encode(amiDistributionConfiguration, forKey: .amiDistributionConfiguration)
        }
        if let containerDistributionConfiguration = containerDistributionConfiguration {
            try encodeContainer.encode(containerDistributionConfiguration, forKey: .containerDistributionConfiguration)
        }
        if let launchTemplateConfigurations = launchTemplateConfigurations {
            var launchTemplateConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .launchTemplateConfigurations)
            for launchtemplateconfigurationlist0 in launchTemplateConfigurations {
                try launchTemplateConfigurationsContainer.encode(launchtemplateconfigurationlist0)
            }
        }
        if let licenseConfigurationArns = licenseConfigurationArns {
            var licenseConfigurationArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseConfigurationArns)
            for licenseconfigurationarnlist0 in licenseConfigurationArns {
                try licenseConfigurationArnsContainer.encode(licenseconfigurationarnlist0)
            }
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let amiDistributionConfigurationDecoded = try containerValues.decodeIfPresent(AmiDistributionConfiguration.self, forKey: .amiDistributionConfiguration)
        amiDistributionConfiguration = amiDistributionConfigurationDecoded
        let containerDistributionConfigurationDecoded = try containerValues.decodeIfPresent(ContainerDistributionConfiguration.self, forKey: .containerDistributionConfiguration)
        containerDistributionConfiguration = containerDistributionConfigurationDecoded
        let licenseConfigurationArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .licenseConfigurationArns)
        var licenseConfigurationArnsDecoded0:[String]? = nil
        if let licenseConfigurationArnsContainer = licenseConfigurationArnsContainer {
            licenseConfigurationArnsDecoded0 = [String]()
            for string0 in licenseConfigurationArnsContainer {
                licenseConfigurationArnsDecoded0?.append(string0)
            }
        }
        licenseConfigurationArns = licenseConfigurationArnsDecoded0
        let launchTemplateConfigurationsContainer = try containerValues.decodeIfPresent([LaunchTemplateConfiguration].self, forKey: .launchTemplateConfigurations)
        var launchTemplateConfigurationsDecoded0:[LaunchTemplateConfiguration]? = nil
        if let launchTemplateConfigurationsContainer = launchTemplateConfigurationsContainer {
            launchTemplateConfigurationsDecoded0 = [LaunchTemplateConfiguration]()
            for structure0 in launchTemplateConfigurationsContainer {
                launchTemplateConfigurationsDecoded0?.append(structure0)
            }
        }
        launchTemplateConfigurations = launchTemplateConfigurationsDecoded0
    }
}
