// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateContainerRecipeInput: Equatable {
    /// <p>The client token used to make this request idempotent.</p>
    public var clientToken: String?
    /// <p>Components for build and test that are included in the container recipe.</p>
    public let components: [ComponentConfiguration]?
    /// <p>The type of container to create.</p>
    public let containerType: ContainerType?
    /// <p>The description of the container recipe.</p>
    public let description: String?
    /// <p>The Dockerfile template used to build your image as an inline data blob.</p>
    public let dockerfileTemplateData: String?
    /// <p>The S3 URI for the Dockerfile that will be used to build your container image.</p>
    public let dockerfileTemplateUri: String?
    /// <p>Specifies the operating system version for the source image.</p>
    public let imageOsVersionOverride: String?
    /// <p>A group of options that can be used to configure an instance for building and testing container images.</p>
    public let instanceConfiguration: InstanceConfiguration?
    /// <p>Identifies which KMS key is used to encrypt the container image.</p>
    public let kmsKeyId: String?
    /// <p>The name of the container recipe.</p>
    public let name: String?
    /// <p>The source image for the container recipe.</p>
    public let parentImage: String?
    /// <p>Specifies the operating system platform when you use a custom source image.</p>
    public let platformOverride: Platform?
    /// <p>The semantic version of the container recipe (<major>.<minor>.<patch>).</p>
    public let semanticVersion: String?
    /// <p>Tags that are attached to the container recipe.</p>
    public let tags: [String:String]?
    /// <p>The destination repository for the container image.</p>
    public let targetRepository: TargetContainerRepository?
    /// <p>The working directory for use during build and test workflows.</p>
    public let workingDirectory: String?

    public init (
        clientToken: String? = nil,
        components: [ComponentConfiguration]? = nil,
        containerType: ContainerType? = nil,
        description: String? = nil,
        dockerfileTemplateData: String? = nil,
        dockerfileTemplateUri: String? = nil,
        imageOsVersionOverride: String? = nil,
        instanceConfiguration: InstanceConfiguration? = nil,
        kmsKeyId: String? = nil,
        name: String? = nil,
        parentImage: String? = nil,
        platformOverride: Platform? = nil,
        semanticVersion: String? = nil,
        tags: [String:String]? = nil,
        targetRepository: TargetContainerRepository? = nil,
        workingDirectory: String? = nil
    )
    {
        self.clientToken = clientToken
        self.components = components
        self.containerType = containerType
        self.description = description
        self.dockerfileTemplateData = dockerfileTemplateData
        self.dockerfileTemplateUri = dockerfileTemplateUri
        self.imageOsVersionOverride = imageOsVersionOverride
        self.instanceConfiguration = instanceConfiguration
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.parentImage = parentImage
        self.platformOverride = platformOverride
        self.semanticVersion = semanticVersion
        self.tags = tags
        self.targetRepository = targetRepository
        self.workingDirectory = workingDirectory
    }
}
