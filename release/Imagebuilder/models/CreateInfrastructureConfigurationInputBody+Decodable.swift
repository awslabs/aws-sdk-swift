// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInfrastructureConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let instanceTypes: [String]?
    public let instanceProfileName: String?
    public let securityGroupIds: [String]?
    public let subnetId: String?
    public let logging: Logging?
    public let keyPair: String?
    public let terminateInstanceOnFailure: Bool?
    public let snsTopicArn: String?
    public let resourceTags: [String:String]?
    public let tags: [String:String]?
    public let clientToken: String?
}

extension CreateInfrastructureConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken
        case description
        case instanceProfileName
        case instanceTypes
        case keyPair
        case logging
        case name
        case resourceTags
        case securityGroupIds
        case snsTopicArn
        case subnetId
        case tags
        case terminateInstanceOnFailure
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [String]()
            for string0 in instanceTypesContainer {
                instanceTypesDecoded0?.append(string0)
            }
        }
        instanceTypes = instanceTypesDecoded0
        let instanceProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceProfileName)
        instanceProfileName = instanceProfileNameDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(Logging.self, forKey: .logging)
        logging = loggingDecoded
        let keyPairDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyPair)
        keyPair = keyPairDecoded
        let terminateInstanceOnFailureDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .terminateInstanceOnFailure)
        terminateInstanceOnFailure = terminateInstanceOnFailureDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let resourceTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .resourceTags)
        var resourceTagsDecoded0: [String:String]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in resourceTagsContainer {
                resourceTagsDecoded0?[key0] = tagvalue0
            }
        }
        resourceTags = resourceTagsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
