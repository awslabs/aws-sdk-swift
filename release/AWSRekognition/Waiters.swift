// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientProtocol {

    static func projectVersionRunningWaiterConfig() throws -> WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeProjectVersionsInput, result: Result<DescribeProjectVersionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ProjectVersionDescriptions[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "RUNNING"
                guard case .success(let output) = result else { return false }
                let projectVersionDescriptions = output.projectVersionDescriptions
                let projection: [RekognitionClientTypes.ProjectVersionStatus]? = projectVersionDescriptions?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "RUNNING") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeProjectVersionsInput, result: Result<DescribeProjectVersionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ProjectVersionDescriptions[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let projectVersionDescriptions = output.projectVersionDescriptions
                let projection: [RekognitionClientTypes.ProjectVersionStatus]? = projectVersionDescriptions?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "FAILED") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ProjectVersionRunning event on the describeProjectVersions operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeProjectVersionsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilProjectVersionRunning(options: WaiterOptions, input: DescribeProjectVersionsInput) async throws -> WaiterOutcome<DescribeProjectVersionsOutputResponse> {
        let waiter = Waiter(config: try Self.projectVersionRunningWaiterConfig(), operation: self.describeProjectVersions(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func projectVersionTrainingCompletedWaiterConfig() throws -> WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeProjectVersionsInput, result: Result<DescribeProjectVersionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ProjectVersionDescriptions[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "TRAINING_COMPLETED"
                guard case .success(let output) = result else { return false }
                let projectVersionDescriptions = output.projectVersionDescriptions
                let projection: [RekognitionClientTypes.ProjectVersionStatus]? = projectVersionDescriptions?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "TRAINING_COMPLETED") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeProjectVersionsInput, result: Result<DescribeProjectVersionsOutputResponse, Error>) -> Bool in
                // JMESPath expression: "ProjectVersionDescriptions[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "TRAINING_FAILED"
                guard case .success(let output) = result else { return false }
                let projectVersionDescriptions = output.projectVersionDescriptions
                let projection: [RekognitionClientTypes.ProjectVersionStatus]? = projectVersionDescriptions?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "TRAINING_FAILED") }) ?? false
            }),
        ]
        return try WaiterConfiguration<DescribeProjectVersionsInput, DescribeProjectVersionsOutputResponse>(acceptors: acceptors, minDelay: 120.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ProjectVersionTrainingCompleted event on the describeProjectVersions operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeProjectVersionsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilProjectVersionTrainingCompleted(options: WaiterOptions, input: DescribeProjectVersionsInput) async throws -> WaiterOutcome<DescribeProjectVersionsOutputResponse> {
        let waiter = Waiter(config: try Self.projectVersionTrainingCompletedWaiterConfig(), operation: self.describeProjectVersions(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
