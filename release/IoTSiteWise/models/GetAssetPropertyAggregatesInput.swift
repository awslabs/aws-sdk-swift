// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetAssetPropertyAggregatesInput: Equatable {
    /// <p>The data aggregating function.</p>
    public let aggregateTypes: [AggregateType]?
    /// <p>The ID of the asset.</p>
    public let assetId: String?
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    public let endDate: Date?
    /// <p>The maximum number of results to be returned per paginated request.</p>
    ///          <p>Default: 100</p>
    public let maxResults: Int?
    /// <p>The token to be used for the next set of paginated results.</p>
    public let nextToken: String?
    /// <p>The property alias that identifies the property, such as an OPC-UA server data stream path
    ///         (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see
    ///         <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    public let propertyAlias: String?
    /// <p>The ID of the asset property.</p>
    public let propertyId: String?
    /// <p>The quality by which to filter asset data.</p>
    public let qualities: [Quality]?
    /// <p>The time interval over which to aggregate data.</p>
    public let resolution: String?
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    public let startDate: Date?
    /// <p>The chronological sorting order of the requested information.</p>
    ///          <p>Default: <code>ASCENDING</code>
    ///          </p>
    public let timeOrdering: TimeOrdering?

    public init (
        aggregateTypes: [AggregateType]? = nil,
        assetId: String? = nil,
        endDate: Date? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        propertyAlias: String? = nil,
        propertyId: String? = nil,
        qualities: [Quality]? = nil,
        resolution: String? = nil,
        startDate: Date? = nil,
        timeOrdering: TimeOrdering? = nil
    )
    {
        self.aggregateTypes = aggregateTypes
        self.assetId = assetId
        self.endDate = endDate
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.propertyAlias = propertyAlias
        self.propertyId = propertyId
        self.qualities = qualities
        self.resolution = resolution
        self.startDate = startDate
        self.timeOrdering = timeOrdering
    }
}
