// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateAssetModelInput: Equatable {
    /// <p>The composite asset models that are part of this asset model.
    ///       Composite asset models are asset models that contain specific properties. Each composite model
    ///       has a type that defines the properties that the composite model supports. Use composite asset
    ///       models to define alarms on this asset model.</p>
    public let assetModelCompositeModels: [AssetModelCompositeModel]?
    /// <p>A description for the asset model.</p>
    public let assetModelDescription: String?
    /// <p>The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset
    ///       model whose assets can be children of any other assets created from this asset model. For more
    ///       information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>You can specify up to 10 hierarchies per asset model. For more
    ///       information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    public let assetModelHierarchies: [AssetModelHierarchy]?
    /// <p>The ID of the asset model to update.</p>
    public let assetModelId: String?
    /// <p>A unique, friendly name for the asset model.</p>
    public let assetModelName: String?
    /// <p>The updated property definitions of the asset model. For more information, see
    ///       <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html">Asset properties</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>You can specify up to 200 properties per asset model. For more
    ///       information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    public let assetModelProperties: [AssetModelProperty]?
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    public var clientToken: String?

    public init (
        assetModelCompositeModels: [AssetModelCompositeModel]? = nil,
        assetModelDescription: String? = nil,
        assetModelHierarchies: [AssetModelHierarchy]? = nil,
        assetModelId: String? = nil,
        assetModelName: String? = nil,
        assetModelProperties: [AssetModelProperty]? = nil,
        clientToken: String? = nil
    )
    {
        self.assetModelCompositeModels = assetModelCompositeModels
        self.assetModelDescription = assetModelDescription
        self.assetModelHierarchies = assetModelHierarchies
        self.assetModelId = assetModelId
        self.assetModelName = assetModelName
        self.assetModelProperties = assetModelProperties
        self.clientToken = clientToken
    }
}
