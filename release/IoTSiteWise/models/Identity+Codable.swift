// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Identity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case group
        case iamRole
        case iamUser
        case user
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let iamRole = iamRole {
            try encodeContainer.encode(iamRole, forKey: .iamRole)
        }
        if let iamUser = iamUser {
            try encodeContainer.encode(iamUser, forKey: .iamUser)
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDecoded = try containerValues.decodeIfPresent(UserIdentity.self, forKey: .user)
        user = userDecoded
        let groupDecoded = try containerValues.decodeIfPresent(GroupIdentity.self, forKey: .group)
        group = groupDecoded
        let iamUserDecoded = try containerValues.decodeIfPresent(IAMUserIdentity.self, forKey: .iamUser)
        iamUser = iamUserDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(IAMRoleIdentity.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
    }
}
