// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetInterpolatedAssetPropertyValuesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetInterpolatedAssetPropertyValuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetInterpolatedAssetPropertyValuesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetInterpolatedAssetPropertyValuesOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startTimeInSeconds = input.operationInput.startTimeInSeconds {
            let startTimeInSecondsQueryItem = URLQueryItem(name: "startTimeInSeconds".urlPercentEncoding(), value: String(startTimeInSeconds).urlPercentEncoding())
            input.builder.withQueryItem(startTimeInSecondsQueryItem)
        }
        if let startTimeOffsetInNanos = input.operationInput.startTimeOffsetInNanos {
            let startTimeOffsetInNanosQueryItem = URLQueryItem(name: "startTimeOffsetInNanos".urlPercentEncoding(), value: String(startTimeOffsetInNanos).urlPercentEncoding())
            input.builder.withQueryItem(startTimeOffsetInNanosQueryItem)
        }
        if let endTimeInSeconds = input.operationInput.endTimeInSeconds {
            let endTimeInSecondsQueryItem = URLQueryItem(name: "endTimeInSeconds".urlPercentEncoding(), value: String(endTimeInSeconds).urlPercentEncoding())
            input.builder.withQueryItem(endTimeInSecondsQueryItem)
        }
        if let endTimeOffsetInNanos = input.operationInput.endTimeOffsetInNanos {
            let endTimeOffsetInNanosQueryItem = URLQueryItem(name: "endTimeOffsetInNanos".urlPercentEncoding(), value: String(endTimeOffsetInNanos).urlPercentEncoding())
            input.builder.withQueryItem(endTimeOffsetInNanosQueryItem)
        }
        if let assetId = input.operationInput.assetId {
            let assetIdQueryItem = URLQueryItem(name: "assetId".urlPercentEncoding(), value: String(assetId).urlPercentEncoding())
            input.builder.withQueryItem(assetIdQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let propertyAlias = input.operationInput.propertyAlias {
            let propertyAliasQueryItem = URLQueryItem(name: "propertyAlias".urlPercentEncoding(), value: String(propertyAlias).urlPercentEncoding())
            input.builder.withQueryItem(propertyAliasQueryItem)
        }
        if let intervalInSeconds = input.operationInput.intervalInSeconds {
            let intervalInSecondsQueryItem = URLQueryItem(name: "intervalInSeconds".urlPercentEncoding(), value: String(intervalInSeconds).urlPercentEncoding())
            input.builder.withQueryItem(intervalInSecondsQueryItem)
        }
        if let type = input.operationInput.type {
            let typeQueryItem = URLQueryItem(name: "type".urlPercentEncoding(), value: String(type).urlPercentEncoding())
            input.builder.withQueryItem(typeQueryItem)
        }
        if let propertyId = input.operationInput.propertyId {
            let propertyIdQueryItem = URLQueryItem(name: "propertyId".urlPercentEncoding(), value: String(propertyId).urlPercentEncoding())
            input.builder.withQueryItem(propertyIdQueryItem)
        }
        if let quality = input.operationInput.quality {
            let qualityQueryItem = URLQueryItem(name: "quality".urlPercentEncoding(), value: String(quality.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(qualityQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetInterpolatedAssetPropertyValuesInput>
    public typealias MOutput = OperationOutput<GetInterpolatedAssetPropertyValuesOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<GetInterpolatedAssetPropertyValuesOutputError>
}
