// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAssetOutputBody: Equatable {
    public let assetId: String?
    public let assetArn: String?
    public let assetName: String?
    public let assetModelId: String?
    public let assetProperties: [AssetProperty]?
    public let assetHierarchies: [AssetHierarchy]?
    public let assetCompositeModels: [AssetCompositeModel]?
    public let assetCreationDate: Date?
    public let assetLastUpdateDate: Date?
    public let assetStatus: AssetStatus?
}

extension DescribeAssetOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assetArn
        case assetCompositeModels
        case assetCreationDate
        case assetHierarchies
        case assetId
        case assetLastUpdateDate
        case assetModelId
        case assetName
        case assetProperties
        case assetStatus
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetId)
        assetId = assetIdDecoded
        let assetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetArn)
        assetArn = assetArnDecoded
        let assetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetName)
        assetName = assetNameDecoded
        let assetModelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assetModelId)
        assetModelId = assetModelIdDecoded
        let assetPropertiesContainer = try containerValues.decodeIfPresent([AssetProperty].self, forKey: .assetProperties)
        var assetPropertiesDecoded0:[AssetProperty]? = nil
        if let assetPropertiesContainer = assetPropertiesContainer {
            assetPropertiesDecoded0 = [AssetProperty]()
            for structure0 in assetPropertiesContainer {
                assetPropertiesDecoded0?.append(structure0)
            }
        }
        assetProperties = assetPropertiesDecoded0
        let assetHierarchiesContainer = try containerValues.decodeIfPresent([AssetHierarchy].self, forKey: .assetHierarchies)
        var assetHierarchiesDecoded0:[AssetHierarchy]? = nil
        if let assetHierarchiesContainer = assetHierarchiesContainer {
            assetHierarchiesDecoded0 = [AssetHierarchy]()
            for structure0 in assetHierarchiesContainer {
                assetHierarchiesDecoded0?.append(structure0)
            }
        }
        assetHierarchies = assetHierarchiesDecoded0
        let assetCompositeModelsContainer = try containerValues.decodeIfPresent([AssetCompositeModel].self, forKey: .assetCompositeModels)
        var assetCompositeModelsDecoded0:[AssetCompositeModel]? = nil
        if let assetCompositeModelsContainer = assetCompositeModelsContainer {
            assetCompositeModelsDecoded0 = [AssetCompositeModel]()
            for structure0 in assetCompositeModelsContainer {
                assetCompositeModelsDecoded0?.append(structure0)
            }
        }
        assetCompositeModels = assetCompositeModelsDecoded0
        let assetCreationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .assetCreationDate)
        assetCreationDate = assetCreationDateDecoded
        let assetLastUpdateDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .assetLastUpdateDate)
        assetLastUpdateDate = assetLastUpdateDateDecoded
        let assetStatusDecoded = try containerValues.decodeIfPresent(AssetStatus.self, forKey: .assetStatus)
        assetStatus = assetStatusDecoded
    }
}
