// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Aggregates: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case average
        case count
        case maximum
        case minimum
        case standardDeviation
        case sum
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let average = average {
            try encodeContainer.encode(average, forKey: .average)
        }
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let maximum = maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let minimum = minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let standardDeviation = standardDeviation {
            try encodeContainer.encode(standardDeviation, forKey: .standardDeviation)
        }
        if let sum = sum {
            try encodeContainer.encode(sum, forKey: .sum)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let averageDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .average)
        average = averageDecoded
        let countDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .count)
        count = countDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .sum)
        sum = sumDecoded
        let standardDeviationDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .standardDeviation)
        standardDeviation = standardDeviationDecoded
    }
}
