// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains an asset metric property. With metrics, you can calculate aggregate functions,
///       such as an average, maximum, or minimum, as specified through an expression. A metric maps
///       several values to a single value (such as a sum).</p>
///          <p>The maximum number of dependent/cascading variables used in any one metric calculation is
///       10. Therefore, a <i>root</i> metric can have
///       up to 10 cascading metrics in its computational dependency
///       tree. Additionally, a metric can only have a data type of <code>DOUBLE</code> and consume
///       properties with data types of <code>INTEGER</code> or <code>DOUBLE</code>.</p>
///          <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html#metrics">Metrics</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
public struct Metric: Equatable {
    /// <p>The mathematical expression that defines the metric aggregation function. You can specify
    ///       up to 10 variables per expression. You can specify up to 10 functions
    ///       per expression. </p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    public let expression: String?
    /// <p>The list of variables used in the expression.</p>
    public let variables: [ExpressionVariable]?
    /// <p>The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression.
    ///       AWS IoT SiteWise computes one data point per <code>window</code>.</p>
    public let window: MetricWindow?

    public init (
        expression: String? = nil,
        variables: [ExpressionVariable]? = nil,
        window: MetricWindow? = nil
    )
    {
        self.expression = expression
        self.variables = variables
        self.window = window
    }
}
