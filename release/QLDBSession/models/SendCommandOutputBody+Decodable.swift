// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendCommandOutputBody: Equatable {
    public let startSession: StartSessionResult?
    public let startTransaction: StartTransactionResult?
    public let endSession: EndSessionResult?
    public let commitTransaction: CommitTransactionResult?
    public let abortTransaction: AbortTransactionResult?
    public let executeStatement: ExecuteStatementResult?
    public let fetchPage: FetchPageResult?
}

extension SendCommandOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case abortTransaction = "AbortTransaction"
        case commitTransaction = "CommitTransaction"
        case endSession = "EndSession"
        case executeStatement = "ExecuteStatement"
        case fetchPage = "FetchPage"
        case startSession = "StartSession"
        case startTransaction = "StartTransaction"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startSessionDecoded = try containerValues.decodeIfPresent(StartSessionResult.self, forKey: .startSession)
        startSession = startSessionDecoded
        let startTransactionDecoded = try containerValues.decodeIfPresent(StartTransactionResult.self, forKey: .startTransaction)
        startTransaction = startTransactionDecoded
        let endSessionDecoded = try containerValues.decodeIfPresent(EndSessionResult.self, forKey: .endSession)
        endSession = endSessionDecoded
        let commitTransactionDecoded = try containerValues.decodeIfPresent(CommitTransactionResult.self, forKey: .commitTransaction)
        commitTransaction = commitTransactionDecoded
        let abortTransactionDecoded = try containerValues.decodeIfPresent(AbortTransactionResult.self, forKey: .abortTransaction)
        abortTransaction = abortTransactionDecoded
        let executeStatementDecoded = try containerValues.decodeIfPresent(ExecuteStatementResult.self, forKey: .executeStatement)
        executeStatement = executeStatementDecoded
        let fetchPageDecoded = try containerValues.decodeIfPresent(FetchPageResult.self, forKey: .fetchPage)
        fetchPage = fetchPageDecoded
    }
}
