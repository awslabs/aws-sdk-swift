// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAutoMLJobInputBody: Equatable {
    public let autoMLJobName: String?
    public let inputDataConfig: [AutoMLChannel]?
    public let outputDataConfig: AutoMLOutputDataConfig?
    public let problemType: ProblemType?
    public let autoMLJobObjective: AutoMLJobObjective?
    public let autoMLJobConfig: AutoMLJobConfig?
    public let roleArn: String?
    public let generateCandidateDefinitionsOnly: Bool
    public let tags: [Tag]?
    public let modelDeployConfig: ModelDeployConfig?
}

extension CreateAutoMLJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([AutoMLChannel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[AutoMLChannel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [AutoMLChannel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(AutoMLOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let autoMLJobConfigDecoded = try containerValues.decodeIfPresent(AutoMLJobConfig.self, forKey: .autoMLJobConfig)
        autoMLJobConfig = autoMLJobConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let generateCandidateDefinitionsOnlyDecoded = try containerValues.decode(Bool.self, forKey: .generateCandidateDefinitionsOnly)
        generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnlyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let modelDeployConfigDecoded = try containerValues.decodeIfPresent(ModelDeployConfig.self, forKey: .modelDeployConfig)
        modelDeployConfig = modelDeployConfigDecoded
    }
}
