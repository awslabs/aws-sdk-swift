// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Trial: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case experimentName = "ExperimentName"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case source = "Source"
        case tags = "Tags"
        case trialArn = "TrialArn"
        case trialComponentSummaries = "TrialComponentSummaries"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialArn = trialArn {
            try encodeContainer.encode(trialArn, forKey: .trialArn)
        }
        if let trialComponentSummaries = trialComponentSummaries {
            var trialComponentSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trialComponentSummaries)
            for trialcomponentsimplesummaries0 in trialComponentSummaries {
                try trialComponentSummariesContainer.encode(trialcomponentsimplesummaries0)
            }
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let trialArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trialArn)
        trialArn = trialArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let experimentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(TrialSource.self, forKey: .source)
        source = sourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let trialComponentSummariesContainer = try containerValues.decodeIfPresent([TrialComponentSimpleSummary].self, forKey: .trialComponentSummaries)
        var trialComponentSummariesDecoded0:[TrialComponentSimpleSummary]? = nil
        if let trialComponentSummariesContainer = trialComponentSummariesContainer {
            trialComponentSummariesDecoded0 = [TrialComponentSimpleSummary]()
            for structure0 in trialComponentSummariesContainer {
                trialComponentSummariesDecoded0?.append(structure0)
            }
        }
        trialComponentSummaries = trialComponentSummariesDecoded0
    }
}
