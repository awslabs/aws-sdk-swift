// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateNotebookInstanceInput: Equatable {
    /// <p>A list of the Elastic Inference (EI) instance types to associate with this notebook
    ///             instance. Currently only one EI instance type can be associated with a notebook
    ///             instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon
    ///                 SageMaker</a>.</p>
    public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
    /// <p>An array of up to three Git repositories to associate with the notebook instance.
    ///             These can be either the names of Git repositories stored as resources in your account,
    ///             or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. These repositories are cloned at the same level as the default
    ///             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    ///                 Repositories with Amazon SageMaker Notebook Instances</a>.</p>
    public let additionalCodeRepositories: [String]?
    /// <p>The Git repository to associate with the notebook instance as its default code
    ///             repository. This can be either the name of a Git repository stored as a resource in your
    ///             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. When you open a notebook instance, it opens in the directory that
    ///             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with Amazon SageMaker
    ///                 Notebook Instances</a>.</p>
    public let defaultCodeRepository: String?
    /// <p>A list of the Elastic Inference (EI) instance types to remove from this notebook
    ///             instance. This operation is idempotent. If you specify an accelerator type that is not
    ///             associated with the notebook instance when you call this method, it does not throw an
    ///             error.</p>
    public let disassociateAcceleratorTypes: Bool
    /// <p>A list of names or URLs of the default Git repositories to remove from this notebook
    ///             instance. This operation is idempotent. If you specify a Git repository that is not
    ///             associated with the notebook instance when you call this method, it does not throw an
    ///             error.</p>
    public let disassociateAdditionalCodeRepositories: Bool
    /// <p>The name or URL of the default Git repository to remove from this notebook instance.
    ///             This operation is idempotent. If you specify a Git repository that is not associated
    ///             with the notebook instance when you call this method, it does not throw an error.</p>
    public let disassociateDefaultCodeRepository: Bool
    /// <p>Set to <code>true</code> to remove the notebook instance lifecycle configuration
    ///             currently associated with the notebook instance. This operation is idempotent. If you
    ///             specify a lifecycle configuration that is not associated with the notebook instance when
    ///             you call this method, it does not throw an error.</p>
    public let disassociateLifecycleConfig: Bool
    /// <p>The Amazon ML compute instance type.</p>
    public let instanceType: InstanceType?
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For
    ///             information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
    ///                 Customize a Notebook Instance</a>.</p>
    public let lifecycleConfigName: String?
    /// <p>The name of the notebook instance to update.</p>
    public let notebookInstanceName: String?
    /// <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access the
    ///             notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker Roles</a>. </p>
    ///         <note>
    ///             <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
    ///                     <code>iam:PassRole</code> permission.</p>
    ///         </note>
    public let roleArn: String?
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The
    ///             default value is <code>Enabled</code>.</p>
    ///         <note>
    ///             <p>If you set this to <code>Disabled</code>, users don't have root access on the
    ///                 notebook instance, but lifecycle configuration scripts still run with root
    ///                 permissions.</p>
    ///         </note>
    public let rootAccess: RootAccess?
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
    ///             default value is 5 GB. ML storage volumes are encrypted, so Amazon SageMaker can't determine the
    ///             amount of available free space on the volume. Because of this, you can increase the
    ///             volume size when you update a notebook instance, but you can't decrease the volume size.
    ///             If you want to decrease the size of the ML storage volume in use, create a new notebook
    ///             instance with the desired size.</p>
    public let volumeSizeInGB: Int?

    public init (
        acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [String]? = nil,
        defaultCodeRepository: String? = nil,
        disassociateAcceleratorTypes: Bool = false,
        disassociateAdditionalCodeRepositories: Bool = false,
        disassociateDefaultCodeRepository: Bool = false,
        disassociateLifecycleConfig: Bool = false,
        instanceType: InstanceType? = nil,
        lifecycleConfigName: String? = nil,
        notebookInstanceName: String? = nil,
        roleArn: String? = nil,
        rootAccess: RootAccess? = nil,
        volumeSizeInGB: Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.disassociateAcceleratorTypes = disassociateAcceleratorTypes
        self.disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositories
        self.disassociateDefaultCodeRepository = disassociateDefaultCodeRepository
        self.disassociateLifecycleConfig = disassociateLifecycleConfig
        self.instanceType = instanceType
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.volumeSizeInGB = volumeSizeInGB
    }
}
