// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransformOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accept = "Accept"
        case assembleWith = "AssembleWith"
        case kmsKeyId = "KmsKeyId"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accept = accept {
            try encodeContainer.encode(accept, forKey: .accept)
        }
        if let assembleWith = assembleWith {
            try encodeContainer.encode(assembleWith.rawValue, forKey: .assembleWith)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let acceptDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accept)
        accept = acceptDecoded
        let assembleWithDecoded = try containerValues.decodeIfPresent(AssemblyType.self, forKey: .assembleWith)
        assembleWith = assembleWithDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
