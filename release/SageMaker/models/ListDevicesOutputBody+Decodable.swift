// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDevicesOutputBody: Equatable {
    public let deviceSummaries: [DeviceSummary]?
    public let nextToken: String?
}

extension ListDevicesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deviceSummaries = "DeviceSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceSummariesContainer = try containerValues.decodeIfPresent([DeviceSummary].self, forKey: .deviceSummaries)
        var deviceSummariesDecoded0:[DeviceSummary]? = nil
        if let deviceSummariesContainer = deviceSummariesContainer {
            deviceSummariesDecoded0 = [DeviceSummary]()
            for structure0 in deviceSummariesContainer {
                deviceSummariesDecoded0?.append(structure0)
            }
        }
        deviceSummaries = deviceSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
