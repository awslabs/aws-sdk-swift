// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFlowDefinitionInputBody: Equatable {
    public let flowDefinitionName: String?
    public let humanLoopRequestSource: HumanLoopRequestSource?
    public let humanLoopActivationConfig: HumanLoopActivationConfig?
    public let humanLoopConfig: HumanLoopConfig?
    public let outputConfig: FlowDefinitionOutputConfig?
    public let roleArn: String?
    public let tags: [Tag]?
}

extension CreateFlowDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case flowDefinitionName = "FlowDefinitionName"
        case humanLoopActivationConfig = "HumanLoopActivationConfig"
        case humanLoopConfig = "HumanLoopConfig"
        case humanLoopRequestSource = "HumanLoopRequestSource"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowDefinitionName)
        flowDefinitionName = flowDefinitionNameDecoded
        let humanLoopRequestSourceDecoded = try containerValues.decodeIfPresent(HumanLoopRequestSource.self, forKey: .humanLoopRequestSource)
        humanLoopRequestSource = humanLoopRequestSourceDecoded
        let humanLoopActivationConfigDecoded = try containerValues.decodeIfPresent(HumanLoopActivationConfig.self, forKey: .humanLoopActivationConfig)
        humanLoopActivationConfig = humanLoopActivationConfigDecoded
        let humanLoopConfigDecoded = try containerValues.decodeIfPresent(HumanLoopConfig.self, forKey: .humanLoopConfig)
        humanLoopConfig = humanLoopConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(FlowDefinitionOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
