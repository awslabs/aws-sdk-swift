// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProcessingOutputConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId = "KmsKeyId"
        case outputs = "Outputs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for processingoutputs0 in outputs {
                try outputsContainer.encode(processingoutputs0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputsContainer = try containerValues.decodeIfPresent([ProcessingOutput].self, forKey: .outputs)
        var outputsDecoded0:[ProcessingOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [ProcessingOutput]()
            for structure0 in outputsContainer {
                outputsDecoded0?.append(structure0)
            }
        }
        outputs = outputsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
