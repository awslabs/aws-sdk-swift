// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Endpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringSchedules = "MonitoringSchedules"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataCaptureConfig = dataCaptureConfig {
            try encodeContainer.encode(dataCaptureConfig, forKey: .dataCaptureConfig)
        }
        if let endpointArn = endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let endpointConfigName = endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let endpointStatus = endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringSchedules = monitoringSchedules {
            var monitoringSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringSchedules)
            for monitoringschedulelist0 in monitoringSchedules {
                try monitoringSchedulesContainer.encode(monitoringschedulelist0)
            }
        }
        if let productionVariants = productionVariants {
            var productionVariantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productionVariants)
            for productionvariantsummarylist0 in productionVariants {
                try productionVariantsContainer.encode(productionvariantsummarylist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([ProductionVariantSummary].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                productionVariantsDecoded0?.append(structure0)
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringSchedulesContainer = try containerValues.decodeIfPresent([MonitoringSchedule].self, forKey: .monitoringSchedules)
        var monitoringSchedulesDecoded0:[MonitoringSchedule]? = nil
        if let monitoringSchedulesContainer = monitoringSchedulesContainer {
            monitoringSchedulesDecoded0 = [MonitoringSchedule]()
            for structure0 in monitoringSchedulesContainer {
                monitoringSchedulesDecoded0?.append(structure0)
            }
        }
        monitoringSchedules = monitoringSchedulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
