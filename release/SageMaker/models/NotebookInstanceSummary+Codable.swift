// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotebookInstanceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case creationTime = "CreationTime"
        case defaultCodeRepository = "DefaultCodeRepository"
        case instanceType = "InstanceType"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceArn = "NotebookInstanceArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case notebookInstanceStatus = "NotebookInstanceStatus"
        case url = "Url"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalCodeRepositories = additionalCodeRepositories {
            var additionalCodeRepositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalCodeRepositories)
            for additionalcoderepositorynamesorurls0 in additionalCodeRepositories {
                try additionalCodeRepositoriesContainer.encode(additionalcoderepositorynamesorurls0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultCodeRepository = defaultCodeRepository {
            try encodeContainer.encode(defaultCodeRepository, forKey: .defaultCodeRepository)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let notebookInstanceArn = notebookInstanceArn {
            try encodeContainer.encode(notebookInstanceArn, forKey: .notebookInstanceArn)
        }
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
        if let notebookInstanceName = notebookInstanceName {
            try encodeContainer.encode(notebookInstanceName, forKey: .notebookInstanceName)
        }
        if let notebookInstanceStatus = notebookInstanceStatus {
            try encodeContainer.encode(notebookInstanceStatus.rawValue, forKey: .notebookInstanceStatus)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
        let notebookInstanceStatusDecoded = try containerValues.decodeIfPresent(NotebookInstanceStatus.self, forKey: .notebookInstanceStatus)
        notebookInstanceStatus = notebookInstanceStatusDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [String]()
            for string0 in additionalCodeRepositoriesContainer {
                additionalCodeRepositoriesDecoded0?.append(string0)
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
    }
}
