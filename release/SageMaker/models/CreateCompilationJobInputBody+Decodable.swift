// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCompilationJobInputBody: Equatable {
    public let compilationJobName: String?
    public let roleArn: String?
    public let inputConfig: InputConfig?
    public let outputConfig: OutputConfig?
    public let stoppingCondition: StoppingCondition?
    public let tags: [Tag]?
}

extension CreateCompilationJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compilationJobName = "CompilationJobName"
        case inputConfig = "InputConfig"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(InputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
