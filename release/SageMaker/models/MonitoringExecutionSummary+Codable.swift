// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MonitoringExecutionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringExecutionStatus = "MonitoringExecutionStatus"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringType = "MonitoringType"
        case processingJobArn = "ProcessingJobArn"
        case scheduledTime = "ScheduledTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringExecutionStatus = monitoringExecutionStatus {
            try encodeContainer.encode(monitoringExecutionStatus.rawValue, forKey: .monitoringExecutionStatus)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringScheduleName = monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let processingJobArn = processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let scheduledTime = scheduledTime {
            try encodeContainer.encode(scheduledTime.timeIntervalSince1970, forKey: .scheduledTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let scheduledTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scheduledTime)
        scheduledTime = scheduledTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringExecutionStatusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .monitoringExecutionStatus)
        monitoringExecutionStatus = monitoringExecutionStatusDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}
