// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containers = "Containers"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceExecutionConfig = "InferenceExecutionConfig"
        case modelName = "ModelName"
        case primaryContainer = "PrimaryContainer"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for containerdefinitionlist0 in containers {
                try containersContainer.encode(containerdefinitionlist0)
            }
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let inferenceExecutionConfig = inferenceExecutionConfig {
            try encodeContainer.encode(inferenceExecutionConfig, forKey: .inferenceExecutionConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let primaryContainer = primaryContainer {
            try encodeContainer.encode(primaryContainer, forKey: .primaryContainer)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}
