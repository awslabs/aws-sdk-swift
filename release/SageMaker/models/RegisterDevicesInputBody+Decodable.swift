// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDevicesInputBody: Equatable {
    public let deviceFleetName: String?
    public let devices: [Device]?
    public let tags: [Tag]?
}

extension RegisterDevicesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case devices = "Devices"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let devicesContainer = try containerValues.decodeIfPresent([Device].self, forKey: .devices)
        var devicesDecoded0:[Device]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [Device]()
            for structure0 in devicesContainer {
                devicesDecoded0?.append(structure0)
            }
        }
        devices = devicesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
