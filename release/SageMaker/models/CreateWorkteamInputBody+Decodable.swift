// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkteamInputBody: Equatable {
    public let workteamName: String?
    public let workforceName: String?
    public let memberDefinitions: [MemberDefinition]?
    public let description: String?
    public let notificationConfiguration: NotificationConfiguration?
    public let tags: [Tag]?
}

extension CreateWorkteamInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case tags = "Tags"
        case workforceName = "WorkforceName"
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
        let workforceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let memberDefinitionsContainer = try containerValues.decodeIfPresent([MemberDefinition].self, forKey: .memberDefinitions)
        var memberDefinitionsDecoded0:[MemberDefinition]? = nil
        if let memberDefinitionsContainer = memberDefinitionsContainer {
            memberDefinitionsDecoded0 = [MemberDefinition]()
            for structure0 in memberDefinitionsContainer {
                memberDefinitionsDecoded0?.append(structure0)
            }
        }
        memberDefinitions = memberDefinitionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
