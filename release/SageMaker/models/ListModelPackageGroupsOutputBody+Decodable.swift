// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListModelPackageGroupsOutputBody: Equatable {
    public let modelPackageGroupSummaryList: [ModelPackageGroupSummary]?
    public let nextToken: String?
}

extension ListModelPackageGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case modelPackageGroupSummaryList = "ModelPackageGroupSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupSummaryListContainer = try containerValues.decodeIfPresent([ModelPackageGroupSummary].self, forKey: .modelPackageGroupSummaryList)
        var modelPackageGroupSummaryListDecoded0:[ModelPackageGroupSummary]? = nil
        if let modelPackageGroupSummaryListContainer = modelPackageGroupSummaryListContainer {
            modelPackageGroupSummaryListDecoded0 = [ModelPackageGroupSummary]()
            for structure0 in modelPackageGroupSummaryListContainer {
                modelPackageGroupSummaryListDecoded0?.append(structure0)
            }
        }
        modelPackageGroupSummaryList = modelPackageGroupSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
