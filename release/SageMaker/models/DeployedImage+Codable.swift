// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeployedImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resolutionTime = "ResolutionTime"
        case resolvedImage = "ResolvedImage"
        case specifiedImage = "SpecifiedImage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resolutionTime = resolutionTime {
            try encodeContainer.encode(resolutionTime.timeIntervalSince1970, forKey: .resolutionTime)
        }
        if let resolvedImage = resolvedImage {
            try encodeContainer.encode(resolvedImage, forKey: .resolvedImage)
        }
        if let specifiedImage = specifiedImage {
            try encodeContainer.encode(specifiedImage, forKey: .specifiedImage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specifiedImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .specifiedImage)
        specifiedImage = specifiedImageDecoded
        let resolvedImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resolvedImage)
        resolvedImage = resolvedImageDecoded
        let resolutionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .resolutionTime)
        resolutionTime = resolutionTimeDecoded
    }
}
