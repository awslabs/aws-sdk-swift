// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch
///         Transform</a>.</p>
public struct TransformJob: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the AutoML job that created the transform job.</p>
    public let autoMLJobArn: String?
    /// <p>Specifies the number of records to include in a mini-batch for an HTTP inference request.
    ///       A record is a single unit of input data that inference can be made on. For example, a single
    ///       line in a CSV file is a record.</p>
    public let batchStrategy: BatchStrategy?
    /// <p>A timestamp that shows when the transform Job was created.</p>
    public let creationTime: Date?
    /// <p>The data structure used to specify the data to be used for inference in a batch
    ///             transform job and to associate the data that is relevant to the prediction results in
    ///             the output. The input filter provided allows you to exclude input data that is not
    ///             needed for inference in a batch transform job. The output filter provided allows you to
    ///             include input data relevant to interpreting the predictions in the output from the job.
    ///             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
    ///                 Results with their Corresponding Input Records</a>.</p>
    public let dataProcessing: DataProcessing?
    /// <p>The environment variables to set in the Docker container. We support up to 16 key and
    ///       values entries in the map.</p>
    public let environment: [String:String]?
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    ///       you call the following APIs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>CreateProcessingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTrainingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTransformJob</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let experimentConfig: ExperimentConfig?
    /// <p>If the transform job failed, the reason it failed.</p>
    public let failureReason: String?
    /// <p>The Amazon Resource Name (ARN) of the  labeling job that created the transform job.</p>
    public let labelingJobArn: String?
    /// <p>The maximum number of parallel requests that can be sent to each instance in a transform
    ///       job. If <code>MaxConcurrentTransforms</code> is set to 0 or left unset, SageMaker checks the
    ///       optional execution-parameters to determine the settings for your chosen algorithm. If the
    ///       execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms,
    ///       you don't need to set a value for <code>MaxConcurrentTransforms</code>.</p>
    public let maxConcurrentTransforms: Int?
    /// <p>The maximum allowed size of the payload, in MB. A payload is the data portion of a record
    ///       (without metadata). The value in <code>MaxPayloadInMB</code> must be greater than, or equal
    ///       to, the size of a single record. To estimate the size of a record in MB, divide the size of
    ///       your dataset by the number of records. To ensure that the records fit within the maximum
    ///       payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases
    ///       where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding,
    ///       set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in
    ///       algorithms do not support HTTP chunked encoding.</p>
    public let maxPayloadInMB: Int?
    /// <p>Configures the timeout and maximum number of retries for processing a transform job
    ///             invocation.</p>
    public let modelClientConfig: ModelClientConfig?
    /// <p>The name of the model associated with the transform job.</p>
    public let modelName: String?
    /// <p>A list of tags associated with the transform job.</p>
    public let tags: [Tag]?
    /// <p>Indicates when the transform job has been completed, or has stopped or failed. You are
    ///       billed for the time interval between this time and the value of
    ///         <code>TransformStartTime</code>.</p>
    public let transformEndTime: Date?
    /// <p>Describes the input source of a transform job and the way the transform job consumes
    ///             it.</p>
    public let transformInput: TransformInput?
    /// <p>The Amazon Resource Name (ARN) of the transform job.</p>
    public let transformJobArn: String?
    /// <p>The name of the transform job.</p>
    public let transformJobName: String?
    /// <p>The status of the transform job.</p>
    ///          <p>Transform job statuses are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>InProgress</code> - The job is in progress.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Completed</code> - The job has completed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Failed</code> - The transform job has failed. To see the reason for the failure,
    ///           see the <code>FailureReason</code> field in the response to a
    ///             <code>DescribeTransformJob</code> call.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Stopping</code> - The transform job is stopping.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Stopped</code> - The transform job has stopped.</p>
    ///             </li>
    ///          </ul>
    public let transformJobStatus: TransformJobStatus?
    /// <p>Describes the results of a transform job.</p>
    public let transformOutput: TransformOutput?
    /// <p>Describes the resources, including ML instance types and ML instance count, to use for
    ///             transform job.</p>
    public let transformResources: TransformResources?
    /// <p>Indicates when the transform job starts on ML instances. You are billed for the time
    ///       interval between this time and the value of <code>TransformEndTime</code>.</p>
    public let transformStartTime: Date?

    public init (
        autoMLJobArn: String? = nil,
        batchStrategy: BatchStrategy? = nil,
        creationTime: Date? = nil,
        dataProcessing: DataProcessing? = nil,
        environment: [String:String]? = nil,
        experimentConfig: ExperimentConfig? = nil,
        failureReason: String? = nil,
        labelingJobArn: String? = nil,
        maxConcurrentTransforms: Int? = nil,
        maxPayloadInMB: Int? = nil,
        modelClientConfig: ModelClientConfig? = nil,
        modelName: String? = nil,
        tags: [Tag]? = nil,
        transformEndTime: Date? = nil,
        transformInput: TransformInput? = nil,
        transformJobArn: String? = nil,
        transformJobName: String? = nil,
        transformJobStatus: TransformJobStatus? = nil,
        transformOutput: TransformOutput? = nil,
        transformResources: TransformResources? = nil,
        transformStartTime: Date? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.batchStrategy = batchStrategy
        self.creationTime = creationTime
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.labelingJobArn = labelingJobArn
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.tags = tags
        self.transformEndTime = transformEndTime
        self.transformInput = transformInput
        self.transformJobArn = transformJobArn
        self.transformJobName = transformJobName
        self.transformJobStatus = transformJobStatus
        self.transformOutput = transformOutput
        self.transformResources = transformResources
        self.transformStartTime = transformStartTime
    }
}
