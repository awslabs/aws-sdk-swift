// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineExecution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case pipelineArn = "PipelineArn"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case pipelineParameters = "PipelineParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineExecutionStatus = pipelineExecutionStatus {
            try encodeContainer.encode(pipelineExecutionStatus.rawValue, forKey: .pipelineExecutionStatus)
        }
        if let pipelineParameters = pipelineParameters {
            var pipelineParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameters)
            for parameterlist0 in pipelineParameters {
                try pipelineParametersContainer.encode(parameterlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let pipelineParametersContainer = try containerValues.decodeIfPresent([Parameter].self, forKey: .pipelineParameters)
        var pipelineParametersDecoded0:[Parameter]? = nil
        if let pipelineParametersContainer = pipelineParametersContainer {
            pipelineParametersDecoded0 = [Parameter]()
            for structure0 in pipelineParametersContainer {
                pipelineParametersDecoded0?.append(structure0)
            }
        }
        pipelineParameters = pipelineParametersDecoded0
    }
}
