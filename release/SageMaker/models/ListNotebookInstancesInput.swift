// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListNotebookInstancesInput: Equatable {
    /// <p>A filter that returns only notebook instances with associated with the specified git
    ///             repository.</p>
    public let additionalCodeRepositoryEquals: String?
    /// <p>A filter that returns only notebook instances that were created after the specified
    ///             time (timestamp).</p>
    public let creationTimeAfter: Date?
    /// <p>A filter that returns only notebook instances that were created before the
    ///             specified time (timestamp). </p>
    public let creationTimeBefore: Date?
    /// <p>A string in the name or URL of a Git repository associated with this notebook
    ///             instance. This filter returns only notebook instances associated with a git repository
    ///             with a name that contains the specified string.</p>
    public let defaultCodeRepositoryContains: String?
    /// <p>A filter that returns only notebook instances that were modified after the
    ///             specified time (timestamp).</p>
    public let lastModifiedTimeAfter: Date?
    /// <p>A filter that returns only notebook instances that were modified before the
    ///             specified time (timestamp).</p>
    public let lastModifiedTimeBefore: Date?
    /// <p>The maximum number of notebook instances to return.</p>
    public let maxResults: Int?
    /// <p>A string in the notebook instances' name. This filter returns only notebook
    ///             instances whose name contains the specified string.</p>
    public let nameContains: String?
    /// <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the
    ///             response includes a <code>NextToken</code>. You can use this token in your subsequent
    ///                 <code>ListNotebookInstances</code> request to fetch the next set of notebook
    ///             instances. </p>
    ///         <note>
    ///             <p>You might specify a filter or a sort order in your request. When response is
    ///                 truncated, you must use the same values for the filer and sort order in the next
    ///                 request. </p>
    ///         </note>
    public let nextToken: String?
    /// <p>A string in the name of a notebook instances lifecycle configuration associated with
    ///             this notebook instance. This filter returns only notebook instances associated with a
    ///             lifecycle configuration with a name that contains the specified string.</p>
    public let notebookInstanceLifecycleConfigNameContains: String?
    /// <p>The field to sort results by. The default is <code>Name</code>.</p>
    public let sortBy: NotebookInstanceSortKey?
    /// <p>The sort order for results. </p>
    public let sortOrder: NotebookInstanceSortOrder?
    /// <p>A filter that returns only notebook instances with the specified status.</p>
    public let statusEquals: NotebookInstanceStatus?

    public init (
        additionalCodeRepositoryEquals: String? = nil,
        creationTimeAfter: Date? = nil,
        creationTimeBefore: Date? = nil,
        defaultCodeRepositoryContains: String? = nil,
        lastModifiedTimeAfter: Date? = nil,
        lastModifiedTimeBefore: Date? = nil,
        maxResults: Int? = nil,
        nameContains: String? = nil,
        nextToken: String? = nil,
        notebookInstanceLifecycleConfigNameContains: String? = nil,
        sortBy: NotebookInstanceSortKey? = nil,
        sortOrder: NotebookInstanceSortOrder? = nil,
        statusEquals: NotebookInstanceStatus? = nil
    )
    {
        self.additionalCodeRepositoryEquals = additionalCodeRepositoryEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.defaultCodeRepositoryContains = defaultCodeRepositoryContains
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}
