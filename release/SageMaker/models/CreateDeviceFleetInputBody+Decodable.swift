// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeviceFleetInputBody: Equatable {
    public let deviceFleetName: String?
    public let roleArn: String?
    public let description: String?
    public let outputConfig: EdgeOutputConfig?
    public let tags: [Tag]?
}

extension CreateDeviceFleetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case deviceFleetName = "DeviceFleetName"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
