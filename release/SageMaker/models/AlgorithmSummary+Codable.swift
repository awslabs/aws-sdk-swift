// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlgorithmSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmArn = "AlgorithmArn"
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case algorithmStatus = "AlgorithmStatus"
        case creationTime = "CreationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmArn = algorithmArn {
            try encodeContainer.encode(algorithmArn, forKey: .algorithmArn)
        }
        if let algorithmDescription = algorithmDescription {
            try encodeContainer.encode(algorithmDescription, forKey: .algorithmDescription)
        }
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if let algorithmStatus = algorithmStatus {
            try encodeContainer.encode(algorithmStatus.rawValue, forKey: .algorithmStatus)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let algorithmStatusDecoded = try containerValues.decodeIfPresent(AlgorithmStatus.self, forKey: .algorithmStatus)
        algorithmStatus = algorithmStatusDecoded
    }
}
