// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CollectionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collectionName = "CollectionName"
        case collectionParameters = "CollectionParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionName = collectionName {
            try encodeContainer.encode(collectionName, forKey: .collectionName)
        }
        if let collectionParameters = collectionParameters {
            var collectionParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .collectionParameters)
            for (dictKey0, collectionparameters0) in collectionParameters {
                try collectionParametersContainer.encode(collectionparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .collectionName)
        collectionName = collectionNameDecoded
        let collectionParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .collectionParameters)
        var collectionParametersDecoded0: [String:String]? = nil
        if let collectionParametersContainer = collectionParametersContainer {
            collectionParametersDecoded0 = [String:String]()
            for (key0, configvalue0) in collectionParametersContainer {
                collectionParametersDecoded0?[key0] = configvalue0
            }
        }
        collectionParameters = collectionParametersDecoded0
    }
}
