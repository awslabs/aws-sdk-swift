// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case lastExecutionTime = "LastExecutionTime"
        case lastModifiedTime = "LastModifiedTime"
        case pipelineArn = "PipelineArn"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastExecutionTime = lastExecutionTime {
            try encodeContainer.encode(lastExecutionTime.timeIntervalSince1970, forKey: .lastExecutionTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastExecutionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastExecutionTime)
        lastExecutionTime = lastExecutionTimeDecoded
    }
}
