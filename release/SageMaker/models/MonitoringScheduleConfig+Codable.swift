// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MonitoringScheduleConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case monitoringJobDefinition = "MonitoringJobDefinition"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringType = "MonitoringType"
        case scheduleConfig = "ScheduleConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monitoringJobDefinition = monitoringJobDefinition {
            try encodeContainer.encode(monitoringJobDefinition, forKey: .monitoringJobDefinition)
        }
        if let monitoringJobDefinitionName = monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringType = monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let scheduleConfig = scheduleConfig {
            try encodeContainer.encode(scheduleConfig, forKey: .scheduleConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleConfigDecoded = try containerValues.decodeIfPresent(ScheduleConfig.self, forKey: .scheduleConfig)
        scheduleConfig = scheduleConfigDecoded
        let monitoringJobDefinitionDecoded = try containerValues.decodeIfPresent(MonitoringJobDefinition.self, forKey: .monitoringJobDefinition)
        monitoringJobDefinition = monitoringJobDefinitionDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}
