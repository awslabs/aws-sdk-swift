// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SourceAlgorithm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmName = "AlgorithmName"
        case modelDataUrl = "ModelDataUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let algorithmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
    }
}
