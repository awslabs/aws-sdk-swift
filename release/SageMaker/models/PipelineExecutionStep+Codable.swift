// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineExecutionStep: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheHitResult = "CacheHitResult"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case metadata = "Metadata"
        case startTime = "StartTime"
        case stepName = "StepName"
        case stepStatus = "StepStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheHitResult = cacheHitResult {
            try encodeContainer.encode(cacheHitResult, forKey: .cacheHitResult)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let stepName = stepName {
            try encodeContainer.encode(stepName, forKey: .stepName)
        }
        if let stepStatus = stepStatus {
            try encodeContainer.encode(stepStatus.rawValue, forKey: .stepStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stepName)
        stepName = stepNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let stepStatusDecoded = try containerValues.decodeIfPresent(StepStatus.self, forKey: .stepStatus)
        stepStatus = stepStatusDecoded
        let cacheHitResultDecoded = try containerValues.decodeIfPresent(CacheHitResult.self, forKey: .cacheHitResult)
        cacheHitResult = cacheHitResultDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(PipelineExecutionStepMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
    }
}
