// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAppInputBody: Equatable {
    public let domainId: String?
    public let userProfileName: String?
    public let appType: AppType?
    public let appName: String?
    public let tags: [Tag]?
    public let resourceSpec: ResourceSpec?
}

extension CreateAppInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case resourceSpec = "ResourceSpec"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appName)
        appName = appNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let resourceSpecDecoded = try containerValues.decodeIfPresent(ResourceSpec.self, forKey: .resourceSpec)
        resourceSpec = resourceSpecDecoded
    }
}
