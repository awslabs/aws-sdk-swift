// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCodeRepositoryInputBody: Equatable {
    public let codeRepositoryName: String?
    public let gitConfig: GitConfig?
    public let tags: [Tag]?
}

extension CreateCodeRepositoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case codeRepositoryName = "CodeRepositoryName"
        case gitConfig = "GitConfig"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeRepositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .codeRepositoryName)
        codeRepositoryName = codeRepositoryNameDecoded
        let gitConfigDecoded = try containerValues.decodeIfPresent(GitConfig.self, forKey: .gitConfig)
        gitConfig = gitConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
