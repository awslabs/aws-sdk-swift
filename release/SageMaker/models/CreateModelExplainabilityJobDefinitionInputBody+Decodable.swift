// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelExplainabilityJobDefinitionInputBody: Equatable {
    public let jobDefinitionName: String?
    public let modelExplainabilityBaselineConfig: ModelExplainabilityBaselineConfig?
    public let modelExplainabilityAppSpecification: ModelExplainabilityAppSpecification?
    public let modelExplainabilityJobInput: ModelExplainabilityJobInput?
    public let modelExplainabilityJobOutputConfig: MonitoringOutputConfig?
    public let jobResources: MonitoringResources?
    public let networkConfig: MonitoringNetworkConfig?
    public let roleArn: String?
    public let stoppingCondition: MonitoringStoppingCondition?
    public let tags: [Tag]?
}

extension CreateModelExplainabilityJobDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelExplainabilityBaselineConfigDecoded = try containerValues.decodeIfPresent(ModelExplainabilityBaselineConfig.self, forKey: .modelExplainabilityBaselineConfig)
        modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfigDecoded
        let modelExplainabilityAppSpecificationDecoded = try containerValues.decodeIfPresent(ModelExplainabilityAppSpecification.self, forKey: .modelExplainabilityAppSpecification)
        modelExplainabilityAppSpecification = modelExplainabilityAppSpecificationDecoded
        let modelExplainabilityJobInputDecoded = try containerValues.decodeIfPresent(ModelExplainabilityJobInput.self, forKey: .modelExplainabilityJobInput)
        modelExplainabilityJobInput = modelExplainabilityJobInputDecoded
        let modelExplainabilityJobOutputConfigDecoded = try containerValues.decodeIfPresent(MonitoringOutputConfig.self, forKey: .modelExplainabilityJobOutputConfig)
        modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
