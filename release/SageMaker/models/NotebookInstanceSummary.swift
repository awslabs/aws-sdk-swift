// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides summary information for an Amazon SageMaker notebook instance.</p>
public struct NotebookInstanceSummary: Equatable {
    /// <p>An array of up to three Git repositories associated with the notebook instance. These
    ///             can be either the names of Git repositories stored as resources in your account, or the
    ///             URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. These repositories are cloned at the same level as the default
    ///             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    ///                 Repositories with Amazon SageMaker Notebook Instances</a>.</p>
    public let additionalCodeRepositories: [String]?
    /// <p>A timestamp that shows when the notebook instance was created.</p>
    public let creationTime: Date?
    /// <p>The Git repository associated with the notebook instance as its default code
    ///             repository. This can be either the name of a Git repository stored as a resource in your
    ///             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. When you open a notebook instance, it opens in the directory that
    ///             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with Amazon SageMaker
    ///                 Notebook Instances</a>.</p>
    public let defaultCodeRepository: String?
    /// <p>The type of ML compute instance that the notebook instance is running on.</p>
    public let instanceType: InstanceType?
    /// <p>A timestamp that shows when the notebook instance was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    public let notebookInstanceArn: String?
    /// <p>The name of a notebook instance lifecycle configuration associated with this notebook
    ///             instance.</p>
    ///         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
    ///                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    public let notebookInstanceLifecycleConfigName: String?
    /// <p>The name of the notebook instance that you want a summary for.</p>
    public let notebookInstanceName: String?
    /// <p>The status of the notebook instance.</p>
    public let notebookInstanceStatus: NotebookInstanceStatus?
    /// <p>The
    ///             URL that you use to connect to the Jupyter instance running in your notebook instance.
    ///             </p>
    public let url: String?

    public init (
        additionalCodeRepositories: [String]? = nil,
        creationTime: Date? = nil,
        defaultCodeRepository: String? = nil,
        instanceType: InstanceType? = nil,
        lastModifiedTime: Date? = nil,
        notebookInstanceArn: String? = nil,
        notebookInstanceLifecycleConfigName: String? = nil,
        notebookInstanceName: String? = nil,
        notebookInstanceStatus: NotebookInstanceStatus? = nil,
        url: String? = nil
    )
    {
        self.additionalCodeRepositories = additionalCodeRepositories
        self.creationTime = creationTime
        self.defaultCodeRepository = defaultCodeRepository
        self.instanceType = instanceType
        self.lastModifiedTime = lastModifiedTime
        self.notebookInstanceArn = notebookInstanceArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.notebookInstanceStatus = notebookInstanceStatus
        self.url = url
    }
}
