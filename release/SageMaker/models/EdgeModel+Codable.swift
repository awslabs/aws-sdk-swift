// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EdgeModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case latestInference = "LatestInference"
        case latestSampleTime = "LatestSampleTime"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestInference = latestInference {
            try encodeContainer.encode(latestInference.timeIntervalSince1970, forKey: .latestInference)
        }
        if let latestSampleTime = latestSampleTime {
            try encodeContainer.encode(latestSampleTime.timeIntervalSince1970, forKey: .latestSampleTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let latestSampleTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestSampleTime)
        latestSampleTime = latestSampleTimeDecoded
        let latestInferenceDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestInference)
        latestInference = latestInferenceDecoded
    }
}
