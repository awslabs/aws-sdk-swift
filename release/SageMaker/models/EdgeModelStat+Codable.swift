// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EdgeModelStat: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeDeviceCount = "ActiveDeviceCount"
        case connectedDeviceCount = "ConnectedDeviceCount"
        case modelName = "ModelName"
        case modelVersion = "ModelVersion"
        case offlineDeviceCount = "OfflineDeviceCount"
        case samplingDeviceCount = "SamplingDeviceCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if activeDeviceCount != 0 {
            try encodeContainer.encode(activeDeviceCount, forKey: .activeDeviceCount)
        }
        if connectedDeviceCount != 0 {
            try encodeContainer.encode(connectedDeviceCount, forKey: .connectedDeviceCount)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelVersion = modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if offlineDeviceCount != 0 {
            try encodeContainer.encode(offlineDeviceCount, forKey: .offlineDeviceCount)
        }
        if samplingDeviceCount != 0 {
            try encodeContainer.encode(samplingDeviceCount, forKey: .samplingDeviceCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let offlineDeviceCountDecoded = try containerValues.decode(Int.self, forKey: .offlineDeviceCount)
        offlineDeviceCount = offlineDeviceCountDecoded
        let connectedDeviceCountDecoded = try containerValues.decode(Int.self, forKey: .connectedDeviceCount)
        connectedDeviceCount = connectedDeviceCountDecoded
        let activeDeviceCountDecoded = try containerValues.decode(Int.self, forKey: .activeDeviceCount)
        activeDeviceCount = activeDeviceCountDecoded
        let samplingDeviceCountDecoded = try containerValues.decode(Int.self, forKey: .samplingDeviceCount)
        samplingDeviceCount = samplingDeviceCountDecoded
    }
}
