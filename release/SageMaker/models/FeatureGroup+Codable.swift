// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FeatureGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case failureReason = "FailureReason"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupArn = "FeatureGroupArn"
        case featureGroupName = "FeatureGroupName"
        case featureGroupStatus = "FeatureGroupStatus"
        case offlineStoreConfig = "OfflineStoreConfig"
        case offlineStoreStatus = "OfflineStoreStatus"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventTimeFeatureName = eventTimeFeatureName {
            try encodeContainer.encode(eventTimeFeatureName, forKey: .eventTimeFeatureName)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let featureDefinitions = featureDefinitions {
            var featureDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureDefinitions)
            for featuredefinitions0 in featureDefinitions {
                try featureDefinitionsContainer.encode(featuredefinitions0)
            }
        }
        if let featureGroupArn = featureGroupArn {
            try encodeContainer.encode(featureGroupArn, forKey: .featureGroupArn)
        }
        if let featureGroupName = featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let featureGroupStatus = featureGroupStatus {
            try encodeContainer.encode(featureGroupStatus.rawValue, forKey: .featureGroupStatus)
        }
        if let offlineStoreConfig = offlineStoreConfig {
            try encodeContainer.encode(offlineStoreConfig, forKey: .offlineStoreConfig)
        }
        if let offlineStoreStatus = offlineStoreStatus {
            try encodeContainer.encode(offlineStoreStatus, forKey: .offlineStoreStatus)
        }
        if let onlineStoreConfig = onlineStoreConfig {
            try encodeContainer.encode(onlineStoreConfig, forKey: .onlineStoreConfig)
        }
        if let recordIdentifierFeatureName = recordIdentifierFeatureName {
            try encodeContainer.encode(recordIdentifierFeatureName, forKey: .recordIdentifierFeatureName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .featureGroupArn)
        featureGroupArn = featureGroupArnDecoded
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let recordIdentifierFeatureNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordIdentifierFeatureName)
        recordIdentifierFeatureName = recordIdentifierFeatureNameDecoded
        let eventTimeFeatureNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventTimeFeatureName)
        eventTimeFeatureName = eventTimeFeatureNameDecoded
        let featureDefinitionsContainer = try containerValues.decodeIfPresent([FeatureDefinition].self, forKey: .featureDefinitions)
        var featureDefinitionsDecoded0:[FeatureDefinition]? = nil
        if let featureDefinitionsContainer = featureDefinitionsContainer {
            featureDefinitionsDecoded0 = [FeatureDefinition]()
            for structure0 in featureDefinitionsContainer {
                featureDefinitionsDecoded0?.append(structure0)
            }
        }
        featureDefinitions = featureDefinitionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let onlineStoreConfigDecoded = try containerValues.decodeIfPresent(OnlineStoreConfig.self, forKey: .onlineStoreConfig)
        onlineStoreConfig = onlineStoreConfigDecoded
        let offlineStoreConfigDecoded = try containerValues.decodeIfPresent(OfflineStoreConfig.self, forKey: .offlineStoreConfig)
        offlineStoreConfig = offlineStoreConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let featureGroupStatusDecoded = try containerValues.decodeIfPresent(FeatureGroupStatus.self, forKey: .featureGroupStatus)
        featureGroupStatus = featureGroupStatusDecoded
        let offlineStoreStatusDecoded = try containerValues.decodeIfPresent(OfflineStoreStatus.self, forKey: .offlineStoreStatus)
        offlineStoreStatus = offlineStoreStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
