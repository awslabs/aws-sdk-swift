// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3DataSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeNames = "AttributeNames"
        case s3DataDistributionType = "S3DataDistributionType"
        case s3DataType = "S3DataType"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeNames = attributeNames {
            var attributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeNames)
            for attributenames0 in attributeNames {
                try attributeNamesContainer.encode(attributenames0)
            }
        }
        if let s3DataDistributionType = s3DataDistributionType {
            try encodeContainer.encode(s3DataDistributionType.rawValue, forKey: .s3DataDistributionType)
        }
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(S3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let s3DataDistributionTypeDecoded = try containerValues.decodeIfPresent(S3DataDistribution.self, forKey: .s3DataDistributionType)
        s3DataDistributionType = s3DataDistributionTypeDecoded
        let attributeNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .attributeNames)
        var attributeNamesDecoded0:[String]? = nil
        if let attributeNamesContainer = attributeNamesContainer {
            attributeNamesDecoded0 = [String]()
            for string0 in attributeNamesContainer {
                attributeNamesDecoded0?.append(string0)
            }
        }
        attributeNames = attributeNamesDecoded0
    }
}
