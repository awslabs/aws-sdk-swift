// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RenderUiTemplateOutputBody: Equatable {
    public let renderedContent: String?
    public let errors: [RenderingError]?
}

extension RenderUiTemplateOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errors = "Errors"
        case renderedContent = "RenderedContent"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renderedContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .renderedContent)
        renderedContent = renderedContentDecoded
        let errorsContainer = try containerValues.decodeIfPresent([RenderingError].self, forKey: .errors)
        var errorsDecoded0:[RenderingError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [RenderingError]()
            for structure0 in errorsContainer {
                errorsDecoded0?.append(structure0)
            }
        }
        errors = errorsDecoded0
    }
}
