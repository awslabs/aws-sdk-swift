// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A list of nested <a>Filter</a> objects. A resource must satisfy the conditions
///       of all filters to be included in the results returned from the <a>Search</a> API.</p>
///          <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a
///       specific channel name and <code>S3Uri</code> prefix, define the following filters:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code>
///                </p>
///             </li>
///             <li>
///                <p>
///                   <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains",
///             "Value":"mybucket/catdata"}'</code>
///                </p>
///             </li>
///          </ul>
public struct NestedFilters: Equatable {
    /// <p>A list of filters. Each filter acts on a property. Filters must contain at least one
    ///       <code>Filters</code> value. For example, a <code>NestedFilters</code> call might
    ///       include a filter on the <code>PropertyName</code> parameter of the
    ///       <code>InputDataConfig</code> property:
    ///       <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>.</p>
    public let filters: [Filter]?
    /// <p>The name of the property to use in the nested filters. The value must match a listed property name,
    ///       such as <code>InputDataConfig</code>.</p>
    public let nestedPropertyName: String?

    public init (
        filters: [Filter]? = nil,
        nestedPropertyName: String? = nil
    )
    {
        self.filters = filters
        self.nestedPropertyName = nestedPropertyName
    }
}
