// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains information about a training job.</p>
public struct TrainingJob: Equatable {
    /// <p>Information about the algorithm used for training, and algorithm metadata.</p>
    public let algorithmSpecification: AlgorithmSpecification?
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    public let autoMLJobArn: String?
    /// <p>The billable time in seconds.</p>
    public let billableTimeInSeconds: Int?
    /// <p>Contains information about the output location for managed spot training checkpoint
    ///             data. </p>
    public let checkpointConfig: CheckpointConfig?
    /// <p>A timestamp that indicates when the training job was created.</p>
    public let creationTime: Date?
    /// <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
    ///             storage paths. To learn more about
    ///             how to configure the <code>DebugHookConfig</code> parameter,
    ///             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
    public let debugHookConfig: DebugHookConfig?
    /// <p>Information about the debug rule configuration.</p>
    public let debugRuleConfigurations: [DebugRuleConfiguration]?
    /// <p>Information about the evaluation status of the rules for the training job.</p>
    public let debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]?
    /// <p>To encrypt all communications between ML compute instances in distributed training,
    ///             choose <code>True</code>. Encryption provides greater security for distributed training,
    ///             but training might take longer. How long it takes depends on the amount of communication
    ///             between compute instances, especially if you use a deep learning algorithm in
    ///             distributed training.</p>
    public let enableInterContainerTrafficEncryption: Bool
    /// <p>When true, enables managed spot training using Amazon EC2 Spot instances to run
    ///             training jobs instead of on-demand instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>.</p>
    public let enableManagedSpotTraining: Bool
    /// <p>If the <code>TrainingJob</code> was created with network isolation, the value is set
    ///             to <code>true</code>. If network isolation is enabled, nodes can't communicate beyond
    ///             the VPC they run in.</p>
    public let enableNetworkIsolation: Bool
    /// <p>The environment variables to set in the Docker container.</p>
    public let environment: [String:String]?
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    ///       you call the following APIs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>CreateProcessingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTrainingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTransformJob</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let experimentConfig: ExperimentConfig?
    /// <p>If the training job failed, the reason it failed.</p>
    public let failureReason: String?
    /// <p>A list of final metric values that are set when the training job completes. Used only
    ///             if the training job was configured to use metrics.</p>
    public let finalMetricDataList: [MetricData]?
    /// <p>Algorithm-specific parameters.</p>
    public let hyperParameters: [String:String]?
    /// <p>An array of <code>Channel</code> objects that describes each data input
    ///             channel.</p>
    public let inputDataConfig: [Channel]?
    /// <p>The Amazon Resource Name (ARN) of the labeling job.</p>
    public let labelingJobArn: String?
    /// <p>A timestamp that indicates when the status of the training job was last
    ///             modified.</p>
    public let lastModifiedTime: Date?
    /// <p>Information about the Amazon S3 location that is configured for storing model
    ///             artifacts.</p>
    public let modelArtifacts: ModelArtifacts?
    /// <p>The S3 path where model artifacts that you configured when creating the job are
    ///             stored. Amazon SageMaker creates subfolders for model artifacts.</p>
    public let outputDataConfig: OutputDataConfig?
    /// <p>Resources, including ML compute instances and ML storage volumes, that are configured
    ///             for model training.</p>
    public let resourceConfig: ResourceConfig?
    /// <p>The number of times to retry the job when the job fails due to an
    ///             <code>InternalServerError</code>.</p>
    public let retryStrategy: RetryStrategy?
    /// <p>The AWS Identity and Access Management (IAM) role configured for the training job.</p>
    public let roleArn: String?
    /// <p> Provides detailed information about the state of the training job. For detailed
    ///             information about the secondary status of the training job, see
    ///                 <code>StatusMessage</code> under <a>SecondaryStatusTransition</a>.</p>
    ///         <p>Amazon SageMaker provides primary statuses and secondary statuses that apply to each of
    ///             them:</p>
    ///         <dl>
    ///             <dt>InProgress</dt>
    ///             <dd>
    ///                     <ul>
    ///                   <li>
    ///                             <p>
    ///                         <code>Starting</code>
    ///                                 - Starting the training job.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>
    ///                         <code>Downloading</code> - An optional stage for algorithms that
    ///                                 support <code>File</code> training input mode. It indicates that
    ///                                 data is being downloaded to the ML storage volumes.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>
    ///                         <code>Training</code> - Training is in progress.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>
    ///                         <code>Uploading</code> - Training is complete and the model
    ///                                 artifacts are being uploaded to the S3 location.</p>
    ///                         </li>
    ///                </ul>
    ///                 </dd>
    ///             <dt>Completed</dt>
    ///             <dd>
    ///                     <ul>
    ///                   <li>
    ///                             <p>
    ///                         <code>Completed</code> - The training job has completed.</p>
    ///                         </li>
    ///                </ul>
    ///                 </dd>
    ///             <dt>Failed</dt>
    ///             <dd>
    ///                     <ul>
    ///                   <li>
    ///                             <p>
    ///                         <code>Failed</code> - The training job has failed. The reason for
    ///                                 the failure is returned in the <code>FailureReason</code> field of
    ///                                     <code>DescribeTrainingJobResponse</code>.</p>
    ///                         </li>
    ///                </ul>
    ///                 </dd>
    ///             <dt>Stopped</dt>
    ///             <dd>
    ///                     <ul>
    ///                   <li>
    ///                             <p>
    ///                         <code>MaxRuntimeExceeded</code> - The job stopped because it
    ///                                 exceeded the maximum allowed runtime.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>
    ///                         <code>Stopped</code> - The training job has stopped.</p>
    ///                         </li>
    ///                </ul>
    ///                 </dd>
    ///             <dt>Stopping</dt>
    ///             <dd>
    ///                     <ul>
    ///                   <li>
    ///                             <p>
    ///                         <code>Stopping</code> - Stopping the training job.</p>
    ///                         </li>
    ///                </ul>
    ///                 </dd>
    ///          </dl>
    ///         <important>
    ///             <p>Valid values for <code>SecondaryStatus</code> are subject to change. </p>
    ///         </important>
    ///         <p>We no longer support the following secondary statuses:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>LaunchingMLInstances</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>PreparingTrainingStack</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>DownloadingTrainingImage</code>
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let secondaryStatus: SecondaryStatus?
    /// <p>A history of all of the secondary statuses that the training job has transitioned
    ///             through.</p>
    public let secondaryStatusTransitions: [SecondaryStatusTransition]?
    /// <p>Specifies a limit to how long a model training job can run.
    ///             It also specifies how long a managed Spot training job has to complete.
    ///             When the job reaches the time limit, Amazon SageMaker ends
    ///             the training job. Use this API to cap model training costs.</p>
    ///         <p>To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
    ///             job termination for 120 seconds. Algorithms can use this 120-second window to save the
    ///             model artifacts, so the results of training are not lost. </p>
    public let stoppingCondition: StoppingCondition?
    /// <p>An array of key-value pairs. You can use tags to categorize your AWS resources in
    ///             different ways, for example, by purpose, owner, or environment. For more information,
    ///             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS
    ///                 Resources</a>.</p>
    public let tags: [Tag]?
    /// <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
    public let tensorBoardOutputConfig: TensorBoardOutputConfig?
    /// <p>Indicates the time when the training job ends on training instances. You are billed
    ///             for the time interval between the value of <code>TrainingStartTime</code> and this time.
    ///             For successful jobs and stopped jobs, this is the time after model artifacts are
    ///             uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.</p>
    public let trainingEndTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    public let trainingJobArn: String?
    /// <p>The name of the training job.</p>
    public let trainingJobName: String?
    /// <p>The status of the
    ///             training
    ///             job.</p>
    ///         <p>Training job statuses are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>InProgress</code> - The training is in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Completed</code> - The training job has completed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Failed</code> - The training job has failed. To see the reason for the
    ///                     failure, see the <code>FailureReason</code> field in the response to a
    ///                         <code>DescribeTrainingJobResponse</code> call.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Stopping</code> - The training job is stopping.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Stopped</code> - The training job has stopped.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For
    ///             more detailed information, see <code>SecondaryStatus</code>. </p>
    public let trainingJobStatus: TrainingJobStatus?
    /// <p>Indicates the time when the training job starts on training instances. You are billed
    ///             for the time interval between this time and the value of <code>TrainingEndTime</code>.
    ///             The start time in CloudWatch Logs might be later than this time. The difference is due to the time
    ///             it takes to download the training data and to the size of the training container.</p>
    public let trainingStartTime: Date?
    /// <p>The training time in seconds.</p>
    public let trainingTimeInSeconds: Int?
    /// <p>The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the
    ///             training job was launched by a hyperparameter tuning job.</p>
    public let tuningJobArn: String?
    /// <p>A <a>VpcConfig</a> object that specifies the VPC that this training job has
    ///             access to. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon
    ///                 Virtual Private Cloud</a>.</p>
    public let vpcConfig: VpcConfig?

    public init (
        algorithmSpecification: AlgorithmSpecification? = nil,
        autoMLJobArn: String? = nil,
        billableTimeInSeconds: Int? = nil,
        checkpointConfig: CheckpointConfig? = nil,
        creationTime: Date? = nil,
        debugHookConfig: DebugHookConfig? = nil,
        debugRuleConfigurations: [DebugRuleConfiguration]? = nil,
        debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]? = nil,
        enableInterContainerTrafficEncryption: Bool = false,
        enableManagedSpotTraining: Bool = false,
        enableNetworkIsolation: Bool = false,
        environment: [String:String]? = nil,
        experimentConfig: ExperimentConfig? = nil,
        failureReason: String? = nil,
        finalMetricDataList: [MetricData]? = nil,
        hyperParameters: [String:String]? = nil,
        inputDataConfig: [Channel]? = nil,
        labelingJobArn: String? = nil,
        lastModifiedTime: Date? = nil,
        modelArtifacts: ModelArtifacts? = nil,
        outputDataConfig: OutputDataConfig? = nil,
        resourceConfig: ResourceConfig? = nil,
        retryStrategy: RetryStrategy? = nil,
        roleArn: String? = nil,
        secondaryStatus: SecondaryStatus? = nil,
        secondaryStatusTransitions: [SecondaryStatusTransition]? = nil,
        stoppingCondition: StoppingCondition? = nil,
        tags: [Tag]? = nil,
        tensorBoardOutputConfig: TensorBoardOutputConfig? = nil,
        trainingEndTime: Date? = nil,
        trainingJobArn: String? = nil,
        trainingJobName: String? = nil,
        trainingJobStatus: TrainingJobStatus? = nil,
        trainingStartTime: Date? = nil,
        trainingTimeInSeconds: Int? = nil,
        tuningJobArn: String? = nil,
        vpcConfig: VpcConfig? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.autoMLJobArn = autoMLJobArn
        self.billableTimeInSeconds = billableTimeInSeconds
        self.checkpointConfig = checkpointConfig
        self.creationTime = creationTime
        self.debugHookConfig = debugHookConfig
        self.debugRuleConfigurations = debugRuleConfigurations
        self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.finalMetricDataList = finalMetricDataList
        self.hyperParameters = hyperParameters
        self.inputDataConfig = inputDataConfig
        self.labelingJobArn = labelingJobArn
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifacts = modelArtifacts
        self.outputDataConfig = outputDataConfig
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.secondaryStatus = secondaryStatus
        self.secondaryStatusTransitions = secondaryStatusTransitions
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.tensorBoardOutputConfig = tensorBoardOutputConfig
        self.trainingEndTime = trainingEndTime
        self.trainingJobArn = trainingJobArn
        self.trainingJobName = trainingJobName
        self.trainingJobStatus = trainingJobStatus
        self.trainingStartTime = trainingStartTime
        self.trainingTimeInSeconds = trainingTimeInSeconds
        self.tuningJobArn = tuningJobArn
        self.vpcConfig = vpcConfig
    }
}
