// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNotebookInstanceLifecycleConfigOutputBody: Equatable {
    public let notebookInstanceLifecycleConfigArn: String?
    public let notebookInstanceLifecycleConfigName: String?
    public let onCreate: [NotebookInstanceLifecycleHook]?
    public let onStart: [NotebookInstanceLifecycleHook]?
    public let lastModifiedTime: Date?
    public let creationTime: Date?
}

extension DescribeNotebookInstanceLifecycleConfigOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigArn)
        notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArnDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let onCreateContainer = try containerValues.decodeIfPresent([NotebookInstanceLifecycleHook].self, forKey: .onCreate)
        var onCreateDecoded0:[NotebookInstanceLifecycleHook]? = nil
        if let onCreateContainer = onCreateContainer {
            onCreateDecoded0 = [NotebookInstanceLifecycleHook]()
            for structure0 in onCreateContainer {
                onCreateDecoded0?.append(structure0)
            }
        }
        onCreate = onCreateDecoded0
        let onStartContainer = try containerValues.decodeIfPresent([NotebookInstanceLifecycleHook].self, forKey: .onStart)
        var onStartDecoded0:[NotebookInstanceLifecycleHook]? = nil
        if let onStartContainer = onStartContainer {
            onStartDecoded0 = [NotebookInstanceLifecycleHook]()
            for structure0 in onStartContainer {
                onStartDecoded0?.append(structure0)
            }
        }
        onStart = onStartDecoded0
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
