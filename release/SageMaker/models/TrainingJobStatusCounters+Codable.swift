// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrainingJobStatusCounters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completed = "Completed"
        case inProgress = "InProgress"
        case nonRetryableError = "NonRetryableError"
        case retryableError = "RetryableError"
        case stopped = "Stopped"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if completed != 0 {
            try encodeContainer.encode(completed, forKey: .completed)
        }
        if inProgress != 0 {
            try encodeContainer.encode(inProgress, forKey: .inProgress)
        }
        if nonRetryableError != 0 {
            try encodeContainer.encode(nonRetryableError, forKey: .nonRetryableError)
        }
        if retryableError != 0 {
            try encodeContainer.encode(retryableError, forKey: .retryableError)
        }
        if stopped != 0 {
            try encodeContainer.encode(stopped, forKey: .stopped)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let completedDecoded = try containerValues.decode(Int.self, forKey: .completed)
        completed = completedDecoded
        let inProgressDecoded = try containerValues.decode(Int.self, forKey: .inProgress)
        inProgress = inProgressDecoded
        let retryableErrorDecoded = try containerValues.decode(Int.self, forKey: .retryableError)
        retryableError = retryableErrorDecoded
        let nonRetryableErrorDecoded = try containerValues.decode(Int.self, forKey: .nonRetryableError)
        nonRetryableError = nonRetryableErrorDecoded
        let stoppedDecoded = try containerValues.decode(Int.self, forKey: .stopped)
        stopped = stoppedDecoded
    }
}
