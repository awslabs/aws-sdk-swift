// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines
///             the training jobs launched by a hyperparameter tuning job.</p>
public struct HyperParameterTrainingJobDefinition: Equatable {
    /// <p>The <a>HyperParameterAlgorithmSpecification</a> object that
    ///             specifies
    ///             the resource algorithm to use for the training jobs that the tuning
    ///             job launches.</p>
    public let algorithmSpecification: HyperParameterAlgorithmSpecification?
    /// <p>Contains information about the output location for managed spot training checkpoint
    ///             data. </p>
    public let checkpointConfig: CheckpointConfig?
    /// <p>The job definition name.</p>
    public let definitionName: String?
    /// <p>To encrypt all communications between ML compute instances in distributed training,
    ///             choose <code>True</code>. Encryption provides greater security for distributed training,
    ///             but training might take longer. How long it takes depends on the amount of communication
    ///             between compute instances, especially if you use a deep learning algorithm in
    ///             distributed training.</p>
    public let enableInterContainerTrafficEncryption: Bool
    /// <p>A Boolean indicating whether managed spot training is enabled (<code>True</code>) or
    ///             not (<code>False</code>).</p>
    public let enableManagedSpotTraining: Bool
    /// <p>Isolates the training container. No inbound or outbound network calls can be made,
    ///             except for calls between peers within a training cluster for distributed training. If
    ///             network isolation is used for training jobs that are configured to use a VPC, Amazon SageMaker
    ///             downloads and uploads customer data and model artifacts through the specified VPC, but
    ///             the training container does not have network access.</p>
    public let enableNetworkIsolation: Bool
    /// <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a
    ///             hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs
    ///             with hyperparameter values within these ranges to find the combination of values that
    ///             result in the training job with the best performance as measured by the objective metric
    ///             of the hyperparameter tuning job.</p>
    ///         <note>
    ///             <p>You can specify a maximum of 20 hyperparameters that a hyperparameter tuning job
    ///                 can search over. Every possible value of a categorical parameter range counts
    ///                 against this limit.</p>
    ///         </note>
    public let hyperParameterRanges: ParameterRanges?
    /// <p>An array of <a>Channel</a> objects that specify
    ///             the
    ///             input for the training jobs that the tuning job launches.</p>
    public let inputDataConfig: [Channel]?
    /// <p>Specifies the path to the Amazon S3 bucket where you
    ///             store
    ///             model artifacts from the training jobs that the tuning job
    ///             launches.</p>
    public let outputDataConfig: OutputDataConfig?
    /// <p>The resources,
    ///             including
    ///             the compute instances and storage volumes, to use for the training
    ///             jobs that the tuning job launches.</p>
    ///         <p>Storage
    ///             volumes store model artifacts and
    ///             incremental
    ///             states. Training algorithms might also use storage volumes for
    ///             scratch
    ///             space. If you want Amazon SageMaker to use the storage volume
    ///             to store the training data, choose <code>File</code> as the
    ///                 <code>TrainingInputMode</code> in the algorithm specification. For distributed
    ///             training algorithms, specify an instance count greater than 1.</p>
    public let resourceConfig: ResourceConfig?
    /// <p>The number of times to retry the job when the job fails due to an
    ///             <code>InternalServerError</code>.</p>
    public let retryStrategy: RetryStrategy?
    /// <p>The Amazon Resource Name (ARN) of the
    ///             IAM
    ///             role associated with the training jobs that the tuning job
    ///             launches.</p>
    public let roleArn: String?
    /// <p>Specifies the values of hyperparameters
    ///             that
    ///             do not change for the tuning job.</p>
    public let staticHyperParameters: [String:String]?
    /// <p>Specifies a limit to how long a model hyperparameter training job can run. It also
    ///             specifies how long a managed spot training job has to complete.
    ///             When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model
    ///             training costs.</p>
    public let stoppingCondition: StoppingCondition?
    /// <p>Defines the objective metric for a hyperparameter tuning job.
    ///             Hyperparameter
    ///             tuning uses the value of this metric to evaluate the training jobs it launches, and
    ///             returns the training job that results in either the highest or lowest value for this
    ///             metric, depending on the value you specify for the <code>Type</code>
    ///             parameter.</p>
    public let tuningObjective: HyperParameterTuningJobObjective?
    /// <p>The <a>VpcConfig</a> object that
    ///             specifies
    ///             the VPC that you want the training jobs that this hyperparameter
    ///             tuning job launches to connect to. Control access to and from your
    ///             training
    ///             container by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs
    ///                 by Using an Amazon Virtual Private Cloud</a>.</p>
    public let vpcConfig: VpcConfig?

    public init (
        algorithmSpecification: HyperParameterAlgorithmSpecification? = nil,
        checkpointConfig: CheckpointConfig? = nil,
        definitionName: String? = nil,
        enableInterContainerTrafficEncryption: Bool = false,
        enableManagedSpotTraining: Bool = false,
        enableNetworkIsolation: Bool = false,
        hyperParameterRanges: ParameterRanges? = nil,
        inputDataConfig: [Channel]? = nil,
        outputDataConfig: OutputDataConfig? = nil,
        resourceConfig: ResourceConfig? = nil,
        retryStrategy: RetryStrategy? = nil,
        roleArn: String? = nil,
        staticHyperParameters: [String:String]? = nil,
        stoppingCondition: StoppingCondition? = nil,
        tuningObjective: HyperParameterTuningJobObjective? = nil,
        vpcConfig: VpcConfig? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.checkpointConfig = checkpointConfig
        self.definitionName = definitionName
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.hyperParameterRanges = hyperParameterRanges
        self.inputDataConfig = inputDataConfig
        self.outputDataConfig = outputDataConfig
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.staticHyperParameters = staticHyperParameters
        self.stoppingCondition = stoppingCondition
        self.tuningObjective = tuningObjective
        self.vpcConfig = vpcConfig
    }
}
