// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExperimentConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case experimentName = "ExperimentName"
        case trialComponentDisplayName = "TrialComponentDisplayName"
        case trialName = "TrialName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let experimentName = experimentName {
            try encodeContainer.encode(experimentName, forKey: .experimentName)
        }
        if let trialComponentDisplayName = trialComponentDisplayName {
            try encodeContainer.encode(trialComponentDisplayName, forKey: .trialComponentDisplayName)
        }
        if let trialName = trialName {
            try encodeContainer.encode(trialName, forKey: .trialName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let trialComponentDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trialComponentDisplayName)
        trialComponentDisplayName = trialComponentDisplayNameDecoded
    }
}
