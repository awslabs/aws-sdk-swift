// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines how the algorithm is used for a training job.</p>
public struct TrainingSpecification: Equatable {
    /// <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics
    ///             generated by the algorithm.</p>
    public let metricDefinitions: [MetricDefinition]?
    /// <p>A list of the <code>HyperParameterSpecification</code> objects, that define the
    ///             supported hyperparameters. This is required if the algorithm supports automatic model
    ///             tuning.></p>
    public let supportedHyperParameters: [HyperParameterSpecification]?
    /// <p>A list of the instance types that this algorithm can use for training.</p>
    public let supportedTrainingInstanceTypes: [TrainingInstanceType]?
    /// <p>A list of the metrics that the algorithm emits that can be used as the objective
    ///             metric in a hyperparameter tuning job.</p>
    public let supportedTuningJobObjectiveMetrics: [HyperParameterTuningJobObjective]?
    /// <p>Indicates whether the algorithm supports distributed training. If set to false, buyers
    ///             can't request more than one instance during training.</p>
    public let supportsDistributedTraining: Bool
    /// <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources
    ///             to be used by the algorithm.</p>
    public let trainingChannels: [ChannelSpecification]?
    /// <p>The Amazon ECR registry path of the Docker image that contains the training
    ///             algorithm.</p>
    public let trainingImage: String?
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for
    ///             training.</p>
    public let trainingImageDigest: String?

    public init (
        metricDefinitions: [MetricDefinition]? = nil,
        supportedHyperParameters: [HyperParameterSpecification]? = nil,
        supportedTrainingInstanceTypes: [TrainingInstanceType]? = nil,
        supportedTuningJobObjectiveMetrics: [HyperParameterTuningJobObjective]? = nil,
        supportsDistributedTraining: Bool = false,
        trainingChannels: [ChannelSpecification]? = nil,
        trainingImage: String? = nil,
        trainingImageDigest: String? = nil
    )
    {
        self.metricDefinitions = metricDefinitions
        self.supportedHyperParameters = supportedHyperParameters
        self.supportedTrainingInstanceTypes = supportedTrainingInstanceTypes
        self.supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics
        self.supportsDistributedTraining = supportsDistributedTraining
        self.trainingChannels = trainingChannels
        self.trainingImage = trainingImage
        self.trainingImageDigest = trainingImageDigest
    }
}
