// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineExecutionStepMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case condition = "Condition"
        case model = "Model"
        case processingJob = "ProcessingJob"
        case registerModel = "RegisterModel"
        case trainingJob = "TrainingJob"
        case transformJob = "TransformJob"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let model = model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let processingJob = processingJob {
            try encodeContainer.encode(processingJob, forKey: .processingJob)
        }
        if let registerModel = registerModel {
            try encodeContainer.encode(registerModel, forKey: .registerModel)
        }
        if let trainingJob = trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let transformJob = transformJob {
            try encodeContainer.encode(transformJob, forKey: .transformJob)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDecoded = try containerValues.decodeIfPresent(TrainingJobStepMetadata.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let processingJobDecoded = try containerValues.decodeIfPresent(ProcessingJobStepMetadata.self, forKey: .processingJob)
        processingJob = processingJobDecoded
        let transformJobDecoded = try containerValues.decodeIfPresent(TransformJobStepMetadata.self, forKey: .transformJob)
        transformJob = transformJobDecoded
        let modelDecoded = try containerValues.decodeIfPresent(ModelStepMetadata.self, forKey: .model)
        model = modelDecoded
        let registerModelDecoded = try containerValues.decodeIfPresent(RegisterModelStepMetadata.self, forKey: .registerModel)
        registerModel = registerModelDecoded
        let conditionDecoded = try containerValues.decodeIfPresent(ConditionStepMetadata.self, forKey: .condition)
        condition = conditionDecoded
    }
}
