// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bias = "Bias"
        case explainability = "Explainability"
        case modelDataQuality = "ModelDataQuality"
        case modelQuality = "ModelQuality"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bias = bias {
            try encodeContainer.encode(bias, forKey: .bias)
        }
        if let explainability = explainability {
            try encodeContainer.encode(explainability, forKey: .explainability)
        }
        if let modelDataQuality = modelDataQuality {
            try encodeContainer.encode(modelDataQuality, forKey: .modelDataQuality)
        }
        if let modelQuality = modelQuality {
            try encodeContainer.encode(modelQuality, forKey: .modelQuality)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelQualityDecoded = try containerValues.decodeIfPresent(ModelQuality.self, forKey: .modelQuality)
        modelQuality = modelQualityDecoded
        let modelDataQualityDecoded = try containerValues.decodeIfPresent(ModelDataQuality.self, forKey: .modelDataQuality)
        modelDataQuality = modelDataQualityDecoded
        let biasDecoded = try containerValues.decodeIfPresent(Bias.self, forKey: .bias)
        bias = biasDecoded
        let explainabilityDecoded = try containerValues.decodeIfPresent(Explainability.self, forKey: .explainability)
        explainability = explainabilityDecoded
    }
}
