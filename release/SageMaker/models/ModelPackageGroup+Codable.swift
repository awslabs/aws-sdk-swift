// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelPackageGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case modelPackageGroupArn = "ModelPackageGroupArn"
        case modelPackageGroupDescription = "ModelPackageGroupDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageGroupStatus = "ModelPackageGroupStatus"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let modelPackageGroupArn = modelPackageGroupArn {
            try encodeContainer.encode(modelPackageGroupArn, forKey: .modelPackageGroupArn)
        }
        if let modelPackageGroupDescription = modelPackageGroupDescription {
            try encodeContainer.encode(modelPackageGroupDescription, forKey: .modelPackageGroupDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageGroupStatus = modelPackageGroupStatus {
            try encodeContainer.encode(modelPackageGroupStatus.rawValue, forKey: .modelPackageGroupStatus)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupArn)
        modelPackageGroupArn = modelPackageGroupArnDecoded
        let modelPackageGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupDescription)
        modelPackageGroupDescription = modelPackageGroupDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let modelPackageGroupStatusDecoded = try containerValues.decodeIfPresent(ModelPackageGroupStatus.self, forKey: .modelPackageGroupStatus)
        modelPackageGroupStatus = modelPackageGroupStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
