// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateAlgorithmInput: Equatable {
    /// <p>A description of the algorithm.</p>
    public let algorithmDescription: String?
    /// <p>The name of the algorithm.</p>
    public let algorithmName: String?
    /// <p>Whether to certify the algorithm so that it can be listed in AWS Marketplace.</p>
    public let certifyForMarketplace: Bool
    /// <p>Specifies details about inference jobs that the algorithm runs, including the
    ///             following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>The Amazon ECR paths of containers that contain the inference code and model
    ///                     artifacts.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The instance types that the algorithm supports for transform jobs and
    ///                     real-time endpoints used for inference.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The input and output content formats that the algorithm supports for
    ///                     inference.</p>
    ///             </li>
    ///          </ul>
    public let inferenceSpecification: InferenceSpecification?
    /// <p>An array of key-value pairs. You can use tags to categorize your AWS resources in
    ///             different ways, for example, by purpose, owner, or environment. For more information,
    ///             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS
    ///                 Resources</a>.</p>
    public let tags: [Tag]?
    /// <p>Specifies details about training jobs run by this algorithm, including the
    ///             following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>The Amazon ECR path of the container and the version digest of the
    ///                     algorithm.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The hyperparameters that the algorithm supports.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The instance types that the algorithm supports for training.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Whether the algorithm supports distributed training.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The metrics that the algorithm emits to Amazon CloudWatch.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Which metrics that the algorithm emits can be used as the objective metric for
    ///                     hyperparameter tuning jobs.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The input channels that the algorithm supports for training data. For example,
    ///                     an algorithm might support <code>train</code>, <code>validation</code>, and
    ///                         <code>test</code> channels.</p>
    ///             </li>
    ///          </ul>
    public let trainingSpecification: TrainingSpecification?
    /// <p>Specifies configurations for one or more training jobs and that Amazon SageMaker runs to test the
    ///             algorithm's training code and, optionally, one or more batch transform jobs that Amazon SageMaker
    ///             runs to test the algorithm's inference code.</p>
    public let validationSpecification: AlgorithmValidationSpecification?

    public init (
        algorithmDescription: String? = nil,
        algorithmName: String? = nil,
        certifyForMarketplace: Bool = false,
        inferenceSpecification: InferenceSpecification? = nil,
        tags: [Tag]? = nil,
        trainingSpecification: TrainingSpecification? = nil,
        validationSpecification: AlgorithmValidationSpecification? = nil
    )
    {
        self.algorithmDescription = algorithmDescription
        self.algorithmName = algorithmName
        self.certifyForMarketplace = certifyForMarketplace
        self.inferenceSpecification = inferenceSpecification
        self.tags = tags
        self.trainingSpecification = trainingSpecification
        self.validationSpecification = validationSpecification
    }
}
