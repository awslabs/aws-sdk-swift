// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateTransformJobInput: Equatable {
    /// <p>Specifies the number of records to include in a mini-batch for an HTTP inference
    ///             request. A <i>record</i>
    ///             <i></i> is a single unit of input data that
    ///             inference can be made on. For example, a single line in a CSV file is a record. </p>
    ///         <p>To enable the batch strategy, you must set the <code>SplitType</code> property to
    ///                 <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
    ///         <p>To use only one record when making an HTTP invocation request to a container, set
    ///                 <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code>
    ///             to <code>Line</code>.</p>
    ///         <p>To fit as many records in a mini-batch as can fit within the
    ///                 <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
    ///                 <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    public let batchStrategy: BatchStrategy?
    /// <p>The data structure used to specify the data to be used for inference in a batch
    ///             transform job and to associate the data that is relevant to the prediction results in
    ///             the output. The input filter provided allows you to exclude input data that is not
    ///             needed for inference in a batch transform job. The output filter provided allows you to
    ///             include input data relevant to interpreting the predictions in the output from the job.
    ///             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
    ///                 Results with their Corresponding Input Records</a>.</p>
    public let dataProcessing: DataProcessing?
    /// <p>The environment variables to set in the Docker container. We support up to 16 key and
    ///             values entries in the map.</p>
    public let environment: [String:String]?
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    ///       you call the following APIs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>CreateProcessingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTrainingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTransformJob</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let experimentConfig: ExperimentConfig?
    /// <p>The maximum number of parallel requests that can be sent to each instance in a
    ///             transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left
    ///             unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your
    ///             chosen algorithm. If the execution-parameters endpoint is not enabled, the default value
    ///             is <code>1</code>. For more information on execution-parameters, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How Containers Serve Requests</a>. For built-in algorithms, you don't need to
    ///             set a value for <code>MaxConcurrentTransforms</code>.</p>
    public let maxConcurrentTransforms: Int?
    /// <p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the
    ///             data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code>
    ///             must be greater than, or equal to, the size of a single record. To estimate the size of
    ///             a record in MB, divide the size of your dataset by the number of records. To ensure that
    ///             the records fit within the maximum payload size, we recommend using a slightly larger
    ///             value. The default value is <code>6</code> MB.
    ///             </p>
    ///         <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP
    ///             chunked encoding, set the value to <code>0</code>.
    ///             This
    ///             feature works only in supported algorithms. Currently, Amazon SageMaker built-in
    ///             algorithms do not support HTTP chunked encoding.</p>
    public let maxPayloadInMB: Int?
    /// <p>Configures the timeout and maximum number of retries for processing a transform job
    ///             invocation.</p>
    public let modelClientConfig: ModelClientConfig?
    /// <p>The name of the model that you want to use for the transform job.
    ///                 <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an AWS
    ///             Region in an AWS account.</p>
    public let modelName: String?
    /// <p>(Optional)
    ///             An
    ///             array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
    ///                 Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
    ///                 Guide</i>.</p>
    public let tags: [Tag]?
    /// <p>Describes the input source and
    ///             the
    ///             way the transform job consumes it.</p>
    public let transformInput: TransformInput?
    /// <p>The name of the transform job. The name must be unique within an AWS Region in an
    ///             AWS account. </p>
    public let transformJobName: String?
    /// <p>Describes the results of the transform job.</p>
    public let transformOutput: TransformOutput?
    /// <p>Describes the resources, including
    ///             ML
    ///             instance types and ML instance count, to use for the transform
    ///             job.</p>
    public let transformResources: TransformResources?

    public init (
        batchStrategy: BatchStrategy? = nil,
        dataProcessing: DataProcessing? = nil,
        environment: [String:String]? = nil,
        experimentConfig: ExperimentConfig? = nil,
        maxConcurrentTransforms: Int? = nil,
        maxPayloadInMB: Int? = nil,
        modelClientConfig: ModelClientConfig? = nil,
        modelName: String? = nil,
        tags: [Tag]? = nil,
        transformInput: TransformInput? = nil,
        transformJobName: String? = nil,
        transformOutput: TransformOutput? = nil,
        transformResources: TransformResources? = nil
    )
    {
        self.batchStrategy = batchStrategy
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.tags = tags
        self.transformInput = transformInput
        self.transformJobName = transformJobName
        self.transformOutput = transformOutput
        self.transformResources = transformResources
    }
}
