// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNotebookInstanceOutputBody: Equatable {
    public let notebookInstanceArn: String?
    public let notebookInstanceName: String?
    public let notebookInstanceStatus: NotebookInstanceStatus?
    public let failureReason: String?
    public let url: String?
    public let instanceType: InstanceType?
    public let subnetId: String?
    public let securityGroups: [String]?
    public let roleArn: String?
    public let kmsKeyId: String?
    public let networkInterfaceId: String?
    public let lastModifiedTime: Date?
    public let creationTime: Date?
    public let notebookInstanceLifecycleConfigName: String?
    public let directInternetAccess: DirectInternetAccess?
    public let volumeSizeInGB: Int?
    public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
    public let defaultCodeRepository: String?
    public let additionalCodeRepositories: [String]?
    public let rootAccess: RootAccess?
}

extension DescribeNotebookInstanceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case creationTime = "CreationTime"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case failureReason = "FailureReason"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lastModifiedTime = "LastModifiedTime"
        case networkInterfaceId = "NetworkInterfaceId"
        case notebookInstanceArn = "NotebookInstanceArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case notebookInstanceStatus = "NotebookInstanceStatus"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroups = "SecurityGroups"
        case subnetId = "SubnetId"
        case url = "Url"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let notebookInstanceStatusDecoded = try containerValues.decodeIfPresent(NotebookInstanceStatus.self, forKey: .notebookInstanceStatus)
        notebookInstanceStatus = notebookInstanceStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(string0)
            }
        }
        securityGroups = securityGroupsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let directInternetAccessDecoded = try containerValues.decodeIfPresent(DirectInternetAccess.self, forKey: .directInternetAccess)
        directInternetAccess = directInternetAccessDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([NotebookInstanceAcceleratorType].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [NotebookInstanceAcceleratorType]()
            for string0 in acceleratorTypesContainer {
                acceleratorTypesDecoded0?.append(string0)
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [String]()
            for string0 in additionalCodeRepositoriesContainer {
                additionalCodeRepositoriesDecoded0?.append(string0)
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let rootAccessDecoded = try containerValues.decodeIfPresent(RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
    }
}
