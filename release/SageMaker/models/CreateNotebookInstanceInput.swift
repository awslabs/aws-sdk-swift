// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateNotebookInstanceInput: Equatable {
    /// <p>A list of Elastic Inference (EI) instance types to associate with this notebook
    ///             instance. Currently, only one instance type can be associated with a notebook instance.
    ///             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
    /// <p>An array of up to three Git repositories to associate with the notebook instance.
    ///             These can be either the names of Git repositories stored as resources in your account,
    ///             or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. These repositories are cloned at the same level as the default
    ///             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    ///                 Repositories with Amazon SageMaker Notebook Instances</a>.</p>
    public let additionalCodeRepositories: [String]?
    /// <p>A Git repository to associate with the notebook instance as its default code
    ///             repository. This can be either the name of a Git repository stored as a resource in your
    ///             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. When you open a notebook instance, it opens in the directory that
    ///             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with Amazon SageMaker
    ///                 Notebook Instances</a>.</p>
    public let defaultCodeRepository: String?
    /// <p>Sets whether Amazon SageMaker provides internet access to the notebook instance. If you set this
    ///             to <code>Disabled</code> this notebook instance is able to access resources only in your
    ///             VPC, and is not be able to connect to Amazon SageMaker training and endpoint services unless you
    ///             configure a NAT Gateway in your VPC.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value
    ///             of this parameter to <code>Disabled</code> only if you set a value for the
    ///                 <code>SubnetId</code> parameter.</p>
    public let directInternetAccess: DirectInternetAccess?
    /// <p>The type of ML compute instance to launch for the notebook instance.</p>
    public let instanceType: InstanceType?
    /// <p>The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt data on
    ///             the storage volume attached to your notebook instance. The KMS key you provide must be
    ///             enabled. For information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling and Disabling
    ///                 Keys</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    public let kmsKeyId: String?
    /// <p>The name of a lifecycle configuration to associate with the notebook instance. For
    ///             information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
    ///                 Customize a Notebook Instance</a>.</p>
    public let lifecycleConfigName: String?
    /// <p>The name of the new notebook instance.</p>
    public let notebookInstanceName: String?
    /// <p> When you send any requests to AWS resources from the notebook instance, Amazon SageMaker
    ///             assumes this role to perform tasks on your behalf. You must grant this role necessary
    ///             permissions so Amazon SageMaker can perform these tasks. The policy must allow the Amazon SageMaker service
    ///             principal (sagemaker.amazonaws.com) permissions to assume this role. For more
    ///             information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker Roles</a>. </p>
    ///         <note>
    ///             <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
    ///                     <code>iam:PassRole</code> permission.</p>
    ///         </note>
    public let roleArn: String?
    /// <p>Whether root access is enabled or disabled for users of the notebook instance. The
    ///             default value is <code>Enabled</code>.</p>
    ///         <note>
    ///             <p>Lifecycle configurations need root access to be able to set up a notebook
    ///                 instance. Because of this, lifecycle configurations associated with a notebook
    ///                 instance always run with root access even if you disable root access for
    ///                 users.</p>
    ///         </note>
    public let rootAccess: RootAccess?
    /// <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be
    ///             for the same VPC as specified in the subnet. </p>
    public let securityGroupIds: [String]?
    /// <p>The ID of the subnet in a VPC to which you would like to have a connectivity from
    ///             your ML compute instance. </p>
    public let subnetId: String?
    /// <p>An array of key-value pairs. You can use tags to categorize your AWS resources in
    ///             different ways, for example, by purpose, owner, or environment. For more information,
    ///             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS
    ///                 Resources</a>.</p>
    public let tags: [Tag]?
    /// <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
    ///             default value is 5 GB.</p>
    public let volumeSizeInGB: Int?

    public init (
        acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [String]? = nil,
        defaultCodeRepository: String? = nil,
        directInternetAccess: DirectInternetAccess? = nil,
        instanceType: InstanceType? = nil,
        kmsKeyId: String? = nil,
        lifecycleConfigName: String? = nil,
        notebookInstanceName: String? = nil,
        roleArn: String? = nil,
        rootAccess: RootAccess? = nil,
        securityGroupIds: [String]? = nil,
        subnetId: String? = nil,
        tags: [Tag]? = nil,
        volumeSizeInGB: Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroupIds = securityGroupIds
        self.subnetId = subnetId
        self.tags = tags
        self.volumeSizeInGB = volumeSizeInGB
    }
}
