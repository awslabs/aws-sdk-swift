// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParameterRanges: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case categoricalParameterRanges = "CategoricalParameterRanges"
        case continuousParameterRanges = "ContinuousParameterRanges"
        case integerParameterRanges = "IntegerParameterRanges"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalParameterRanges = categoricalParameterRanges {
            var categoricalParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categoricalParameterRanges)
            for categoricalparameterranges0 in categoricalParameterRanges {
                try categoricalParameterRangesContainer.encode(categoricalparameterranges0)
            }
        }
        if let continuousParameterRanges = continuousParameterRanges {
            var continuousParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .continuousParameterRanges)
            for continuousparameterranges0 in continuousParameterRanges {
                try continuousParameterRangesContainer.encode(continuousparameterranges0)
            }
        }
        if let integerParameterRanges = integerParameterRanges {
            var integerParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerParameterRanges)
            for integerparameterranges0 in integerParameterRanges {
                try integerParameterRangesContainer.encode(integerparameterranges0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integerParameterRangesContainer = try containerValues.decodeIfPresent([IntegerParameterRange].self, forKey: .integerParameterRanges)
        var integerParameterRangesDecoded0:[IntegerParameterRange]? = nil
        if let integerParameterRangesContainer = integerParameterRangesContainer {
            integerParameterRangesDecoded0 = [IntegerParameterRange]()
            for structure0 in integerParameterRangesContainer {
                integerParameterRangesDecoded0?.append(structure0)
            }
        }
        integerParameterRanges = integerParameterRangesDecoded0
        let continuousParameterRangesContainer = try containerValues.decodeIfPresent([ContinuousParameterRange].self, forKey: .continuousParameterRanges)
        var continuousParameterRangesDecoded0:[ContinuousParameterRange]? = nil
        if let continuousParameterRangesContainer = continuousParameterRangesContainer {
            continuousParameterRangesDecoded0 = [ContinuousParameterRange]()
            for structure0 in continuousParameterRangesContainer {
                continuousParameterRangesDecoded0?.append(structure0)
            }
        }
        continuousParameterRanges = continuousParameterRangesDecoded0
        let categoricalParameterRangesContainer = try containerValues.decodeIfPresent([CategoricalParameterRange].self, forKey: .categoricalParameterRanges)
        var categoricalParameterRangesDecoded0:[CategoricalParameterRange]? = nil
        if let categoricalParameterRangesContainer = categoricalParameterRangesContainer {
            categoricalParameterRangesDecoded0 = [CategoricalParameterRange]()
            for structure0 in categoricalParameterRangesContainer {
                categoricalParameterRangesDecoded0?.append(structure0)
            }
        }
        categoricalParameterRanges = categoricalParameterRangesDecoded0
    }
}
