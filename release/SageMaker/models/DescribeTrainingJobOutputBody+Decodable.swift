// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrainingJobOutputBody: Equatable {
    public let trainingJobName: String?
    public let trainingJobArn: String?
    public let tuningJobArn: String?
    public let labelingJobArn: String?
    public let autoMLJobArn: String?
    public let modelArtifacts: ModelArtifacts?
    public let trainingJobStatus: TrainingJobStatus?
    public let secondaryStatus: SecondaryStatus?
    public let failureReason: String?
    public let hyperParameters: [String:String]?
    public let algorithmSpecification: AlgorithmSpecification?
    public let roleArn: String?
    public let inputDataConfig: [Channel]?
    public let outputDataConfig: OutputDataConfig?
    public let resourceConfig: ResourceConfig?
    public let vpcConfig: VpcConfig?
    public let stoppingCondition: StoppingCondition?
    public let creationTime: Date?
    public let trainingStartTime: Date?
    public let trainingEndTime: Date?
    public let lastModifiedTime: Date?
    public let secondaryStatusTransitions: [SecondaryStatusTransition]?
    public let finalMetricDataList: [MetricData]?
    public let enableNetworkIsolation: Bool
    public let enableInterContainerTrafficEncryption: Bool
    public let enableManagedSpotTraining: Bool
    public let checkpointConfig: CheckpointConfig?
    public let trainingTimeInSeconds: Int?
    public let billableTimeInSeconds: Int?
    public let debugHookConfig: DebugHookConfig?
    public let experimentConfig: ExperimentConfig?
    public let debugRuleConfigurations: [DebugRuleConfiguration]?
    public let tensorBoardOutputConfig: TensorBoardOutputConfig?
    public let debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]?
    public let profilerConfig: ProfilerConfig?
    public let profilerRuleConfigurations: [ProfilerRuleConfiguration]?
    public let profilerRuleEvaluationStatuses: [ProfilerRuleEvaluationStatus]?
    public let profilingStatus: ProfilingStatus?
    public let retryStrategy: RetryStrategy?
    public let environment: [String:String]?
}

extension DescribeTrainingJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case billableTimeInSeconds = "BillableTimeInSeconds"
        case checkpointConfig = "CheckpointConfig"
        case creationTime = "CreationTime"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case finalMetricDataList = "FinalMetricDataList"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case labelingJobArn = "LabelingJobArn"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case profilerRuleEvaluationStatuses = "ProfilerRuleEvaluationStatuses"
        case profilingStatus = "ProfilingStatus"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case secondaryStatus = "SecondaryStatus"
        case secondaryStatusTransitions = "SecondaryStatusTransitions"
        case stoppingCondition = "StoppingCondition"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case trainingTimeInSeconds = "TrainingTimeInSeconds"
        case tuningJobArn = "TuningJobArn"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tuningJobArn)
        tuningJobArn = tuningJobArnDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let secondaryStatusDecoded = try containerValues.decodeIfPresent(SecondaryStatus.self, forKey: .secondaryStatus)
        secondaryStatus = secondaryStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [String:String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [String:String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                hyperParametersDecoded0?[key0] = hyperparametervalue0
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([Channel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [Channel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let secondaryStatusTransitionsContainer = try containerValues.decodeIfPresent([SecondaryStatusTransition].self, forKey: .secondaryStatusTransitions)
        var secondaryStatusTransitionsDecoded0:[SecondaryStatusTransition]? = nil
        if let secondaryStatusTransitionsContainer = secondaryStatusTransitionsContainer {
            secondaryStatusTransitionsDecoded0 = [SecondaryStatusTransition]()
            for structure0 in secondaryStatusTransitionsContainer {
                secondaryStatusTransitionsDecoded0?.append(structure0)
            }
        }
        secondaryStatusTransitions = secondaryStatusTransitionsDecoded0
        let finalMetricDataListContainer = try containerValues.decodeIfPresent([MetricData].self, forKey: .finalMetricDataList)
        var finalMetricDataListDecoded0:[MetricData]? = nil
        if let finalMetricDataListContainer = finalMetricDataListContainer {
            finalMetricDataListDecoded0 = [MetricData]()
            for structure0 in finalMetricDataListContainer {
                finalMetricDataListDecoded0?.append(structure0)
            }
        }
        finalMetricDataList = finalMetricDataListDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let trainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .trainingTimeInSeconds)
        trainingTimeInSeconds = trainingTimeInSecondsDecoded
        let billableTimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .billableTimeInSeconds)
        billableTimeInSeconds = billableTimeInSecondsDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([DebugRuleConfiguration].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                debugRuleConfigurationsDecoded0?.append(structure0)
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let debugRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([DebugRuleEvaluationStatus].self, forKey: .debugRuleEvaluationStatuses)
        var debugRuleEvaluationStatusesDecoded0:[DebugRuleEvaluationStatus]? = nil
        if let debugRuleEvaluationStatusesContainer = debugRuleEvaluationStatusesContainer {
            debugRuleEvaluationStatusesDecoded0 = [DebugRuleEvaluationStatus]()
            for structure0 in debugRuleEvaluationStatusesContainer {
                debugRuleEvaluationStatusesDecoded0?.append(structure0)
            }
        }
        debugRuleEvaluationStatuses = debugRuleEvaluationStatusesDecoded0
        let profilerConfigDecoded = try containerValues.decodeIfPresent(ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([ProfilerRuleConfiguration].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                profilerRuleConfigurationsDecoded0?.append(structure0)
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let profilerRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([ProfilerRuleEvaluationStatus].self, forKey: .profilerRuleEvaluationStatuses)
        var profilerRuleEvaluationStatusesDecoded0:[ProfilerRuleEvaluationStatus]? = nil
        if let profilerRuleEvaluationStatusesContainer = profilerRuleEvaluationStatusesContainer {
            profilerRuleEvaluationStatusesDecoded0 = [ProfilerRuleEvaluationStatus]()
            for structure0 in profilerRuleEvaluationStatusesContainer {
                profilerRuleEvaluationStatusesDecoded0?.append(structure0)
            }
        }
        profilerRuleEvaluationStatuses = profilerRuleEvaluationStatusesDecoded0
        let profilingStatusDecoded = try containerValues.decodeIfPresent(ProfilingStatus.self, forKey: .profilingStatus)
        profilingStatus = profilingStatusDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = trainingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
    }
}
