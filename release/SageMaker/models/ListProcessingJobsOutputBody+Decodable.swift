// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProcessingJobsOutputBody: Equatable {
    public let processingJobSummaries: [ProcessingJobSummary]?
    public let nextToken: String?
}

extension ListProcessingJobsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case processingJobSummaries = "ProcessingJobSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobSummariesContainer = try containerValues.decodeIfPresent([ProcessingJobSummary].self, forKey: .processingJobSummaries)
        var processingJobSummariesDecoded0:[ProcessingJobSummary]? = nil
        if let processingJobSummariesContainer = processingJobSummariesContainer {
            processingJobSummariesDecoded0 = [ProcessingJobSummary]()
            for structure0 in processingJobSummariesContainer {
                processingJobSummariesDecoded0?.append(structure0)
            }
        }
        processingJobSummaries = processingJobSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
