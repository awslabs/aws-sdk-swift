// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAlgorithmInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmDescription = algorithmDescription {
            try encodeContainer.encode(algorithmDescription, forKey: .algorithmDescription)
        }
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingSpecification = trainingSpecification {
            try encodeContainer.encode(trainingSpecification, forKey: .trainingSpecification)
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}
