// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProcessingJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appSpecification = "AppSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case creationTime = "CreationTime"
        case environment = "Environment"
        case exitMessage = "ExitMessage"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case networkConfig = "NetworkConfig"
        case processingEndTime = "ProcessingEndTime"
        case processingInputs = "ProcessingInputs"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case processingStartTime = "ProcessingStartTime"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case trainingJobArn = "TrainingJobArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecification = appSpecification {
            try encodeContainer.encode(appSpecification, forKey: .appSpecification)
        }
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, processingenvironmentmap0) in environment {
                try environmentContainer.encode(processingenvironmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let exitMessage = exitMessage {
            try encodeContainer.encode(exitMessage, forKey: .exitMessage)
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringScheduleArn = monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let networkConfig = networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let processingEndTime = processingEndTime {
            try encodeContainer.encode(processingEndTime.timeIntervalSince1970, forKey: .processingEndTime)
        }
        if let processingInputs = processingInputs {
            var processingInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingInputs)
            for processinginputs0 in processingInputs {
                try processingInputsContainer.encode(processinginputs0)
            }
        }
        if let processingJobArn = processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let processingJobName = processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingJobStatus = processingJobStatus {
            try encodeContainer.encode(processingJobStatus.rawValue, forKey: .processingJobStatus)
        }
        if let processingOutputConfig = processingOutputConfig {
            try encodeContainer.encode(processingOutputConfig, forKey: .processingOutputConfig)
        }
        if let processingResources = processingResources {
            try encodeContainer.encode(processingResources, forKey: .processingResources)
        }
        if let processingStartTime = processingStartTime {
            try encodeContainer.encode(processingStartTime.timeIntervalSince1970, forKey: .processingStartTime)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([ProcessingInput].self, forKey: .processingInputs)
        var processingInputsDecoded0:[ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [ProcessingInput]()
            for structure0 in processingInputsContainer {
                processingInputsDecoded0?.append(structure0)
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = processingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let processingStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .processingStartTime)
        processingStartTime = processingStartTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
