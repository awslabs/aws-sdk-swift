// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetPlatform: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerator = "Accelerator"
        case arch = "Arch"
        case os = "Os"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerator = accelerator {
            try encodeContainer.encode(accelerator.rawValue, forKey: .accelerator)
        }
        if let arch = arch {
            try encodeContainer.encode(arch.rawValue, forKey: .arch)
        }
        if let os = os {
            try encodeContainer.encode(os.rawValue, forKey: .os)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let osDecoded = try containerValues.decodeIfPresent(TargetPlatformOs.self, forKey: .os)
        os = osDecoded
        let archDecoded = try containerValues.decodeIfPresent(TargetPlatformArch.self, forKey: .arch)
        arch = archDecoded
        let acceleratorDecoded = try containerValues.decodeIfPresent(TargetPlatformAccelerator.self, forKey: .accelerator)
        accelerator = acceleratorDecoded
    }
}
