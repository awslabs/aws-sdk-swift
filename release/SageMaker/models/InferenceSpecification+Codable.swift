// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InferenceSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containers = "Containers"
        case supportedContentTypes = "SupportedContentTypes"
        case supportedRealtimeInferenceInstanceTypes = "SupportedRealtimeInferenceInstanceTypes"
        case supportedResponseMIMETypes = "SupportedResponseMIMETypes"
        case supportedTransformInstanceTypes = "SupportedTransformInstanceTypes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for modelpackagecontainerdefinitionlist0 in containers {
                try containersContainer.encode(modelpackagecontainerdefinitionlist0)
            }
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for contenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(contenttypes0)
            }
        }
        if let supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes {
            var supportedRealtimeInferenceInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedRealtimeInferenceInstanceTypes)
            for realtimeinferenceinstancetypes0 in supportedRealtimeInferenceInstanceTypes {
                try supportedRealtimeInferenceInstanceTypesContainer.encode(realtimeinferenceinstancetypes0.rawValue)
            }
        }
        if let supportedResponseMIMETypes = supportedResponseMIMETypes {
            var supportedResponseMIMETypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedResponseMIMETypes)
            for responsemimetypes0 in supportedResponseMIMETypes {
                try supportedResponseMIMETypesContainer.encode(responsemimetypes0)
            }
        }
        if let supportedTransformInstanceTypes = supportedTransformInstanceTypes {
            var supportedTransformInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTransformInstanceTypes)
            for transforminstancetypes0 in supportedTransformInstanceTypes {
                try supportedTransformInstanceTypesContainer.encode(transforminstancetypes0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([ModelPackageContainerDefinition].self, forKey: .containers)
        var containersDecoded0:[ModelPackageContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [ModelPackageContainerDefinition]()
            for structure0 in containersContainer {
                containersDecoded0?.append(structure0)
            }
        }
        containers = containersDecoded0
        let supportedTransformInstanceTypesContainer = try containerValues.decodeIfPresent([TransformInstanceType].self, forKey: .supportedTransformInstanceTypes)
        var supportedTransformInstanceTypesDecoded0:[TransformInstanceType]? = nil
        if let supportedTransformInstanceTypesContainer = supportedTransformInstanceTypesContainer {
            supportedTransformInstanceTypesDecoded0 = [TransformInstanceType]()
            for string0 in supportedTransformInstanceTypesContainer {
                supportedTransformInstanceTypesDecoded0?.append(string0)
            }
        }
        supportedTransformInstanceTypes = supportedTransformInstanceTypesDecoded0
        let supportedRealtimeInferenceInstanceTypesContainer = try containerValues.decodeIfPresent([ProductionVariantInstanceType].self, forKey: .supportedRealtimeInferenceInstanceTypes)
        var supportedRealtimeInferenceInstanceTypesDecoded0:[ProductionVariantInstanceType]? = nil
        if let supportedRealtimeInferenceInstanceTypesContainer = supportedRealtimeInferenceInstanceTypesContainer {
            supportedRealtimeInferenceInstanceTypesDecoded0 = [ProductionVariantInstanceType]()
            for string0 in supportedRealtimeInferenceInstanceTypesContainer {
                supportedRealtimeInferenceInstanceTypesDecoded0?.append(string0)
            }
        }
        supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypesDecoded0
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [String]()
            for string0 in supportedContentTypesContainer {
                supportedContentTypesDecoded0?.append(string0)
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
        let supportedResponseMIMETypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .supportedResponseMIMETypes)
        var supportedResponseMIMETypesDecoded0:[String]? = nil
        if let supportedResponseMIMETypesContainer = supportedResponseMIMETypesContainer {
            supportedResponseMIMETypesDecoded0 = [String]()
            for string0 in supportedResponseMIMETypesContainer {
                supportedResponseMIMETypesDecoded0?.append(string0)
            }
        }
        supportedResponseMIMETypes = supportedResponseMIMETypesDecoded0
    }
}
