// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoMLCandidate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case candidateName = "CandidateName"
        case candidateProperties = "CandidateProperties"
        case candidateStatus = "CandidateStatus"
        case candidateSteps = "CandidateSteps"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case finalAutoMLJobObjectiveMetric = "FinalAutoMLJobObjectiveMetric"
        case inferenceContainers = "InferenceContainers"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatus = "ObjectiveStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let candidateName = candidateName {
            try encodeContainer.encode(candidateName, forKey: .candidateName)
        }
        if let candidateProperties = candidateProperties {
            try encodeContainer.encode(candidateProperties, forKey: .candidateProperties)
        }
        if let candidateStatus = candidateStatus {
            try encodeContainer.encode(candidateStatus.rawValue, forKey: .candidateStatus)
        }
        if let candidateSteps = candidateSteps {
            var candidateStepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .candidateSteps)
            for candidatesteps0 in candidateSteps {
                try candidateStepsContainer.encode(candidatesteps0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetric {
            try encodeContainer.encode(finalAutoMLJobObjectiveMetric, forKey: .finalAutoMLJobObjectiveMetric)
        }
        if let inferenceContainers = inferenceContainers {
            var inferenceContainersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceContainers)
            for automlcontainerdefinitions0 in inferenceContainers {
                try inferenceContainersContainer.encode(automlcontainerdefinitions0)
            }
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let objectiveStatus = objectiveStatus {
            try encodeContainer.encode(objectiveStatus.rawValue, forKey: .objectiveStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let candidateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .candidateName)
        candidateName = candidateNameDecoded
        let finalAutoMLJobObjectiveMetricDecoded = try containerValues.decodeIfPresent(FinalAutoMLJobObjectiveMetric.self, forKey: .finalAutoMLJobObjectiveMetric)
        finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetricDecoded
        let objectiveStatusDecoded = try containerValues.decodeIfPresent(ObjectiveStatus.self, forKey: .objectiveStatus)
        objectiveStatus = objectiveStatusDecoded
        let candidateStepsContainer = try containerValues.decodeIfPresent([AutoMLCandidateStep].self, forKey: .candidateSteps)
        var candidateStepsDecoded0:[AutoMLCandidateStep]? = nil
        if let candidateStepsContainer = candidateStepsContainer {
            candidateStepsDecoded0 = [AutoMLCandidateStep]()
            for structure0 in candidateStepsContainer {
                candidateStepsDecoded0?.append(structure0)
            }
        }
        candidateSteps = candidateStepsDecoded0
        let candidateStatusDecoded = try containerValues.decodeIfPresent(CandidateStatus.self, forKey: .candidateStatus)
        candidateStatus = candidateStatusDecoded
        let inferenceContainersContainer = try containerValues.decodeIfPresent([AutoMLContainerDefinition].self, forKey: .inferenceContainers)
        var inferenceContainersDecoded0:[AutoMLContainerDefinition]? = nil
        if let inferenceContainersContainer = inferenceContainersContainer {
            inferenceContainersDecoded0 = [AutoMLContainerDefinition]()
            for structure0 in inferenceContainersContainer {
                inferenceContainersDecoded0?.append(structure0)
            }
        }
        inferenceContainers = inferenceContainersDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let candidatePropertiesDecoded = try containerValues.decodeIfPresent(CandidateProperties.self, forKey: .candidateProperties)
        candidateProperties = candidatePropertiesDecoded
    }
}
