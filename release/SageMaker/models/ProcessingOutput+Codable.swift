// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProcessingOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appManaged = "AppManaged"
        case featureStoreOutput = "FeatureStoreOutput"
        case outputName = "OutputName"
        case s3Output = "S3Output"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if appManaged != false {
            try encodeContainer.encode(appManaged, forKey: .appManaged)
        }
        if let featureStoreOutput = featureStoreOutput {
            try encodeContainer.encode(featureStoreOutput, forKey: .featureStoreOutput)
        }
        if let outputName = outputName {
            try encodeContainer.encode(outputName, forKey: .outputName)
        }
        if let s3Output = s3Output {
            try encodeContainer.encode(s3Output, forKey: .s3Output)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputName)
        outputName = outputNameDecoded
        let s3OutputDecoded = try containerValues.decodeIfPresent(ProcessingS3Output.self, forKey: .s3Output)
        s3Output = s3OutputDecoded
        let featureStoreOutputDecoded = try containerValues.decodeIfPresent(ProcessingFeatureStoreOutput.self, forKey: .featureStoreOutput)
        featureStoreOutput = featureStoreOutputDecoded
        let appManagedDecoded = try containerValues.decode(Bool.self, forKey: .appManaged)
        appManaged = appManagedDecoded
    }
}
