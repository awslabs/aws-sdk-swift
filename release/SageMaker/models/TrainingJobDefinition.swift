// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines the input needed to run a training job using the algorithm.</p>
public struct TrainingJobDefinition: Equatable {
    /// <p>The hyperparameters used for the training job.</p>
    public let hyperParameters: [String:String]?
    /// <p>An array of <code>Channel</code> objects, each of which specifies an input
    ///             source.</p>
    public let inputDataConfig: [Channel]?
    /// <p>the path to the S3 bucket where you want to store model artifacts. Amazon SageMaker creates
    ///             subfolders for the artifacts.</p>
    public let outputDataConfig: OutputDataConfig?
    /// <p>The resources, including the ML compute instances and ML storage volumes, to use for
    ///             model training.</p>
    public let resourceConfig: ResourceConfig?
    /// <p>Specifies a limit to how long a model training job can run.
    ///             It also specifies how long a managed Spot training job has to complete.
    ///             When the job reaches the time limit, Amazon SageMaker ends
    ///             the training job. Use this API to cap model training costs.</p>
    ///         <p>To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job
    ///             termination for 120 seconds. Algorithms can use this 120-second window to save the model
    ///             artifacts.</p>
    public let stoppingCondition: StoppingCondition?
    /// <p>The input mode used by the algorithm for the training job. For the input modes that
    ///             Amazon SageMaker algorithms support, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p>
    ///         <p>If an algorithm supports the <code>File</code> input mode, Amazon SageMaker downloads the training
    ///             data from S3 to the provisioned ML storage Volume, and mounts the directory to docker
    ///             volume for training container. If an algorithm supports the <code>Pipe</code> input
    ///             mode, Amazon SageMaker streams data directly from S3 to the container.</p>
    public let trainingInputMode: TrainingInputMode?

    public init (
        hyperParameters: [String:String]? = nil,
        inputDataConfig: [Channel]? = nil,
        outputDataConfig: OutputDataConfig? = nil,
        resourceConfig: ResourceConfig? = nil,
        stoppingCondition: StoppingCondition? = nil,
        trainingInputMode: TrainingInputMode? = nil
    )
    {
        self.hyperParameters = hyperParameters
        self.inputDataConfig = inputDataConfig
        self.outputDataConfig = outputDataConfig
        self.resourceConfig = resourceConfig
        self.stoppingCondition = stoppingCondition
        self.trainingInputMode = trainingInputMode
    }
}
