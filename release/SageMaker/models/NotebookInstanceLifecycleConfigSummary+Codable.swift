// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotebookInstanceLifecycleConfigSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn {
            try encodeContainer.encode(notebookInstanceLifecycleConfigArn, forKey: .notebookInstanceLifecycleConfigArn)
        }
        if let notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName {
            try encodeContainer.encode(notebookInstanceLifecycleConfigName, forKey: .notebookInstanceLifecycleConfigName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let notebookInstanceLifecycleConfigArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceLifecycleConfigArn)
        notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
