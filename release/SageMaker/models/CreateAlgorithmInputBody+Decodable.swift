// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAlgorithmInputBody: Equatable {
    public let algorithmName: String?
    public let algorithmDescription: String?
    public let trainingSpecification: TrainingSpecification?
    public let inferenceSpecification: InferenceSpecification?
    public let validationSpecification: AlgorithmValidationSpecification?
    public let certifyForMarketplace: Bool
    public let tags: [Tag]?
}

extension CreateAlgorithmInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
