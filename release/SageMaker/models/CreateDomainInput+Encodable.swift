// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case authMode = "AuthMode"
        case defaultUserSettings = "DefaultUserSettings"
        case domainName = "DomainName"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appNetworkAccessType = appNetworkAccessType {
            try encodeContainer.encode(appNetworkAccessType.rawValue, forKey: .appNetworkAccessType)
        }
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let defaultUserSettings = defaultUserSettings {
            try encodeContainer.encode(defaultUserSettings, forKey: .defaultUserSettings)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId {
            try encodeContainer.encode(homeEfsFileSystemKmsKeyId, forKey: .homeEfsFileSystemKmsKeyId)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnets0 in subnetIds {
                try subnetIdsContainer.encode(subnets0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }
}
