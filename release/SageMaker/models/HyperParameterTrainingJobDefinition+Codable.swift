// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HyperParameterTrainingJobDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case definitionName = "DefinitionName"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case hyperParameterRanges = "HyperParameterRanges"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case staticHyperParameters = "StaticHyperParameters"
        case stoppingCondition = "StoppingCondition"
        case tuningObjective = "TuningObjective"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let checkpointConfig = checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let definitionName = definitionName {
            try encodeContainer.encode(definitionName, forKey: .definitionName)
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let hyperParameterRanges = hyperParameterRanges {
            try encodeContainer.encode(hyperParameterRanges, forKey: .hyperParameterRanges)
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let staticHyperParameters = staticHyperParameters {
            var staticHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .staticHyperParameters)
            for (dictKey0, hyperparameters0) in staticHyperParameters {
                try staticHyperParametersContainer.encode(hyperparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tuningObjective = tuningObjective {
            try encodeContainer.encode(tuningObjective, forKey: .tuningObjective)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .definitionName)
        definitionName = definitionNameDecoded
        let tuningObjectiveDecoded = try containerValues.decodeIfPresent(HyperParameterTuningJobObjective.self, forKey: .tuningObjective)
        tuningObjective = tuningObjectiveDecoded
        let hyperParameterRangesDecoded = try containerValues.decodeIfPresent(ParameterRanges.self, forKey: .hyperParameterRanges)
        hyperParameterRanges = hyperParameterRangesDecoded
        let staticHyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .staticHyperParameters)
        var staticHyperParametersDecoded0: [String:String]? = nil
        if let staticHyperParametersContainer = staticHyperParametersContainer {
            staticHyperParametersDecoded0 = [String:String]()
            for (key0, hyperparametervalue0) in staticHyperParametersContainer {
                staticHyperParametersDecoded0?[key0] = hyperparametervalue0
            }
        }
        staticHyperParameters = staticHyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(HyperParameterAlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([Channel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [Channel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let enableNetworkIsolationDecoded = try containerValues.decode(Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
    }
}
