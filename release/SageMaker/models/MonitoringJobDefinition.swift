// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines the monitoring job.</p>
public struct MonitoringJobDefinition: Equatable {
    /// <p>Baseline configuration used to validate that the data conforms to the specified
    ///          constraints and statistics</p>
    public let baselineConfig: MonitoringBaselineConfig?
    /// <p>Sets the environment variables in the Docker container.</p>
    public let environment: [String:String]?
    /// <p>Configures the monitoring job to run a specified Docker container image.</p>
    public let monitoringAppSpecification: MonitoringAppSpecification?
    /// <p>The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker
    ///          Endpoint.</p>
    public let monitoringInputs: [MonitoringInput]?
    /// <p>The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage
    ///          Service (Amazon S3).</p>
    public let monitoringOutputConfig: MonitoringOutputConfig?
    /// <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
    ///          monitoring job. In distributed processing, you specify more than one instance.</p>
    public let monitoringResources: MonitoringResources?
    /// <p>Specifies networking options for an monitoring job.</p>
    public let networkConfig: NetworkConfig?
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
    ///          your behalf.</p>
    public let roleArn: String?
    /// <p>Specifies a time limit for how long the monitoring job is allowed to run.</p>
    public let stoppingCondition: MonitoringStoppingCondition?

    public init (
        baselineConfig: MonitoringBaselineConfig? = nil,
        environment: [String:String]? = nil,
        monitoringAppSpecification: MonitoringAppSpecification? = nil,
        monitoringInputs: [MonitoringInput]? = nil,
        monitoringOutputConfig: MonitoringOutputConfig? = nil,
        monitoringResources: MonitoringResources? = nil,
        networkConfig: NetworkConfig? = nil,
        roleArn: String? = nil,
        stoppingCondition: MonitoringStoppingCondition? = nil
    )
    {
        self.baselineConfig = baselineConfig
        self.environment = environment
        self.monitoringAppSpecification = monitoringAppSpecification
        self.monitoringInputs = monitoringInputs
        self.monitoringOutputConfig = monitoringOutputConfig
        self.monitoringResources = monitoringResources
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}
