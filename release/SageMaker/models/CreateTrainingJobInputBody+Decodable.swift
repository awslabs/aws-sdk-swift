// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrainingJobInputBody: Equatable {
    public let trainingJobName: String?
    public let hyperParameters: [String:String]?
    public let algorithmSpecification: AlgorithmSpecification?
    public let roleArn: String?
    public let inputDataConfig: [Channel]?
    public let outputDataConfig: OutputDataConfig?
    public let resourceConfig: ResourceConfig?
    public let vpcConfig: VpcConfig?
    public let stoppingCondition: StoppingCondition?
    public let tags: [Tag]?
    public let enableNetworkIsolation: Bool
    public let enableInterContainerTrafficEncryption: Bool
    public let enableManagedSpotTraining: Bool
    public let checkpointConfig: CheckpointConfig?
    public let debugHookConfig: DebugHookConfig?
    public let debugRuleConfigurations: [DebugRuleConfiguration]?
    public let tensorBoardOutputConfig: TensorBoardOutputConfig?
    public let experimentConfig: ExperimentConfig?
    public let profilerConfig: ProfilerConfig?
    public let profilerRuleConfigurations: [ProfilerRuleConfiguration]?
    public let environment: [String:String]?
    public let retryStrategy: RetryStrategy?
}

extension CreateTrainingJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingJobName = "TrainingJobName"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [String:String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [String:String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                hyperParametersDecoded0?[key0] = hyperparametervalue0
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([Channel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [Channel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([DebugRuleConfiguration].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                debugRuleConfigurationsDecoded0?.append(structure0)
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let profilerConfigDecoded = try containerValues.decodeIfPresent(ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([ProfilerRuleConfiguration].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                profilerRuleConfigurationsDecoded0?.append(structure0)
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = trainingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
    }
}
