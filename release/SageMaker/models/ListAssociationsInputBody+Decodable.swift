// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssociationsInputBody: Equatable {
    public let sourceArn: String?
    public let destinationArn: String?
    public let sourceType: String?
    public let destinationType: String?
    public let associationType: AssociationEdgeType?
    public let createdAfter: Date?
    public let createdBefore: Date?
    public let sortBy: SortAssociationsBy?
    public let sortOrder: SortOrder?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListAssociationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case associationType = "AssociationType"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case destinationArn = "DestinationArn"
        case destinationType = "DestinationType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SortAssociationsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
