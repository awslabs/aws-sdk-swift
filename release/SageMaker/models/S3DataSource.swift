// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the S3 data source.</p>
public struct S3DataSource: Equatable {
    /// <p>A list of one or more attribute names to use that are found in a specified augmented
    ///             manifest file.</p>
    public let attributeNames: [String]?
    /// <p>If you want Amazon SageMaker to replicate the entire dataset on each ML compute instance that
    ///             is launched for model training, specify <code>FullyReplicated</code>. </p>
    ///         <p>If you want Amazon SageMaker to replicate a subset of data on each ML compute instance that is
    ///             launched for model training, specify <code>ShardedByS3Key</code>. If there are
    ///                 <i>n</i> ML compute instances launched for a training job, each
    ///             instance gets approximately 1/<i>n</i> of the number of S3 objects. In
    ///             this case, model training on each machine uses only the subset of training data. </p>
    ///         <p>Don't choose more ML compute instances for training than available S3 objects. If
    ///             you do, some nodes won't get any data and you will pay for nodes that aren't getting any
    ///             training data. This applies in both File and Pipe modes. Keep this in mind when
    ///             developing algorithms. </p>
    ///         <p>In distributed training, where you use multiple ML compute EC2 instances, you might
    ///             choose <code>ShardedByS3Key</code>. If the algorithm requires copying training data to
    ///             the ML storage volume (when <code>TrainingInputMode</code> is set to <code>File</code>),
    ///             this copies 1/<i>n</i> of the number of objects. </p>
    public let s3DataDistributionType: S3DataDistribution?
    /// <p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix.
    ///             Amazon SageMaker uses all objects that match the specified key name prefix for model training. </p>
    ///         <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that
    ///             is a manifest file containing a list of object keys that you want Amazon SageMaker to use for model
    ///             training. </p>
    ///         <p>If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object that is
    ///             an augmented manifest file in JSON lines format. This file contains the data you want to
    ///             use for model training. <code>AugmentedManifestFile</code> can only be used if the
    ///             Channel's input mode is <code>Pipe</code>.</p>
    public let s3DataType: S3DataType?
    /// <p>Depending on the value specified for the <code>S3DataType</code>, identifies either
    ///             a key name prefix or a manifest. For example: </p>
    ///         <ul>
    ///             <li>
    ///                 <p> A key name prefix might look like this:
    ///                         <code>s3://bucketname/exampleprefix</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p> A manifest might look like this:
    ///                         <code>s3://bucketname/example.manifest</code>
    ///                 </p>
    ///                 <p> A manifest is an S3 object which is a JSON file consisting of an array of
    ///                     elements. The first element is a prefix which is followed by one or more
    ///                     suffixes. SageMaker appends the suffix elements to the prefix to get a full set
    ///                     of <code>S3Uri</code>. Note that the prefix must be a valid non-empty
    ///                         <code>S3Uri</code> that precludes users from specifying a manifest whose
    ///                     individual <code>S3Uri</code> is sourced from different S3 buckets.</p>
    ///                 <p> The following code example shows a valid manifest format: </p>
    ///                 <p>
    ///                     <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
    ///                 </p>
    ///                 <p>
    ///                     <code> "relative/path/to/custdata-1",</code>
    ///                 </p>
    ///                 <p>
    ///                     <code> "relative/path/custdata-2",</code>
    ///                 </p>
    ///                 <p>
    ///                     <code> ...</code>
    ///                 </p>
    ///                 <p>
    ///                     <code> "relative/path/custdata-N"</code>
    ///                 </p>
    ///                 <p>
    ///                     <code>]</code>
    ///                 </p>
    ///                 <p> This JSON is equivalent to the following <code>S3Uri</code>
    ///                     list:</p>
    ///                 <p>
    ///                     <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
    ///                 </p>
    ///                 <p>
    ///                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
    ///                 </p>
    ///                 <p>
    ///                     <code>...</code>
    ///                 </p>
    ///                 <p>
    ///                     <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
    ///                 </p>
    ///                 <p>The complete set of <code>S3Uri</code> in this manifest is the input data
    ///                     for the channel for this data source. The object that each <code>S3Uri</code>
    ///                     points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on
    ///                     your behalf. </p>
    ///             </li>
    ///          </ul>
    public let s3Uri: String?

    public init (
        attributeNames: [String]? = nil,
        s3DataDistributionType: S3DataDistribution? = nil,
        s3DataType: S3DataType? = nil,
        s3Uri: String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.s3DataDistributionType = s3DataDistributionType
        self.s3DataType = s3DataType
        self.s3Uri = s3Uri
    }
}
