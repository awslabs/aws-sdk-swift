// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeModelPackageOutputBody: Equatable {
    public let modelPackageName: String?
    public let modelPackageGroupName: String?
    public let modelPackageVersion: Int?
    public let modelPackageArn: String?
    public let modelPackageDescription: String?
    public let creationTime: Date?
    public let inferenceSpecification: InferenceSpecification?
    public let sourceAlgorithmSpecification: SourceAlgorithmSpecification?
    public let validationSpecification: ModelPackageValidationSpecification?
    public let modelPackageStatus: ModelPackageStatus?
    public let modelPackageStatusDetails: ModelPackageStatusDetails?
    public let certifyForMarketplace: Bool
    public let modelApprovalStatus: ModelApprovalStatus?
    public let createdBy: UserContext?
    public let metadataProperties: MetadataProperties?
    public let modelMetrics: ModelMetrics?
    public let lastModifiedTime: Date?
    public let lastModifiedBy: UserContext?
    public let approvalDescription: String?
}

extension DescribeModelPackageOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case approvalDescription = "ApprovalDescription"
        case certifyForMarketplace = "CertifyForMarketplace"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageStatusDetails = "ModelPackageStatusDetails"
        case modelPackageVersion = "ModelPackageVersion"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelPackageStatusDetailsDecoded = try containerValues.decodeIfPresent(ModelPackageStatusDetails.self, forKey: .modelPackageStatusDetails)
        modelPackageStatusDetails = modelPackageStatusDetailsDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
    }
}
