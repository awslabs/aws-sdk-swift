// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssociationSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationType = "AssociationType"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case destinationArn = "DestinationArn"
        case destinationName = "DestinationName"
        case destinationType = "DestinationType"
        case sourceArn = "SourceArn"
        case sourceName = "SourceName"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType.rawValue, forKey: .associationType)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let destinationName = destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let destinationType = destinationType {
            try encodeContainer.encode(destinationType, forKey: .destinationType)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceName = sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let associationTypeDecoded = try containerValues.decodeIfPresent(AssociationEdgeType.self, forKey: .associationType)
        associationType = associationTypeDecoded
        let sourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let destinationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
