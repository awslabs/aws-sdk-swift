// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTransformJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchStrategy = batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let dataProcessing = dataProcessing {
            try encodeContainer.encode(dataProcessing, forKey: .dataProcessing)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let maxConcurrentTransforms = maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let modelClientConfig = modelClientConfig {
            try encodeContainer.encode(modelClientConfig, forKey: .modelClientConfig)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transformInput = transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformJobName = transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformOutput = transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
    }
}
