// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlgorithmSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmName = "AlgorithmName"
        case enableSageMakerMetricsTimeSeries = "EnableSageMakerMetricsTimeSeries"
        case metricDefinitions = "MetricDefinitions"
        case trainingImage = "TrainingImage"
        case trainingInputMode = "TrainingInputMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmName = algorithmName {
            try encodeContainer.encode(algorithmName, forKey: .algorithmName)
        }
        if enableSageMakerMetricsTimeSeries != false {
            try encodeContainer.encode(enableSageMakerMetricsTimeSeries, forKey: .enableSageMakerMetricsTimeSeries)
        }
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionlist0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionlist0)
            }
        }
        if let trainingImage = trainingImage {
            try encodeContainer.encode(trainingImage, forKey: .trainingImage)
        }
        if let trainingInputMode = trainingInputMode {
            try encodeContainer.encode(trainingInputMode.rawValue, forKey: .trainingInputMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingImage)
        trainingImage = trainingImageDecoded
        let algorithmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let trainingInputModeDecoded = try containerValues.decodeIfPresent(TrainingInputMode.self, forKey: .trainingInputMode)
        trainingInputMode = trainingInputModeDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([MetricDefinition].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                metricDefinitionsDecoded0?.append(structure0)
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
        let enableSageMakerMetricsTimeSeriesDecoded = try containerValues.decode(Bool.self, forKey: .enableSageMakerMetricsTimeSeries)
        enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeriesDecoded
    }
}
