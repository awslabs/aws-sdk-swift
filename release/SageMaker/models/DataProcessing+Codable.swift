// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataProcessing: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputFilter = "InputFilter"
        case joinSource = "JoinSource"
        case outputFilter = "OutputFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputFilter = inputFilter {
            try encodeContainer.encode(inputFilter, forKey: .inputFilter)
        }
        if let joinSource = joinSource {
            try encodeContainer.encode(joinSource.rawValue, forKey: .joinSource)
        }
        if let outputFilter = outputFilter {
            try encodeContainer.encode(outputFilter, forKey: .outputFilter)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputFilter)
        inputFilter = inputFilterDecoded
        let outputFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputFilter)
        outputFilter = outputFilterDecoded
        let joinSourceDecoded = try containerValues.decodeIfPresent(JoinSource.self, forKey: .joinSource)
        joinSource = joinSourceDecoded
    }
}
