// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoMLContainerDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case environment = "Environment"
        case image = "Image"
        case modelDataUrl = "ModelDataUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, environmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = environmentvalue0
            }
        }
        environment = environmentDecoded0
    }
}
