// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkforceInputBody: Equatable {
    public let cognitoConfig: CognitoConfig?
    public let oidcConfig: OidcConfig?
    public let sourceIpConfig: SourceIpConfig?
    public let workforceName: String?
    public let tags: [Tag]?
}

extension CreateWorkforceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cognitoConfig = "CognitoConfig"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case tags = "Tags"
        case workforceName = "WorkforceName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cognitoConfigDecoded = try containerValues.decodeIfPresent(CognitoConfig.self, forKey: .cognitoConfig)
        cognitoConfig = cognitoConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(OidcConfig.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let workforceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
