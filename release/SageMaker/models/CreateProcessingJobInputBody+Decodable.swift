// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProcessingJobInputBody: Equatable {
    public let processingInputs: [ProcessingInput]?
    public let processingOutputConfig: ProcessingOutputConfig?
    public let processingJobName: String?
    public let processingResources: ProcessingResources?
    public let stoppingCondition: ProcessingStoppingCondition?
    public let appSpecification: AppSpecification?
    public let environment: [String:String]?
    public let networkConfig: NetworkConfig?
    public let roleArn: String?
    public let tags: [Tag]?
    public let experimentConfig: ExperimentConfig?
}

extension CreateProcessingJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appSpecification = "AppSpecification"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case networkConfig = "NetworkConfig"
        case processingInputs = "ProcessingInputs"
        case processingJobName = "ProcessingJobName"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([ProcessingInput].self, forKey: .processingInputs)
        var processingInputsDecoded0:[ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [ProcessingInput]()
            for structure0 in processingInputsContainer {
                processingInputsDecoded0?.append(structure0)
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = processingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}
