// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SecondaryStatus {
    case completed
    case downloading
    case downloadingTrainingImage
    case failed
    case interrupted
    case launchingMlInstances
    case maxRuntimeExceeded
    case maxWaitTimeExceeded
    case preparingTrainingStack
    case restarting
    case starting
    case stopped
    case stopping
    case training
    case updating
    case uploading
    case sdkUnknown(String)
}

extension SecondaryStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SecondaryStatus] {
        return [
            .completed,
            .downloading,
            .downloadingTrainingImage,
            .failed,
            .interrupted,
            .launchingMlInstances,
            .maxRuntimeExceeded,
            .maxWaitTimeExceeded,
            .preparingTrainingStack,
            .restarting,
            .starting,
            .stopped,
            .stopping,
            .training,
            .updating,
            .uploading,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .completed: return "Completed"
        case .downloading: return "Downloading"
        case .downloadingTrainingImage: return "DownloadingTrainingImage"
        case .failed: return "Failed"
        case .interrupted: return "Interrupted"
        case .launchingMlInstances: return "LaunchingMLInstances"
        case .maxRuntimeExceeded: return "MaxRuntimeExceeded"
        case .maxWaitTimeExceeded: return "MaxWaitTimeExceeded"
        case .preparingTrainingStack: return "PreparingTrainingStack"
        case .restarting: return "Restarting"
        case .starting: return "Starting"
        case .stopped: return "Stopped"
        case .stopping: return "Stopping"
        case .training: return "Training"
        case .updating: return "Updating"
        case .uploading: return "Uploading"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SecondaryStatus(rawValue: rawValue) ?? SecondaryStatus.sdkUnknown(rawValue)
    }
}
