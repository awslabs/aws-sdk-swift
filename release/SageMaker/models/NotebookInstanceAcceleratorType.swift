// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum NotebookInstanceAcceleratorType {
    case mlEia1Large
    case mlEia1Medium
    case mlEia1Xlarge
    case mlEia2Large
    case mlEia2Medium
    case mlEia2Xlarge
    case sdkUnknown(String)
}

extension NotebookInstanceAcceleratorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NotebookInstanceAcceleratorType] {
        return [
            .mlEia1Large,
            .mlEia1Medium,
            .mlEia1Xlarge,
            .mlEia2Large,
            .mlEia2Medium,
            .mlEia2Xlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mlEia1Large: return "ml.eia1.large"
        case .mlEia1Medium: return "ml.eia1.medium"
        case .mlEia1Xlarge: return "ml.eia1.xlarge"
        case .mlEia2Large: return "ml.eia2.large"
        case .mlEia2Medium: return "ml.eia2.medium"
        case .mlEia2Xlarge: return "ml.eia2.xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NotebookInstanceAcceleratorType(rawValue: rawValue) ?? NotebookInstanceAcceleratorType.sdkUnknown(rawValue)
    }
}
