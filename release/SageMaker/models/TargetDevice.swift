// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TargetDevice {
    case aisage
    case ambaCv22
    case coreml
    case deeplens
    case imx8qm
    case jacintoTda4vm
    case jetsonNano
    case jetsonTx1
    case jetsonTx2
    case jetsonXavier
    case lambda
    case mlC4
    case mlC5
    case mlEia2
    case mlG4dn
    case mlInf1
    case mlM4
    case mlM5
    case mlP2
    case mlP3
    case qcs603
    case qcs605
    case rasp3b
    case rk3288
    case rk3399
    case sbeC
    case sitaraAm57x
    case x86Win32
    case x86Win64
    case sdkUnknown(String)
}

extension TargetDevice : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetDevice] {
        return [
            .aisage,
            .ambaCv22,
            .coreml,
            .deeplens,
            .imx8qm,
            .jacintoTda4vm,
            .jetsonNano,
            .jetsonTx1,
            .jetsonTx2,
            .jetsonXavier,
            .lambda,
            .mlC4,
            .mlC5,
            .mlEia2,
            .mlG4dn,
            .mlInf1,
            .mlM4,
            .mlM5,
            .mlP2,
            .mlP3,
            .qcs603,
            .qcs605,
            .rasp3b,
            .rk3288,
            .rk3399,
            .sbeC,
            .sitaraAm57x,
            .x86Win32,
            .x86Win64,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aisage: return "aisage"
        case .ambaCv22: return "amba_cv22"
        case .coreml: return "coreml"
        case .deeplens: return "deeplens"
        case .imx8qm: return "imx8qm"
        case .jacintoTda4vm: return "jacinto_tda4vm"
        case .jetsonNano: return "jetson_nano"
        case .jetsonTx1: return "jetson_tx1"
        case .jetsonTx2: return "jetson_tx2"
        case .jetsonXavier: return "jetson_xavier"
        case .lambda: return "lambda"
        case .mlC4: return "ml_c4"
        case .mlC5: return "ml_c5"
        case .mlEia2: return "ml_eia2"
        case .mlG4dn: return "ml_g4dn"
        case .mlInf1: return "ml_inf1"
        case .mlM4: return "ml_m4"
        case .mlM5: return "ml_m5"
        case .mlP2: return "ml_p2"
        case .mlP3: return "ml_p3"
        case .qcs603: return "qcs603"
        case .qcs605: return "qcs605"
        case .rasp3b: return "rasp3b"
        case .rk3288: return "rk3288"
        case .rk3399: return "rk3399"
        case .sbeC: return "sbe_c"
        case .sitaraAm57x: return "sitara_am57x"
        case .x86Win32: return "x86_win32"
        case .x86Win64: return "x86_win64"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetDevice(rawValue: rawValue) ?? TargetDevice.sdkUnknown(rawValue)
    }
}
