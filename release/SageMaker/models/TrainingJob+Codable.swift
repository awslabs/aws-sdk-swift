// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrainingJob: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case billableTimeInSeconds = "BillableTimeInSeconds"
        case checkpointConfig = "CheckpointConfig"
        case creationTime = "CreationTime"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case finalMetricDataList = "FinalMetricDataList"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case labelingJobArn = "LabelingJobArn"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case outputDataConfig = "OutputDataConfig"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case secondaryStatus = "SecondaryStatus"
        case secondaryStatusTransitions = "SecondaryStatusTransitions"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case trainingTimeInSeconds = "TrainingTimeInSeconds"
        case tuningJobArn = "TuningJobArn"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let autoMLJobArn = autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let billableTimeInSeconds = billableTimeInSeconds {
            try encodeContainer.encode(billableTimeInSeconds, forKey: .billableTimeInSeconds)
        }
        if let checkpointConfig = checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let debugHookConfig = debugHookConfig {
            try encodeContainer.encode(debugHookConfig, forKey: .debugHookConfig)
        }
        if let debugRuleConfigurations = debugRuleConfigurations {
            var debugRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleConfigurations)
            for debugruleconfigurations0 in debugRuleConfigurations {
                try debugRuleConfigurationsContainer.encode(debugruleconfigurations0)
            }
        }
        if let debugRuleEvaluationStatuses = debugRuleEvaluationStatuses {
            var debugRuleEvaluationStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleEvaluationStatuses)
            for debugruleevaluationstatuses0 in debugRuleEvaluationStatuses {
                try debugRuleEvaluationStatusesContainer.encode(debugruleevaluationstatuses0)
            }
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, trainingenvironmentmap0) in environment {
                try environmentContainer.encode(trainingenvironmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalMetricDataList = finalMetricDataList {
            var finalMetricDataListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .finalMetricDataList)
            for finalmetricdatalist0 in finalMetricDataList {
                try finalMetricDataListContainer.encode(finalmetricdatalist0)
            }
        }
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let labelingJobArn = labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelArtifacts = modelArtifacts {
            try encodeContainer.encode(modelArtifacts, forKey: .modelArtifacts)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let resourceConfig = resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let secondaryStatus = secondaryStatus {
            try encodeContainer.encode(secondaryStatus.rawValue, forKey: .secondaryStatus)
        }
        if let secondaryStatusTransitions = secondaryStatusTransitions {
            var secondaryStatusTransitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryStatusTransitions)
            for secondarystatustransitions0 in secondaryStatusTransitions {
                try secondaryStatusTransitionsContainer.encode(secondarystatustransitions0)
            }
        }
        if let stoppingCondition = stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tensorBoardOutputConfig = tensorBoardOutputConfig {
            try encodeContainer.encode(tensorBoardOutputConfig, forKey: .tensorBoardOutputConfig)
        }
        if let trainingEndTime = trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingJobArn = trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
        if let trainingJobName = trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let trainingJobStatus = trainingJobStatus {
            try encodeContainer.encode(trainingJobStatus.rawValue, forKey: .trainingJobStatus)
        }
        if let trainingStartTime = trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let trainingTimeInSeconds = trainingTimeInSeconds {
            try encodeContainer.encode(trainingTimeInSeconds, forKey: .trainingTimeInSeconds)
        }
        if let tuningJobArn = tuningJobArn {
            try encodeContainer.encode(tuningJobArn, forKey: .tuningJobArn)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tuningJobArn)
        tuningJobArn = tuningJobArnDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let secondaryStatusDecoded = try containerValues.decodeIfPresent(SecondaryStatus.self, forKey: .secondaryStatus)
        secondaryStatus = secondaryStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [String:String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [String:String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                hyperParametersDecoded0?[key0] = hyperparametervalue0
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([Channel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [Channel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let secondaryStatusTransitionsContainer = try containerValues.decodeIfPresent([SecondaryStatusTransition].self, forKey: .secondaryStatusTransitions)
        var secondaryStatusTransitionsDecoded0:[SecondaryStatusTransition]? = nil
        if let secondaryStatusTransitionsContainer = secondaryStatusTransitionsContainer {
            secondaryStatusTransitionsDecoded0 = [SecondaryStatusTransition]()
            for structure0 in secondaryStatusTransitionsContainer {
                secondaryStatusTransitionsDecoded0?.append(structure0)
            }
        }
        secondaryStatusTransitions = secondaryStatusTransitionsDecoded0
        let finalMetricDataListContainer = try containerValues.decodeIfPresent([MetricData].self, forKey: .finalMetricDataList)
        var finalMetricDataListDecoded0:[MetricData]? = nil
        if let finalMetricDataListContainer = finalMetricDataListContainer {
            finalMetricDataListDecoded0 = [MetricData]()
            for structure0 in finalMetricDataListContainer {
                finalMetricDataListDecoded0?.append(structure0)
            }
        }
        finalMetricDataList = finalMetricDataListDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decode(Bool.self, forKey: .enableNetworkIsolation)
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decode(Bool.self, forKey: .enableInterContainerTrafficEncryption)
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decode(Bool.self, forKey: .enableManagedSpotTraining)
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let trainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .trainingTimeInSeconds)
        trainingTimeInSeconds = trainingTimeInSecondsDecoded
        let billableTimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .billableTimeInSeconds)
        billableTimeInSeconds = billableTimeInSecondsDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([DebugRuleConfiguration].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                debugRuleConfigurationsDecoded0?.append(structure0)
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let debugRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([DebugRuleEvaluationStatus].self, forKey: .debugRuleEvaluationStatuses)
        var debugRuleEvaluationStatusesDecoded0:[DebugRuleEvaluationStatus]? = nil
        if let debugRuleEvaluationStatusesContainer = debugRuleEvaluationStatusesContainer {
            debugRuleEvaluationStatusesDecoded0 = [DebugRuleEvaluationStatus]()
            for structure0 in debugRuleEvaluationStatusesContainer {
                debugRuleEvaluationStatusesDecoded0?.append(structure0)
            }
        }
        debugRuleEvaluationStatuses = debugRuleEvaluationStatusesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = trainingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
