// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLabelingJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case humanTaskConfig = "HumanTaskConfig"
        case inputConfig = "InputConfig"
        case labelAttributeName = "LabelAttributeName"
        case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
        case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
        case labelingJobName = "LabelingJobName"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskConfig = humanTaskConfig {
            try encodeContainer.encode(humanTaskConfig, forKey: .humanTaskConfig)
        }
        if let inputConfig = inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let labelAttributeName = labelAttributeName {
            try encodeContainer.encode(labelAttributeName, forKey: .labelAttributeName)
        }
        if let labelCategoryConfigS3Uri = labelCategoryConfigS3Uri {
            try encodeContainer.encode(labelCategoryConfigS3Uri, forKey: .labelCategoryConfigS3Uri)
        }
        if let labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig {
            try encodeContainer.encode(labelingJobAlgorithmsConfig, forKey: .labelingJobAlgorithmsConfig)
        }
        if let labelingJobName = labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingConditions = stoppingConditions {
            try encodeContainer.encode(stoppingConditions, forKey: .stoppingConditions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
