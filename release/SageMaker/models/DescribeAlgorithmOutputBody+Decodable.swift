// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlgorithmOutputBody: Equatable {
    public let algorithmName: String?
    public let algorithmArn: String?
    public let algorithmDescription: String?
    public let creationTime: Date?
    public let trainingSpecification: TrainingSpecification?
    public let inferenceSpecification: InferenceSpecification?
    public let validationSpecification: AlgorithmValidationSpecification?
    public let algorithmStatus: AlgorithmStatus?
    public let algorithmStatusDetails: AlgorithmStatusDetails?
    public let productId: String?
    public let certifyForMarketplace: Bool
}

extension DescribeAlgorithmOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case algorithmArn = "AlgorithmArn"
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case algorithmStatus = "AlgorithmStatus"
        case algorithmStatusDetails = "AlgorithmStatusDetails"
        case certifyForMarketplace = "CertifyForMarketplace"
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case productId = "ProductId"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let algorithmStatusDecoded = try containerValues.decodeIfPresent(AlgorithmStatus.self, forKey: .algorithmStatus)
        algorithmStatus = algorithmStatusDecoded
        let algorithmStatusDetailsDecoded = try containerValues.decodeIfPresent(AlgorithmStatusDetails.self, forKey: .algorithmStatusDetails)
        algorithmStatusDetails = algorithmStatusDetailsDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productId)
        productId = productIdDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
    }
}
