// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelBiasAppSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configUri = "ConfigUri"
        case environment = "Environment"
        case imageUri = "ImageUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configUri = configUri {
            try encodeContainer.encode(configUri, forKey: .configUri)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let configUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configUri)
        configUri = configUriDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = processingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
    }
}
