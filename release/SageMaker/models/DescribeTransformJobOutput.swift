// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeTransformJobOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the AutoML transform job.</p>
    public let autoMLJobArn: String?
    /// <p>Specifies the number of records to include in a mini-batch for an HTTP inference
    ///             request.
    ///             A <i>record</i>
    ///             <i></i> is a single unit of input data that inference
    ///             can be made on. For example, a single line in a CSV file is a record. </p>
    ///         <p>To enable the batch strategy, you must set <code>SplitType</code>
    ///             to
    ///                 <code>Line</code>, <code>RecordIO</code>, or
    ///             <code>TFRecord</code>.</p>
    public let batchStrategy: BatchStrategy?
    /// <p>A timestamp that shows when the transform Job was created.</p>
    public let creationTime: Date?
    /// <p>The data structure used to specify the data to be used for inference in a batch
    ///             transform job and to associate the data that is relevant to the prediction results in
    ///             the output. The input filter provided allows you to exclude input data that is not
    ///             needed for inference in a batch transform job. The output filter provided allows you to
    ///             include input data relevant to interpreting the predictions in the output from the job.
    ///             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
    ///                 Results with their Corresponding Input Records</a>.</p>
    public let dataProcessing: DataProcessing?
    /// <p>The
    ///             environment variables to set in the Docker container. We support up to 16 key and values
    ///             entries in the map.</p>
    public let environment: [String:String]?
    /// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    ///       you call the following APIs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a>CreateProcessingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTrainingJob</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a>CreateTransformJob</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let experimentConfig: ExperimentConfig?
    /// <p>If the transform job failed, <code>FailureReason</code> describes
    ///             why
    ///             it failed. A transform job creates a log file, which includes error
    ///             messages, and stores it
    ///             as
    ///             an Amazon S3 object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html">Log Amazon SageMaker Events with
    ///                 Amazon CloudWatch</a>.</p>
    public let failureReason: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the
    ///             transform or training job.</p>
    public let labelingJobArn: String?
    /// <p>The
    ///             maximum number
    ///             of
    ///             parallel requests on each instance node
    ///             that can be launched in a transform job. The default value is 1.</p>
    public let maxConcurrentTransforms: Int?
    /// <p>The
    ///             maximum
    ///             payload size, in MB, used in the
    ///             transform job.</p>
    public let maxPayloadInMB: Int?
    /// <p>The timeout and maximum number of retries for processing a transform job
    ///             invocation.</p>
    public let modelClientConfig: ModelClientConfig?
    /// <p>The name of the model used in the transform job.</p>
    public let modelName: String?
    /// <p>Indicates when the transform job has been
    ///
    ///             completed, or has stopped or failed. You are billed for the time
    ///             interval between this time and the value of <code>TransformStartTime</code>.</p>
    public let transformEndTime: Date?
    /// <p>Describes the dataset to be transformed and the Amazon S3 location where it is
    ///             stored.</p>
    public let transformInput: TransformInput?
    /// <p>The Amazon Resource Name (ARN) of the transform job.</p>
    public let transformJobArn: String?
    /// <p>The name of the transform job.</p>
    public let transformJobName: String?
    /// <p>The
    ///             status of the transform job. If the transform job failed, the reason
    ///             is returned in the <code>FailureReason</code> field.</p>
    public let transformJobStatus: TransformJobStatus?
    /// <p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the
    ///             transform job.</p>
    public let transformOutput: TransformOutput?
    /// <p>Describes
    ///             the resources, including ML instance types and ML instance count, to
    ///             use for the transform job.</p>
    public let transformResources: TransformResources?
    /// <p>Indicates when the transform job starts
    ///             on
    ///             ML instances. You are billed for the time interval between this time
    ///             and the value of <code>TransformEndTime</code>.</p>
    public let transformStartTime: Date?

    public init (
        autoMLJobArn: String? = nil,
        batchStrategy: BatchStrategy? = nil,
        creationTime: Date? = nil,
        dataProcessing: DataProcessing? = nil,
        environment: [String:String]? = nil,
        experimentConfig: ExperimentConfig? = nil,
        failureReason: String? = nil,
        labelingJobArn: String? = nil,
        maxConcurrentTransforms: Int? = nil,
        maxPayloadInMB: Int? = nil,
        modelClientConfig: ModelClientConfig? = nil,
        modelName: String? = nil,
        transformEndTime: Date? = nil,
        transformInput: TransformInput? = nil,
        transformJobArn: String? = nil,
        transformJobName: String? = nil,
        transformJobStatus: TransformJobStatus? = nil,
        transformOutput: TransformOutput? = nil,
        transformResources: TransformResources? = nil,
        transformStartTime: Date? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.batchStrategy = batchStrategy
        self.creationTime = creationTime
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.labelingJobArn = labelingJobArn
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.transformEndTime = transformEndTime
        self.transformInput = transformInput
        self.transformJobArn = transformJobArn
        self.transformJobName = transformJobName
        self.transformJobStatus = transformJobStatus
        self.transformOutput = transformOutput
        self.transformResources = transformResources
        self.transformStartTime = transformStartTime
    }
}
