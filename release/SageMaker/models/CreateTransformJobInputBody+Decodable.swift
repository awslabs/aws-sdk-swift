// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTransformJobInputBody: Equatable {
    public let transformJobName: String?
    public let modelName: String?
    public let maxConcurrentTransforms: Int?
    public let modelClientConfig: ModelClientConfig?
    public let maxPayloadInMB: Int?
    public let batchStrategy: BatchStrategy?
    public let environment: [String:String]?
    public let transformInput: TransformInput?
    public let transformOutput: TransformOutput?
    public let transformResources: TransformResources?
    public let dataProcessing: DataProcessing?
    public let tags: [Tag]?
    public let experimentConfig: ExperimentConfig?
}

extension CreateTransformJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = transformenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}
