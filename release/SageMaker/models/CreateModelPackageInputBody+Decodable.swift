// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelPackageInputBody: Equatable {
    public let modelPackageName: String?
    public let modelPackageGroupName: String?
    public let modelPackageDescription: String?
    public let inferenceSpecification: InferenceSpecification?
    public let validationSpecification: ModelPackageValidationSpecification?
    public let sourceAlgorithmSpecification: SourceAlgorithmSpecification?
    public let certifyForMarketplace: Bool
    public let tags: [Tag]?
    public let modelApprovalStatus: ModelApprovalStatus?
    public let metadataProperties: MetadataProperties?
    public let modelMetrics: ModelMetrics?
    public let clientToken: String?
}

extension CreateModelPackageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certifyForMarketplace = "CertifyForMarketplace"
        case clientToken = "ClientToken"
        case inferenceSpecification = "InferenceSpecification"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
