// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEndpointConfigInputBody: Equatable {
    public let endpointConfigName: String?
    public let productionVariants: [ProductionVariant]?
    public let dataCaptureConfig: DataCaptureConfig?
    public let tags: [Tag]?
    public let kmsKeyId: String?
}

extension CreateEndpointConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointConfigName = "EndpointConfigName"
        case kmsKeyId = "KmsKeyId"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([ProductionVariant].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[ProductionVariant]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [ProductionVariant]()
            for structure0 in productionVariantsContainer {
                productionVariantsDecoded0?.append(structure0)
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(DataCaptureConfig.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
