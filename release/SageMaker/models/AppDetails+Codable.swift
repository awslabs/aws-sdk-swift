// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case creationTime = "CreationTime"
        case domainId = "DomainId"
        case status = "Status"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appName = appName {
            try encodeContainer.encode(appName, forKey: .appName)
        }
        if let appType = appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appName)
        appName = appNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
