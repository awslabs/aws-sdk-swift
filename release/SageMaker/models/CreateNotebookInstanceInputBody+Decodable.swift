// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNotebookInstanceInputBody: Equatable {
    public let notebookInstanceName: String?
    public let instanceType: InstanceType?
    public let subnetId: String?
    public let securityGroupIds: [String]?
    public let roleArn: String?
    public let kmsKeyId: String?
    public let tags: [Tag]?
    public let lifecycleConfigName: String?
    public let directInternetAccess: DirectInternetAccess?
    public let volumeSizeInGB: Int?
    public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
    public let defaultCodeRepository: String?
    public let additionalCodeRepositories: [String]?
    public let rootAccess: RootAccess?
}

extension CreateNotebookInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let lifecycleConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleConfigName)
        lifecycleConfigName = lifecycleConfigNameDecoded
        let directInternetAccessDecoded = try containerValues.decodeIfPresent(DirectInternetAccess.self, forKey: .directInternetAccess)
        directInternetAccess = directInternetAccessDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([NotebookInstanceAcceleratorType].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [NotebookInstanceAcceleratorType]()
            for string0 in acceleratorTypesContainer {
                acceleratorTypesDecoded0?.append(string0)
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [String]()
            for string0 in additionalCodeRepositoriesContainer {
                additionalCodeRepositoriesDecoded0?.append(string0)
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let rootAccessDecoded = try containerValues.decodeIfPresent(RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
    }
}
