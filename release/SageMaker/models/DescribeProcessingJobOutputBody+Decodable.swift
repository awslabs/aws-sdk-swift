// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProcessingJobOutputBody: Equatable {
    public let processingInputs: [ProcessingInput]?
    public let processingOutputConfig: ProcessingOutputConfig?
    public let processingJobName: String?
    public let processingResources: ProcessingResources?
    public let stoppingCondition: ProcessingStoppingCondition?
    public let appSpecification: AppSpecification?
    public let environment: [String:String]?
    public let networkConfig: NetworkConfig?
    public let roleArn: String?
    public let experimentConfig: ExperimentConfig?
    public let processingJobArn: String?
    public let processingJobStatus: ProcessingJobStatus?
    public let exitMessage: String?
    public let failureReason: String?
    public let processingEndTime: Date?
    public let processingStartTime: Date?
    public let lastModifiedTime: Date?
    public let creationTime: Date?
    public let monitoringScheduleArn: String?
    public let autoMLJobArn: String?
    public let trainingJobArn: String?
}

extension DescribeProcessingJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appSpecification = "AppSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case creationTime = "CreationTime"
        case environment = "Environment"
        case exitMessage = "ExitMessage"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case networkConfig = "NetworkConfig"
        case processingEndTime = "ProcessingEndTime"
        case processingInputs = "ProcessingInputs"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case processingStartTime = "ProcessingStartTime"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case trainingJobArn = "TrainingJobArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([ProcessingInput].self, forKey: .processingInputs)
        var processingInputsDecoded0:[ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [ProcessingInput]()
            for structure0 in processingInputsContainer {
                processingInputsDecoded0?.append(structure0)
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .environment)
        var environmentDecoded0: [String:String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [String:String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                environmentDecoded0?[key0] = processingenvironmentvalue0
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let processingStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .processingStartTime)
        processingStartTime = processingStartTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
    }
}
