// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointOutputBody: Equatable {
    public let endpointName: String?
    public let endpointArn: String?
    public let endpointConfigName: String?
    public let productionVariants: [ProductionVariantSummary]?
    public let dataCaptureConfig: DataCaptureConfigSummary?
    public let endpointStatus: EndpointStatus?
    public let failureReason: String?
    public let creationTime: Date?
    public let lastModifiedTime: Date?
    public let lastDeploymentConfig: DeploymentConfig?
}

extension DescribeEndpointOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastDeploymentConfig = "LastDeploymentConfig"
        case lastModifiedTime = "LastModifiedTime"
        case productionVariants = "ProductionVariants"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([ProductionVariantSummary].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                productionVariantsDecoded0?.append(structure0)
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastDeploymentConfigDecoded = try containerValues.decodeIfPresent(DeploymentConfig.self, forKey: .lastDeploymentConfig)
        lastDeploymentConfig = lastDeploymentConfigDecoded
    }
}
