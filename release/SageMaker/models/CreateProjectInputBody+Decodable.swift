// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProjectInputBody: Equatable {
    public let projectName: String?
    public let projectDescription: String?
    public let serviceCatalogProvisioningDetails: ServiceCatalogProvisioningDetails?
    public let tags: [Tag]?
}

extension CreateProjectInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningDetailsDecoded = try containerValues.decodeIfPresent(ServiceCatalogProvisioningDetails.self, forKey: .serviceCatalogProvisioningDetails)
        serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
