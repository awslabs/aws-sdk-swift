// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaDatasetDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalog = "Catalog"
        case database = "Database"
        case kmsKeyId = "KmsKeyId"
        case outputCompression = "OutputCompression"
        case outputFormat = "OutputFormat"
        case outputS3Uri = "OutputS3Uri"
        case queryString = "QueryString"
        case workGroup = "WorkGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputCompression = outputCompression {
            try encodeContainer.encode(outputCompression.rawValue, forKey: .outputCompression)
        }
        if let outputFormat = outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let outputS3Uri = outputS3Uri {
            try encodeContainer.encode(outputS3Uri, forKey: .outputS3Uri)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let workGroup = workGroup {
            try encodeContainer.encode(workGroup, forKey: .workGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalog)
        catalog = catalogDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .database)
        database = databaseDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let workGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workGroup)
        workGroup = workGroupDecoded
        let outputS3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputS3Uri)
        outputS3Uri = outputS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(AthenaResultFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let outputCompressionDecoded = try containerValues.decodeIfPresent(AthenaResultCompressionType.self, forKey: .outputCompression)
        outputCompression = outputCompressionDecoded
    }
}
