// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProductionVariant: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceleratorType = "AcceleratorType"
        case coreDumpConfig = "CoreDumpConfig"
        case initialInstanceCount = "InitialInstanceCount"
        case initialVariantWeight = "InitialVariantWeight"
        case instanceType = "InstanceType"
        case modelName = "ModelName"
        case variantName = "VariantName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorType = acceleratorType {
            try encodeContainer.encode(acceleratorType.rawValue, forKey: .acceleratorType)
        }
        if let coreDumpConfig = coreDumpConfig {
            try encodeContainer.encode(coreDumpConfig, forKey: .coreDumpConfig)
        }
        if let initialInstanceCount = initialInstanceCount {
            try encodeContainer.encode(initialInstanceCount, forKey: .initialInstanceCount)
        }
        if let initialVariantWeight = initialVariantWeight {
            try encodeContainer.encode(initialVariantWeight, forKey: .initialVariantWeight)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let initialInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .initialInstanceCount)
        initialInstanceCount = initialInstanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let initialVariantWeightDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .initialVariantWeight)
        initialVariantWeight = initialVariantWeightDecoded
        let acceleratorTypeDecoded = try containerValues.decodeIfPresent(ProductionVariantAcceleratorType.self, forKey: .acceleratorType)
        acceleratorType = acceleratorTypeDecoded
        let coreDumpConfigDecoded = try containerValues.decodeIfPresent(ProductionVariantCoreDumpConfig.self, forKey: .coreDumpConfig)
        coreDumpConfig = coreDumpConfigDecoded
    }
}
