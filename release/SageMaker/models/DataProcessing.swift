// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The data structure used to specify the data to be used for inference in a batch
///             transform job and to associate the data that is relevant to the prediction results in
///             the output. The input filter provided allows you to exclude input data that is not
///             needed for inference in a batch transform job. The output filter provided allows you to
///             include input data relevant to interpreting the predictions in the output from the job.
///             For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
///                 Results with their Corresponding Input Records</a>.</p>
public struct DataProcessing: Equatable {
    /// <p>A <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a> expression used to select a portion of the input data to pass to
    ///             the algorithm. Use the <code>InputFilter</code> parameter to exclude fields, such as an
    ///             ID column, from the input. If you want Amazon SageMaker to pass the entire input dataset to the
    ///             algorithm, accept the default value <code>$</code>.</p>
    ///         <p>Examples: <code>"$"</code>, <code>"$[1:]"</code>, <code>"$.features"</code>
    ///          </p>
    public let inputFilter: String?
    /// <p>Specifies the source of the data to join with the transformed data. The valid values
    ///             are <code>None</code> and <code>Input</code>. The default value is <code>None</code>,
    ///             which specifies not to join the input with the transformed data. If you want the batch
    ///             transform job to join the original input data with the transformed data, set
    ///             <code>JoinSource</code> to <code>Input</code>. You can specify <code>OutputFilter</code>
    ///             as an additional filter to select a portion of the joined dataset and store it in the output file.</p>
    ///         <p>For JSON or JSONLines objects, such as a JSON array, Amazon SageMaker adds the transformed data to
    ///             the input JSON object in an attribute called <code>SageMakerOutput</code>. The joined
    ///             result for JSON must be a key-value pair object. If the input is not a key-value pair
    ///             object, Amazon SageMaker creates a new JSON file. In the new JSON file, and the input data is stored
    ///             under the <code>SageMakerInput</code> key and the results are stored in
    ///                 <code>SageMakerOutput</code>.</p>
    ///         <p>For CSV data, Amazon SageMaker takes each row as a JSON array and joins the transformed
    ///             data with the input by appending each transformed row to the end of the input.
    ///             The joined data has the original input data followed by the transformed data and
    ///             the output is a CSV file.</p>
    ///         <p>For information on how joining in applied, see
    ///             <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow">Workflow for Associating Inferences with Input Records</a>.</p>
    public let joinSource: JoinSource?
    /// <p>A <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a> expression used to select a portion of the joined dataset to save
    ///             in the output file for a batch transform job. If you want Amazon SageMaker to store the entire input
    ///             dataset in the output file, leave the default value, <code>$</code>. If you specify
    ///             indexes that aren't within the dimension size of the joined dataset, you get an
    ///             error.</p>
    ///         <p>Examples: <code>"$"</code>, <code>"$[0,5:]"</code>,
    ///                 <code>"$['id','SageMakerOutput']"</code>
    ///          </p>
    public let outputFilter: String?

    public init (
        inputFilter: String? = nil,
        joinSource: JoinSource? = nil,
        outputFilter: String? = nil
    )
    {
        self.inputFilter = inputFilter
        self.joinSource = joinSource
        self.outputFilter = outputFilter
    }
}
