// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MonitoringAppSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case imageUri = "ImageUri"
        case postAnalyticsProcessorSourceUri = "PostAnalyticsProcessorSourceUri"
        case recordPreprocessorSourceUri = "RecordPreprocessorSourceUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for monitoringcontainerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(monitoringcontainerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let imageUri = imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
        if let postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri {
            try encodeContainer.encode(postAnalyticsProcessorSourceUri, forKey: .postAnalyticsProcessorSourceUri)
        }
        if let recordPreprocessorSourceUri = recordPreprocessorSourceUri {
            try encodeContainer.encode(recordPreprocessorSourceUri, forKey: .recordPreprocessorSourceUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([String].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [String]()
            for string0 in containerEntrypointContainer {
                containerEntrypointDecoded0?.append(string0)
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([String].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [String]()
            for string0 in containerArgumentsContainer {
                containerArgumentsDecoded0?.append(string0)
            }
        }
        containerArguments = containerArgumentsDecoded0
        let recordPreprocessorSourceUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordPreprocessorSourceUri)
        recordPreprocessorSourceUri = recordPreprocessorSourceUriDecoded
        let postAnalyticsProcessorSourceUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .postAnalyticsProcessorSourceUri)
        postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUriDecoded
    }
}
