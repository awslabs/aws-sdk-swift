// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataCaptureConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case captureContentTypeHeader = "CaptureContentTypeHeader"
        case captureOptions = "CaptureOptions"
        case destinationS3Uri = "DestinationS3Uri"
        case enableCapture = "EnableCapture"
        case initialSamplingPercentage = "InitialSamplingPercentage"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureContentTypeHeader = captureContentTypeHeader {
            try encodeContainer.encode(captureContentTypeHeader, forKey: .captureContentTypeHeader)
        }
        if let captureOptions = captureOptions {
            var captureOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captureOptions)
            for captureoptionlist0 in captureOptions {
                try captureOptionsContainer.encode(captureoptionlist0)
            }
        }
        if let destinationS3Uri = destinationS3Uri {
            try encodeContainer.encode(destinationS3Uri, forKey: .destinationS3Uri)
        }
        if enableCapture != false {
            try encodeContainer.encode(enableCapture, forKey: .enableCapture)
        }
        if let initialSamplingPercentage = initialSamplingPercentage {
            try encodeContainer.encode(initialSamplingPercentage, forKey: .initialSamplingPercentage)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableCaptureDecoded = try containerValues.decode(Bool.self, forKey: .enableCapture)
        enableCapture = enableCaptureDecoded
        let initialSamplingPercentageDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .initialSamplingPercentage)
        initialSamplingPercentage = initialSamplingPercentageDecoded
        let destinationS3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationS3Uri)
        destinationS3Uri = destinationS3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let captureOptionsContainer = try containerValues.decodeIfPresent([CaptureOption].self, forKey: .captureOptions)
        var captureOptionsDecoded0:[CaptureOption]? = nil
        if let captureOptionsContainer = captureOptionsContainer {
            captureOptionsDecoded0 = [CaptureOption]()
            for structure0 in captureOptionsContainer {
                captureOptionsDecoded0?.append(structure0)
            }
        }
        captureOptions = captureOptionsDecoded0
        let captureContentTypeHeaderDecoded = try containerValues.decodeIfPresent(CaptureContentTypeHeader.self, forKey: .captureContentTypeHeader)
        captureContentTypeHeader = captureContentTypeHeaderDecoded
    }
}
