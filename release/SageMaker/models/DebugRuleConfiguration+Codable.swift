// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DebugRuleConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceType = "InstanceType"
        case localPath = "LocalPath"
        case ruleConfigurationName = "RuleConfigurationName"
        case ruleEvaluatorImage = "RuleEvaluatorImage"
        case ruleParameters = "RuleParameters"
        case s3OutputPath = "S3OutputPath"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let ruleConfigurationName = ruleConfigurationName {
            try encodeContainer.encode(ruleConfigurationName, forKey: .ruleConfigurationName)
        }
        if let ruleEvaluatorImage = ruleEvaluatorImage {
            try encodeContainer.encode(ruleEvaluatorImage, forKey: .ruleEvaluatorImage)
        }
        if let ruleParameters = ruleParameters {
            var ruleParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .ruleParameters)
            for (dictKey0, ruleparameters0) in ruleParameters {
                try ruleParametersContainer.encode(ruleparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleConfigurationName)
        ruleConfigurationName = ruleConfigurationNameDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let ruleEvaluatorImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleEvaluatorImage)
        ruleEvaluatorImage = ruleEvaluatorImageDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(ProcessingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decode(Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let ruleParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .ruleParameters)
        var ruleParametersDecoded0: [String:String]? = nil
        if let ruleParametersContainer = ruleParametersContainer {
            ruleParametersDecoded0 = [String:String]()
            for (key0, configvalue0) in ruleParametersContainer {
                ruleParametersDecoded0?[key0] = configvalue0
            }
        }
        ruleParameters = ruleParametersDecoded0
    }
}
