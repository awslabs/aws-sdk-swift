// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DebugHookConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collectionConfigurations = "CollectionConfigurations"
        case hookParameters = "HookParameters"
        case localPath = "LocalPath"
        case s3OutputPath = "S3OutputPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionConfigurations = collectionConfigurations {
            var collectionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collectionConfigurations)
            for collectionconfigurations0 in collectionConfigurations {
                try collectionConfigurationsContainer.encode(collectionconfigurations0)
            }
        }
        if let hookParameters = hookParameters {
            var hookParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .hookParameters)
            for (dictKey0, hookparameters0) in hookParameters {
                try hookParametersContainer.encode(hookparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3OutputPath = s3OutputPath {
            try encodeContainer.encode(s3OutputPath, forKey: .s3OutputPath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3OutputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3OutputPath)
        s3OutputPath = s3OutputPathDecoded
        let hookParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .hookParameters)
        var hookParametersDecoded0: [String:String]? = nil
        if let hookParametersContainer = hookParametersContainer {
            hookParametersDecoded0 = [String:String]()
            for (key0, configvalue0) in hookParametersContainer {
                hookParametersDecoded0?[key0] = configvalue0
            }
        }
        hookParameters = hookParametersDecoded0
        let collectionConfigurationsContainer = try containerValues.decodeIfPresent([CollectionConfiguration].self, forKey: .collectionConfigurations)
        var collectionConfigurationsDecoded0:[CollectionConfiguration]? = nil
        if let collectionConfigurationsContainer = collectionConfigurationsContainer {
            collectionConfigurationsDecoded0 = [CollectionConfiguration]()
            for structure0 in collectionConfigurationsContainer {
                collectionConfigurationsDecoded0?.append(structure0)
            }
        }
        collectionConfigurations = collectionConfigurationsDecoded0
    }
}
