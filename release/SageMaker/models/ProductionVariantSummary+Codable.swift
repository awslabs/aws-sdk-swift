// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProductionVariantSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentInstanceCount = "CurrentInstanceCount"
        case currentWeight = "CurrentWeight"
        case deployedImages = "DeployedImages"
        case desiredInstanceCount = "DesiredInstanceCount"
        case desiredWeight = "DesiredWeight"
        case variantName = "VariantName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentInstanceCount = currentInstanceCount {
            try encodeContainer.encode(currentInstanceCount, forKey: .currentInstanceCount)
        }
        if let currentWeight = currentWeight {
            try encodeContainer.encode(currentWeight, forKey: .currentWeight)
        }
        if let deployedImages = deployedImages {
            var deployedImagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deployedImages)
            for deployedimages0 in deployedImages {
                try deployedImagesContainer.encode(deployedimages0)
            }
        }
        if let desiredInstanceCount = desiredInstanceCount {
            try encodeContainer.encode(desiredInstanceCount, forKey: .desiredInstanceCount)
        }
        if let desiredWeight = desiredWeight {
            try encodeContainer.encode(desiredWeight, forKey: .desiredWeight)
        }
        if let variantName = variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let deployedImagesContainer = try containerValues.decodeIfPresent([DeployedImage].self, forKey: .deployedImages)
        var deployedImagesDecoded0:[DeployedImage]? = nil
        if let deployedImagesContainer = deployedImagesContainer {
            deployedImagesDecoded0 = [DeployedImage]()
            for structure0 in deployedImagesContainer {
                deployedImagesDecoded0?.append(structure0)
            }
        }
        deployedImages = deployedImagesDecoded0
        let currentWeightDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .currentWeight)
        currentWeight = currentWeightDecoded
        let desiredWeightDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .desiredWeight)
        desiredWeight = desiredWeightDecoded
        let currentInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentInstanceCount)
        currentInstanceCount = currentInstanceCountDecoded
        let desiredInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredInstanceCount)
        desiredInstanceCount = desiredInstanceCountDecoded
    }
}
