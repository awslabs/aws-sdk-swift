// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMonitoringExecutionsInputBody: Equatable {
    public let monitoringScheduleName: String?
    public let endpointName: String?
    public let sortBy: MonitoringExecutionSortKey?
    public let sortOrder: SortOrder?
    public let nextToken: String?
    public let maxResults: Int?
    public let scheduledTimeBefore: Date?
    public let scheduledTimeAfter: Date?
    public let creationTimeBefore: Date?
    public let creationTimeAfter: Date?
    public let lastModifiedTimeBefore: Date?
    public let lastModifiedTimeAfter: Date?
    public let statusEquals: ExecutionStatus?
    public let monitoringJobDefinitionName: String?
    public let monitoringTypeEquals: MonitoringType?
}

extension ListMonitoringExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case endpointName = "EndpointName"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringTypeEquals = "MonitoringTypeEquals"
        case nextToken = "NextToken"
        case scheduledTimeAfter = "ScheduledTimeAfter"
        case scheduledTimeBefore = "ScheduledTimeBefore"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(MonitoringExecutionSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let scheduledTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scheduledTimeBefore)
        scheduledTimeBefore = scheduledTimeBeforeDecoded
        let scheduledTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scheduledTimeAfter)
        scheduledTimeAfter = scheduledTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeEqualsDecoded = try containerValues.decodeIfPresent(MonitoringType.self, forKey: .monitoringTypeEquals)
        monitoringTypeEquals = monitoringTypeEqualsDecoded
    }
}
