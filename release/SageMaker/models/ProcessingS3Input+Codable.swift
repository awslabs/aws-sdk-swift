// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProcessingS3Input: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case localPath = "LocalPath"
        case s3CompressionType = "S3CompressionType"
        case s3DataDistributionType = "S3DataDistributionType"
        case s3DataType = "S3DataType"
        case s3InputMode = "S3InputMode"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localPath = localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let s3CompressionType = s3CompressionType {
            try encodeContainer.encode(s3CompressionType.rawValue, forKey: .s3CompressionType)
        }
        if let s3DataDistributionType = s3DataDistributionType {
            try encodeContainer.encode(s3DataDistributionType.rawValue, forKey: .s3DataDistributionType)
        }
        if let s3DataType = s3DataType {
            try encodeContainer.encode(s3DataType.rawValue, forKey: .s3DataType)
        }
        if let s3InputMode = s3InputMode {
            try encodeContainer.encode(s3InputMode.rawValue, forKey: .s3InputMode)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localPath)
        localPath = localPathDecoded
        let s3DataTypeDecoded = try containerValues.decodeIfPresent(ProcessingS3DataType.self, forKey: .s3DataType)
        s3DataType = s3DataTypeDecoded
        let s3InputModeDecoded = try containerValues.decodeIfPresent(ProcessingS3InputMode.self, forKey: .s3InputMode)
        s3InputMode = s3InputModeDecoded
        let s3DataDistributionTypeDecoded = try containerValues.decodeIfPresent(ProcessingS3DataDistributionType.self, forKey: .s3DataDistributionType)
        s3DataDistributionType = s3DataDistributionTypeDecoded
        let s3CompressionTypeDecoded = try containerValues.decodeIfPresent(ProcessingS3CompressionType.self, forKey: .s3CompressionType)
        s3CompressionType = s3CompressionTypeDecoded
    }
}
