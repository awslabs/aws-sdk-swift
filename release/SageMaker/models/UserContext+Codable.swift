// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserContext: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domainId = "DomainId"
        case userProfileArn = "UserProfileArn"
        case userProfileName = "UserProfileName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let userProfileArn = userProfileArn {
            try encodeContainer.encode(userProfileArn, forKey: .userProfileArn)
        }
        if let userProfileName = userProfileName {
            try encodeContainer.encode(userProfileName, forKey: .userProfileName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userProfileArn)
        userProfileArn = userProfileArnDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainId)
        domainId = domainIdDecoded
    }
}
