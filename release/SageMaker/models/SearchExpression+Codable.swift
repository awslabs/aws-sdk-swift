// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SearchExpression: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
        case nestedFilters = "NestedFilters"
        case `operator` = "Operator"
        case subExpressions = "SubExpressions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if let nestedFilters = nestedFilters {
            var nestedFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nestedFilters)
            for nestedfilterslist0 in nestedFilters {
                try nestedFiltersContainer.encode(nestedfilterslist0)
            }
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let subExpressions = subExpressions {
            var subExpressionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subExpressions)
            for searchexpressionlist0 in subExpressions {
                try subExpressionsContainer.encode(searchexpressionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filters)
        var filtersDecoded0:[Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Filter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let nestedFiltersContainer = try containerValues.decodeIfPresent([NestedFilters].self, forKey: .nestedFilters)
        var nestedFiltersDecoded0:[NestedFilters]? = nil
        if let nestedFiltersContainer = nestedFiltersContainer {
            nestedFiltersDecoded0 = [NestedFilters]()
            for structure0 in nestedFiltersContainer {
                nestedFiltersDecoded0?.append(structure0)
            }
        }
        nestedFilters = nestedFiltersDecoded0
        let subExpressionsContainer = try containerValues.decodeIfPresent([SearchExpression].self, forKey: .subExpressions)
        var subExpressionsDecoded0:[SearchExpression]? = nil
        if let subExpressionsContainer = subExpressionsContainer {
            subExpressionsDecoded0 = [SearchExpression]()
            for structure0 in subExpressionsContainer {
                subExpressionsDecoded0?.append(structure0)
            }
        }
        subExpressions = subExpressionsDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(BooleanOperator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}
