// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImageVersionOutputBody: Equatable {
    public let baseImage: String?
    public let containerImage: String?
    public let creationTime: Date?
    public let failureReason: String?
    public let imageArn: String?
    public let imageVersionArn: String?
    public let imageVersionStatus: ImageVersionStatus?
    public let lastModifiedTime: Date?
    public let version: Int?
}

extension DescribeImageVersionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseImage = "BaseImage"
        case containerImage = "ContainerImage"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case imageArn = "ImageArn"
        case imageVersionArn = "ImageVersionArn"
        case imageVersionStatus = "ImageVersionStatus"
        case lastModifiedTime = "LastModifiedTime"
        case version = "Version"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseImage)
        baseImage = baseImageDecoded
        let containerImageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerImage)
        containerImage = containerImageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let imageVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageVersionArn)
        imageVersionArn = imageVersionArnDecoded
        let imageVersionStatusDecoded = try containerValues.decodeIfPresent(ImageVersionStatus.self, forKey: .imageVersionStatus)
        imageVersionStatus = imageVersionStatusDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .version)
        version = versionDecoded
    }
}
