// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContextSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contextArn = "ContextArn"
        case contextName = "ContextName"
        case contextType = "ContextType"
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextArn = contextArn {
            try encodeContainer.encode(contextArn, forKey: .contextArn)
        }
        if let contextName = contextName {
            try encodeContainer.encode(contextName, forKey: .contextName)
        }
        if let contextType = contextType {
            try encodeContainer.encode(contextType, forKey: .contextType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contextArn)
        contextArn = contextArnDecoded
        let contextNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contextName)
        contextName = contextNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(ContextSource.self, forKey: .source)
        source = sourceDecoded
        let contextTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contextType)
        contextType = contextTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
