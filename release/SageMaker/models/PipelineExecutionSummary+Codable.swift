// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineExecutionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionArn = pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineExecutionStatus = pipelineExecutionStatus {
            try encodeContainer.encode(pipelineExecutionStatus.rawValue, forKey: .pipelineExecutionStatus)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
    }
}
