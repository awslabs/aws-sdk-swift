// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Operator {
    case contains
    case equals
    case exists
    case greaterThan
    case greaterThanOrEqualTo
    case `in`
    case lessThan
    case lessThanOrEqualTo
    case notEquals
    case notExists
    case sdkUnknown(String)
}

extension Operator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Operator] {
        return [
            .contains,
            .equals,
            .exists,
            .greaterThan,
            .greaterThanOrEqualTo,
            .in,
            .lessThan,
            .lessThanOrEqualTo,
            .notEquals,
            .notExists,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .contains: return "Contains"
        case .equals: return "Equals"
        case .exists: return "Exists"
        case .greaterThan: return "GreaterThan"
        case .greaterThanOrEqualTo: return "GreaterThanOrEqualTo"
        case .in: return "In"
        case .lessThan: return "LessThan"
        case .lessThanOrEqualTo: return "LessThanOrEqualTo"
        case .notEquals: return "NotEquals"
        case .notExists: return "NotExists"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Operator(rawValue: rawValue) ?? Operator.sdkUnknown(rawValue)
    }
}
