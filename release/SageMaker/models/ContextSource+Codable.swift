// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContextSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sourceId = "SourceId"
        case sourceType = "SourceType"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceId = sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
        if let sourceUri = sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
    }
}
