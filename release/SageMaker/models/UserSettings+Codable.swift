// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case executionRole = "ExecutionRole"
        case jupyterServerAppSettings = "JupyterServerAppSettings"
        case kernelGatewayAppSettings = "KernelGatewayAppSettings"
        case securityGroups = "SecurityGroups"
        case sharingSettings = "SharingSettings"
        case tensorBoardAppSettings = "TensorBoardAppSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRole = executionRole {
            try encodeContainer.encode(executionRole, forKey: .executionRole)
        }
        if let jupyterServerAppSettings = jupyterServerAppSettings {
            try encodeContainer.encode(jupyterServerAppSettings, forKey: .jupyterServerAppSettings)
        }
        if let kernelGatewayAppSettings = kernelGatewayAppSettings {
            try encodeContainer.encode(kernelGatewayAppSettings, forKey: .kernelGatewayAppSettings)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroupids0 in securityGroups {
                try securityGroupsContainer.encode(securitygroupids0)
            }
        }
        if let sharingSettings = sharingSettings {
            try encodeContainer.encode(sharingSettings, forKey: .sharingSettings)
        }
        if let tensorBoardAppSettings = tensorBoardAppSettings {
            try encodeContainer.encode(tensorBoardAppSettings, forKey: .tensorBoardAppSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRole)
        executionRole = executionRoleDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [String]()
            for string0 in securityGroupsContainer {
                securityGroupsDecoded0?.append(string0)
            }
        }
        securityGroups = securityGroupsDecoded0
        let sharingSettingsDecoded = try containerValues.decodeIfPresent(SharingSettings.self, forKey: .sharingSettings)
        sharingSettings = sharingSettingsDecoded
        let jupyterServerAppSettingsDecoded = try containerValues.decodeIfPresent(JupyterServerAppSettings.self, forKey: .jupyterServerAppSettings)
        jupyterServerAppSettings = jupyterServerAppSettingsDecoded
        let kernelGatewayAppSettingsDecoded = try containerValues.decodeIfPresent(KernelGatewayAppSettings.self, forKey: .kernelGatewayAppSettings)
        kernelGatewayAppSettings = kernelGatewayAppSettingsDecoded
        let tensorBoardAppSettingsDecoded = try containerValues.decodeIfPresent(TensorBoardAppSettings.self, forKey: .tensorBoardAppSettings)
        tensorBoardAppSettings = tensorBoardAppSettingsDecoded
    }
}
