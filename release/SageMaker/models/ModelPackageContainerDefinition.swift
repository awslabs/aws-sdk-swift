// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the Docker container for the model package.</p>
public struct ModelPackageContainerDefinition: Equatable {
    /// <p>The DNS host name for the Docker container.</p>
    public let containerHostname: String?
    /// <p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p>
    ///         <p>If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker,
    ///             the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both
    ///                 <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
    ///             image path formats. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
    ///                 SageMaker</a>.</p>
    public let image: String?
    /// <p>An MD5 hash of the training algorithm that identifies the Docker image used for
    ///             training.</p>
    public let imageDigest: String?
    /// <p>The Amazon S3 path where the model artifacts, which result from model training, are stored.
    ///             This path must point to a single <code>gzip</code> compressed tar archive
    ///                 (<code>.tar.gz</code> suffix).</p>
    ///         <note>
    ///             <p>The model artifacts must be in an S3 bucket that is in the same region as the
    ///                 model package.</p>
    ///         </note>
    public let modelDataUrl: String?
    /// <p>The AWS Marketplace product ID of the model package.</p>
    public let productId: String?

    public init (
        containerHostname: String? = nil,
        image: String? = nil,
        imageDigest: String? = nil,
        modelDataUrl: String? = nil,
        productId: String? = nil
    )
    {
        self.containerHostname = containerHostname
        self.image = image
        self.imageDigest = imageDigest
        self.modelDataUrl = modelDataUrl
        self.productId = productId
    }
}
