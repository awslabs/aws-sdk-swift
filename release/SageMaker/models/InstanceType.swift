// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InstanceType {
    case mlC42xlarge
    case mlC44xlarge
    case mlC48xlarge
    case mlC4Xlarge
    case mlC5d18xlarge
    case mlC5d2xlarge
    case mlC5d4xlarge
    case mlC5d9xlarge
    case mlC5dXlarge
    case mlC518xlarge
    case mlC52xlarge
    case mlC54xlarge
    case mlC59xlarge
    case mlC5Xlarge
    case mlM410xlarge
    case mlM416xlarge
    case mlM42xlarge
    case mlM44xlarge
    case mlM4Xlarge
    case mlM512xlarge
    case mlM524xlarge
    case mlM52xlarge
    case mlM54xlarge
    case mlM5Xlarge
    case mlP216xlarge
    case mlP28xlarge
    case mlP2Xlarge
    case mlP316xlarge
    case mlP32xlarge
    case mlP38xlarge
    case mlT22xlarge
    case mlT2Large
    case mlT2Medium
    case mlT2Xlarge
    case mlT32xlarge
    case mlT3Large
    case mlT3Medium
    case mlT3Xlarge
    case sdkUnknown(String)
}

extension InstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceType] {
        return [
            .mlC42xlarge,
            .mlC44xlarge,
            .mlC48xlarge,
            .mlC4Xlarge,
            .mlC5d18xlarge,
            .mlC5d2xlarge,
            .mlC5d4xlarge,
            .mlC5d9xlarge,
            .mlC5dXlarge,
            .mlC518xlarge,
            .mlC52xlarge,
            .mlC54xlarge,
            .mlC59xlarge,
            .mlC5Xlarge,
            .mlM410xlarge,
            .mlM416xlarge,
            .mlM42xlarge,
            .mlM44xlarge,
            .mlM4Xlarge,
            .mlM512xlarge,
            .mlM524xlarge,
            .mlM52xlarge,
            .mlM54xlarge,
            .mlM5Xlarge,
            .mlP216xlarge,
            .mlP28xlarge,
            .mlP2Xlarge,
            .mlP316xlarge,
            .mlP32xlarge,
            .mlP38xlarge,
            .mlT22xlarge,
            .mlT2Large,
            .mlT2Medium,
            .mlT2Xlarge,
            .mlT32xlarge,
            .mlT3Large,
            .mlT3Medium,
            .mlT3Xlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mlC42xlarge: return "ml.c4.2xlarge"
        case .mlC44xlarge: return "ml.c4.4xlarge"
        case .mlC48xlarge: return "ml.c4.8xlarge"
        case .mlC4Xlarge: return "ml.c4.xlarge"
        case .mlC5d18xlarge: return "ml.c5d.18xlarge"
        case .mlC5d2xlarge: return "ml.c5d.2xlarge"
        case .mlC5d4xlarge: return "ml.c5d.4xlarge"
        case .mlC5d9xlarge: return "ml.c5d.9xlarge"
        case .mlC5dXlarge: return "ml.c5d.xlarge"
        case .mlC518xlarge: return "ml.c5.18xlarge"
        case .mlC52xlarge: return "ml.c5.2xlarge"
        case .mlC54xlarge: return "ml.c5.4xlarge"
        case .mlC59xlarge: return "ml.c5.9xlarge"
        case .mlC5Xlarge: return "ml.c5.xlarge"
        case .mlM410xlarge: return "ml.m4.10xlarge"
        case .mlM416xlarge: return "ml.m4.16xlarge"
        case .mlM42xlarge: return "ml.m4.2xlarge"
        case .mlM44xlarge: return "ml.m4.4xlarge"
        case .mlM4Xlarge: return "ml.m4.xlarge"
        case .mlM512xlarge: return "ml.m5.12xlarge"
        case .mlM524xlarge: return "ml.m5.24xlarge"
        case .mlM52xlarge: return "ml.m5.2xlarge"
        case .mlM54xlarge: return "ml.m5.4xlarge"
        case .mlM5Xlarge: return "ml.m5.xlarge"
        case .mlP216xlarge: return "ml.p2.16xlarge"
        case .mlP28xlarge: return "ml.p2.8xlarge"
        case .mlP2Xlarge: return "ml.p2.xlarge"
        case .mlP316xlarge: return "ml.p3.16xlarge"
        case .mlP32xlarge: return "ml.p3.2xlarge"
        case .mlP38xlarge: return "ml.p3.8xlarge"
        case .mlT22xlarge: return "ml.t2.2xlarge"
        case .mlT2Large: return "ml.t2.large"
        case .mlT2Medium: return "ml.t2.medium"
        case .mlT2Xlarge: return "ml.t2.xlarge"
        case .mlT32xlarge: return "ml.t3.2xlarge"
        case .mlT3Large: return "ml.t3.large"
        case .mlT3Medium: return "ml.t3.medium"
        case .mlT3Xlarge: return "ml.t3.xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceType(rawValue: rawValue) ?? InstanceType.sdkUnknown(rawValue)
    }
}
