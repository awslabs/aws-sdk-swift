// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAutoMLJobOutputBody: Equatable {
    public let autoMLJobName: String?
    public let autoMLJobArn: String?
    public let inputDataConfig: [AutoMLChannel]?
    public let outputDataConfig: AutoMLOutputDataConfig?
    public let roleArn: String?
    public let autoMLJobObjective: AutoMLJobObjective?
    public let problemType: ProblemType?
    public let autoMLJobConfig: AutoMLJobConfig?
    public let creationTime: Date?
    public let endTime: Date?
    public let lastModifiedTime: Date?
    public let failureReason: String?
    public let partialFailureReasons: [AutoMLPartialFailureReason]?
    public let bestCandidate: AutoMLCandidate?
    public let autoMLJobStatus: AutoMLJobStatus?
    public let autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus?
    public let generateCandidateDefinitionsOnly: Bool
    public let autoMLJobArtifacts: AutoMLJobArtifacts?
    public let resolvedAttributes: ResolvedAttributes?
    public let modelDeployConfig: ModelDeployConfig?
    public let modelDeployResult: ModelDeployResult?
}

extension DescribeAutoMLJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case autoMLJobArtifacts = "AutoMLJobArtifacts"
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case autoMLJobSecondaryStatus = "AutoMLJobSecondaryStatus"
        case autoMLJobStatus = "AutoMLJobStatus"
        case bestCandidate = "BestCandidate"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureReason = "FailureReason"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case lastModifiedTime = "LastModifiedTime"
        case modelDeployConfig = "ModelDeployConfig"
        case modelDeployResult = "ModelDeployResult"
        case outputDataConfig = "OutputDataConfig"
        case partialFailureReasons = "PartialFailureReasons"
        case problemType = "ProblemType"
        case resolvedAttributes = "ResolvedAttributes"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([AutoMLChannel].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[AutoMLChannel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [AutoMLChannel]()
            for structure0 in inputDataConfigContainer {
                inputDataConfigDecoded0?.append(structure0)
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(AutoMLOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let autoMLJobConfigDecoded = try containerValues.decodeIfPresent(AutoMLJobConfig.self, forKey: .autoMLJobConfig)
        autoMLJobConfig = autoMLJobConfigDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let partialFailureReasonsContainer = try containerValues.decodeIfPresent([AutoMLPartialFailureReason].self, forKey: .partialFailureReasons)
        var partialFailureReasonsDecoded0:[AutoMLPartialFailureReason]? = nil
        if let partialFailureReasonsContainer = partialFailureReasonsContainer {
            partialFailureReasonsDecoded0 = [AutoMLPartialFailureReason]()
            for structure0 in partialFailureReasonsContainer {
                partialFailureReasonsDecoded0?.append(structure0)
            }
        }
        partialFailureReasons = partialFailureReasonsDecoded0
        let bestCandidateDecoded = try containerValues.decodeIfPresent(AutoMLCandidate.self, forKey: .bestCandidate)
        bestCandidate = bestCandidateDecoded
        let autoMLJobStatusDecoded = try containerValues.decodeIfPresent(AutoMLJobStatus.self, forKey: .autoMLJobStatus)
        autoMLJobStatus = autoMLJobStatusDecoded
        let autoMLJobSecondaryStatusDecoded = try containerValues.decodeIfPresent(AutoMLJobSecondaryStatus.self, forKey: .autoMLJobSecondaryStatus)
        autoMLJobSecondaryStatus = autoMLJobSecondaryStatusDecoded
        let generateCandidateDefinitionsOnlyDecoded = try containerValues.decode(Bool.self, forKey: .generateCandidateDefinitionsOnly)
        generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnlyDecoded
        let autoMLJobArtifactsDecoded = try containerValues.decodeIfPresent(AutoMLJobArtifacts.self, forKey: .autoMLJobArtifacts)
        autoMLJobArtifacts = autoMLJobArtifactsDecoded
        let resolvedAttributesDecoded = try containerValues.decodeIfPresent(ResolvedAttributes.self, forKey: .resolvedAttributes)
        resolvedAttributes = resolvedAttributesDecoded
        let modelDeployConfigDecoded = try containerValues.decodeIfPresent(ModelDeployConfig.self, forKey: .modelDeployConfig)
        modelDeployConfig = modelDeployConfigDecoded
        let modelDeployResultDecoded = try containerValues.decodeIfPresent(ModelDeployResult.self, forKey: .modelDeployResult)
        modelDeployResult = modelDeployResultDecoded
    }
}
