// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTrialComponentsInputBody: Equatable {
    public let experimentName: String?
    public let trialName: String?
    public let sourceArn: String?
    public let createdAfter: Date?
    public let createdBefore: Date?
    public let sortBy: SortTrialComponentsBy?
    public let sortOrder: SortOrder?
    public let maxResults: Int?
    public let nextToken: String?
}

extension ListTrialComponentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case experimentName = "ExperimentName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case sourceArn = "SourceArn"
        case trialName = "TrialName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let experimentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .experimentName)
        experimentName = experimentNameDecoded
        let trialNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trialName)
        trialName = trialNameDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SortTrialComponentsBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
