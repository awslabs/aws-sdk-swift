// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProcessingInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appManaged = "AppManaged"
        case datasetDefinition = "DatasetDefinition"
        case inputName = "InputName"
        case s3Input = "S3Input"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if appManaged != false {
            try encodeContainer.encode(appManaged, forKey: .appManaged)
        }
        if let datasetDefinition = datasetDefinition {
            try encodeContainer.encode(datasetDefinition, forKey: .datasetDefinition)
        }
        if let inputName = inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let s3Input = s3Input {
            try encodeContainer.encode(s3Input, forKey: .s3Input)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let appManagedDecoded = try containerValues.decode(Bool.self, forKey: .appManaged)
        appManaged = appManagedDecoded
        let s3InputDecoded = try containerValues.decodeIfPresent(ProcessingS3Input.self, forKey: .s3Input)
        s3Input = s3InputDecoded
        let datasetDefinitionDecoded = try containerValues.decodeIfPresent(DatasetDefinition.self, forKey: .datasetDefinition)
        datasetDefinition = datasetDefinitionDecoded
    }
}
