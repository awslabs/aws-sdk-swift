// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelPackageContainerDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerHostname = "ContainerHostname"
        case image = "Image"
        case imageDigest = "ImageDigest"
        case modelDataUrl = "ModelDataUrl"
        case productId = "ProductId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerHostname = containerHostname {
            try encodeContainer.encode(containerHostname, forKey: .containerHostname)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageDigest = imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let modelDataUrl = modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
        if let productId = productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerHostnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerHostname)
        containerHostname = containerHostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let imageDigestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productId)
        productId = productIdDecoded
    }
}
