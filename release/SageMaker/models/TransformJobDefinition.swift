// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines the input needed to run a transform job using the inference specification
///             specified in the algorithm.</p>
public struct TransformJobDefinition: Equatable {
    /// <p>A string that determines the number of records included in a single mini-batch.</p>
    ///         <p>
    ///             <code>SingleRecord</code> means only one record is used per mini-batch.
    ///                 <code>MultiRecord</code> means a mini-batch is set to contain as many records that
    ///             can fit within the <code>MaxPayloadInMB</code> limit.</p>
    public let batchStrategy: BatchStrategy?
    /// <p>The environment variables to set in the Docker container. We support up to 16 key and
    ///             values entries in the map.</p>
    public let environment: [String:String]?
    /// <p>The maximum number of parallel requests that can be sent to each instance in a
    ///             transform job. The default value is 1.</p>
    public let maxConcurrentTransforms: Int?
    /// <p>The maximum payload size allowed, in MB. A payload is the data portion of a record
    ///             (without metadata).</p>
    public let maxPayloadInMB: Int?
    /// <p>A description of the input source and the way the transform job consumes it.</p>
    public let transformInput: TransformInput?
    /// <p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results
    ///             from the transform job.</p>
    public let transformOutput: TransformOutput?
    /// <p>Identifies the ML compute instances for the transform job.</p>
    public let transformResources: TransformResources?

    public init (
        batchStrategy: BatchStrategy? = nil,
        environment: [String:String]? = nil,
        maxConcurrentTransforms: Int? = nil,
        maxPayloadInMB: Int? = nil,
        transformInput: TransformInput? = nil,
        transformOutput: TransformOutput? = nil,
        transformResources: TransformResources? = nil
    )
    {
        self.batchStrategy = batchStrategy
        self.environment = environment
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.transformInput = transformInput
        self.transformOutput = transformOutput
        self.transformResources = transformResources
    }
}
