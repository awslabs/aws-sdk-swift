// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDeviceOutputBody: Equatable {
    public let deviceArn: String?
    public let deviceName: String?
    public let description: String?
    public let deviceFleetName: String?
    public let iotThingName: String?
    public let registrationTime: Date?
    public let latestHeartbeat: Date?
    public let models: [EdgeModel]?
    public let maxModels: Int
    public let nextToken: String?
}

extension DescribeDeviceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
        case latestHeartbeat = "LatestHeartbeat"
        case maxModels = "MaxModels"
        case models = "Models"
        case nextToken = "NextToken"
        case registrationTime = "RegistrationTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let latestHeartbeatDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestHeartbeat)
        latestHeartbeat = latestHeartbeatDecoded
        let modelsContainer = try containerValues.decodeIfPresent([EdgeModel].self, forKey: .models)
        var modelsDecoded0:[EdgeModel]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [EdgeModel]()
            for structure0 in modelsContainer {
                modelsDecoded0?.append(structure0)
            }
        }
        models = modelsDecoded0
        let maxModelsDecoded = try containerValues.decode(Int.self, forKey: .maxModels)
        maxModels = maxModelsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
