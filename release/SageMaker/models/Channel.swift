// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A channel is a named input source that training algorithms can consume. </p>
public struct Channel: Equatable {
    /// <p>The name of the channel. </p>
    public let channelName: String?
    /// <p>If training data is compressed, the compression type. The default value is
    ///                 <code>None</code>. <code>CompressionType</code> is used only in Pipe input mode. In
    ///             File mode, leave this field unset or set it to None.</p>
    public let compressionType: CompressionType?
    /// <p>The MIME type of the data.</p>
    public let contentType: String?
    /// <p>The location of the channel data.</p>
    public let dataSource: DataSource?
    /// <p>(Optional) The input mode to use for the data channel in a training job. If you don't
    ///             set a value for <code>InputMode</code>, Amazon SageMaker uses the value set for
    ///                 <code>TrainingInputMode</code>. Use this parameter to override the
    ///                 <code>TrainingInputMode</code> setting in a <a>AlgorithmSpecification</a>
    ///             request when you have a channel that needs a different input mode from the training
    ///             job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML
    ///             storage volume, and mount the directory to a Docker volume, use <code>File</code> input
    ///             mode. To stream data directly from Amazon S3 to the container, choose <code>Pipe</code> input
    ///             mode.</p>
    ///         <p>To use a model for incremental training, choose <code>File</code> input model.</p>
    public let inputMode: TrainingInputMode?
    /// <p></p>
    ///         <p>Specify RecordIO as the value when input data is in raw format but the training
    ///             algorithm requires the RecordIO format. In this case, Amazon SageMaker wraps each individual S3
    ///             object in a RecordIO record. If the input data is already in RecordIO format, you don't
    ///             need to set this attribute. For more information, see <a href="https://mxnet.apache.org/api/architecture/note_data_loading#data-format">Create
    ///                 a Dataset Using RecordIO</a>. </p>
    ///         <p>In File mode, leave this field unset or set it to None.</p>
    public let recordWrapperType: RecordWrapper?
    /// <p>A configuration for a shuffle option for input data in a channel. If you use
    ///                 <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results of the
    ///             S3 key prefix matches. If you use <code>ManifestFile</code>, the order of the S3 object
    ///             references in the <code>ManifestFile</code> is shuffled. If you use
    ///                 <code>AugmentedManifestFile</code>, the order of the JSON lines in the
    ///                 <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined
    ///             using the <code>Seed</code> value.</p>
    ///         <p>For Pipe input mode, shuffling is done at the start of every epoch. With large
    ///             datasets this ensures that the order of the training data is different for each epoch,
    ///             it helps reduce bias and possible overfitting. In a multi-node training job when
    ///             ShuffleConfig is combined with <code>S3DataDistributionType</code> of
    ///                 <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content
    ///             sent to a particular node on the first epoch might be sent to a different node on the
    ///             second epoch.</p>
    public let shuffleConfig: ShuffleConfig?

    public init (
        channelName: String? = nil,
        compressionType: CompressionType? = nil,
        contentType: String? = nil,
        dataSource: DataSource? = nil,
        inputMode: TrainingInputMode? = nil,
        recordWrapperType: RecordWrapper? = nil,
        shuffleConfig: ShuffleConfig? = nil
    )
    {
        self.channelName = channelName
        self.compressionType = compressionType
        self.contentType = contentType
        self.dataSource = dataSource
        self.inputMode = inputMode
        self.recordWrapperType = recordWrapperType
        self.shuffleConfig = shuffleConfig
    }
}
