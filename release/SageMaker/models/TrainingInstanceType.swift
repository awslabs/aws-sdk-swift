// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TrainingInstanceType {
    case mlC42xlarge
    case mlC44xlarge
    case mlC48xlarge
    case mlC4Xlarge
    case mlC5n18xlarge
    case mlC5n2xlarge
    case mlC5n4xlarge
    case mlC5n9xlarge
    case mlC5nXlarge
    case mlC518xlarge
    case mlC52xlarge
    case mlC54xlarge
    case mlC59xlarge
    case mlC5Xlarge
    case mlG4dn12xlarge
    case mlG4dn16xlarge
    case mlG4dn2xlarge
    case mlG4dn4xlarge
    case mlG4dn8xlarge
    case mlG4dnXlarge
    case mlM410xlarge
    case mlM416xlarge
    case mlM42xlarge
    case mlM44xlarge
    case mlM4Xlarge
    case mlM512xlarge
    case mlM524xlarge
    case mlM52xlarge
    case mlM54xlarge
    case mlM5Large
    case mlM5Xlarge
    case mlP216xlarge
    case mlP28xlarge
    case mlP2Xlarge
    case mlP3dn24xlarge
    case mlP316xlarge
    case mlP32xlarge
    case mlP38xlarge
    case mlP4d24xlarge
    case sdkUnknown(String)
}

extension TrainingInstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TrainingInstanceType] {
        return [
            .mlC42xlarge,
            .mlC44xlarge,
            .mlC48xlarge,
            .mlC4Xlarge,
            .mlC5n18xlarge,
            .mlC5n2xlarge,
            .mlC5n4xlarge,
            .mlC5n9xlarge,
            .mlC5nXlarge,
            .mlC518xlarge,
            .mlC52xlarge,
            .mlC54xlarge,
            .mlC59xlarge,
            .mlC5Xlarge,
            .mlG4dn12xlarge,
            .mlG4dn16xlarge,
            .mlG4dn2xlarge,
            .mlG4dn4xlarge,
            .mlG4dn8xlarge,
            .mlG4dnXlarge,
            .mlM410xlarge,
            .mlM416xlarge,
            .mlM42xlarge,
            .mlM44xlarge,
            .mlM4Xlarge,
            .mlM512xlarge,
            .mlM524xlarge,
            .mlM52xlarge,
            .mlM54xlarge,
            .mlM5Large,
            .mlM5Xlarge,
            .mlP216xlarge,
            .mlP28xlarge,
            .mlP2Xlarge,
            .mlP3dn24xlarge,
            .mlP316xlarge,
            .mlP32xlarge,
            .mlP38xlarge,
            .mlP4d24xlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .mlC42xlarge: return "ml.c4.2xlarge"
        case .mlC44xlarge: return "ml.c4.4xlarge"
        case .mlC48xlarge: return "ml.c4.8xlarge"
        case .mlC4Xlarge: return "ml.c4.xlarge"
        case .mlC5n18xlarge: return "ml.c5n.18xlarge"
        case .mlC5n2xlarge: return "ml.c5n.2xlarge"
        case .mlC5n4xlarge: return "ml.c5n.4xlarge"
        case .mlC5n9xlarge: return "ml.c5n.9xlarge"
        case .mlC5nXlarge: return "ml.c5n.xlarge"
        case .mlC518xlarge: return "ml.c5.18xlarge"
        case .mlC52xlarge: return "ml.c5.2xlarge"
        case .mlC54xlarge: return "ml.c5.4xlarge"
        case .mlC59xlarge: return "ml.c5.9xlarge"
        case .mlC5Xlarge: return "ml.c5.xlarge"
        case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
        case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
        case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
        case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
        case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
        case .mlG4dnXlarge: return "ml.g4dn.xlarge"
        case .mlM410xlarge: return "ml.m4.10xlarge"
        case .mlM416xlarge: return "ml.m4.16xlarge"
        case .mlM42xlarge: return "ml.m4.2xlarge"
        case .mlM44xlarge: return "ml.m4.4xlarge"
        case .mlM4Xlarge: return "ml.m4.xlarge"
        case .mlM512xlarge: return "ml.m5.12xlarge"
        case .mlM524xlarge: return "ml.m5.24xlarge"
        case .mlM52xlarge: return "ml.m5.2xlarge"
        case .mlM54xlarge: return "ml.m5.4xlarge"
        case .mlM5Large: return "ml.m5.large"
        case .mlM5Xlarge: return "ml.m5.xlarge"
        case .mlP216xlarge: return "ml.p2.16xlarge"
        case .mlP28xlarge: return "ml.p2.8xlarge"
        case .mlP2Xlarge: return "ml.p2.xlarge"
        case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
        case .mlP316xlarge: return "ml.p3.16xlarge"
        case .mlP32xlarge: return "ml.p3.2xlarge"
        case .mlP38xlarge: return "ml.p3.8xlarge"
        case .mlP4d24xlarge: return "ml.p4d.24xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TrainingInstanceType(rawValue: rawValue) ?? TrainingInstanceType.sdkUnknown(rawValue)
    }
}
