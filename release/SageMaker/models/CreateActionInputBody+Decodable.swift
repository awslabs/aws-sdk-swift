// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateActionInputBody: Equatable {
    public let actionName: String?
    public let source: ActionSource?
    public let actionType: String?
    public let description: String?
    public let status: ActionStatus?
    public let properties: [String:String]?
    public let metadataProperties: MetadataProperties?
    public let tags: [Tag]?
}

extension CreateActionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actionName = "ActionName"
        case actionType = "ActionType"
        case description = "Description"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case status = "Status"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(ActionSource.self, forKey: .source)
        source = sourceDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ActionStatus.self, forKey: .status)
        status = statusDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .properties)
        var propertiesDecoded0: [String:String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [String:String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                propertiesDecoded0?[key0] = stringparametervalue0
            }
        }
        properties = propertiesDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
