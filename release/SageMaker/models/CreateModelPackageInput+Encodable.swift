// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateModelPackageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certifyForMarketplace = "CertifyForMarketplace"
        case clientToken = "ClientToken"
        case inferenceSpecification = "InferenceSpecification"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelMetrics = modelMetrics {
            try encodeContainer.encode(modelMetrics, forKey: .modelMetrics)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let sourceAlgorithmSpecification = sourceAlgorithmSpecification {
            try encodeContainer.encode(sourceAlgorithmSpecification, forKey: .sourceAlgorithmSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}
