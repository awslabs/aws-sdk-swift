// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HumanLoopConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case humanTaskUiArn = "HumanTaskUiArn"
        case publicWorkforceTaskPrice = "PublicWorkforceTaskPrice"
        case taskAvailabilityLifetimeInSeconds = "TaskAvailabilityLifetimeInSeconds"
        case taskCount = "TaskCount"
        case taskDescription = "TaskDescription"
        case taskKeywords = "TaskKeywords"
        case taskTimeLimitInSeconds = "TaskTimeLimitInSeconds"
        case taskTitle = "TaskTitle"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanTaskUiArn = humanTaskUiArn {
            try encodeContainer.encode(humanTaskUiArn, forKey: .humanTaskUiArn)
        }
        if let publicWorkforceTaskPrice = publicWorkforceTaskPrice {
            try encodeContainer.encode(publicWorkforceTaskPrice, forKey: .publicWorkforceTaskPrice)
        }
        if let taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds {
            try encodeContainer.encode(taskAvailabilityLifetimeInSeconds, forKey: .taskAvailabilityLifetimeInSeconds)
        }
        if let taskCount = taskCount {
            try encodeContainer.encode(taskCount, forKey: .taskCount)
        }
        if let taskDescription = taskDescription {
            try encodeContainer.encode(taskDescription, forKey: .taskDescription)
        }
        if let taskKeywords = taskKeywords {
            var taskKeywordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskKeywords)
            for flowdefinitiontaskkeywords0 in taskKeywords {
                try taskKeywordsContainer.encode(flowdefinitiontaskkeywords0)
            }
        }
        if let taskTimeLimitInSeconds = taskTimeLimitInSeconds {
            try encodeContainer.encode(taskTimeLimitInSeconds, forKey: .taskTimeLimitInSeconds)
        }
        if let taskTitle = taskTitle {
            try encodeContainer.encode(taskTitle, forKey: .taskTitle)
        }
        if let workteamArn = workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let humanTaskUiArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .humanTaskUiArn)
        humanTaskUiArn = humanTaskUiArnDecoded
        let taskTitleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskTitle)
        taskTitle = taskTitleDecoded
        let taskDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskDescription)
        taskDescription = taskDescriptionDecoded
        let taskCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .taskCount)
        taskCount = taskCountDecoded
        let taskAvailabilityLifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .taskAvailabilityLifetimeInSeconds)
        taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSecondsDecoded
        let taskTimeLimitInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .taskTimeLimitInSeconds)
        taskTimeLimitInSeconds = taskTimeLimitInSecondsDecoded
        let taskKeywordsContainer = try containerValues.decodeIfPresent([String].self, forKey: .taskKeywords)
        var taskKeywordsDecoded0:[String]? = nil
        if let taskKeywordsContainer = taskKeywordsContainer {
            taskKeywordsDecoded0 = [String]()
            for string0 in taskKeywordsContainer {
                taskKeywordsDecoded0?.append(string0)
            }
        }
        taskKeywords = taskKeywordsDecoded0
        let publicWorkforceTaskPriceDecoded = try containerValues.decodeIfPresent(PublicWorkforceTaskPrice.self, forKey: .publicWorkforceTaskPrice)
        publicWorkforceTaskPrice = publicWorkforceTaskPriceDecoded
    }
}
