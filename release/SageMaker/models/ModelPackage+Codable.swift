// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModelPackage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalDescription = "ApprovalDescription"
        case certifyForMarketplace = "CertifyForMarketplace"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageStatusDetails = "ModelPackageStatusDetails"
        case modelPackageVersion = "ModelPackageVersion"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalDescription = approvalDescription {
            try encodeContainer.encode(approvalDescription, forKey: .approvalDescription)
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let inferenceSpecification = inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let metadataProperties = metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let modelApprovalStatus = modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelMetrics = modelMetrics {
            try encodeContainer.encode(modelMetrics, forKey: .modelMetrics)
        }
        if let modelPackageArn = modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
        if let modelPackageDescription = modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let modelPackageStatus = modelPackageStatus {
            try encodeContainer.encode(modelPackageStatus.rawValue, forKey: .modelPackageStatus)
        }
        if let modelPackageStatusDetails = modelPackageStatusDetails {
            try encodeContainer.encode(modelPackageStatusDetails, forKey: .modelPackageStatusDetails)
        }
        if let modelPackageVersion = modelPackageVersion {
            try encodeContainer.encode(modelPackageVersion, forKey: .modelPackageVersion)
        }
        if let sourceAlgorithmSpecification = sourceAlgorithmSpecification {
            try encodeContainer.encode(sourceAlgorithmSpecification, forKey: .sourceAlgorithmSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationSpecification = validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelPackageStatusDetailsDecoded = try containerValues.decodeIfPresent(ModelPackageStatusDetails.self, forKey: .modelPackageStatusDetails)
        modelPackageStatusDetails = modelPackageStatusDetailsDecoded
        let certifyForMarketplaceDecoded = try containerValues.decode(Bool.self, forKey: .certifyForMarketplace)
        certifyForMarketplace = certifyForMarketplaceDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
