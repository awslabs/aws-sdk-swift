// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeNotebookInstanceOutput: Equatable {
    /// <p>A list of the Elastic Inference (EI) instance types associated with this notebook
    ///             instance. Currently only one EI instance type can be associated with a notebook
    ///             instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon
    ///                 SageMaker</a>.</p>
    public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
    /// <p>An array of up to three Git repositories associated with the notebook instance. These
    ///             can be either the names of Git repositories stored as resources in your account, or the
    ///             URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. These repositories are cloned at the same level as the default
    ///             repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    ///                 Repositories with Amazon SageMaker Notebook Instances</a>.</p>
    public let additionalCodeRepositories: [String]?
    /// <p>A timestamp. Use this parameter to return the time when the notebook instance was
    ///             created</p>
    public let creationTime: Date?
    /// <p>The Git repository associated with the notebook instance as its default code
    ///             repository. This can be either the name of a Git repository stored as a resource in your
    ///             account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</a> or in any
    ///             other Git repository. When you open a notebook instance, it opens in the directory that
    ///             contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with Amazon SageMaker
    ///                 Notebook Instances</a>.</p>
    public let defaultCodeRepository: String?
    /// <p>Describes whether Amazon SageMaker provides internet access to the notebook instance. If this
    ///             value is set to <i>Disabled</i>, the notebook instance does not have
    ///             internet access, and cannot connect to Amazon SageMaker training and endpoint services.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>.</p>
    public let directInternetAccess: DirectInternetAccess?
    /// <p>If status is <code>Failed</code>, the reason it failed.</p>
    public let failureReason: String?
    /// <p>The type of ML compute instance running on the notebook instance.</p>
    public let instanceType: InstanceType?
    /// <p>The AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage
    ///             volume attached to the instance. </p>
    public let kmsKeyId: String?
    /// <p>A timestamp. Use this parameter to retrieve the time when the notebook instance was
    ///             last modified. </p>
    public let lastModifiedTime: Date?
    /// <p>The network interface IDs that Amazon SageMaker created at the time of creating the instance.
    ///         </p>
    public let networkInterfaceId: String?
    /// <p>The Amazon Resource Name (ARN) of the notebook instance.</p>
    public let notebookInstanceArn: String?
    /// <p>Returns the name of a notebook instance lifecycle configuration.</p>
    ///         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
    ///                 2.1: (Optional) Customize a Notebook Instance</a>
    ///         </p>
    public let notebookInstanceLifecycleConfigName: String?
    /// <p>The name of the Amazon SageMaker notebook instance. </p>
    public let notebookInstanceName: String?
    /// <p>The status of the notebook instance.</p>
    public let notebookInstanceStatus: NotebookInstanceStatus?
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with the instance.
    ///         </p>
    public let roleArn: String?
    /// <p>Whether root access is enabled or disabled for users of the notebook instance.</p>
    ///         <note>
    ///             <p>Lifecycle configurations need root access to be able to set up a notebook
    ///                 instance. Because of this, lifecycle configurations associated with a notebook
    ///                 instance always run with root access even if you disable root access for
    ///                 users.</p>
    ///         </note>
    public let rootAccess: RootAccess?
    /// <p>The IDs of the VPC security groups.</p>
    public let securityGroups: [String]?
    /// <p>The ID of the VPC subnet.</p>
    public let subnetId: String?
    /// <p>The URL that you use to connect to the Jupyter notebook that is running in your
    ///             notebook instance. </p>
    public let url: String?
    /// <p>The size, in GB, of the ML storage volume attached to the notebook instance.</p>
    public let volumeSizeInGB: Int?

    public init (
        acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [String]? = nil,
        creationTime: Date? = nil,
        defaultCodeRepository: String? = nil,
        directInternetAccess: DirectInternetAccess? = nil,
        failureReason: String? = nil,
        instanceType: InstanceType? = nil,
        kmsKeyId: String? = nil,
        lastModifiedTime: Date? = nil,
        networkInterfaceId: String? = nil,
        notebookInstanceArn: String? = nil,
        notebookInstanceLifecycleConfigName: String? = nil,
        notebookInstanceName: String? = nil,
        notebookInstanceStatus: NotebookInstanceStatus? = nil,
        roleArn: String? = nil,
        rootAccess: RootAccess? = nil,
        securityGroups: [String]? = nil,
        subnetId: String? = nil,
        url: String? = nil,
        volumeSizeInGB: Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.creationTime = creationTime
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.failureReason = failureReason
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.networkInterfaceId = networkInterfaceId
        self.notebookInstanceArn = notebookInstanceArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.notebookInstanceStatus = notebookInstanceStatus
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroups = securityGroups
        self.subnetId = subnetId
        self.url = url
        self.volumeSizeInGB = volumeSizeInGB
    }
}
