// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Workforce: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cognitoConfig = "CognitoConfig"
        case createDate = "CreateDate"
        case lastUpdatedDate = "LastUpdatedDate"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case subDomain = "SubDomain"
        case workforceArn = "WorkforceArn"
        case workforceName = "WorkforceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoConfig = cognitoConfig {
            try encodeContainer.encode(cognitoConfig, forKey: .cognitoConfig)
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let oidcConfig = oidcConfig {
            try encodeContainer.encode(oidcConfig, forKey: .oidcConfig)
        }
        if let sourceIpConfig = sourceIpConfig {
            try encodeContainer.encode(sourceIpConfig, forKey: .sourceIpConfig)
        }
        if let subDomain = subDomain {
            try encodeContainer.encode(subDomain, forKey: .subDomain)
        }
        if let workforceArn = workforceArn {
            try encodeContainer.encode(workforceArn, forKey: .workforceArn)
        }
        if let workforceName = workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let workforceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workforceArn)
        workforceArn = workforceArnDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let subDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subDomain)
        subDomain = subDomainDecoded
        let cognitoConfigDecoded = try containerValues.decodeIfPresent(CognitoConfig.self, forKey: .cognitoConfig)
        cognitoConfig = cognitoConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(OidcConfigForResponse.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createDate)
        createDate = createDateDecoded
    }
}
