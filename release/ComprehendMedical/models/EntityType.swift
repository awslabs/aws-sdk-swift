// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EntityType {
    case anatomy
    case medicalCondition
    case medication
    case protectedHealthInformation
    case testTreatmentProcedure
    case timeExpression
    case sdkUnknown(String)
}

extension EntityType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EntityType] {
        return [
            .anatomy,
            .medicalCondition,
            .medication,
            .protectedHealthInformation,
            .testTreatmentProcedure,
            .timeExpression,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .anatomy: return "ANATOMY"
        case .medicalCondition: return "MEDICAL_CONDITION"
        case .medication: return "MEDICATION"
        case .protectedHealthInformation: return "PROTECTED_HEALTH_INFORMATION"
        case .testTreatmentProcedure: return "TEST_TREATMENT_PROCEDURE"
        case .timeExpression: return "TIME_EXPRESSION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
    }
}
