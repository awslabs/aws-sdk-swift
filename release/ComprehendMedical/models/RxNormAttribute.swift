// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The extracted attributes that relate to this entity. The attributes recognized by
///       InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>,
///         <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>.</p>
public struct RxNormAttribute: Equatable {
    /// <p>The 0-based character offset in the input text that shows where the attribute begins. The
    ///       offset returns the UTF-8 code point in the string.</p>
    public let beginOffset: Int?
    /// <p>The 0-based character offset in the input text that shows where the attribute ends. The
    ///       offset returns the UTF-8 code point in the string.</p>
    public let endOffset: Int?
    /// <p>The numeric identifier for this attribute. This is a monotonically increasing id unique
    ///       within this response rather than a global unique identifier.</p>
    public let id: Int?
    /// <p>The level of confidence that Amazon Comprehend Medical has that the attribute is
    ///       accurately linked to an entity.</p>
    public let relationshipScore: Float?
    /// <p>The level of confidence that Comprehend Medical has that the segment of text is correctly
    ///       recognized as an attribute.</p>
    public let score: Float?
    /// <p>The segment of input text which corresponds to the detected attribute.</p>
    public let text: String?
    /// <p>Contextual information for the attribute. InferRxNorm recognizes the trait
    ///         <code>NEGATION</code> for attributes, i.e. that the patient is not taking a specific dose or
    ///       form of a medication.</p>
    public let traits: [RxNormTrait]?
    /// <p>The type of attribute. The types of attributes recognized by InferRxNorm are
    ///         <code>BRAND_NAME</code> and <code>GENERIC_NAME</code>.</p>
    public let type: RxNormAttributeType?

    public init (
        beginOffset: Int? = nil,
        endOffset: Int? = nil,
        id: Int? = nil,
        relationshipScore: Float? = nil,
        score: Float? = nil,
        text: String? = nil,
        traits: [RxNormTrait]? = nil,
        type: RxNormAttributeType? = nil
    )
    {
        self.beginOffset = beginOffset
        self.endOffset = endOffset
        self.id = id
        self.relationshipScore = relationshipScore
        self.score = score
        self.text = text
        self.traits = traits
        self.type = type
    }
}
