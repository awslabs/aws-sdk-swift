// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendMedicalAsyncJobFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = submitTimeAfter {
            try encodeContainer.encode(submitTimeAfter.timeIntervalSince1970, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = submitTimeBefore {
            try encodeContainer.encode(submitTimeBefore.timeIntervalSince1970, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}
