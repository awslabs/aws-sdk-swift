// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p> An extracted segment of the text that is an attribute of an entity, or otherwise related
///       to an entity, such as the dosage of a medication taken. It contains information about the
///       attribute such as id, begin and end offset within the input text, and the segment of the input
///       text. </p>
public struct Attribute: Equatable {
    /// <p> The 0-based character offset in the input text that shows where the attribute begins. The
    ///       offset returns the UTF-8 code point in the string. </p>
    public let beginOffset: Int?
    /// <p> The category of attribute. </p>
    public let category: EntityType?
    /// <p> The 0-based character offset in the input text that shows where the attribute ends. The
    ///       offset returns the UTF-8 code point in the string.</p>
    public let endOffset: Int?
    /// <p> The numeric identifier for this attribute. This is a monotonically increasing id unique
    ///       within this response rather than a global unique identifier. </p>
    public let id: Int?
    /// <p> The level of confidence that Amazon Comprehend Medical has that this attribute is correctly related to this
    ///       entity. </p>
    public let relationshipScore: Float?
    /// <p>The type of relationship between the entity and attribute. Type for the relationship is
    ///         <code>OVERLAP</code>, indicating that the entity occurred at the same time as the
    ///         <code>Date_Expression</code>. </p>
    public let relationshipType: RelationshipType?
    /// <p> The level of confidence that Amazon Comprehend Medical has that the segment of text is correctly recognized
    ///       as an attribute. </p>
    public let score: Float?
    /// <p> The segment of input text extracted as this attribute.</p>
    public let text: String?
    /// <p> Contextual information for this attribute. </p>
    public let traits: [Trait]?
    /// <p> The type of attribute. </p>
    public let type: EntitySubType?

    public init (
        beginOffset: Int? = nil,
        category: EntityType? = nil,
        endOffset: Int? = nil,
        id: Int? = nil,
        relationshipScore: Float? = nil,
        relationshipType: RelationshipType? = nil,
        score: Float? = nil,
        text: String? = nil,
        traits: [Trait]? = nil,
        type: EntitySubType? = nil
    )
    {
        self.beginOffset = beginOffset
        self.category = category
        self.endOffset = endOffset
        self.id = id
        self.relationshipScore = relationshipScore
        self.relationshipType = relationshipType
        self.score = score
        self.text = text
        self.traits = traits
        self.type = type
    }
}
