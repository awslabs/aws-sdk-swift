// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct InferRxNormOutputBody: Equatable {
    public let entities: [RxNormEntity]?
    public let paginationToken: String?
    public let modelVersion: String?
}

extension InferRxNormOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case entities = "Entities"
        case modelVersion = "ModelVersion"
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesContainer = try containerValues.decodeIfPresent([RxNormEntity].self, forKey: .entities)
        var entitiesDecoded0:[RxNormEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [RxNormEntity]()
            for structure0 in entitiesContainer {
                entitiesDecoded0?.append(structure0)
            }
        }
        entities = entitiesDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
    }
}
