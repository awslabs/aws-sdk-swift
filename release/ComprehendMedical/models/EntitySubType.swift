// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EntitySubType {
    case acuity
    case address
    case age
    case brandName
    case contactPoint
    case date
    case direction
    case dosage
    case duration
    case email
    case form
    case frequency
    case genericName
    case identifier
    case name
    case procedureName
    case profession
    case quality
    case quantity
    case rate
    case routeOrMode
    case strength
    case systemOrganSite
    case testName
    case testUnits
    case testValue
    case timeExpression
    case timeToDxName
    case timeToMedicationName
    case timeToProcedureName
    case timeToTestName
    case timeToTreatmentName
    case treatmentName
    case url
    case sdkUnknown(String)
}

extension EntitySubType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EntitySubType] {
        return [
            .acuity,
            .address,
            .age,
            .brandName,
            .contactPoint,
            .date,
            .direction,
            .dosage,
            .duration,
            .email,
            .form,
            .frequency,
            .genericName,
            .identifier,
            .name,
            .procedureName,
            .profession,
            .quality,
            .quantity,
            .rate,
            .routeOrMode,
            .strength,
            .systemOrganSite,
            .testName,
            .testUnits,
            .testValue,
            .timeExpression,
            .timeToDxName,
            .timeToMedicationName,
            .timeToProcedureName,
            .timeToTestName,
            .timeToTreatmentName,
            .treatmentName,
            .url,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .acuity: return "ACUITY"
        case .address: return "ADDRESS"
        case .age: return "AGE"
        case .brandName: return "BRAND_NAME"
        case .contactPoint: return "CONTACT_POINT"
        case .date: return "DATE"
        case .direction: return "DIRECTION"
        case .dosage: return "DOSAGE"
        case .duration: return "DURATION"
        case .email: return "EMAIL"
        case .form: return "FORM"
        case .frequency: return "FREQUENCY"
        case .genericName: return "GENERIC_NAME"
        case .identifier: return "IDENTIFIER"
        case .name: return "NAME"
        case .procedureName: return "PROCEDURE_NAME"
        case .profession: return "PROFESSION"
        case .quality: return "QUALITY"
        case .quantity: return "QUANTITY"
        case .rate: return "RATE"
        case .routeOrMode: return "ROUTE_OR_MODE"
        case .strength: return "STRENGTH"
        case .systemOrganSite: return "SYSTEM_ORGAN_SITE"
        case .testName: return "TEST_NAME"
        case .testUnits: return "TEST_UNITS"
        case .testValue: return "TEST_VALUE"
        case .timeExpression: return "TIME_EXPRESSION"
        case .timeToDxName: return "TIME_TO_DX_NAME"
        case .timeToMedicationName: return "TIME_TO_MEDICATION_NAME"
        case .timeToProcedureName: return "TIME_TO_PROCEDURE_NAME"
        case .timeToTestName: return "TIME_TO_TEST_NAME"
        case .timeToTreatmentName: return "TIME_TO_TREATMENT_NAME"
        case .treatmentName: return "TREATMENT_NAME"
        case .url: return "URL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EntitySubType(rawValue: rawValue) ?? EntitySubType.sdkUnknown(rawValue)
    }
}
