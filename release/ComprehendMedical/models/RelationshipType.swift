// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum RelationshipType {
    case acuity
    case administeredVia
    case direction
    case dosage
    case duration
    case every
    case `for`
    case form
    case frequency
    case negative
    case overlap
    case rate
    case routeOrMode
    case strength
    case systemOrganSite
    case testUnits
    case testValue
    case withDosage
    case sdkUnknown(String)
}

extension RelationshipType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RelationshipType] {
        return [
            .acuity,
            .administeredVia,
            .direction,
            .dosage,
            .duration,
            .every,
            .for,
            .form,
            .frequency,
            .negative,
            .overlap,
            .rate,
            .routeOrMode,
            .strength,
            .systemOrganSite,
            .testUnits,
            .testValue,
            .withDosage,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .acuity: return "ACUITY"
        case .administeredVia: return "ADMINISTERED_VIA"
        case .direction: return "DIRECTION"
        case .dosage: return "DOSAGE"
        case .duration: return "DURATION"
        case .every: return "EVERY"
        case .for: return "FOR"
        case .form: return "FORM"
        case .frequency: return "FREQUENCY"
        case .negative: return "NEGATIVE"
        case .overlap: return "OVERLAP"
        case .rate: return "RATE"
        case .routeOrMode: return "ROUTE_OR_MODE"
        case .strength: return "STRENGTH"
        case .systemOrganSite: return "SYSTEM_ORGAN_SITE"
        case .testUnits: return "TEST_UNITS"
        case .testValue: return "TEST_VALUE"
        case .withDosage: return "WITH_DOSAGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RelationshipType(rawValue: rawValue) ?? RelationshipType.sdkUnknown(rawValue)
    }
}
