// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The detected attributes that relate to an entity. This includes an extracted segment of
///       the text that is an attribute of an entity, or otherwise related to an entity. InferICD10CM
///       detects the following attributes: <code>Direction</code>, <code>System, Organ or Site</code>,
///       and <code>Acuity</code>.</p>
public struct ICD10CMAttribute: Equatable {
    /// <p>The 0-based character offset in the input text that shows where the attribute begins. The
    ///       offset returns the UTF-8 code point in the string.</p>
    public let beginOffset: Int?
    /// <p>The category of attribute. Can be either of <code>DX_NAME</code> or <code>TIME_EXPRESSION</code>.</p>
    public let category: ICD10CMEntityType?
    /// <p>The 0-based character offset in the input text that shows where the attribute ends. The
    ///       offset returns the UTF-8 code point in the string.</p>
    public let endOffset: Int?
    /// <p>The numeric identifier for this attribute. This is a monotonically increasing id unique
    ///       within this response rather than a global unique identifier.</p>
    public let id: Int?
    /// <p>The level of confidence that Amazon Comprehend Medical has that this attribute is
    ///       correctly related to this entity.</p>
    public let relationshipScore: Float?
    /// <p>The type of relationship between the entity and attribute. Type for the relationship can
    ///         be either of <code>OVERLAP</code> or <code>SYSTEM_ORGAN_SITE</code>.</p>
    public let relationshipType: ICD10CMRelationshipType?
    /// <p>The level of confidence that Amazon Comprehend Medical has that the segment of text is
    ///       correctly recognized as an attribute.</p>
    public let score: Float?
    /// <p>The segment of input text which contains the detected attribute.</p>
    public let text: String?
    /// <p>The contextual information for the attribute. The traits recognized by InferICD10CM are
    ///         <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and
    ///       <code>NEGATION</code>.</p>
    public let traits: [ICD10CMTrait]?
    /// <p>The type of attribute. InferICD10CM detects entities of the type <code>DX_NAME</code>.
    ///     </p>
    public let type: ICD10CMAttributeType?

    public init (
        beginOffset: Int? = nil,
        category: ICD10CMEntityType? = nil,
        endOffset: Int? = nil,
        id: Int? = nil,
        relationshipScore: Float? = nil,
        relationshipType: ICD10CMRelationshipType? = nil,
        score: Float? = nil,
        text: String? = nil,
        traits: [ICD10CMTrait]? = nil,
        type: ICD10CMAttributeType? = nil
    )
    {
        self.beginOffset = beginOffset
        self.category = category
        self.endOffset = endOffset
        self.id = id
        self.relationshipScore = relationshipScore
        self.relationshipType = relationshipType
        self.score = score
        self.text = text
        self.traits = traits
        self.type = type
    }
}
