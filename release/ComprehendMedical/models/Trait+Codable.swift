// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Trait: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case score = "Score"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let score = score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(AttributeName.self, forKey: .name)
        name = nameDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .score)
        score = scoreDecoded
    }
}
