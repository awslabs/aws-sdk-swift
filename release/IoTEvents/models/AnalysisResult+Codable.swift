// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnalysisResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case level
        case locations
        case message
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let level = level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for analysisresultlocations0 in locations {
                try locationsContainer.encode(analysisresultlocations0)
            }
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let levelDecoded = try containerValues.decodeIfPresent(AnalysisResultLevel.self, forKey: .level)
        level = levelDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let locationsContainer = try containerValues.decodeIfPresent([AnalysisResultLocation].self, forKey: .locations)
        var locationsDecoded0:[AnalysisResultLocation]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [AnalysisResultLocation]()
            for structure0 in locationsContainer {
                locationsDecoded0?.append(structure0)
            }
        }
        locations = locationsDecoded0
    }
}
