// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OnInputLifecycle: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case events
        case transitionEvents
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for events0 in events {
                try eventsContainer.encode(events0)
            }
        }
        if let transitionEvents = transitionEvents {
            var transitionEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transitionEvents)
            for transitionevents0 in transitionEvents {
                try transitionEventsContainer.encode(transitionevents0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([Event].self, forKey: .events)
        var eventsDecoded0:[Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Event]()
            for structure0 in eventsContainer {
                eventsDecoded0?.append(structure0)
            }
        }
        events = eventsDecoded0
        let transitionEventsContainer = try containerValues.decodeIfPresent([TransitionEvent].self, forKey: .transitionEvents)
        var transitionEventsDecoded0:[TransitionEvent]? = nil
        if let transitionEventsContainer = transitionEventsContainer {
            transitionEventsDecoded0 = [TransitionEvent]()
            for structure0 in transitionEventsContainer {
                transitionEventsDecoded0?.append(structure0)
            }
        }
        transitionEvents = transitionEventsDecoded0
    }
}
