// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotificationAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case emailConfigurations
        case smsConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let emailConfigurations = emailConfigurations {
            var emailConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailConfigurations)
            for emailconfigurations0 in emailConfigurations {
                try emailConfigurationsContainer.encode(emailconfigurations0)
            }
        }
        if let smsConfigurations = smsConfigurations {
            var smsConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .smsConfigurations)
            for smsconfigurations0 in smsConfigurations {
                try smsConfigurationsContainer.encode(smsconfigurations0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(NotificationTargetActions.self, forKey: .action)
        action = actionDecoded
        let smsConfigurationsContainer = try containerValues.decodeIfPresent([SMSConfiguration].self, forKey: .smsConfigurations)
        var smsConfigurationsDecoded0:[SMSConfiguration]? = nil
        if let smsConfigurationsContainer = smsConfigurationsContainer {
            smsConfigurationsDecoded0 = [SMSConfiguration]()
            for structure0 in smsConfigurationsContainer {
                smsConfigurationsDecoded0?.append(structure0)
            }
        }
        smsConfigurations = smsConfigurationsDecoded0
        let emailConfigurationsContainer = try containerValues.decodeIfPresent([EmailConfiguration].self, forKey: .emailConfigurations)
        var emailConfigurationsDecoded0:[EmailConfiguration]? = nil
        if let emailConfigurationsContainer = emailConfigurationsContainer {
            emailConfigurationsDecoded0 = [EmailConfiguration]()
            for structure0 in emailConfigurationsContainer {
                emailConfigurationsDecoded0?.append(structure0)
            }
        }
        emailConfigurations = emailConfigurationsDecoded0
    }
}
