// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A structure that contains timestamp information. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html">TimeInNanos</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>
///          <p>You must use expressions for all parameters in <code>AssetPropertyTimestamp</code>. The
///       expressions accept literals, operators, functions, references, and substitution
///       templates.</p>
///          <p class="title">
///             <b>Examples</b>
///          </p>
///          <ul>
///             <li>
///                <p>For literal values, the expressions must contain single quotes. For example, the value
///           for the <code>timeInSeconds</code> parameter can be <code>'1586400675'</code>.</p>
///             </li>
///             <li>
///                <p>For references, you must specify either variables or input values. For example, the
///           value for the <code>offsetInNanos</code> parameter can be
///           <code>$variable.time</code>.</p>
///             </li>
///             <li>
///                <p>For a substitution template, you must use <code>${}</code>, and the template must be
///           in single quotes. A substitution template can also contain a combination of literals,
///           operators, functions, references, and substitution templates.</p>
///                <p>In the following example, the value for the <code>timeInSeconds</code> parameter uses
///           a substitution template.</p>
///                <p>
///                   <code>'${$input.TemperatureInput.sensorData.timestamp / 1000}'</code>
///                </p>
///             </li>
///          </ul>
///          <p>For more information,
///         see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a>
///         in the <i>AWS IoT Events Developer Guide</i>.</p>
public struct AssetPropertyTimestamp: Equatable {
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is
    ///       between 0-999999999.</p>
    public let offsetInNanos: String?
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between
    ///       1-31556889864403199.</p>
    public let timeInSeconds: String?

    public init (
        offsetInNanos: String? = nil,
        timeInSeconds: String? = nil
    )
    {
        self.offsetInNanos = offsetInNanos
        self.timeInSeconds = timeInSeconds
    }
}
