// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case condition
        case eventName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actions0 in actions {
                try actionsContainer.encode(actions0)
            }
        }
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let eventName = eventName {
            try encodeContainer.encode(eventName, forKey: .eventName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventName)
        eventName = eventNameDecoded
        let conditionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .condition)
        condition = conditionDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Action].self, forKey: .actions)
        var actionsDecoded0:[Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Action]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
    }
}
