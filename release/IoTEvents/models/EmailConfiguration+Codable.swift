// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmailConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content
        case from
        case recipients
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let recipients = recipients {
            try encodeContainer.encode(recipients, forKey: .recipients)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromDecoded = try containerValues.decodeIfPresent(String.self, forKey: .from)
        from = fromDecoded
        let contentDecoded = try containerValues.decodeIfPresent(EmailContent.self, forKey: .content)
        content = contentDecoded
        let recipientsDecoded = try containerValues.decodeIfPresent(EmailRecipients.self, forKey: .recipients)
        recipients = recipientsDecoded
    }
}
