// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime
        case inputArn
        case inputDescription
        case inputName
        case lastUpdateTime
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let inputArn = inputArn {
            try encodeContainer.encode(inputArn, forKey: .inputArn)
        }
        if let inputDescription = inputDescription {
            try encodeContainer.encode(inputDescription, forKey: .inputDescription)
        }
        if let inputName = inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let inputDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputDescription)
        inputDescription = inputDescriptionDecoded
        let inputArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputArn)
        inputArn = inputArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InputStatus.self, forKey: .status)
        status = statusDecoded
    }
}
