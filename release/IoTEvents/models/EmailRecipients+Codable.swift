// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmailRecipients: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case to
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let to = to {
            var toContainer = encodeContainer.nestedUnkeyedContainer(forKey: .to)
            for recipientdetails0 in to {
                try toContainer.encode(recipientdetails0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toContainer = try containerValues.decodeIfPresent([RecipientDetail].self, forKey: .to)
        var toDecoded0:[RecipientDetail]? = nil
        if let toContainer = toContainer {
            toDecoded0 = [RecipientDetail]()
            for structure0 in toContainer {
                toDecoded0?.append(structure0)
            }
        }
        to = toDecoded0
    }
}
