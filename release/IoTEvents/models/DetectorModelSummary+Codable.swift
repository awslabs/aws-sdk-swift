// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectorModelSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime
        case detectorModelDescription
        case detectorModelName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let detectorModelDescription = detectorModelDescription {
            try encodeContainer.encode(detectorModelDescription, forKey: .detectorModelDescription)
        }
        if let detectorModelName = detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let detectorModelDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectorModelDescription)
        detectorModelDescription = detectorModelDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
