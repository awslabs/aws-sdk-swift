// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectorModelDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initialStateName
        case states
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let initialStateName = initialStateName {
            try encodeContainer.encode(initialStateName, forKey: .initialStateName)
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for states0 in states {
                try statesContainer.encode(states0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statesContainer = try containerValues.decodeIfPresent([State].self, forKey: .states)
        var statesDecoded0:[State]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [State]()
            for structure0 in statesContainer {
                statesDecoded0?.append(structure0)
            }
        }
        states = statesDecoded0
        let initialStateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .initialStateName)
        initialStateName = initialStateNameDecoded
    }
}
