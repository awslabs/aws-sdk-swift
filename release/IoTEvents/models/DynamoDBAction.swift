// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines an action to write to the Amazon DynamoDB table that you created. The standard action
///       payload contains all the information about the detector model instance and the event that
///       triggered the action. You can customize the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html">payload</a>. One column of the
///       DynamoDB table receives all attribute-value pairs in the payload that you specify.</p>
///          <p>You must use expressions for all parameters in <code>DynamoDBAction</code>. The expressions
///       accept literals, operators, functions, references, and substitution templates.</p>
///          <p class="title">
///             <b>Examples</b>
///          </p>
///          <ul>
///             <li>
///                <p>For literal values, the expressions must contain single quotes. For example, the value
///           for the <code>hashKeyType</code> parameter can be <code>'STRING'</code>.</p>
///             </li>
///             <li>
///                <p>For references, you must specify either variables or input values. For example, the
///           value for the <code>hashKeyField</code> parameter can be
///             <code>$input.GreenhouseInput.name</code>.</p>
///             </li>
///             <li>
///                <p>For a substitution template, you must use <code>${}</code>, and the template must be
///           in single quotes. A substitution template can also contain a combination of literals,
///           operators, functions, references, and substitution templates.</p>
///                <p>In the following example, the value for the <code>hashKeyValue</code> parameter uses a
///           substitution template. </p>
///                <p>
///                   <code>'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'</code>
///                </p>
///             </li>
///             <li>
///                <p>For a string concatenation, you must use <code>+</code>. A string concatenation can
///           also contain a combination of literals, operators, functions, references, and substitution
///           templates.</p>
///                <p>In the following example, the value for the <code>tableName</code> parameter uses a
///           string concatenation. </p>
///                <p>
///                   <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code>
///                </p>
///             </li>
///          </ul>
///          <p>For more information,
///         see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a>
///         in the <i>AWS IoT Events Developer Guide</i>.</p>
///          <p>If the defined payload type is a string, <code>DynamoDBAction</code> writes non-JSON data to
///       the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text.
///       The value for the <code>payloadField</code> parameter is
///         <code><payload-field>_raw</code>.</p>
public struct DynamoDBAction: Equatable {
    /// <p>The name of the hash key (also called the partition key). The <code>hashKeyField</code>
    ///       value must match the partition key of the target DynamoDB table.</p>
    public let hashKeyField: String?
    /// <p>The data type for the hash key (also called the partition key). You can specify the
    ///       following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>'STRING'</code> - The hash key is a string.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>'NUMBER'</code> - The hash key is a number.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify <code>hashKeyType</code>, the default value is
    ///       <code>'STRING'</code>.</p>
    public let hashKeyType: String?
    /// <p>The value of the hash key (also called the partition key).</p>
    public let hashKeyValue: String?
    /// <p>The type of operation to perform. You can specify the following values: </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>'INSERT'</code> - Insert data as a new item into the DynamoDB table. This item uses
    ///           the specified hash key as a partition key. If you specified a range key, the item uses the
    ///           range key as a sort key.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>'UPDATE'</code> - Update an existing item of the DynamoDB table with new data. This
    ///           item's partition key must match the specified hash key. If you specified a range key, the
    ///           range key must match the item's sort key.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>'DELETE'</code> - Delete an existing item of the DynamoDB table. This item's
    ///           partition key must match the specified hash key. If you specified a range key, the range
    ///           key must match the item's sort key.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify this parameter, AWS IoT Events triggers the <code>'INSERT'</code>
    ///       operation.</p>
    public let operation: String?
    /// <p>Information needed to configure the payload.</p>
    ///          <p>By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload
    ///       contains all attribute-value pairs that have the information about the detector model instance
    ///       and the event triggered the action. To configure the action payload, you can use
    ///         <code>contentExpression</code>.</p>
    public let payload: Payload?
    /// <p>The name of the DynamoDB column that receives the action payload.</p>
    ///          <p>If you don't specify this parameter, the name of the DynamoDB column is
    ///       <code>payload</code>.</p>
    public let payloadField: String?
    /// <p>The name of the range key (also called the sort key). The <code>rangeKeyField</code> value
    ///       must match the sort key of the target DynamoDB table. </p>
    public let rangeKeyField: String?
    /// <p>The data type for the range key (also called the sort key), You can specify the following
    ///       values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>'STRING'</code> - The range key is a string.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>'NUMBER'</code> - The range key is number.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify <code>rangeKeyField</code>, the default value is
    ///         <code>'STRING'</code>.</p>
    public let rangeKeyType: String?
    /// <p>The value of the range key (also called the sort key).</p>
    public let rangeKeyValue: String?
    /// <p>The name of the DynamoDB table. The <code>tableName</code> value must match the table name of
    ///       the target DynamoDB table. </p>
    public let tableName: String?

    public init (
        hashKeyField: String? = nil,
        hashKeyType: String? = nil,
        hashKeyValue: String? = nil,
        operation: String? = nil,
        payload: Payload? = nil,
        payloadField: String? = nil,
        rangeKeyField: String? = nil,
        rangeKeyType: String? = nil,
        rangeKeyValue: String? = nil,
        tableName: String? = nil
    )
    {
        self.hashKeyField = hashKeyField
        self.hashKeyType = hashKeyType
        self.hashKeyValue = hashKeyValue
        self.operation = operation
        self.payload = payload
        self.payloadField = payloadField
        self.rangeKeyField = rangeKeyField
        self.rangeKeyType = rangeKeyType
        self.rangeKeyValue = rangeKeyValue
        self.tableName = tableName
    }
}
