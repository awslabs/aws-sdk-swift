// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotTopicPublishAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mqttTopic
        case payload
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mqttTopic = mqttTopic {
            try encodeContainer.encode(mqttTopic, forKey: .mqttTopic)
        }
        if let payload = payload {
            try encodeContainer.encode(payload, forKey: .payload)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mqttTopicDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mqttTopic)
        mqttTopic = mqttTopicDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(Payload.self, forKey: .payload)
        payload = payloadDecoded
    }
}
