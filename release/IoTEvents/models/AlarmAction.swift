// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies one of the following actions to receive notifications when the alarm state
///       changes.</p>
public struct AlarmAction: Equatable {
    /// <p>Defines an action to write to the Amazon DynamoDB table that you created. The standard action
    ///       payload contains all the information about the detector model instance and the event that
    ///       triggered the action. You can customize the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html">payload</a>. One column of the
    ///       DynamoDB table receives all attribute-value pairs in the payload that you specify.</p>
    ///          <p>You must use expressions for all parameters in <code>DynamoDBAction</code>. The expressions
    ///       accept literals, operators, functions, references, and substitution templates.</p>
    ///          <p class="title">
    ///             <b>Examples</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>For literal values, the expressions must contain single quotes. For example, the value
    ///           for the <code>hashKeyType</code> parameter can be <code>'STRING'</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For references, you must specify either variables or input values. For example, the
    ///           value for the <code>hashKeyField</code> parameter can be
    ///             <code>$input.GreenhouseInput.name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For a substitution template, you must use <code>${}</code>, and the template must be
    ///           in single quotes. A substitution template can also contain a combination of literals,
    ///           operators, functions, references, and substitution templates.</p>
    ///                <p>In the following example, the value for the <code>hashKeyValue</code> parameter uses a
    ///           substitution template. </p>
    ///                <p>
    ///                   <code>'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For a string concatenation, you must use <code>+</code>. A string concatenation can
    ///           also contain a combination of literals, operators, functions, references, and substitution
    ///           templates.</p>
    ///                <p>In the following example, the value for the <code>tableName</code> parameter uses a
    ///           string concatenation. </p>
    ///                <p>
    ///                   <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information,
    ///         see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a>
    ///         in the <i>AWS IoT Events Developer Guide</i>.</p>
    ///          <p>If the defined payload type is a string, <code>DynamoDBAction</code> writes non-JSON data to
    ///       the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text.
    ///       The value for the <code>payloadField</code> parameter is
    ///         <code><payload-field>_raw</code>.</p>
    public let dynamoDB: DynamoDBAction?
    /// <p>Defines an action to write to the Amazon DynamoDB table that you created. The default action
    ///       payload contains all the information about the detector model instance and the event that
    ///       triggered the action. You can customize the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html">payload</a>. A separate column of
    ///       the DynamoDB table receives one attribute-value pair in the payload that you specify.</p>
    ///          <p>You must use expressions for all parameters in <code>DynamoDBv2Action</code>. The expressions
    ///       accept literals, operators, functions, references, and substitution templates.</p>
    ///          <p class="title">
    ///             <b>Examples</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>For literal values, the expressions must contain single quotes. For example, the value
    ///           for the <code>tableName</code> parameter can be
    ///           <code>'GreenhouseTemperatureTable'</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For references, you must specify either variables or input values. For example, the
    ///           value for the <code>tableName</code> parameter can be
    ///           <code>$variable.ddbtableName</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For a substitution template, you must use <code>${}</code>, and the template must be
    ///           in single quotes. A substitution template can also contain a combination of literals,
    ///           operators, functions, references, and substitution templates.</p>
    ///                <p>In the following example, the value for the <code>contentExpression</code> parameter
    ///           in <code>Payload</code> uses a substitution template. </p>
    ///                <p>
    ///                   <code>'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\":
    ///             \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For a string concatenation, you must use <code>+</code>. A string concatenation can
    ///           also contain a combination of literals, operators, functions, references, and substitution
    ///           templates.</p>
    ///                <p>In the following example, the value for the <code>tableName</code> parameter uses a
    ///           string concatenation. </p>
    ///                <p>
    ///                   <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information,
    ///         see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a>
    ///         in the <i>AWS IoT Events Developer Guide</i>.</p>
    ///          <p>The value for the <code>type</code> parameter in <code>Payload</code> must be
    ///         <code>JSON</code>.</p>
    public let dynamoDBv2: DynamoDBv2Action?
    /// <p>Sends information about the detector model instance and the event that triggered the
    ///       action to an Amazon Kinesis Data Firehose delivery stream.</p>
    public let firehose: FirehoseAction?
    /// <p>Sends an AWS IoT Events input, passing in information about the detector model instance and the
    ///       event that triggered the action.</p>
    public let iotEvents: IotEventsAction?
    /// <p>Sends information about the detector model instance and the event that triggered the
    ///       action to a specified asset property in AWS IoT SiteWise.</p>
    ///          <p>You must use expressions for all parameters in <code>IotSiteWiseAction</code>. The
    ///       expressions accept literals, operators, functions, references, and substitutions
    ///       templates.</p>
    ///          <p class="title">
    ///             <b>Examples</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>For literal values, the expressions must contain single quotes. For example, the value
    ///           for the <code>propertyAlias</code> parameter can be
    ///             <code>'/company/windfarm/3/turbine/7/temperature'</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For references, you must specify either variables or input values. For example, the
    ///           value for the <code>assetId</code> parameter can be
    ///             <code>$input.TurbineInput.assetId1</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For a substitution template, you must use <code>${}</code>, and the template must be
    ///           in single quotes. A substitution template can also contain a combination of literals,
    ///           operators, functions, references, and substitution templates.</p>
    ///                <p>In the following example, the value for the <code>propertyAlias</code> parameter uses
    ///           a substitution template. </p>
    ///                <p>
    ///                   <code>'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/
    ///             ${$input.TemperatureInput.sensorData.turbineID}/temperature'</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You must specify either <code>propertyAlias</code> or both <code>assetId</code> and
    ///         <code>propertyId</code> to identify the target asset property in AWS IoT SiteWise.</p>
    ///          <p>For more information,
    ///         see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a>
    ///         in the <i>AWS IoT Events Developer Guide</i>.</p>
    public let iotSiteWise: IotSiteWiseAction?
    /// <p>Information required to publish the MQTT message through the AWS IoT message broker.</p>
    public let iotTopicPublish: IotTopicPublishAction?
    /// <p>Calls a Lambda function, passing in information about the detector model instance and the
    ///       event that triggered the action.</p>
    public let lambda: LambdaAction?
    /// <p>Information required to publish the Amazon SNS message.</p>
    public let sns: SNSTopicPublishAction?
    /// <p>Sends information about the detector model instance and the event that triggered the
    ///       action to an Amazon SQS queue.</p>
    public let sqs: SqsAction?

    public init (
        dynamoDB: DynamoDBAction? = nil,
        dynamoDBv2: DynamoDBv2Action? = nil,
        firehose: FirehoseAction? = nil,
        iotEvents: IotEventsAction? = nil,
        iotSiteWise: IotSiteWiseAction? = nil,
        iotTopicPublish: IotTopicPublishAction? = nil,
        lambda: LambdaAction? = nil,
        sns: SNSTopicPublishAction? = nil,
        sqs: SqsAction? = nil
    )
    {
        self.dynamoDB = dynamoDB
        self.dynamoDBv2 = dynamoDBv2
        self.firehose = firehose
        self.iotEvents = iotEvents
        self.iotSiteWise = iotSiteWise
        self.iotTopicPublish = iotTopicPublish
        self.lambda = lambda
        self.sns = sns
        self.sqs = sqs
    }
}
