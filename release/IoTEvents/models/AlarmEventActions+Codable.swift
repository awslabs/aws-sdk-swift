// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlarmEventActions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmActions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmActions = alarmActions {
            var alarmActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarmActions)
            for alarmactions0 in alarmActions {
                try alarmActionsContainer.encode(alarmactions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmActionsContainer = try containerValues.decodeIfPresent([AlarmAction].self, forKey: .alarmActions)
        var alarmActionsDecoded0:[AlarmAction]? = nil
        if let alarmActionsContainer = alarmActionsContainer {
            alarmActionsDecoded0 = [AlarmAction]()
            for structure0 in alarmActionsContainer {
                alarmActionsDecoded0?.append(structure0)
            }
        }
        alarmActions = alarmActionsDecoded0
    }
}
