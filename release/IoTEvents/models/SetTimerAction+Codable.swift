// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SetTimerAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case durationExpression
        case seconds
        case timerName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationExpression = durationExpression {
            try encodeContainer.encode(durationExpression, forKey: .durationExpression)
        }
        if let seconds = seconds {
            try encodeContainer.encode(seconds, forKey: .seconds)
        }
        if let timerName = timerName {
            try encodeContainer.encode(timerName, forKey: .timerName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timerName)
        timerName = timerNameDecoded
        let secondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .seconds)
        seconds = secondsDecoded
        let durationExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .durationExpression)
        durationExpression = durationExpressionDecoded
    }
}
