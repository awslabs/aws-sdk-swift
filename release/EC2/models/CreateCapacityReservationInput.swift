// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCapacityReservationInput: Equatable {
    /// <p>The Availability Zone in which to create the Capacity Reservation.</p>
    public let availabilityZone: String?
    /// <p>The ID of the Availability Zone in which to create the Capacity Reservation.</p>
    public let availabilityZoneId: String?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure Idempotency</a>.</p>
    public let clientToken: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
    /// 			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
    /// 			optimal I/O performance. This optimization isn't available with all instance types.
    /// 			Additional usage charges apply when using an EBS- optimized instance.</p>
    public let ebsOptimized: Bool
    /// <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
    /// 			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
    /// 				<code>expired</code> when it reaches its end date and time.</p>	
    /// 		       <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is
    /// 				<code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is
    /// 				<code>unlimited</code>.</p>
    /// 		
    /// 		       <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify
    /// 			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
    public let endDate: Date?
    /// <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
    /// 			types:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not
    /// 					provide an <code>EndDate</code> if the <code>EndDateType</code> is
    /// 						<code>unlimited</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must
    /// 					provide an <code>EndDate</code> value if the <code>EndDateType</code> value is
    /// 						<code>limited</code>.</p>
    ///             </li>
    ///          </ul>
    public let endDateType: EndDateType?
    /// <p>Indicates whether the Capacity Reservation supports instances with temporary, block-level
    /// 			storage.</p>
    public let ephemeralStorage: Bool
    /// <p>The number of instances for which to reserve capacity.</p>
    public let instanceCount: Int
    /// <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options
    /// 			include:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform,
    /// 				and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying
    /// 				any additional parameters.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes
    /// 					(instance type, platform, and Availability Zone), and explicitly target the
    /// 					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p>
    ///             </li>
    ///          </ul>
    /// 		       <p>Default: <code>open</code>
    ///          </p>
    public let instanceMatchCriteria: InstanceMatchCriteria?
    /// <p>The type of operating system for which to reserve capacity.</p>
    public let instancePlatform: CapacityReservationInstancePlatform?
    /// <p>The instance type for which to reserve capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    public let instanceType: String?
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.</p>
    public let outpostArn: String?
    /// <p>The tags to apply to the Capacity Reservation during launch.</p>
    public let tagSpecifications: [TagSpecification]?
    /// <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p>
    ///             </li>
    ///          </ul>
    public let tenancy: CapacityReservationTenancy?

    public init (
        availabilityZone: String? = nil,
        availabilityZoneId: String? = nil,
        clientToken: String? = nil,
        dryRun: Bool = false,
        ebsOptimized: Bool = false,
        endDate: Date? = nil,
        endDateType: EndDateType? = nil,
        ephemeralStorage: Bool = false,
        instanceCount: Int = 0,
        instanceMatchCriteria: InstanceMatchCriteria? = nil,
        instancePlatform: CapacityReservationInstancePlatform? = nil,
        instanceType: String? = nil,
        outpostArn: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        tenancy: CapacityReservationTenancy? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.availabilityZoneId = availabilityZoneId
        self.clientToken = clientToken
        self.dryRun = dryRun
        self.ebsOptimized = ebsOptimized
        self.endDate = endDate
        self.endDateType = endDateType
        self.ephemeralStorage = ephemeralStorage
        self.instanceCount = instanceCount
        self.instanceMatchCriteria = instanceMatchCriteria
        self.instancePlatform = instancePlatform
        self.instanceType = instanceType
        self.outpostArn = outpostArn
        self.tagSpecifications = tagSpecifications
        self.tenancy = tenancy
    }
}
