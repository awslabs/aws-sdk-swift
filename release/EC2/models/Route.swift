// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a route in a route table.</p>
public struct Route: Equatable {
    /// <p>The ID of the carrier gateway.</p>
    public let carrierGatewayId: String?
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    public let destinationCidrBlock: String?
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    public let destinationIpv6CidrBlock: String?
    /// <p>The prefix of the AWS service.</p>
    public let destinationPrefixListId: String?
    /// <p>The ID of the egress-only internet gateway.</p>
    public let egressOnlyInternetGatewayId: String?
    /// <p>The ID of a gateway attached to your VPC.</p>
    public let gatewayId: String?
    /// <p>The ID of a NAT instance in your VPC.</p>
    public let instanceId: String?
    /// <p>The AWS account ID of the owner of the instance.</p>
    public let instanceOwnerId: String?
    /// <p>The ID of the local gateway.</p>
    public let localGatewayId: String?
    /// <p>The ID of a NAT gateway.</p>
    public let natGatewayId: String?
    /// <p>The ID of the network interface.</p>
    public let networkInterfaceId: String?
    /// <p>Describes how the route was created.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreateRoute</code> - The route was manually added to the route table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p>
    ///             </li>
    ///          </ul>
    public let origin: RouteOrigin?
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the
    /// 				route's target isn't available (for example, the specified gateway isn't attached to the
    /// 				VPC, or the specified NAT instance has been terminated).</p>
    public let state: RouteState?
    /// <p>The ID of a transit gateway.</p>
    public let transitGatewayId: String?
    /// <p>The ID of a VPC peering connection.</p>
    public let vpcPeeringConnectionId: String?

    public init (
        carrierGatewayId: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationIpv6CidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        egressOnlyInternetGatewayId: String? = nil,
        gatewayId: String? = nil,
        instanceId: String? = nil,
        instanceOwnerId: String? = nil,
        localGatewayId: String? = nil,
        natGatewayId: String? = nil,
        networkInterfaceId: String? = nil,
        origin: RouteOrigin? = nil,
        state: RouteState? = nil,
        transitGatewayId: String? = nil,
        vpcPeeringConnectionId: String? = nil
    )
    {
        self.carrierGatewayId = carrierGatewayId
        self.destinationCidrBlock = destinationCidrBlock
        self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
        self.destinationPrefixListId = destinationPrefixListId
        self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        self.gatewayId = gatewayId
        self.instanceId = instanceId
        self.instanceOwnerId = instanceOwnerId
        self.localGatewayId = localGatewayId
        self.natGatewayId = natGatewayId
        self.networkInterfaceId = networkInterfaceId
        self.origin = origin
        self.state = state
        self.transitGatewayId = transitGatewayId
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}
