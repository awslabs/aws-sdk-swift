// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InstanceAttributeName {
    case blockdevicemapping
    case disableapitermination
    case ebsoptimized
    case enasupport
    case enclaveoptions
    case groupset
    case instanceinitiatedshutdownbehavior
    case instancetype
    case kernel
    case productcodes
    case ramdisk
    case rootdevicename
    case sourcedestcheck
    case sriovnetsupport
    case userdata
    case sdkUnknown(String)
}

extension InstanceAttributeName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceAttributeName] {
        return [
            .blockdevicemapping,
            .disableapitermination,
            .ebsoptimized,
            .enasupport,
            .enclaveoptions,
            .groupset,
            .instanceinitiatedshutdownbehavior,
            .instancetype,
            .kernel,
            .productcodes,
            .ramdisk,
            .rootdevicename,
            .sourcedestcheck,
            .sriovnetsupport,
            .userdata,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .blockdevicemapping: return "blockDeviceMapping"
        case .disableapitermination: return "disableApiTermination"
        case .ebsoptimized: return "ebsOptimized"
        case .enasupport: return "enaSupport"
        case .enclaveoptions: return "enclaveOptions"
        case .groupset: return "groupSet"
        case .instanceinitiatedshutdownbehavior: return "instanceInitiatedShutdownBehavior"
        case .instancetype: return "instanceType"
        case .kernel: return "kernel"
        case .productcodes: return "productCodes"
        case .ramdisk: return "ramdisk"
        case .rootdevicename: return "rootDeviceName"
        case .sourcedestcheck: return "sourceDestCheck"
        case .sriovnetsupport: return "sriovNetSupport"
        case .userdata: return "userData"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceAttributeName(rawValue: rawValue) ?? InstanceAttributeName.sdkUnknown(rawValue)
    }
}
