// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeFpgaImagesInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The filters.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>create-time</code> - The creation time of the AFI.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>name</code> - The name of the AFI.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>owner-id</code> - The AWS account ID of the AFI owner.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>product-code</code> - The product code.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>shell-version</code> - The version of the AWS Shell that was used to create the bitstream.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    ///     For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>update-time</code> - The time of the most recent update.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The AFI IDs.</p>
    public let fpgaImageIds: [String]?
    /// <p>The maximum number of results to return in a single call.</p>
    public let maxResults: Int
    /// <p>The token to retrieve the next page of results.</p>
    public let nextToken: String?
    /// <p>Filters the AFI by owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).</p>
    public let owners: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        fpgaImageIds: [String]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        owners: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.fpgaImageIds = fpgaImageIds
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.owners = owners
    }
}
