// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeVpcPeeringConnectionsInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>One or more filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                     <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter
    ///                     VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the
    ///                     accepter VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>expiration-time</code> - The expiration date and time for the VPC peering
    ///           connection.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
    ///                     requester's VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the
    ///           requester VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>status-code</code> - The status of the VPC peering connection
    ///                         (<code>pending-acceptance</code> | <code>failed</code> |
    ///                         <code>expired</code> | <code>provisioning</code> | <code>active</code> |
    ///                         <code>deleting</code> | <code>deleted</code> |
    ///                     <code>rejected</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>status-message</code> - A message that provides more information about the status
    ///           of the VPC peering connection, if applicable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    ///     For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    public let maxResults: Int
    /// <p>The token for the next page of results.</p>
    public let nextToken: String?
    /// <p>One or more VPC peering connection IDs.</p>
    ///          <p>Default: Describes all your VPC peering connections.</p>
    public let vpcPeeringConnectionIds: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        vpcPeeringConnectionIds: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
    }
}
