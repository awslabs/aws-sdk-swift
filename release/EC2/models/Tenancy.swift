// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Tenancy {
    case dedicated
    case `default`
    case host
    case sdkUnknown(String)
}

extension Tenancy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Tenancy] {
        return [
            .dedicated,
            .default,
            .host,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dedicated: return "dedicated"
        case .default: return "default"
        case .host: return "host"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Tenancy(rawValue: rawValue) ?? Tenancy.sdkUnknown(rawValue)
    }
}
