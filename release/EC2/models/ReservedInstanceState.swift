// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ReservedInstanceState {
    case active
    case paymentFailed
    case paymentPending
    case queued
    case queuedDeleted
    case retired
    case sdkUnknown(String)
}

extension ReservedInstanceState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReservedInstanceState] {
        return [
            .active,
            .paymentFailed,
            .paymentPending,
            .queued,
            .queuedDeleted,
            .retired,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "active"
        case .paymentFailed: return "payment-failed"
        case .paymentPending: return "payment-pending"
        case .queued: return "queued"
        case .queuedDeleted: return "queued-deleted"
        case .retired: return "retired"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReservedInstanceState(rawValue: rawValue) ?? ReservedInstanceState.sdkUnknown(rawValue)
    }
}
