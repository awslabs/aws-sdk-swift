// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for DescribeVpcEndpointServices.</p>
public struct DescribeVpcEndpointServicesInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>One or more filters.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>service-name</code> - The name of the service.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>service-type</code> - The type of service (<code>Interface</code> |
    ///                         <code>Gateway</code>).</p>
    ///             </li>
    ///             <li>
    ///         		     <p>
    ///                   <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///         	   </li>
    ///             <li>
    ///         		     <p>
    ///                   <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    ///         	   </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///         <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p>
    public let maxResults: Int
    /// <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    public let nextToken: String?
    /// <p>One or more service names.</p>
    public let serviceNames: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        serviceNames: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceNames = serviceNames
    }
}
