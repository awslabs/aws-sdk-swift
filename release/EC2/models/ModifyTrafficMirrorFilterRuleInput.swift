// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyTrafficMirrorFilterRuleInput: Equatable {
    /// <p>The protocol, for example TCP, to assign to the Traffic Mirror rule.</p>
    public let `protocol`: Int
    /// <p>The description to assign to the Traffic Mirror rule.</p>
    public let description: String?
    /// <p>The destination CIDR block to assign to the Traffic Mirror rule.</p>
    public let destinationCidrBlock: String?
    /// <p>The destination ports that are associated with the Traffic Mirror rule.</p>
    public let destinationPortRange: TrafficMirrorPortRangeRequest?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The properties that you want to remove from the Traffic Mirror filter rule.</p>
    ///          <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>
    public let removeFields: [TrafficMirrorFilterRuleField]?
    /// <p>The action to assign to the rule.</p>
    public let ruleAction: TrafficMirrorRuleAction?
    /// <p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
    ///          direction. The rules are processed in ascending order by rule number.</p>
    public let ruleNumber: Int
    /// <p>The source CIDR block to assign to the Traffic Mirror rule.</p>
    public let sourceCidrBlock: String?
    /// <p>The port range to assign to the Traffic Mirror rule.</p>
    public let sourcePortRange: TrafficMirrorPortRangeRequest?
    /// <p>The type of traffic (<code>ingress</code> | <code>egress</code>) to assign to the rule.</p>
    public let trafficDirection: TrafficDirection?
    /// <p>The ID of the Traffic Mirror rule.</p>
    public let trafficMirrorFilterRuleId: String?

    public init (
        `protocol`: Int = 0,
        description: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationPortRange: TrafficMirrorPortRangeRequest? = nil,
        dryRun: Bool = false,
        removeFields: [TrafficMirrorFilterRuleField]? = nil,
        ruleAction: TrafficMirrorRuleAction? = nil,
        ruleNumber: Int = 0,
        sourceCidrBlock: String? = nil,
        sourcePortRange: TrafficMirrorPortRangeRequest? = nil,
        trafficDirection: TrafficDirection? = nil,
        trafficMirrorFilterRuleId: String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.description = description
        self.destinationCidrBlock = destinationCidrBlock
        self.destinationPortRange = destinationPortRange
        self.dryRun = dryRun
        self.removeFields = removeFields
        self.ruleAction = ruleAction
        self.ruleNumber = ruleNumber
        self.sourceCidrBlock = sourceCidrBlock
        self.sourcePortRange = sourcePortRange
        self.trafficDirection = trafficDirection
        self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
    }
}
