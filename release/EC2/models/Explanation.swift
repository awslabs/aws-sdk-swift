// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes an explanation code for an unreachable path. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html">Reachability Analyzer explanation codes</a>.</p>
public struct Explanation: Equatable {
    /// <p>The network ACL.</p>
    public let acl: AnalysisComponent?
    /// <p>The network ACL rule.</p>
    public let aclRule: AnalysisAclRule?
    /// <p>The IPv4 address, in CIDR notation.</p>
    public let address: String?
    /// <p>The IPv4 addresses, in CIDR notation.</p>
    public let addresses: [String]?
    /// <p>The resource to which the component is attached.</p>
    public let attachedTo: AnalysisComponent?
    /// <p>The Availability Zones.</p>
    public let availabilityZones: [String]?
    /// <p>The CIDR ranges.</p>
    public let cidrs: [String]?
    /// <p>The listener for a Classic Load Balancer.</p>
    public let classicLoadBalancerListener: AnalysisLoadBalancerListener?
    /// <p>The component.</p>
    public let component: AnalysisComponent?
    /// <p>The customer gateway.</p>
    public let customerGateway: AnalysisComponent?
    /// <p>The destination.</p>
    public let destination: AnalysisComponent?
    /// <p>The destination VPC.</p>
    public let destinationVpc: AnalysisComponent?
    /// <p>The direction. The following are possible values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>egress</p>
    ///             </li>
    ///             <li>
    ///                <p>ingress</p>
    ///             </li>
    ///          </ul>
    public let direction: String?
    /// <p>The load balancer listener.</p>
    public let elasticLoadBalancerListener: AnalysisComponent?
    /// <p>The explanation code.</p>
    public let explanationCode: String?
    /// <p>The route table.</p>
    public let ingressRouteTable: AnalysisComponent?
    /// <p>The internet gateway.</p>
    public let internetGateway: AnalysisComponent?
    /// <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    public let loadBalancerArn: String?
    /// <p>The listener port of the load balancer.</p>
    public let loadBalancerListenerPort: Int
    /// <p>The target.</p>
    public let loadBalancerTarget: AnalysisLoadBalancerTarget?
    /// <p>The target group.</p>
    public let loadBalancerTargetGroup: AnalysisComponent?
    /// <p>The target groups.</p>
    public let loadBalancerTargetGroups: [AnalysisComponent]?
    /// <p>The target port.</p>
    public let loadBalancerTargetPort: Int
    /// <p>The missing component.</p>
    public let missingComponent: String?
    /// <p>The NAT gateway.</p>
    public let natGateway: AnalysisComponent?
    /// <p>The network interface.</p>
    public let networkInterface: AnalysisComponent?
    /// <p>The packet field.</p>
    public let packetField: String?
    /// <p>The port.</p>
    public let port: Int
    /// <p>The port ranges.</p>
    public let portRanges: [PortRange]?
    /// <p>The prefix list.</p>
    public let prefixList: AnalysisComponent?
    /// <p>The protocols.</p>
    public let protocols: [String]?
    /// <p>The route table.</p>
    public let routeTable: AnalysisComponent?
    /// <p>The route table route.</p>
    public let routeTableRoute: AnalysisRouteTableRoute?
    /// <p>The security group.</p>
    public let securityGroup: AnalysisComponent?
    /// <p>The security group rule.</p>
    public let securityGroupRule: AnalysisSecurityGroupRule?
    /// <p>The security groups.</p>
    public let securityGroups: [AnalysisComponent]?
    /// <p>The source VPC.</p>
    public let sourceVpc: AnalysisComponent?
    /// <p>The state.</p>
    public let state: String?
    /// <p>The subnet.</p>
    public let subnet: AnalysisComponent?
    /// <p>The route table for the subnet.</p>
    public let subnetRouteTable: AnalysisComponent?
    /// <p>The component VPC.</p>
    public let vpc: AnalysisComponent?
    /// <p>The VPC endpoint.</p>
    public let vpcEndpoint: AnalysisComponent?
    /// <p>The VPC peering connection.</p>
    public let vpcPeeringConnection: AnalysisComponent?
    /// <p>The VPN connection.</p>
    public let vpnConnection: AnalysisComponent?
    /// <p>The VPN gateway.</p>
    public let vpnGateway: AnalysisComponent?

    public init (
        acl: AnalysisComponent? = nil,
        aclRule: AnalysisAclRule? = nil,
        address: String? = nil,
        addresses: [String]? = nil,
        attachedTo: AnalysisComponent? = nil,
        availabilityZones: [String]? = nil,
        cidrs: [String]? = nil,
        classicLoadBalancerListener: AnalysisLoadBalancerListener? = nil,
        component: AnalysisComponent? = nil,
        customerGateway: AnalysisComponent? = nil,
        destination: AnalysisComponent? = nil,
        destinationVpc: AnalysisComponent? = nil,
        direction: String? = nil,
        elasticLoadBalancerListener: AnalysisComponent? = nil,
        explanationCode: String? = nil,
        ingressRouteTable: AnalysisComponent? = nil,
        internetGateway: AnalysisComponent? = nil,
        loadBalancerArn: String? = nil,
        loadBalancerListenerPort: Int = 0,
        loadBalancerTarget: AnalysisLoadBalancerTarget? = nil,
        loadBalancerTargetGroup: AnalysisComponent? = nil,
        loadBalancerTargetGroups: [AnalysisComponent]? = nil,
        loadBalancerTargetPort: Int = 0,
        missingComponent: String? = nil,
        natGateway: AnalysisComponent? = nil,
        networkInterface: AnalysisComponent? = nil,
        packetField: String? = nil,
        port: Int = 0,
        portRanges: [PortRange]? = nil,
        prefixList: AnalysisComponent? = nil,
        protocols: [String]? = nil,
        routeTable: AnalysisComponent? = nil,
        routeTableRoute: AnalysisRouteTableRoute? = nil,
        securityGroup: AnalysisComponent? = nil,
        securityGroupRule: AnalysisSecurityGroupRule? = nil,
        securityGroups: [AnalysisComponent]? = nil,
        sourceVpc: AnalysisComponent? = nil,
        state: String? = nil,
        subnet: AnalysisComponent? = nil,
        subnetRouteTable: AnalysisComponent? = nil,
        vpc: AnalysisComponent? = nil,
        vpcEndpoint: AnalysisComponent? = nil,
        vpcPeeringConnection: AnalysisComponent? = nil,
        vpnConnection: AnalysisComponent? = nil,
        vpnGateway: AnalysisComponent? = nil
    )
    {
        self.acl = acl
        self.aclRule = aclRule
        self.address = address
        self.addresses = addresses
        self.attachedTo = attachedTo
        self.availabilityZones = availabilityZones
        self.cidrs = cidrs
        self.classicLoadBalancerListener = classicLoadBalancerListener
        self.component = component
        self.customerGateway = customerGateway
        self.destination = destination
        self.destinationVpc = destinationVpc
        self.direction = direction
        self.elasticLoadBalancerListener = elasticLoadBalancerListener
        self.explanationCode = explanationCode
        self.ingressRouteTable = ingressRouteTable
        self.internetGateway = internetGateway
        self.loadBalancerArn = loadBalancerArn
        self.loadBalancerListenerPort = loadBalancerListenerPort
        self.loadBalancerTarget = loadBalancerTarget
        self.loadBalancerTargetGroup = loadBalancerTargetGroup
        self.loadBalancerTargetGroups = loadBalancerTargetGroups
        self.loadBalancerTargetPort = loadBalancerTargetPort
        self.missingComponent = missingComponent
        self.natGateway = natGateway
        self.networkInterface = networkInterface
        self.packetField = packetField
        self.port = port
        self.portRanges = portRanges
        self.prefixList = prefixList
        self.protocols = protocols
        self.routeTable = routeTable
        self.routeTableRoute = routeTableRoute
        self.securityGroup = securityGroup
        self.securityGroupRule = securityGroupRule
        self.securityGroups = securityGroups
        self.sourceVpc = sourceVpc
        self.state = state
        self.subnet = subnet
        self.subnetRouteTable = subnetRouteTable
        self.vpc = vpc
        self.vpcEndpoint = vpcEndpoint
        self.vpcPeeringConnection = vpcPeeringConnection
        self.vpnConnection = vpnConnection
        self.vpnGateway = vpnGateway
    }
}
