// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for RegisterImage.</p>
public struct RegisterImageInput: Equatable {
    /// <p>The architecture of the AMI.</p>
    ///          <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>.
    ///         For instance store-backed AMIs, the architecture specified in the manifest file.</p>
    public let architecture: ArchitectureValues?
    /// <p>The billing product codes. Your account must be authorized to specify billing product codes. Otherwise,
    ///          you can use the AWS Marketplace to bill for the use of an AMI.</p>
    public let billingProducts: [String]?
    /// <p>The block device mapping entries.</p>
    ///          <p>If you specify an EBS volume using the ID of an EBS snapshot, you can't specify the encryption state of the volume.</p>
    ///          <p>If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region
    ///     	 of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost
    ///     	 only. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    ///     	 	Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    public let blockDeviceMappings: [BlockDeviceMapping]?
    /// <p>The boot mode of the AMI. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot modes</a> in the
    ///         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    public let bootMode: BootModeValues?
    /// <p>A description for your AMI.</p>
    public let description: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///        and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///        Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p>
    ///          <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    public let enaSupport: Bool
    /// <p>The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the
    ///    		<code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed
    ///    		by Amazon EC2. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned ACLs</a> in the
    ///    		<i>Amazon S3 Service Developer Guide</i>.</p>
    public let imageLocation: String?
    /// <p>The ID of the kernel.</p>
    public let kernelId: String?
    /// <p>A name for your AMI.</p>
    ///          <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    public let name: String?
    /// <p>The ID of the RAM disk.</p>
    public let ramdiskId: String?
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    public let rootDeviceName: String?
    /// <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p>
    ///          <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p>
    ///          <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    public let sriovNetSupport: String?
    /// <p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p>
    ///          <p>Default: <code>paravirtual</code>
    ///          </p>
    public let virtualizationType: String?

    public init (
        architecture: ArchitectureValues? = nil,
        billingProducts: [String]? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        bootMode: BootModeValues? = nil,
        description: String? = nil,
        dryRun: Bool = false,
        enaSupport: Bool = false,
        imageLocation: String? = nil,
        kernelId: String? = nil,
        name: String? = nil,
        ramdiskId: String? = nil,
        rootDeviceName: String? = nil,
        sriovNetSupport: String? = nil,
        virtualizationType: String? = nil
    )
    {
        self.architecture = architecture
        self.billingProducts = billingProducts
        self.blockDeviceMappings = blockDeviceMappings
        self.bootMode = bootMode
        self.description = description
        self.dryRun = dryRun
        self.enaSupport = enaSupport
        self.imageLocation = imageLocation
        self.kernelId = kernelId
        self.name = name
        self.ramdiskId = ramdiskId
        self.rootDeviceName = rootDeviceName
        self.sriovNetSupport = sriovNetSupport
        self.virtualizationType = virtualizationType
    }
}
