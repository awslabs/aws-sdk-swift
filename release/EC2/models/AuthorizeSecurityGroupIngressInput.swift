// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct AuthorizeSecurityGroupIngressInput: Equatable {
    /// <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source
    ///       security group. To specify an IPv6 address range, use a set of IP permissions.</p>
    ///          <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    public let cidrIp: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The start of port range for the TCP and UDP protocols, or an ICMP type number.
    /// 			For the ICMP type number, use <code>-1</code> to specify all types. If you
    /// 			specify all ICMP types, you must specify all codes.</p>
    ///          <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    public let fromPort: Int
    /// <p>The ID of the security group. You must specify either the security group ID or the
    /// 			security group name in the request. For security groups in a nondefault VPC, you must
    /// 			specify the security group ID.</p>
    public let groupId: String?
    /// <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
    /// 			security group ID or the security group name in the request.</p>
    public let groupName: String?
    /// <p>The sets of IP permissions.</p>
    public let ipPermissions: [IpPermission]?
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number
    ///       (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p>
    ///          <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a
    ///          protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports
    ///          is allowed, regardless of any ports you specify.</p>
    ///          <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    public let ipProtocol: String?
    /// <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter
    ///          in combination with the following parameters: the CIDR IP address range, the start of the port range,
    ///          the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access.
    ///          To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For
    ///          EC2-VPC, the source security group must be in the same VPC.</p>
    public let sourceSecurityGroupName: String?
    /// <p>[nondefault VPC] The AWS account ID for the source security group, if the source security group is
    ///          in a different account. You can't specify this parameter in combination with the following parameters:
    ///          the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range.
    ///          Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol
    ///          and port range, use a set of IP permissions instead.</p>
    public let sourceSecurityGroupOwnerId: String?
    /// <p>The end of port range for the TCP and UDP protocols, or an ICMP code number.
    /// 			For the ICMP code number, use <code>-1</code> to specify all codes. If you
    /// 			specify all ICMP types, you must specify all codes.</p>
    ///          <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    public let toPort: Int

    public init (
        cidrIp: String? = nil,
        dryRun: Bool = false,
        fromPort: Int = 0,
        groupId: String? = nil,
        groupName: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        ipProtocol: String? = nil,
        sourceSecurityGroupName: String? = nil,
        sourceSecurityGroupOwnerId: String? = nil,
        toPort: Int = 0
    )
    {
        self.cidrIp = cidrIp
        self.dryRun = dryRun
        self.fromPort = fromPort
        self.groupId = groupId
        self.groupName = groupName
        self.ipPermissions = ipPermissions
        self.ipProtocol = ipProtocol
        self.sourceSecurityGroupName = sourceSecurityGroupName
        self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
        self.toPort = toPort
    }
}
