// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains the parameters for DescribeSpotPriceHistory.</p>
public struct DescribeSpotPriceHistoryInput: Equatable {
    /// <p>Filters the results by the specified Availability Zone.</p>
    public let availabilityZone: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///        and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///        Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The date and time, up to the current date, from which to stop retrieving the price history data,
    ///        in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    public let endTime: Date?
    /// <p>One or more filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>product-description</code> - The product description for the Spot price
    ///                         (<code>Linux/UNIX</code> | <code>Red Hat Enterprise Linux</code> |
    ///                         <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon
    ///                         VPC)</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code>
    ///                         | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon
    ///                     VPC)</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>timestamp</code> - The time stamp of the Spot price history, in UTC format
    ///                     (for example,
    ///                         <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    ///                     You can use wildcards (* and ?). Greater than or less than comparison is not
    ///                     supported.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>Filters the results by the specified instance types.</p>
    public let instanceTypes: [InstanceType]?
    /// <p>The maximum number of results to return in a single call.
    ///        Specify a value between 1 and 1000. The default value is 1000.
    ///        To retrieve the remaining results, make another call with the returned
    ///        <code>NextToken</code> value.</p>
    public let maxResults: Int
    /// <p>The token for the next set of results.</p>
    public let nextToken: String?
    /// <p>Filters the results by the specified basic product descriptions.</p>
    public let productDescriptions: [String]?
    /// <p>The date and time, up to the past 90 days, from which to start retrieving the price history data,
    ///        in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    public let startTime: Date?

    public init (
        availabilityZone: String? = nil,
        dryRun: Bool = false,
        endTime: Date? = nil,
        filters: [Filter]? = nil,
        instanceTypes: [InstanceType]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        productDescriptions: [String]? = nil,
        startTime: Date? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.dryRun = dryRun
        self.endTime = endTime
        self.filters = filters
        self.instanceTypes = instanceTypes
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.productDescriptions = productDescriptions
        self.startTime = startTime
    }
}
