// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateClientVpnEndpointInput: Equatable {
    /// <p>Information about the authentication method to be used to authenticate clients.</p>
    public let authenticationOptions: [ClientVpnAuthenticationRequest]?
    /// <p>The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.</p>
    public let clientCidrBlock: String?
    /// <p>The options for managing connection authorization for new client connections.</p>
    public let clientConnectOptions: ClientConnectOptions?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    public var clientToken: String?
    /// <p>Information about the client connection logging options.</p>
    /// 		       <p>If you enable client connection logging, data about client connections is sent to a
    /// 			Cloudwatch Logs log stream. The following information is logged:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Client connection requests</p>
    ///             </li>
    ///             <li>
    ///                <p>Client connection results (successful and unsuccessful)</p>
    ///             </li>
    ///             <li>
    ///                <p>Reasons for unsuccessful client connection requests</p>
    ///             </li>
    ///             <li>
    ///                <p>Client connection termination time</p>
    ///             </li>
    ///          </ul>
    public let connectionLogOptions: ConnectionLogOptions?
    /// <p>A brief description of the Client VPN endpoint.</p>
    public let description: String?
    /// <p>Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can
    /// 			have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.</p>
    public let dnsServers: [String]?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.</p>
    public let securityGroupIds: [String]?
    /// <p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
    ///         <p>Default Value: <code>enabled</code>
    ///          </p>
    public let selfServicePortal: SelfServicePortal?
    /// <p>The ARN of the server certificate. For more information, see
    /// 			the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p>
    public let serverCertificateArn: String?
    /// <p>Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.</p>
    /// 		       <p>By default, split-tunnel on a VPN endpoint is disabled.</p>
    /// 		       <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS
    /// 				Client VPN Administrator Guide</i>.</p>
    public let splitTunnel: Bool
    /// <p>The tags to apply to the Client VPN endpoint during creation.</p>
    public let tagSpecifications: [TagSpecification]?
    /// <p>The transport protocol to be used by the VPN session.</p>
    /// 		       <p>Default value: <code>udp</code>
    ///          </p>
    public let transportProtocol: TransportProtocol?
    /// <p>The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.</p>
    public let vpcId: String?
    /// <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
    /// 	        <p>Valid Values: <code>443</code> | <code>1194</code>
    ///          </p>
    /// 	        <p>Default Value: <code>443</code>
    ///          </p>
    public let vpnPort: Int

    public init (
        authenticationOptions: [ClientVpnAuthenticationRequest]? = nil,
        clientCidrBlock: String? = nil,
        clientConnectOptions: ClientConnectOptions? = nil,
        clientToken: String? = nil,
        connectionLogOptions: ConnectionLogOptions? = nil,
        description: String? = nil,
        dnsServers: [String]? = nil,
        dryRun: Bool = false,
        securityGroupIds: [String]? = nil,
        selfServicePortal: SelfServicePortal? = nil,
        serverCertificateArn: String? = nil,
        splitTunnel: Bool = false,
        tagSpecifications: [TagSpecification]? = nil,
        transportProtocol: TransportProtocol? = nil,
        vpcId: String? = nil,
        vpnPort: Int = 0
    )
    {
        self.authenticationOptions = authenticationOptions
        self.clientCidrBlock = clientCidrBlock
        self.clientConnectOptions = clientConnectOptions
        self.clientToken = clientToken
        self.connectionLogOptions = connectionLogOptions
        self.description = description
        self.dnsServers = dnsServers
        self.dryRun = dryRun
        self.securityGroupIds = securityGroupIds
        self.selfServicePortal = selfServicePortal
        self.serverCertificateArn = serverCertificateArn
        self.splitTunnel = splitTunnel
        self.tagSpecifications = tagSpecifications
        self.transportProtocol = transportProtocol
        self.vpcId = vpcId
        self.vpnPort = vpnPort
    }
}
