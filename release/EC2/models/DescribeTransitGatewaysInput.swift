// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeTransitGatewaysInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>One or more filters. The possible values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically
    ///                associated with the default association route table (<code>enable</code> | <code>disable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate
    ///                routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled  (<code>enable</code> | <code>disable</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>owner-id</code> - The ID of the AWS account that owns the transit gateway.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>state</code> - The state of the transit gateway (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>modifying</code> | <code>pending</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    public let maxResults: Int
    /// <p>The token for the next page of results.</p>
    public let nextToken: String?
    /// <p>The IDs of the transit gateways.</p>
    public let transitGatewayIds: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        transitGatewayIds: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.transitGatewayIds = transitGatewayIds
    }
}
