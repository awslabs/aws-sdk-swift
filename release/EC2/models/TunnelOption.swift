// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The VPN tunnel options.</p>
public struct TunnelOption: Equatable {
    /// <p>The action to take after a DPD timeout occurs.</p>
    public let dpdTimeoutAction: String?
    /// <p>The number of seconds after which a DPD timeout occurs.</p>
    public let dpdTimeoutSeconds: Int
    /// <p>The IKE versions that are permitted for the VPN tunnel.</p>
    public let ikeVersions: [IKEVersionsListValue]?
    /// <p>The external IP address of the VPN tunnel.</p>
    public let outsideIpAddress: String?
    /// <p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.</p>
    public let phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]?
    /// <p>The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.</p>
    public let phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]?
    /// <p>The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.</p>
    public let phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]?
    /// <p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>
    public let phase1LifetimeSeconds: Int
    /// <p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.</p>
    public let phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]?
    /// <p>The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.</p>
    public let phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]?
    /// <p>The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.</p>
    public let phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]?
    /// <p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>
    public let phase2LifetimeSeconds: Int
    /// <p>The pre-shared key (PSK) to establish initial authentication between the virtual
    ///             private gateway and the customer gateway.</p>
    public let preSharedKey: String?
    /// <p>The percentage of the rekey window determined by <code>RekeyMarginTimeSeconds</code> during which the rekey time is randomly selected.</p>
    public let rekeyFuzzPercentage: Int
    /// <p>The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey.</p>
    public let rekeyMarginTimeSeconds: Int
    /// <p>The number of packets in an IKE replay window.</p>
    public let replayWindowSize: Int
    /// <p>The action to take when the establishing the VPN tunnels for a VPN connection.</p>
    public let startupAction: String?
    /// <p>The range of inside IPv4 addresses for the tunnel.</p>
    public let tunnelInsideCidr: String?
    /// <p>The range of inside IPv6 addresses for the tunnel.</p>
    public let tunnelInsideIpv6Cidr: String?

    public init (
        dpdTimeoutAction: String? = nil,
        dpdTimeoutSeconds: Int = 0,
        ikeVersions: [IKEVersionsListValue]? = nil,
        outsideIpAddress: String? = nil,
        phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]? = nil,
        phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]? = nil,
        phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]? = nil,
        phase1LifetimeSeconds: Int = 0,
        phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]? = nil,
        phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]? = nil,
        phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]? = nil,
        phase2LifetimeSeconds: Int = 0,
        preSharedKey: String? = nil,
        rekeyFuzzPercentage: Int = 0,
        rekeyMarginTimeSeconds: Int = 0,
        replayWindowSize: Int = 0,
        startupAction: String? = nil,
        tunnelInsideCidr: String? = nil,
        tunnelInsideIpv6Cidr: String? = nil
    )
    {
        self.dpdTimeoutAction = dpdTimeoutAction
        self.dpdTimeoutSeconds = dpdTimeoutSeconds
        self.ikeVersions = ikeVersions
        self.outsideIpAddress = outsideIpAddress
        self.phase1DHGroupNumbers = phase1DHGroupNumbers
        self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
        self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
        self.phase1LifetimeSeconds = phase1LifetimeSeconds
        self.phase2DHGroupNumbers = phase2DHGroupNumbers
        self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
        self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
        self.phase2LifetimeSeconds = phase2LifetimeSeconds
        self.preSharedKey = preSharedKey
        self.rekeyFuzzPercentage = rekeyFuzzPercentage
        self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
        self.replayWindowSize = replayWindowSize
        self.startupAction = startupAction
        self.tunnelInsideCidr = tunnelInsideCidr
        self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
    }
}
