// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeVolumeStatusInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>action.code</code> - The action code for the event (for example,
    ///             <code>enable-volume-io</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>action.description</code> - A description of the action.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>action.event-id</code> - The event ID associated with the action.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>availability-zone</code> - The Availability Zone of the instance.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>event.description</code> - A description of the event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>event.event-id</code> - The event ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>event.event-type</code> - The event type (for <code>io-enabled</code>:
    ///             <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
    ///             <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> |
    ///             <code>io-performance:stalled</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>event.not-after</code> - The latest end time for the event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>event.not-before</code> - The earliest start time for the event.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>volume-status.details-name</code> - The cause for
    ///             <code>volume-status.status</code> (<code>io-enabled</code> |
    ///           <code>io-performance</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>volume-status.details-status</code> - The status of
    ///             <code>volume-status.details-name</code> (for <code>io-enabled</code>:
    ///             <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
    ///             <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> |
    ///             <code>stalled</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>volume-status.status</code> - The status of the volume (<code>ok</code> |
    ///             <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in
    ///       paginated output. When this parameter is used, the request only returns
    ///         <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
    ///       response element. The remaining results of the initial request can be seen by sending another
    ///       request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000;
    ///       if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.
    ///       If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You
    ///       cannot specify this parameter and the volume IDs parameter in the same request.</p>
    public let maxResults: Int
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code>
    ///       request. When the results of the request exceed <code>MaxResults</code>, this value can be
    ///       used to retrieve the next page of results. This value is <code>null</code> when there are no
    ///       more results to return.</p>
    public let nextToken: String?
    /// <p>The IDs of the volumes.</p>
    ///          <p>Default: Describes all your volumes.</p>
    public let volumeIds: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        volumeIds: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeIds = volumeIds
    }
}
