// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateNetworkAclEntryInput: Equatable {
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a
    ///   			protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is
    /// 			allowed, regardless of any ports or ICMP types or codes that you specify. If you specify
    /// 			protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and
    /// 			codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)
    /// 			and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    public let `protocol`: String?
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example
    /// 		        <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    public let cidrBlock: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    public let egress: Bool
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
    /// 		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    public let icmpTypeCode: IcmpTypeCode?
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example
    ///                 <code>2001:db8:1234:1a00::/64</code>).</p>
    public let ipv6CidrBlock: String?
    /// <p>The ID of the network ACL.</p>
    public let networkAclId: String?
    /// <p>TCP or UDP protocols: The range of ports the rule applies to.
    /// 		        Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    public let portRange: PortRange?
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    public let ruleAction: RuleAction?
    /// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
    ///          <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    public let ruleNumber: Int

    public init (
        `protocol`: String? = nil,
        cidrBlock: String? = nil,
        dryRun: Bool = false,
        egress: Bool = false,
        icmpTypeCode: IcmpTypeCode? = nil,
        ipv6CidrBlock: String? = nil,
        networkAclId: String? = nil,
        portRange: PortRange? = nil,
        ruleAction: RuleAction? = nil,
        ruleNumber: Int = 0
    )
    {
        self.`protocol` = `protocol`
        self.cidrBlock = cidrBlock
        self.dryRun = dryRun
        self.egress = egress
        self.icmpTypeCode = icmpTypeCode
        self.ipv6CidrBlock = ipv6CidrBlock
        self.networkAclId = networkAclId
        self.portRange = portRange
        self.ruleAction = ruleAction
        self.ruleNumber = ruleNumber
    }
}
