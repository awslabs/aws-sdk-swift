// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportImageOutput: Equatable {
    /// <p>The architecture of the virtual machine.</p>
    public let architecture: String?
    /// <p>A description of the import task.</p>
    public let description: String?
    /// <p>Indicates whether the AMI is encrypted.</p>
    public let encrypted: Bool
    /// <p>The target hypervisor of the import task.</p>
    public let hypervisor: String?
    /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
    public let imageId: String?
    /// <p>The task ID of the import image task.</p>
    public let importTaskId: String?
    /// <p>The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key
    ///    (CMK) that was used to create the encrypted AMI.</p>
    public let kmsKeyId: String?
    /// <p>The ARNs of the license configurations.</p>
    public let licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
    /// <p>The license type of the virtual machine.</p>
    public let licenseType: String?
    /// <p>The operating system of the virtual machine.</p>
    public let platform: String?
    /// <p>The progress of the task.</p>
    public let progress: String?
    /// <p>Information about the snapshots.</p>
    public let snapshotDetails: [SnapshotDetail]?
    /// <p>A brief status of the task.</p>
    public let status: String?
    /// <p>A detailed status message of the import task.</p>
    public let statusMessage: String?
    /// <p>Any tags assigned to the import image task.</p>
    public let tags: [Tag]?

    public init (
        architecture: String? = nil,
        description: String? = nil,
        encrypted: Bool = false,
        hypervisor: String? = nil,
        imageId: String? = nil,
        importTaskId: String? = nil,
        kmsKeyId: String? = nil,
        licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil,
        licenseType: String? = nil,
        platform: String? = nil,
        progress: String? = nil,
        snapshotDetails: [SnapshotDetail]? = nil,
        status: String? = nil,
        statusMessage: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.architecture = architecture
        self.description = description
        self.encrypted = encrypted
        self.hypervisor = hypervisor
        self.imageId = imageId
        self.importTaskId = importTaskId
        self.kmsKeyId = kmsKeyId
        self.licenseSpecifications = licenseSpecifications
        self.licenseType = licenseType
        self.platform = platform
        self.progress = progress
        self.snapshotDetails = snapshotDetails
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
    }
}
