// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ByoipCidrState {
    case advertised
    case deprovisioned
    case failedDeprovision
    case failedProvision
    case pendingDeprovision
    case pendingProvision
    case provisioned
    case provisionedNotPubliclyAdvertisable
    case sdkUnknown(String)
}

extension ByoipCidrState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ByoipCidrState] {
        return [
            .advertised,
            .deprovisioned,
            .failedDeprovision,
            .failedProvision,
            .pendingDeprovision,
            .pendingProvision,
            .provisioned,
            .provisionedNotPubliclyAdvertisable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .advertised: return "advertised"
        case .deprovisioned: return "deprovisioned"
        case .failedDeprovision: return "failed-deprovision"
        case .failedProvision: return "failed-provision"
        case .pendingDeprovision: return "pending-deprovision"
        case .pendingProvision: return "pending-provision"
        case .provisioned: return "provisioned"
        case .provisionedNotPubliclyAdvertisable: return "provisioned-not-publicly-advertisable"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ByoipCidrState(rawValue: rawValue) ?? ByoipCidrState.sdkUnknown(rawValue)
    }
}
