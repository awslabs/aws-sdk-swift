// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes VPN connection options.</p>
public struct VpnConnectionOptions: Equatable {
    /// <p>Indicates whether acceleration is enabled for the VPN connection.</p>
    public let enableAcceleration: Bool
    /// <p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    public let localIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    public let localIpv6NetworkCidr: String?
    /// <p>The IPv4 CIDR on the AWS side of the VPN connection.</p>
    public let remoteIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the AWS side of the VPN connection.</p>
    public let remoteIpv6NetworkCidr: String?
    /// <p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
    public let staticRoutesOnly: Bool
    /// <p>Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.</p>
    public let tunnelInsideIpVersion: TunnelInsideIpVersion?
    /// <p>Indicates the VPN tunnel options.</p>
    public let tunnelOptions: [TunnelOption]?

    public init (
        enableAcceleration: Bool = false,
        localIpv4NetworkCidr: String? = nil,
        localIpv6NetworkCidr: String? = nil,
        remoteIpv4NetworkCidr: String? = nil,
        remoteIpv6NetworkCidr: String? = nil,
        staticRoutesOnly: Bool = false,
        tunnelInsideIpVersion: TunnelInsideIpVersion? = nil,
        tunnelOptions: [TunnelOption]? = nil
    )
    {
        self.enableAcceleration = enableAcceleration
        self.localIpv4NetworkCidr = localIpv4NetworkCidr
        self.localIpv6NetworkCidr = localIpv6NetworkCidr
        self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
        self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
        self.staticRoutesOnly = staticRoutesOnly
        self.tunnelInsideIpVersion = tunnelInsideIpVersion
        self.tunnelOptions = tunnelOptions
    }
}
