// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>
public struct SpotOptions: Equatable {
    /// <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by
    ///          the EC2 Fleet.</p>
    ///          <p>If the allocation strategy is <code>lowest-price</code>, EC2 Fleet launches instances from
    ///          the Spot Instance pools with the lowest price. This is the default allocation strategy.</p>
    ///          <p>If the allocation strategy is <code>diversified</code>, EC2 Fleet launches instances from all
    ///          of the Spot Instance pools that you specify.</p>
    ///          <p>If the allocation strategy is <code>capacity-optimized</code> (recommended), EC2 Fleet
    ///          launches instances from Spot Instance pools with optimal capacity for the number of instances that
    ///          are launching. To give certain instance types a higher chance of launching first, use
    ///             <code>capacity-optimized-prioritized</code>. Set a priority for each instance type by
    ///          using the <code>Priority</code> parameter for <code>LaunchTemplateOverrides</code>. You can
    ///          assign the same priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
    ///          the priorities on a best-effort basis, but optimizes for capacity first.
    ///             <code>capacity-optimized-prioritized</code> is supported only if your fleet uses a
    ///          launch template. Note that if the On-Demand <code>AllocationStrategy</code> is set to
    ///             <code>prioritized</code>, the same priority is applied when fulfilling On-Demand
    ///          capacity.</p>
    public let allocationStrategy: SpotAllocationStrategy?
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
    /// <p>The number of Spot pools across which to allocate your target Spot capacity. Valid only
    ///          when <b>AllocationStrategy</b> is set to
    ///             <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and evenly allocates
    ///          your target Spot capacity across the number of Spot pools that you specify.</p>
    public let instancePoolsToUseCount: Int
    /// <p>The strategies for managing your workloads on your Spot Instances that will be
    ///          interrupted. Currently only the capacity rebalance strategy is available.</p>
    public let maintenanceStrategies: FleetSpotMaintenanceStrategies?
    /// <p>The maximum amount per hour for Spot Instances that you're willing to pay.</p>
    public let maxTotalPrice: String?
    /// <p>The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is
    ///          not reached, the fleet launches no instances.</p>
    public let minTargetCapacity: Int
    /// <p>Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported
    ///          only for fleets of type <code>instant</code>.</p>
    public let singleAvailabilityZone: Bool
    /// <p>Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
    ///          Supported only for fleets of type <code>instant</code>.</p>
    public let singleInstanceType: Bool

    public init (
        allocationStrategy: SpotAllocationStrategy? = nil,
        instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil,
        instancePoolsToUseCount: Int = 0,
        maintenanceStrategies: FleetSpotMaintenanceStrategies? = nil,
        maxTotalPrice: String? = nil,
        minTargetCapacity: Int = 0,
        singleAvailabilityZone: Bool = false,
        singleInstanceType: Bool = false
    )
    {
        self.allocationStrategy = allocationStrategy
        self.instanceInterruptionBehavior = instanceInterruptionBehavior
        self.instancePoolsToUseCount = instancePoolsToUseCount
        self.maintenanceStrategies = maintenanceStrategies
        self.maxTotalPrice = maxTotalPrice
        self.minTargetCapacity = minTargetCapacity
        self.singleAvailabilityZone = singleAvailabilityZone
        self.singleInstanceType = singleInstanceType
    }
}
