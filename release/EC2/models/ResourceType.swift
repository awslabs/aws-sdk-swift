// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ResourceType {
    case clientVpnEndpoint
    case customerGateway
    case dedicatedHost
    case dhcpOptions
    case egressOnlyInternetGateway
    case elasticGpu
    case elasticIp
    case exportImageTask
    case exportInstanceTask
    case fleet
    case fpgaImage
    case hostReservation
    case image
    case importImageTask
    case importSnapshotTask
    case instance
    case internetGateway
    case keyPair
    case launchTemplate
    case localGatewayRouteTableVpcAssociation
    case natgateway
    case networkAcl
    case networkInsightsAnalysis
    case networkInsightsPath
    case networkInterface
    case placementGroup
    case reservedInstances
    case routeTable
    case securityGroup
    case snapshot
    case spotFleetRequest
    case spotInstancesRequest
    case subnet
    case trafficMirrorFilter
    case trafficMirrorSession
    case trafficMirrorTarget
    case transitGateway
    case transitGatewayAttachment
    case transitGatewayConnectPeer
    case transitGatewayMulticastDomain
    case transitGatewayRouteTable
    case volume
    case vpc
    case vpcFlowLog
    case vpcPeeringConnection
    case vpnConnection
    case vpnGateway
    case sdkUnknown(String)
}

extension ResourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ResourceType] {
        return [
            .clientVpnEndpoint,
            .customerGateway,
            .dedicatedHost,
            .dhcpOptions,
            .egressOnlyInternetGateway,
            .elasticGpu,
            .elasticIp,
            .exportImageTask,
            .exportInstanceTask,
            .fleet,
            .fpgaImage,
            .hostReservation,
            .image,
            .importImageTask,
            .importSnapshotTask,
            .instance,
            .internetGateway,
            .keyPair,
            .launchTemplate,
            .localGatewayRouteTableVpcAssociation,
            .natgateway,
            .networkAcl,
            .networkInsightsAnalysis,
            .networkInsightsPath,
            .networkInterface,
            .placementGroup,
            .reservedInstances,
            .routeTable,
            .securityGroup,
            .snapshot,
            .spotFleetRequest,
            .spotInstancesRequest,
            .subnet,
            .trafficMirrorFilter,
            .trafficMirrorSession,
            .trafficMirrorTarget,
            .transitGateway,
            .transitGatewayAttachment,
            .transitGatewayConnectPeer,
            .transitGatewayMulticastDomain,
            .transitGatewayRouteTable,
            .volume,
            .vpc,
            .vpcFlowLog,
            .vpcPeeringConnection,
            .vpnConnection,
            .vpnGateway,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .clientVpnEndpoint: return "client-vpn-endpoint"
        case .customerGateway: return "customer-gateway"
        case .dedicatedHost: return "dedicated-host"
        case .dhcpOptions: return "dhcp-options"
        case .egressOnlyInternetGateway: return "egress-only-internet-gateway"
        case .elasticGpu: return "elastic-gpu"
        case .elasticIp: return "elastic-ip"
        case .exportImageTask: return "export-image-task"
        case .exportInstanceTask: return "export-instance-task"
        case .fleet: return "fleet"
        case .fpgaImage: return "fpga-image"
        case .hostReservation: return "host-reservation"
        case .image: return "image"
        case .importImageTask: return "import-image-task"
        case .importSnapshotTask: return "import-snapshot-task"
        case .instance: return "instance"
        case .internetGateway: return "internet-gateway"
        case .keyPair: return "key-pair"
        case .launchTemplate: return "launch-template"
        case .localGatewayRouteTableVpcAssociation: return "local-gateway-route-table-vpc-association"
        case .natgateway: return "natgateway"
        case .networkAcl: return "network-acl"
        case .networkInsightsAnalysis: return "network-insights-analysis"
        case .networkInsightsPath: return "network-insights-path"
        case .networkInterface: return "network-interface"
        case .placementGroup: return "placement-group"
        case .reservedInstances: return "reserved-instances"
        case .routeTable: return "route-table"
        case .securityGroup: return "security-group"
        case .snapshot: return "snapshot"
        case .spotFleetRequest: return "spot-fleet-request"
        case .spotInstancesRequest: return "spot-instances-request"
        case .subnet: return "subnet"
        case .trafficMirrorFilter: return "traffic-mirror-filter"
        case .trafficMirrorSession: return "traffic-mirror-session"
        case .trafficMirrorTarget: return "traffic-mirror-target"
        case .transitGateway: return "transit-gateway"
        case .transitGatewayAttachment: return "transit-gateway-attachment"
        case .transitGatewayConnectPeer: return "transit-gateway-connect-peer"
        case .transitGatewayMulticastDomain: return "transit-gateway-multicast-domain"
        case .transitGatewayRouteTable: return "transit-gateway-route-table"
        case .volume: return "volume"
        case .vpc: return "vpc"
        case .vpcFlowLog: return "vpc-flow-log"
        case .vpcPeeringConnection: return "vpc-peering-connection"
        case .vpnConnection: return "vpn-connection"
        case .vpnGateway: return "vpn-gateway"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
    }
}
