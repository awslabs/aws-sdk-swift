// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribePrincipalIdFormatInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining
    ///             results, make another call with the returned NextToken value. </p>
    public let maxResults: Int
    /// <p>The token to request the next page of results.</p>
    public let nextToken: String?
    /// <p>The type of resource: <code>bundle</code> |
    ///             <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    ///             <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    ///             <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    ///             <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    ///             <code>network-acl</code> | <code>network-acl-association</code> |
    ///             <code>network-interface</code> | <code>network-interface-attachment</code> |
    ///             <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    ///             <code>route-table-association</code> | <code>security-group</code> |
    ///             <code>snapshot</code> | <code>subnet</code> |
    ///             <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    ///             | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    ///             <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    ///          </p>
    public let resources: [String]?

    public init (
        dryRun: Bool = false,
        maxResults: Int = 0,
        nextToken: String? = nil,
        resources: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resources = resources
    }
}
