// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportImageInput: Equatable {
    /// <p>The architecture of the virtual machine.</p>
    ///          <p>Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code>
    ///          </p>
    public let architecture: String?
    /// <p>The client-specific data.</p>
    public let clientData: ClientData?
    /// <p>The token to enable idempotency for VM import requests.</p>
    public let clientToken: String?
    /// <p>A description string for the import image task.</p>
    public let description: String?
    /// <p>Information about the disk containers.</p>
    public let diskContainers: [ImageDiskContainer]?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used
    ///    unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the
    ///     <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    public let encrypted: Bool
    /// <p>The target hypervisor platform.</p>
    ///          <p>Valid values: <code>xen</code>
    ///          </p>
    public let hypervisor: String?
    /// <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the
    ///    encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this
    ///    parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is
    ///    specified, the <code>Encrypted</code> flag must also be set. </p>
    ///          <p>The CMK identifier may be provided in any of the following formats: </p>
    ///          <ul>
    ///             <li>
    ///                <p>Key ID</p>
    ///             </li>
    ///             <li>
    ///                <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
    ///             </li>
    ///          </ul>
    ///          <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
    ///    though you provided an invalid identifier. This action will eventually report failure. </p>
    ///          <p>The specified CMK must exist in the Region that the AMI is being copied to.</p>
    ///          <p>Amazon EBS does not support asymmetric CMKs.</p>
    public let kmsKeyId: String?
    /// <p>The ARNs of the license configurations.</p>
    public let licenseSpecifications: [ImportImageLicenseConfigurationRequest]?
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    ///          <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify
    ///     <code>AWS</code> to replace the source-system license with an AWS license, if appropriate. Specify <code>BYOL</code>
    ///    to retain the source-system license, if appropriate.</p>
    ///          <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party
    ///    cloud, such as AWS. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the
    ///    VM Import/Export User Guide.</p>
    public let licenseType: String?
    /// <p>The operating system of the virtual machine.</p>
    ///          <p>Valid values: <code>Windows</code> | <code>Linux</code>
    ///          </p>
    public let platform: String?
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    public let roleName: String?
    /// <p>The tags to apply to the import image task during creation.</p>
    public let tagSpecifications: [TagSpecification]?

    public init (
        architecture: String? = nil,
        clientData: ClientData? = nil,
        clientToken: String? = nil,
        description: String? = nil,
        diskContainers: [ImageDiskContainer]? = nil,
        dryRun: Bool = false,
        encrypted: Bool = false,
        hypervisor: String? = nil,
        kmsKeyId: String? = nil,
        licenseSpecifications: [ImportImageLicenseConfigurationRequest]? = nil,
        licenseType: String? = nil,
        platform: String? = nil,
        roleName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil
    )
    {
        self.architecture = architecture
        self.clientData = clientData
        self.clientToken = clientToken
        self.description = description
        self.diskContainers = diskContainers
        self.dryRun = dryRun
        self.encrypted = encrypted
        self.hypervisor = hypervisor
        self.kmsKeyId = kmsKeyId
        self.licenseSpecifications = licenseSpecifications
        self.licenseType = licenseType
        self.platform = platform
        self.roleName = roleName
        self.tagSpecifications = tagSpecifications
    }
}
