// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for ModifyVpcEndpoint.</p>
public struct ModifyVpcEndpointInput: Equatable {
    /// <p>(Gateway endpoint) One or more route tables IDs to associate with the endpoint.</p>
    public let addRouteTableIds: [String]?
    /// <p>(Interface endpoint) One or more security group IDs to associate with the network interface.</p>
    public let addSecurityGroupIds: [String]?
    /// <p>(Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.</p>
    public let addSubnetIds: [String]?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
    ///             be in valid JSON format.</p>
    public let policyDocument: String?
    /// <p>(Interface endpoint) Indicates whether a private hosted zone is associated with the
    ///             VPC.</p>
    public let privateDnsEnabled: Bool
    /// <p>(Gateway endpoint) One or more route table IDs to disassociate from the endpoint.</p>
    public let removeRouteTableIds: [String]?
    /// <p>(Interface endpoint) One or more security group IDs to disassociate from the network interface.</p>
    public let removeSecurityGroupIds: [String]?
    /// <p>(Interface endpoint) One or more subnets IDs in which to remove the endpoint.</p>
    public let removeSubnetIds: [String]?
    /// <p>(Gateway endpoint) Specify <code>true</code> to reset the policy document to the
    ///             default policy. The default policy allows full access to the service.</p>
    public let resetPolicy: Bool
    /// <p>The ID of the endpoint.</p>
    public let vpcEndpointId: String?

    public init (
        addRouteTableIds: [String]? = nil,
        addSecurityGroupIds: [String]? = nil,
        addSubnetIds: [String]? = nil,
        dryRun: Bool = false,
        policyDocument: String? = nil,
        privateDnsEnabled: Bool = false,
        removeRouteTableIds: [String]? = nil,
        removeSecurityGroupIds: [String]? = nil,
        removeSubnetIds: [String]? = nil,
        resetPolicy: Bool = false,
        vpcEndpointId: String? = nil
    )
    {
        self.addRouteTableIds = addRouteTableIds
        self.addSecurityGroupIds = addSecurityGroupIds
        self.addSubnetIds = addSubnetIds
        self.dryRun = dryRun
        self.policyDocument = policyDocument
        self.privateDnsEnabled = privateDnsEnabled
        self.removeRouteTableIds = removeRouteTableIds
        self.removeSecurityGroupIds = removeSecurityGroupIds
        self.removeSubnetIds = removeSubnetIds
        self.resetPolicy = resetPolicy
        self.vpcEndpointId = vpcEndpointId
    }
}
