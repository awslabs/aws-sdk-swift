// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a flow log.</p>
public struct FlowLog: Equatable {
    /// <p>The date and time the flow log was created.</p>
    public let creationTime: Date?
    /// <p>Information about the error that occurred. <code>Rate limited</code> indicates that
    ///             CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've
    ///             reached the limit on the number of log groups that you can create. <code>Access
    ///                 error</code> indicates that the IAM role associated with the flow log does not have
    ///             sufficient permissions to publish to CloudWatch Logs. <code>Unknown error</code> indicates an
    ///             internal error.</p>
    public let deliverLogsErrorMessage: String?
    /// <p>The ARN of the IAM role that posts logs to CloudWatch Logs.</p>
    public let deliverLogsPermissionArn: String?
    /// <p>The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p>
    public let deliverLogsStatus: String?
    /// <p>The flow log ID.</p>
    public let flowLogId: String?
    /// <p>The status of the flow log (<code>ACTIVE</code>).</p>
    public let flowLogStatus: String?
    /// <p>Specifies the destination to which the flow log data is published. Flow log data can be
    ///             published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs,
    ///             this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which
    ///             the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN
    ///             of the Amazon S3 bucket to which the data is published.</p>
    public let logDestination: String?
    /// <p>Specifies the type of destination to which the flow log data is published. Flow log data can be
    ///             published to CloudWatch Logs or Amazon S3.</p>
    public let logDestinationType: LogDestinationType?
    /// <p>The format of the flow log record.</p>
    public let logFormat: String?
    /// <p>The name of the flow log group.</p>
    public let logGroupName: String?
    /// <p>The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record.</p>
    ///         <p>When a network interface is attached to a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
    ///                 instance</a>, the aggregation interval is always 60 seconds (1 minute) or less,
    ///             regardless of the specified value.</p>
    ///         <p>Valid Values: <code>60</code> | <code>600</code>
    ///          </p>
    public let maxAggregationInterval: Int
    /// <p>The ID of the resource on which the flow log was created.</p>
    public let resourceId: String?
    /// <p>The tags for the flow log.</p>
    public let tags: [Tag]?
    /// <p>The type of traffic captured for the flow log.</p>
    public let trafficType: TrafficType?

    public init (
        creationTime: Date? = nil,
        deliverLogsErrorMessage: String? = nil,
        deliverLogsPermissionArn: String? = nil,
        deliverLogsStatus: String? = nil,
        flowLogId: String? = nil,
        flowLogStatus: String? = nil,
        logDestination: String? = nil,
        logDestinationType: LogDestinationType? = nil,
        logFormat: String? = nil,
        logGroupName: String? = nil,
        maxAggregationInterval: Int = 0,
        resourceId: String? = nil,
        tags: [Tag]? = nil,
        trafficType: TrafficType? = nil
    )
    {
        self.creationTime = creationTime
        self.deliverLogsErrorMessage = deliverLogsErrorMessage
        self.deliverLogsPermissionArn = deliverLogsPermissionArn
        self.deliverLogsStatus = deliverLogsStatus
        self.flowLogId = flowLogId
        self.flowLogStatus = flowLogStatus
        self.logDestination = logDestination
        self.logDestinationType = logDestinationType
        self.logFormat = logFormat
        self.logGroupName = logGroupName
        self.maxAggregationInterval = maxAggregationInterval
        self.resourceId = resourceId
        self.tags = tags
        self.trafficType = trafficType
    }
}
