// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeStoreImageTasksInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///       Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>task-state</code> - Returns tasks in a certain state (<code>InProgress</code> |
    ///             <code>Completed</code> | <code>Failed</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>bucket</code> - Returns task information for tasks that targeted a specific
    ///           bucket. For the filter value, specify the bucket name.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.</p>
    public let imageIds: [String]?
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining
    ///       results, make another call with the returned <code>NextToken</code> value. This value can be
    ///       between 1 and 200. You cannot specify this parameter and the <code>ImageIDs</code> parameter
    ///       in the same call.</p>
    public let maxResults: Int
    /// <p>The token for the next page of results.</p>
    public let nextToken: String?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.imageIds = imageIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
