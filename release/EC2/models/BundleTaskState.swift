// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BundleTaskState {
    case bundling
    case cancelling
    case complete
    case failed
    case pending
    case storing
    case waitingForShutdown
    case sdkUnknown(String)
}

extension BundleTaskState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BundleTaskState] {
        return [
            .bundling,
            .cancelling,
            .complete,
            .failed,
            .pending,
            .storing,
            .waitingForShutdown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bundling: return "bundling"
        case .cancelling: return "cancelling"
        case .complete: return "complete"
        case .failed: return "failed"
        case .pending: return "pending"
        case .storing: return "storing"
        case .waitingForShutdown: return "waiting-for-shutdown"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BundleTaskState(rawValue: rawValue) ?? BundleTaskState.sdkUnknown(rawValue)
    }
}
