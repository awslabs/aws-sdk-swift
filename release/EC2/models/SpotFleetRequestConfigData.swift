// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes the configuration of a Spot Fleet request.</p>
public struct SpotFleetRequestConfigData: Equatable {
    /// <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by
    ///             the Spot Fleet request.</p>
    ///         <p>If the allocation strategy is <code>lowestPrice</code>, Spot Fleet launches instances from
    ///             the Spot Instance pools with the lowest price. This is the default allocation strategy.</p>
    ///         <p>If the allocation strategy is <code>diversified</code>, Spot Fleet launches instances from
    ///             all the Spot Instance pools that you specify.</p>
    ///         <p>If the allocation strategy is <code>capacityOptimized</code> (recommended), Spot Fleet
    ///             launches instances from Spot Instance pools with optimal capacity for the number of instances
    ///             that are launching. To give certain instance types a higher chance of launching first,
    ///             use <code>capacityOptimizedPrioritized</code>. Set a priority for each instance type by
    ///             using the <code>Priority</code> parameter for <code>LaunchTemplateOverrides</code>. You
    ///             can assign the same priority to different <code>LaunchTemplateOverrides</code>. EC2
    ///             implements the priorities on a best-effort basis, but optimizes for capacity first.
    ///                 <code>capacityOptimizedPrioritized</code> is supported only if your Spot Fleet uses a
    ///             launch template. Note that if the <code>OnDemandAllocationStrategy</code> is set to
    ///                 <code>prioritized</code>, the same priority is applied when fulfilling On-Demand
    ///             capacity.</p>
    public let allocationStrategy: AllocationStrategy?
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of
    ///             your listings. This helps to avoid duplicate listings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    public let clientToken: String?
    /// <p>Indicates whether running Spot Instances should be terminated if you decrease the target
    ///             capacity of the Spot Fleet request below the current size of the Spot Fleet.</p>
    public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
    /// <p>The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.</p>
    public let fulfilledCapacity: Double
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that
    ///             grants the Spot Fleet the permission to request, launch, terminate, and tag instances on
    ///             your behalf. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites">Spot
    ///                 Fleet prerequisites</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>. Spot Fleet
    ///             can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using
    ///           <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests">CancelSpotFleetRequests</a> or when the Spot Fleet request expires, if
    ///             you set <code>TerminateInstancesWithExpiration</code>.</p>
    public let iamFleetRole: String?
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
    /// <p>The number of Spot pools across which to allocate your target Spot capacity. Valid
    ///             only when Spot <b>AllocationStrategy</b> is set to
    ///                 <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and evenly
    ///             allocates your target Spot capacity across the number of Spot pools that you
    ///             specify.</p>
    public let instancePoolsToUseCount: Int
    /// <p>The launch specifications for the Spot Fleet request. If you specify
    ///                 <code>LaunchSpecifications</code>, you can't specify
    ///                 <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in your
    ///             request, you must use <code>LaunchTemplateConfigs</code>.</p>
    public let launchSpecifications: [SpotFleetLaunchSpecification]?
    /// <p>The launch template and overrides. If you specify <code>LaunchTemplateConfigs</code>,
    ///             you can't specify <code>LaunchSpecifications</code>. If you include On-Demand capacity
    ///             in your request, you must use <code>LaunchTemplateConfigs</code>.</p>
    public let launchTemplateConfigs: [LaunchTemplateConfig]?
    /// <p>One or more Classic Load Balancers and target groups to attach to the Spot Fleet request.
    ///           Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.</p>
    ///          <p>With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types:
    ///           C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.</p>
    public let loadBalancersConfig: LoadBalancersConfig?
    /// <p>The order of the launch template overrides to use in fulfilling On-Demand capacity.
    ///             If you specify <code>lowestPrice</code>, Spot Fleet uses price to determine the order,
    ///             launching the lowest price first. If you specify <code>prioritized</code>, Spot Fleet uses the
    ///             priority that you assign to each Spot Fleet launch template override, launching the highest
    ///             priority first. If you do not specify a value, Spot Fleet defaults to
    ///             <code>lowestPrice</code>.</p>
    public let onDemandAllocationStrategy: OnDemandAllocationStrategy?
    /// <p>The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.</p>
    public let onDemandFulfilledCapacity: Double
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.
    ///             You can use the <code>onDemandMaxTotalPrice</code> parameter, the <code>spotMaxTotalPrice</code>
    ///             parameter, or both parameters to ensure that your fleet cost does not exceed
    ///             your budget. If you set a maximum price per hour for the On-Demand Instances and
    ///             Spot Instances in your request, Spot Fleet will launch instances until it reaches
    ///             the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached,
    ///             the fleet stops launching instances even if it hasn’t met the target capacity.</p>
    public let onDemandMaxTotalPrice: String?
    /// <p>The number of On-Demand units to request. You can choose to set the target capacity
    ///             in terms of instances or a performance characteristic that is important to your
    ///             application workload, such as vCPUs, memory, or I/O. If the request type is
    ///                 <code>maintain</code>, you can specify a target capacity of 0 and add capacity
    ///             later.</p>
    public let onDemandTargetCapacity: Int
    /// <p>Indicates whether Spot Fleet should replace unhealthy instances.</p>
    public let replaceUnhealthyInstances: Bool
    /// <p>The strategies for managing your Spot Instances that are at an
    ///             elevated risk of being interrupted.</p>
    public let spotMaintenanceStrategies: SpotMaintenanceStrategies?
    /// <p>The maximum amount per hour for Spot Instances that you're willing to pay.
    ///             You can use the <code>spotdMaxTotalPrice</code> parameter, the <code>onDemandMaxTotalPrice</code>
    ///             parameter, or both parameters to ensure that your fleet cost does not exceed
    ///             your budget. If you set a maximum price per hour for the On-Demand Instances and
    ///             Spot Instances in your request, Spot Fleet will launch instances until it reaches
    ///             the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached,
    ///             the fleet stops launching instances even if it hasn’t met the target capacity.</p>
    public let spotMaxTotalPrice: String?
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.</p>
    public let spotPrice: String?
    /// <p>The key-value pair for tagging the Spot Fleet request on creation. The value for
    ///                 <code>ResourceType</code> must be <code>spot-fleet-request</code>, otherwise the
    ///             Spot Fleet request fails. To tag instances at launch, specify the tags in the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
    ///                 template</a> (valid only if you use <code>LaunchTemplateConfigs</code>) or in
    ///             the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html">
    ///                <code>SpotFleetTagSpecification</code>
    ///             </a> (valid only if you use
    ///                 <code>LaunchSpecifications</code>). For information about tagging after launch, see
    ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging Your Resources</a>.</p>
    public let tagSpecifications: [TagSpecification]?
    /// <p>The number of units to request for the Spot Fleet. You can choose to set the target
    ///             capacity in terms of instances or a performance characteristic that is important to your
    ///             application workload, such as vCPUs, memory, or I/O. If the request type is
    ///                 <code>maintain</code>, you can specify a target capacity of 0 and add capacity
    ///             later.</p>
    public let targetCapacity: Int
    /// <p>Indicates whether running Spot Instances are terminated when the Spot Fleet request
    ///             expires.</p>
    public let terminateInstancesWithExpiration: Bool
    /// <p>The type of request. Indicates whether the Spot Fleet only requests the target capacity
    ///             or also attempts to maintain it. When this value is <code>request</code>, the Spot Fleet
    ///             only places the required requests. It does not attempt to replenish Spot Instances if
    ///             capacity is diminished, nor does it submit requests in alternative Spot pools if
    ///             capacity is not available. When this value is <code>maintain</code>, the Spot Fleet
    ///             maintains the target capacity. The Spot Fleet places the required requests to meet
    ///             capacity and automatically replenishes any interrupted instances. Default:
    ///                 <code>maintain</code>. <code>instant</code> is listed but is not used by Spot
    ///             Fleet.</p>
    public let type: FleetType?
    /// <p>The start date and time of the request, in UTC format
    ///                 (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    ///             By default, Amazon EC2 starts fulfilling the request immediately.</p>
    public let validFrom: Date?
    /// <p>The end date and time of the request, in UTC format
    ///                 (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    ///             After the end date and time, no new Spot Instance requests are placed or able to fulfill the request.
    ///             If no value is specified, the Spot Fleet request remains until you cancel it.</p>
    public let validUntil: Date?

    public init (
        allocationStrategy: AllocationStrategy? = nil,
        clientToken: String? = nil,
        excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil,
        fulfilledCapacity: Double = 0.0,
        iamFleetRole: String? = nil,
        instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil,
        instancePoolsToUseCount: Int = 0,
        launchSpecifications: [SpotFleetLaunchSpecification]? = nil,
        launchTemplateConfigs: [LaunchTemplateConfig]? = nil,
        loadBalancersConfig: LoadBalancersConfig? = nil,
        onDemandAllocationStrategy: OnDemandAllocationStrategy? = nil,
        onDemandFulfilledCapacity: Double = 0.0,
        onDemandMaxTotalPrice: String? = nil,
        onDemandTargetCapacity: Int = 0,
        replaceUnhealthyInstances: Bool = false,
        spotMaintenanceStrategies: SpotMaintenanceStrategies? = nil,
        spotMaxTotalPrice: String? = nil,
        spotPrice: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        targetCapacity: Int = 0,
        terminateInstancesWithExpiration: Bool = false,
        type: FleetType? = nil,
        validFrom: Date? = nil,
        validUntil: Date? = nil
    )
    {
        self.allocationStrategy = allocationStrategy
        self.clientToken = clientToken
        self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
        self.fulfilledCapacity = fulfilledCapacity
        self.iamFleetRole = iamFleetRole
        self.instanceInterruptionBehavior = instanceInterruptionBehavior
        self.instancePoolsToUseCount = instancePoolsToUseCount
        self.launchSpecifications = launchSpecifications
        self.launchTemplateConfigs = launchTemplateConfigs
        self.loadBalancersConfig = loadBalancersConfig
        self.onDemandAllocationStrategy = onDemandAllocationStrategy
        self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
        self.onDemandMaxTotalPrice = onDemandMaxTotalPrice
        self.onDemandTargetCapacity = onDemandTargetCapacity
        self.replaceUnhealthyInstances = replaceUnhealthyInstances
        self.spotMaintenanceStrategies = spotMaintenanceStrategies
        self.spotMaxTotalPrice = spotMaxTotalPrice
        self.spotPrice = spotPrice
        self.tagSpecifications = tagSpecifications
        self.targetCapacity = targetCapacity
        self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
        self.type = type
        self.validFrom = validFrom
        self.validUntil = validUntil
    }
}
