// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ReplaceRouteInput: Equatable {
    /// <p>[IPv4 traffic only] The ID of a carrier gateway.</p>
    public let carrierGatewayId: String?
    /// <p>The IPv4 CIDR address block used for the destination match. The value that you
    /// 			provide must match the CIDR of an existing route in the table.</p>
    public let destinationCidrBlock: String?
    /// <p>The IPv6 CIDR address block used for the destination match. The value that you
    /// 			provide must match the CIDR of an existing route in the table.</p>
    public let destinationIpv6CidrBlock: String?
    /// <p>The ID of the prefix list for the route.</p>
    public let destinationPrefixListId: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>
    public let egressOnlyInternetGatewayId: String?
    /// <p>The ID of an internet gateway or virtual private gateway.</p>
    public let gatewayId: String?
    /// <p>The ID of a NAT instance in your VPC.</p>
    public let instanceId: String?
    /// <p>The ID of the local gateway.</p>
    public let localGatewayId: String?
    /// <p>Specifies whether to reset the local route to its default target (<code>local</code>).</p>
    public let localTarget: Bool
    /// <p>[IPv4 traffic only] The ID of a NAT gateway.</p>
    public let natGatewayId: String?
    /// <p>The ID of a network interface.</p>
    public let networkInterfaceId: String?
    /// <p>The ID of the route table.</p>
    public let routeTableId: String?
    /// <p>The ID of a transit gateway.</p>
    public let transitGatewayId: String?
    /// <p>The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>
    public let vpcEndpointId: String?
    /// <p>The ID of a VPC peering connection.</p>
    public let vpcPeeringConnectionId: String?

    public init (
        carrierGatewayId: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationIpv6CidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool = false,
        egressOnlyInternetGatewayId: String? = nil,
        gatewayId: String? = nil,
        instanceId: String? = nil,
        localGatewayId: String? = nil,
        localTarget: Bool = false,
        natGatewayId: String? = nil,
        networkInterfaceId: String? = nil,
        routeTableId: String? = nil,
        transitGatewayId: String? = nil,
        vpcEndpointId: String? = nil,
        vpcPeeringConnectionId: String? = nil
    )
    {
        self.carrierGatewayId = carrierGatewayId
        self.destinationCidrBlock = destinationCidrBlock
        self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
        self.destinationPrefixListId = destinationPrefixListId
        self.dryRun = dryRun
        self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        self.gatewayId = gatewayId
        self.instanceId = instanceId
        self.localGatewayId = localGatewayId
        self.localTarget = localTarget
        self.natGatewayId = natGatewayId
        self.networkInterfaceId = networkInterfaceId
        self.routeTableId = routeTableId
        self.transitGatewayId = transitGatewayId
        self.vpcEndpointId = vpcEndpointId
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}
