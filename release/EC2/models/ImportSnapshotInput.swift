// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportSnapshotInput: Equatable {
    /// <p>The client-specific data.</p>
    public let clientData: ClientData?
    /// <p>Token to enable idempotency for VM import requests.</p>
    public let clientToken: String?
    /// <p>The description string for the import snapshot task.</p>
    public let description: String?
    /// <p>Information about the disk container.</p>
    public let diskContainer: SnapshotDiskContainer?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is
    ///    used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the
    ///     <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    public let encrypted: Bool
    /// <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the
    ///    encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this
    ///    parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is
    ///    specified, the <code>Encrypted</code> flag must also be set. </p>
    ///          <p>The CMK identifier may be provided in any of the following formats: </p>
    ///          <ul>
    ///             <li>
    ///                <p>Key ID</p>
    ///             </li>
    ///             <li>
    ///                <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
    ///             </li>
    ///          </ul>
    ///          <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
    ///    though you provided an invalid identifier. This action will eventually report failure. </p>
    ///          <p>The specified CMK must exist in the Region that the snapshot is being copied to.</p>
    ///          <p>Amazon EBS does not support asymmetric CMKs.</p>
    public let kmsKeyId: String?
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    public let roleName: String?
    /// <p>The tags to apply to the import snapshot task during creation.</p>
    public let tagSpecifications: [TagSpecification]?

    public init (
        clientData: ClientData? = nil,
        clientToken: String? = nil,
        description: String? = nil,
        diskContainer: SnapshotDiskContainer? = nil,
        dryRun: Bool = false,
        encrypted: Bool = false,
        kmsKeyId: String? = nil,
        roleName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil
    )
    {
        self.clientData = clientData
        self.clientToken = clientToken
        self.description = description
        self.diskContainer = diskContainer
        self.dryRun = dryRun
        self.encrypted = encrypted
        self.kmsKeyId = kmsKeyId
        self.roleName = roleName
        self.tagSpecifications = tagSpecifications
    }
}
