// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TransportProtocol {
    case tcp
    case udp
    case sdkUnknown(String)
}

extension TransportProtocol : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TransportProtocol] {
        return [
            .tcp,
            .udp,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .tcp: return "tcp"
        case .udp: return "udp"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TransportProtocol(rawValue: rawValue) ?? TransportProtocol.sdkUnknown(rawValue)
    }
}
