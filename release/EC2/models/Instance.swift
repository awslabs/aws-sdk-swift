// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an instance.</p>
public struct Instance: Equatable {
    /// <p>The AMI launch index, which can be used to find this instance in the launch
    ///             group.</p>
    public let amiLaunchIndex: Int
    /// <p>The architecture of the image.</p>
    public let architecture: ArchitectureValues?
    /// <p>Any block device mapping entries for the instance.</p>
    public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
    /// <p>The boot mode of the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot modes</a> in the
    ///                 <i>Amazon EC2 User Guide</i>.</p>
    public let bootMode: BootModeValues?
    /// <p>The ID of the Capacity Reservation.</p>
    public let capacityReservationId: String?
    /// <p>Information about the Capacity Reservation targeting option.</p>
    public let capacityReservationSpecification: CapacityReservationSpecificationResponse?
    /// <p>The idempotency token you provided when you launched the instance, if
    ///             applicable.</p>
    public let clientToken: String?
    /// <p>The CPU options for the instance.</p>
    public let cpuOptions: CpuOptions?
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
    ///             provides dedicated throughput to Amazon EBS and an optimized configuration stack to
    ///             provide optimal I/O performance. This optimization isn't available with all instance
    ///             types. Additional usage charges apply when using an EBS Optimized instance.</p>
    public let ebsOptimized: Bool
    /// <p>The Elastic GPU associated with the instance.</p>
    public let elasticGpuAssociations: [ElasticGpuAssociation]?
    /// <p> The elastic inference accelerator associated with the instance.</p>
    public let elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]?
    /// <p>Specifies whether enhanced networking with ENA is enabled.</p>
    public let enaSupport: Bool
    /// <p>Indicates whether the instance is enabled for AWS Nitro Enclaves.</p>
    public let enclaveOptions: EnclaveOptions?
    /// <p>Indicates whether the instance is enabled for hibernation.</p>
    public let hibernationOptions: HibernationOptions?
    /// <p>The hypervisor type of the instance. The value <code>xen</code> is used for both Xen and
    ///             Nitro hypervisors.</p>
    public let hypervisor: HypervisorType?
    /// <p>The IAM instance profile associated with the instance, if applicable.</p>
    public let iamInstanceProfile: IamInstanceProfile?
    /// <p>The ID of the AMI used to launch the instance.</p>
    public let imageId: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>Indicates whether this is a Spot Instance or a Scheduled Instance.</p>
    public let instanceLifecycle: InstanceLifecycleType?
    /// <p>The instance type.</p>
    public let instanceType: InstanceType?
    /// <p>The kernel associated with this instance, if applicable.</p>
    public let kernelId: String?
    /// <p>The name of the key pair, if this instance was launched with an associated key
    ///             pair.</p>
    public let keyName: String?
    /// <p>The time the instance was launched.</p>
    public let launchTime: Date?
    /// <p>The license configurations.</p>
    public let licenses: [LicenseConfiguration]?
    /// <p>The metadata options for the instance.</p>
    public let metadataOptions: InstanceMetadataOptionsResponse?
    /// <p>The monitoring for the instance.</p>
    public let monitoring: Monitoring?
    /// <p>[EC2-VPC] The network interfaces for the instance.</p>
    public let networkInterfaces: [InstanceNetworkInterface]?
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    public let outpostArn: String?
    /// <p>The location where the instance launched, if applicable.</p>
    public let placement: Placement?
    /// <p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
    public let platform: PlatformValues?
    /// <p>(IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname
    ///             can only be used inside the Amazon EC2 network. This name is not available until the
    ///             instance enters the <code>running</code> state. </p>
    ///         <p>[EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS
    ///             hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not
    ///             using the Amazon-provided DNS server in your VPC, your custom domain name servers must
    ///             resolve the hostname as appropriate.</p>
    public let privateDnsName: String?
    /// <p>The private IPv4 address assigned to the instance.</p>
    public let privateIpAddress: String?
    /// <p>The product codes attached to this instance, if applicable.</p>
    public let productCodes: [ProductCode]?
    /// <p>(IPv4 only) The public DNS name assigned to the instance. This name is not available
    ///             until the instance enters the <code>running</code> state. For EC2-VPC, this name is only
    ///             available if you've enabled DNS hostnames for your VPC.</p>
    public let publicDnsName: String?
    /// <p>The public IPv4 address, or the Carrier IP address assigned to the instance, if
    ///             applicable.</p>
    ///         <p>A Carrier IP address only applies to an instance launched in a subnet associated with
    ///             a Wavelength Zone.</p>
    public let publicIpAddress: String?
    /// <p>The RAM disk associated with this instance, if applicable.</p>
    public let ramdiskId: String?
    /// <p>The device name of the root device volume (for example,
    ///             <code>/dev/sda1</code>).</p>
    public let rootDeviceName: String?
    /// <p>The root device type used by the AMI. The AMI can use an EBS volume or an instance
    ///             store volume.</p>
    public let rootDeviceType: DeviceType?
    /// <p>The security groups for the instance.</p>
    public let securityGroups: [GroupIdentifier]?
    /// <p>Indicates whether source/destination checking is enabled.</p>
    public let sourceDestCheck: Bool
    /// <p>If the request is a Spot Instance request, the ID of the request.</p>
    public let spotInstanceRequestId: String?
    /// <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface
    ///             is enabled.</p>
    public let sriovNetSupport: String?
    /// <p>The current state of the instance.</p>
    public let state: InstanceState?
    /// <p>The reason for the most recent state transition.</p>
    public let stateReason: StateReason?
    /// <p>The reason for the most recent state transition. This might be an empty string.</p>
    public let stateTransitionReason: String?
    /// <p>[EC2-VPC] The ID of the subnet in which the instance is running.</p>
    public let subnetId: String?
    /// <p>Any tags assigned to the instance.</p>
    public let tags: [Tag]?
    /// <p>The virtualization type of the instance.</p>
    public let virtualizationType: VirtualizationType?
    /// <p>[EC2-VPC] The ID of the VPC in which the instance is running.</p>
    public let vpcId: String?

    public init (
        amiLaunchIndex: Int = 0,
        architecture: ArchitectureValues? = nil,
        blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil,
        bootMode: BootModeValues? = nil,
        capacityReservationId: String? = nil,
        capacityReservationSpecification: CapacityReservationSpecificationResponse? = nil,
        clientToken: String? = nil,
        cpuOptions: CpuOptions? = nil,
        ebsOptimized: Bool = false,
        elasticGpuAssociations: [ElasticGpuAssociation]? = nil,
        elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]? = nil,
        enaSupport: Bool = false,
        enclaveOptions: EnclaveOptions? = nil,
        hibernationOptions: HibernationOptions? = nil,
        hypervisor: HypervisorType? = nil,
        iamInstanceProfile: IamInstanceProfile? = nil,
        imageId: String? = nil,
        instanceId: String? = nil,
        instanceLifecycle: InstanceLifecycleType? = nil,
        instanceType: InstanceType? = nil,
        kernelId: String? = nil,
        keyName: String? = nil,
        launchTime: Date? = nil,
        licenses: [LicenseConfiguration]? = nil,
        metadataOptions: InstanceMetadataOptionsResponse? = nil,
        monitoring: Monitoring? = nil,
        networkInterfaces: [InstanceNetworkInterface]? = nil,
        outpostArn: String? = nil,
        placement: Placement? = nil,
        platform: PlatformValues? = nil,
        privateDnsName: String? = nil,
        privateIpAddress: String? = nil,
        productCodes: [ProductCode]? = nil,
        publicDnsName: String? = nil,
        publicIpAddress: String? = nil,
        ramdiskId: String? = nil,
        rootDeviceName: String? = nil,
        rootDeviceType: DeviceType? = nil,
        securityGroups: [GroupIdentifier]? = nil,
        sourceDestCheck: Bool = false,
        spotInstanceRequestId: String? = nil,
        sriovNetSupport: String? = nil,
        state: InstanceState? = nil,
        stateReason: StateReason? = nil,
        stateTransitionReason: String? = nil,
        subnetId: String? = nil,
        tags: [Tag]? = nil,
        virtualizationType: VirtualizationType? = nil,
        vpcId: String? = nil
    )
    {
        self.amiLaunchIndex = amiLaunchIndex
        self.architecture = architecture
        self.blockDeviceMappings = blockDeviceMappings
        self.bootMode = bootMode
        self.capacityReservationId = capacityReservationId
        self.capacityReservationSpecification = capacityReservationSpecification
        self.clientToken = clientToken
        self.cpuOptions = cpuOptions
        self.ebsOptimized = ebsOptimized
        self.elasticGpuAssociations = elasticGpuAssociations
        self.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations
        self.enaSupport = enaSupport
        self.enclaveOptions = enclaveOptions
        self.hibernationOptions = hibernationOptions
        self.hypervisor = hypervisor
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceLifecycle = instanceLifecycle
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchTime = launchTime
        self.licenses = licenses
        self.metadataOptions = metadataOptions
        self.monitoring = monitoring
        self.networkInterfaces = networkInterfaces
        self.outpostArn = outpostArn
        self.placement = placement
        self.platform = platform
        self.privateDnsName = privateDnsName
        self.privateIpAddress = privateIpAddress
        self.productCodes = productCodes
        self.publicDnsName = publicDnsName
        self.publicIpAddress = publicIpAddress
        self.ramdiskId = ramdiskId
        self.rootDeviceName = rootDeviceName
        self.rootDeviceType = rootDeviceType
        self.securityGroups = securityGroups
        self.sourceDestCheck = sourceDestCheck
        self.spotInstanceRequestId = spotInstanceRequestId
        self.sriovNetSupport = sriovNetSupport
        self.state = state
        self.stateReason = stateReason
        self.stateTransitionReason = stateTransitionReason
        self.subnetId = subnetId
        self.tags = tags
        self.virtualizationType = virtualizationType
        self.vpcId = vpcId
    }
}
