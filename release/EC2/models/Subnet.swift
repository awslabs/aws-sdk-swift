// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a subnet.</p>
public struct Subnet: Equatable {
    /// <p>Indicates whether a network interface created in this subnet (including a network
    ///             interface created by <a>RunInstances</a>) receives an IPv6 address.</p>
    public let assignIpv6AddressOnCreation: Bool
    /// <p>The Availability Zone of the subnet.</p>
    public let availabilityZone: String?
    /// <p>The AZ ID of the subnet.</p>
    public let availabilityZoneId: String?
    /// <p>The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any
    /// 			stopped instances are considered unavailable.</p>
    public let availableIpAddressCount: Int
    /// <p>The IPv4 CIDR block assigned to the subnet.</p>
    public let cidrBlock: String?
    /// <p>The customer-owned IPv4 address pool associated with the subnet.</p>
    public let customerOwnedIpv4Pool: String?
    /// <p>Indicates whether this is the default subnet for the Availability Zone.</p>
    public let defaultForAz: Bool
    /// <p>Information about the IPv6 CIDR blocks associated with the subnet.</p>
    public let ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]?
    /// <p>Indicates whether a network interface created in this subnet (including a network
    ///             interface created by <a>RunInstances</a>) receives a customer-owned IPv4 address.</p>
    public let mapCustomerOwnedIpOnLaunch: Bool
    /// <p>Indicates whether instances launched in this subnet receive a public IPv4 address.</p>
    public let mapPublicIpOnLaunch: Bool
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    public let outpostArn: String?
    /// <p>The ID of the AWS account that owns the subnet.</p>
    public let ownerId: String?
    /// <p>The current state of the subnet.</p>
    public let state: SubnetState?
    /// <p>The Amazon Resource Name (ARN) of the subnet.</p>
    public let subnetArn: String?
    /// <p>The ID of the subnet.</p>
    public let subnetId: String?
    /// <p>Any tags assigned to the subnet.</p>
    public let tags: [Tag]?
    /// <p>The ID of the VPC the subnet is in.</p>
    public let vpcId: String?

    public init (
        assignIpv6AddressOnCreation: Bool = false,
        availabilityZone: String? = nil,
        availabilityZoneId: String? = nil,
        availableIpAddressCount: Int = 0,
        cidrBlock: String? = nil,
        customerOwnedIpv4Pool: String? = nil,
        defaultForAz: Bool = false,
        ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]? = nil,
        mapCustomerOwnedIpOnLaunch: Bool = false,
        mapPublicIpOnLaunch: Bool = false,
        outpostArn: String? = nil,
        ownerId: String? = nil,
        state: SubnetState? = nil,
        subnetArn: String? = nil,
        subnetId: String? = nil,
        tags: [Tag]? = nil,
        vpcId: String? = nil
    )
    {
        self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
        self.availabilityZone = availabilityZone
        self.availabilityZoneId = availabilityZoneId
        self.availableIpAddressCount = availableIpAddressCount
        self.cidrBlock = cidrBlock
        self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
        self.defaultForAz = defaultForAz
        self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
        self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
        self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
        self.outpostArn = outpostArn
        self.ownerId = ownerId
        self.state = state
        self.subnetArn = subnetArn
        self.subnetId = subnetId
        self.tags = tags
        self.vpcId = vpcId
    }
}
