// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a Capacity Reservation.</p>
public struct CapacityReservation: Equatable {
    /// <p>The Availability Zone in which the capacity is reserved.</p>
    public let availabilityZone: String?
    /// <p>The Availability Zone ID of the Capacity Reservation.</p>
    public let availabilityZoneId: String?
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    public let availableInstanceCount: Int
    /// <p>The Amazon Resource Name (ARN) of the Capacity Reservation.</p>
    public let capacityReservationArn: String?
    /// <p>The ID of the Capacity Reservation.</p>
    public let capacityReservationId: String?
    /// <p>The date and time at which the Capacity Reservation was created.</p>
    public let createDate: Date?
    /// <p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
    /// 			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
    /// 			optimal I/O performance. This optimization isn't available with all instance types.
    /// 			Additional usage charges apply when using an EBS- optimized instance.</p>
    public let ebsOptimized: Bool
    /// <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
    /// 			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
    /// 				<code>expired</code> when it reaches its end date and time.</p>
    public let endDate: Date?
    /// <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
    /// 			types:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p>
    ///             </li>
    ///          </ul>
    public let endDateType: EndDateType?
    /// <p>Indicates whether the Capacity Reservation supports instances with temporary, block-level
    /// 			storage.</p>
    public let ephemeralStorage: Bool
    /// <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options
    /// 			include:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform,
    /// 				and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying
    /// 				any additional parameters.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes
    /// 					(instance type, platform, and Availability Zone), and explicitly target the
    /// 					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p>
    ///             </li>
    ///          </ul>
    public let instanceMatchCriteria: InstanceMatchCriteria?
    /// <p>The type of operating system for which the Capacity Reservation reserves capacity.</p>
    public let instancePlatform: CapacityReservationInstancePlatform?
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    public let instanceType: String?
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which the Capacity
    /// 	  		Reservation was created.</p>
    public let outpostArn: String?
    /// <p>The ID of the AWS account that owns the Capacity Reservation.</p>
    public let ownerId: String?
    /// <p>The date and time at which the Capacity Reservation was started.</p>
    public let startDate: Date?
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// 			      <ul>
    ///             <li>
    ///                <p>
    ///                   <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified
    /// 					in your request. The reserved capacity is no longer available for your use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no
    /// 					longer available for your use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code> - The Capacity Reservation request was successful but the capacity
    /// 					provisioning is still pending.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>failed</code> - The Capacity Reservation request has failed. A request might fail
    /// 					due to invalid request parameters, capacity constraints, or instance limit constraints.
    /// 					Failed requests are retained for 60 minutes.</p>
    ///             </li>
    ///          </ul>
    public let state: CapacityReservationState?
    /// <p>Any tags assigned to the Capacity Reservation.</p>
    public let tags: [Tag]?
    /// <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p>
    ///             </li>
    ///          </ul>
    public let tenancy: CapacityReservationTenancy?
    /// <p>The total number of instances for which the Capacity Reservation reserves capacity.</p>
    public let totalInstanceCount: Int

    public init (
        availabilityZone: String? = nil,
        availabilityZoneId: String? = nil,
        availableInstanceCount: Int = 0,
        capacityReservationArn: String? = nil,
        capacityReservationId: String? = nil,
        createDate: Date? = nil,
        ebsOptimized: Bool = false,
        endDate: Date? = nil,
        endDateType: EndDateType? = nil,
        ephemeralStorage: Bool = false,
        instanceMatchCriteria: InstanceMatchCriteria? = nil,
        instancePlatform: CapacityReservationInstancePlatform? = nil,
        instanceType: String? = nil,
        outpostArn: String? = nil,
        ownerId: String? = nil,
        startDate: Date? = nil,
        state: CapacityReservationState? = nil,
        tags: [Tag]? = nil,
        tenancy: CapacityReservationTenancy? = nil,
        totalInstanceCount: Int = 0
    )
    {
        self.availabilityZone = availabilityZone
        self.availabilityZoneId = availabilityZoneId
        self.availableInstanceCount = availableInstanceCount
        self.capacityReservationArn = capacityReservationArn
        self.capacityReservationId = capacityReservationId
        self.createDate = createDate
        self.ebsOptimized = ebsOptimized
        self.endDate = endDate
        self.endDateType = endDateType
        self.ephemeralStorage = ephemeralStorage
        self.instanceMatchCriteria = instanceMatchCriteria
        self.instancePlatform = instancePlatform
        self.instanceType = instanceType
        self.outpostArn = outpostArn
        self.ownerId = ownerId
        self.startDate = startDate
        self.state = state
        self.tags = tags
        self.tenancy = tenancy
        self.totalInstanceCount = totalInstanceCount
    }
}
