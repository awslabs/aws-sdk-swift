// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>
public struct OnDemandOptions: Equatable {
    /// <p>The order of the launch template overrides to use in fulfilling On-Demand capacity. If
    ///          you specify <code>lowest-price</code>, EC2 Fleet uses price to determine the order, launching
    ///          the lowest price first. If you specify <code>prioritized</code>, EC2 Fleet uses the priority
    ///          that you assigned to each launch template override, launching the highest priority first.
    ///          If you do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.</p>
    public let allocationStrategy: FleetOnDemandAllocationStrategy?
    /// <p>The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
    ///          Supported only for fleets of type <code>instant</code>.</p>
    public let capacityReservationOptions: CapacityReservationOptions?
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>
    public let maxTotalPrice: String?
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is
    ///          not reached, the fleet launches no instances.</p>
    public let minTargetCapacity: Int
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported
    ///          only for fleets of type <code>instant</code>.</p>
    public let singleAvailabilityZone: Bool
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
    ///          Supported only for fleets of type <code>instant</code>.</p>
    public let singleInstanceType: Bool

    public init (
        allocationStrategy: FleetOnDemandAllocationStrategy? = nil,
        capacityReservationOptions: CapacityReservationOptions? = nil,
        maxTotalPrice: String? = nil,
        minTargetCapacity: Int = 0,
        singleAvailabilityZone: Bool = false,
        singleInstanceType: Bool = false
    )
    {
        self.allocationStrategy = allocationStrategy
        self.capacityReservationOptions = capacityReservationOptions
        self.maxTotalPrice = maxTotalPrice
        self.minTargetCapacity = minTargetCapacity
        self.singleAvailabilityZone = singleAvailabilityZone
        self.singleInstanceType = singleInstanceType
    }
}
