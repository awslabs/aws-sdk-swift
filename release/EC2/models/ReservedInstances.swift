// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a Reserved Instance.</p>
public struct ReservedInstances: Equatable {
    /// <p>The Availability Zone in which the Reserved Instance can be used.</p>
    public let availabilityZone: String?
    /// <p>The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes.
    /// 				At this time, the only supported currency is <code>USD</code>.</p>
    public let currencyCode: CurrencyCodeValues?
    /// <p>The duration of the Reserved Instance, in seconds.</p>
    public let duration: Int
    /// <p>The time when the Reserved Instance expires.</p>
    public let end: Date?
    /// <p>The purchase price of the Reserved Instance.</p>
    public let fixedPrice: Float
    /// <p>The number of reservations purchased.</p>
    public let instanceCount: Int
    /// <p>The tenancy of the instance.</p>
    public let instanceTenancy: Tenancy?
    /// <p>The instance type on which the Reserved Instance can be used.</p>
    public let instanceType: InstanceType?
    /// <p>The offering class of the Reserved Instance.</p>
    public let offeringClass: OfferingClassType?
    /// <p>The Reserved Instance offering type.</p>
    public let offeringType: OfferingTypeValues?
    /// <p>The Reserved Instance product platform description.</p>
    public let productDescription: RIProductDescription?
    /// <p>The recurring charge tag assigned to the resource.</p>
    public let recurringCharges: [RecurringCharge]?
    /// <p>The ID of the Reserved Instance.</p>
    public let reservedInstancesId: String?
    /// <p>The scope of the Reserved Instance.</p>
    public let scope: Scope?
    /// <p>The date and time the Reserved Instance started.</p>
    public let start: Date?
    /// <p>The state of the Reserved Instance purchase.</p>
    public let state: ReservedInstanceState?
    /// <p>Any tags assigned to the resource.</p>
    public let tags: [Tag]?
    /// <p>The usage price of the Reserved Instance, per hour.</p>
    public let usagePrice: Float

    public init (
        availabilityZone: String? = nil,
        currencyCode: CurrencyCodeValues? = nil,
        duration: Int = 0,
        end: Date? = nil,
        fixedPrice: Float = 0.0,
        instanceCount: Int = 0,
        instanceTenancy: Tenancy? = nil,
        instanceType: InstanceType? = nil,
        offeringClass: OfferingClassType? = nil,
        offeringType: OfferingTypeValues? = nil,
        productDescription: RIProductDescription? = nil,
        recurringCharges: [RecurringCharge]? = nil,
        reservedInstancesId: String? = nil,
        scope: Scope? = nil,
        start: Date? = nil,
        state: ReservedInstanceState? = nil,
        tags: [Tag]? = nil,
        usagePrice: Float = 0.0
    )
    {
        self.availabilityZone = availabilityZone
        self.currencyCode = currencyCode
        self.duration = duration
        self.end = end
        self.fixedPrice = fixedPrice
        self.instanceCount = instanceCount
        self.instanceTenancy = instanceTenancy
        self.instanceType = instanceType
        self.offeringClass = offeringClass
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.recurringCharges = recurringCharges
        self.reservedInstancesId = reservedInstancesId
        self.scope = scope
        self.start = start
        self.state = state
        self.tags = tags
        self.usagePrice = usagePrice
    }
}
