// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeVolumesInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>attachment.attach-time</code> - The time stamp when the attachment
    ///           initiated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>attachment.delete-on-termination</code> - Whether the volume is deleted on
    ///           instance termination.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>attachment.device</code> - The device name specified in the block device mapping
    ///           (for example, <code>/dev/sda1</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>attachment.instance-id</code> - The ID of the instance the volume is attached
    ///           to.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>attachment.status</code> - The attachment state (<code>attaching</code> |
    ///             <code>attached</code> | <code>detaching</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>availability-zone</code> - The Availability Zone in which the volume was
    ///           created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>create-time</code> - The time stamp when the volume was created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code>
    ///           | <code>false</code>)</p>
    ///             </li>
    ///             <li>
    ///     		         <p>
    ///                   <code>multi-attach-enabled</code> - Indicates whether the volume is enabled for Multi-Attach (<code>true</code>
    ///     			| <code>false</code>)</p>
    ///     	       </li>
    ///             <li>
    ///                <p>
    ///                   <code>fast-restored</code> - Indicates whether the volume was created from a
    ///           snapshot that is enabled for fast snapshot restore (<code>true</code> |
    ///           <code>false</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>size</code> - The size of the volume, in GiB.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>snapshot-id</code> - The snapshot from which the volume was created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>status</code> - The state of the volume (<code>creating</code> |
    ///             <code>available</code> | <code>in-use</code> | <code>deleting</code> |
    ///             <code>deleted</code> | <code>error</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    ///     For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>volume-id</code> - The volume ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>volume-type</code> - The Amazon EBS volume type (<code>gp2</code> | <code>gp3</code> | <code>io1</code> | <code>io2</code> |
    ///           <code>st1</code> | <code>sc1</code>| <code>standard</code>)</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated
    ///       output. When this parameter is used, <code>DescribeVolumes</code> only returns
    ///         <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
    ///       response element. The remaining results of the initial request can be seen by sending another
    ///         <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This
    ///       value can be between 5 and 500; if <code>MaxResults</code> is given a value larger than 500,
    ///       only 500 results are returned. If this parameter is not used, then
    ///         <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the
    ///       volume IDs parameter in the same request.</p>
    public let maxResults: Int
    /// <p>The <code>NextToken</code> value returned from a previous paginated
    ///         <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results
    ///       exceeded the value of that parameter. Pagination continues from the end of the previous
    ///       results that returned the <code>NextToken</code> value. This value is <code>null</code> when
    ///       there are no more results to return.</p>
    public let nextToken: String?
    /// <p>The volume IDs.</p>
    public let volumeIds: [String]?

    public init (
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil,
        volumeIds: [String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeIds = volumeIds
    }
}
