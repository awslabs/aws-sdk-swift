// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateFleetInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///          request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    ///             Idempotency</a>.</p>
    public let clientToken: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Indicates whether running instances should be terminated if the total target capacity of
    ///          the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
    /// <p>The configuration for the EC2 Fleet.</p>
    public let launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]?
    /// <p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>
    public let onDemandOptions: OnDemandOptionsRequest?
    /// <p>Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for
    ///          fleets of type <code>maintain</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks">EC2 Fleet
    ///             health checks</a> in the <i>Amazon EC2 User Guide</i>.</p>
    public let replaceUnhealthyInstances: Bool
    /// <p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>
    public let spotOptions: SpotOptionsRequest?
    /// <p>The key-value pair for tagging the EC2 Fleet request on creation. The value for
    ///             <code>ResourceType</code> must be <code>fleet</code>, otherwise the fleet request fails.
    ///          To tag instances at launch, specify the tags in the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
    ///             template</a>. For information about tagging after launch, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging your
    ///             resources</a>.</p>
    public let tagSpecifications: [TagSpecification]?
    /// <p>The number of units to request.</p>
    public let targetCapacitySpecification: TargetCapacitySpecificationRequest?
    /// <p>Indicates whether running instances should be terminated when the EC2 Fleet expires.</p>
    public let terminateInstancesWithExpiration: Bool
    /// <p>The type of request. The default value is <code>maintain</code>.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>maintain</code> - The EC2 Fleet places an asynchronous request for your desired
    ///                capacity, and continues to maintain your desired Spot capacity by replenishing
    ///                interrupted Spot Instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>request</code> - The EC2 Fleet places an asynchronous one-time request for your
    ///                desired capacity, but does submit Spot requests in alternative capacity pools if Spot
    ///                capacity is unavailable, and does not maintain Spot capacity if Spot Instances are
    ///                interrupted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>instant</code> - The EC2 Fleet places a synchronous one-time request for your
    ///                desired capacity, and returns errors for any instances that could not be
    ///                launched.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type">EC2 Fleet
    ///             request types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    public let type: FleetType?
    /// <p>The start date and time of the request, in UTC format (for example,
    ///             <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    ///          The default is to start fulfilling the request immediately.</p>
    public let validFrom: Date?
    /// <p>The end date and time of the request, in UTC format (for example,
    ///             <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    ///          At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.</p>
    public let validUntil: Date?

    public init (
        clientToken: String? = nil,
        dryRun: Bool = false,
        excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil,
        launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil,
        onDemandOptions: OnDemandOptionsRequest? = nil,
        replaceUnhealthyInstances: Bool = false,
        spotOptions: SpotOptionsRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil,
        terminateInstancesWithExpiration: Bool = false,
        type: FleetType? = nil,
        validFrom: Date? = nil,
        validUntil: Date? = nil
    )
    {
        self.clientToken = clientToken
        self.dryRun = dryRun
        self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
        self.launchTemplateConfigs = launchTemplateConfigs
        self.onDemandOptions = onDemandOptions
        self.replaceUnhealthyInstances = replaceUnhealthyInstances
        self.spotOptions = spotOptions
        self.tagSpecifications = tagSpecifications
        self.targetCapacitySpecification = targetCapacitySpecification
        self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
        self.type = type
        self.validFrom = validFrom
        self.validUntil = validUntil
    }
}
