// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateClientVpnRouteInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    public var clientToken: String?
    /// <p>The ID of the Client VPN endpoint to which to add the route.</p>
    public let clientVpnEndpointId: String?
    /// <p>A brief description of the route.</p>
    public let description: String?
    /// <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>To add a route for Internet access, enter <code>0.0.0.0/0</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p>
    ///             </li>
    ///             <li>
    ///                <p>To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range</p>
    ///             </li>
    ///             <li>
    ///                <p>To add a route for the local network, enter the client CIDR range</p>
    ///             </li>
    ///          </ul>
    public let destinationCidrBlock: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The ID of the subnet through which you want to route traffic. The specified subnet must be
    /// 			an existing target network of the Client VPN endpoint.</p>
    /// 	        <p>Alternatively, if you're adding a route for the local network, specify <code>local</code>.</p>
    public let targetVpcSubnetId: String?

    public init (
        clientToken: String? = nil,
        clientVpnEndpointId: String? = nil,
        description: String? = nil,
        destinationCidrBlock: String? = nil,
        dryRun: Bool = false,
        targetVpcSubnetId: String? = nil
    )
    {
        self.clientToken = clientToken
        self.clientVpnEndpointId = clientVpnEndpointId
        self.description = description
        self.destinationCidrBlock = destinationCidrBlock
        self.dryRun = dryRun
        self.targetVpcSubnetId = targetVpcSubnetId
    }
}
