// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes VPN connection options.</p>
public struct VpnConnectionOptionsSpecification: Equatable {
    /// <p>Indicate whether to enable acceleration for the VPN connection.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let enableAcceleration: Bool
    /// <p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    ///         <p>Default: <code>0.0.0.0/0</code>
    ///          </p>
    public let localIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    ///         <p>Default: <code>::/0</code>
    ///          </p>
    public let localIpv6NetworkCidr: String?
    /// <p>The IPv4 CIDR on the AWS side of the VPN connection.</p>
    ///         <p>Default: <code>0.0.0.0/0</code>
    ///          </p>
    public let remoteIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the AWS side of the VPN connection.</p>
    ///         <p>Default: <code>::/0</code>
    ///          </p>
    public let remoteIpv6NetworkCidr: String?
    /// <p>Indicate whether the VPN connection uses static routes only. If you are creating a
    ///             VPN connection for a device that does not support BGP, you must specify
    ///                 <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a static route.</p>
    /// 		       <p>Default: <code>false</code>
    ///          </p>
    public let staticRoutesOnly: Bool
    /// <p>Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.</p>
    ///         <p>Default: <code>ipv4</code>
    ///          </p>
    public let tunnelInsideIpVersion: TunnelInsideIpVersion?
    /// <p>The tunnel options for the VPN connection.</p>
    public let tunnelOptions: [VpnTunnelOptionsSpecification]?

    public init (
        enableAcceleration: Bool = false,
        localIpv4NetworkCidr: String? = nil,
        localIpv6NetworkCidr: String? = nil,
        remoteIpv4NetworkCidr: String? = nil,
        remoteIpv6NetworkCidr: String? = nil,
        staticRoutesOnly: Bool = false,
        tunnelInsideIpVersion: TunnelInsideIpVersion? = nil,
        tunnelOptions: [VpnTunnelOptionsSpecification]? = nil
    )
    {
        self.enableAcceleration = enableAcceleration
        self.localIpv4NetworkCidr = localIpv4NetworkCidr
        self.localIpv6NetworkCidr = localIpv6NetworkCidr
        self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
        self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
        self.staticRoutesOnly = staticRoutesOnly
        self.tunnelInsideIpVersion = tunnelInsideIpVersion
        self.tunnelOptions = tunnelOptions
    }
}
