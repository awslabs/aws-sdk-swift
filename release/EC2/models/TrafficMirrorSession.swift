// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a Traffic Mirror session.</p>
public struct TrafficMirrorSession: Equatable {
    /// <p>The description of the Traffic Mirror session.</p>
    public let description: String?
    /// <p>The ID of the Traffic Mirror session's network interface.</p>
    public let networkInterfaceId: String?
    /// <p>The ID of the account that owns the Traffic Mirror session.</p>
    public let ownerId: String?
    /// <p>The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet</p>
    public let packetLength: Int
    /// <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
    ///          <p>Valid values are 1-32766.</p>
    public let sessionNumber: Int
    /// <p>The tags assigned to the Traffic Mirror session.</p>
    public let tags: [Tag]?
    /// <p>The ID of the Traffic Mirror filter.</p>
    public let trafficMirrorFilterId: String?
    /// <p>The ID for the Traffic Mirror session.</p>
    public let trafficMirrorSessionId: String?
    /// <p>The ID of the Traffic Mirror target.</p>
    public let trafficMirrorTargetId: String?
    /// <p>The virtual network ID associated with the Traffic Mirror session.</p>
    public let virtualNetworkId: Int

    public init (
        description: String? = nil,
        networkInterfaceId: String? = nil,
        ownerId: String? = nil,
        packetLength: Int = 0,
        sessionNumber: Int = 0,
        tags: [Tag]? = nil,
        trafficMirrorFilterId: String? = nil,
        trafficMirrorSessionId: String? = nil,
        trafficMirrorTargetId: String? = nil,
        virtualNetworkId: Int = 0
    )
    {
        self.description = description
        self.networkInterfaceId = networkInterfaceId
        self.ownerId = ownerId
        self.packetLength = packetLength
        self.sessionNumber = sessionNumber
        self.tags = tags
        self.trafficMirrorFilterId = trafficMirrorFilterId
        self.trafficMirrorSessionId = trafficMirrorSessionId
        self.trafficMirrorTargetId = trafficMirrorTargetId
        self.virtualNetworkId = virtualNetworkId
    }
}
