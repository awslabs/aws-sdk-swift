// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a network insights analysis.</p>
public struct NetworkInsightsAnalysis: Equatable {
    /// <p>Potential intermediate components.</p>
    public let alternatePathHints: [AlternatePathHint]?
    /// <p>The explanations. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html">Reachability Analyzer explanation codes</a>.</p>
    public let explanations: [Explanation]?
    /// <p>The Amazon Resource Names (ARN) of the AWS resources that the path must traverse.</p>
    public let filterInArns: [String]?
    /// <p>The components in the path from source to destination.</p>
    public let forwardPathComponents: [PathComponent]?
    /// <p>The Amazon Resource Name (ARN) of the network insights analysis.</p>
    public let networkInsightsAnalysisArn: String?
    /// <p>The ID of the network insights analysis.</p>
    public let networkInsightsAnalysisId: String?
    /// <p>The ID of the path.</p>
    public let networkInsightsPathId: String?
    /// <p>Indicates whether the destination is reachable from the source.</p>
    public let networkPathFound: Bool
    /// <p>The components in the path from destination to source.</p>
    public let returnPathComponents: [PathComponent]?
    /// <p>The time the analysis started.</p>
    public let startDate: Date?
    /// <p>The status of the network insights analysis.</p>
    public let status: AnalysisStatus?
    /// <p>The status message, if the status is <code>failed</code>.</p>
    public let statusMessage: String?
    /// <p>The tags.</p>
    public let tags: [Tag]?

    public init (
        alternatePathHints: [AlternatePathHint]? = nil,
        explanations: [Explanation]? = nil,
        filterInArns: [String]? = nil,
        forwardPathComponents: [PathComponent]? = nil,
        networkInsightsAnalysisArn: String? = nil,
        networkInsightsAnalysisId: String? = nil,
        networkInsightsPathId: String? = nil,
        networkPathFound: Bool = false,
        returnPathComponents: [PathComponent]? = nil,
        startDate: Date? = nil,
        status: AnalysisStatus? = nil,
        statusMessage: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.alternatePathHints = alternatePathHints
        self.explanations = explanations
        self.filterInArns = filterInArns
        self.forwardPathComponents = forwardPathComponents
        self.networkInsightsAnalysisArn = networkInsightsAnalysisArn
        self.networkInsightsAnalysisId = networkInsightsAnalysisId
        self.networkInsightsPathId = networkInsightsPathId
        self.networkPathFound = networkPathFound
        self.returnPathComponents = returnPathComponents
        self.startDate = startDate
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
    }
}
