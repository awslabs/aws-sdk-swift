// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum CapacityReservationInstancePlatform {
    case linuxUnix
    case linuxWithSqlServerEnterprise
    case linuxWithSqlServerStandard
    case linuxWithSqlServerWeb
    case redHatEnterpriseLinux
    case suseLinux
    case windows
    case windowsWithSqlServer
    case windowsWithSqlServerEnterprise
    case windowsWithSqlServerStandard
    case windowsWithSqlServerWeb
    case sdkUnknown(String)
}

extension CapacityReservationInstancePlatform : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CapacityReservationInstancePlatform] {
        return [
            .linuxUnix,
            .linuxWithSqlServerEnterprise,
            .linuxWithSqlServerStandard,
            .linuxWithSqlServerWeb,
            .redHatEnterpriseLinux,
            .suseLinux,
            .windows,
            .windowsWithSqlServer,
            .windowsWithSqlServerEnterprise,
            .windowsWithSqlServerStandard,
            .windowsWithSqlServerWeb,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .linuxUnix: return "Linux/UNIX"
        case .linuxWithSqlServerEnterprise: return "Linux with SQL Server Enterprise"
        case .linuxWithSqlServerStandard: return "Linux with SQL Server Standard"
        case .linuxWithSqlServerWeb: return "Linux with SQL Server Web"
        case .redHatEnterpriseLinux: return "Red Hat Enterprise Linux"
        case .suseLinux: return "SUSE Linux"
        case .windows: return "Windows"
        case .windowsWithSqlServer: return "Windows with SQL Server"
        case .windowsWithSqlServerEnterprise: return "Windows with SQL Server Enterprise"
        case .windowsWithSqlServerStandard: return "Windows with SQL Server Standard"
        case .windowsWithSqlServerWeb: return "Windows with SQL Server Web"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CapacityReservationInstancePlatform(rawValue: rawValue) ?? CapacityReservationInstancePlatform.sdkUnknown(rawValue)
    }
}
