// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The AWS Site-to-Site VPN tunnel options to modify.</p>
public struct ModifyVpnTunnelOptionsSpecification: Equatable {
    /// <p>The action to take after DPD timeout occurs. Specify <code>restart</code> to restart the IKE initiation. Specify <code>clear</code> to end the IKE session.</p>
    ///         <p>Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code>
    ///          </p>
    ///         <p>Default: <code>clear</code>
    ///          </p>
    public let dPDTimeoutAction: String?
    /// <p>The number of seconds after which a DPD timeout occurs.</p>
    ///         <p>Constraints: A value between 0 and 30.</p>
    ///         <p>Default: <code>30</code>
    ///          </p>
    public let dPDTimeoutSeconds: Int
    /// <p>The IKE versions that are permitted for the VPN tunnel.</p>
    ///         <p>Valid values: <code>ikev1</code> | <code>ikev2</code>
    ///          </p>
    public let iKEVersions: [IKEVersionsRequestListValue]?
    /// <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p>
    ///         <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code>
    ///          </p>
    public let phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
    /// <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p>
    ///         <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
    ///          </p>
    public let phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
    /// <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p>
    ///         <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> | <code>SHA2-512</code>
    ///          </p>
    public let phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
    /// <p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>
    ///         <p>Constraints: A value between 900 and 28,800.</p>
    ///         <p>Default: <code>28800</code>
    ///          </p>
    public let phase1LifetimeSeconds: Int
    /// <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p>
    ///         <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code>
    ///          </p>
    public let phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
    /// <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p>
    ///         <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
    ///          </p>
    public let phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
    /// <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p>
    ///         <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> | <code>SHA2-512</code>
    ///          </p>
    public let phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
    /// <p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>
    ///         <p>Constraints: A value between 900 and 3,600. The value must be less than the value for <code>Phase1LifetimeSeconds</code>.</p>
    ///         <p>Default: <code>3600</code>
    ///          </p>
    public let phase2LifetimeSeconds: Int
    /// <p>The pre-shared key (PSK) to establish initial authentication between the virtual
    ///             private gateway and the customer gateway.</p>
    ///         <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and
    ///             underscores (_). Must be between 8 and 64 characters in length and cannot start with
    ///             zero (0).</p>
    public let preSharedKey: String?
    /// <p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly selected.</p>
    ///         <p>Constraints: A value between 0 and 100.</p>
    ///         <p>Default: <code>100</code>
    ///          </p>
    public let rekeyFuzzPercentage: Int
    /// <p>The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for <code>RekeyFuzzPercentage</code>.</p>
    ///         <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p>
    ///         <p>Default: <code>540</code>
    ///          </p>
    public let rekeyMarginTimeSeconds: Int
    /// <p>The number of packets in an IKE replay window.</p>
    ///         <p>Constraints: A value between 64 and 2048.</p>
    ///         <p>Default: <code>1024</code>
    ///          </p>
    public let replayWindowSize: Int
    /// <p>The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify <code>start</code> for AWS to initiate the IKE negotiation.</p>
    ///         <p>Valid Values: <code>add</code> | <code>start</code>
    ///          </p>
    ///         <p>Default: <code>add</code>
    ///          </p>
    public let startupAction: String?
    /// <p>The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique
    ///             across all VPN connections that use the same virtual private gateway. </p>
    ///         <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The
    ///             following CIDR blocks are reserved and cannot be used:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.0.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.1.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.2.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.3.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.4.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.5.0/30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>169.254.169.252/30</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let tunnelInsideCidr: String?
    /// <p>The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.</p>
    ///         <p>Constraints: A size /126 CIDR block from the local <code>fd00::/8</code> range.</p>
    public let tunnelInsideIpv6Cidr: String?

    public init (
        dPDTimeoutAction: String? = nil,
        dPDTimeoutSeconds: Int = 0,
        iKEVersions: [IKEVersionsRequestListValue]? = nil,
        phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil,
        phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil,
        phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil,
        phase1LifetimeSeconds: Int = 0,
        phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil,
        phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil,
        phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil,
        phase2LifetimeSeconds: Int = 0,
        preSharedKey: String? = nil,
        rekeyFuzzPercentage: Int = 0,
        rekeyMarginTimeSeconds: Int = 0,
        replayWindowSize: Int = 0,
        startupAction: String? = nil,
        tunnelInsideCidr: String? = nil,
        tunnelInsideIpv6Cidr: String? = nil
    )
    {
        self.dPDTimeoutAction = dPDTimeoutAction
        self.dPDTimeoutSeconds = dPDTimeoutSeconds
        self.iKEVersions = iKEVersions
        self.phase1DHGroupNumbers = phase1DHGroupNumbers
        self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
        self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
        self.phase1LifetimeSeconds = phase1LifetimeSeconds
        self.phase2DHGroupNumbers = phase2DHGroupNumbers
        self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
        self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
        self.phase2LifetimeSeconds = phase2LifetimeSeconds
        self.preSharedKey = preSharedKey
        self.rekeyFuzzPercentage = rekeyFuzzPercentage
        self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
        self.replayWindowSize = replayWindowSize
        self.startupAction = startupAction
        self.tunnelInsideCidr = tunnelInsideCidr
        self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
    }
}
