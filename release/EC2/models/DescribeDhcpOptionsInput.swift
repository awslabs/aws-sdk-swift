// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeDhcpOptionsInput: Equatable {
    /// <p>The IDs of one or more DHCP options sets.</p>
    /// 		       <p>Default: Describes all your DHCP options sets.</p>
    public let dhcpOptionsIds: [String]?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>One or more filters.</p>
    /// 		       <ul>
    ///             <li>
    /// 		             <p>
    ///                   <code>dhcp-options-id</code> - The ID of a DHCP options set.</p>
    /// 		          </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p>
    /// 		          </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>value</code> - The value for one of the options.</p>
    /// 		          </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>owner-id</code> - The ID of the AWS account that owns the DHCP options set.</p>
    /// 		          </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    ///     For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    /// 		          </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    /// 		          </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    public let maxResults: Int
    /// <p>The token for the next page of results.</p>
    public let nextToken: String?

    public init (
        dhcpOptionsIds: [String]? = nil,
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.dhcpOptionsIds = dhcpOptionsIds
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
