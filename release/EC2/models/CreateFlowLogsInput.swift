// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateFlowLogsInput: Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///             request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure
    ///                 Idempotency</a>.</p>
    public let clientToken: String?
    /// <p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group
    ///             in your account.</p>
    ///         <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    ///             <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    public let deliverLogsPermissionArn: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>Specifies the destination to which the flow log data is to be published. Flow log data can be published
    ///             to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified
    ///             for <code>LogDestinationType</code>.</p>
    ///         <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>,
    ///             specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish
    ///             to a log group called <code>my-logs</code>, specify
    ///             <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively,
    ///             use <code>LogGroupName</code> instead.</p>
    ///         <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a
    ///             subfolder in the bucket. To specify a subfolder in the bucket, use the following  ARN format:
    ///             <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a
    ///             bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You
    ///             cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>
    public let logDestination: String?
    /// <p>Specifies the type of destination to which the flow log data is to be published. Flow log data can be
    ///             published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To
    ///             publish flow log data to Amazon S3, specify <code>s3</code>.</p>
    ///         <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    ///             <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    ///         <p>Default: <code>cloud-watch-logs</code>
    ///          </p>
    public let logDestinationType: LogDestinationType?
    /// <p>The fields to include in the flow log record, in the order in which they should
    ///             appear. For a list of available fields, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow Log Records</a>. If you
    ///             omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field.</p>
    ///         <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For
    ///             the AWS CLI, use single quotation marks (' ') to surround the parameter value.</p>
    public let logFormat: String?
    /// <p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p>
    ///         <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    ///             <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    public let logGroupName: String?
    /// <p>The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).</p>
    ///         <p>When a network interface is attached to a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
    ///                 instance</a>, the aggregation interval is always 60 seconds or less, regardless
    ///             of the value that you specify.</p>
    ///         <p>Default: 600</p>
    public let maxAggregationInterval: Int
    /// <p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p>
    ///         <p>Constraints: Maximum of 1000 resources</p>
    public let resourceIds: [String]?
    /// <p>The type of resource for which to create the flow log. For example, if you specified a VPC ID for
    ///             the <code>ResourceId</code> property, specify <code>VPC</code> for this property.</p>
    public let resourceType: FlowLogsResourceType?
    /// <p>The tags to apply to the flow logs.</p>
    public let tagSpecifications: [TagSpecification]?
    /// <p>The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.</p>
    public let trafficType: TrafficType?

    public init (
        clientToken: String? = nil,
        deliverLogsPermissionArn: String? = nil,
        dryRun: Bool = false,
        logDestination: String? = nil,
        logDestinationType: LogDestinationType? = nil,
        logFormat: String? = nil,
        logGroupName: String? = nil,
        maxAggregationInterval: Int = 0,
        resourceIds: [String]? = nil,
        resourceType: FlowLogsResourceType? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        trafficType: TrafficType? = nil
    )
    {
        self.clientToken = clientToken
        self.deliverLogsPermissionArn = deliverLogsPermissionArn
        self.dryRun = dryRun
        self.logDestination = logDestination
        self.logDestinationType = logDestinationType
        self.logFormat = logFormat
        self.logGroupName = logGroupName
        self.maxAggregationInterval = maxAggregationInterval
        self.resourceIds = resourceIds
        self.resourceType = resourceType
        self.tagSpecifications = tagSpecifications
        self.trafficType = trafficType
    }
}
