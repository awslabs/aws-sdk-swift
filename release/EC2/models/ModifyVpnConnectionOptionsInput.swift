// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyVpnConnectionOptionsInput: Equatable {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    ///         <p>Default: <code>0.0.0.0/0</code>
    ///          </p>
    public let localIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    ///         <p>Default: <code>::/0</code>
    ///          </p>
    public let localIpv6NetworkCidr: String?
    /// <p>The IPv4 CIDR on the AWS side of the VPN connection.</p>
    ///         <p>Default: <code>0.0.0.0/0</code>
    ///          </p>
    public let remoteIpv4NetworkCidr: String?
    /// <p>The IPv6 CIDR on the AWS side of the VPN connection.</p>
    ///         <p>Default: <code>::/0</code>
    ///          </p>
    public let remoteIpv6NetworkCidr: String?
    /// <p>The ID of the Site-to-Site VPN connection.
    ///         </p>
    public let vpnConnectionId: String?

    public init (
        dryRun: Bool = false,
        localIpv4NetworkCidr: String? = nil,
        localIpv6NetworkCidr: String? = nil,
        remoteIpv4NetworkCidr: String? = nil,
        remoteIpv6NetworkCidr: String? = nil,
        vpnConnectionId: String? = nil
    )
    {
        self.dryRun = dryRun
        self.localIpv4NetworkCidr = localIpv4NetworkCidr
        self.localIpv6NetworkCidr = localIpv6NetworkCidr
        self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
        self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
        self.vpnConnectionId = vpnConnectionId
    }
}
