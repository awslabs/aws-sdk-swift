// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeVpcEndpointConnectionNotificationsInput: Equatable {
    /// <p>The ID of the notification.</p>
    public let connectionNotificationId: String?
    /// <p>Checks whether you have the required permissions for the action, without actually making the request,
    ///    and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    ///    Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    public let dryRun: Bool
    /// <p>One or more filters.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>connection-notification-arn</code> - The ARN of the SNS topic for the
    ///                     notification.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>connection-notification-id</code> - The ID of the
    ///                     notification.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>connection-notification-state</code> - The state of the notification
    ///                         (<code>Enabled</code> | <code>Disabled</code>).</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>connection-notification-type</code> - The type of notification
    ///                         (<code>Topic</code>).</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>service-id</code> - The ID of the endpoint service.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining
    ///             results, make another request with the returned <code>NextToken</code> value.</p>
    public let maxResults: Int
    /// <p>The token to request the next page of results.</p>
    public let nextToken: String?

    public init (
        connectionNotificationId: String? = nil,
        dryRun: Bool = false,
        filters: [Filter]? = nil,
        maxResults: Int = 0,
        nextToken: String? = nil
    )
    {
        self.connectionNotificationId = connectionNotificationId
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
