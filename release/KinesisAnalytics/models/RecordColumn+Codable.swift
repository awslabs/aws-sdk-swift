// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecordColumn: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mapping = "Mapping"
        case name = "Name"
        case sqlType = "SqlType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mapping = mapping {
            try encodeContainer.encode(mapping, forKey: .mapping)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sqlType = sqlType {
            try encodeContainer.encode(sqlType, forKey: .sqlType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let mappingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mapping)
        mapping = mappingDecoded
        let sqlTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sqlType)
        sqlType = sqlTypeDecoded
    }
}
