// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Equatable {
    public let applicationName: String?
    public let applicationDescription: String?
    public let inputs: [Input]?
    public let outputs: [Output]?
    public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?
    public let applicationCode: String?
    public let tags: [Tag]?
}

extension CreateApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationCode = "ApplicationCode"
        case applicationDescription = "ApplicationDescription"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case inputs = "Inputs"
        case outputs = "Outputs"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Input].self, forKey: .inputs)
        var inputsDecoded0:[Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Input]()
            for structure0 in inputsContainer {
                inputsDecoded0?.append(structure0)
            }
        }
        inputs = inputsDecoded0
        let outputsContainer = try containerValues.decodeIfPresent([Output].self, forKey: .outputs)
        var outputsDecoded0:[Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [Output]()
            for structure0 in outputsContainer {
                outputsDecoded0?.append(structure0)
            }
        }
        outputs = outputsDecoded0
        let cloudWatchLoggingOptionsContainer = try containerValues.decodeIfPresent([CloudWatchLoggingOption].self, forKey: .cloudWatchLoggingOptions)
        var cloudWatchLoggingOptionsDecoded0:[CloudWatchLoggingOption]? = nil
        if let cloudWatchLoggingOptionsContainer = cloudWatchLoggingOptionsContainer {
            cloudWatchLoggingOptionsDecoded0 = [CloudWatchLoggingOption]()
            for structure0 in cloudWatchLoggingOptionsContainer {
                cloudWatchLoggingOptionsDecoded0?.append(structure0)
            }
        }
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded0
        let applicationCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationCode)
        applicationCode = applicationCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
