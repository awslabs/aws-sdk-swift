// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationCodeUpdate = "ApplicationCodeUpdate"
        case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
        case inputUpdates = "InputUpdates"
        case outputUpdates = "OutputUpdates"
        case referenceDataSourceUpdates = "ReferenceDataSourceUpdates"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationCodeUpdate = applicationCodeUpdate {
            try encodeContainer.encode(applicationCodeUpdate, forKey: .applicationCodeUpdate)
        }
        if let cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates {
            var cloudWatchLoggingOptionUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloudWatchLoggingOptionUpdates)
            for cloudwatchloggingoptionupdates0 in cloudWatchLoggingOptionUpdates {
                try cloudWatchLoggingOptionUpdatesContainer.encode(cloudwatchloggingoptionupdates0)
            }
        }
        if let inputUpdates = inputUpdates {
            var inputUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputUpdates)
            for inputupdates0 in inputUpdates {
                try inputUpdatesContainer.encode(inputupdates0)
            }
        }
        if let outputUpdates = outputUpdates {
            var outputUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputUpdates)
            for outputupdates0 in outputUpdates {
                try outputUpdatesContainer.encode(outputupdates0)
            }
        }
        if let referenceDataSourceUpdates = referenceDataSourceUpdates {
            var referenceDataSourceUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .referenceDataSourceUpdates)
            for referencedatasourceupdates0 in referenceDataSourceUpdates {
                try referenceDataSourceUpdatesContainer.encode(referencedatasourceupdates0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputUpdatesContainer = try containerValues.decodeIfPresent([InputUpdate].self, forKey: .inputUpdates)
        var inputUpdatesDecoded0:[InputUpdate]? = nil
        if let inputUpdatesContainer = inputUpdatesContainer {
            inputUpdatesDecoded0 = [InputUpdate]()
            for structure0 in inputUpdatesContainer {
                inputUpdatesDecoded0?.append(structure0)
            }
        }
        inputUpdates = inputUpdatesDecoded0
        let applicationCodeUpdateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationCodeUpdate)
        applicationCodeUpdate = applicationCodeUpdateDecoded
        let outputUpdatesContainer = try containerValues.decodeIfPresent([OutputUpdate].self, forKey: .outputUpdates)
        var outputUpdatesDecoded0:[OutputUpdate]? = nil
        if let outputUpdatesContainer = outputUpdatesContainer {
            outputUpdatesDecoded0 = [OutputUpdate]()
            for structure0 in outputUpdatesContainer {
                outputUpdatesDecoded0?.append(structure0)
            }
        }
        outputUpdates = outputUpdatesDecoded0
        let referenceDataSourceUpdatesContainer = try containerValues.decodeIfPresent([ReferenceDataSourceUpdate].self, forKey: .referenceDataSourceUpdates)
        var referenceDataSourceUpdatesDecoded0:[ReferenceDataSourceUpdate]? = nil
        if let referenceDataSourceUpdatesContainer = referenceDataSourceUpdatesContainer {
            referenceDataSourceUpdatesDecoded0 = [ReferenceDataSourceUpdate]()
            for structure0 in referenceDataSourceUpdatesContainer {
                referenceDataSourceUpdatesDecoded0?.append(structure0)
            }
        }
        referenceDataSourceUpdates = referenceDataSourceUpdatesDecoded0
        let cloudWatchLoggingOptionUpdatesContainer = try containerValues.decodeIfPresent([CloudWatchLoggingOptionUpdate].self, forKey: .cloudWatchLoggingOptionUpdates)
        var cloudWatchLoggingOptionUpdatesDecoded0:[CloudWatchLoggingOptionUpdate]? = nil
        if let cloudWatchLoggingOptionUpdatesContainer = cloudWatchLoggingOptionUpdatesContainer {
            cloudWatchLoggingOptionUpdatesDecoded0 = [CloudWatchLoggingOptionUpdate]()
            for structure0 in cloudWatchLoggingOptionUpdatesContainer {
                cloudWatchLoggingOptionUpdatesDecoded0?.append(structure0)
            }
        }
        cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdatesDecoded0
    }
}
