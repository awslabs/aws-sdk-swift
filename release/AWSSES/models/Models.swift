// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccountSendingPausedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AccountSendingPausedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that email sending is disabled for your entire Amazon SES account. You can enable or disable email sending for your Amazon SES account using [UpdateAccountSendingEnabled].
public struct AccountSendingPausedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountSendingPausedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountSendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.AddHeaderAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerName = "HeaderName"
        case headerValue = "HeaderValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let headerName = headerName {
            try container.encode(headerName, forKey: ClientRuntime.Key("HeaderName"))
        }
        if let headerValue = headerValue {
            try container.encode(headerValue, forKey: ClientRuntime.Key("HeaderValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let headerValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerValue)
        headerValue = headerValueDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action adds a header to the received email. For information about adding a header using a receipt rule, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-add-header.html).
    public struct AddHeaderAction: Swift.Equatable {
        /// The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.
        /// This member is required.
        public var headerName: Swift.String?
        /// Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").
        /// This member is required.
        public var headerValue: Swift.String?

        public init (
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }

}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that a resource could not be created because of a naming conflict.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Indicates that a resource could not be created because the resource name already exists.
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let name: Swift.String?
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes {
    public enum BehaviorOnMXFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectmessage
        case usedefaultvalue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMXFailure] {
            return [
                .rejectmessage,
                .usedefaultvalue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectmessage: return "RejectMessage"
            case .usedefaultvalue: return "UseDefaultValue"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMXFailure(rawValue: rawValue) ?? BehaviorOnMXFailure.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.Body: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let html = html {
            try container.encode(html, forKey: ClientRuntime.Key("Html"))
        }
        if let text = text {
            try container.encode(text, forKey: ClientRuntime.Key("Text"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(SESClientTypes.Content.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(SESClientTypes.Content.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SESClientTypes {
    /// Represents the body of the message. You can specify text, HTML, or both. If you use both, then the message should display correctly in the widest variety of email clients.
    public struct Body: Swift.Equatable {
        /// The content of the message, in HTML format. Use this for email clients that can process HTML. You can include clickable links, formatted text, and much more in an HTML message.
        public var html: SESClientTypes.Content?
        /// The content of the message, in text format. Use this for text-based email clients, or clients on high-latency networks (such as mobile devices).
        public var text: SESClientTypes.Content?

        public init (
            html: SESClientTypes.Content? = nil,
            text: SESClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SESClientTypes.BounceAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case sender = "Sender"
        case smtpReplyCode = "SmtpReplyCode"
        case statusCode = "StatusCode"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sender = sender {
            try container.encode(sender, forKey: ClientRuntime.Key("Sender"))
        }
        if let smtpReplyCode = smtpReplyCode {
            try container.encode(smtpReplyCode, forKey: ClientRuntime.Key("SmtpReplyCode"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let smtpReplyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smtpReplyCode)
        smtpReplyCode = smtpReplyCodeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let senderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sender)
        sender = senderDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). For information about sending a bounce message in response to a received email, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-bounce.html).
    public struct BounceAction: Swift.Equatable {
        /// Human-readable text to include in the bounce message.
        /// This member is required.
        public var message: Swift.String?
        /// The email address of the sender of the bounced email. This is the address from which the bounce message will be sent.
        /// This member is required.
        public var sender: Swift.String?
        /// The SMTP reply code, as defined by [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var smtpReplyCode: Swift.String?
        /// The SMTP enhanced status code, as defined by [RFC 3463](https://tools.ietf.org/html/rfc3463).
        public var statusCode: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init (
            message: Swift.String? = nil,
            sender: Swift.String? = nil,
            smtpReplyCode: Swift.String? = nil,
            statusCode: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.message = message
            self.sender = sender
            self.smtpReplyCode = smtpReplyCode
            self.statusCode = statusCode
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum BounceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contentrejected
        case doesnotexist
        case exceededquota
        case messagetoolarge
        case temporaryfailure
        case undefined
        case sdkUnknown(Swift.String)

        public static var allCases: [BounceType] {
            return [
                .contentrejected,
                .doesnotexist,
                .exceededquota,
                .messagetoolarge,
                .temporaryfailure,
                .undefined,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contentrejected: return "ContentRejected"
            case .doesnotexist: return "DoesNotExist"
            case .exceededquota: return "ExceededQuota"
            case .messagetoolarge: return "MessageTooLarge"
            case .temporaryfailure: return "TemporaryFailure"
            case .undefined: return "Undefined"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BounceType(rawValue: rawValue) ?? BounceType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.BouncedRecipientInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceType = "BounceType"
        case recipient = "Recipient"
        case recipientArn = "RecipientArn"
        case recipientDsnFields = "RecipientDsnFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceType = bounceType {
            try container.encode(bounceType, forKey: ClientRuntime.Key("BounceType"))
        }
        if let recipient = recipient {
            try container.encode(recipient, forKey: ClientRuntime.Key("Recipient"))
        }
        if let recipientArn = recipientArn {
            try container.encode(recipientArn, forKey: ClientRuntime.Key("RecipientArn"))
        }
        if let recipientDsnFields = recipientDsnFields {
            try container.encode(recipientDsnFields, forKey: ClientRuntime.Key("RecipientDsnFields"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recipientDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipient)
        recipient = recipientDecoded
        let recipientArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipientArn)
        recipientArn = recipientArnDecoded
        let bounceTypeDecoded = try containerValues.decodeIfPresent(SESClientTypes.BounceType.self, forKey: .bounceType)
        bounceType = bounceTypeDecoded
        let recipientDsnFieldsDecoded = try containerValues.decodeIfPresent(SESClientTypes.RecipientDsnFields.self, forKey: .recipientDsnFields)
        recipientDsnFields = recipientDsnFieldsDecoded
    }
}

extension SESClientTypes {
    /// Recipient-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html).
    public struct BouncedRecipientInfo: Swift.Equatable {
        /// The reason for the bounce. You must provide either this parameter or RecipientDsnFields.
        public var bounceType: SESClientTypes.BounceType?
        /// The email address of the recipient of the bounced email.
        /// This member is required.
        public var recipient: Swift.String?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to receive email for the recipient of the bounced email. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
        public var recipientArn: Swift.String?
        /// Recipient-related DSN fields, most of which would normally be filled in automatically when provided with a BounceType. You must provide either this parameter or BounceType.
        public var recipientDsnFields: SESClientTypes.RecipientDsnFields?

        public init (
            bounceType: SESClientTypes.BounceType? = nil,
            recipient: Swift.String? = nil,
            recipientArn: Swift.String? = nil,
            recipientDsnFields: SESClientTypes.RecipientDsnFields? = nil
        )
        {
            self.bounceType = bounceType
            self.recipient = recipient
            self.recipientArn = recipientArn
            self.recipientDsnFields = recipientDsnFields
        }
    }

}

extension SESClientTypes.BulkEmailDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case replacementTags = "ReplacementTags"
        case replacementTemplateData = "ReplacementTemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replacementTags = replacementTags {
            if !replacementTags.isEmpty {
                var replacementTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplacementTags"))
                for (index0, messagetag0) in replacementTags.enumerated() {
                    try replacementTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replacementTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplacementTags"))
                try replacementTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let replacementTemplateData = replacementTemplateData {
            try container.encode(replacementTemplateData, forKey: ClientRuntime.Key("ReplacementTemplateData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        if containerValues.contains(.replacementTags) {
            struct KeyVal0{struct member{}}
            let replacementTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replacementTags)
            if let replacementTagsWrappedContainer = replacementTagsWrappedContainer {
                let replacementTagsContainer = try replacementTagsWrappedContainer.decodeIfPresent([SESClientTypes.MessageTag].self, forKey: .member)
                var replacementTagsBuffer:[SESClientTypes.MessageTag]? = nil
                if let replacementTagsContainer = replacementTagsContainer {
                    replacementTagsBuffer = [SESClientTypes.MessageTag]()
                    for structureContainer0 in replacementTagsContainer {
                        replacementTagsBuffer?.append(structureContainer0)
                    }
                }
                replacementTags = replacementTagsBuffer
            } else {
                replacementTags = []
            }
        } else {
            replacementTags = nil
        }
        let replacementTemplateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replacementTemplateData)
        replacementTemplateData = replacementTemplateDataDecoded
    }
}

extension SESClientTypes {
    /// An array that contains one or more Destinations, as well as the tags and replacement data associated with each of those Destinations.
    public struct BulkEmailDestination: Swift.Equatable {
        /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
        /// This member is required.
        public var destination: SESClientTypes.Destination?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendBulkTemplatedEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public var replacementTags: [SESClientTypes.MessageTag]?
        /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
        public var replacementTemplateData: Swift.String?

        public init (
            destination: SESClientTypes.Destination? = nil,
            replacementTags: [SESClientTypes.MessageTag]? = nil,
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.destination = destination
            self.replacementTags = replacementTags
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SESClientTypes.BulkEmailDestinationStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case messageId = "MessageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let error = error {
            try container.encode(error, forKey: ClientRuntime.Key("Error"))
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: ClientRuntime.Key("MessageId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SESClientTypes.BulkEmailStatus.self, forKey: .status)
        status = statusDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SESClientTypes {
    /// An object that contains the response from the SendBulkTemplatedEmail operation.
    public struct BulkEmailDestinationStatus: Swift.Equatable {
        /// A description of an error that prevented a message being sent using the SendBulkTemplatedEmail operation.
        public var error: Swift.String?
        /// The unique message identifier returned from the SendBulkTemplatedEmail operation.
        public var messageId: Swift.String?
        /// The status of a message sent using the SendBulkTemplatedEmail operation. Possible values for this parameter include:
        ///
        /// * Success: Amazon SES accepted the message, and will attempt to deliver it to the recipients.
        ///
        /// * MessageRejected: The message was rejected because it contained a virus.
        ///
        /// * MailFromDomainNotVerified: The sender's email address or domain was not verified.
        ///
        /// * ConfigurationSetDoesNotExist: The configuration set you specified does not exist.
        ///
        /// * TemplateDoesNotExist: The template you specified does not exist.
        ///
        /// * AccountSuspended: Your account has been shut down because of issues related to your email sending practices.
        ///
        /// * AccountThrottled: The number of emails you can send has been reduced because your account has exceeded its allocated sending limit.
        ///
        /// * AccountDailyQuotaExceeded: You have reached or exceeded the maximum number of emails you can send from your account in a 24-hour period.
        ///
        /// * InvalidSendingPoolName: The configuration set you specified refers to an IP pool that does not exist.
        ///
        /// * AccountSendingPaused: Email sending for the Amazon SES account was disabled using the [UpdateAccountSendingEnabled] operation.
        ///
        /// * ConfigurationSetSendingPaused: Email sending for this configuration set was disabled using the [UpdateConfigurationSetSendingEnabled] operation.
        ///
        /// * InvalidParameterValue: One or more of the parameters you specified when calling this operation was invalid. See the error message for additional information.
        ///
        /// * TransientFailure: Amazon SES was unable to process your request because of a temporary issue.
        ///
        /// * Failed: Amazon SES was unable to process your request. See the error message for additional information.
        public var status: SESClientTypes.BulkEmailStatus?

        public init (
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SESClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

extension SESClientTypes {
    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountdailyquotaexceeded
        case accountsendingpaused
        case accountsuspended
        case accountthrottled
        case configurationsetdoesnotexist
        case configurationsetsendingpaused
        case failed
        case invalidparametervalue
        case invalidsendingpoolname
        case mailfromdomainnotverified
        case messagerejected
        case success
        case templatedoesnotexist
        case transientfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountdailyquotaexceeded,
                .accountsendingpaused,
                .accountsuspended,
                .accountthrottled,
                .configurationsetdoesnotexist,
                .configurationsetsendingpaused,
                .failed,
                .invalidparametervalue,
                .invalidsendingpoolname,
                .mailfromdomainnotverified,
                .messagerejected,
                .success,
                .templatedoesnotexist,
                .transientfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountdailyquotaexceeded: return "AccountDailyQuotaExceeded"
            case .accountsendingpaused: return "AccountSendingPaused"
            case .accountsuspended: return "AccountSuspended"
            case .accountthrottled: return "AccountThrottled"
            case .configurationsetdoesnotexist: return "ConfigurationSetDoesNotExist"
            case .configurationsetsendingpaused: return "ConfigurationSetSendingPaused"
            case .failed: return "Failed"
            case .invalidparametervalue: return "InvalidParameterValue"
            case .invalidsendingpoolname: return "InvalidSendingPoolName"
            case .mailfromdomainnotverified: return "MailFromDomainNotVerified"
            case .messagerejected: return "MessageRejected"
            case .success: return "Success"
            case .templatedoesnotexist: return "TemplateDoesNotExist"
            case .transientfailure: return "TransientFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
        }
    }
}

extension CannotDeleteException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CannotDeleteExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the delete operation could not be completed.
public struct CannotDeleteException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Indicates that a resource could not be deleted because no resource with the specified name exists.
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct CannotDeleteExceptionBody: Swift.Equatable {
    let name: Swift.String?
    let message: Swift.String?
}

extension CannotDeleteExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloneReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalRuleSetName = originalRuleSetName {
            try container.encode(originalRuleSetName, forKey: ClientRuntime.Key("OriginalRuleSetName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CloneReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CloneReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a receipt rule set by cloning an existing one. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct CloneReceiptRuleSetInput: Swift.Equatable {
    /// The name of the rule set to clone.
    /// This member is required.
    public var originalRuleSetName: Swift.String?
    /// The name of the rule set to create. The name must:
    ///
    /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
    ///
    /// * Start and end with a letter or number.
    ///
    /// * Contain less than 64 characters.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        originalRuleSetName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.originalRuleSetName = originalRuleSetName
        self.ruleSetName = ruleSetName
    }
}

struct CloneReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let originalRuleSetName: Swift.String?
}

extension CloneReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originalRuleSetName = "OriginalRuleSetName"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let originalRuleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalRuleSetName)
        originalRuleSetName = originalRuleSetNameDecoded
    }
}

extension CloneReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CloneReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CloneReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CloneReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CloneReceiptRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.CloudWatchDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensionConfigurations = dimensionConfigurations {
            if !dimensionConfigurations.isEmpty {
                var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
                for (index0, cloudwatchdimensionconfiguration0) in dimensionConfigurations.enumerated() {
                    try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
                try dimensionConfigurationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dimensionConfigurations) {
            struct KeyVal0{struct member{}}
            let dimensionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensionConfigurations)
            if let dimensionConfigurationsWrappedContainer = dimensionConfigurationsWrappedContainer {
                let dimensionConfigurationsContainer = try dimensionConfigurationsWrappedContainer.decodeIfPresent([SESClientTypes.CloudWatchDimensionConfiguration].self, forKey: .member)
                var dimensionConfigurationsBuffer:[SESClientTypes.CloudWatchDimensionConfiguration]? = nil
                if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
                    dimensionConfigurationsBuffer = [SESClientTypes.CloudWatchDimensionConfiguration]()
                    for structureContainer0 in dimensionConfigurationsContainer {
                        dimensionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                dimensionConfigurations = dimensionConfigurationsBuffer
            } else {
                dimensionConfigurations = []
            }
        } else {
            dimensionConfigurations = nil
        }
    }
}

extension SESClientTypes {
    /// Contains information associated with an Amazon CloudWatch event destination to which email sending events are published. Event destinations, such as Amazon CloudWatch, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct CloudWatchDestination: Swift.Equatable {
        /// A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [SESClientTypes.CloudWatchDimensionConfiguration]?

        public init (
            dimensionConfigurations: [SESClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SESClientTypes.CloudWatchDimensionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultDimensionValue = defaultDimensionValue {
            try container.encode(defaultDimensionValue, forKey: ClientRuntime.Key("DefaultDimensionValue"))
        }
        if let dimensionName = dimensionName {
            try container.encode(dimensionName, forKey: ClientRuntime.Key("DimensionName"))
        }
        if let dimensionValueSource = dimensionValueSource {
            try container.encode(dimensionValueSource, forKey: ClientRuntime.Key("DimensionValueSource"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueSourceDecoded = try containerValues.decodeIfPresent(SESClientTypes.DimensionValueSource.self, forKey: .dimensionValueSource)
        dimensionValueSource = dimensionValueSourceDecoded
        let defaultDimensionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDimensionValue)
        defaultDimensionValue = defaultDimensionValueDecoded
    }
}

extension SESClientTypes {
    /// Contains the dimension configuration to use when you publish email sending events to Amazon CloudWatch. For information about publishing email sending events to Amazon CloudWatch, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain less than 256 characters.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain less than 256 characters.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon SES to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon SES to use your own email headers, choose emailHeader.
        /// This member is required.
        public var dimensionValueSource: SESClientTypes.DimensionValueSource?

        public init (
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SESClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension SESClientTypes.ConfigurationSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension SESClientTypes {
    /// The name of the configuration set. Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see [Using Amazon SES Configuration Sets](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html) in the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/).
    public struct ConfigurationSet: Swift.Equatable {
        /// The name of the configuration set. The name must meet the following requirements:
        ///
        /// * Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain 64 characters or fewer.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ConfigurationSetAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ConfigurationSetAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the configuration set could not be created because of a naming conflict.
public struct ConfigurationSetAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetAlreadyExistsExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let message: Swift.String?
}

extension ConfigurationSetAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes {
    public enum ConfigurationSetAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deliveryOptions
        case eventDestinations
        case reputationOptions
        case trackingOptions
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationSetAttribute] {
            return [
                .deliveryOptions,
                .eventDestinations,
                .reputationOptions,
                .trackingOptions,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deliveryOptions: return "deliveryOptions"
            case .eventDestinations: return "eventDestinations"
            case .reputationOptions: return "reputationOptions"
            case .trackingOptions: return "trackingOptions"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationSetAttribute(rawValue: rawValue) ?? ConfigurationSetAttribute.sdkUnknown(rawValue)
        }
    }
}

extension ConfigurationSetDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ConfigurationSetDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the configuration set does not exist.
public struct ConfigurationSetDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetDoesNotExistExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let message: Swift.String?
}

extension ConfigurationSetDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigurationSetSendingPausedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ConfigurationSetSendingPausedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that email sending is disabled for the configuration set. You can enable or disable email sending for a configuration set using [UpdateConfigurationSetSendingEnabled].
public struct ConfigurationSetSendingPausedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The name of the configuration set for which email sending is disabled.
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct ConfigurationSetSendingPausedExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let message: Swift.String?
}

extension ConfigurationSetSendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.Content: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let charset = charset {
            try container.encode(charset, forKey: ClientRuntime.Key("Charset"))
        }
        if let data = data {
            try container.encode(data, forKey: ClientRuntime.Key("Data"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
    }
}

extension SESClientTypes {
    /// Represents textual data, plus an optional character set specification. By default, the text must be 7-bit ASCII, due to the constraints of the SMTP protocol. If the text must contain any other characters, then you must also specify a character set. Examples include UTF-8, ISO-8859-1, and Shift_JIS.
    public struct Content: Swift.Equatable {
        /// The character set of the content.
        public var charset: Swift.String?
        /// The textual data of the content.
        /// This member is required.
        public var data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("CreateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a configuration set event destination. A configuration set event destination, which can be either Amazon CloudWatch or Amazon Kinesis Firehose, describes an AWS service in which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that the event destination should be associated with.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that describes the AWS service that email sending event information will be published to.
    /// This member is required.
    public var eventDestination: SESClientTypes.EventDestination?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SESClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

struct CreateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestination: SESClientTypes.EventDestination?
}

extension CreateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestination = "EventDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.EventDestination.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension CreateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationAlreadyExists" : self = .eventDestinationAlreadyExistsException(try EventDestinationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCloudWatchDestination" : self = .invalidCloudWatchDestinationException(try InvalidCloudWatchDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFirehoseDestination" : self = .invalidFirehoseDestinationException(try InvalidFirehoseDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSNSDestination" : self = .invalidSNSDestinationException(try InvalidSNSDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationAlreadyExistsException(EventDestinationAlreadyExistsException)
    case invalidCloudWatchDestinationException(InvalidCloudWatchDestinationException)
    case invalidFirehoseDestinationException(InvalidFirehoseDestinationException)
    case invalidSNSDestinationException(InvalidSNSDestinationException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateConfigurationSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSet = configurationSet {
            try container.encode(configurationSet, forKey: ClientRuntime.Key("ConfigurationSet"))
        }
        try container.encode("CreateConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// A data structure that contains the name of the configuration set.
    /// This member is required.
    public var configurationSet: SESClientTypes.ConfigurationSet?

    public init (
        configurationSet: SESClientTypes.ConfigurationSet? = nil
    )
    {
        self.configurationSet = configurationSet
    }
}

struct CreateConfigurationSetInputBody: Swift.Equatable {
    let configurationSet: SESClientTypes.ConfigurationSet?
}

extension CreateConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetDecoded = try containerValues.decodeIfPresent(SESClientTypes.ConfigurationSet.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
    }
}

extension CreateConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetAlreadyExists" : self = .configurationSetAlreadyExistsException(try ConfigurationSetAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidConfigurationSet" : self = .invalidConfigurationSetException(try InvalidConfigurationSetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetAlreadyExistsException(ConfigurationSetAlreadyExistsException)
    case invalidConfigurationSetException(InvalidConfigurationSetException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateConfigurationSetTrackingOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("CreateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateConfigurationSetTrackingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create an open and click tracking option object in a configuration set.
public struct CreateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that the tracking options should be associated with.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    /// This member is required.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

struct CreateConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: SESClientTypes.TrackingOptions?
}

extension CreateConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
    }
}

extension CreateConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrackingOptions" : self = .invalidTrackingOptionsException(try InvalidTrackingOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsAlreadyExistsException" : self = .trackingOptionsAlreadyExistsException(try TrackingOptionsAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidTrackingOptionsException(InvalidTrackingOptionsException)
    case trackingOptionsAlreadyExistsException(TrackingOptionsAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateCustomVerificationEmailTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("CreateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a custom verification email template.
public struct CreateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom Verification Email Frequently Asked Questions](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct CreateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension CreateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension CreateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailInvalidContent" : self = .customVerificationEmailInvalidContentException(try CustomVerificationEmailInvalidContentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateAlreadyExists" : self = .customVerificationEmailTemplateAlreadyExistsException(try CustomVerificationEmailTemplateAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerified" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailInvalidContentException(CustomVerificationEmailInvalidContentException)
    case customVerificationEmailTemplateAlreadyExistsException(CustomVerificationEmailTemplateAlreadyExistsException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateReceiptFilterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        try container.encode("CreateReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a new IP address filter. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct CreateReceiptFilterInput: Swift.Equatable {
    /// A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.
    /// This member is required.
    public var filter: SESClientTypes.ReceiptFilter?

    public init (
        filter: SESClientTypes.ReceiptFilter? = nil
    )
    {
        self.filter = filter
    }
}

struct CreateReceiptFilterInputBody: Swift.Equatable {
    let filter: SESClientTypes.ReceiptFilter?
}

extension CreateReceiptFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension CreateReceiptFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateReceiptFilterOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateReceiptRuleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct CreateReceiptRuleInput: Swift.Equatable {
    /// The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
    public var after: Swift.String?
    /// A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.
    /// This member is required.
    public var rule: SESClientTypes.ReceiptRule?
    /// The name of the rule set that the receipt rule will be added to.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        after: Swift.String? = nil,
        rule: SESClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

struct CreateReceiptRuleInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let after: Swift.String?
    let rule: SESClientTypes.ReceiptRule?
}

extension CreateReceiptRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case after = "After"
        case rule = "Rule"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let afterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .after)
        after = afterDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension CreateReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaFunction" : self = .invalidLambdaFunctionException(try InvalidLambdaFunctionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3Configuration" : self = .invalidS3ConfigurationException(try InvalidS3ConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnsTopic" : self = .invalidSnsTopicException(try InvalidSnsTopicException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleDoesNotExist" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidLambdaFunctionException(InvalidLambdaFunctionException)
    case invalidS3ConfigurationException(InvalidS3ConfigurationException)
    case invalidSnsTopicException(InvalidSnsTopicException)
    case limitExceededException(LimitExceededException)
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("CreateReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create an empty receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct CreateReceiptRuleSetInput: Swift.Equatable {
    /// The name of the rule set to create. The name must:
    ///
    /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
    ///
    /// * Start and end with a letter or number.
    ///
    /// * Contain less than 64 characters.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

struct CreateReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
}

extension CreateReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
    }
}

extension CreateReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct CreateReceiptRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("CreateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to create an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct CreateTemplateInput: Swift.Equatable {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var template: SESClientTypes.Template?

    public init (
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

struct CreateTemplateInputBody: Swift.Equatable {
    let template: SESClientTypes.Template?
}

extension CreateTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDecoded = try containerValues.decodeIfPresent(SESClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension CreateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTemplate" : self = .invalidTemplateException(try InvalidTemplateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case invalidTemplateException(InvalidTemplateException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes {
    public enum CustomMailFromStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomMailFromStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomMailFromStatus(rawValue: rawValue) ?? CustomMailFromStatus.sdkUnknown(rawValue)
        }
    }
}

extension CustomVerificationEmailInvalidContentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CustomVerificationEmailInvalidContentExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that custom verification email template provided content is invalid.
public struct CustomVerificationEmailInvalidContentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomVerificationEmailInvalidContentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomVerificationEmailInvalidContentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.CustomVerificationEmailTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension SESClientTypes {
    /// Contains information about a custom verification email template.
    public struct CustomVerificationEmailTemplate: Swift.Equatable {
        /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
        public var failureRedirectionURL: Swift.String?
        /// The email address that the custom verification email is sent from.
        public var fromEmailAddress: Swift.String?
        /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
        public var successRedirectionURL: Swift.String?
        /// The name of the custom verification email template.
        public var templateName: Swift.String?
        /// The subject line of the custom verification email.
        public var templateSubject: Swift.String?

        public init (
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension CustomVerificationEmailTemplateAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CustomVerificationEmailTemplateAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplateName = output.error.customVerificationEmailTemplateName
            self.message = output.error.message
        } else {
            self.customVerificationEmailTemplateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that a custom verification email template with the name you specified already exists.
public struct CustomVerificationEmailTemplateAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the provided custom verification email template with the specified template name already exists.
    public var customVerificationEmailTemplateName: Swift.String?
    public var message: Swift.String?

    public init (
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.message = message
    }
}

struct CustomVerificationEmailTemplateAlreadyExistsExceptionBody: Swift.Equatable {
    let customVerificationEmailTemplateName: Swift.String?
    let message: Swift.String?
}

extension CustomVerificationEmailTemplateAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplateName = "CustomVerificationEmailTemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customVerificationEmailTemplateName)
        customVerificationEmailTemplateName = customVerificationEmailTemplateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomVerificationEmailTemplateDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CustomVerificationEmailTemplateDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplateName = output.error.customVerificationEmailTemplateName
            self.message = output.error.message
        } else {
            self.customVerificationEmailTemplateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that a custom verification email template with the name you specified does not exist.
public struct CustomVerificationEmailTemplateDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the provided custom verification email template does not exist.
    public var customVerificationEmailTemplateName: Swift.String?
    public var message: Swift.String?

    public init (
        customVerificationEmailTemplateName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplateName = customVerificationEmailTemplateName
        self.message = message
    }
}

struct CustomVerificationEmailTemplateDoesNotExistExceptionBody: Swift.Equatable {
    let customVerificationEmailTemplateName: Swift.String?
    let message: Swift.String?
}

extension CustomVerificationEmailTemplateDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplateName = "CustomVerificationEmailTemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customVerificationEmailTemplateName)
        customVerificationEmailTemplateName = customVerificationEmailTemplateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeleteConfigurationSetEventDestinationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestinationName = eventDestinationName {
            try container.encode(eventDestinationName, forKey: ClientRuntime.Key("EventDestinationName"))
        }
        try container.encode("DeleteConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set from which to delete the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

struct DeleteConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
}

extension DeleteConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
    }
}

extension DeleteConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationDoesNotExist" : self = .eventDestinationDoesNotExistException(try EventDestinationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationDoesNotExistException(EventDestinationDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfigurationSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct DeleteConfigurationSetInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
}

extension DeleteConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension DeleteConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfigurationSetTrackingOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DeleteConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteConfigurationSetTrackingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete open and click tracking options in a configuration set.
public struct DeleteConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set from which you want to delete the tracking options.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct DeleteConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
}

extension DeleteConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension DeleteConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsDoesNotExistException" : self = .trackingOptionsDoesNotExistException(try TrackingOptionsDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case trackingOptionsDoesNotExistException(TrackingOptionsDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an existing custom verification email template.
public struct DeleteCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
}

extension DeleteCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteIdentityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("DeleteIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete one of your Amazon SES identities (an email address or domain).
public struct DeleteIdentityInput: Swift.Equatable {
    /// The identity to be removed from the list of identities for the AWS Account.
    /// This member is required.
    public var identity: Swift.String?

    public init (
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

struct DeleteIdentityInputBody: Swift.Equatable {
    let identity: Swift.String?
}

extension DeleteIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
    }
}

extension DeleteIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteIdentityOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteIdentityPolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeleteIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteIdentityPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
public struct DeleteIdentityPolicyInput: Swift.Equatable {
    /// The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// The name of the policy to be deleted.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        identity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policyName = policyName
    }
}

struct DeleteIdentityPolicyInputBody: Swift.Equatable {
    let identity: Swift.String?
    let policyName: Swift.String?
}

extension DeleteIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension DeleteIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteIdentityPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteReceiptFilterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filterName = filterName {
            try container.encode(filterName, forKey: ClientRuntime.Key("FilterName"))
        }
        try container.encode("DeleteReceiptFilter", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an IP address filter. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DeleteReceiptFilterInput: Swift.Equatable {
    /// The name of the IP address filter to delete.
    /// This member is required.
    public var filterName: Swift.String?

    public init (
        filterName: Swift.String? = nil
    )
    {
        self.filterName = filterName
    }
}

struct DeleteReceiptFilterInputBody: Swift.Equatable {
    let filterName: Swift.String?
}

extension DeleteReceiptFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName = "FilterName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteReceiptFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteReceiptFilterOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteReceiptRuleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DeleteReceiptRuleInput: Swift.Equatable {
    /// The name of the receipt rule to delete.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that contains the receipt rule to delete.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

struct DeleteReceiptRuleInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let ruleName: Swift.String?
}

extension DeleteReceiptRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
    }
}

extension DeleteReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DeleteReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete a receipt rule set and all of the receipt rules it contains. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DeleteReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to delete.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

struct DeleteReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
}

extension DeleteReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
    }
}

extension DeleteReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CannotDelete" : self = .cannotDeleteException(try CannotDeleteException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case cannotDeleteException(CannotDeleteException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct DeleteReceiptRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("DeleteTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct DeleteTemplateInput: Swift.Equatable {
    /// The name of the template to be deleted.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
}

extension DeleteTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension DeleteTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteVerifiedEmailAddressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("DeleteVerifiedEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteVerifiedEmailAddressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to delete an email address from the list of email addresses you have attempted to verify under your AWS account.
public struct DeleteVerifiedEmailAddressInput: Swift.Equatable {
    /// An email address to be removed from the list of verified addresses.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct DeleteVerifiedEmailAddressInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
}

extension DeleteVerifiedEmailAddressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
    }
}

extension DeleteVerifiedEmailAddressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteVerifiedEmailAddressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVerifiedEmailAddressOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVerifiedEmailAddressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVerifiedEmailAddressOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.DeliveryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SESClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
    }
}

extension SESClientTypes {
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public struct DeliveryOptions: Swift.Equatable {
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: SESClientTypes.TlsPolicy?

        public init (
            tlsPolicy: SESClientTypes.TlsPolicy? = nil
        )
        {
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension DescribeActiveReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeActiveReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the metadata and receipt rules for the receipt rule set that is currently active. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DescribeActiveReceiptRuleSetInput: Swift.Equatable {

    public init () { }
}

extension DescribeActiveReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeActiveReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeActiveReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActiveReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeActiveReceiptRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
            self.rules = output.rules
        } else {
            self.metadata = nil
            self.rules = nil
        }
    }
}

/// Represents the metadata and receipt rules for the receipt rule set that is currently active.
public struct DescribeActiveReceiptRuleSetOutputResponse: Swift.Equatable {
    /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and a timestamp of when the rule set was created.
    public var metadata: SESClientTypes.ReceiptRuleSetMetadata?
    /// The receipt rules that belong to the active rule set.
    public var rules: [SESClientTypes.ReceiptRule]?

    public init (
        metadata: SESClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SESClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

struct DescribeActiveReceiptRuleSetOutputResponseBody: Swift.Equatable {
    let metadata: SESClientTypes.ReceiptRuleSetMetadata?
    let rules: [SESClientTypes.ReceiptRule]?
}

extension DescribeActiveReceiptRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata = "Metadata"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeActiveReceiptRuleSetResult"))
        let metadataDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptRuleSetMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.rules) {
            struct KeyVal0{struct member{}}
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rules)
            if let rulesWrappedContainer = rulesWrappedContainer {
                let rulesContainer = try rulesWrappedContainer.decodeIfPresent([SESClientTypes.ReceiptRule].self, forKey: .member)
                var rulesBuffer:[SESClientTypes.ReceiptRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [SESClientTypes.ReceiptRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension DescribeConfigurationSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetAttributeNames = configurationSetAttributeNames {
            if !configurationSetAttributeNames.isEmpty {
                var configurationSetAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationSetAttributeNames"))
                for (index0, configurationsetattribute0) in configurationSetAttributeNames.enumerated() {
                    try configurationSetAttributeNamesContainer.encode(configurationsetattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var configurationSetAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConfigurationSetAttributeNames"))
                try configurationSetAttributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        try container.encode("DescribeConfigurationSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct DescribeConfigurationSetInput: Swift.Equatable {
    /// A list of configuration set attributes to return.
    public var configurationSetAttributeNames: [SESClientTypes.ConfigurationSetAttribute]?
    /// The name of the configuration set to describe.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetAttributeNames: [SESClientTypes.ConfigurationSetAttribute]? = nil,
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetAttributeNames = configurationSetAttributeNames
        self.configurationSetName = configurationSetName
    }
}

struct DescribeConfigurationSetInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let configurationSetAttributeNames: [SESClientTypes.ConfigurationSetAttribute]?
}

extension DescribeConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetAttributeNames = "ConfigurationSetAttributeNames"
        case configurationSetName = "ConfigurationSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        if containerValues.contains(.configurationSetAttributeNames) {
            struct KeyVal0{struct member{}}
            let configurationSetAttributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .configurationSetAttributeNames)
            if let configurationSetAttributeNamesWrappedContainer = configurationSetAttributeNamesWrappedContainer {
                let configurationSetAttributeNamesContainer = try configurationSetAttributeNamesWrappedContainer.decodeIfPresent([SESClientTypes.ConfigurationSetAttribute].self, forKey: .member)
                var configurationSetAttributeNamesBuffer:[SESClientTypes.ConfigurationSetAttribute]? = nil
                if let configurationSetAttributeNamesContainer = configurationSetAttributeNamesContainer {
                    configurationSetAttributeNamesBuffer = [SESClientTypes.ConfigurationSetAttribute]()
                    for stringContainer0 in configurationSetAttributeNamesContainer {
                        configurationSetAttributeNamesBuffer?.append(stringContainer0)
                    }
                }
                configurationSetAttributeNames = configurationSetAttributeNamesBuffer
            } else {
                configurationSetAttributeNames = []
            }
        } else {
            configurationSetAttributeNames = nil
        }
    }
}

extension DescribeConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeConfigurationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSet = output.configurationSet
            self.deliveryOptions = output.deliveryOptions
            self.eventDestinations = output.eventDestinations
            self.reputationOptions = output.reputationOptions
            self.trackingOptions = output.trackingOptions
        } else {
            self.configurationSet = nil
            self.deliveryOptions = nil
            self.eventDestinations = nil
            self.reputationOptions = nil
            self.trackingOptions = nil
        }
    }
}

/// Represents the details of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct DescribeConfigurationSetOutputResponse: Swift.Equatable {
    /// The configuration set object associated with the specified configuration set.
    public var configurationSet: SESClientTypes.ConfigurationSet?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public var deliveryOptions: SESClientTypes.DeliveryOptions?
    /// A list of event destinations associated with the configuration set.
    public var eventDestinations: [SESClientTypes.EventDestination]?
    /// An object that represents the reputation settings for the configuration set.
    public var reputationOptions: SESClientTypes.ReputationOptions?
    /// The name of the custom open and click tracking domain associated with the configuration set.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init (
        configurationSet: SESClientTypes.ConfigurationSet? = nil,
        deliveryOptions: SESClientTypes.DeliveryOptions? = nil,
        eventDestinations: [SESClientTypes.EventDestination]? = nil,
        reputationOptions: SESClientTypes.ReputationOptions? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSet = configurationSet
        self.deliveryOptions = deliveryOptions
        self.eventDestinations = eventDestinations
        self.reputationOptions = reputationOptions
        self.trackingOptions = trackingOptions
    }
}

struct DescribeConfigurationSetOutputResponseBody: Swift.Equatable {
    let configurationSet: SESClientTypes.ConfigurationSet?
    let eventDestinations: [SESClientTypes.EventDestination]?
    let trackingOptions: SESClientTypes.TrackingOptions?
    let deliveryOptions: SESClientTypes.DeliveryOptions?
    let reputationOptions: SESClientTypes.ReputationOptions?
}

extension DescribeConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
        case deliveryOptions = "DeliveryOptions"
        case eventDestinations = "EventDestinations"
        case reputationOptions = "ReputationOptions"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationSetResult"))
        let configurationSetDecoded = try containerValues.decodeIfPresent(SESClientTypes.ConfigurationSet.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        if containerValues.contains(.eventDestinations) {
            struct KeyVal0{struct member{}}
            let eventDestinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .eventDestinations)
            if let eventDestinationsWrappedContainer = eventDestinationsWrappedContainer {
                let eventDestinationsContainer = try eventDestinationsWrappedContainer.decodeIfPresent([SESClientTypes.EventDestination].self, forKey: .member)
                var eventDestinationsBuffer:[SESClientTypes.EventDestination]? = nil
                if let eventDestinationsContainer = eventDestinationsContainer {
                    eventDestinationsBuffer = [SESClientTypes.EventDestination]()
                    for structureContainer0 in eventDestinationsContainer {
                        eventDestinationsBuffer?.append(structureContainer0)
                    }
                }
                eventDestinations = eventDestinationsBuffer
            } else {
                eventDestinations = []
            }
        } else {
            eventDestinations = nil
        }
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
    }
}

extension DescribeReceiptRuleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReceiptRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DescribeReceiptRuleInput: Swift.Equatable {
    /// The name of the receipt rule.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that the receipt rule belongs to.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

struct DescribeReceiptRuleInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let ruleName: Swift.String?
}

extension DescribeReceiptRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
    }
}

extension DescribeReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExist" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReceiptRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rule = output.rule
        } else {
            self.rule = nil
        }
    }
}

/// Represents the details of a receipt rule.
public struct DescribeReceiptRuleOutputResponse: Swift.Equatable {
    /// A data structure that contains the specified receipt rule's name, actions, recipients, domains, enabled status, scan status, and Transport Layer Security (TLS) policy.
    public var rule: SESClientTypes.ReceiptRule?

    public init (
        rule: SESClientTypes.ReceiptRule? = nil
    )
    {
        self.rule = rule
    }
}

struct DescribeReceiptRuleOutputResponseBody: Swift.Equatable {
    let rule: SESClientTypes.ReceiptRule?
}

extension DescribeReceiptRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReceiptRuleResult"))
        let ruleDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension DescribeReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("DescribeReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the details of a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct DescribeReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to describe.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

struct DescribeReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
}

extension DescribeReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
    }
}

extension DescribeReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReceiptRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
            self.rules = output.rules
        } else {
            self.metadata = nil
            self.rules = nil
        }
    }
}

/// Represents the details of the specified receipt rule set.
public struct DescribeReceiptRuleSetOutputResponse: Swift.Equatable {
    /// The metadata for the receipt rule set, which consists of the rule set name and the timestamp of when the rule set was created.
    public var metadata: SESClientTypes.ReceiptRuleSetMetadata?
    /// A list of the receipt rules that belong to the specified receipt rule set.
    public var rules: [SESClientTypes.ReceiptRule]?

    public init (
        metadata: SESClientTypes.ReceiptRuleSetMetadata? = nil,
        rules: [SESClientTypes.ReceiptRule]? = nil
    )
    {
        self.metadata = metadata
        self.rules = rules
    }
}

struct DescribeReceiptRuleSetOutputResponseBody: Swift.Equatable {
    let metadata: SESClientTypes.ReceiptRuleSetMetadata?
    let rules: [SESClientTypes.ReceiptRule]?
}

extension DescribeReceiptRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata = "Metadata"
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReceiptRuleSetResult"))
        let metadataDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptRuleSetMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.rules) {
            struct KeyVal0{struct member{}}
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rules)
            if let rulesWrappedContainer = rulesWrappedContainer {
                let rulesContainer = try rulesWrappedContainer.decodeIfPresent([SESClientTypes.ReceiptRule].self, forKey: .member)
                var rulesBuffer:[SESClientTypes.ReceiptRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [SESClientTypes.ReceiptRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension SESClientTypes.Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bccAddresses = bccAddresses {
            if !bccAddresses.isEmpty {
                var bccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BccAddresses"))
                for (index0, address0) in bccAddresses.enumerated() {
                    try bccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var bccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BccAddresses"))
                try bccAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ccAddresses = ccAddresses {
            if !ccAddresses.isEmpty {
                var ccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CcAddresses"))
                for (index0, address0) in ccAddresses.enumerated() {
                    try ccAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ccAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CcAddresses"))
                try ccAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let toAddresses = toAddresses {
            if !toAddresses.isEmpty {
                var toAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ToAddresses"))
                for (index0, address0) in toAddresses.enumerated() {
                    try toAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var toAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ToAddresses"))
                try toAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.toAddresses) {
            struct KeyVal0{struct member{}}
            let toAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .toAddresses)
            if let toAddressesWrappedContainer = toAddressesWrappedContainer {
                let toAddressesContainer = try toAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var toAddressesBuffer:[Swift.String]? = nil
                if let toAddressesContainer = toAddressesContainer {
                    toAddressesBuffer = [Swift.String]()
                    for stringContainer0 in toAddressesContainer {
                        toAddressesBuffer?.append(stringContainer0)
                    }
                }
                toAddresses = toAddressesBuffer
            } else {
                toAddresses = []
            }
        } else {
            toAddresses = nil
        }
        if containerValues.contains(.ccAddresses) {
            struct KeyVal0{struct member{}}
            let ccAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ccAddresses)
            if let ccAddressesWrappedContainer = ccAddressesWrappedContainer {
                let ccAddressesContainer = try ccAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ccAddressesBuffer:[Swift.String]? = nil
                if let ccAddressesContainer = ccAddressesContainer {
                    ccAddressesBuffer = [Swift.String]()
                    for stringContainer0 in ccAddressesContainer {
                        ccAddressesBuffer?.append(stringContainer0)
                    }
                }
                ccAddresses = ccAddressesBuffer
            } else {
                ccAddresses = []
            }
        } else {
            ccAddresses = nil
        }
        if containerValues.contains(.bccAddresses) {
            struct KeyVal0{struct member{}}
            let bccAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .bccAddresses)
            if let bccAddressesWrappedContainer = bccAddressesWrappedContainer {
                let bccAddressesContainer = try bccAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var bccAddressesBuffer:[Swift.String]? = nil
                if let bccAddressesContainer = bccAddressesContainer {
                    bccAddressesBuffer = [Swift.String]()
                    for stringContainer0 in bccAddressesContainer {
                        bccAddressesBuffer?.append(stringContainer0)
                    }
                }
                bccAddresses = bccAddressesBuffer
            } else {
                bccAddresses = []
            }
        } else {
            bccAddresses = nil
        }
    }
}

extension SESClientTypes {
    /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
    public struct Destination: Swift.Equatable {
        /// The recipients to place on the BCC: line of the message.
        public var bccAddresses: [Swift.String]?
        /// The recipients to place on the CC: line of the message.
        public var ccAddresses: [Swift.String]?
        /// The recipients to place on the To: line of the message.
        public var toAddresses: [Swift.String]?

        public init (
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SESClientTypes {
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "emailHeader"
            case .linkTag: return "linkTag"
            case .messageTag: return "messageTag"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes {
    public enum DsnAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delayed
        case delivered
        case expanded
        case failed
        case relayed
        case sdkUnknown(Swift.String)

        public static var allCases: [DsnAction] {
            return [
                .delayed,
                .delivered,
                .expanded,
                .failed,
                .relayed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delayed: return "delayed"
            case .delivered: return "delivered"
            case .expanded: return "expanded"
            case .failed: return "failed"
            case .relayed: return "relayed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DsnAction(rawValue: rawValue) ?? DsnAction.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.EventDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case snsDestination = "SNSDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try container.encode(cloudWatchDestination, forKey: ClientRuntime.Key("CloudWatchDestination"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try container.encode(kinesisFirehoseDestination, forKey: ClientRuntime.Key("KinesisFirehoseDestination"))
        }
        if let matchingEventTypes = matchingEventTypes {
            if !matchingEventTypes.isEmpty {
                var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
                for (index0, eventtype0) in matchingEventTypes.enumerated() {
                    try matchingEventTypesContainer.encode(eventtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
                try matchingEventTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let snsDestination = snsDestination {
            try container.encode(snsDestination, forKey: ClientRuntime.Key("SNSDestination"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        if containerValues.contains(.matchingEventTypes) {
            struct KeyVal0{struct member{}}
            let matchingEventTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .matchingEventTypes)
            if let matchingEventTypesWrappedContainer = matchingEventTypesWrappedContainer {
                let matchingEventTypesContainer = try matchingEventTypesWrappedContainer.decodeIfPresent([SESClientTypes.EventType].self, forKey: .member)
                var matchingEventTypesBuffer:[SESClientTypes.EventType]? = nil
                if let matchingEventTypesContainer = matchingEventTypesContainer {
                    matchingEventTypesBuffer = [SESClientTypes.EventType]()
                    for stringContainer0 in matchingEventTypesContainer {
                        matchingEventTypesBuffer?.append(stringContainer0)
                    }
                }
                matchingEventTypes = matchingEventTypesBuffer
            } else {
                matchingEventTypes = []
            }
        } else {
            matchingEventTypes = nil
        }
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.SNSDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
    }
}

extension SESClientTypes {
    /// Contains information about the event destination that the specified email sending events will be published to. When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS). Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct EventDestination: Swift.Equatable {
        /// An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        public var cloudWatchDestination: SESClientTypes.CloudWatchDestination?
        /// Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.
        public var enabled: Swift.Bool
        /// An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        public var kinesisFirehoseDestination: SESClientTypes.KinesisFirehoseDestination?
        /// The type of email sending events to publish to the event destination.
        /// This member is required.
        public var matchingEventTypes: [SESClientTypes.EventType]?
        /// The name of the event destination. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain less than 64 characters.
        /// This member is required.
        public var name: Swift.String?
        /// An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
        public var snsDestination: SESClientTypes.SNSDestination?

        public init (
            cloudWatchDestination: SESClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SESClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            snsDestination: SESClientTypes.SNSDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.snsDestination = snsDestination
        }
    }

}

extension EventDestinationAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EventDestinationAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the event destination could not be created because of a naming conflict.
public struct EventDestinationAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    /// Indicates that the event destination does not exist.
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct EventDestinationAlreadyExistsExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let message: Swift.String?
}

extension EventDestinationAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EventDestinationDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EventDestinationDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the event destination does not exist.
public struct EventDestinationDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    /// Indicates that the event destination does not exist.
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct EventDestinationDoesNotExistExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let message: Swift.String?
}

extension EventDestinationDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case `open`
        case reject
        case renderingFailure
        case send
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "bounce"
            case .click: return "click"
            case .complaint: return "complaint"
            case .delivery: return "delivery"
            case .open: return "open"
            case .reject: return "reject"
            case .renderingFailure: return "renderingFailure"
            case .send: return "send"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.ExtensionField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SESClientTypes {
    /// Additional X-headers to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html).
    public struct ExtensionField: Swift.Equatable {
        /// The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the header to add. Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension FromEmailAddressNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<FromEmailAddressNotVerifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.fromEmailAddress = output.error.fromEmailAddress
            self.message = output.error.message
        } else {
            self.fromEmailAddress = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the sender address specified for a custom verification email is not verified, and is therefore not eligible to send the custom verification email.
public struct FromEmailAddressNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the from email address associated with the custom verification email template is not verified.
    public var fromEmailAddress: Swift.String?
    public var message: Swift.String?

    public init (
        fromEmailAddress: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.fromEmailAddress = fromEmailAddress
        self.message = message
    }
}

struct FromEmailAddressNotVerifiedExceptionBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let message: Swift.String?
}

extension FromEmailAddressNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromEmailAddress = "FromEmailAddress"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GetAccountSendingEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetAccountSendingEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccountSendingEnabledInput: Swift.Equatable {

    public init () { }
}

extension GetAccountSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAccountSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAccountSendingEnabledOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.enabled = output.enabled
        } else {
            self.enabled = false
        }
    }
}

/// Represents a request to return the email sending status for your Amazon SES account in the current AWS Region.
public struct GetAccountSendingEnabledOutputResponse: Swift.Equatable {
    /// Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
    public var enabled: Swift.Bool

    public init (
        enabled: Swift.Bool = false
    )
    {
        self.enabled = enabled
    }
}

struct GetAccountSendingEnabledOutputResponseBody: Swift.Equatable {
    let enabled: Swift.Bool
}

extension GetAccountSendingEnabledOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetAccountSendingEnabledResult"))
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension GetCustomVerificationEmailTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to retrieve an existing custom verification email template.
public struct GetCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
}

extension GetCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension GetCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailTemplateDoesNotExist" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCustomVerificationEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureRedirectionURL = output.failureRedirectionURL
            self.fromEmailAddress = output.fromEmailAddress
            self.successRedirectionURL = output.successRedirectionURL
            self.templateContent = output.templateContent
            self.templateName = output.templateName
            self.templateSubject = output.templateSubject
        } else {
            self.failureRedirectionURL = nil
            self.fromEmailAddress = nil
            self.successRedirectionURL = nil
            self.templateContent = nil
            self.templateName = nil
            self.templateSubject = nil
        }
    }
}

/// The content of the custom verification email template.
public struct GetCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
    let templateName: Swift.String?
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetCustomVerificationEmailTemplateResult"))
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension GetIdentityDkimAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityDkimAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityDkimAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request for the status of Amazon SES Easy DKIM signing for an identity. For domain identities, this request also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES successfully verified that these tokens were published. For more information about Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
public struct GetIdentityDkimAttributesInput: Swift.Equatable {
    /// A list of one or more verified identities - email addresses, domains, or both.
    /// This member is required.
    public var identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

struct GetIdentityDkimAttributesInputBody: Swift.Equatable {
    let identities: [Swift.String]?
}

extension GetIdentityDkimAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
    }
}

extension GetIdentityDkimAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityDkimAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityDkimAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityDkimAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityDkimAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
        } else {
            self.dkimAttributes = nil
        }
    }
}

/// Represents the status of Amazon SES Easy DKIM signing for an identity. For domain identities, this response also contains the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES successfully verified that these tokens were published.
public struct GetIdentityDkimAttributesOutputResponse: Swift.Equatable {
    /// The DKIM attributes for an email address or a domain.
    /// This member is required.
    public var dkimAttributes: [Swift.String:SESClientTypes.IdentityDkimAttributes]?

    public init (
        dkimAttributes: [Swift.String:SESClientTypes.IdentityDkimAttributes]? = nil
    )
    {
        self.dkimAttributes = dkimAttributes
    }
}

struct GetIdentityDkimAttributesOutputResponseBody: Swift.Equatable {
    let dkimAttributes: [Swift.String:SESClientTypes.IdentityDkimAttributes]?
}

extension GetIdentityDkimAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityDkimAttributesResult"))
        if containerValues.contains(.dkimAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let dkimAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SESClientTypes.IdentityDkimAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .dkimAttributes)
            if let dkimAttributesWrappedContainer = dkimAttributesWrappedContainer {
                let dkimAttributesContainer = try dkimAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SESClientTypes.IdentityDkimAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var dkimAttributesBuffer: [Swift.String:SESClientTypes.IdentityDkimAttributes]? = nil
                if let dkimAttributesContainer = dkimAttributesContainer {
                    dkimAttributesBuffer = [Swift.String:SESClientTypes.IdentityDkimAttributes]()
                    for structureContainer0 in dkimAttributesContainer {
                        dkimAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                dkimAttributes = dkimAttributesBuffer
            } else {
                dkimAttributes = [:]
            }
        } else {
            dkimAttributes = nil
        }
    }
}

extension GetIdentityMailFromDomainAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityMailFromDomainAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityMailFromDomainAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the Amazon SES custom MAIL FROM attributes for a list of identities. For information about using a custom MAIL FROM domain, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html).
public struct GetIdentityMailFromDomainAttributesInput: Swift.Equatable {
    /// A list of one or more identities.
    /// This member is required.
    public var identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

struct GetIdentityMailFromDomainAttributesInputBody: Swift.Equatable {
    let identities: [Swift.String]?
}

extension GetIdentityMailFromDomainAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
    }
}

extension GetIdentityMailFromDomainAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityMailFromDomainAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityMailFromDomainAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityMailFromDomainAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityMailFromDomainAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mailFromDomainAttributes = output.mailFromDomainAttributes
        } else {
            self.mailFromDomainAttributes = nil
        }
    }
}

/// Represents the custom MAIL FROM attributes for a list of identities.
public struct GetIdentityMailFromDomainAttributesOutputResponse: Swift.Equatable {
    /// A map of identities to custom MAIL FROM attributes.
    /// This member is required.
    public var mailFromDomainAttributes: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]?

    public init (
        mailFromDomainAttributes: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]? = nil
    )
    {
        self.mailFromDomainAttributes = mailFromDomainAttributes
    }
}

struct GetIdentityMailFromDomainAttributesOutputResponseBody: Swift.Equatable {
    let mailFromDomainAttributes: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]?
}

extension GetIdentityMailFromDomainAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mailFromDomainAttributes = "MailFromDomainAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityMailFromDomainAttributesResult"))
        if containerValues.contains(.mailFromDomainAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let mailFromDomainAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SESClientTypes.IdentityMailFromDomainAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .mailFromDomainAttributes)
            if let mailFromDomainAttributesWrappedContainer = mailFromDomainAttributesWrappedContainer {
                let mailFromDomainAttributesContainer = try mailFromDomainAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SESClientTypes.IdentityMailFromDomainAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var mailFromDomainAttributesBuffer: [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]? = nil
                if let mailFromDomainAttributesContainer = mailFromDomainAttributesContainer {
                    mailFromDomainAttributesBuffer = [Swift.String:SESClientTypes.IdentityMailFromDomainAttributes]()
                    for structureContainer0 in mailFromDomainAttributesContainer {
                        mailFromDomainAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                mailFromDomainAttributes = mailFromDomainAttributesBuffer
            } else {
                mailFromDomainAttributes = [:]
            }
        } else {
            mailFromDomainAttributes = nil
        }
    }
}

extension GetIdentityNotificationAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityNotificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityNotificationAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the notification attributes for a list of identities you verified with Amazon SES. For information about Amazon SES notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html).
public struct GetIdentityNotificationAttributesInput: Swift.Equatable {
    /// A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    /// This member is required.
    public var identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

struct GetIdentityNotificationAttributesInputBody: Swift.Equatable {
    let identities: [Swift.String]?
}

extension GetIdentityNotificationAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
    }
}

extension GetIdentityNotificationAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityNotificationAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityNotificationAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityNotificationAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityNotificationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notificationAttributes = output.notificationAttributes
        } else {
            self.notificationAttributes = nil
        }
    }
}

/// Represents the notification attributes for a list of identities.
public struct GetIdentityNotificationAttributesOutputResponse: Swift.Equatable {
    /// A map of Identity to IdentityNotificationAttributes.
    /// This member is required.
    public var notificationAttributes: [Swift.String:SESClientTypes.IdentityNotificationAttributes]?

    public init (
        notificationAttributes: [Swift.String:SESClientTypes.IdentityNotificationAttributes]? = nil
    )
    {
        self.notificationAttributes = notificationAttributes
    }
}

struct GetIdentityNotificationAttributesOutputResponseBody: Swift.Equatable {
    let notificationAttributes: [Swift.String:SESClientTypes.IdentityNotificationAttributes]?
}

extension GetIdentityNotificationAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationAttributes = "NotificationAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityNotificationAttributesResult"))
        if containerValues.contains(.notificationAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let notificationAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SESClientTypes.IdentityNotificationAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .notificationAttributes)
            if let notificationAttributesWrappedContainer = notificationAttributesWrappedContainer {
                let notificationAttributesContainer = try notificationAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SESClientTypes.IdentityNotificationAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var notificationAttributesBuffer: [Swift.String:SESClientTypes.IdentityNotificationAttributes]? = nil
                if let notificationAttributesContainer = notificationAttributesContainer {
                    notificationAttributesBuffer = [Swift.String:SESClientTypes.IdentityNotificationAttributes]()
                    for structureContainer0 in notificationAttributesContainer {
                        notificationAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                notificationAttributes = notificationAttributesBuffer
            } else {
                notificationAttributes = [:]
            }
        } else {
            notificationAttributes = nil
        }
    }
}

extension GetIdentityPoliciesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policyNames = policyNames {
            if !policyNames.isEmpty {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                for (index0, policyname0) in policyNames.enumerated() {
                    try policyNamesContainer.encode(policyname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
                try policyNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the requested sending authorization policies for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
public struct GetIdentityPoliciesInput: Swift.Equatable {
    /// The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use ListIdentityPolicies.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init (
        identity: Swift.String? = nil,
        policyNames: [Swift.String]? = nil
    )
    {
        self.identity = identity
        self.policyNames = policyNames
    }
}

struct GetIdentityPoliciesInputBody: Swift.Equatable {
    let identity: Swift.String?
    let policyNames: [Swift.String]?
}

extension GetIdentityPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
    }
}

extension GetIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policies = output.policies
        } else {
            self.policies = nil
        }
    }
}

/// Represents the requested sending authorization policies.
public struct GetIdentityPoliciesOutputResponse: Swift.Equatable {
    /// A map of policy names to policies.
    /// This member is required.
    public var policies: [Swift.String:Swift.String]?

    public init (
        policies: [Swift.String:Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

struct GetIdentityPoliciesOutputResponseBody: Swift.Equatable {
    let policies: [Swift.String:Swift.String]?
}

extension GetIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityPoliciesResult"))
        if containerValues.contains(.policies) {
            struct KeyVal0{struct key{}; struct value{}}
            let policiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .policies)
            if let policiesWrappedContainer = policiesWrappedContainer {
                let policiesContainer = try policiesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var policiesBuffer: [Swift.String:Swift.String]? = nil
                if let policiesContainer = policiesContainer {
                    policiesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in policiesContainer {
                        policiesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                policies = policiesBuffer
            } else {
                policies = [:]
            }
        } else {
            policies = nil
        }
    }
}

extension GetIdentityVerificationAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identities = identities {
            if !identities.isEmpty {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                for (index0, identity0) in identities.enumerated() {
                    try identitiesContainer.encode(identity0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identities"))
                try identitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("GetIdentityVerificationAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetIdentityVerificationAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return the Amazon SES verification status of a list of identities. For domain identities, this request also returns the verification token. For information about verifying identities with Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html).
public struct GetIdentityVerificationAttributesInput: Swift.Equatable {
    /// A list of identities.
    /// This member is required.
    public var identities: [Swift.String]?

    public init (
        identities: [Swift.String]? = nil
    )
    {
        self.identities = identities
    }
}

struct GetIdentityVerificationAttributesInputBody: Swift.Equatable {
    let identities: [Swift.String]?
}

extension GetIdentityVerificationAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
    }
}

extension GetIdentityVerificationAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetIdentityVerificationAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityVerificationAttributesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityVerificationAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityVerificationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verificationAttributes = output.verificationAttributes
        } else {
            self.verificationAttributes = nil
        }
    }
}

/// The Amazon SES verification status of a list of identities. For domain identities, this response also contains the verification token.
public struct GetIdentityVerificationAttributesOutputResponse: Swift.Equatable {
    /// A map of Identities to IdentityVerificationAttributes objects.
    /// This member is required.
    public var verificationAttributes: [Swift.String:SESClientTypes.IdentityVerificationAttributes]?

    public init (
        verificationAttributes: [Swift.String:SESClientTypes.IdentityVerificationAttributes]? = nil
    )
    {
        self.verificationAttributes = verificationAttributes
    }
}

struct GetIdentityVerificationAttributesOutputResponseBody: Swift.Equatable {
    let verificationAttributes: [Swift.String:SESClientTypes.IdentityVerificationAttributes]?
}

extension GetIdentityVerificationAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationAttributes = "VerificationAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetIdentityVerificationAttributesResult"))
        if containerValues.contains(.verificationAttributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let verificationAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SESClientTypes.IdentityVerificationAttributes, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .verificationAttributes)
            if let verificationAttributesWrappedContainer = verificationAttributesWrappedContainer {
                let verificationAttributesContainer = try verificationAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SESClientTypes.IdentityVerificationAttributes, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var verificationAttributesBuffer: [Swift.String:SESClientTypes.IdentityVerificationAttributes]? = nil
                if let verificationAttributesContainer = verificationAttributesContainer {
                    verificationAttributesBuffer = [Swift.String:SESClientTypes.IdentityVerificationAttributes]()
                    for structureContainer0 in verificationAttributesContainer {
                        verificationAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                verificationAttributes = verificationAttributesBuffer
            } else {
                verificationAttributes = [:]
            }
        } else {
            verificationAttributes = nil
        }
    }
}

extension GetSendQuotaInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendQuota", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSendQuotaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSendQuotaInput: Swift.Equatable {

    public init () { }
}

extension GetSendQuotaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSendQuotaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSendQuotaOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSendQuotaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSendQuotaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.max24HourSend = output.max24HourSend
            self.maxSendRate = output.maxSendRate
            self.sentLast24Hours = output.sentLast24Hours
        } else {
            self.max24HourSend = 0.0
            self.maxSendRate = 0.0
            self.sentLast24Hours = 0.0
        }
    }
}

/// Represents your Amazon SES daily sending quota, maximum send rate, and the number of emails you have sent in the last 24 hours.
public struct GetSendQuotaOutputResponse: Swift.Equatable {
    /// The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.
    public var max24HourSend: Swift.Double
    /// The maximum number of emails that Amazon SES can accept from the user's account per second. The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.
    public var maxSendRate: Swift.Double
    /// The number of emails sent during the previous 24 hours.
    public var sentLast24Hours: Swift.Double

    public init (
        max24HourSend: Swift.Double = 0.0,
        maxSendRate: Swift.Double = 0.0,
        sentLast24Hours: Swift.Double = 0.0
    )
    {
        self.max24HourSend = max24HourSend
        self.maxSendRate = maxSendRate
        self.sentLast24Hours = sentLast24Hours
    }
}

struct GetSendQuotaOutputResponseBody: Swift.Equatable {
    let max24HourSend: Swift.Double
    let maxSendRate: Swift.Double
    let sentLast24Hours: Swift.Double
}

extension GetSendQuotaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max24HourSend = "Max24HourSend"
        case maxSendRate = "MaxSendRate"
        case sentLast24Hours = "SentLast24Hours"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSendQuotaResult"))
        let max24HourSendDecoded = try containerValues.decode(Swift.Double.self, forKey: .max24HourSend)
        max24HourSend = max24HourSendDecoded
        let maxSendRateDecoded = try containerValues.decode(Swift.Double.self, forKey: .maxSendRate)
        maxSendRate = maxSendRateDecoded
        let sentLast24HoursDecoded = try containerValues.decode(Swift.Double.self, forKey: .sentLast24Hours)
        sentLast24Hours = sentLast24HoursDecoded
    }
}

extension GetSendStatisticsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("GetSendStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetSendStatisticsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSendStatisticsInput: Swift.Equatable {

    public init () { }
}

extension GetSendStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetSendStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSendStatisticsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSendStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSendStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sendDataPoints = output.sendDataPoints
        } else {
            self.sendDataPoints = nil
        }
    }
}

/// Represents a list of data points. This list contains aggregated data from the previous two weeks of your sending activity with Amazon SES.
public struct GetSendStatisticsOutputResponse: Swift.Equatable {
    /// A list of data points, each of which represents 15 minutes of activity.
    public var sendDataPoints: [SESClientTypes.SendDataPoint]?

    public init (
        sendDataPoints: [SESClientTypes.SendDataPoint]? = nil
    )
    {
        self.sendDataPoints = sendDataPoints
    }
}

struct GetSendStatisticsOutputResponseBody: Swift.Equatable {
    let sendDataPoints: [SESClientTypes.SendDataPoint]?
}

extension GetSendStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendDataPoints = "SendDataPoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSendStatisticsResult"))
        if containerValues.contains(.sendDataPoints) {
            struct KeyVal0{struct member{}}
            let sendDataPointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sendDataPoints)
            if let sendDataPointsWrappedContainer = sendDataPointsWrappedContainer {
                let sendDataPointsContainer = try sendDataPointsWrappedContainer.decodeIfPresent([SESClientTypes.SendDataPoint].self, forKey: .member)
                var sendDataPointsBuffer:[SESClientTypes.SendDataPoint]? = nil
                if let sendDataPointsContainer = sendDataPointsContainer {
                    sendDataPointsBuffer = [SESClientTypes.SendDataPoint]()
                    for structureContainer0 in sendDataPointsContainer {
                        sendDataPointsBuffer?.append(structureContainer0)
                    }
                }
                sendDataPoints = sendDataPointsBuffer
            } else {
                sendDataPoints = []
            }
        } else {
            sendDataPoints = nil
        }
    }
}

extension GetTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTemplateInput: Swift.Equatable {
    /// The name of the template you want to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
}

extension GetTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension GetTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TemplateDoesNotExist" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTemplateOutputError: Swift.Error, Swift.Equatable {
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.template = output.template
        } else {
            self.template = nil
        }
    }
}

public struct GetTemplateOutputResponse: Swift.Equatable {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    public var template: SESClientTypes.Template?

    public init (
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

struct GetTemplateOutputResponseBody: Swift.Equatable {
    let template: SESClientTypes.Template?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateResult"))
        let templateDecoded = try containerValues.decodeIfPresent(SESClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SESClientTypes.IdentityDkimAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimEnabled = "DkimEnabled"
        case dkimTokens = "DkimTokens"
        case dkimVerificationStatus = "DkimVerificationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let dkimTokens = dkimTokens {
            if !dkimTokens.isEmpty {
                var dkimTokensContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DkimTokens"))
                for (index0, verificationtoken0) in dkimTokens.enumerated() {
                    try dkimTokensContainer.encode(verificationtoken0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dkimTokensContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DkimTokens"))
                try dkimTokensContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dkimVerificationStatus = dkimVerificationStatus {
            try container.encode(dkimVerificationStatus, forKey: ClientRuntime.Key("DkimVerificationStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dkimEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dkimEnabled)
        dkimEnabled = dkimEnabledDecoded
        let dkimVerificationStatusDecoded = try containerValues.decodeIfPresent(SESClientTypes.VerificationStatus.self, forKey: .dkimVerificationStatus)
        dkimVerificationStatus = dkimVerificationStatusDecoded
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dkimTokensBuffer:[Swift.String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [Swift.String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}

extension SESClientTypes {
    /// Represents the DKIM attributes of a verified email address or a domain.
    public struct IdentityDkimAttributes: Swift.Equatable {
        /// Is true if DKIM signing is enabled for email sent from the identity. It's false otherwise. The default value is true.
        /// This member is required.
        public var dkimEnabled: Swift.Bool
        /// A set of character strings that represent the domain's identity. Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.) For more information about creating DNS records using DKIM tokens, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
        public var dkimTokens: [Swift.String]?
        /// Describes whether Amazon SES has successfully verified the DKIM DNS records (tokens) published in the domain name's DNS. (This only applies to domain identities, not email address identities.)
        /// This member is required.
        public var dkimVerificationStatus: SESClientTypes.VerificationStatus?

        public init (
            dkimEnabled: Swift.Bool = false,
            dkimTokens: [Swift.String]? = nil,
            dkimVerificationStatus: SESClientTypes.VerificationStatus? = nil
        )
        {
            self.dkimEnabled = dkimEnabled
            self.dkimTokens = dkimTokens
            self.dkimVerificationStatus = dkimVerificationStatus
        }
    }

}

extension SESClientTypes.IdentityMailFromDomainAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMXFailure = "BehaviorOnMXFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        if let mailFromDomainStatus = mailFromDomainStatus {
            try container.encode(mailFromDomainStatus, forKey: ClientRuntime.Key("MailFromDomainStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let mailFromDomainStatusDecoded = try containerValues.decodeIfPresent(SESClientTypes.CustomMailFromStatus.self, forKey: .mailFromDomainStatus)
        mailFromDomainStatus = mailFromDomainStatusDecoded
        let behaviorOnMXFailureDecoded = try containerValues.decodeIfPresent(SESClientTypes.BehaviorOnMXFailure.self, forKey: .behaviorOnMXFailure)
        behaviorOnMXFailure = behaviorOnMXFailureDecoded
    }
}

extension SESClientTypes {
    /// Represents the custom MAIL FROM domain attributes of a verified identity (email address or domain).
    public struct IdentityMailFromDomainAttributes: Swift.Equatable {
        /// The action that Amazon SES takes if it cannot successfully read the required MX record when you send an email. A value of UseDefaultValue indicates that if Amazon SES cannot read the required MX record, it uses amazonses.com (or a subdomain of that) as the MAIL FROM domain. A value of RejectMessage indicates that if Amazon SES cannot read the required MX record, Amazon SES returns a MailFromDomainNotVerified error and does not send the email. The custom MAIL FROM setup states that result in this behavior are Pending, Failed, and TemporaryFailure.
        /// This member is required.
        public var behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure?
        /// The custom MAIL FROM domain that the identity is configured to use.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The state that indicates whether Amazon SES has successfully read the MX record required for custom MAIL FROM domain setup. If the state is Success, Amazon SES uses the specified custom MAIL FROM domain when the verified identity sends an email. All other states indicate that Amazon SES takes the action described by BehaviorOnMXFailure.
        /// This member is required.
        public var mailFromDomainStatus: SESClientTypes.CustomMailFromStatus?

        public init (
            behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SESClientTypes.CustomMailFromStatus? = nil
        )
        {
            self.behaviorOnMXFailure = behaviorOnMXFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension SESClientTypes.IdentityNotificationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceTopic = "BounceTopic"
        case complaintTopic = "ComplaintTopic"
        case deliveryTopic = "DeliveryTopic"
        case forwardingEnabled = "ForwardingEnabled"
        case headersInBounceNotificationsEnabled = "HeadersInBounceNotificationsEnabled"
        case headersInComplaintNotificationsEnabled = "HeadersInComplaintNotificationsEnabled"
        case headersInDeliveryNotificationsEnabled = "HeadersInDeliveryNotificationsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceTopic = bounceTopic {
            try container.encode(bounceTopic, forKey: ClientRuntime.Key("BounceTopic"))
        }
        if let complaintTopic = complaintTopic {
            try container.encode(complaintTopic, forKey: ClientRuntime.Key("ComplaintTopic"))
        }
        if let deliveryTopic = deliveryTopic {
            try container.encode(deliveryTopic, forKey: ClientRuntime.Key("DeliveryTopic"))
        }
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if headersInBounceNotificationsEnabled != false {
            try container.encode(headersInBounceNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInBounceNotificationsEnabled"))
        }
        if headersInComplaintNotificationsEnabled != false {
            try container.encode(headersInComplaintNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInComplaintNotificationsEnabled"))
        }
        if headersInDeliveryNotificationsEnabled != false {
            try container.encode(headersInDeliveryNotificationsEnabled, forKey: ClientRuntime.Key("HeadersInDeliveryNotificationsEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bounceTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceTopic)
        bounceTopic = bounceTopicDecoded
        let complaintTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complaintTopic)
        complaintTopic = complaintTopicDecoded
        let deliveryTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryTopic)
        deliveryTopic = deliveryTopicDecoded
        let forwardingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .forwardingEnabled)
        forwardingEnabled = forwardingEnabledDecoded
        let headersInBounceNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInBounceNotificationsEnabled)
        headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabledDecoded
        let headersInComplaintNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInComplaintNotificationsEnabled)
        headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabledDecoded
        let headersInDeliveryNotificationsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .headersInDeliveryNotificationsEnabled)
        headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabledDecoded
    }
}

extension SESClientTypes {
    /// Represents the notification attributes of an identity, including whether an identity has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications, and whether feedback forwarding is enabled for bounce and complaint notifications.
    public struct IdentityNotificationAttributes: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish bounce notifications.
        /// This member is required.
        public var bounceTopic: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish complaint notifications.
        /// This member is required.
        public var complaintTopic: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish delivery notifications.
        /// This member is required.
        public var deliveryTopic: Swift.String?
        /// Describes whether Amazon SES will forward bounce and complaint notifications as email. true indicates that Amazon SES will forward bounce and complaint notifications as email, while false indicates that bounce and complaint notifications will be published only to the specified bounce and complaint Amazon SNS topics.
        /// This member is required.
        public var forwardingEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Bounce. A value of true specifies that Amazon SES will include headers in bounce notifications, and a value of false specifies that Amazon SES will not include headers in bounce notifications.
        public var headersInBounceNotificationsEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Complaint. A value of true specifies that Amazon SES will include headers in complaint notifications, and a value of false specifies that Amazon SES will not include headers in complaint notifications.
        public var headersInComplaintNotificationsEnabled: Swift.Bool
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Delivery. A value of true specifies that Amazon SES will include headers in delivery notifications, and a value of false specifies that Amazon SES will not include headers in delivery notifications.
        public var headersInDeliveryNotificationsEnabled: Swift.Bool

        public init (
            bounceTopic: Swift.String? = nil,
            complaintTopic: Swift.String? = nil,
            deliveryTopic: Swift.String? = nil,
            forwardingEnabled: Swift.Bool = false,
            headersInBounceNotificationsEnabled: Swift.Bool = false,
            headersInComplaintNotificationsEnabled: Swift.Bool = false,
            headersInDeliveryNotificationsEnabled: Swift.Bool = false
        )
        {
            self.bounceTopic = bounceTopic
            self.complaintTopic = complaintTopic
            self.deliveryTopic = deliveryTopic
            self.forwardingEnabled = forwardingEnabled
            self.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled
            self.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled
            self.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled
        }
    }

}

extension SESClientTypes {
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailaddress
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailaddress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case .emailaddress: return "EmailAddress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.IdentityVerificationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationStatus = "VerificationStatus"
        case verificationToken = "VerificationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let verificationStatus = verificationStatus {
            try container.encode(verificationStatus, forKey: ClientRuntime.Key("VerificationStatus"))
        }
        if let verificationToken = verificationToken {
            try container.encode(verificationToken, forKey: ClientRuntime.Key("VerificationToken"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verificationStatusDecoded = try containerValues.decodeIfPresent(SESClientTypes.VerificationStatus.self, forKey: .verificationStatus)
        verificationStatus = verificationStatusDecoded
        let verificationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationToken)
        verificationToken = verificationTokenDecoded
    }
}

extension SESClientTypes {
    /// Represents the verification attributes of a single identity.
    public struct IdentityVerificationAttributes: Swift.Equatable {
        /// The verification status of the identity: "Pending", "Success", "Failed", or "TemporaryFailure".
        /// This member is required.
        public var verificationStatus: SESClientTypes.VerificationStatus?
        /// The verification token for a domain identity. Null for email address identities.
        public var verificationToken: Swift.String?

        public init (
            verificationStatus: SESClientTypes.VerificationStatus? = nil,
            verificationToken: Swift.String? = nil
        )
        {
            self.verificationStatus = verificationStatus
            self.verificationToken = verificationToken
        }
    }

}

extension InvalidCloudWatchDestinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidCloudWatchDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the Amazon CloudWatch destination is invalid. See the error message for details.
public struct InvalidCloudWatchDestinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    /// Indicates that the event destination does not exist.
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidCloudWatchDestinationExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let message: Swift.String?
}

extension InvalidCloudWatchDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidConfigurationSetException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidConfigurationSetExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the configuration set is invalid. See the error message for details.
public struct InvalidConfigurationSetException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidConfigurationSetExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidConfigurationSetExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeliveryOptionsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidDeliveryOptionsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that provided delivery option is invalid.
public struct InvalidDeliveryOptionsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeliveryOptionsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeliveryOptionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFirehoseDestinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidFirehoseDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the Amazon Kinesis Firehose destination is invalid. See the error message for details.
public struct InvalidFirehoseDestinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    /// Indicates that the event destination does not exist.
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidFirehoseDestinationExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let message: Swift.String?
}

extension InvalidFirehoseDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLambdaFunctionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidLambdaFunctionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.functionArn = output.error.functionArn
            self.message = output.error.message
        } else {
            self.functionArn = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided AWS Lambda function is invalid, or that Amazon SES could not execute the provided function, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidLambdaFunctionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the ARN of the function was not found.
    public var functionArn: Swift.String?
    public var message: Swift.String?

    public init (
        functionArn: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.functionArn = functionArn
        self.message = message
    }
}

struct InvalidLambdaFunctionExceptionBody: Swift.Equatable {
    let functionArn: Swift.String?
    let message: Swift.String?
}

extension InvalidLambdaFunctionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidPolicyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided policy is invalid. Check the error stack for more information about what caused the error.
public struct InvalidPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRenderingParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidRenderingParameterExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that one or more of the replacement values you provided is invalid. This error may occur when the TemplateData object contains invalid JSON.
public struct InvalidRenderingParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct InvalidRenderingParameterExceptionBody: Swift.Equatable {
    let templateName: Swift.String?
    let message: Swift.String?
}

extension InvalidRenderingParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3ConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidS3ConfigurationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.bucket = output.error.bucket
            self.message = output.error.message
        } else {
            self.bucket = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided Amazon S3 bucket or AWS KMS encryption key is invalid, or that Amazon SES could not publish to the bucket, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidS3ConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicated that the S3 Bucket was not found.
    public var bucket: Swift.String?
    public var message: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.message = message
    }
}

struct InvalidS3ConfigurationExceptionBody: Swift.Equatable {
    let bucket: Swift.String?
    let message: Swift.String?
}

extension InvalidS3ConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSNSDestinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSNSDestinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.eventDestinationName = output.error.eventDestinationName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.eventDestinationName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the Amazon Simple Notification Service (Amazon SNS) destination is invalid. See the error message for details.
public struct InvalidSNSDestinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that the configuration set does not exist.
    public var configurationSetName: Swift.String?
    /// Indicates that the event destination does not exist.
    public var eventDestinationName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
        self.message = message
    }
}

struct InvalidSNSDestinationExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let message: Swift.String?
}

extension InvalidSNSDestinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestinationName = "EventDestinationName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnsTopicException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSnsTopicExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.topic = output.error.topic
        } else {
            self.topic = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided Amazon SNS topic is invalid, or that Amazon SES could not publish to the topic, possibly due to permissions issues. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
public struct InvalidSnsTopicException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Indicates that the topic does not exist.
    public var topic: Swift.String?

    public init (
        message: Swift.String? = nil,
        topic: Swift.String? = nil
    )
    {
        self.message = message
        self.topic = topic
    }
}

struct InvalidSnsTopicExceptionBody: Swift.Equatable {
    let topic: Swift.String?
    let message: Swift.String?
}

extension InvalidSnsTopicExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topic = "Topic"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topic)
        topic = topicDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTemplateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidTemplateExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the template that you specified could not be rendered. This issue may occur when a template refers to a partial that does not exist.
public struct InvalidTemplateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct InvalidTemplateExceptionBody: Swift.Equatable {
    let templateName: Swift.String?
    let message: Swift.String?
}

extension InvalidTemplateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTrackingOptionsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidTrackingOptionsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the custom domain to be used for open and click tracking redirects is invalid. This error appears most often in the following situations:
///
/// * When the tracking domain you specified is not verified in Amazon SES.
///
/// * When the tracking domain you specified is not a valid domain or subdomain.
public struct InvalidTrackingOptionsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTrackingOptionsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTrackingOptionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes {
    public enum InvocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case event
        case requestresponse
        case sdkUnknown(Swift.String)

        public static var allCases: [InvocationType] {
            return [
                .event,
                .requestresponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .event: return "Event"
            case .requestresponse: return "RequestResponse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvocationType(rawValue: rawValue) ?? InvocationType.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.KinesisFirehoseDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamARN = "DeliveryStreamARN"
        case iamRoleARN = "IAMRoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deliveryStreamARN = deliveryStreamARN {
            try container.encode(deliveryStreamARN, forKey: ClientRuntime.Key("DeliveryStreamARN"))
        }
        if let iamRoleARN = iamRoleARN {
            try container.encode(iamRoleARN, forKey: ClientRuntime.Key("IAMRoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleARN)
        iamRoleARN = iamRoleARNDecoded
        let deliveryStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamARN)
        deliveryStreamARN = deliveryStreamARNDecoded
    }
}

extension SESClientTypes {
    /// Contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination. Event destinations, such as Amazon Kinesis Firehose, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
        /// This member is required.
        public var deliveryStreamARN: Swift.String?
        /// The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
        /// This member is required.
        public var iamRoleARN: Swift.String?

        public init (
            deliveryStreamARN: Swift.String? = nil,
            iamRoleARN: Swift.String? = nil
        )
        {
            self.deliveryStreamARN = deliveryStreamARN
            self.iamRoleARN = iamRoleARN
        }
    }

}

extension SESClientTypes.LambdaAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
        case invocationType = "InvocationType"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let functionArn = functionArn {
            try container.encode(functionArn, forKey: ClientRuntime.Key("FunctionArn"))
        }
        if let invocationType = invocationType {
            try container.encode(invocationType, forKey: ClientRuntime.Key("InvocationType"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let invocationTypeDecoded = try containerValues.decodeIfPresent(SESClientTypes.InvocationType.self, forKey: .invocationType)
        invocationType = invocationTypeDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action calls an AWS Lambda function and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). To enable Amazon SES to call your AWS Lambda function or to publish to an Amazon SNS topic of another account, Amazon SES must have permission to access those resources. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html). For information about using AWS Lambda actions in receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html).
    public struct LambdaAction: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Lambda function. An example of an AWS Lambda function ARN is arn:aws:lambda:us-west-2:account-id:function:MyFunction. For more information about AWS Lambda, see the [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html).
        /// This member is required.
        public var functionArn: Swift.String?
        /// The invocation type of the AWS Lambda function. An invocation type of RequestResponse means that the execution of the function will immediately result in a response, and a value of Event means that the function will be invoked asynchronously. The default value is Event. For information about AWS Lambda invocation types, see the [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html). There is a 30-second timeout on RequestResponse invocations. You should use Event invocation in most cases. Use RequestResponse only when you want to make a mail flow decision, such as whether to stop the receipt rule or the receipt rule set.
        public var invocationType: SESClientTypes.InvocationType?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init (
            functionArn: Swift.String? = nil,
            invocationType: SESClientTypes.InvocationType? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.functionArn = functionArn
            self.invocationType = invocationType
            self.topicArn = topicArn
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that a resource could not be created because of service limits. For a list of Amazon SES limits, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html).
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListConfigurationSetsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListConfigurationSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListConfigurationSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to list the configuration sets associated with your AWS account. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// The number of configuration sets to return.
    public var maxItems: Swift.Int?
    /// A token returned from a previous call to ListConfigurationSets to indicate the position of the configuration set in the configuration set list.
    public var nextToken: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxItems: Swift.Int?
}

extension ListConfigurationSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListConfigurationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListConfigurationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListConfigurationSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfigurationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListConfigurationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSets = output.configurationSets
            self.nextToken = output.nextToken
        } else {
            self.configurationSets = nil
            self.nextToken = nil
        }
    }
}

/// A list of configuration sets associated with your AWS account. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct ListConfigurationSetsOutputResponse: Swift.Equatable {
    /// A list of configuration sets.
    public var configurationSets: [SESClientTypes.ConfigurationSet]?
    /// A token indicating that there are additional configuration sets available to be listed. Pass this token to successive calls of ListConfigurationSets.
    public var nextToken: Swift.String?

    public init (
        configurationSets: [SESClientTypes.ConfigurationSet]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsOutputResponseBody: Swift.Equatable {
    let configurationSets: [SESClientTypes.ConfigurationSet]?
    let nextToken: Swift.String?
}

extension ListConfigurationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSets = "ConfigurationSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListConfigurationSetsResult"))
        if containerValues.contains(.configurationSets) {
            struct KeyVal0{struct member{}}
            let configurationSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .configurationSets)
            if let configurationSetsWrappedContainer = configurationSetsWrappedContainer {
                let configurationSetsContainer = try configurationSetsWrappedContainer.decodeIfPresent([SESClientTypes.ConfigurationSet].self, forKey: .member)
                var configurationSetsBuffer:[SESClientTypes.ConfigurationSet]? = nil
                if let configurationSetsContainer = configurationSetsContainer {
                    configurationSetsBuffer = [SESClientTypes.ConfigurationSet]()
                    for structureContainer0 in configurationSetsContainer {
                        configurationSetsBuffer?.append(structureContainer0)
                    }
                }
                configurationSets = configurationSetsBuffer
            } else {
                configurationSets = []
            }
        } else {
            configurationSets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCustomVerificationEmailTemplatesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListCustomVerificationEmailTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListCustomVerificationEmailTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to list the existing custom verification email templates for your account. For more information about custom verification email templates, see [Using Custom Verification Email Templates](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html) in the Amazon SES Developer Guide.
public struct ListCustomVerificationEmailTemplatesInput: Swift.Equatable {
    /// The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
    public var maxResults: Swift.Int?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListCustomVerificationEmailTemplatesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListCustomVerificationEmailTemplatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListCustomVerificationEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListCustomVerificationEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCustomVerificationEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCustomVerificationEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCustomVerificationEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplates = output.customVerificationEmailTemplates
            self.nextToken = output.nextToken
        } else {
            self.customVerificationEmailTemplates = nil
            self.nextToken = nil
        }
    }
}

/// A paginated list of custom verification email templates.
public struct ListCustomVerificationEmailTemplatesOutputResponse: Swift.Equatable {
    /// A list of the custom verification email templates that exist in your account.
    public var customVerificationEmailTemplates: [SESClientTypes.CustomVerificationEmailTemplate]?
    /// A token indicating that there are additional custom verification email templates available to be listed. Pass this token to a subsequent call to ListTemplates to retrieve the next 50 custom verification email templates.
    public var nextToken: Swift.String?

    public init (
        customVerificationEmailTemplates: [SESClientTypes.CustomVerificationEmailTemplate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

struct ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Equatable {
    let customVerificationEmailTemplates: [SESClientTypes.CustomVerificationEmailTemplate]?
    let nextToken: Swift.String?
}

extension ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplates = "CustomVerificationEmailTemplates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListCustomVerificationEmailTemplatesResult"))
        if containerValues.contains(.customVerificationEmailTemplates) {
            struct KeyVal0{struct member{}}
            let customVerificationEmailTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .customVerificationEmailTemplates)
            if let customVerificationEmailTemplatesWrappedContainer = customVerificationEmailTemplatesWrappedContainer {
                let customVerificationEmailTemplatesContainer = try customVerificationEmailTemplatesWrappedContainer.decodeIfPresent([SESClientTypes.CustomVerificationEmailTemplate].self, forKey: .member)
                var customVerificationEmailTemplatesBuffer:[SESClientTypes.CustomVerificationEmailTemplate]? = nil
                if let customVerificationEmailTemplatesContainer = customVerificationEmailTemplatesContainer {
                    customVerificationEmailTemplatesBuffer = [SESClientTypes.CustomVerificationEmailTemplate]()
                    for structureContainer0 in customVerificationEmailTemplatesContainer {
                        customVerificationEmailTemplatesBuffer?.append(structureContainer0)
                    }
                }
                customVerificationEmailTemplates = customVerificationEmailTemplatesBuffer
            } else {
                customVerificationEmailTemplates = []
            }
        } else {
            customVerificationEmailTemplates = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentitiesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identityType = identityType {
            try container.encode(identityType, forKey: ClientRuntime.Key("IdentityType"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListIdentities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListIdentitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return a list of all identities (email addresses and domains) that you have attempted to verify under your AWS account, regardless of verification status.
public struct ListIdentitiesInput: Swift.Equatable {
    /// The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
    public var identityType: SESClientTypes.IdentityType?
    /// The maximum number of identities per page. Possible values are 1-1000 inclusive.
    public var maxItems: Swift.Int?
    /// The token to use for pagination.
    public var nextToken: Swift.String?

    public init (
        identityType: SESClientTypes.IdentityType? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityType = identityType
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct ListIdentitiesInputBody: Swift.Equatable {
    let identityType: SESClientTypes.IdentityType?
    let nextToken: Swift.String?
    let maxItems: Swift.Int?
}

extension ListIdentitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityType = "IdentityType"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SESClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListIdentitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListIdentitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIdentitiesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIdentitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identities = output.identities
            self.nextToken = output.nextToken
        } else {
            self.identities = nil
            self.nextToken = nil
        }
    }
}

/// A list of all identities that you have attempted to verify under your AWS account, regardless of verification status.
public struct ListIdentitiesOutputResponse: Swift.Equatable {
    /// A list of identities.
    /// This member is required.
    public var identities: [Swift.String]?
    /// The token used for pagination.
    public var nextToken: Swift.String?

    public init (
        identities: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identities = identities
        self.nextToken = nextToken
    }
}

struct ListIdentitiesOutputResponseBody: Swift.Equatable {
    let identities: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListIdentitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identities = "Identities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListIdentitiesResult"))
        if containerValues.contains(.identities) {
            struct KeyVal0{struct member{}}
            let identitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .identities)
            if let identitiesWrappedContainer = identitiesWrappedContainer {
                let identitiesContainer = try identitiesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var identitiesBuffer:[Swift.String]? = nil
                if let identitiesContainer = identitiesContainer {
                    identitiesBuffer = [Swift.String]()
                    for stringContainer0 in identitiesContainer {
                        identitiesBuffer?.append(stringContainer0)
                    }
                }
                identities = identitiesBuffer
            } else {
                identities = []
            }
        } else {
            identities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentityPoliciesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("ListIdentityPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListIdentityPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to return a list of sending authorization policies that are attached to an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
public struct ListIdentityPoliciesInput: Swift.Equatable {
    /// The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?

    public init (
        identity: Swift.String? = nil
    )
    {
        self.identity = identity
    }
}

struct ListIdentityPoliciesInputBody: Swift.Equatable {
    let identity: Swift.String?
}

extension ListIdentityPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
    }
}

extension ListIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyNames = output.policyNames
        } else {
            self.policyNames = nil
        }
    }
}

/// A list of names of sending authorization policies that apply to an identity.
public struct ListIdentityPoliciesOutputResponse: Swift.Equatable {
    /// A list of names of policies that apply to the specified identity.
    /// This member is required.
    public var policyNames: [Swift.String]?

    public init (
        policyNames: [Swift.String]? = nil
    )
    {
        self.policyNames = policyNames
    }
}

struct ListIdentityPoliciesOutputResponseBody: Swift.Equatable {
    let policyNames: [Swift.String]?
}

extension ListIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyNames = "PolicyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListIdentityPoliciesResult"))
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
    }
}

extension ListReceiptFiltersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListReceiptFilters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListReceiptFiltersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to list the IP address filters that exist under your AWS account. You use IP address filters when you receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct ListReceiptFiltersInput: Swift.Equatable {

    public init () { }
}

extension ListReceiptFiltersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListReceiptFiltersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReceiptFiltersOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReceiptFiltersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReceiptFiltersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.filters = output.filters
        } else {
            self.filters = nil
        }
    }
}

/// A list of IP address filters that exist under your AWS account.
public struct ListReceiptFiltersOutputResponse: Swift.Equatable {
    /// A list of IP address filter data structures, which each consist of a name, an IP address range, and whether to allow or block mail from it.
    public var filters: [SESClientTypes.ReceiptFilter]?

    public init (
        filters: [SESClientTypes.ReceiptFilter]? = nil
    )
    {
        self.filters = filters
    }
}

struct ListReceiptFiltersOutputResponseBody: Swift.Equatable {
    let filters: [SESClientTypes.ReceiptFilter]?
}

extension ListReceiptFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListReceiptFiltersResult"))
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([SESClientTypes.ReceiptFilter].self, forKey: .member)
                var filtersBuffer:[SESClientTypes.ReceiptFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [SESClientTypes.ReceiptFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
    }
}

extension ListReceiptRuleSetsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListReceiptRuleSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListReceiptRuleSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to list the receipt rule sets that exist under your AWS account. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct ListReceiptRuleSetsInput: Swift.Equatable {
    /// A token returned from a previous call to ListReceiptRuleSets to indicate the position in the receipt rule set list.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListReceiptRuleSetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension ListReceiptRuleSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListReceiptRuleSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListReceiptRuleSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReceiptRuleSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReceiptRuleSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReceiptRuleSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.ruleSets = output.ruleSets
        } else {
            self.nextToken = nil
            self.ruleSets = nil
        }
    }
}

/// A list of receipt rule sets that exist under your AWS account.
public struct ListReceiptRuleSetsOutputResponse: Swift.Equatable {
    /// A token indicating that there are additional receipt rule sets available to be listed. Pass this token to successive calls of ListReceiptRuleSets to retrieve up to 100 receipt rule sets at a time.
    public var nextToken: Swift.String?
    /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and the timestamp of when the rule set was created.
    public var ruleSets: [SESClientTypes.ReceiptRuleSetMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        ruleSets: [SESClientTypes.ReceiptRuleSetMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

struct ListReceiptRuleSetsOutputResponseBody: Swift.Equatable {
    let ruleSets: [SESClientTypes.ReceiptRuleSetMetadata]?
    let nextToken: Swift.String?
}

extension ListReceiptRuleSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case ruleSets = "RuleSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListReceiptRuleSetsResult"))
        if containerValues.contains(.ruleSets) {
            struct KeyVal0{struct member{}}
            let ruleSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleSets)
            if let ruleSetsWrappedContainer = ruleSetsWrappedContainer {
                let ruleSetsContainer = try ruleSetsWrappedContainer.decodeIfPresent([SESClientTypes.ReceiptRuleSetMetadata].self, forKey: .member)
                var ruleSetsBuffer:[SESClientTypes.ReceiptRuleSetMetadata]? = nil
                if let ruleSetsContainer = ruleSetsContainer {
                    ruleSetsBuffer = [SESClientTypes.ReceiptRuleSetMetadata]()
                    for structureContainer0 in ruleSetsContainer {
                        ruleSetsBuffer?.append(structureContainer0)
                    }
                }
                ruleSets = ruleSetsBuffer
            } else {
                ruleSets = []
            }
        } else {
            ruleSets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTemplatesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: ClientRuntime.Key("MaxItems"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTemplatesInput: Swift.Equatable {
    /// The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
    public var maxItems: Swift.Int?
    /// A token returned from a previous call to ListTemplates to indicate the position in the list of email templates.
    public var nextToken: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct ListTemplatesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxItems: Swift.Int?
}

extension ListTemplatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTemplatesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templatesMetadata = output.templatesMetadata
        } else {
            self.nextToken = nil
            self.templatesMetadata = nil
        }
    }
}

public struct ListTemplatesOutputResponse: Swift.Equatable {
    /// A token indicating that there are additional email templates available to be listed. Pass this token to a subsequent call to ListTemplates to retrieve the next 50 email templates.
    public var nextToken: Swift.String?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var templatesMetadata: [SESClientTypes.TemplateMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        templatesMetadata: [SESClientTypes.TemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

struct ListTemplatesOutputResponseBody: Swift.Equatable {
    let templatesMetadata: [SESClientTypes.TemplateMetadata]?
    let nextToken: Swift.String?
}

extension ListTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTemplatesResult"))
        if containerValues.contains(.templatesMetadata) {
            struct KeyVal0{struct member{}}
            let templatesMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .templatesMetadata)
            if let templatesMetadataWrappedContainer = templatesMetadataWrappedContainer {
                let templatesMetadataContainer = try templatesMetadataWrappedContainer.decodeIfPresent([SESClientTypes.TemplateMetadata].self, forKey: .member)
                var templatesMetadataBuffer:[SESClientTypes.TemplateMetadata]? = nil
                if let templatesMetadataContainer = templatesMetadataContainer {
                    templatesMetadataBuffer = [SESClientTypes.TemplateMetadata]()
                    for structureContainer0 in templatesMetadataContainer {
                        templatesMetadataBuffer?.append(structureContainer0)
                    }
                }
                templatesMetadata = templatesMetadataBuffer
            } else {
                templatesMetadata = []
            }
        } else {
            templatesMetadata = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVerifiedEmailAddressesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ListVerifiedEmailAddresses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListVerifiedEmailAddressesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListVerifiedEmailAddressesInput: Swift.Equatable {

    public init () { }
}

extension ListVerifiedEmailAddressesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListVerifiedEmailAddressesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVerifiedEmailAddressesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVerifiedEmailAddressesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVerifiedEmailAddressesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verifiedEmailAddresses = output.verifiedEmailAddresses
        } else {
            self.verifiedEmailAddresses = nil
        }
    }
}

/// A list of email addresses that you have verified with Amazon SES under your AWS account.
public struct ListVerifiedEmailAddressesOutputResponse: Swift.Equatable {
    /// A list of email addresses that have been verified.
    public var verifiedEmailAddresses: [Swift.String]?

    public init (
        verifiedEmailAddresses: [Swift.String]? = nil
    )
    {
        self.verifiedEmailAddresses = verifiedEmailAddresses
    }
}

struct ListVerifiedEmailAddressesOutputResponseBody: Swift.Equatable {
    let verifiedEmailAddresses: [Swift.String]?
}

extension ListVerifiedEmailAddressesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verifiedEmailAddresses = "VerifiedEmailAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListVerifiedEmailAddressesResult"))
        if containerValues.contains(.verifiedEmailAddresses) {
            struct KeyVal0{struct member{}}
            let verifiedEmailAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .verifiedEmailAddresses)
            if let verifiedEmailAddressesWrappedContainer = verifiedEmailAddressesWrappedContainer {
                let verifiedEmailAddressesContainer = try verifiedEmailAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var verifiedEmailAddressesBuffer:[Swift.String]? = nil
                if let verifiedEmailAddressesContainer = verifiedEmailAddressesContainer {
                    verifiedEmailAddressesBuffer = [Swift.String]()
                    for stringContainer0 in verifiedEmailAddressesContainer {
                        verifiedEmailAddressesBuffer?.append(stringContainer0)
                    }
                }
                verifiedEmailAddresses = verifiedEmailAddressesBuffer
            } else {
                verifiedEmailAddresses = []
            }
        } else {
            verifiedEmailAddresses = nil
        }
    }
}

extension MailFromDomainNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<MailFromDomainNotVerifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the message could not be sent because Amazon SES could not read the MX record required to use the specified MAIL FROM domain. For information about editing the custom MAIL FROM domain settings for an identity, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-edit.html).
public struct MailFromDomainNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MailFromDomainNotVerifiedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MailFromDomainNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
        if let subject = subject {
            try container.encode(subject, forKey: ClientRuntime.Key("Subject"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(SESClientTypes.Content.self, forKey: .subject)
        subject = subjectDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(SESClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
    }
}

extension SESClientTypes {
    /// Represents the message to be sent, composed of a subject and a body.
    public struct Message: Swift.Equatable {
        /// The message body.
        /// This member is required.
        public var body: SESClientTypes.Body?
        /// The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
        /// This member is required.
        public var subject: SESClientTypes.Content?

        public init (
            body: SESClientTypes.Body? = nil,
            subject: SESClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension SESClientTypes.MessageDsn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrivalDate = "ArrivalDate"
        case extensionFields = "ExtensionFields"
        case reportingMta = "ReportingMta"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arrivalDate = arrivalDate {
            try container.encodeTimestamp(arrivalDate, format: .dateTime, forKey: ClientRuntime.Key("arrivalDate"))
        }
        if let extensionFields = extensionFields {
            if !extensionFields.isEmpty {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                for (index0, extensionfield0) in extensionFields.enumerated() {
                    try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                try extensionFieldsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reportingMta = reportingMta {
            try container.encode(reportingMta, forKey: ClientRuntime.Key("ReportingMta"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportingMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportingMta)
        reportingMta = reportingMtaDecoded
        let arrivalDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .arrivalDate)
        arrivalDate = arrivalDateDecoded
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SESClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SESClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SESClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}

extension SESClientTypes {
    /// Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html).
    public struct MessageDsn: Swift.Equatable {
        /// When the message was received by the reporting mail transfer agent (MTA), in [RFC 822](https://www.ietf.org/rfc/rfc0822.txt) date-time format.
        public var arrivalDate: ClientRuntime.Date?
        /// Additional X-headers to include in the DSN.
        public var extensionFields: [SESClientTypes.ExtensionField]?
        /// The reporting MTA that attempted to deliver the message, formatted as specified in [RFC 3464](https://tools.ietf.org/html/rfc3464) (mta-name-type; mta-name). The default value is dns; inbound-smtp.[region].amazonaws.com.
        /// This member is required.
        public var reportingMta: Swift.String?

        public init (
            arrivalDate: ClientRuntime.Date? = nil,
            extensionFields: [SESClientTypes.ExtensionField]? = nil,
            reportingMta: Swift.String? = nil
        )
        {
            self.arrivalDate = arrivalDate
            self.extensionFields = extensionFields
            self.reportingMta = reportingMta
        }
    }

}

extension MessageRejected {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<MessageRejectedBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the action failed, and the message could not be sent. Check the error stack for more information about what caused the error.
public struct MessageRejected: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MessageRejectedBody: Swift.Equatable {
    let message: Swift.String?
}

extension MessageRejectedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.MessageTag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SESClientTypes {
    /// Contains the name and value of a tag that you can provide to SendEmail or SendRawEmail to apply to an email. Message tags, which you use with configuration sets, enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct MessageTag: Swift.Equatable {
        /// The name of the tag. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain less than 256 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the tag. The value must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Contain less than 256 characters.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension MissingRenderingAttributeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<MissingRenderingAttributeExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that one or more of the replacement values for the specified template was not specified. Ensure that the TemplateData object contains references to all of the replacement tags in the specified template.
public struct MissingRenderingAttributeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct MissingRenderingAttributeExceptionBody: Swift.Equatable {
    let templateName: Swift.String?
    let message: Swift.String?
}

extension MissingRenderingAttributeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes {
    public enum NotificationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case complaint
        case delivery
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationType] {
            return [
                .bounce,
                .complaint,
                .delivery,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "Bounce"
            case .complaint: return "Complaint"
            case .delivery: return "Delivery"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotificationType(rawValue: rawValue) ?? NotificationType.sdkUnknown(rawValue)
        }
    }
}

extension ProductionAccessNotGrantedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ProductionAccessNotGrantedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the account has not been granted production access.
public struct ProductionAccessNotGrantedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ProductionAccessNotGrantedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ProductionAccessNotGrantedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let deliveryOptions = deliveryOptions {
            try container.encode(deliveryOptions, forKey: ClientRuntime.Key("DeliveryOptions"))
        }
        try container.encode("PutConfigurationSetDeliveryOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutConfigurationSetDeliveryOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A request to modify the delivery options for a configuration set.
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to specify the delivery options for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    public var deliveryOptions: SESClientTypes.DeliveryOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESClientTypes.DeliveryOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
    }
}

struct PutConfigurationSetDeliveryOptionsInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let deliveryOptions: SESClientTypes.DeliveryOptions?
}

extension PutConfigurationSetDeliveryOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeliveryOptions" : self = .invalidDeliveryOptionsException(try InvalidDeliveryOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetDeliveryOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidDeliveryOptionsException(InvalidDeliveryOptionsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutIdentityPolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("PutIdentityPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutIdentityPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to add or update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
public struct PutIdentityPolicyInput: Swift.Equatable {
    /// The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
    /// This member is required.
    public var identity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        identity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.identity = identity
        self.policy = policy
        self.policyName = policyName
    }
}

struct PutIdentityPolicyInputBody: Swift.Equatable {
    let identity: Swift.String?
    let policyName: Swift.String?
    let policy: Swift.String?
}

extension PutIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case policy = "Policy"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidPolicy" : self = .invalidPolicyException(try InvalidPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidPolicyException(InvalidPolicyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct PutIdentityPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.RawMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let data = data {
            try container.encode(data.base64EncodedString(), forKey: ClientRuntime.Key("Data"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.data) {
            do {
                let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
                data = dataDecoded
            } catch {
                data = "".data(using: .utf8)
            }
        } else {
            data = nil
        }
    }
}

extension SESClientTypes {
    /// Represents the raw data of the message.
    public struct RawMessage: Swift.Equatable {
        /// The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding. The To:, CC:, and BCC: headers in the raw message can contain a group list. If you are using SendRawEmail with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for SendRawEmail. Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email. For more information, go to the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html).
        /// This member is required.
        public var data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SESClientTypes.ReceiptAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addHeaderAction = "AddHeaderAction"
        case bounceAction = "BounceAction"
        case lambdaAction = "LambdaAction"
        case s3Action = "S3Action"
        case snsAction = "SNSAction"
        case stopAction = "StopAction"
        case workmailAction = "WorkmailAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addHeaderAction = addHeaderAction {
            try container.encode(addHeaderAction, forKey: ClientRuntime.Key("AddHeaderAction"))
        }
        if let bounceAction = bounceAction {
            try container.encode(bounceAction, forKey: ClientRuntime.Key("BounceAction"))
        }
        if let lambdaAction = lambdaAction {
            try container.encode(lambdaAction, forKey: ClientRuntime.Key("LambdaAction"))
        }
        if let s3Action = s3Action {
            try container.encode(s3Action, forKey: ClientRuntime.Key("S3Action"))
        }
        if let snsAction = snsAction {
            try container.encode(snsAction, forKey: ClientRuntime.Key("SNSAction"))
        }
        if let stopAction = stopAction {
            try container.encode(stopAction, forKey: ClientRuntime.Key("StopAction"))
        }
        if let workmailAction = workmailAction {
            try container.encode(workmailAction, forKey: ClientRuntime.Key("WorkmailAction"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.S3Action.self, forKey: .s3Action)
        s3Action = s3ActionDecoded
        let bounceActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.BounceAction.self, forKey: .bounceAction)
        bounceAction = bounceActionDecoded
        let workmailActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.WorkmailAction.self, forKey: .workmailAction)
        workmailAction = workmailActionDecoded
        let lambdaActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.LambdaAction.self, forKey: .lambdaAction)
        lambdaAction = lambdaActionDecoded
        let stopActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.StopAction.self, forKey: .stopAction)
        stopAction = stopActionDecoded
        let addHeaderActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.AddHeaderAction.self, forKey: .addHeaderAction)
        addHeaderAction = addHeaderActionDecoded
        let snsActionDecoded = try containerValues.decodeIfPresent(SESClientTypes.SNSAction.self, forKey: .snsAction)
        snsAction = snsActionDecoded
    }
}

extension SESClientTypes {
    /// An action that Amazon SES can take when it receives an email on behalf of one or more email addresses or domains that you own. An instance of this data type can represent only one action. For information about setting up receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html).
    public struct ReceiptAction: Swift.Equatable {
        /// Adds a header to the received email.
        public var addHeaderAction: SESClientTypes.AddHeaderAction?
        /// Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).
        public var bounceAction: SESClientTypes.BounceAction?
        /// Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.
        public var lambdaAction: SESClientTypes.LambdaAction?
        /// Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon SNS.
        public var s3Action: SESClientTypes.S3Action?
        /// Publishes the email content within a notification to Amazon SNS.
        public var snsAction: SESClientTypes.SNSAction?
        /// Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.
        public var stopAction: SESClientTypes.StopAction?
        /// Calls Amazon WorkMail and, optionally, publishes a notification to Amazon Amazon SNS.
        public var workmailAction: SESClientTypes.WorkmailAction?

        public init (
            addHeaderAction: SESClientTypes.AddHeaderAction? = nil,
            bounceAction: SESClientTypes.BounceAction? = nil,
            lambdaAction: SESClientTypes.LambdaAction? = nil,
            s3Action: SESClientTypes.S3Action? = nil,
            snsAction: SESClientTypes.SNSAction? = nil,
            stopAction: SESClientTypes.StopAction? = nil,
            workmailAction: SESClientTypes.WorkmailAction? = nil
        )
        {
            self.addHeaderAction = addHeaderAction
            self.bounceAction = bounceAction
            self.lambdaAction = lambdaAction
            self.s3Action = s3Action
            self.snsAction = snsAction
            self.stopAction = stopAction
            self.workmailAction = workmailAction
        }
    }

}

extension SESClientTypes.ReceiptFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipFilter = "IpFilter"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipFilter = ipFilter {
            try container.encode(ipFilter, forKey: ClientRuntime.Key("IpFilter"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ipFilterDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptIpFilter.self, forKey: .ipFilter)
        ipFilter = ipFilterDecoded
    }
}

extension SESClientTypes {
    /// A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses. For information about setting up IP address filters, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html).
    public struct ReceiptFilter: Swift.Equatable {
        /// A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
        /// This member is required.
        public var ipFilter: SESClientTypes.ReceiptIpFilter?
        /// The name of the IP address filter. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain less than 64 characters.
        /// This member is required.
        public var name: Swift.String?

        public init (
            ipFilter: SESClientTypes.ReceiptIpFilter? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipFilter = ipFilter
            self.name = name
        }
    }

}

extension SESClientTypes {
    public enum ReceiptFilterPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case sdkUnknown(Swift.String)

        public static var allCases: [ReceiptFilterPolicy] {
            return [
                .allow,
                .block,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "Allow"
            case .block: return "Block"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReceiptFilterPolicy(rawValue: rawValue) ?? ReceiptFilterPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.ReceiptIpFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidr = cidr {
            try container.encode(cidr, forKey: ClientRuntime.Key("Cidr"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptFilterPolicy.self, forKey: .policy)
        policy = policyDecoded
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension SESClientTypes {
    /// A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses. For information about setting up IP address filters, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html).
    public struct ReceiptIpFilter: Swift.Equatable {
        /// A single IP address or a range of IP addresses that you want to block or allow, specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For more information about CIDR notation, see [RFC 2317](https://tools.ietf.org/html/rfc2317).
        /// This member is required.
        public var cidr: Swift.String?
        /// Indicates whether to block or allow incoming mail from the specified IP addresses.
        /// This member is required.
        public var policy: SESClientTypes.ReceiptFilterPolicy?

        public init (
            cidr: Swift.String? = nil,
            policy: SESClientTypes.ReceiptFilterPolicy? = nil
        )
        {
            self.cidr = cidr
            self.policy = policy
        }
    }

}

extension SESClientTypes.ReceiptRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case enabled = "Enabled"
        case name = "Name"
        case recipients = "Recipients"
        case scanEnabled = "ScanEnabled"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                for (index0, receiptaction0) in actions.enumerated() {
                    try actionsContainer.encode(receiptaction0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let recipients = recipients {
            if !recipients.isEmpty {
                var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
                for (index0, recipient0) in recipients.enumerated() {
                    try recipientsContainer.encode(recipient0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
                try recipientsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if scanEnabled != false {
            try container.encode(scanEnabled, forKey: ClientRuntime.Key("ScanEnabled"))
        }
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SESClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        if containerValues.contains(.recipients) {
            struct KeyVal0{struct member{}}
            let recipientsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .recipients)
            if let recipientsWrappedContainer = recipientsWrappedContainer {
                let recipientsContainer = try recipientsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var recipientsBuffer:[Swift.String]? = nil
                if let recipientsContainer = recipientsContainer {
                    recipientsBuffer = [Swift.String]()
                    for stringContainer0 in recipientsContainer {
                        recipientsBuffer?.append(stringContainer0)
                    }
                }
                recipients = recipientsBuffer
            } else {
                recipients = []
            }
        } else {
            recipients = nil
        }
        if containerValues.contains(.actions) {
            struct KeyVal0{struct member{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([SESClientTypes.ReceiptAction].self, forKey: .member)
                var actionsBuffer:[SESClientTypes.ReceiptAction]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [SESClientTypes.ReceiptAction]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let scanEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .scanEnabled)
        scanEnabled = scanEnabledDecoded
    }
}

extension SESClientTypes {
    /// Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own. Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message. For information about setting up receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html).
    public struct ReceiptRule: Swift.Equatable {
        /// An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
        public var actions: [SESClientTypes.ReceiptAction]?
        /// If true, the receipt rule is active. The default value is false.
        public var enabled: Swift.Bool
        /// The name of the receipt rule. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain less than 64 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
        public var recipients: [Swift.String]?
        /// If true, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is false.
        public var scanEnabled: Swift.Bool
        /// Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to Require, Amazon SES will bounce emails that are not received over TLS. The default is Optional.
        public var tlsPolicy: SESClientTypes.TlsPolicy?

        public init (
            actions: [SESClientTypes.ReceiptAction]? = nil,
            enabled: Swift.Bool = false,
            name: Swift.String? = nil,
            recipients: [Swift.String]? = nil,
            scanEnabled: Swift.Bool = false,
            tlsPolicy: SESClientTypes.TlsPolicy? = nil
        )
        {
            self.actions = actions
            self.enabled = enabled
            self.name = name
            self.recipients = recipients
            self.scanEnabled = scanEnabled
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SESClientTypes.ReceiptRuleSetMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encodeTimestamp(createdTimestamp, format: .dateTime, forKey: ClientRuntime.Key("createdTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension SESClientTypes {
    /// Information about a receipt rule set. A receipt rule set is a collection of rules that specify what Amazon SES should do with mail it receives on behalf of your account's verified domains. For information about setting up receipt rule sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html).
    public struct ReceiptRuleSetMetadata: Swift.Equatable {
        /// The date and time the receipt rule set was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the receipt rule set. The name must:
        ///
        /// * This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).
        ///
        /// * Start and end with a letter or number.
        ///
        /// * Contain less than 64 characters.
        public var name: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

extension SESClientTypes.RecipientDsnFields: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case diagnosticCode = "DiagnosticCode"
        case extensionFields = "ExtensionFields"
        case finalRecipient = "FinalRecipient"
        case lastAttemptDate = "LastAttemptDate"
        case remoteMta = "RemoteMta"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let diagnosticCode = diagnosticCode {
            try container.encode(diagnosticCode, forKey: ClientRuntime.Key("DiagnosticCode"))
        }
        if let extensionFields = extensionFields {
            if !extensionFields.isEmpty {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                for (index0, extensionfield0) in extensionFields.enumerated() {
                    try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
                try extensionFieldsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let finalRecipient = finalRecipient {
            try container.encode(finalRecipient, forKey: ClientRuntime.Key("FinalRecipient"))
        }
        if let lastAttemptDate = lastAttemptDate {
            try container.encodeTimestamp(lastAttemptDate, format: .dateTime, forKey: ClientRuntime.Key("lastAttemptDate"))
        }
        if let remoteMta = remoteMta {
            try container.encode(remoteMta, forKey: ClientRuntime.Key("RemoteMta"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalRecipientDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalRecipient)
        finalRecipient = finalRecipientDecoded
        let actionDecoded = try containerValues.decodeIfPresent(SESClientTypes.DsnAction.self, forKey: .action)
        action = actionDecoded
        let remoteMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteMta)
        remoteMta = remoteMtaDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let diagnosticCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnosticCode)
        diagnosticCode = diagnosticCodeDecoded
        let lastAttemptDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastAttemptDate)
        lastAttemptDate = lastAttemptDateDecoded
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SESClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SESClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SESClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}

extension SESClientTypes {
    /// Recipient-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces. For information about receiving email through Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html).
    public struct RecipientDsnFields: Swift.Equatable {
        /// The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by [RFC 3464](https://tools.ietf.org/html/rfc3464).
        /// This member is required.
        public var action: SESClientTypes.DsnAction?
        /// An extended explanation of what went wrong; this is usually an SMTP response. See [RFC 3463](https://tools.ietf.org/html/rfc3463) for the correct formatting of this parameter.
        public var diagnosticCode: Swift.String?
        /// Additional X-headers to include in the DSN.
        public var extensionFields: [SESClientTypes.ExtensionField]?
        /// The email address that the message was ultimately delivered to. This corresponds to the Final-Recipient in the DSN. If not specified, FinalRecipient will be set to the Recipient specified in the BouncedRecipientInfo structure. Either FinalRecipient or the recipient in BouncedRecipientInfo must be a recipient of the original bounced message. Do not prepend the FinalRecipient email address with rfc 822;, as described in [RFC 3798](https://tools.ietf.org/html/rfc3798).
        public var finalRecipient: Swift.String?
        /// The time the final delivery attempt was made, in [RFC 822](https://www.ietf.org/rfc/rfc0822.txt) date-time format.
        public var lastAttemptDate: ClientRuntime.Date?
        /// The MTA to which the remote MTA attempted to deliver the message, formatted as specified in [RFC 3464](https://tools.ietf.org/html/rfc3464) (mta-name-type; mta-name). This parameter typically applies only to propagating synchronous bounces.
        public var remoteMta: Swift.String?
        /// The status code that indicates what went wrong. This is required by [RFC 3464](https://tools.ietf.org/html/rfc3464).
        /// This member is required.
        public var status: Swift.String?

        public init (
            action: SESClientTypes.DsnAction? = nil,
            diagnosticCode: Swift.String? = nil,
            extensionFields: [SESClientTypes.ExtensionField]? = nil,
            finalRecipient: Swift.String? = nil,
            lastAttemptDate: ClientRuntime.Date? = nil,
            remoteMta: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.action = action
            self.diagnosticCode = diagnosticCode
            self.extensionFields = extensionFields
            self.finalRecipient = finalRecipient
            self.lastAttemptDate = lastAttemptDate
            self.remoteMta = remoteMta
            self.status = status
        }
    }

}

extension ReorderReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            if !ruleNames.isEmpty {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                for (index0, receiptrulename0) in ruleNames.enumerated() {
                    try ruleNamesContainer.encode(receiptrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                try ruleNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("ReorderReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ReorderReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to reorder the receipt rules within a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct ReorderReceiptRuleSetInput: Swift.Equatable {
    /// A list of the specified receipt rule set's receipt rules in the order that you want to put them.
    /// This member is required.
    public var ruleNames: [Swift.String]?
    /// The name of the receipt rule set to reorder.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        ruleNames: [Swift.String]? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleNames = ruleNames
        self.ruleSetName = ruleSetName
    }
}

struct ReorderReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let ruleNames: [Swift.String]?
}

extension ReorderReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        if containerValues.contains(.ruleNames) {
            struct KeyVal0{struct member{}}
            let ruleNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleNames)
            if let ruleNamesWrappedContainer = ruleNamesWrappedContainer {
                let ruleNamesContainer = try ruleNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleNamesBuffer:[Swift.String]? = nil
                if let ruleNamesContainer = ruleNamesContainer {
                    ruleNamesBuffer = [Swift.String]()
                    for stringContainer0 in ruleNamesContainer {
                        ruleNamesBuffer?.append(stringContainer0)
                    }
                }
                ruleNames = ruleNamesBuffer
            } else {
                ruleNames = []
            }
        } else {
            ruleNames = nil
        }
    }
}

extension ReorderReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ReorderReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExist" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ReorderReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReorderReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct ReorderReceiptRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.ReputationOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastFreshStart = lastFreshStart {
            try container.encodeTimestamp(lastFreshStart, format: .dateTime, forKey: ClientRuntime.Key("lastFreshStart"))
        }
        if reputationMetricsEnabled != false {
            try container.encode(reputationMetricsEnabled, forKey: ClientRuntime.Key("ReputationMetricsEnabled"))
        }
        if sendingEnabled != false {
            try container.encode(sendingEnabled, forKey: ClientRuntime.Key("SendingEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
        let reputationMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .reputationMetricsEnabled)
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastFreshStart)
        lastFreshStart = lastFreshStartDecoded
    }
}

extension SESClientTypes {
    /// Contains information about the reputation settings for a configuration set.
    public struct ReputationOptions: Swift.Equatable {
        /// The date and time at which the reputation metrics for the configuration set were last reset. Resetting these metrics is known as a fresh start. When you disable email sending for a configuration set using [UpdateConfigurationSetSendingEnabled] and later re-enable it, the reputation metrics for the configuration set (but not for the entire Amazon SES account) are reset. If email sending for the configuration set has never been disabled and later re-enabled, the value of this attribute is null.
        public var lastFreshStart: ClientRuntime.Date?
        /// Describes whether or not Amazon SES publishes reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch. If the value is true, reputation metrics are published. If the value is false, reputation metrics are not published. The default value is false.
        public var reputationMetricsEnabled: Swift.Bool
        /// Describes whether email sending is enabled or disabled for the configuration set. If the value is true, then Amazon SES will send emails that use the configuration set. If the value is false, Amazon SES will not send emails that use the configuration set. The default value is true. You can change this setting using [UpdateConfigurationSetSendingEnabled].
        public var sendingEnabled: Swift.Bool

        public init (
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension RuleDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<RuleDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided receipt rule does not exist.
public struct RuleDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Indicates that the named receipt rule does not exist.
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct RuleDoesNotExistExceptionBody: Swift.Equatable {
    let name: Swift.String?
    let message: Swift.String?
}

extension RuleDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RuleSetDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<RuleSetDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.name = output.error.name
        } else {
            self.name = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the provided receipt rule set does not exist.
public struct RuleSetDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Indicates that the named receipt rule set does not exist.
    public var name: Swift.String?

    public init (
        message: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.message = message
        self.name = name
    }
}

struct RuleSetDoesNotExistExceptionBody: Swift.Equatable {
    let name: Swift.String?
    let message: Swift.String?
}

extension RuleSetDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.S3Action: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case kmsKeyArn = "KmsKeyArn"
        case objectKeyPrefix = "ObjectKeyPrefix"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let kmsKeyArn = kmsKeyArn {
            try container.encode(kmsKeyArn, forKey: ClientRuntime.Key("KmsKeyArn"))
        }
        if let objectKeyPrefix = objectKeyPrefix {
            try container.encode(objectKeyPrefix, forKey: ClientRuntime.Key("ObjectKeyPrefix"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let objectKeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectKeyPrefix)
        objectKeyPrefix = objectKeyPrefixDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). To enable Amazon SES to write emails to your Amazon S3 bucket, use an AWS KMS key to encrypt your emails, or publish to an Amazon SNS topic of another account, Amazon SES must have permission to access those resources. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html). When you save your emails to an Amazon S3 bucket, the maximum email size (including headers) is 30 MB. Emails larger than that will bounce. For information about specifying Amazon S3 actions in receipt rules, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-s3.html).
    public struct S3Action: Swift.Equatable {
        /// The name of the Amazon S3 bucket that incoming email will be saved to.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket. You can use the default master key or a custom master key you created in AWS KMS as follows:
        ///
        /// * To use the default master key, provide an ARN in the form of arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses. For example, if your AWS account ID is 123456789012 and you want to use the default master key in the US West (Oregon) region, the ARN of the default master key would be arn:aws:kms:us-west-2:123456789012:alias/aws/ses. If you use the default master key, you don't need to perform any extra steps to give Amazon SES permission to use the key.
        ///
        /// * To use a custom master key you created in AWS KMS, provide the ARN of the master key and ensure that you add a statement to your key's policy to give Amazon SES permission to use it. For more information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html).
        ///
        ///
        /// For more information about key policies, see the [AWS KMS Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html). If you do not specify a master key, Amazon SES will not encrypt your emails. Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side encryption. This means that you must use the Amazon S3 encryption client to decrypt the email after retrieving it from Amazon S3, as the service has no access to use your AWS KMS keys for decryption. This encryption client is currently available with the [AWS SDK for Java](http://aws.amazon.com/sdk-for-java/) and [AWS SDK for Ruby](http://aws.amazon.com/sdk-for-ruby/) only. For more information about client-side encryption using AWS KMS master keys, see the [Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html).
        public var kmsKeyArn: Swift.String?
        /// The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that enables you to store similar data under the same directory in a bucket.
        public var objectKeyPrefix: Swift.String?
        /// The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init (
            bucketName: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            objectKeyPrefix: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.kmsKeyArn = kmsKeyArn
            self.objectKeyPrefix = objectKeyPrefix
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes.SNSAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encoding = "Encoding"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let encoding = encoding {
            try container.encode(encoding, forKey: ClientRuntime.Key("Encoding"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let encodingDecoded = try containerValues.decodeIfPresent(SESClientTypes.SNSActionEncoding.self, forKey: .encoding)
        encoding = encodingDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action publishes a notification to Amazon Simple Notification Service (Amazon SNS). This action includes a complete copy of the email content in the Amazon SNS notifications. Amazon SNS notifications for all other actions simply provide information about the email. They do not include the email content itself. If you own the Amazon SNS topic, you don't need to do anything to give Amazon SES permission to publish emails to it. However, if you don't own the Amazon SNS topic, you need to attach a policy to the topic to give Amazon SES permissions to access it. For information about giving permissions, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html). You can only publish emails that are 150 KB or less (including the header) to Amazon SNS. Larger emails will bounce. If you anticipate emails larger than 150 KB, use the S3 action instead. For information about using a receipt rule to publish an Amazon SNS notification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-sns.html).
    public struct SNSAction: Swift.Equatable {
        /// The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to use, but may not preserve all special characters when a message was encoded with a different encoding format. Base64 preserves all special characters. The default value is UTF-8.
        public var encoding: SESClientTypes.SNSActionEncoding?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init (
            encoding: SESClientTypes.SNSActionEncoding? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.encoding = encoding
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum SNSActionEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case base64
        case utf8
        case sdkUnknown(Swift.String)

        public static var allCases: [SNSActionEncoding] {
            return [
                .base64,
                .utf8,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .base64: return "Base64"
            case .utf8: return "UTF-8"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SNSActionEncoding(rawValue: rawValue) ?? SNSActionEncoding.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.SNSDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
    }
}

extension SESClientTypes {
    /// Contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination. Event destinations, such as Amazon SNS, are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
    public struct SNSDestination: Swift.Equatable {
        /// The ARN of the Amazon SNS topic that email sending events will be published to. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicARN: Swift.String?

        public init (
            topicARN: Swift.String? = nil
        )
        {
            self.topicARN = topicARN
        }
    }

}

extension SendBounceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bounceSender = bounceSender {
            try container.encode(bounceSender, forKey: ClientRuntime.Key("BounceSender"))
        }
        if let bounceSenderArn = bounceSenderArn {
            try container.encode(bounceSenderArn, forKey: ClientRuntime.Key("BounceSenderArn"))
        }
        if let bouncedRecipientInfoList = bouncedRecipientInfoList {
            if !bouncedRecipientInfoList.isEmpty {
                var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BouncedRecipientInfoList"))
                for (index0, bouncedrecipientinfo0) in bouncedRecipientInfoList.enumerated() {
                    try bouncedRecipientInfoListContainer.encode(bouncedrecipientinfo0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var bouncedRecipientInfoListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BouncedRecipientInfoList"))
                try bouncedRecipientInfoListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let explanation = explanation {
            try container.encode(explanation, forKey: ClientRuntime.Key("Explanation"))
        }
        if let messageDsn = messageDsn {
            try container.encode(messageDsn, forKey: ClientRuntime.Key("MessageDsn"))
        }
        if let originalMessageId = originalMessageId {
            try container.encode(originalMessageId, forKey: ClientRuntime.Key("OriginalMessageId"))
        }
        try container.encode("SendBounce", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendBounceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a bounce message to the sender of an email you received through Amazon SES.
public struct SendBounceInput: Swift.Equatable {
    /// The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
    /// This member is required.
    public var bounceSender: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var bounceSenderArn: Swift.String?
    /// A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one BouncedRecipientInfo in the list.
    /// This member is required.
    public var bouncedRecipientInfoList: [SESClientTypes.BouncedRecipientInfo]?
    /// Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
    public var explanation: Swift.String?
    /// Message-related DSN fields. If not specified, Amazon SES will choose the values.
    public var messageDsn: SESClientTypes.MessageDsn?
    /// The message ID of the message to be bounced.
    /// This member is required.
    public var originalMessageId: Swift.String?

    public init (
        bounceSender: Swift.String? = nil,
        bounceSenderArn: Swift.String? = nil,
        bouncedRecipientInfoList: [SESClientTypes.BouncedRecipientInfo]? = nil,
        explanation: Swift.String? = nil,
        messageDsn: SESClientTypes.MessageDsn? = nil,
        originalMessageId: Swift.String? = nil
    )
    {
        self.bounceSender = bounceSender
        self.bounceSenderArn = bounceSenderArn
        self.bouncedRecipientInfoList = bouncedRecipientInfoList
        self.explanation = explanation
        self.messageDsn = messageDsn
        self.originalMessageId = originalMessageId
    }
}

struct SendBounceInputBody: Swift.Equatable {
    let originalMessageId: Swift.String?
    let bounceSender: Swift.String?
    let explanation: Swift.String?
    let messageDsn: SESClientTypes.MessageDsn?
    let bouncedRecipientInfoList: [SESClientTypes.BouncedRecipientInfo]?
    let bounceSenderArn: Swift.String?
}

extension SendBounceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceSender = "BounceSender"
        case bounceSenderArn = "BounceSenderArn"
        case bouncedRecipientInfoList = "BouncedRecipientInfoList"
        case explanation = "Explanation"
        case messageDsn = "MessageDsn"
        case originalMessageId = "OriginalMessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalMessageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalMessageId)
        originalMessageId = originalMessageIdDecoded
        let bounceSenderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceSender)
        bounceSender = bounceSenderDecoded
        let explanationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explanation)
        explanation = explanationDecoded
        let messageDsnDecoded = try containerValues.decodeIfPresent(SESClientTypes.MessageDsn.self, forKey: .messageDsn)
        messageDsn = messageDsnDecoded
        if containerValues.contains(.bouncedRecipientInfoList) {
            struct KeyVal0{struct member{}}
            let bouncedRecipientInfoListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .bouncedRecipientInfoList)
            if let bouncedRecipientInfoListWrappedContainer = bouncedRecipientInfoListWrappedContainer {
                let bouncedRecipientInfoListContainer = try bouncedRecipientInfoListWrappedContainer.decodeIfPresent([SESClientTypes.BouncedRecipientInfo].self, forKey: .member)
                var bouncedRecipientInfoListBuffer:[SESClientTypes.BouncedRecipientInfo]? = nil
                if let bouncedRecipientInfoListContainer = bouncedRecipientInfoListContainer {
                    bouncedRecipientInfoListBuffer = [SESClientTypes.BouncedRecipientInfo]()
                    for structureContainer0 in bouncedRecipientInfoListContainer {
                        bouncedRecipientInfoListBuffer?.append(structureContainer0)
                    }
                }
                bouncedRecipientInfoList = bouncedRecipientInfoListBuffer
            } else {
                bouncedRecipientInfoList = []
            }
        } else {
            bouncedRecipientInfoList = nil
        }
        let bounceSenderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceSenderArn)
        bounceSenderArn = bounceSenderArnDecoded
    }
}

extension SendBounceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendBounceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendBounceOutputError: Swift.Error, Swift.Equatable {
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBounceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendBounceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// Represents a unique message ID.
public struct SendBounceOutputResponse: Swift.Equatable {
    /// The message ID of the bounce message.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendBounceOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendBounceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendBounceResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SendBulkTemplatedEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let defaultTags = defaultTags {
            if !defaultTags.isEmpty {
                var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
                for (index0, messagetag0) in defaultTags.enumerated() {
                    try defaultTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
                try defaultTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let defaultTemplateData = defaultTemplateData {
            try container.encode(defaultTemplateData, forKey: ClientRuntime.Key("DefaultTemplateData"))
        }
        if let destinations = destinations {
            if !destinations.isEmpty {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                for (index0, bulkemaildestination0) in destinations.enumerated() {
                    try destinationsContainer.encode(bulkemaildestination0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                try destinationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        try container.encode("SendBulkTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendBulkTemplatedEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a templated email to multiple destinations using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct SendBulkTemplatedEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendBulkTemplatedEmail.
    public var configurationSetName: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using SendBulkTemplatedEmail.
    public var defaultTags: [SESClientTypes.MessageTag]?
    /// A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available. The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    public var defaultTemplateData: Swift.String?
    /// One or more Destination objects. All of the recipients in a Destination will receive the same version of the email. You can specify up to 50 Destination objects within a Destinations array.
    /// This member is required.
    public var destinations: [SESClientTypes.BulkEmailDestination]?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a source email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html). The sender name (also known as the friendly name) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047). MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=.
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// The template to use when sending this email.
    /// This member is required.
    public var template: Swift.String?
    /// The ARN of the template to use when sending this email.
    public var templateArn: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        defaultTags: [SESClientTypes.MessageTag]? = nil,
        defaultTemplateData: Swift.String? = nil,
        destinations: [SESClientTypes.BulkEmailDestination]? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.defaultTags = defaultTags
        self.defaultTemplateData = defaultTemplateData
        self.destinations = destinations
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.template = template
        self.templateArn = templateArn
    }
}

struct SendBulkTemplatedEmailInputBody: Swift.Equatable {
    let source: Swift.String?
    let sourceArn: Swift.String?
    let replyToAddresses: [Swift.String]?
    let returnPath: Swift.String?
    let returnPathArn: Swift.String?
    let configurationSetName: Swift.String?
    let defaultTags: [SESClientTypes.MessageTag]?
    let template: Swift.String?
    let templateArn: Swift.String?
    let defaultTemplateData: Swift.String?
    let destinations: [SESClientTypes.BulkEmailDestination]?
}

extension SendBulkTemplatedEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case defaultTags = "DefaultTags"
        case defaultTemplateData = "DefaultTemplateData"
        case destinations = "Destinations"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case template = "Template"
        case templateArn = "TemplateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        if containerValues.contains(.replyToAddresses) {
            struct KeyVal0{struct member{}}
            let replyToAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replyToAddresses)
            if let replyToAddressesWrappedContainer = replyToAddressesWrappedContainer {
                let replyToAddressesContainer = try replyToAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replyToAddressesBuffer:[Swift.String]? = nil
                if let replyToAddressesContainer = replyToAddressesContainer {
                    replyToAddressesBuffer = [Swift.String]()
                    for stringContainer0 in replyToAddressesContainer {
                        replyToAddressesBuffer?.append(stringContainer0)
                    }
                }
                replyToAddresses = replyToAddressesBuffer
            } else {
                replyToAddresses = []
            }
        } else {
            replyToAddresses = nil
        }
        let returnPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPath)
        returnPath = returnPathDecoded
        let returnPathArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPathArn)
        returnPathArn = returnPathArnDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        if containerValues.contains(.defaultTags) {
            struct KeyVal0{struct member{}}
            let defaultTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .defaultTags)
            if let defaultTagsWrappedContainer = defaultTagsWrappedContainer {
                let defaultTagsContainer = try defaultTagsWrappedContainer.decodeIfPresent([SESClientTypes.MessageTag].self, forKey: .member)
                var defaultTagsBuffer:[SESClientTypes.MessageTag]? = nil
                if let defaultTagsContainer = defaultTagsContainer {
                    defaultTagsBuffer = [SESClientTypes.MessageTag]()
                    for structureContainer0 in defaultTagsContainer {
                        defaultTagsBuffer?.append(structureContainer0)
                    }
                }
                defaultTags = defaultTagsBuffer
            } else {
                defaultTags = []
            }
        } else {
            defaultTags = nil
        }
        let templateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .template)
        template = templateDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let defaultTemplateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTemplateData)
        defaultTemplateData = defaultTemplateDataDecoded
        if containerValues.contains(.destinations) {
            struct KeyVal0{struct member{}}
            let destinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .destinations)
            if let destinationsWrappedContainer = destinationsWrappedContainer {
                let destinationsContainer = try destinationsWrappedContainer.decodeIfPresent([SESClientTypes.BulkEmailDestination].self, forKey: .member)
                var destinationsBuffer:[SESClientTypes.BulkEmailDestination]? = nil
                if let destinationsContainer = destinationsContainer {
                    destinationsBuffer = [SESClientTypes.BulkEmailDestination]()
                    for structureContainer0 in destinationsContainer {
                        destinationsBuffer?.append(structureContainer0)
                    }
                }
                destinations = destinationsBuffer
            } else {
                destinations = []
            }
        } else {
            destinations = nil
        }
    }
}

extension SendBulkTemplatedEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendBulkTemplatedEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExist" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendBulkTemplatedEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBulkTemplatedEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendBulkTemplatedEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct SendBulkTemplatedEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendBulkTemplatedEmail action.
    /// This member is required.
    public var status: [SESClientTypes.BulkEmailDestinationStatus]?

    public init (
        status: [SESClientTypes.BulkEmailDestinationStatus]? = nil
    )
    {
        self.status = status
    }
}

struct SendBulkTemplatedEmailOutputResponseBody: Swift.Equatable {
    let status: [SESClientTypes.BulkEmailDestinationStatus]?
}

extension SendBulkTemplatedEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendBulkTemplatedEmailResult"))
        if containerValues.contains(.status) {
            struct KeyVal0{struct member{}}
            let statusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .status)
            if let statusWrappedContainer = statusWrappedContainer {
                let statusContainer = try statusWrappedContainer.decodeIfPresent([SESClientTypes.BulkEmailDestinationStatus].self, forKey: .member)
                var statusBuffer:[SESClientTypes.BulkEmailDestinationStatus]? = nil
                if let statusContainer = statusContainer {
                    statusBuffer = [SESClientTypes.BulkEmailDestinationStatus]()
                    for structureContainer0 in statusContainer {
                        statusBuffer?.append(structureContainer0)
                    }
                }
                status = statusBuffer
            } else {
                status = []
            }
        } else {
            status = nil
        }
    }
}

extension SendCustomVerificationEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("SendCustomVerificationEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendCustomVerificationEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a custom verification email to a specified recipient.
public struct SendCustomVerificationEmailInput: Swift.Equatable {
    /// Name of a configuration set to use when sending the verification email.
    public var configurationSetName: Swift.String?
    /// The email address to verify.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The name of the custom verification email template to use when sending the verification email.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

struct SendCustomVerificationEmailInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
    let templateName: Swift.String?
    let configurationSetName: Swift.String?
}

extension SendCustomVerificationEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendCustomVerificationEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendCustomVerificationEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateDoesNotExist" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerified" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProductionAccessNotGranted" : self = .productionAccessNotGrantedException(try ProductionAccessNotGrantedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendCustomVerificationEmailOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case messageRejected(MessageRejected)
    case productionAccessNotGrantedException(ProductionAccessNotGrantedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendCustomVerificationEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendCustomVerificationEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// The response received when attempting to send the custom verification email.
public struct SendCustomVerificationEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendCustomVerificationEmail operation.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendCustomVerificationEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendCustomVerificationEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendCustomVerificationEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SESClientTypes.SendDataPoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounces = "Bounces"
        case complaints = "Complaints"
        case deliveryAttempts = "DeliveryAttempts"
        case rejects = "Rejects"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if bounces != 0 {
            try container.encode(bounces, forKey: ClientRuntime.Key("Bounces"))
        }
        if complaints != 0 {
            try container.encode(complaints, forKey: ClientRuntime.Key("Complaints"))
        }
        if deliveryAttempts != 0 {
            try container.encode(deliveryAttempts, forKey: ClientRuntime.Key("DeliveryAttempts"))
        }
        if rejects != 0 {
            try container.encode(rejects, forKey: ClientRuntime.Key("Rejects"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let deliveryAttemptsDecoded = try containerValues.decode(Swift.Int.self, forKey: .deliveryAttempts)
        deliveryAttempts = deliveryAttemptsDecoded
        let bouncesDecoded = try containerValues.decode(Swift.Int.self, forKey: .bounces)
        bounces = bouncesDecoded
        let complaintsDecoded = try containerValues.decode(Swift.Int.self, forKey: .complaints)
        complaints = complaintsDecoded
        let rejectsDecoded = try containerValues.decode(Swift.Int.self, forKey: .rejects)
        rejects = rejectsDecoded
    }
}

extension SESClientTypes {
    /// Represents sending statistics data. Each SendDataPoint contains statistics for a 15-minute period of sending activity.
    public struct SendDataPoint: Swift.Equatable {
        /// Number of emails that have bounced.
        public var bounces: Swift.Int
        /// Number of unwanted emails that were rejected by recipients.
        public var complaints: Swift.Int
        /// Number of emails that have been sent.
        public var deliveryAttempts: Swift.Int
        /// Number of emails rejected by Amazon SES.
        public var rejects: Swift.Int
        /// Time of the data point.
        public var timestamp: ClientRuntime.Date?

        public init (
            bounces: Swift.Int = 0,
            complaints: Swift.Int = 0,
            deliveryAttempts: Swift.Int = 0,
            rejects: Swift.Int = 0,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.bounces = bounces
            self.complaints = complaints
            self.deliveryAttempts = deliveryAttempts
            self.rejects = rejects
            self.timestamp = timestamp
        }
    }

}

extension SendEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SendEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a single formatted email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html).
public struct SendEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendEmail.
    public var configurationSetName: Swift.String?
    /// The destination for this email, composed of To:, CC:, and BCC: fields.
    /// This member is required.
    public var destination: SESClientTypes.Destination?
    /// The message to be sent.
    /// This member is required.
    public var message: SESClientTypes.Message?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a source email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html). The sender name (also known as the friendly name) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047). MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=.
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?

    public init (
        configurationSetName: Swift.String? = nil,
        destination: SESClientTypes.Destination? = nil,
        message: SESClientTypes.Message? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.message = message
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

struct SendEmailInputBody: Swift.Equatable {
    let source: Swift.String?
    let destination: SESClientTypes.Destination?
    let message: SESClientTypes.Message?
    let replyToAddresses: [Swift.String]?
    let returnPath: Swift.String?
    let sourceArn: Swift.String?
    let returnPathArn: Swift.String?
    let tags: [SESClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
}

extension SendEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destination = "Destination"
        case message = "Message"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let messageDecoded = try containerValues.decodeIfPresent(SESClientTypes.Message.self, forKey: .message)
        message = messageDecoded
        if containerValues.contains(.replyToAddresses) {
            struct KeyVal0{struct member{}}
            let replyToAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replyToAddresses)
            if let replyToAddressesWrappedContainer = replyToAddressesWrappedContainer {
                let replyToAddressesContainer = try replyToAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replyToAddressesBuffer:[Swift.String]? = nil
                if let replyToAddressesContainer = replyToAddressesContainer {
                    replyToAddressesBuffer = [Swift.String]()
                    for stringContainer0 in replyToAddressesContainer {
                        replyToAddressesBuffer?.append(stringContainer0)
                    }
                }
                replyToAddresses = replyToAddressesBuffer
            } else {
                replyToAddresses = []
            }
        } else {
            replyToAddresses = nil
        }
        let returnPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPath)
        returnPath = returnPathDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let returnPathArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPathArn)
        returnPathArn = returnPathArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([SESClientTypes.MessageTag].self, forKey: .member)
                var tagsBuffer:[SESClientTypes.MessageTag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [SESClientTypes.MessageTag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// Represents a unique message ID.
public struct SendEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SendRawEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destinations = destinations {
            if !destinations.isEmpty {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                for (index0, address0) in destinations.enumerated() {
                    try destinationsContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
                try destinationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let fromArn = fromArn {
            try container.encode(fromArn, forKey: ClientRuntime.Key("FromArn"))
        }
        if let rawMessage = rawMessage {
            try container.encode(rawMessage, forKey: ClientRuntime.Key("RawMessage"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SendRawEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendRawEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a single raw email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html).
public struct SendRawEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendRawEmail.
    public var configurationSetName: Swift.String?
    /// A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
    public var destinations: [Swift.String]?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email. Instead of using this parameter, you can use the X-header X-SES-FROM-ARN in the raw message of the email. If you use both the FromArn parameter and the corresponding X-header, Amazon SES uses the value of the FromArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
    public var fromArn: Swift.String?
    /// The raw email message itself. The message has to meet the following criteria:
    ///
    /// * The message has to contain a header and a body, separated by a blank line.
    ///
    /// * All of the required header fields must be present in the message.
    ///
    /// * Each part of a multipart MIME message must be formatted properly.
    ///
    /// * Attachments must be of a content type that Amazon SES supports. For a list on unsupported content types, see [Unsupported Attachment Types](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html) in the Amazon SES Developer Guide.
    ///
    /// * The entire message must be base64-encoded.
    ///
    /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, we highly recommend that you encode that content. For more information, see [Sending Raw Email](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html) in the Amazon SES Developer Guide.
    ///
    /// * Per [RFC 5321](https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6), the maximum length of each line of text, including the , must not exceed 1,000 characters.
    /// This member is required.
    public var rawMessage: SESClientTypes.RawMessage?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. Instead of using this parameter, you can use the X-header X-SES-RETURN-PATH-ARN in the raw message of the email. If you use both the ReturnPathArn parameter and the corresponding X-header, Amazon SES uses the value of the ReturnPathArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
    public var returnPathArn: Swift.String?
    /// The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.) Amazon SES does not support the SMTPUTF8 extension, as described in[RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a source email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html). The sender name (also known as the friendly name) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047). MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=. If you specify the Source parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. Instead of using this parameter, you can use the X-header X-SES-SOURCE-ARN in the raw message of the email. If you use both the SourceArn parameter and the corresponding X-header, Amazon SES uses the value of the SourceArn parameter. For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendRawEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?

    public init (
        configurationSetName: Swift.String? = nil,
        destinations: [Swift.String]? = nil,
        fromArn: Swift.String? = nil,
        rawMessage: SESClientTypes.RawMessage? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destinations = destinations
        self.fromArn = fromArn
        self.rawMessage = rawMessage
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
    }
}

struct SendRawEmailInputBody: Swift.Equatable {
    let source: Swift.String?
    let destinations: [Swift.String]?
    let rawMessage: SESClientTypes.RawMessage?
    let fromArn: Swift.String?
    let sourceArn: Swift.String?
    let returnPathArn: Swift.String?
    let tags: [SESClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
}

extension SendRawEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destinations = "Destinations"
        case fromArn = "FromArn"
        case rawMessage = "RawMessage"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        if containerValues.contains(.destinations) {
            struct KeyVal0{struct member{}}
            let destinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .destinations)
            if let destinationsWrappedContainer = destinationsWrappedContainer {
                let destinationsContainer = try destinationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var destinationsBuffer:[Swift.String]? = nil
                if let destinationsContainer = destinationsContainer {
                    destinationsBuffer = [Swift.String]()
                    for stringContainer0 in destinationsContainer {
                        destinationsBuffer?.append(stringContainer0)
                    }
                }
                destinations = destinationsBuffer
            } else {
                destinations = []
            }
        } else {
            destinations = nil
        }
        let rawMessageDecoded = try containerValues.decodeIfPresent(SESClientTypes.RawMessage.self, forKey: .rawMessage)
        rawMessage = rawMessageDecoded
        let fromArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromArn)
        fromArn = fromArnDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let returnPathArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPathArn)
        returnPathArn = returnPathArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([SESClientTypes.MessageTag].self, forKey: .member)
                var tagsBuffer:[SESClientTypes.MessageTag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [SESClientTypes.MessageTag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendRawEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendRawEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendRawEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendRawEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendRawEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// Represents a unique message ID.
public struct SendRawEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendRawEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendRawEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendRawEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendRawEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SendTemplatedEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let replyToAddresses = replyToAddresses {
            if !replyToAddresses.isEmpty {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                for (index0, address0) in replyToAddresses.enumerated() {
                    try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
                try replyToAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, messagetag0) in tags.enumerated() {
                    try tagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        try container.encode("SendTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendTemplatedEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to send a templated email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct SendTemplatedEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when you send an email using SendTemplatedEmail.
    public var configurationSetName: Swift.String?
    /// The destination for this email, composed of To:, CC:, and BCC: fields. A Destination can include up to 50 recipients across these three fields.
    /// This member is required.
    public var destination: SESClientTypes.Destination?
    /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
    public var replyToAddresses: [Swift.String]?
    /// The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    public var returnPath: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var returnPathArn: Swift.String?
    /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html). If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html). Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a source email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html). The sender name (also known as the friendly name) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in[RFC 2047](https://tools.ietf.org/html/rfc2047). MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=.
    /// This member is required.
    public var source: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var sourceArn: Swift.String?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendTemplatedEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var tags: [SESClientTypes.MessageTag]?
    /// The template to use when sending this email.
    /// This member is required.
    public var template: Swift.String?
    /// The ARN of the template to use when sending this email.
    public var templateArn: Swift.String?
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        destination: SESClientTypes.Destination? = nil,
        replyToAddresses: [Swift.String]? = nil,
        returnPath: Swift.String? = nil,
        returnPathArn: Swift.String? = nil,
        source: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [SESClientTypes.MessageTag]? = nil,
        template: Swift.String? = nil,
        templateArn: Swift.String? = nil,
        templateData: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.destination = destination
        self.replyToAddresses = replyToAddresses
        self.returnPath = returnPath
        self.returnPathArn = returnPathArn
        self.source = source
        self.sourceArn = sourceArn
        self.tags = tags
        self.template = template
        self.templateArn = templateArn
        self.templateData = templateData
    }
}

struct SendTemplatedEmailInputBody: Swift.Equatable {
    let source: Swift.String?
    let destination: SESClientTypes.Destination?
    let replyToAddresses: [Swift.String]?
    let returnPath: Swift.String?
    let sourceArn: Swift.String?
    let returnPathArn: Swift.String?
    let tags: [SESClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
    let template: Swift.String?
    let templateArn: Swift.String?
    let templateData: Swift.String?
}

extension SendTemplatedEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case destination = "Destination"
        case replyToAddresses = "ReplyToAddresses"
        case returnPath = "ReturnPath"
        case returnPathArn = "ReturnPathArn"
        case source = "Source"
        case sourceArn = "SourceArn"
        case tags = "Tags"
        case template = "Template"
        case templateArn = "TemplateArn"
        case templateData = "TemplateData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        if containerValues.contains(.replyToAddresses) {
            struct KeyVal0{struct member{}}
            let replyToAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replyToAddresses)
            if let replyToAddressesWrappedContainer = replyToAddressesWrappedContainer {
                let replyToAddressesContainer = try replyToAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replyToAddressesBuffer:[Swift.String]? = nil
                if let replyToAddressesContainer = replyToAddressesContainer {
                    replyToAddressesBuffer = [Swift.String]()
                    for stringContainer0 in replyToAddressesContainer {
                        replyToAddressesBuffer?.append(stringContainer0)
                    }
                }
                replyToAddresses = replyToAddressesBuffer
            } else {
                replyToAddresses = []
            }
        } else {
            replyToAddresses = nil
        }
        let returnPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPath)
        returnPath = returnPathDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let returnPathArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .returnPathArn)
        returnPathArn = returnPathArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([SESClientTypes.MessageTag].self, forKey: .member)
                var tagsBuffer:[SESClientTypes.MessageTag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [SESClientTypes.MessageTag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let templateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .template)
        template = templateDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension SendTemplatedEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SendTemplatedEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSendingPausedException" : self = .accountSendingPausedException(try AccountSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConfigurationSetSendingPausedException" : self = .configurationSetSendingPausedException(try ConfigurationSetSendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExist" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendTemplatedEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSendingPausedException(AccountSendingPausedException)
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case configurationSetSendingPausedException(ConfigurationSetSendingPausedException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTemplatedEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendTemplatedEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

public struct SendTemplatedEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendTemplatedEmail action.
    /// This member is required.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendTemplatedEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendTemplatedEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendTemplatedEmailResult"))
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SetActiveReceiptRuleSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetActiveReceiptRuleSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetActiveReceiptRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to set a receipt rule set as the active receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct SetActiveReceiptRuleSetInput: Swift.Equatable {
    /// The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
    public var ruleSetName: Swift.String?

    public init (
        ruleSetName: Swift.String? = nil
    )
    {
        self.ruleSetName = ruleSetName
    }
}

struct SetActiveReceiptRuleSetInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
}

extension SetActiveReceiptRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
    }
}

extension SetActiveReceiptRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetActiveReceiptRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetActiveReceiptRuleSetOutputError: Swift.Error, Swift.Equatable {
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetActiveReceiptRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetActiveReceiptRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetIdentityDkimEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if dkimEnabled != false {
            try container.encode(dkimEnabled, forKey: ClientRuntime.Key("DkimEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityDkimEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityDkimEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable Amazon SES Easy DKIM signing for an identity. For more information about setting up Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
public struct SetIdentityDkimEnabledInput: Swift.Equatable {
    /// Sets whether DKIM signing is enabled for an identity. Set to true to enable DKIM signing for this identity; false to disable it.
    /// This member is required.
    public var dkimEnabled: Swift.Bool
    /// The identity for which DKIM signing should be enabled or disabled.
    /// This member is required.
    public var identity: Swift.String?

    public init (
        dkimEnabled: Swift.Bool = false,
        identity: Swift.String? = nil
    )
    {
        self.dkimEnabled = dkimEnabled
        self.identity = identity
    }
}

struct SetIdentityDkimEnabledInputBody: Swift.Equatable {
    let identity: Swift.String?
    let dkimEnabled: Swift.Bool
}

extension SetIdentityDkimEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimEnabled = "DkimEnabled"
        case identity = "Identity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let dkimEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dkimEnabled)
        dkimEnabled = dkimEnabledDecoded
    }
}

extension SetIdentityDkimEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityDkimEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIdentityDkimEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityDkimEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityDkimEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetIdentityFeedbackForwardingEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if forwardingEnabled != false {
            try container.encode(forwardingEnabled, forKey: ClientRuntime.Key("ForwardingEnabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        try container.encode("SetIdentityFeedbackForwardingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityFeedbackForwardingEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable whether Amazon SES forwards you bounce and complaint notifications through email. For information about email feedback forwarding, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-email.html).
public struct SetIdentityFeedbackForwardingEnabledInput: Swift.Equatable {
    /// Sets whether Amazon SES will forward bounce and complaint notifications as email. true specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. false specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to false when Amazon SNS topics are set for both Bounce and Complaint notification types.
    /// This member is required.
    public var forwardingEnabled: Swift.Bool
    /// The identity for which to set bounce and complaint notification forwarding. Examples: user@example.com, example.com.
    /// This member is required.
    public var identity: Swift.String?

    public init (
        forwardingEnabled: Swift.Bool = false,
        identity: Swift.String? = nil
    )
    {
        self.forwardingEnabled = forwardingEnabled
        self.identity = identity
    }
}

struct SetIdentityFeedbackForwardingEnabledInputBody: Swift.Equatable {
    let identity: Swift.String?
    let forwardingEnabled: Swift.Bool
}

extension SetIdentityFeedbackForwardingEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forwardingEnabled = "ForwardingEnabled"
        case identity = "Identity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let forwardingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .forwardingEnabled)
        forwardingEnabled = forwardingEnabledDecoded
    }
}

extension SetIdentityFeedbackForwardingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityFeedbackForwardingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIdentityFeedbackForwardingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityFeedbackForwardingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityFeedbackForwardingEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetIdentityHeadersInNotificationsEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        try container.encode("SetIdentityHeadersInNotificationsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityHeadersInNotificationsEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to set whether Amazon SES includes the original email headers in the Amazon SNS notifications of a specified type. For information about notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html).
public struct SetIdentityHeadersInNotificationsEnabledInput: Swift.Equatable {
    /// Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of true specifies that Amazon SES will include headers in notifications, and a value of false specifies that Amazon SES will not include headers in notifications. This value can only be set when NotificationType is already set to use a particular Amazon SNS topic.
    /// This member is required.
    public var enabled: Swift.Bool
    /// The identity for which to enable or disable headers in notifications. Examples: user@example.com, example.com.
    /// This member is required.
    public var identity: Swift.String?
    /// The notification type for which to enable or disable headers in notifications.
    /// This member is required.
    public var notificationType: SESClientTypes.NotificationType?

    public init (
        enabled: Swift.Bool = false,
        identity: Swift.String? = nil,
        notificationType: SESClientTypes.NotificationType? = nil
    )
    {
        self.enabled = enabled
        self.identity = identity
        self.notificationType = notificationType
    }
}

struct SetIdentityHeadersInNotificationsEnabledInputBody: Swift.Equatable {
    let identity: Swift.String?
    let notificationType: SESClientTypes.NotificationType?
    let enabled: Swift.Bool
}

extension SetIdentityHeadersInNotificationsEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case identity = "Identity"
        case notificationType = "NotificationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let notificationTypeDecoded = try containerValues.decodeIfPresent(SESClientTypes.NotificationType.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension SetIdentityHeadersInNotificationsEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityHeadersInNotificationsEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIdentityHeadersInNotificationsEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityHeadersInNotificationsEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityHeadersInNotificationsEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetIdentityMailFromDomainInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let behaviorOnMXFailure = behaviorOnMXFailure {
            try container.encode(behaviorOnMXFailure, forKey: ClientRuntime.Key("BehaviorOnMXFailure"))
        }
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let mailFromDomain = mailFromDomain {
            try container.encode(mailFromDomain, forKey: ClientRuntime.Key("MailFromDomain"))
        }
        try container.encode("SetIdentityMailFromDomain", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityMailFromDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the Amazon SES custom MAIL FROM domain setup for a verified identity. For information about using a custom MAIL FROM domain, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html).
public struct SetIdentityMailFromDomainInput: Swift.Equatable {
    /// The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose UseDefaultValue, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose RejectMessage, Amazon SES will return a MailFromDomainNotVerified error and not send the email. The action specified in BehaviorOnMXFailure is taken when the custom MAIL FROM domain setup is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure?
    /// The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
    /// This member is required.
    public var identity: Swift.String?
    /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html)), and 3) not be used to receive emails. A value of null disables the custom MAIL FROM setting for the identity.
    public var mailFromDomain: Swift.String?

    public init (
        behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure? = nil,
        identity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMXFailure = behaviorOnMXFailure
        self.identity = identity
        self.mailFromDomain = mailFromDomain
    }
}

struct SetIdentityMailFromDomainInputBody: Swift.Equatable {
    let identity: Swift.String?
    let mailFromDomain: Swift.String?
    let behaviorOnMXFailure: SESClientTypes.BehaviorOnMXFailure?
}

extension SetIdentityMailFromDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMXFailure = "BehaviorOnMXFailure"
        case identity = "Identity"
        case mailFromDomain = "MailFromDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let behaviorOnMXFailureDecoded = try containerValues.decodeIfPresent(SESClientTypes.BehaviorOnMXFailure.self, forKey: .behaviorOnMXFailure)
        behaviorOnMXFailure = behaviorOnMXFailureDecoded
    }
}

extension SetIdentityMailFromDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityMailFromDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIdentityMailFromDomainOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityMailFromDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityMailFromDomainOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetIdentityNotificationTopicInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identity = identity {
            try container.encode(identity, forKey: ClientRuntime.Key("Identity"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        if let snsTopic = snsTopic {
            try container.encode(snsTopic, forKey: ClientRuntime.Key("SnsTopic"))
        }
        try container.encode("SetIdentityNotificationTopic", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIdentityNotificationTopicInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to specify the Amazon SNS topic to which Amazon SES will publish bounce, complaint, or delivery notifications for emails sent with that identity as the Source. For information about Amazon SES notifications, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html).
public struct SetIdentityNotificationTopicInput: Swift.Equatable {
    /// The identity (email address or domain) that you want to set the Amazon SNS topic for. You can only specify a verified identity for this parameter. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: sender@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    /// This member is required.
    public var identity: Swift.String?
    /// The type of notifications that will be published to the specified Amazon SNS topic.
    /// This member is required.
    public var notificationType: SESClientTypes.NotificationType?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, SnsTopic is cleared and publishing is disabled.
    public var snsTopic: Swift.String?

    public init (
        identity: Swift.String? = nil,
        notificationType: SESClientTypes.NotificationType? = nil,
        snsTopic: Swift.String? = nil
    )
    {
        self.identity = identity
        self.notificationType = notificationType
        self.snsTopic = snsTopic
    }
}

struct SetIdentityNotificationTopicInputBody: Swift.Equatable {
    let identity: Swift.String?
    let notificationType: SESClientTypes.NotificationType?
    let snsTopic: Swift.String?
}

extension SetIdentityNotificationTopicInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity = "Identity"
        case notificationType = "NotificationType"
        case snsTopic = "SnsTopic"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let notificationTypeDecoded = try containerValues.decodeIfPresent(SESClientTypes.NotificationType.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
        let snsTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopic)
        snsTopic = snsTopicDecoded
    }
}

extension SetIdentityNotificationTopicOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetIdentityNotificationTopicOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIdentityNotificationTopicOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIdentityNotificationTopicOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetIdentityNotificationTopicOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetReceiptRulePositionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let after = after {
            try container.encode(after, forKey: ClientRuntime.Key("After"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("SetReceiptRulePosition", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetReceiptRulePositionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to set the position of a receipt rule in a receipt rule set. You use receipt rule sets to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct SetReceiptRulePositionInput: Swift.Equatable {
    /// The name of the receipt rule after which to place the specified receipt rule.
    public var after: Swift.String?
    /// The name of the receipt rule to reposition.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The name of the receipt rule set that contains the receipt rule to reposition.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        after: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.after = after
        self.ruleName = ruleName
        self.ruleSetName = ruleSetName
    }
}

struct SetReceiptRulePositionInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let ruleName: Swift.String?
    let after: Swift.String?
}

extension SetReceiptRulePositionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case after = "After"
        case ruleName = "RuleName"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let afterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .after)
        after = afterDecoded
    }
}

extension SetReceiptRulePositionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetReceiptRulePositionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RuleDoesNotExist" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetReceiptRulePositionOutputError: Swift.Error, Swift.Equatable {
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetReceiptRulePositionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct SetReceiptRulePositionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.StopAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scope = "Scope"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(SESClientTypes.StopScope.self, forKey: .scope)
        scope = scopeDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action terminates the evaluation of the receipt rule set and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). For information about setting a stop action in a receipt rule, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-stop.html).
    public struct StopAction: Swift.Equatable {
        /// The scope of the StopAction. The only acceptable value is RuleSet.
        /// This member is required.
        public var scope: SESClientTypes.StopScope?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init (
            scope: SESClientTypes.StopScope? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.scope = scope
            self.topicArn = topicArn
        }
    }

}

extension SESClientTypes {
    public enum StopScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ruleSet
        case sdkUnknown(Swift.String)

        public static var allCases: [StopScope] {
            return [
                .ruleSet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ruleSet: return "RuleSet"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StopScope(rawValue: rawValue) ?? StopScope.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.Template: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlPart = "HtmlPart"
        case subjectPart = "SubjectPart"
        case templateName = "TemplateName"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let htmlPart = htmlPart {
            try container.encode(htmlPart, forKey: ClientRuntime.Key("HtmlPart"))
        }
        if let subjectPart = subjectPart {
            try container.encode(subjectPart, forKey: ClientRuntime.Key("SubjectPart"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let textPart = textPart {
            try container.encode(textPart, forKey: ClientRuntime.Key("TextPart"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let subjectPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectPart)
        subjectPart = subjectPartDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textPart)
        textPart = textPartDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
    }
}

extension SESClientTypes {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    public struct Template: Swift.Equatable {
        /// The HTML body of the email.
        public var htmlPart: Swift.String?
        /// The subject line of the email.
        public var subjectPart: Swift.String?
        /// The name of the template. You will refer to this name when you send email using the SendTemplatedEmail or SendBulkTemplatedEmail operations.
        /// This member is required.
        public var templateName: Swift.String?
        /// The email body that will be visible to recipients whose email clients do not display HTML.
        public var textPart: Swift.String?

        public init (
            htmlPart: Swift.String? = nil,
            subjectPart: Swift.String? = nil,
            templateName: Swift.String? = nil,
            textPart: Swift.String? = nil
        )
        {
            self.htmlPart = htmlPart
            self.subjectPart = subjectPart
            self.templateName = templateName
            self.textPart = textPart
        }
    }

}

extension TemplateDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TemplateDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.templateName = output.error.templateName
        } else {
            self.templateName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the Template object you specified does not exist in your Amazon SES account.
public struct TemplateDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var templateName: Swift.String?

    public init (
        message: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.message = message
        self.templateName = templateName
    }
}

struct TemplateDoesNotExistExceptionBody: Swift.Equatable {
    let templateName: Swift.String?
    let message: Swift.String?
}

extension TemplateDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName = "TemplateName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESClientTypes.TemplateMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdTimestamp = createdTimestamp {
            try container.encodeTimestamp(createdTimestamp, format: .dateTime, forKey: ClientRuntime.Key("createdTimestamp"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension SESClientTypes {
    /// Contains information about an email template.
    public struct TemplateMetadata: Swift.Equatable {
        /// The time and date the template was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the template.
        public var name: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
        }
    }

}

extension TestRenderTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateData = templateData {
            try container.encode(templateData, forKey: ClientRuntime.Key("TemplateData"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        try container.encode("TestRenderTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension TestRenderTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestRenderTemplateInput: Swift.Equatable {
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?
    /// The name of the template that you want to render.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

struct TestRenderTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let templateData: Swift.String?
}

extension TestRenderTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension TestRenderTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestRenderTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRenderingParameter" : self = .invalidRenderingParameterException(try InvalidRenderingParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRenderingAttribute" : self = .missingRenderingAttributeException(try MissingRenderingAttributeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExist" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TestRenderTemplateOutputError: Swift.Error, Swift.Equatable {
    case invalidRenderingParameterException(InvalidRenderingParameterException)
    case missingRenderingAttributeException(MissingRenderingAttributeException)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestRenderTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TestRenderTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.renderedTemplate = output.renderedTemplate
        } else {
            self.renderedTemplate = nil
        }
    }
}

public struct TestRenderTemplateOutputResponse: Swift.Equatable {
    /// The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.
    public var renderedTemplate: Swift.String?

    public init (
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

struct TestRenderTemplateOutputResponseBody: Swift.Equatable {
    let renderedTemplate: Swift.String?
}

extension TestRenderTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case renderedTemplate = "RenderedTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TestRenderTemplateResult"))
        let renderedTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renderedTemplate)
        renderedTemplate = renderedTemplateDecoded
    }
}

extension SESClientTypes {
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .require: return "Require"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SESClientTypes.TrackingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customRedirectDomain = customRedirectDomain {
            try container.encode(customRedirectDomain, forKey: ClientRuntime.Key("CustomRedirectDomain"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension SESClientTypes {
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    public struct TrackingOptions: Swift.Equatable {
        /// The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
        public var customRedirectDomain: Swift.String?

        public init (
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension TrackingOptionsAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TrackingOptionsAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the configuration set you specified already contains a TrackingOptions object.
public struct TrackingOptionsAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that a TrackingOptions object already exists in the specified configuration set.
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct TrackingOptionsAlreadyExistsExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let message: Swift.String?
}

extension TrackingOptionsAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TrackingOptionsDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TrackingOptionsDoesNotExistExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.error.configurationSetName
            self.message = output.error.message
        } else {
            self.configurationSetName = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that the TrackingOptions object you specified does not exist.
public struct TrackingOptionsDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Indicates that a TrackingOptions object does not exist in the specified configuration set.
    public var configurationSetName: Swift.String?
    public var message: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.message = message
    }
}

struct TrackingOptionsDoesNotExistExceptionBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let message: Swift.String?
}

extension TrackingOptionsDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UpdateAccountSendingEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateAccountSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateAccountSendingEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the email sending capabilities for your entire Amazon SES account.
public struct UpdateAccountSendingEnabledInput: Swift.Equatable {
    /// Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
    public var enabled: Swift.Bool

    public init (
        enabled: Swift.Bool = false
    )
    {
        self.enabled = enabled
    }
}

struct UpdateAccountSendingEnabledInputBody: Swift.Equatable {
    let enabled: Swift.Bool
}

extension UpdateAccountSendingEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension UpdateAccountSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAccountSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAccountSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAccountSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAccountSendingEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let eventDestination = eventDestination {
            try container.encode(eventDestination, forKey: ClientRuntime.Key("EventDestination"))
        }
        try container.encode("UpdateConfigurationSetEventDestination", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to update the event destination of a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html).
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination that you want to update.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The event destination object that you want to apply to the specified configuration set.
    /// This member is required.
    public var eventDestination: SESClientTypes.EventDestination?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SESClientTypes.EventDestination? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
    }
}

struct UpdateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestination: SESClientTypes.EventDestination?
}

extension UpdateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case eventDestination = "EventDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SESClientTypes.EventDestination.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension UpdateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EventDestinationDoesNotExist" : self = .eventDestinationDoesNotExistException(try EventDestinationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCloudWatchDestination" : self = .invalidCloudWatchDestinationException(try InvalidCloudWatchDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFirehoseDestination" : self = .invalidFirehoseDestinationException(try InvalidFirehoseDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSNSDestination" : self = .invalidSNSDestinationException(try InvalidSNSDestinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case eventDestinationDoesNotExistException(EventDestinationDoesNotExistException)
    case invalidCloudWatchDestinationException(InvalidCloudWatchDestinationException)
    case invalidFirehoseDestinationException(InvalidFirehoseDestinationException)
    case invalidSNSDestinationException(InvalidSNSDestinationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct UpdateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetReputationMetricsEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to modify the reputation metric publishing settings for a configuration set.
public struct UpdateConfigurationSetReputationMetricsEnabledInput: Swift.Equatable {
    /// The name of the configuration set that you want to update.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
    /// This member is required.
    public var enabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

struct UpdateConfigurationSetReputationMetricsEnabledInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let enabled: Swift.Bool
}

extension UpdateConfigurationSetReputationMetricsEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case enabled = "Enabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetReputationMetricsEnabledOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetReputationMetricsEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateConfigurationSetReputationMetricsEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetSendingEnabledInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        try container.encode("UpdateConfigurationSetSendingEnabled", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetSendingEnabledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to enable or disable the email sending capabilities for a specific configuration set.
public struct UpdateConfigurationSetSendingEnabledInput: Swift.Equatable {
    /// The name of the configuration set that you want to update.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// Describes whether email sending is enabled or disabled for the configuration set.
    /// This member is required.
    public var enabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        enabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.enabled = enabled
    }
}

struct UpdateConfigurationSetSendingEnabledInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let enabled: Swift.Bool
}

extension UpdateConfigurationSetSendingEnabledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case enabled = "Enabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension UpdateConfigurationSetSendingEnabledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetSendingEnabledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetSendingEnabledOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetSendingEnabledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateConfigurationSetSendingEnabledOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetTrackingOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let trackingOptions = trackingOptions {
            try container.encode(trackingOptions, forKey: ClientRuntime.Key("TrackingOptions"))
        }
        try container.encode("UpdateConfigurationSetTrackingOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateConfigurationSetTrackingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to update the tracking options for a configuration set.
public struct UpdateConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set for which you want to update the custom tracking domain.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails. For more information, see [Configuring Custom Domains to Handle Open and Click Tracking](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html) in the Amazon SES Developer Guide.
    /// This member is required.
    public var trackingOptions: SESClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        trackingOptions: SESClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.trackingOptions = trackingOptions
    }
}

struct UpdateConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: SESClientTypes.TrackingOptions?
}

extension UpdateConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SESClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
    }
}

extension UpdateConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConfigurationSetDoesNotExist" : self = .configurationSetDoesNotExistException(try ConfigurationSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrackingOptions" : self = .invalidTrackingOptionsException(try InvalidTrackingOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrackingOptionsDoesNotExistException" : self = .trackingOptionsDoesNotExistException(try TrackingOptionsDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case configurationSetDoesNotExistException(ConfigurationSetDoesNotExistException)
    case invalidTrackingOptionsException(InvalidTrackingOptionsException)
    case trackingOptionsDoesNotExistException(TrackingOptionsDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct UpdateConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try container.encode(failureRedirectionURL, forKey: ClientRuntime.Key("FailureRedirectionURL"))
        }
        if let fromEmailAddress = fromEmailAddress {
            try container.encode(fromEmailAddress, forKey: ClientRuntime.Key("FromEmailAddress"))
        }
        if let successRedirectionURL = successRedirectionURL {
            try container.encode(successRedirectionURL, forKey: ClientRuntime.Key("SuccessRedirectionURL"))
        }
        if let templateContent = templateContent {
            try container.encode(templateContent, forKey: ClientRuntime.Key("TemplateContent"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let templateSubject = templateSubject {
            try container.encode(templateSubject, forKey: ClientRuntime.Key("TemplateSubject"))
        }
        try container.encode("UpdateCustomVerificationEmailTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to update an existing custom verification email template.
public struct UpdateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom Verification Email Frequently Asked Questions](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq) in the Amazon SES Developer Guide.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template that you want to update.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct UpdateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension UpdateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomVerificationEmailInvalidContent" : self = .customVerificationEmailInvalidContentException(try CustomVerificationEmailInvalidContentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomVerificationEmailTemplateDoesNotExist" : self = .customVerificationEmailTemplateDoesNotExistException(try CustomVerificationEmailTemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FromEmailAddressNotVerified" : self = .fromEmailAddressNotVerifiedException(try FromEmailAddressNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case customVerificationEmailInvalidContentException(CustomVerificationEmailInvalidContentException)
    case customVerificationEmailTemplateDoesNotExistException(CustomVerificationEmailTemplateDoesNotExistException)
    case fromEmailAddressNotVerifiedException(FromEmailAddressNotVerifiedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateReceiptRuleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
        if let ruleSetName = ruleSetName {
            try container.encode(ruleSetName, forKey: ClientRuntime.Key("RuleSetName"))
        }
        try container.encode("UpdateReceiptRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateReceiptRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to update a receipt rule. You use receipt rules to receive email with Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html).
public struct UpdateReceiptRuleInput: Swift.Equatable {
    /// A data structure that contains the updated receipt rule information.
    /// This member is required.
    public var rule: SESClientTypes.ReceiptRule?
    /// The name of the receipt rule set that the receipt rule belongs to.
    /// This member is required.
    public var ruleSetName: Swift.String?

    public init (
        rule: SESClientTypes.ReceiptRule? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.rule = rule
        self.ruleSetName = ruleSetName
    }
}

struct UpdateReceiptRuleInputBody: Swift.Equatable {
    let ruleSetName: Swift.String?
    let rule: SESClientTypes.ReceiptRule?
}

extension UpdateReceiptRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule = "Rule"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(SESClientTypes.ReceiptRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension UpdateReceiptRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateReceiptRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLambdaFunction" : self = .invalidLambdaFunctionException(try InvalidLambdaFunctionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3Configuration" : self = .invalidS3ConfigurationException(try InvalidS3ConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnsTopic" : self = .invalidSnsTopicException(try InvalidSnsTopicException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleDoesNotExist" : self = .ruleDoesNotExistException(try RuleDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RuleSetDoesNotExist" : self = .ruleSetDoesNotExistException(try RuleSetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateReceiptRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidLambdaFunctionException(InvalidLambdaFunctionException)
    case invalidS3ConfigurationException(InvalidS3ConfigurationException)
    case invalidSnsTopicException(InvalidSnsTopicException)
    case limitExceededException(LimitExceededException)
    case ruleDoesNotExistException(RuleDoesNotExistException)
    case ruleSetDoesNotExistException(RuleSetDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateReceiptRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct UpdateReceiptRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        try container.encode("UpdateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTemplateInput: Swift.Equatable {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var template: SESClientTypes.Template?

    public init (
        template: SESClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

struct UpdateTemplateInputBody: Swift.Equatable {
    let template: SESClientTypes.Template?
}

extension UpdateTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDecoded = try containerValues.decodeIfPresent(SESClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension UpdateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidTemplate" : self = .invalidTemplateException(try InvalidTemplateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TemplateDoesNotExist" : self = .templateDoesNotExistException(try TemplateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTemplateOutputError: Swift.Error, Swift.Equatable {
    case invalidTemplateException(InvalidTemplateException)
    case templateDoesNotExistException(TemplateDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes {
    public enum VerificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notstarted
        case pending
        case success
        case temporaryfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationStatus] {
            return [
                .failed,
                .notstarted,
                .pending,
                .success,
                .temporaryfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .pending: return "Pending"
            case .success: return "Success"
            case .temporaryfailure: return "TemporaryFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerificationStatus(rawValue: rawValue) ?? VerificationStatus.sdkUnknown(rawValue)
        }
    }
}

extension VerifyDomainDkimInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainDkim", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyDomainDkimInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to generate the CNAME records needed to set up Easy DKIM with Amazon SES. For more information about setting up Easy DKIM, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
public struct VerifyDomainDkimInput: Swift.Equatable {
    /// The name of the domain to be verified for Easy DKIM signing.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

struct VerifyDomainDkimInputBody: Swift.Equatable {
    let domain: Swift.String?
}

extension VerifyDomainDkimInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension VerifyDomainDkimOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyDomainDkimOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyDomainDkimOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyDomainDkimOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VerifyDomainDkimOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimTokens = output.dkimTokens
        } else {
            self.dkimTokens = nil
        }
    }
}

/// Returns CNAME records that you must publish to the DNS server of your domain to set up Easy DKIM with Amazon SES.
public struct VerifyDomainDkimOutputResponse: Swift.Equatable {
    /// A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address. Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.) For more information about creating DNS records using DKIM tokens, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
    /// This member is required.
    public var dkimTokens: [Swift.String]?

    public init (
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimTokens = dkimTokens
    }
}

struct VerifyDomainDkimOutputResponseBody: Swift.Equatable {
    let dkimTokens: [Swift.String]?
}

extension VerifyDomainDkimOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimTokens = "DkimTokens"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("VerifyDomainDkimResult"))
        if containerValues.contains(.dkimTokens) {
            struct KeyVal0{struct member{}}
            let dkimTokensWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dkimTokens)
            if let dkimTokensWrappedContainer = dkimTokensWrappedContainer {
                let dkimTokensContainer = try dkimTokensWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dkimTokensBuffer:[Swift.String]? = nil
                if let dkimTokensContainer = dkimTokensContainer {
                    dkimTokensBuffer = [Swift.String]()
                    for stringContainer0 in dkimTokensContainer {
                        dkimTokensBuffer?.append(stringContainer0)
                    }
                }
                dkimTokens = dkimTokensBuffer
            } else {
                dkimTokens = []
            }
        } else {
            dkimTokens = nil
        }
    }
}

extension VerifyDomainIdentityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        try container.encode("VerifyDomainIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyDomainIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to begin Amazon SES domain verification and to generate the TXT records that you must publish to the DNS server of your domain to complete the verification. For information about domain verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
public struct VerifyDomainIdentityInput: Swift.Equatable {
    /// The domain to be verified.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

struct VerifyDomainIdentityInputBody: Swift.Equatable {
    let domain: Swift.String?
}

extension VerifyDomainIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension VerifyDomainIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyDomainIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyDomainIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyDomainIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VerifyDomainIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.verificationToken = output.verificationToken
        } else {
            self.verificationToken = nil
        }
    }
}

/// Returns a TXT record that you must publish to the DNS server of your domain to complete domain verification with Amazon SES.
public struct VerifyDomainIdentityOutputResponse: Swift.Equatable {
    /// A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES. As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.
    /// This member is required.
    public var verificationToken: Swift.String?

    public init (
        verificationToken: Swift.String? = nil
    )
    {
        self.verificationToken = verificationToken
    }
}

struct VerifyDomainIdentityOutputResponseBody: Swift.Equatable {
    let verificationToken: Swift.String?
}

extension VerifyDomainIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationToken = "VerificationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("VerifyDomainIdentityResult"))
        let verificationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationToken)
        verificationToken = verificationTokenDecoded
    }
}

extension VerifyEmailAddressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailAddress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyEmailAddressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to begin email address verification with Amazon SES. For information about email address verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html).
public struct VerifyEmailAddressInput: Swift.Equatable {
    /// The email address to be verified.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct VerifyEmailAddressInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
}

extension VerifyEmailAddressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
    }
}

extension VerifyEmailAddressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyEmailAddressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyEmailAddressOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyEmailAddressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct VerifyEmailAddressOutputResponse: Swift.Equatable {

    public init () { }
}

extension VerifyEmailIdentityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        try container.encode("VerifyEmailIdentity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension VerifyEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents a request to begin email address verification with Amazon SES. For information about email address verification, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html).
public struct VerifyEmailIdentityInput: Swift.Equatable {
    /// The email address to be verified.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct VerifyEmailIdentityInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
}

extension VerifyEmailIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
    }
}

extension VerifyEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension VerifyEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty element returned on a successful request.
public struct VerifyEmailIdentityOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESClientTypes.WorkmailAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationArn = "OrganizationArn"
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let organizationArn = organizationArn {
            try container.encode(organizationArn, forKey: ClientRuntime.Key("OrganizationArn"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let organizationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationArn)
        organizationArn = organizationArnDecoded
    }
}

extension SESClientTypes {
    /// When included in a receipt rule, this action calls Amazon WorkMail and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS). You will typically not use this action directly because Amazon WorkMail adds the rule automatically during its setup procedure. For information using a receipt rule to call Amazon WorkMail, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-workmail.html).
    public struct WorkmailAction: Swift.Equatable {
        /// The ARN of the Amazon WorkMail organization. An example of an Amazon WorkMail organization ARN is arn:aws:workmail:us-west-2:123456789012:organization/m-68755160c4cb4e29a2b2f8fb58f359d7. For information about Amazon WorkMail organizations, see the [Amazon WorkMail Administrator Guide](https://docs.aws.amazon.com/workmail/latest/adminguide/organizations_overview.html).
        /// This member is required.
        public var organizationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        public var topicArn: Swift.String?

        public init (
            organizationArn: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.organizationArn = organizationArn
            self.topicArn = topicArn
        }
    }

}
