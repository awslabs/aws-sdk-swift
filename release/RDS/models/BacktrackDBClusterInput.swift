// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public struct BacktrackDBClusterInput: Equatable {
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO
    ///             8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia
    ///             page.</a>
    ///          </p>
    ///         <note>
    ///             <p>If the specified time isn't a consistent time for the DB cluster,
    ///                 Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    ///         </note>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must contain a valid ISO 8601 timestamp.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Can't contain a timestamp set in the future.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>2017-07-08T18:00Z</code>
    ///          </p>
    public let backtrackTo: Date?
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is
    ///             stored as a lowercase string.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>my-cluster1</code>
    ///         </p>
    public let dBClusterIdentifier: String?
    /// <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is
    ///             enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    public let force: Bool?
    /// <p>A value that indicates whether to backtrack the DB cluster to the earliest possible
    ///             backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
    ///             backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
    ///             backtrack time, an error occurs.</p>
    public let useEarliestTimeOnPointInTimeUnavailable: Bool?

    public init (
        backtrackTo: Date? = nil,
        dBClusterIdentifier: String? = nil,
        force: Bool? = nil,
        useEarliestTimeOnPointInTimeUnavailable: Bool? = nil
    )
    {
        self.backtrackTo = backtrackTo
        self.dBClusterIdentifier = dBClusterIdentifier
        self.force = force
        self.useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable
    }
}
