// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScalingConfigurationInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoPause = "AutoPause"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case secondsUntilAutoPause = "SecondsUntilAutoPause"
        case timeoutAction = "TimeoutAction"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoPause = autoPause {
            try container.encode(autoPause, forKey: Key("AutoPause"))
        }
        if let maxCapacity = maxCapacity {
            try container.encode(maxCapacity, forKey: Key("MaxCapacity"))
        }
        if let minCapacity = minCapacity {
            try container.encode(minCapacity, forKey: Key("MinCapacity"))
        }
        if let secondsUntilAutoPause = secondsUntilAutoPause {
            try container.encode(secondsUntilAutoPause, forKey: Key("SecondsUntilAutoPause"))
        }
        if let timeoutAction = timeoutAction {
            try container.encode(timeoutAction, forKey: Key("TimeoutAction"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let autoPauseDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoPause)
        autoPause = autoPauseDecoded
        let secondsUntilAutoPauseDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .secondsUntilAutoPause)
        secondsUntilAutoPause = secondsUntilAutoPauseDecoded
        let timeoutActionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeoutAction)
        timeoutAction = timeoutActionDecoded
    }
}
