// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDBProxyInput: Equatable {
    /// <p>The authorization mechanism that the proxy uses.</p>
    public let auth: [UserAuthConfig]?
    /// <p>The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    public let dBProxyName: String?
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs.
    ///         This information helps you to debug issues involving SQL behavior or the performance
    ///         and scalability of the proxy connections. The debug information includes the text of
    ///         SQL statements that you submit through the proxy. Thus, only enable this setting
    ///         when needed for debugging, and only when you have security measures in place to
    ///         safeguard any sensitive information that appears in the logs.</p>
    public let debugLogging: Bool
    /// <p>The kinds of databases that the proxy can connect to.
    ///           This value determines which database network protocol the proxy recognizes when it interprets
    ///         network traffic to and from the database.
    ///         The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
    public let engineFamily: EngineFamily?
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
    ///         value higher or lower than the connection timeout limit for the associated database.</p>
    public let idleClientTimeout: Int?
    /// <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
    ///         By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
    public let requireTLS: Bool
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.</p>
    public let roleArn: String?
    /// <p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p>
    public let tags: [Tag]?
    /// <p>One or more VPC security group IDs to associate with the new proxy.</p>
    public let vpcSecurityGroupIds: [String]?
    /// <p>One or more VPC subnet IDs to associate with the new proxy.</p>
    public let vpcSubnetIds: [String]?

    public init (
        auth: [UserAuthConfig]? = nil,
        dBProxyName: String? = nil,
        debugLogging: Bool = false,
        engineFamily: EngineFamily? = nil,
        idleClientTimeout: Int? = nil,
        requireTLS: Bool = false,
        roleArn: String? = nil,
        tags: [Tag]? = nil,
        vpcSecurityGroupIds: [String]? = nil,
        vpcSubnetIds: [String]? = nil
    )
    {
        self.auth = auth
        self.dBProxyName = dBProxyName
        self.debugLogging = debugLogging
        self.engineFamily = engineFamily
        self.idleClientTimeout = idleClientTimeout
        self.requireTLS = requireTLS
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}
