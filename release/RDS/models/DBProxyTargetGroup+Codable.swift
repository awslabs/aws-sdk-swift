// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DBProxyTargetGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionPoolConfig = "ConnectionPoolConfig"
        case createdDate = "CreatedDate"
        case dBProxyName = "DBProxyName"
        case isDefault = "IsDefault"
        case status = "Status"
        case targetGroupArn = "TargetGroupArn"
        case targetGroupName = "TargetGroupName"
        case updatedDate = "UpdatedDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let connectionPoolConfig = connectionPoolConfig {
            try container.encode(connectionPoolConfig, forKey: Key("ConnectionPoolConfig"))
        }
        if let createdDate = createdDate {
            try container.encode(TimestampWrapper(createdDate, format: .dateTime), forKey: Key("createdDate"))
        }
        if let dBProxyName = dBProxyName {
            try container.encode(dBProxyName, forKey: Key("DBProxyName"))
        }
        if isDefault != false {
            try container.encode(isDefault, forKey: Key("IsDefault"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: Key("TargetGroupArn"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: Key("TargetGroupName"))
        }
        if let updatedDate = updatedDate {
            try container.encode(TimestampWrapper(updatedDate, format: .dateTime), forKey: Key("updatedDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBProxyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dBProxyName)
        dBProxyName = dBProxyNameDecoded
        let targetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupName)
        targetGroupName = targetGroupNameDecoded
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        let isDefaultDecoded = try containerValues.decode(Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let connectionPoolConfigDecoded = try containerValues.decodeIfPresent(ConnectionPoolConfigurationInfo.self, forKey: .connectionPoolConfig)
        connectionPoolConfig = connectionPoolConfigDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdDate)
        var createdDateBuffer:Date? = nil
        if let createdDateDecoded = createdDateDecoded {
            createdDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(createdDateDecoded, format: .dateTime)
        }
        createdDate = createdDateBuffer
        let updatedDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updatedDate)
        var updatedDateBuffer:Date? = nil
        if let updatedDateDecoded = updatedDateDecoded {
            updatedDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(updatedDateDecoded, format: .dateTime)
        }
        updatedDate = updatedDateBuffer
    }
}
