// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p></p>
public struct DescribeDBLogFilesInput: Equatable {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must match the identifier of an existing DBInstance.</p>
    ///             </li>
    ///          </ul>
    public let dBInstanceIdentifier: String?
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    public let fileLastWritten: Int
    /// <p>Filters the available log files for files larger than the specified size.</p>
    public let fileSize: Int
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    public let filenameContains: String?
    /// <p>This parameter isn't currently supported.</p>
    public let filters: [Filter]?
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    public let maxRecords: Int?

    public init (
        dBInstanceIdentifier: String? = nil,
        fileLastWritten: Int = 0,
        fileSize: Int = 0,
        filenameContains: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.dBInstanceIdentifier = dBInstanceIdentifier
        self.fileLastWritten = fileLastWritten
        self.fileSize = fileSize
        self.filenameContains = filenameContains
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}
