// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlobalClusterMember: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dBClusterArn = "DBClusterArn"
        case globalWriteForwardingStatus = "GlobalWriteForwardingStatus"
        case isWriter = "IsWriter"
        case readers = "Readers"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dBClusterArn = dBClusterArn {
            try container.encode(dBClusterArn, forKey: Key("DBClusterArn"))
        }
        if let globalWriteForwardingStatus = globalWriteForwardingStatus {
            try container.encode(globalWriteForwardingStatus, forKey: Key("GlobalWriteForwardingStatus"))
        }
        if isWriter != false {
            try container.encode(isWriter, forKey: Key("IsWriter"))
        }
        if let readers = readers {
            var readersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Readers"))
            for (index0, string0) in readers.enumerated() {
                try readersContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dBClusterArn)
        dBClusterArn = dBClusterArnDecoded
        if containerValues.contains(.readers) {
            struct KeyVal0{struct member{}}
            let readersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .readers)
            if let readersWrappedContainer = readersWrappedContainer {
                let readersContainer = try readersWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var readersBuffer:[String]? = nil
                if let readersContainer = readersContainer {
                    readersBuffer = [String]()
                    for stringContainer0 in readersContainer {
                        readersBuffer?.append(stringContainer0)
                    }
                }
                readers = readersBuffer
            } else {
                readers = []
            }
        } else {
            readers = nil
        }
        let isWriterDecoded = try containerValues.decode(Bool.self, forKey: .isWriter)
        isWriter = isWriterDecoded
        let globalWriteForwardingStatusDecoded = try containerValues.decodeIfPresent(WriteForwardingStatus.self, forKey: .globalWriteForwardingStatus)
        globalWriteForwardingStatus = globalWriteForwardingStatusDecoded
    }
}
