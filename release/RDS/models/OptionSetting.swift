// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.</p>
public struct OptionSetting: Equatable {
    /// <p>The allowed values of the option setting.</p>
    public let allowedValues: String?
    /// <p>The DB engine specific parameter type.</p>
    public let applyType: String?
    /// <p>The data type of the option setting.</p>
    public let dataType: String?
    /// <p>The default value of the option setting.</p>
    public let defaultValue: String?
    /// <p>The description of the option setting.</p>
    public let description: String?
    /// <p>Indicates if the option setting is part of a collection.</p>
    public let isCollection: Bool
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    public let isModifiable: Bool
    /// <p>The name of the option that has settings that you can set.</p>
    public let name: String?
    /// <p>The current value of the option setting.</p>
    public let value: String?

    public init (
        allowedValues: String? = nil,
        applyType: String? = nil,
        dataType: String? = nil,
        defaultValue: String? = nil,
        description: String? = nil,
        isCollection: Bool = false,
        isModifiable: Bool = false,
        name: String? = nil,
        value: String? = nil
    )
    {
        self.allowedValues = allowedValues
        self.applyType = applyType
        self.dataType = dataType
        self.defaultValue = defaultValue
        self.description = description
        self.isCollection = isCollection
        self.isModifiable = isModifiable
        self.name = name
        self.value = value
    }
}
