// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p></p>
public struct CreateEventSubscriptionInput: Equatable {
    /// <p>
    ///           A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
    ///       </p>
    public let enabled: Bool?
    /// <p> A list of event categories for a particular source type (<code>SourceType</code>)
    ///             that you want to subscribe to. You can see a list of the categories for a given source
    ///             type in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the
    ///                 <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation. </p>
    public let eventCategories: [String]?
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    public let snsTopicArn: String?
    /// <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response.
    ///           An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If <code>SourceIds</code> are supplied, <code>SourceType</code> must also be provided.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
    ///             </li>
    ///          </ul>
    public let sourceIds: [String]?
    /// <p>The type of source that is generating the events. For example, if you want to be
    ///             notified of events generated by a DB instance, you set this parameter to
    ///                 <code>db-instance</code>. If this value isn't specified, all events are
    ///             returned.</p>
    ///          <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
    ///          </p>
    public let sourceType: String?
    /// <p>The name of the subscription.</p>
    ///          <p>Constraints: The name must be less than 255 characters.</p>
    public let subscriptionName: String?
    /// <p>A list of tags.
    ///           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
    ///          </p>
    public let tags: [Tag]?

    public init (
        enabled: Bool? = nil,
        eventCategories: [String]? = nil,
        snsTopicArn: String? = nil,
        sourceIds: [String]? = nil,
        sourceType: String? = nil,
        subscriptionName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}
