// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstallationMediaOutputBody: Equatable {
    public let marker: String?
    public let installationMedia: [InstallationMedia]?
}

extension DescribeInstallationMediaOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case installationMedia = "InstallationMedia"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInstallationMediaResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.installationMedia) {
            struct KeyVal0{struct InstallationMedia{}}
            let installationMediaWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.InstallationMedia>.CodingKeys.self, forKey: .installationMedia)
            if let installationMediaWrappedContainer = installationMediaWrappedContainer {
                let installationMediaContainer = try installationMediaWrappedContainer.decodeIfPresent([InstallationMedia].self, forKey: .member)
                var installationMediaBuffer:[InstallationMedia]? = nil
                if let installationMediaContainer = installationMediaContainer {
                    installationMediaBuffer = [InstallationMedia]()
                    for structureContainer0 in installationMediaContainer {
                        installationMediaBuffer?.append(structureContainer0)
                    }
                }
                installationMedia = installationMediaBuffer
            } else {
                installationMedia = []
            }
        } else {
            installationMedia = nil
        }
    }
}
