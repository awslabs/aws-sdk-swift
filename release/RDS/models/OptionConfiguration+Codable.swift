// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OptionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
        case optionName = "OptionName"
        case optionSettings = "OptionSettings"
        case optionVersion = "OptionVersion"
        case port = "Port"
        case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dBSecurityGroupMemberships = dBSecurityGroupMemberships {
            var dBSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("DBSecurityGroupMemberships"))
            for (index0, string0) in dBSecurityGroupMemberships.enumerated() {
                try dBSecurityGroupMembershipsContainer.encode(string0, forKey: Key("DBSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: Key("OptionName"))
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OptionSettings"))
            for (index0, optionsetting0) in optionSettings.enumerated() {
                try optionSettingsContainer.encode(optionsetting0, forKey: Key("OptionSetting.\(index0.advanced(by: 1))"))
            }
        }
        if let optionVersion = optionVersion {
            try container.encode(optionVersion, forKey: Key("OptionVersion"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("Port"))
        }
        if let vpcSecurityGroupMemberships = vpcSecurityGroupMemberships {
            var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("VpcSecurityGroupMemberships"))
            for (index0, string0) in vpcSecurityGroupMemberships.enumerated() {
                try vpcSecurityGroupMembershipsContainer.encode(string0, forKey: Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .optionName)
        optionName = optionNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let optionVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .optionVersion)
        optionVersion = optionVersionDecoded
        if containerValues.contains(.dBSecurityGroupMemberships) {
            struct KeyVal0{struct DBSecurityGroupName{}}
            let dBSecurityGroupMembershipsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBSecurityGroupName>.CodingKeys.self, forKey: .dBSecurityGroupMemberships)
            if let dBSecurityGroupMembershipsWrappedContainer = dBSecurityGroupMembershipsWrappedContainer {
                let dBSecurityGroupMembershipsContainer = try dBSecurityGroupMembershipsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var dBSecurityGroupMembershipsBuffer:[String]? = nil
                if let dBSecurityGroupMembershipsContainer = dBSecurityGroupMembershipsContainer {
                    dBSecurityGroupMembershipsBuffer = [String]()
                    for stringContainer0 in dBSecurityGroupMembershipsContainer {
                        dBSecurityGroupMembershipsBuffer?.append(stringContainer0)
                    }
                }
                dBSecurityGroupMemberships = dBSecurityGroupMembershipsBuffer
            } else {
                dBSecurityGroupMemberships = []
            }
        } else {
            dBSecurityGroupMemberships = nil
        }
        if containerValues.contains(.vpcSecurityGroupMemberships) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupMembershipsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupMemberships)
            if let vpcSecurityGroupMembershipsWrappedContainer = vpcSecurityGroupMembershipsWrappedContainer {
                let vpcSecurityGroupMembershipsContainer = try vpcSecurityGroupMembershipsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var vpcSecurityGroupMembershipsBuffer:[String]? = nil
                if let vpcSecurityGroupMembershipsContainer = vpcSecurityGroupMembershipsContainer {
                    vpcSecurityGroupMembershipsBuffer = [String]()
                    for stringContainer0 in vpcSecurityGroupMembershipsContainer {
                        vpcSecurityGroupMembershipsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupMemberships = vpcSecurityGroupMembershipsBuffer
            } else {
                vpcSecurityGroupMemberships = []
            }
        } else {
            vpcSecurityGroupMemberships = nil
        }
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct OptionSetting{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OptionSetting>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([OptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[OptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [OptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
    }
}
