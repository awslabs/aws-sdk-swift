// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FailoverState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fromDbClusterArn = "FromDbClusterArn"
        case status = "Status"
        case toDbClusterArn = "ToDbClusterArn"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let fromDbClusterArn = fromDbClusterArn {
            try container.encode(fromDbClusterArn, forKey: Key("FromDbClusterArn"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let toDbClusterArn = toDbClusterArn {
            try container.encode(toDbClusterArn, forKey: Key("ToDbClusterArn"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(FailoverStatus.self, forKey: .status)
        status = statusDecoded
        let fromDbClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromDbClusterArn)
        fromDbClusterArn = fromDbClusterArnDecoded
        let toDbClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .toDbClusterArn)
        toDbClusterArn = toDbClusterArnDecoded
    }
}
