// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserAuthConfigInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authScheme = "AuthScheme"
        case description = "Description"
        case iAMAuth = "IAMAuth"
        case secretArn = "SecretArn"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authScheme = authScheme {
            try container.encode(authScheme, forKey: Key("AuthScheme"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let iAMAuth = iAMAuth {
            try container.encode(iAMAuth, forKey: Key("IAMAuth"))
        }
        if let secretArn = secretArn {
            try container.encode(secretArn, forKey: Key("SecretArn"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let authSchemeDecoded = try containerValues.decodeIfPresent(AuthScheme.self, forKey: .authScheme)
        authScheme = authSchemeDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let iAMAuthDecoded = try containerValues.decodeIfPresent(IAMAuthMode.self, forKey: .iAMAuth)
        iAMAuth = iAMAuthDecoded
    }
}
