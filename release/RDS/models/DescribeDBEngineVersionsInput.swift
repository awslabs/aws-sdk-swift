// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeDBEngineVersionsInput: Equatable {
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If supplied, must match an existing DBParameterGroupFamily.</p>
    ///             </li>
    ///          </ul>
    public let dBParameterGroupFamily: String?
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    public let defaultOnly: Bool
    /// <p>The database engine to return.</p>
    ///          <p>Valid Values:
    ///       </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>aurora-postgresql</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mariadb</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mysql</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>oracle-ee</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>oracle-se2</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>oracle-se1</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>oracle-se</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>postgres</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sqlserver-ee</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sqlserver-se</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sqlserver-ex</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sqlserver-web</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let engine: String?
    /// <p>The database engine version to return.</p>
    ///          <p>Example: <code>5.1.49</code>
    ///          </p>
    public let engineVersion: String?
    /// <p>This parameter isn't currently supported.</p>
    public let filters: [Filter]?
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    public let includeAll: Bool?
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    ///          <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>,
    ///           the response includes a list of supported character sets for each engine version.
    ///       </p>
    public let listSupportedCharacterSets: Bool?
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    ///         <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>,
    ///             the response includes a list of supported time zones for each engine version.
    ///         </p>
    public let listSupportedTimezones: Bool?
    /// <p>
    ///         An optional pagination token provided by a previous request.
    ///         If this parameter is specified, the response includes
    ///         only records beyond the marker,
    ///         up to the value specified by <code>MaxRecords</code>.
    ///     </p>
    public let marker: String?
    /// <p>
    ///     The maximum number of records to include in the response.
    ///     If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
    ///     included in the response so you can retrieve the remaining results.
    ///     </p>
    ///          <p>Default: 100</p>
    ///          <p>Constraints: Minimum 20, maximum 100.</p>
    public let maxRecords: Int?

    public init (
        dBParameterGroupFamily: String? = nil,
        defaultOnly: Bool = false,
        engine: String? = nil,
        engineVersion: String? = nil,
        filters: [Filter]? = nil,
        includeAll: Bool? = nil,
        listSupportedCharacterSets: Bool? = nil,
        listSupportedTimezones: Bool? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.dBParameterGroupFamily = dBParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.filters = filters
        self.includeAll = includeAll
        self.listSupportedCharacterSets = listSupportedCharacterSets
        self.listSupportedTimezones = listSupportedTimezones
        self.marker = marker
        self.maxRecords = maxRecords
    }
}
