// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteInstallationMediaOutputBody: Equatable {
    public let installationMediaId: String?
    public let customAvailabilityZoneId: String?
    public let engine: String?
    public let engineVersion: String?
    public let engineInstallationMediaPath: String?
    public let oSInstallationMediaPath: String?
    public let status: String?
    public let failureCause: InstallationMediaFailureCause?
}

extension DeleteInstallationMediaOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customAvailabilityZoneId = "CustomAvailabilityZoneId"
        case engine = "Engine"
        case engineInstallationMediaPath = "EngineInstallationMediaPath"
        case engineVersion = "EngineVersion"
        case failureCause = "FailureCause"
        case installationMediaId = "InstallationMediaId"
        case oSInstallationMediaPath = "OSInstallationMediaPath"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DeleteInstallationMediaResult"))
        let installationMediaIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .installationMediaId)
        installationMediaId = installationMediaIdDecoded
        let customAvailabilityZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customAvailabilityZoneId)
        customAvailabilityZoneId = customAvailabilityZoneIdDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineInstallationMediaPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineInstallationMediaPath)
        engineInstallationMediaPath = engineInstallationMediaPathDecoded
        let oSInstallationMediaPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .oSInstallationMediaPath)
        oSInstallationMediaPath = oSInstallationMediaPathDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let failureCauseDecoded = try containerValues.decodeIfPresent(InstallationMediaFailureCause.self, forKey: .failureCause)
        failureCause = failureCauseDecoded
    }
}
