// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
public struct ConnectionPoolConfiguration: Equatable {
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the
    ///         proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    ///          <p>Default: 120</p>
    ///          <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
    public let connectionBorrowTimeout: Int?
    /// <p>
    ///         One or more SQL statements for the proxy to run when opening each new database connection.
    ///         Typically used with <code>SET</code> statements to make sure that each connection has identical
    ///         settings such as time zone and character set. For multiple statements, use semicolons as the separator.
    ///         You can also include multiple variables in a single <code>SET</code> statement, such as
    ///         <code>SET x=1, y=2</code>.
    ///       </p>
    ///          <p>Default: no initialization query</p>
    public let initQuery: String?
    /// <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the
    ///         <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    ///          <p>Default: 100</p>
    ///          <p>Constraints: between 1 and 100</p>
    public let maxConnectionsPercent: Int?
    /// <p>
    ///         Controls how actively the proxy closes idle database connections in the connection pool.
    ///         A high value enables the proxy to leave a high percentage of idle connections open.
    ///         A low value causes the proxy to close idle client connections and return the underlying
    ///         database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the
    ///         <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.
    ///       </p>
    ///          <p>Default: 50</p>
    ///          <p>Constraints: between 0 and <code>MaxConnectionsPercent</code>
    ///          </p>
    public let maxIdleConnectionsPercent: Int?
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements
    ///         in a session using a proxy to be pinned to the same underlying database connection. Including an item
    ///         in the list exempts that class of SQL operations from the pinning behavior.</p>
    ///          <p>Default: no session pinning filters</p>
    public let sessionPinningFilters: [String]?

    public init (
        connectionBorrowTimeout: Int? = nil,
        initQuery: String? = nil,
        maxConnectionsPercent: Int? = nil,
        maxIdleConnectionsPercent: Int? = nil,
        sessionPinningFilters: [String]? = nil
    )
    {
        self.connectionBorrowTimeout = connectionBorrowTimeout
        self.initQuery = initQuery
        self.maxConnectionsPercent = maxConnectionsPercent
        self.maxIdleConnectionsPercent = maxIdleConnectionsPercent
        self.sessionPinningFilters = sessionPinningFilters
    }
}
