// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExportTasksOutputBody: Equatable {
    public let marker: String?
    public let exportTasks: [ExportTask]?
}

extension DescribeExportTasksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportTasks = "ExportTasks"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeExportTasksResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.exportTasks) {
            struct KeyVal0{struct ExportTask{}}
            let exportTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ExportTask>.CodingKeys.self, forKey: .exportTasks)
            if let exportTasksWrappedContainer = exportTasksWrappedContainer {
                let exportTasksContainer = try exportTasksWrappedContainer.decodeIfPresent([ExportTask].self, forKey: .member)
                var exportTasksBuffer:[ExportTask]? = nil
                if let exportTasksContainer = exportTasksContainer {
                    exportTasksBuffer = [ExportTask]()
                    for structureContainer0 in exportTasksContainer {
                        exportTasksBuffer?.append(structureContainer0)
                    }
                }
                exportTasks = exportTasksBuffer
            } else {
                exportTasks = []
            }
        } else {
            exportTasks = nil
        }
    }
}
