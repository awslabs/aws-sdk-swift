// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstallationMedia: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customAvailabilityZoneId = "CustomAvailabilityZoneId"
        case engine = "Engine"
        case engineInstallationMediaPath = "EngineInstallationMediaPath"
        case engineVersion = "EngineVersion"
        case failureCause = "FailureCause"
        case installationMediaId = "InstallationMediaId"
        case oSInstallationMediaPath = "OSInstallationMediaPath"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customAvailabilityZoneId = customAvailabilityZoneId {
            try container.encode(customAvailabilityZoneId, forKey: Key("CustomAvailabilityZoneId"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineInstallationMediaPath = engineInstallationMediaPath {
            try container.encode(engineInstallationMediaPath, forKey: Key("EngineInstallationMediaPath"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let failureCause = failureCause {
            try container.encode(failureCause, forKey: Key("FailureCause"))
        }
        if let installationMediaId = installationMediaId {
            try container.encode(installationMediaId, forKey: Key("InstallationMediaId"))
        }
        if let oSInstallationMediaPath = oSInstallationMediaPath {
            try container.encode(oSInstallationMediaPath, forKey: Key("OSInstallationMediaPath"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let installationMediaIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .installationMediaId)
        installationMediaId = installationMediaIdDecoded
        let customAvailabilityZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customAvailabilityZoneId)
        customAvailabilityZoneId = customAvailabilityZoneIdDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineInstallationMediaPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineInstallationMediaPath)
        engineInstallationMediaPath = engineInstallationMediaPathDecoded
        let oSInstallationMediaPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .oSInstallationMediaPath)
        oSInstallationMediaPath = oSInstallationMediaPathDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let failureCauseDecoded = try containerValues.decodeIfPresent(InstallationMediaFailureCause.self, forKey: .failureCause)
        failureCause = failureCauseDecoded
    }
}
