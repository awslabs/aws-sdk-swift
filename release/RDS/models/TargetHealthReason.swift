// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TargetHealthReason {
    case authFailure
    case connectionFailed
    case invalidReplicationState
    case pendingProxyCapacity
    case unreachable
    case sdkUnknown(String)
}

extension TargetHealthReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetHealthReason] {
        return [
            .authFailure,
            .connectionFailed,
            .invalidReplicationState,
            .pendingProxyCapacity,
            .unreachable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .authFailure: return "AUTH_FAILURE"
        case .connectionFailed: return "CONNECTION_FAILED"
        case .invalidReplicationState: return "INVALID_REPLICATION_STATE"
        case .pendingProxyCapacity: return "PENDING_PROXY_CAPACITY"
        case .unreachable: return "UNREACHABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetHealthReason(rawValue: rawValue) ?? TargetHealthReason.sdkUnknown(rawValue)
    }
}
