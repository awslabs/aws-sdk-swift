// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p></p>
public struct DescribeDBClusterBacktracksInput: Equatable {
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be
    ///             described.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must contain a valid universally unique identifier (UUID). For more
    ///                     information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier
    ///                         (UUID) URN Namespace</a>.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code>
    ///         </p>
    public let backtrackIdentifier: String?
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is
    ///             stored as a lowercase string.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>my-cluster1</code>
    ///         </p>
    public let dBClusterIdentifier: String?
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters
    ///             include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                     <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The
    ///                     results list includes information about only the backtracks identified by these
    ///                     identifiers.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    ///                 <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>applying</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>completed</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>failed</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>pending</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                 <p>The results list includes information about only the backtracks identified
    ///                     by these values.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p> An optional pagination token provided by a previous
    ///             <code>DescribeDBClusterBacktracks</code> request.
    ///             If this parameter is specified, the response includes
    ///             only records beyond the marker,
    ///             up to the value specified by <code>MaxRecords</code>.
    ///         </p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response.
    ///             If more records exist than the specified <code>MaxRecords</code> value,
    ///             a pagination token called a marker is included in the response so you can retrieve the remaining results.
    ///         </p>
    ///         <p>Default: 100</p>
    ///         <p>Constraints: Minimum 20, maximum 100.</p>
    public let maxRecords: Int?

    public init (
        backtrackIdentifier: String? = nil,
        dBClusterIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.backtrackIdentifier = backtrackIdentifier
        self.dBClusterIdentifier = dBClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}
