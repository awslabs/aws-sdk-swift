// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountQuota: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountQuotaName = "AccountQuotaName"
        case max = "Max"
        case used = "Used"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let accountQuotaName = accountQuotaName {
            try container.encode(accountQuotaName, forKey: Key("AccountQuotaName"))
        }
        if max != 0 {
            try container.encode(max, forKey: Key("Max"))
        }
        if used != 0 {
            try container.encode(used, forKey: Key("Used"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountQuotaNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountQuotaName)
        accountQuotaName = accountQuotaNameDecoded
        let usedDecoded = try containerValues.decode(Int.self, forKey: .used)
        used = usedDecoded
        let maxDecoded = try containerValues.decode(Int.self, forKey: .max)
        max = maxDecoded
    }
}
