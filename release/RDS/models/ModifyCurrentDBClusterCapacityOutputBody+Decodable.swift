// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyCurrentDBClusterCapacityOutputBody: Equatable {
    public let dBClusterIdentifier: String?
    public let pendingCapacity: Int?
    public let currentCapacity: Int?
    public let secondsBeforeTimeout: Int?
    public let timeoutAction: String?
}

extension ModifyCurrentDBClusterCapacityOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case currentCapacity = "CurrentCapacity"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case pendingCapacity = "PendingCapacity"
        case secondsBeforeTimeout = "SecondsBeforeTimeout"
        case timeoutAction = "TimeoutAction"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyCurrentDBClusterCapacityResult"))
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let pendingCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .pendingCapacity)
        pendingCapacity = pendingCapacityDecoded
        let currentCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentCapacity)
        currentCapacity = currentCapacityDecoded
        let secondsBeforeTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .secondsBeforeTimeout)
        secondsBeforeTimeout = secondsBeforeTimeoutDecoded
        let timeoutActionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeoutAction)
        timeoutAction = timeoutActionDecoded
    }
}
