// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DBProxyTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endpoint = "Endpoint"
        case port = "Port"
        case rdsResourceId = "RdsResourceId"
        case role = "Role"
        case targetArn = "TargetArn"
        case targetHealth = "TargetHealth"
        case trackedClusterId = "TrackedClusterId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: Key("Endpoint"))
        }
        if port != 0 {
            try container.encode(port, forKey: Key("Port"))
        }
        if let rdsResourceId = rdsResourceId {
            try container.encode(rdsResourceId, forKey: Key("RdsResourceId"))
        }
        if let role = role {
            try container.encode(role, forKey: Key("Role"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: Key("TargetArn"))
        }
        if let targetHealth = targetHealth {
            try container.encode(targetHealth, forKey: Key("TargetHealth"))
        }
        if let trackedClusterId = trackedClusterId {
            try container.encode(trackedClusterId, forKey: Key("TrackedClusterId"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let trackedClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trackedClusterId)
        trackedClusterId = trackedClusterIdDecoded
        let rdsResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rdsResourceId)
        rdsResourceId = rdsResourceIdDecoded
        let portDecoded = try containerValues.decode(Int.self, forKey: .port)
        port = portDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TargetType.self, forKey: .type)
        type = typeDecoded
        let roleDecoded = try containerValues.decodeIfPresent(TargetRole.self, forKey: .role)
        role = roleDecoded
        let targetHealthDecoded = try containerValues.decodeIfPresent(TargetHealth.self, forKey: .targetHealth)
        targetHealth = targetHealthDecoded
    }
}
