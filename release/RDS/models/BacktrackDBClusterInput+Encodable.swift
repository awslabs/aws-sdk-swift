// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BacktrackDBClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let backtrackTo = backtrackTo {
            try container.encode(TimestampWrapper(backtrackTo, format: .dateTime), forKey: Key("backtrackTo"))
        }
        if let dBClusterIdentifier = dBClusterIdentifier {
            try container.encode(dBClusterIdentifier, forKey: Key("DBClusterIdentifier"))
        }
        if let force = force {
            try container.encode(force, forKey: Key("Force"))
        }
        if let useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable {
            try container.encode(useEarliestTimeOnPointInTimeUnavailable, forKey: Key("UseEarliestTimeOnPointInTimeUnavailable"))
        }
        try container.encode("BacktrackDBCluster", forKey:Key("Action"))
        try container.encode("2014-10-31", forKey:Key("Version"))
    }
}
