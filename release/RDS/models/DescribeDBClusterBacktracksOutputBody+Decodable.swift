// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBClusterBacktracksOutputBody: Equatable {
    public let marker: String?
    public let dBClusterBacktracks: [DBClusterBacktrack]?
}

extension DescribeDBClusterBacktracksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dBClusterBacktracks = "DBClusterBacktracks"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeDBClusterBacktracksResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.dBClusterBacktracks) {
            struct KeyVal0{struct DBClusterBacktrack{}}
            let dBClusterBacktracksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBClusterBacktrack>.CodingKeys.self, forKey: .dBClusterBacktracks)
            if let dBClusterBacktracksWrappedContainer = dBClusterBacktracksWrappedContainer {
                let dBClusterBacktracksContainer = try dBClusterBacktracksWrappedContainer.decodeIfPresent([DBClusterBacktrack].self, forKey: .member)
                var dBClusterBacktracksBuffer:[DBClusterBacktrack]? = nil
                if let dBClusterBacktracksContainer = dBClusterBacktracksContainer {
                    dBClusterBacktracksBuffer = [DBClusterBacktrack]()
                    for structureContainer0 in dBClusterBacktracksContainer {
                        dBClusterBacktracksBuffer?.append(structureContainer0)
                    }
                }
                dBClusterBacktracks = dBClusterBacktracksBuffer
            } else {
                dBClusterBacktracks = []
            }
        } else {
            dBClusterBacktracks = nil
        }
    }
}
