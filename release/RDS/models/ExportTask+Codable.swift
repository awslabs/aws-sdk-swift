// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExportTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exportOnly = "ExportOnly"
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case failureCause = "FailureCause"
        case iamRoleArn = "IamRoleArn"
        case kmsKeyId = "KmsKeyId"
        case percentProgress = "PercentProgress"
        case s3Bucket = "S3Bucket"
        case s3Prefix = "S3Prefix"
        case snapshotTime = "SnapshotTime"
        case sourceArn = "SourceArn"
        case status = "Status"
        case taskEndTime = "TaskEndTime"
        case taskStartTime = "TaskStartTime"
        case totalExtractedDataInGB = "TotalExtractedDataInGB"
        case warningMessage = "WarningMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let exportOnly = exportOnly {
            var exportOnlyContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExportOnly"))
            for (index0, string0) in exportOnly.enumerated() {
                try exportOnlyContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: Key("ExportTaskIdentifier"))
        }
        if let failureCause = failureCause {
            try container.encode(failureCause, forKey: Key("FailureCause"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: Key("IamRoleArn"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if percentProgress != 0 {
            try container.encode(percentProgress, forKey: Key("PercentProgress"))
        }
        if let s3Bucket = s3Bucket {
            try container.encode(s3Bucket, forKey: Key("S3Bucket"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: Key("S3Prefix"))
        }
        if let snapshotTime = snapshotTime {
            try container.encode(TimestampWrapper(snapshotTime, format: .dateTime), forKey: Key("snapshotTime"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: Key("SourceArn"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let taskEndTime = taskEndTime {
            try container.encode(TimestampWrapper(taskEndTime, format: .dateTime), forKey: Key("taskEndTime"))
        }
        if let taskStartTime = taskStartTime {
            try container.encode(TimestampWrapper(taskStartTime, format: .dateTime), forKey: Key("taskStartTime"))
        }
        if totalExtractedDataInGB != 0 {
            try container.encode(totalExtractedDataInGB, forKey: Key("TotalExtractedDataInGB"))
        }
        if let warningMessage = warningMessage {
            try container.encode(warningMessage, forKey: Key("WarningMessage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportTaskIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportTaskIdentifier)
        exportTaskIdentifier = exportTaskIdentifierDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        if containerValues.contains(.exportOnly) {
            struct KeyVal0{struct member{}}
            let exportOnlyWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .exportOnly)
            if let exportOnlyWrappedContainer = exportOnlyWrappedContainer {
                let exportOnlyContainer = try exportOnlyWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var exportOnlyBuffer:[String]? = nil
                if let exportOnlyContainer = exportOnlyContainer {
                    exportOnlyBuffer = [String]()
                    for stringContainer0 in exportOnlyContainer {
                        exportOnlyBuffer?.append(stringContainer0)
                    }
                }
                exportOnly = exportOnlyBuffer
            } else {
                exportOnly = []
            }
        } else {
            exportOnly = nil
        }
        let snapshotTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotTime)
        var snapshotTimeBuffer:Date? = nil
        if let snapshotTimeDecoded = snapshotTimeDecoded {
            snapshotTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(snapshotTimeDecoded, format: .dateTime)
        }
        snapshotTime = snapshotTimeBuffer
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskStartTime)
        var taskStartTimeBuffer:Date? = nil
        if let taskStartTimeDecoded = taskStartTimeDecoded {
            taskStartTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(taskStartTimeDecoded, format: .dateTime)
        }
        taskStartTime = taskStartTimeBuffer
        let taskEndTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskEndTime)
        var taskEndTimeBuffer:Date? = nil
        if let taskEndTimeDecoded = taskEndTimeDecoded {
            taskEndTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(taskEndTimeDecoded, format: .dateTime)
        }
        taskEndTime = taskEndTimeBuffer
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let percentProgressDecoded = try containerValues.decode(Int.self, forKey: .percentProgress)
        percentProgress = percentProgressDecoded
        let totalExtractedDataInGBDecoded = try containerValues.decode(Int.self, forKey: .totalExtractedDataInGB)
        totalExtractedDataInGB = totalExtractedDataInGBDecoded
        let failureCauseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureCause)
        failureCause = failureCauseDecoded
        let warningMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .warningMessage)
        warningMessage = warningMessageDecoded
    }
}
