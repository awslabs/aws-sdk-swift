// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidDBInstanceModificationsMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case storage = "Storage"
        case validProcessorFeatures = "ValidProcessorFeatures"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let storage = storage {
            var storageContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Storage"))
            for (index0, validstorageoptions0) in storage.enumerated() {
                try storageContainer.encode(validstorageoptions0, forKey: Key("ValidStorageOptions.\(index0.advanced(by: 1))"))
            }
        }
        if let validProcessorFeatures = validProcessorFeatures {
            var validProcessorFeaturesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ValidProcessorFeatures"))
            for (index0, availableprocessorfeature0) in validProcessorFeatures.enumerated() {
                try validProcessorFeaturesContainer.encode(availableprocessorfeature0, forKey: Key("AvailableProcessorFeature.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.storage) {
            struct KeyVal0{struct ValidStorageOptions{}}
            let storageWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ValidStorageOptions>.CodingKeys.self, forKey: .storage)
            if let storageWrappedContainer = storageWrappedContainer {
                let storageContainer = try storageWrappedContainer.decodeIfPresent([ValidStorageOptions].self, forKey: .member)
                var storageBuffer:[ValidStorageOptions]? = nil
                if let storageContainer = storageContainer {
                    storageBuffer = [ValidStorageOptions]()
                    for structureContainer0 in storageContainer {
                        storageBuffer?.append(structureContainer0)
                    }
                }
                storage = storageBuffer
            } else {
                storage = []
            }
        } else {
            storage = nil
        }
        if containerValues.contains(.validProcessorFeatures) {
            struct KeyVal0{struct AvailableProcessorFeature{}}
            let validProcessorFeaturesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailableProcessorFeature>.CodingKeys.self, forKey: .validProcessorFeatures)
            if let validProcessorFeaturesWrappedContainer = validProcessorFeaturesWrappedContainer {
                let validProcessorFeaturesContainer = try validProcessorFeaturesWrappedContainer.decodeIfPresent([AvailableProcessorFeature].self, forKey: .member)
                var validProcessorFeaturesBuffer:[AvailableProcessorFeature]? = nil
                if let validProcessorFeaturesContainer = validProcessorFeaturesContainer {
                    validProcessorFeaturesBuffer = [AvailableProcessorFeature]()
                    for structureContainer0 in validProcessorFeaturesContainer {
                        validProcessorFeaturesBuffer?.append(structureContainer0)
                    }
                }
                validProcessorFeatures = validProcessorFeaturesBuffer
            } else {
                validProcessorFeatures = []
            }
        } else {
            validProcessorFeatures = nil
        }
    }
}
