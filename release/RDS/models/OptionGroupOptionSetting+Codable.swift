// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OptionGroupOptionSetting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues = "AllowedValues"
        case applyType = "ApplyType"
        case defaultValue = "DefaultValue"
        case isModifiable = "IsModifiable"
        case isRequired = "IsRequired"
        case minimumEngineVersionPerAllowedValue = "MinimumEngineVersionPerAllowedValue"
        case settingDescription = "SettingDescription"
        case settingName = "SettingName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: Key("AllowedValues"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: Key("ApplyType"))
        }
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: Key("DefaultValue"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: Key("IsModifiable"))
        }
        if isRequired != false {
            try container.encode(isRequired, forKey: Key("IsRequired"))
        }
        if let minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue {
            var minimumEngineVersionPerAllowedValueContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MinimumEngineVersionPerAllowedValue"))
            for (index0, minimumengineversionperallowedvalue0) in minimumEngineVersionPerAllowedValue.enumerated() {
                try minimumEngineVersionPerAllowedValueContainer.encode(minimumengineversionperallowedvalue0, forKey: Key("MinimumEngineVersionPerAllowedValue.\(index0.advanced(by: 1))"))
            }
        }
        if let settingDescription = settingDescription {
            try container.encode(settingDescription, forKey: Key("SettingDescription"))
        }
        if let settingName = settingName {
            try container.encode(settingName, forKey: Key("SettingName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let settingNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .settingName)
        settingName = settingNameDecoded
        let settingDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .settingDescription)
        settingDescription = settingDescriptionDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let applyTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applyType)
        applyType = applyTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let isRequiredDecoded = try containerValues.decode(Bool.self, forKey: .isRequired)
        isRequired = isRequiredDecoded
        if containerValues.contains(.minimumEngineVersionPerAllowedValue) {
            struct KeyVal0{struct MinimumEngineVersionPerAllowedValue{}}
            let minimumEngineVersionPerAllowedValueWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MinimumEngineVersionPerAllowedValue>.CodingKeys.self, forKey: .minimumEngineVersionPerAllowedValue)
            if let minimumEngineVersionPerAllowedValueWrappedContainer = minimumEngineVersionPerAllowedValueWrappedContainer {
                let minimumEngineVersionPerAllowedValueContainer = try minimumEngineVersionPerAllowedValueWrappedContainer.decodeIfPresent([MinimumEngineVersionPerAllowedValue].self, forKey: .member)
                var minimumEngineVersionPerAllowedValueBuffer:[MinimumEngineVersionPerAllowedValue]? = nil
                if let minimumEngineVersionPerAllowedValueContainer = minimumEngineVersionPerAllowedValueContainer {
                    minimumEngineVersionPerAllowedValueBuffer = [MinimumEngineVersionPerAllowedValue]()
                    for structureContainer0 in minimumEngineVersionPerAllowedValueContainer {
                        minimumEngineVersionPerAllowedValueBuffer?.append(structureContainer0)
                    }
                }
                minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValueBuffer
            } else {
                minimumEngineVersionPerAllowedValue = []
            }
        } else {
            minimumEngineVersionPerAllowedValue = nil
        }
    }
}
