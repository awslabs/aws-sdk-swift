// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBSnapshotsOutputBody: Equatable {
    public let marker: String?
    public let dBSnapshots: [DBSnapshot]?
}

extension DescribeDBSnapshotsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dBSnapshots = "DBSnapshots"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeDBSnapshotsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.dBSnapshots) {
            struct KeyVal0{struct DBSnapshot{}}
            let dBSnapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBSnapshot>.CodingKeys.self, forKey: .dBSnapshots)
            if let dBSnapshotsWrappedContainer = dBSnapshotsWrappedContainer {
                let dBSnapshotsContainer = try dBSnapshotsWrappedContainer.decodeIfPresent([DBSnapshot].self, forKey: .member)
                var dBSnapshotsBuffer:[DBSnapshot]? = nil
                if let dBSnapshotsContainer = dBSnapshotsContainer {
                    dBSnapshotsBuffer = [DBSnapshot]()
                    for structureContainer0 in dBSnapshotsContainer {
                        dBSnapshotsBuffer?.append(structureContainer0)
                    }
                }
                dBSnapshots = dBSnapshotsBuffer
            } else {
                dBSnapshots = []
            }
        } else {
            dBSnapshots = nil
        }
    }
}
