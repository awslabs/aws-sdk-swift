// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDBProxyTargetsOutputBody: Equatable {
    public let dBProxyTargets: [DBProxyTarget]?
}

extension RegisterDBProxyTargetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dBProxyTargets = "DBProxyTargets"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("RegisterDBProxyTargetsResult"))
        if containerValues.contains(.dBProxyTargets) {
            struct KeyVal0{struct member{}}
            let dBProxyTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dBProxyTargets)
            if let dBProxyTargetsWrappedContainer = dBProxyTargetsWrappedContainer {
                let dBProxyTargetsContainer = try dBProxyTargetsWrappedContainer.decodeIfPresent([DBProxyTarget].self, forKey: .member)
                var dBProxyTargetsBuffer:[DBProxyTarget]? = nil
                if let dBProxyTargetsContainer = dBProxyTargetsContainer {
                    dBProxyTargetsBuffer = [DBProxyTarget]()
                    for structureContainer0 in dBProxyTargetsContainer {
                        dBProxyTargetsBuffer?.append(structureContainer0)
                    }
                }
                dBProxyTargets = dBProxyTargetsBuffer
            } else {
                dBProxyTargets = []
            }
        } else {
            dBProxyTargets = nil
        }
    }
}
