// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MinimumEngineVersionPerAllowedValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValue = "AllowedValue"
        case minimumEngineVersion = "MinimumEngineVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValue = allowedValue {
            try container.encode(allowedValue, forKey: Key("AllowedValue"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: Key("MinimumEngineVersion"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValue)
        allowedValue = allowedValueDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
    }
}
