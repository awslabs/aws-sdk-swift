// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The version of the database engine that a DB instance can be upgraded to.</p>
public struct UpgradeTarget: Equatable {
    /// <p>A value that indicates whether the target version is applied to any source DB instances that have <code>AutoMinorVersionUpgrade</code> set to true.</p>
    public let autoUpgrade: Bool
    /// <p>The version of the database engine that a DB instance can be upgraded to.</p>
    public let description: String?
    /// <p>The name of the upgrade target database engine.</p>
    public let engine: String?
    /// <p>The version number of the upgrade target database engine.</p>
    public let engineVersion: String?
    /// <p>A value that indicates whether upgrading to the target version requires upgrading the major version of the database engine.</p>
    public let isMajorVersionUpgrade: Bool
    /// <p>A list of the supported DB engine modes for the target engine version.</p>
    public let supportedEngineModes: [String]?
    /// <p>A value that indicates whether you can use Aurora global databases with the target engine version.</p>
    public let supportsGlobalDatabases: Bool?
    /// <p>A value that indicates whether you can use Aurora parallel query with the target engine version.</p>
    public let supportsParallelQuery: Bool?

    public init (
        autoUpgrade: Bool = false,
        description: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        isMajorVersionUpgrade: Bool = false,
        supportedEngineModes: [String]? = nil,
        supportsGlobalDatabases: Bool? = nil,
        supportsParallelQuery: Bool? = nil
    )
    {
        self.autoUpgrade = autoUpgrade
        self.description = description
        self.engine = engine
        self.engineVersion = engineVersion
        self.isMajorVersionUpgrade = isMajorVersionUpgrade
        self.supportedEngineModes = supportedEngineModes
        self.supportsGlobalDatabases = supportsGlobalDatabases
        self.supportsParallelQuery = supportsParallelQuery
    }
}
