// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectDocumentTextOutputBody: Equatable {
    public let documentMetadata: DocumentMetadata?
    public let blocks: [Block]?
    public let detectDocumentTextModelVersion: String?
}

extension DetectDocumentTextOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blocks = "Blocks"
        case detectDocumentTextModelVersion = "DetectDocumentTextModelVersion"
        case documentMetadata = "DocumentMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let blocksContainer = try containerValues.decodeIfPresent([Block].self, forKey: .blocks)
        var blocksDecoded0:[Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [Block]()
            for structure0 in blocksContainer {
                blocksDecoded0?.append(structure0)
            }
        }
        blocks = blocksDecoded0
        let detectDocumentTextModelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detectDocumentTextModelVersion)
        detectDocumentTextModelVersion = detectDocumentTextModelVersionDecoded
    }
}
