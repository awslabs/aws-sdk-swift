// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A <code>Block</code> represents items that are recognized in a document within a group
///          of pixels close to each other. The information returned in a <code>Block</code> object
///          depends on the type of operation. In text detection for documents (for example <a>DetectDocumentText</a>), you get information about the detected words and lines
///          of text. In text analysis (for example <a>AnalyzeDocument</a>), you can also get
///          information about the fields, tables, and selection elements that are detected in the
///          document.</p>
///          <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous
///          operations. In synchronous operations, such as <a>DetectDocumentText</a>, the
///          array of <code>Block</code> objects is the entire set of results. In asynchronous
///          operations, such as <a>GetDocumentAnalysis</a>, the array is returned over one
///          or more responses.</p>
///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html">How Amazon Textract Works</a>.</p>
public struct Block: Equatable {
    /// <p>The type of text item that's recognized. In operations for text detection, the following
    ///          types are returned:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects
    ///                that are detected on a document page.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>WORD</i> - A word detected on a document page. A word is one or
    ///                more ISO basic Latin script characters that aren't separated by spaces.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>LINE</i> - A string of tab-delimited, contiguous words that are
    ///                detected on a document page.</p>
    ///             </li>
    ///          </ul>
    ///          <p>In text analysis operations, the following types are returned:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>PAGE</i> - Contains a list of child <code>Block</code> objects
    ///                that are detected on a document page.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code>
    ///                objects for linked text that's detected on a document page. Use the
    ///                   <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY
    ///                   <code>Block</code> object or a VALUE <code>Block</code> object. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>WORD</i> - A word that's detected on a document page. A word is
    ///                one or more ISO basic Latin script characters that aren't separated by spaces.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>LINE</i> - A string of tab-delimited, contiguous words that are
    ///                detected on a document page.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>TABLE</i> - A table that's detected on a document page. A table
    ///                is grid-based information with two or more rows or columns, with a cell span of one
    ///                row and one column each. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>CELL</i> - A cell within a detected table. The cell is the parent
    ///                of the block that contains the text in the cell.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>SELECTION_ELEMENT</i> - A selection element such as an option
    ///                button (radio button) or a check box that's detected on a document page. Use the
    ///                value of <code>SelectionStatus</code> to determine the status of the selection
    ///                element.</p>
    ///             </li>
    ///          </ul>
    public let blockType: BlockType?
    /// <p>The column in which a table cell appears. The first column position is 1.
    ///             <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and
    ///             <code>GetDocumentTextDetection</code>.</p>
    public let columnIndex: Int?
    /// <p>The number of columns that a table cell spans. Currently this value is always 1, even
    ///          if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by
    ///             <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>
    public let columnSpan: Int?
    /// <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and
    ///          the accuracy of the geometry points around the recognized text.</p>
    public let confidence: Float?
    /// <p>The type of entity. The following can be returned:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>KEY</i> - An identifier for a field on the document.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>VALUE</i> - The field text.</p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and
    ///             <code>GetDocumentTextDetection</code>.</p>
    public let entityTypes: [EntityType]?
    /// <p>The location of the recognized text on the image. It includes an axis-aligned, coarse
    ///          bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial
    ///          information. </p>
    public let geometry: Geometry?
    /// <p>The identifier for the recognized text. The identifier is only unique for a single
    ///          operation. </p>
    public let id: String?
    /// <p>The page on which a block was detected. <code>Page</code> is returned by asynchronous
    ///          operations. Page values greater than 1 are only returned for multipage documents that are
    ///          in PDF format. A scanned image (JPEG/PNG), even if it contains multiple document pages, is
    ///          considered to be a single-page document. The value of <code>Page</code> is always 1.
    ///          Synchronous operations don't return <code>Page</code> because every input document is
    ///          considered to be a single-page document.</p>
    public let page: Int?
    /// <p>A list of child blocks of the current block. For example, a LINE object has child blocks
    ///          for each WORD block that's part of the line of text. There aren't Relationship objects in
    ///          the list for relationships that don't exist, such as when the current block has no child
    ///          blocks. The list size can be the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>0 - The block has no child blocks.</p>
    ///             </li>
    ///             <li>
    ///                <p>1 - The block has child blocks.</p>
    ///             </li>
    ///          </ul>
    public let relationships: [Relationship]?
    /// <p>The row in which a table cell is located. The first row position is 1.
    ///             <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and
    ///             <code>GetDocumentTextDetection</code>.</p>
    public let rowIndex: Int?
    /// <p>The number of rows that a table cell spans. Currently this value is always 1, even
    ///          if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by
    ///             <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    public let rowSpan: Int?
    /// <p>The selection status of a selection element, such as an option button or check box. </p>
    public let selectionStatus: SelectionStatus?
    /// <p>The word or line of text that's recognized by Amazon Textract. </p>
    public let text: String?
    /// <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>
    public let textType: TextType?

    public init (
        blockType: BlockType? = nil,
        columnIndex: Int? = nil,
        columnSpan: Int? = nil,
        confidence: Float? = nil,
        entityTypes: [EntityType]? = nil,
        geometry: Geometry? = nil,
        id: String? = nil,
        page: Int? = nil,
        relationships: [Relationship]? = nil,
        rowIndex: Int? = nil,
        rowSpan: Int? = nil,
        selectionStatus: SelectionStatus? = nil,
        text: String? = nil,
        textType: TextType? = nil
    )
    {
        self.blockType = blockType
        self.columnIndex = columnIndex
        self.columnSpan = columnSpan
        self.confidence = confidence
        self.entityTypes = entityTypes
        self.geometry = geometry
        self.id = id
        self.page = page
        self.relationships = relationships
        self.rowIndex = rowIndex
        self.rowSpan = rowSpan
        self.selectionStatus = selectionStatus
        self.text = text
        self.textType = textType
    }
}
