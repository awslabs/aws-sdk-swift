// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BlockType {
    case cell
    case keyValueSet
    case line
    case page
    case selectionElement
    case table
    case word
    case sdkUnknown(String)
}

extension BlockType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BlockType] {
        return [
            .cell,
            .keyValueSet,
            .line,
            .page,
            .selectionElement,
            .table,
            .word,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cell: return "CELL"
        case .keyValueSet: return "KEY_VALUE_SET"
        case .line: return "LINE"
        case .page: return "PAGE"
        case .selectionElement: return "SELECTION_ELEMENT"
        case .table: return "TABLE"
        case .word: return "WORD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BlockType(rawValue: rawValue) ?? BlockType.sdkUnknown(rawValue)
    }
}
