// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HumanLoopActivationOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case humanLoopActivationConditionsEvaluationResults = "HumanLoopActivationConditionsEvaluationResults"
        case humanLoopActivationReasons = "HumanLoopActivationReasons"
        case humanLoopArn = "HumanLoopArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults {
            try encodeContainer.encode(humanLoopActivationConditionsEvaluationResults, forKey: .humanLoopActivationConditionsEvaluationResults)
        }
        if let humanLoopActivationReasons = humanLoopActivationReasons {
            var humanLoopActivationReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .humanLoopActivationReasons)
            for humanloopactivationreasons0 in humanLoopActivationReasons {
                try humanLoopActivationReasonsContainer.encode(humanloopactivationreasons0)
            }
        }
        if let humanLoopArn = humanLoopArn {
            try encodeContainer.encode(humanLoopArn, forKey: .humanLoopArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let humanLoopArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .humanLoopArn)
        humanLoopArn = humanLoopArnDecoded
        let humanLoopActivationReasonsContainer = try containerValues.decodeIfPresent([String].self, forKey: .humanLoopActivationReasons)
        var humanLoopActivationReasonsDecoded0:[String]? = nil
        if let humanLoopActivationReasonsContainer = humanLoopActivationReasonsContainer {
            humanLoopActivationReasonsDecoded0 = [String]()
            for string0 in humanLoopActivationReasonsContainer {
                humanLoopActivationReasonsDecoded0?.append(string0)
            }
        }
        humanLoopActivationReasons = humanLoopActivationReasonsDecoded0
        let humanLoopActivationConditionsEvaluationResultsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .humanLoopActivationConditionsEvaluationResults)
        humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResultsDecoded
    }
}
