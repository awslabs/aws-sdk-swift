// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Relationship: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ids = "Ids"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for idlist0 in ids {
                try idsContainer.encode(idlist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RelationshipType.self, forKey: .type)
        type = typeDecoded
        let idsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ids)
        var idsDecoded0:[String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [String]()
            for string0 in idsContainer {
                idsDecoded0?.append(string0)
            }
        }
        ids = idsDecoded0
    }
}
