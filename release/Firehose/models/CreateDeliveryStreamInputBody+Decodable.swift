// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeliveryStreamInputBody: Equatable {
    public let deliveryStreamName: String?
    public let deliveryStreamType: DeliveryStreamType?
    public let kinesisStreamSourceConfiguration: KinesisStreamSourceConfiguration?
    public let deliveryStreamEncryptionConfigurationInput: DeliveryStreamEncryptionConfigurationInput?
    public let s3DestinationConfiguration: S3DestinationConfiguration?
    public let extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration?
    public let redshiftDestinationConfiguration: RedshiftDestinationConfiguration?
    public let elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration?
    public let splunkDestinationConfiguration: SplunkDestinationConfiguration?
    public let httpEndpointDestinationConfiguration: HttpEndpointDestinationConfiguration?
    public let tags: [Tag]?
}

extension CreateDeliveryStreamInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let kinesisStreamSourceConfigurationDecoded = try containerValues.decodeIfPresent(KinesisStreamSourceConfiguration.self, forKey: .kinesisStreamSourceConfiguration)
        kinesisStreamSourceConfiguration = kinesisStreamSourceConfigurationDecoded
        let deliveryStreamEncryptionConfigurationInputDecoded = try containerValues.decodeIfPresent(DeliveryStreamEncryptionConfigurationInput.self, forKey: .deliveryStreamEncryptionConfigurationInput)
        deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInputDecoded
        let s3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(S3DestinationConfiguration.self, forKey: .s3DestinationConfiguration)
        s3DestinationConfiguration = s3DestinationConfigurationDecoded
        let extendedS3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(ExtendedS3DestinationConfiguration.self, forKey: .extendedS3DestinationConfiguration)
        extendedS3DestinationConfiguration = extendedS3DestinationConfigurationDecoded
        let redshiftDestinationConfigurationDecoded = try containerValues.decodeIfPresent(RedshiftDestinationConfiguration.self, forKey: .redshiftDestinationConfiguration)
        redshiftDestinationConfiguration = redshiftDestinationConfigurationDecoded
        let elasticsearchDestinationConfigurationDecoded = try containerValues.decodeIfPresent(ElasticsearchDestinationConfiguration.self, forKey: .elasticsearchDestinationConfiguration)
        elasticsearchDestinationConfiguration = elasticsearchDestinationConfigurationDecoded
        let splunkDestinationConfigurationDecoded = try containerValues.decodeIfPresent(SplunkDestinationConfiguration.self, forKey: .splunkDestinationConfiguration)
        splunkDestinationConfiguration = splunkDestinationConfigurationDecoded
        let httpEndpointDestinationConfigurationDecoded = try containerValues.decodeIfPresent(HttpEndpointDestinationConfiguration.self, forKey: .httpEndpointDestinationConfiguration)
        httpEndpointDestinationConfiguration = httpEndpointDestinationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
