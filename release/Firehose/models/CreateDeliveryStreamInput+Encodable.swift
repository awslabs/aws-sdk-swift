// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDeliveryStreamInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInput {
            try encodeContainer.encode(deliveryStreamEncryptionConfigurationInput, forKey: .deliveryStreamEncryptionConfigurationInput)
        }
        if let deliveryStreamName = deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let deliveryStreamType = deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration {
            try encodeContainer.encode(elasticsearchDestinationConfiguration, forKey: .elasticsearchDestinationConfiguration)
        }
        if let extendedS3DestinationConfiguration = extendedS3DestinationConfiguration {
            try encodeContainer.encode(extendedS3DestinationConfiguration, forKey: .extendedS3DestinationConfiguration)
        }
        if let httpEndpointDestinationConfiguration = httpEndpointDestinationConfiguration {
            try encodeContainer.encode(httpEndpointDestinationConfiguration, forKey: .httpEndpointDestinationConfiguration)
        }
        if let kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration {
            try encodeContainer.encode(kinesisStreamSourceConfiguration, forKey: .kinesisStreamSourceConfiguration)
        }
        if let redshiftDestinationConfiguration = redshiftDestinationConfiguration {
            try encodeContainer.encode(redshiftDestinationConfiguration, forKey: .redshiftDestinationConfiguration)
        }
        if let s3DestinationConfiguration = s3DestinationConfiguration {
            try encodeContainer.encode(s3DestinationConfiguration, forKey: .s3DestinationConfiguration)
        }
        if let splunkDestinationConfiguration = splunkDestinationConfiguration {
            try encodeContainer.encode(splunkDestinationConfiguration, forKey: .splunkDestinationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagdeliverystreaminputtaglist0 in tags {
                try tagsContainer.encode(tagdeliverystreaminputtaglist0)
            }
        }
    }
}
