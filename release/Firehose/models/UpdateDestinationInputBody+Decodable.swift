// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDestinationInputBody: Equatable {
    public let deliveryStreamName: String?
    public let currentDeliveryStreamVersionId: String?
    public let destinationId: String?
    public let s3DestinationUpdate: S3DestinationUpdate?
    public let extendedS3DestinationUpdate: ExtendedS3DestinationUpdate?
    public let redshiftDestinationUpdate: RedshiftDestinationUpdate?
    public let elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate?
    public let splunkDestinationUpdate: SplunkDestinationUpdate?
    public let httpEndpointDestinationUpdate: HttpEndpointDestinationUpdate?
}

extension UpdateDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let currentDeliveryStreamVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentDeliveryStreamVersionId)
        currentDeliveryStreamVersionId = currentDeliveryStreamVersionIdDecoded
        let destinationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationId)
        destinationId = destinationIdDecoded
        let s3DestinationUpdateDecoded = try containerValues.decodeIfPresent(S3DestinationUpdate.self, forKey: .s3DestinationUpdate)
        s3DestinationUpdate = s3DestinationUpdateDecoded
        let extendedS3DestinationUpdateDecoded = try containerValues.decodeIfPresent(ExtendedS3DestinationUpdate.self, forKey: .extendedS3DestinationUpdate)
        extendedS3DestinationUpdate = extendedS3DestinationUpdateDecoded
        let redshiftDestinationUpdateDecoded = try containerValues.decodeIfPresent(RedshiftDestinationUpdate.self, forKey: .redshiftDestinationUpdate)
        redshiftDestinationUpdate = redshiftDestinationUpdateDecoded
        let elasticsearchDestinationUpdateDecoded = try containerValues.decodeIfPresent(ElasticsearchDestinationUpdate.self, forKey: .elasticsearchDestinationUpdate)
        elasticsearchDestinationUpdate = elasticsearchDestinationUpdateDecoded
        let splunkDestinationUpdateDecoded = try containerValues.decodeIfPresent(SplunkDestinationUpdate.self, forKey: .splunkDestinationUpdate)
        splunkDestinationUpdate = splunkDestinationUpdateDecoded
        let httpEndpointDestinationUpdateDecoded = try containerValues.decodeIfPresent(HttpEndpointDestinationUpdate.self, forKey: .httpEndpointDestinationUpdate)
        httpEndpointDestinationUpdate = httpEndpointDestinationUpdateDecoded
    }
}
