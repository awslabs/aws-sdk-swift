// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftDestinationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterJDBCURL = "ClusterJDBCURL"
        case copyCommand = "CopyCommand"
        case password = "Password"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3BackupUpdate = "S3BackupUpdate"
        case s3Update = "S3Update"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterJDBCURL = clusterJDBCURL {
            try encodeContainer.encode(clusterJDBCURL, forKey: .clusterJDBCURL)
        }
        if let copyCommand = copyCommand {
            try encodeContainer.encode(copyCommand, forKey: .copyCommand)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let processingConfiguration = processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3BackupUpdate = s3BackupUpdate {
            try encodeContainer.encode(s3BackupUpdate, forKey: .s3BackupUpdate)
        }
        if let s3Update = s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clusterJDBCURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterJDBCURL)
        clusterJDBCURL = clusterJDBCURLDecoded
        let copyCommandDecoded = try containerValues.decodeIfPresent(CopyCommand.self, forKey: .copyCommand)
        copyCommand = copyCommandDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(RedshiftRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(RedshiftS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupUpdateDecoded = try containerValues.decodeIfPresent(S3DestinationUpdate.self, forKey: .s3BackupUpdate)
        s3BackupUpdate = s3BackupUpdateDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}
