// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrcSerDe: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockSizeBytes = "BlockSizeBytes"
        case bloomFilterColumns = "BloomFilterColumns"
        case bloomFilterFalsePositiveProbability = "BloomFilterFalsePositiveProbability"
        case compression = "Compression"
        case dictionaryKeyThreshold = "DictionaryKeyThreshold"
        case enablePadding = "EnablePadding"
        case formatVersion = "FormatVersion"
        case paddingTolerance = "PaddingTolerance"
        case rowIndexStride = "RowIndexStride"
        case stripeSizeBytes = "StripeSizeBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockSizeBytes = blockSizeBytes {
            try encodeContainer.encode(blockSizeBytes, forKey: .blockSizeBytes)
        }
        if let bloomFilterColumns = bloomFilterColumns {
            var bloomFilterColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bloomFilterColumns)
            for listofnonemptystringswithoutwhitespace0 in bloomFilterColumns {
                try bloomFilterColumnsContainer.encode(listofnonemptystringswithoutwhitespace0)
            }
        }
        if let bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability {
            try encodeContainer.encode(bloomFilterFalsePositiveProbability, forKey: .bloomFilterFalsePositiveProbability)
        }
        if let compression = compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let dictionaryKeyThreshold = dictionaryKeyThreshold {
            try encodeContainer.encode(dictionaryKeyThreshold, forKey: .dictionaryKeyThreshold)
        }
        if let enablePadding = enablePadding {
            try encodeContainer.encode(enablePadding, forKey: .enablePadding)
        }
        if let formatVersion = formatVersion {
            try encodeContainer.encode(formatVersion.rawValue, forKey: .formatVersion)
        }
        if let paddingTolerance = paddingTolerance {
            try encodeContainer.encode(paddingTolerance, forKey: .paddingTolerance)
        }
        if let rowIndexStride = rowIndexStride {
            try encodeContainer.encode(rowIndexStride, forKey: .rowIndexStride)
        }
        if let stripeSizeBytes = stripeSizeBytes {
            try encodeContainer.encode(stripeSizeBytes, forKey: .stripeSizeBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stripeSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stripeSizeBytes)
        stripeSizeBytes = stripeSizeBytesDecoded
        let blockSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockSizeBytes)
        blockSizeBytes = blockSizeBytesDecoded
        let rowIndexStrideDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .rowIndexStride)
        rowIndexStride = rowIndexStrideDecoded
        let enablePaddingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enablePadding)
        enablePadding = enablePaddingDecoded
        let paddingToleranceDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .paddingTolerance)
        paddingTolerance = paddingToleranceDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(OrcCompression.self, forKey: .compression)
        compression = compressionDecoded
        let bloomFilterColumnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .bloomFilterColumns)
        var bloomFilterColumnsDecoded0:[String]? = nil
        if let bloomFilterColumnsContainer = bloomFilterColumnsContainer {
            bloomFilterColumnsDecoded0 = [String]()
            for string0 in bloomFilterColumnsContainer {
                bloomFilterColumnsDecoded0?.append(string0)
            }
        }
        bloomFilterColumns = bloomFilterColumnsDecoded0
        let bloomFilterFalsePositiveProbabilityDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .bloomFilterFalsePositiveProbability)
        bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbabilityDecoded
        let dictionaryKeyThresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .dictionaryKeyThreshold)
        dictionaryKeyThreshold = dictionaryKeyThresholdDecoded
        let formatVersionDecoded = try containerValues.decodeIfPresent(OrcFormatVersion.self, forKey: .formatVersion)
        formatVersion = formatVersionDecoded
    }
}
