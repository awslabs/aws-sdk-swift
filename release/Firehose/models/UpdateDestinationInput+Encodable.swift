// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentDeliveryStreamVersionId = currentDeliveryStreamVersionId {
            try encodeContainer.encode(currentDeliveryStreamVersionId, forKey: .currentDeliveryStreamVersionId)
        }
        if let deliveryStreamName = deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let destinationId = destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationUpdate = elasticsearchDestinationUpdate {
            try encodeContainer.encode(elasticsearchDestinationUpdate, forKey: .elasticsearchDestinationUpdate)
        }
        if let extendedS3DestinationUpdate = extendedS3DestinationUpdate {
            try encodeContainer.encode(extendedS3DestinationUpdate, forKey: .extendedS3DestinationUpdate)
        }
        if let httpEndpointDestinationUpdate = httpEndpointDestinationUpdate {
            try encodeContainer.encode(httpEndpointDestinationUpdate, forKey: .httpEndpointDestinationUpdate)
        }
        if let redshiftDestinationUpdate = redshiftDestinationUpdate {
            try encodeContainer.encode(redshiftDestinationUpdate, forKey: .redshiftDestinationUpdate)
        }
        if let s3DestinationUpdate = s3DestinationUpdate {
            try encodeContainer.encode(s3DestinationUpdate, forKey: .s3DestinationUpdate)
        }
        if let splunkDestinationUpdate = splunkDestinationUpdate {
            try encodeContainer.encode(splunkDestinationUpdate, forKey: .splunkDestinationUpdate)
        }
    }
}
