// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenXJsonSerDe: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case caseInsensitive = "CaseInsensitive"
        case columnToJsonKeyMappings = "ColumnToJsonKeyMappings"
        case convertDotsInJsonKeysToUnderscores = "ConvertDotsInJsonKeysToUnderscores"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseInsensitive = caseInsensitive {
            try encodeContainer.encode(caseInsensitive, forKey: .caseInsensitive)
        }
        if let columnToJsonKeyMappings = columnToJsonKeyMappings {
            var columnToJsonKeyMappingsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .columnToJsonKeyMappings)
            for (dictKey0, columntojsonkeymappings0) in columnToJsonKeyMappings {
                try columnToJsonKeyMappingsContainer.encode(columntojsonkeymappings0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores {
            try encodeContainer.encode(convertDotsInJsonKeysToUnderscores, forKey: .convertDotsInJsonKeysToUnderscores)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let convertDotsInJsonKeysToUnderscoresDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .convertDotsInJsonKeysToUnderscores)
        convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscoresDecoded
        let caseInsensitiveDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .caseInsensitive)
        caseInsensitive = caseInsensitiveDecoded
        let columnToJsonKeyMappingsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .columnToJsonKeyMappings)
        var columnToJsonKeyMappingsDecoded0: [String:String]? = nil
        if let columnToJsonKeyMappingsContainer = columnToJsonKeyMappingsContainer {
            columnToJsonKeyMappingsDecoded0 = [String:String]()
            for (key0, nonemptystring0) in columnToJsonKeyMappingsContainer {
                columnToJsonKeyMappingsDecoded0?[key0] = nonemptystring0
            }
        }
        columnToJsonKeyMappings = columnToJsonKeyMappingsDecoded0
    }
}
