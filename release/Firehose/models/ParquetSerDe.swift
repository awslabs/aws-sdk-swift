// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A serializer to use for converting data to the Parquet format before storing it in
///          Amazon S3. For more information, see <a href="https://parquet.apache.org/documentation/latest/">Apache Parquet</a>.</p>
public struct ParquetSerDe: Equatable {
    /// <p>The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to
    ///          copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the
    ///          minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.</p>
    public let blockSizeBytes: Int?
    /// <p>The compression code to use over data blocks. The possible values are
    ///             <code>UNCOMPRESSED</code>, <code>SNAPPY</code>, and <code>GZIP</code>, with the default
    ///          being <code>SNAPPY</code>. Use <code>SNAPPY</code> for higher decompression speed. Use
    ///             <code>GZIP</code> if the compression ratio is more important than speed.</p>
    public let compression: ParquetCompression?
    /// <p>Indicates whether to enable dictionary compression.</p>
    public let enableDictionaryCompression: Bool?
    /// <p>The maximum amount of padding to apply. This is useful if you intend to copy the data
    ///          from Amazon S3 to HDFS before querying. The default is 0.</p>
    public let maxPaddingBytes: Int?
    /// <p>The Parquet page size. Column chunks are divided into pages. A page is conceptually an
    ///          indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and
    ///          the default is 1 MiB.</p>
    public let pageSizeBytes: Int?
    /// <p>Indicates the version of row format to output. The possible values are <code>V1</code>
    ///          and <code>V2</code>. The default is <code>V1</code>.</p>
    public let writerVersion: ParquetWriterVersion?

    public init (
        blockSizeBytes: Int? = nil,
        compression: ParquetCompression? = nil,
        enableDictionaryCompression: Bool? = nil,
        maxPaddingBytes: Int? = nil,
        pageSizeBytes: Int? = nil,
        writerVersion: ParquetWriterVersion? = nil
    )
    {
        self.blockSizeBytes = blockSizeBytes
        self.compression = compression
        self.enableDictionaryCompression = enableDictionaryCompression
        self.maxPaddingBytes = maxPaddingBytes
        self.pageSizeBytes = pageSizeBytes
        self.writerVersion = writerVersion
    }
}
