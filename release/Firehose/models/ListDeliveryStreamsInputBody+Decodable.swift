// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeliveryStreamsInputBody: Equatable {
    public let limit: Int?
    public let deliveryStreamType: DeliveryStreamType?
    public let exclusiveStartDeliveryStreamName: String?
}

extension ListDeliveryStreamsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deliveryStreamType = "DeliveryStreamType"
        case exclusiveStartDeliveryStreamName = "ExclusiveStartDeliveryStreamName"
        case limit = "Limit"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let exclusiveStartDeliveryStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartDeliveryStreamName)
        exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamNameDecoded
    }
}
