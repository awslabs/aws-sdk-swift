// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HttpEndpointDestinationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case endpointConfiguration = "EndpointConfiguration"
        case processingConfiguration = "ProcessingConfiguration"
        case requestConfiguration = "RequestConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Update = "S3Update"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let endpointConfiguration = endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let processingConfiguration = processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let requestConfiguration = requestConfiguration {
            try encodeContainer.encode(requestConfiguration, forKey: .requestConfiguration)
        }
        if let retryOptions = retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Update = s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(HttpEndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(HttpEndpointBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let requestConfigurationDecoded = try containerValues.decodeIfPresent(HttpEndpointRequestConfiguration.self, forKey: .requestConfiguration)
        requestConfiguration = requestConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(HttpEndpointRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(HttpEndpointS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
    }
}
