// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum CompressionFormat {
    case gzip
    case hadoopSnappy
    case snappy
    case uncompressed
    case zip
    case sdkUnknown(String)
}

extension CompressionFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CompressionFormat] {
        return [
            .gzip,
            .hadoopSnappy,
            .snappy,
            .uncompressed,
            .zip,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .gzip: return "GZIP"
        case .hadoopSnappy: return "HADOOP_SNAPPY"
        case .snappy: return "Snappy"
        case .uncompressed: return "UNCOMPRESSED"
        case .zip: return "ZIP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CompressionFormat(rawValue: rawValue) ?? CompressionFormat.sdkUnknown(rawValue)
    }
}
