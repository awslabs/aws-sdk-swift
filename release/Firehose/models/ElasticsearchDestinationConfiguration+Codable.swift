// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticsearchDestinationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterEndpoint = "ClusterEndpoint"
        case domainARN = "DomainARN"
        case indexName = "IndexName"
        case indexRotationPeriod = "IndexRotationPeriod"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3Configuration = "S3Configuration"
        case typeName = "TypeName"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bufferingHints = bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterEndpoint = clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let domainARN = domainARN {
            try encodeContainer.encode(domainARN, forKey: .domainARN)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexRotationPeriod = indexRotationPeriod {
            try encodeContainer.encode(indexRotationPeriod.rawValue, forKey: .indexRotationPeriod)
        }
        if let processingConfiguration = processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Configuration = s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let typeName = typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let domainARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainARN)
        domainARN = domainARNDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let indexRotationPeriodDecoded = try containerValues.decodeIfPresent(ElasticsearchIndexRotationPeriod.self, forKey: .indexRotationPeriod)
        indexRotationPeriod = indexRotationPeriodDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(ElasticsearchBufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(ElasticsearchS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(S3DestinationConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(VpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}
