// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public protocol SsmContactsClientProtocol {
    /// <p>Used to acknowledge an engagement to a contact channel during an incident.</p>
    func acceptPage(input: AcceptPageInput, completion: @escaping (SdkResult<AcceptPageOutput, AcceptPageOutputError>) -> Void)
    /// <p>Activates a contact's contact channel. Incident Manager can't engage a contact until
    ///          the
    ///          contact channel has been activated.</p>
    func activateContactChannel(input: ActivateContactChannelInput, completion: @escaping (SdkResult<ActivateContactChannelOutput, ActivateContactChannelOutputError>) -> Void)
    /// <p>Contacts are either the contacts that Incident Manager engages during an incident or the
    ///          escalation plans that Incident Manager uses to engage contacts in phases during an
    ///          incident. </p>
    func createContact(input: CreateContactInput, completion: @escaping (SdkResult<CreateContactOutput, CreateContactOutputError>) -> Void)
    /// <p>A contact channel is the method that Incident Manager uses to engage your contact.</p>
    func createContactChannel(input: CreateContactChannelInput, completion: @escaping (SdkResult<CreateContactChannelOutput, CreateContactChannelOutputError>) -> Void)
    /// <p>To no longer receive Incident Manager engagements to a contact channel, you can deactivate
    ///          the channel.</p>
    func deactivateContactChannel(input: DeactivateContactChannelInput, completion: @escaping (SdkResult<DeactivateContactChannelOutput, DeactivateContactChannelOutputError>) -> Void)
    /// <p>To remove a contact from Incident Manager, you can delete the contact. Deleting a contact
    ///          removes them from all escalation plans and related response plans. Deleting an escalation
    ///          plan removes it from all related response plans. You will have to recreate the contact and
    ///          its contact channels before you can use it again.</p>
    func deleteContact(input: DeleteContactInput, completion: @escaping (SdkResult<DeleteContactOutput, DeleteContactOutputError>) -> Void)
    /// <p>To no longer receive engagements on a contact channel, you can delete the channel from a
    ///          contact. Deleting the contact channel removes it from the contact's engagement plan. If you
    ///          delete the only contact channel for a contact, you won't be able to engage that contact
    ///          during an incident.</p>
    func deleteContactChannel(input: DeleteContactChannelInput, completion: @escaping (SdkResult<DeleteContactChannelOutput, DeleteContactChannelOutputError>) -> Void)
    /// <p>Incident Manager uses engagements to engage contacts and escalation plans during an incident.
    ///          Use this command to describe the engagement that occurred during an incident.</p>
    func describeEngagement(input: DescribeEngagementInput, completion: @escaping (SdkResult<DescribeEngagementOutput, DescribeEngagementOutputError>) -> Void)
    /// <p>Lists details of the engagement to a contact channel.</p>
    func describePage(input: DescribePageInput, completion: @escaping (SdkResult<DescribePageOutput, DescribePageOutputError>) -> Void)
    /// <p>Retrieves information about the specified contact or escalation plan.</p>
    func getContact(input: GetContactInput, completion: @escaping (SdkResult<GetContactOutput, GetContactOutputError>) -> Void)
    /// <p>List details about a specific contact channel.</p>
    func getContactChannel(input: GetContactChannelInput, completion: @escaping (SdkResult<GetContactChannelOutput, GetContactChannelOutputError>) -> Void)
    /// <p>Retrieves the resource policies attached to the specified contact or escalation
    ///          plan.</p>
    func getContactPolicy(input: GetContactPolicyInput, completion: @escaping (SdkResult<GetContactPolicyOutput, GetContactPolicyOutputError>) -> Void)
    /// <p>Lists all contact channels for the specified contact.</p>
    func listContactChannels(input: ListContactChannelsInput, completion: @escaping (SdkResult<ListContactChannelsOutput, ListContactChannelsOutputError>) -> Void)
    /// <p>Lists all contacts and escalation plans in Incident Manager.</p>
    func listContacts(input: ListContactsInput, completion: @escaping (SdkResult<ListContactsOutput, ListContactsOutputError>) -> Void)
    /// <p>Lists all engagements that have happened in an incident.</p>
    func listEngagements(input: ListEngagementsInput, completion: @escaping (SdkResult<ListEngagementsOutput, ListEngagementsOutputError>) -> Void)
    /// <p>Lists all of the engagements to contact channels that have been acknowledged. </p>
    func listPageReceipts(input: ListPageReceiptsInput, completion: @escaping (SdkResult<ListPageReceiptsOutput, ListPageReceiptsOutputError>) -> Void)
    /// <p>Lists the engagements to a contact's contact channels.</p>
    func listPagesByContact(input: ListPagesByContactInput, completion: @escaping (SdkResult<ListPagesByContactOutput, ListPagesByContactOutputError>) -> Void)
    /// <p>Lists the engagements to contact channels that occurred by engaging a contact.</p>
    func listPagesByEngagement(input: ListPagesByEngagementInput, completion: @escaping (SdkResult<ListPagesByEngagementOutput, ListPagesByEngagementOutputError>) -> Void)
    /// <p>Lists the tags of an escalation plan or contact.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    /// <p>Adds a resource to the specified contact or escalation plan.</p>
    func putContactPolicy(input: PutContactPolicyInput, completion: @escaping (SdkResult<PutContactPolicyOutput, PutContactPolicyOutputError>) -> Void)
    /// <p>Sends an activation code to a contact channel. The contact can use this code to activate
    ///          the contact channel in the console or with the <code>ActivateChannel</code> action.
    ///          Incident Manager can't engage a contact channel until it has been activated.</p>
    func sendActivationCode(input: SendActivationCodeInput, completion: @escaping (SdkResult<SendActivationCodeOutput, SendActivationCodeOutputError>) -> Void)
    /// <p>Starts an engagement to a contact or escalation plan. The engagement engages each
    ///          contact specified in the incident.</p>
    func startEngagement(input: StartEngagementInput, completion: @escaping (SdkResult<StartEngagementOutput, StartEngagementOutputError>) -> Void)
    /// <p>Stops an engagement before it finishes the final stage of the escalation plan or
    ///          engagement plan. Further contacts aren't engaged.</p>
    func stopEngagement(input: StopEngagementInput, completion: @escaping (SdkResult<StopEngagementOutput, StopEngagementOutputError>) -> Void)
    /// <p>Tags a contact or escalation plan. You can tag only contacts and escalation plans in the
    ///          first region of your replication set. </p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    /// <p>Removes tags from the specified resource. </p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    /// <p>Updates the contact or escalation plan specified. </p>
    func updateContact(input: UpdateContactInput, completion: @escaping (SdkResult<UpdateContactOutput, UpdateContactOutputError>) -> Void)
    /// <p>Updates a contact's contact channel.</p>
    func updateContactChannel(input: UpdateContactChannelInput, completion: @escaping (SdkResult<UpdateContactChannelOutput, UpdateContactChannelOutputError>) -> Void)
}
