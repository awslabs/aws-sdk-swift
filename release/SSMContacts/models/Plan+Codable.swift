// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Plan: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case stages = "Stages"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stages = stages {
            var stagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stages)
            for stageslist0 in stages {
                try stagesContainer.encode(stageslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stagesContainer = try containerValues.decodeIfPresent([Stage].self, forKey: .stages)
        var stagesDecoded0:[Stage]? = nil
        if let stagesContainer = stagesContainer {
            stagesDecoded0 = [Stage]()
            for structure0 in stagesContainer {
                stagesDecoded0?.append(structure0)
            }
        }
        stages = stagesDecoded0
    }
}
