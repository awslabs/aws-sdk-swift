// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Receipt: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contactChannelArn = "ContactChannelArn"
        case receiptInfo = "ReceiptInfo"
        case receiptTime = "ReceiptTime"
        case receiptType = "ReceiptType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactChannelArn = contactChannelArn {
            try encodeContainer.encode(contactChannelArn, forKey: .contactChannelArn)
        }
        if let receiptInfo = receiptInfo {
            try encodeContainer.encode(receiptInfo, forKey: .receiptInfo)
        }
        if let receiptTime = receiptTime {
            try encodeContainer.encode(receiptTime.timeIntervalSince1970, forKey: .receiptTime)
        }
        if let receiptType = receiptType {
            try encodeContainer.encode(receiptType.rawValue, forKey: .receiptType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactChannelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contactChannelArn)
        contactChannelArn = contactChannelArnDecoded
        let receiptTypeDecoded = try containerValues.decodeIfPresent(ReceiptType.self, forKey: .receiptType)
        receiptType = receiptTypeDecoded
        let receiptInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .receiptInfo)
        receiptInfo = receiptInfoDecoded
        let receiptTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .receiptTime)
        receiptTime = receiptTimeDecoded
    }
}
