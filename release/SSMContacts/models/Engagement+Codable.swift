// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Engagement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contactArn = "ContactArn"
        case engagementArn = "EngagementArn"
        case incidentId = "IncidentId"
        case sender = "Sender"
        case startTime = "StartTime"
        case stopTime = "StopTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactArn = contactArn {
            try encodeContainer.encode(contactArn, forKey: .contactArn)
        }
        if let engagementArn = engagementArn {
            try encodeContainer.encode(engagementArn, forKey: .engagementArn)
        }
        if let incidentId = incidentId {
            try encodeContainer.encode(incidentId, forKey: .incidentId)
        }
        if let sender = sender {
            try encodeContainer.encode(sender, forKey: .sender)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let stopTime = stopTime {
            try encodeContainer.encode(stopTime.timeIntervalSince1970, forKey: .stopTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engagementArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engagementArn)
        engagementArn = engagementArnDecoded
        let contactArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contactArn)
        contactArn = contactArnDecoded
        let senderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sender)
        sender = senderDecoded
        let incidentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .incidentId)
        incidentId = incidentIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let stopTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stopTime)
        stopTime = stopTimeDecoded
    }
}
