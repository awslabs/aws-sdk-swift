// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogPattern: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pattern = "Pattern"
        case patternName = "PatternName"
        case patternSetName = "PatternSetName"
        case rank = "Rank"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pattern = pattern {
            try encodeContainer.encode(pattern, forKey: .pattern)
        }
        if let patternName = patternName {
            try encodeContainer.encode(patternName, forKey: .patternName)
        }
        if let patternSetName = patternSetName {
            try encodeContainer.encode(patternSetName, forKey: .patternSetName)
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patternSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .patternSetName)
        patternSetName = patternSetNameDecoded
        let patternNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .patternName)
        patternName = patternNameDecoded
        let patternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pattern)
        pattern = patternDecoded
        let rankDecoded = try containerValues.decode(Int.self, forKey: .rank)
        rank = rankDecoded
    }
}
