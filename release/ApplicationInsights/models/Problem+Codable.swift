// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Problem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case affectedResource = "AffectedResource"
        case endTime = "EndTime"
        case feedback = "Feedback"
        case id = "Id"
        case insights = "Insights"
        case resourceGroupName = "ResourceGroupName"
        case severityLevel = "SeverityLevel"
        case startTime = "StartTime"
        case status = "Status"
        case title = "Title"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedResource = affectedResource {
            try encodeContainer.encode(affectedResource, forKey: .affectedResource)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let feedback = feedback {
            var feedbackContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .feedback)
            for (dictKey0, feedback0) in feedback {
                try feedbackContainer.encode(feedback0.rawValue, forKey: Key(stringValue: dictKey0))
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insights = insights {
            try encodeContainer.encode(insights, forKey: .insights)
        }
        if let resourceGroupName = resourceGroupName {
            try encodeContainer.encode(resourceGroupName, forKey: .resourceGroupName)
        }
        if let severityLevel = severityLevel {
            try encodeContainer.encode(severityLevel.rawValue, forKey: .severityLevel)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let insightsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .insights)
        insights = insightsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Status.self, forKey: .status)
        status = statusDecoded
        let affectedResourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .affectedResource)
        affectedResource = affectedResourceDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let severityLevelDecoded = try containerValues.decodeIfPresent(SeverityLevel.self, forKey: .severityLevel)
        severityLevel = severityLevelDecoded
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let feedbackContainer = try containerValues.decodeIfPresent([String:FeedbackValue].self, forKey: .feedback)
        var feedbackDecoded0: [String:FeedbackValue]? = nil
        if let feedbackContainer = feedbackContainer {
            feedbackDecoded0 = [String:FeedbackValue]()
            for (key0, feedbackvalue0) in feedbackContainer {
                feedbackDecoded0?[key0] = feedbackvalue0
            }
        }
        feedback = feedbackDecoded0
    }
}
