// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Tier {
    case custom
    case `default`
    case dotNetCore
    case dotNetWeb
    case dotNetWebTier
    case dotNetWorker
    case javaJmx
    case mysql
    case oracle
    case postgresql
    case sqlServer
    case sqlServerAlwaysonAvailabilityGroup
    case sdkUnknown(String)
}

extension Tier : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Tier] {
        return [
            .custom,
            .default,
            .dotNetCore,
            .dotNetWeb,
            .dotNetWebTier,
            .dotNetWorker,
            .javaJmx,
            .mysql,
            .oracle,
            .postgresql,
            .sqlServer,
            .sqlServerAlwaysonAvailabilityGroup,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .custom: return "CUSTOM"
        case .default: return "DEFAULT"
        case .dotNetCore: return "DOT_NET_CORE"
        case .dotNetWeb: return "DOT_NET_WEB"
        case .dotNetWebTier: return "DOT_NET_WEB_TIER"
        case .dotNetWorker: return "DOT_NET_WORKER"
        case .javaJmx: return "JAVA_JMX"
        case .mysql: return "MYSQL"
        case .oracle: return "ORACLE"
        case .postgresql: return "POSTGRESQL"
        case .sqlServer: return "SQL_SERVER"
        case .sqlServerAlwaysonAvailabilityGroup: return "SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Tier(rawValue: rawValue) ?? Tier.sdkUnknown(rawValue)
    }
}
