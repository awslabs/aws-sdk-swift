// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProblemsOutputBody: Equatable {
    public let problemList: [Problem]?
    public let nextToken: String?
}

extension ListProblemsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case problemList = "ProblemList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let problemListContainer = try containerValues.decodeIfPresent([Problem].self, forKey: .problemList)
        var problemListDecoded0:[Problem]? = nil
        if let problemListContainer = problemListContainer {
            problemListDecoded0 = [Problem]()
            for structure0 in problemListContainer {
                problemListDecoded0?.append(structure0)
            }
        }
        problemList = problemListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
