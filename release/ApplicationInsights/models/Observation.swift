// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an anomaly or error with the application.</p>
public struct Observation: Equatable {
    /// <p> The detail type of the CloudWatch Event-based observation, for example, <code>EC2
    ///             Instance State-change Notification</code>. </p>
    public let cloudWatchEventDetailType: String?
    /// <p> The ID of the CloudWatch Event-based observation related to the detected problem. </p>
    public let cloudWatchEventId: String?
    /// <p> The source of the CloudWatch Event. </p>
    public let cloudWatchEventSource: CloudWatchEventSource?
    /// <p>
    ///          The CodeDeploy application to which the deployment belongs.
    ///       </p>
    public let codeDeployApplication: String?
    /// <p>
    ///          The deployment group to which the CodeDeploy deployment belongs.
    ///       </p>
    public let codeDeployDeploymentGroup: String?
    /// <p> The deployment ID of the CodeDeploy-based observation related to the detected problem. </p>
    public let codeDeployDeploymentId: String?
    /// <p>
    ///          The instance group to which the CodeDeploy instance belongs.
    ///       </p>
    public let codeDeployInstanceGroupId: String?
    /// <p>
    ///          The status of the CodeDeploy deployment, for example <code>SUCCESS</code> or <code> FAILURE</code>.
    ///       </p>
    public let codeDeployState: String?
    /// <p>
    ///          The cause of an EBS CloudWatch event.
    ///       </p>
    public let ebsCause: String?
    /// <p>
    ///          The type of EBS CloudWatch event, such as <code>createVolume</code>, <code>deleteVolume</code> or <code>attachVolume</code>.
    ///       </p>
    public let ebsEvent: String?
    /// <p>
    ///             The request ID of an EBS CloudWatch event.
    ///          </p>
    public let ebsRequestId: String?
    /// <p>
    ///          The result of an EBS CloudWatch event, such as <code>failed</code> or <code>succeeded</code>.
    ///       </p>
    public let ebsResult: String?
    /// <p>
    ///          The state of the instance, such as <code>STOPPING</code> or <code>TERMINATING</code>.
    ///       </p>
    public let ec2State: String?
    /// <p>The time when the observation ended, in epoch seconds.</p>
    public let endTime: Date?
    /// <p> The Amazon Resource Name (ARN) of the AWS Health Event-based observation.</p>
    public let healthEventArn: String?
    /// <p> The description of the AWS Health event provided by the service, such as Amazon EC2. </p>
    public let healthEventDescription: String?
    /// <p> The category of the AWS Health event, such as <code>issue</code>. </p>
    public let healthEventTypeCategory: String?
    /// <p> The type of the AWS Health event, for example,
    ///             <code>AWS_EC2_POWER_CONNECTIVITY_ISSUE</code>. </p>
    public let healthEventTypeCode: String?
    /// <p> The service to which the AWS Health Event belongs, such as EC2. </p>
    public let healthService: String?
    /// <p>The ID of the observation type.</p>
    public let id: String?
    /// <p>The timestamp in the CloudWatch Logs that specifies when the matched line occurred.</p>
    public let lineTime: Date?
    /// <p>The log filter of the observation.</p>
    public let logFilter: LogFilter?
    /// <p>The log group name.</p>
    public let logGroup: String?
    /// <p>The log text of the observation.</p>
    public let logText: String?
    /// <p>The name of the observation metric.</p>
    public let metricName: String?
    /// <p>The namespace of the observation metric.</p>
    public let metricNamespace: String?
    /// <p>
    ///          The category of an RDS event.
    ///       </p>
    public let rdsEventCategories: String?
    /// <p>
    ///          The message of an RDS event.
    ///       </p>
    public let rdsEventMessage: String?
    /// <p>
    ///          The name of the S3 CloudWatch Event-based observation.
    ///       </p>
    public let s3EventName: String?
    /// <p>The source resource ARN of the observation.</p>
    public let sourceARN: String?
    /// <p>The source type of the observation.</p>
    public let sourceType: String?
    /// <p>The time when the observation was  first detected, in epoch seconds.</p>
    public let startTime: Date?
    /// <p>
    ///          The Amazon Resource Name (ARN)  of the step function-based observation.
    ///       </p>
    public let statesArn: String?
    /// <p>
    ///          The Amazon Resource Name (ARN) of the step function execution-based observation.
    ///       </p>
    public let statesExecutionArn: String?
    /// <p>
    ///          The input to the step function-based observation.
    ///       </p>
    public let statesInput: String?
    /// <p>
    ///          The status of the step function-related observation.
    ///       </p>
    public let statesStatus: String?
    /// <p>The unit of the source observation metric.</p>
    public let unit: String?
    /// <p>The value of the source observation metric.</p>
    public let value: Double?
    /// <p>
    ///          The X-Ray request error percentage for this node.
    ///       </p>
    public let xRayErrorPercent: Int?
    /// <p>
    ///          The X-Ray request fault percentage for this node.
    ///       </p>
    public let xRayFaultPercent: Int?
    /// <p>
    ///          The name of the X-Ray node.
    ///       </p>
    public let xRayNodeName: String?
    /// <p>
    ///          The type of the  X-Ray node.      </p>
    public let xRayNodeType: String?
    /// <p>
    ///          The X-Ray node request average latency for this node.
    ///       </p>
    public let xRayRequestAverageLatency: Int?
    /// <p>
    ///          The X-Ray request count for this node.
    ///       </p>
    public let xRayRequestCount: Int?
    /// <p>
    ///          The X-Ray request throttle percentage for this node.
    ///       </p>
    public let xRayThrottlePercent: Int?

    public init (
        cloudWatchEventDetailType: String? = nil,
        cloudWatchEventId: String? = nil,
        cloudWatchEventSource: CloudWatchEventSource? = nil,
        codeDeployApplication: String? = nil,
        codeDeployDeploymentGroup: String? = nil,
        codeDeployDeploymentId: String? = nil,
        codeDeployInstanceGroupId: String? = nil,
        codeDeployState: String? = nil,
        ebsCause: String? = nil,
        ebsEvent: String? = nil,
        ebsRequestId: String? = nil,
        ebsResult: String? = nil,
        ec2State: String? = nil,
        endTime: Date? = nil,
        healthEventArn: String? = nil,
        healthEventDescription: String? = nil,
        healthEventTypeCategory: String? = nil,
        healthEventTypeCode: String? = nil,
        healthService: String? = nil,
        id: String? = nil,
        lineTime: Date? = nil,
        logFilter: LogFilter? = nil,
        logGroup: String? = nil,
        logText: String? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        rdsEventCategories: String? = nil,
        rdsEventMessage: String? = nil,
        s3EventName: String? = nil,
        sourceARN: String? = nil,
        sourceType: String? = nil,
        startTime: Date? = nil,
        statesArn: String? = nil,
        statesExecutionArn: String? = nil,
        statesInput: String? = nil,
        statesStatus: String? = nil,
        unit: String? = nil,
        value: Double? = nil,
        xRayErrorPercent: Int? = nil,
        xRayFaultPercent: Int? = nil,
        xRayNodeName: String? = nil,
        xRayNodeType: String? = nil,
        xRayRequestAverageLatency: Int? = nil,
        xRayRequestCount: Int? = nil,
        xRayThrottlePercent: Int? = nil
    )
    {
        self.cloudWatchEventDetailType = cloudWatchEventDetailType
        self.cloudWatchEventId = cloudWatchEventId
        self.cloudWatchEventSource = cloudWatchEventSource
        self.codeDeployApplication = codeDeployApplication
        self.codeDeployDeploymentGroup = codeDeployDeploymentGroup
        self.codeDeployDeploymentId = codeDeployDeploymentId
        self.codeDeployInstanceGroupId = codeDeployInstanceGroupId
        self.codeDeployState = codeDeployState
        self.ebsCause = ebsCause
        self.ebsEvent = ebsEvent
        self.ebsRequestId = ebsRequestId
        self.ebsResult = ebsResult
        self.ec2State = ec2State
        self.endTime = endTime
        self.healthEventArn = healthEventArn
        self.healthEventDescription = healthEventDescription
        self.healthEventTypeCategory = healthEventTypeCategory
        self.healthEventTypeCode = healthEventTypeCode
        self.healthService = healthService
        self.id = id
        self.lineTime = lineTime
        self.logFilter = logFilter
        self.logGroup = logGroup
        self.logText = logText
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.rdsEventCategories = rdsEventCategories
        self.rdsEventMessage = rdsEventMessage
        self.s3EventName = s3EventName
        self.sourceARN = sourceARN
        self.sourceType = sourceType
        self.startTime = startTime
        self.statesArn = statesArn
        self.statesExecutionArn = statesExecutionArn
        self.statesInput = statesInput
        self.statesStatus = statesStatus
        self.unit = unit
        self.value = value
        self.xRayErrorPercent = xRayErrorPercent
        self.xRayFaultPercent = xRayFaultPercent
        self.xRayNodeName = xRayNodeName
        self.xRayNodeType = xRayNodeType
        self.xRayRequestAverageLatency = xRayRequestAverageLatency
        self.xRayRequestCount = xRayRequestCount
        self.xRayThrottlePercent = xRayThrottlePercent
    }
}
