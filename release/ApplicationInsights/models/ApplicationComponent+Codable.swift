// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationComponent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case componentName = "ComponentName"
        case componentRemarks = "ComponentRemarks"
        case detectedWorkload = "DetectedWorkload"
        case monitor = "Monitor"
        case osType = "OsType"
        case resourceType = "ResourceType"
        case tier = "Tier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentName = componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let componentRemarks = componentRemarks {
            try encodeContainer.encode(componentRemarks, forKey: .componentRemarks)
        }
        if let detectedWorkload = detectedWorkload {
            var detectedWorkloadContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .detectedWorkload)
            for (dictKey0, detectedworkload0) in detectedWorkload {
                try detectedWorkloadContainer.encode(detectedworkload0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let monitor = monitor {
            try encodeContainer.encode(monitor, forKey: .monitor)
        }
        if let osType = osType {
            try encodeContainer.encode(osType.rawValue, forKey: .osType)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let tier = tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let componentRemarksDecoded = try containerValues.decodeIfPresent(String.self, forKey: .componentRemarks)
        componentRemarks = componentRemarksDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let osTypeDecoded = try containerValues.decodeIfPresent(OsType.self, forKey: .osType)
        osType = osTypeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(Tier.self, forKey: .tier)
        tier = tierDecoded
        let monitorDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .monitor)
        monitor = monitorDecoded
        let detectedWorkloadContainer = try containerValues.decodeIfPresent([String:[String:String]?].self, forKey: .detectedWorkload)
        var detectedWorkloadDecoded0: [String:[String:String]?]? = nil
        if let detectedWorkloadContainer = detectedWorkloadContainer {
            detectedWorkloadDecoded0 = [String:[String:String]?]()
            for (key0, workloadmetadata0) in detectedWorkloadContainer {
                var workloadmetadata0Decoded0 = [String:String]()
                if let workloadmetadata0 = workloadmetadata0 {
                    for (key1, metadatavalue1) in workloadmetadata0 {
                        workloadmetadata0Decoded0[key1] = metadatavalue1
                    }
                }
                detectedWorkloadDecoded0?[key0] = workloadmetadata0Decoded0
            }
        }
        detectedWorkload = detectedWorkloadDecoded0
    }
}
