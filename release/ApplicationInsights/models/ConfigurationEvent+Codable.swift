// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigurationEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventDetail = "EventDetail"
        case eventResourceName = "EventResourceName"
        case eventResourceType = "EventResourceType"
        case eventStatus = "EventStatus"
        case eventTime = "EventTime"
        case monitoredResourceARN = "MonitoredResourceARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDetail = eventDetail {
            try encodeContainer.encode(eventDetail, forKey: .eventDetail)
        }
        if let eventResourceName = eventResourceName {
            try encodeContainer.encode(eventResourceName, forKey: .eventResourceName)
        }
        if let eventResourceType = eventResourceType {
            try encodeContainer.encode(eventResourceType.rawValue, forKey: .eventResourceType)
        }
        if let eventStatus = eventStatus {
            try encodeContainer.encode(eventStatus.rawValue, forKey: .eventStatus)
        }
        if let eventTime = eventTime {
            try encodeContainer.encode(eventTime.timeIntervalSince1970, forKey: .eventTime)
        }
        if let monitoredResourceARN = monitoredResourceARN {
            try encodeContainer.encode(monitoredResourceARN, forKey: .monitoredResourceARN)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoredResourceARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoredResourceARN)
        monitoredResourceARN = monitoredResourceARNDecoded
        let eventStatusDecoded = try containerValues.decodeIfPresent(ConfigurationEventStatus.self, forKey: .eventStatus)
        eventStatus = eventStatusDecoded
        let eventResourceTypeDecoded = try containerValues.decodeIfPresent(ConfigurationEventResourceType.self, forKey: .eventResourceType)
        eventResourceType = eventResourceTypeDecoded
        let eventTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventTime)
        eventTime = eventTimeDecoded
        let eventDetailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventDetail)
        eventDetail = eventDetailDecoded
        let eventResourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventResourceName)
        eventResourceName = eventResourceNameDecoded
    }
}
