// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLogPatternSetsOutputBody: Equatable {
    public let resourceGroupName: String?
    public let logPatternSets: [String]?
    public let nextToken: String?
}

extension ListLogPatternSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logPatternSets = "LogPatternSets"
        case nextToken = "NextToken"
        case resourceGroupName = "ResourceGroupName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let logPatternSetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .logPatternSets)
        var logPatternSetsDecoded0:[String]? = nil
        if let logPatternSetsContainer = logPatternSetsContainer {
            logPatternSetsDecoded0 = [String]()
            for string0 in logPatternSetsContainer {
                logPatternSetsDecoded0?.append(string0)
            }
        }
        logPatternSets = logPatternSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
