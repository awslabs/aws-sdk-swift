// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLogPatternsOutputBody: Equatable {
    public let resourceGroupName: String?
    public let logPatterns: [LogPattern]?
    public let nextToken: String?
}

extension ListLogPatternsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logPatterns = "LogPatterns"
        case nextToken = "NextToken"
        case resourceGroupName = "ResourceGroupName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let logPatternsContainer = try containerValues.decodeIfPresent([LogPattern].self, forKey: .logPatterns)
        var logPatternsDecoded0:[LogPattern]? = nil
        if let logPatternsContainer = logPatternsContainer {
            logPatternsDecoded0 = [LogPattern]()
            for structure0 in logPatternsContainer {
                logPatternsDecoded0?.append(structure0)
            }
        }
        logPatterns = logPatternsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
