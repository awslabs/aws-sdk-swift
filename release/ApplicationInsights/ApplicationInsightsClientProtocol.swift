// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon CloudWatch Application Insights</fullname>
///          <p> Amazon CloudWatch Application Insights is a service that
///          helps you detect common problems with your applications. It
///          enables you to pinpoint the source of issues in your applications (built with technologies
///          such as Microsoft IIS, .NET, and Microsoft SQL Server), by providing key insights into
///          detected problems.</p>
///          <p>After you onboard your application, CloudWatch Application Insights identifies,
///          recommends, and sets up metrics and logs. It continuously analyzes and
///          correlates your metrics and logs for unusual behavior to surface actionable problems with
///          your application. For example, if your application is slow and unresponsive and leading to
///          HTTP 500 errors in your Application Load Balancer (ALB), Application Insights informs you
///          that a memory pressure problem with your SQL Server database is occurring. It bases this
///          analysis on impactful metrics and log errors. </p>
public protocol ApplicationInsightsClientProtocol {
    /// <p>Adds an application that is created from a resource group.</p>
    func createApplication(input: CreateApplicationInput, completion: @escaping (SdkResult<CreateApplicationOutputResponse, CreateApplicationOutputError>) -> Void)
    /// <p>Creates a custom component by grouping similar standalone instances to monitor.</p>
    func createComponent(input: CreateComponentInput, completion: @escaping (SdkResult<CreateComponentOutputResponse, CreateComponentOutputError>) -> Void)
    /// <p>Adds an log pattern to a <code>LogPatternSet</code>.</p>
    func createLogPattern(input: CreateLogPatternInput, completion: @escaping (SdkResult<CreateLogPatternOutputResponse, CreateLogPatternOutputError>) -> Void)
    /// <p>Removes the specified application from monitoring. Does not delete the application.</p>
    func deleteApplication(input: DeleteApplicationInput, completion: @escaping (SdkResult<DeleteApplicationOutputResponse, DeleteApplicationOutputError>) -> Void)
    /// <p>Ungroups a custom component. When you ungroup custom components, all applicable
    ///          monitors that are set up for the component are removed and the instances revert to their standalone status.</p>
    func deleteComponent(input: DeleteComponentInput, completion: @escaping (SdkResult<DeleteComponentOutputResponse, DeleteComponentOutputError>) -> Void)
    /// <p>Removes the specified log pattern from a <code>LogPatternSet</code>.</p>
    func deleteLogPattern(input: DeleteLogPatternInput, completion: @escaping (SdkResult<DeleteLogPatternOutputResponse, DeleteLogPatternOutputError>) -> Void)
    /// <p>Describes the application.</p>
    func describeApplication(input: DescribeApplicationInput, completion: @escaping (SdkResult<DescribeApplicationOutputResponse, DescribeApplicationOutputError>) -> Void)
    /// <p>Describes a component and lists the resources that are grouped together in a component.</p>
    func describeComponent(input: DescribeComponentInput, completion: @escaping (SdkResult<DescribeComponentOutputResponse, DescribeComponentOutputError>) -> Void)
    /// <p>Describes the monitoring configuration of the component.</p>
    func describeComponentConfiguration(input: DescribeComponentConfigurationInput, completion: @escaping (SdkResult<DescribeComponentConfigurationOutputResponse, DescribeComponentConfigurationOutputError>) -> Void)
    /// <p>Describes the recommended monitoring configuration of the component.</p>
    func describeComponentConfigurationRecommendation(input: DescribeComponentConfigurationRecommendationInput, completion: @escaping (SdkResult<DescribeComponentConfigurationRecommendationOutputResponse, DescribeComponentConfigurationRecommendationOutputError>) -> Void)
    /// <p>Describe a specific log pattern from a <code>LogPatternSet</code>.</p>
    func describeLogPattern(input: DescribeLogPatternInput, completion: @escaping (SdkResult<DescribeLogPatternOutputResponse, DescribeLogPatternOutputError>) -> Void)
    /// <p>Describes an anomaly or error with the application.</p>
    func describeObservation(input: DescribeObservationInput, completion: @escaping (SdkResult<DescribeObservationOutputResponse, DescribeObservationOutputError>) -> Void)
    /// <p>Describes an application problem.</p>
    func describeProblem(input: DescribeProblemInput, completion: @escaping (SdkResult<DescribeProblemOutputResponse, DescribeProblemOutputError>) -> Void)
    /// <p>Describes the anomalies or errors associated with the problem.</p>
    func describeProblemObservations(input: DescribeProblemObservationsInput, completion: @escaping (SdkResult<DescribeProblemObservationsOutputResponse, DescribeProblemObservationsOutputError>) -> Void)
    /// <p>Lists the IDs of the applications that you are monitoring. </p>
    func listApplications(input: ListApplicationsInput, completion: @escaping (SdkResult<ListApplicationsOutputResponse, ListApplicationsOutputError>) -> Void)
    /// <p>Lists the auto-grouped, standalone, and custom components of the application.</p>
    func listComponents(input: ListComponentsInput, completion: @escaping (SdkResult<ListComponentsOutputResponse, ListComponentsOutputError>) -> Void)
    /// <p>
    ///          Lists the INFO, WARN, and ERROR events for periodic configuration updates performed by Application Insights. Examples of events represented are:
    ///       </p>
    ///          <ul>
    ///             <li>
    ///                <p>INFO: creating a new alarm or updating an alarm threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>WARN: alarm not created due to insufficient data points used to predict thresholds.</p>
    ///             </li>
    ///             <li>
    ///                <p>ERROR: alarm not created due to permission errors or exceeding quotas. </p>
    ///             </li>
    ///          </ul>
    func listConfigurationHistory(input: ListConfigurationHistoryInput, completion: @escaping (SdkResult<ListConfigurationHistoryOutputResponse, ListConfigurationHistoryOutputError>) -> Void)
    /// <p>Lists the log patterns in the specific log <code>LogPatternSet</code>.</p>
    func listLogPatterns(input: ListLogPatternsInput, completion: @escaping (SdkResult<ListLogPatternsOutputResponse, ListLogPatternsOutputError>) -> Void)
    /// <p>Lists the log pattern sets in the specific application.</p>
    func listLogPatternSets(input: ListLogPatternSetsInput, completion: @escaping (SdkResult<ListLogPatternSetsOutputResponse, ListLogPatternSetsOutputError>) -> Void)
    /// <p>Lists the problems with your application.</p>
    func listProblems(input: ListProblemsInput, completion: @escaping (SdkResult<ListProblemsOutputResponse, ListProblemsOutputError>) -> Void)
    /// <p>Retrieve a list of the tags (keys and values) that are associated with a specified
    ///          application. A <i>tag</i> is a label that you optionally define and associate
    ///          with an application. Each tag consists of a required <i>tag key</i> and an
    ///          optional associated <i>tag value</i>. A tag key is a general label that
    ///          acts as a category for more specific tag values. A tag value acts as a descriptor within
    ///          a tag key.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Add one or more tags (keys and values) to a specified application. A
    ///          <i>tag</i> is a label that you optionally define and associate with an
    ///          application. Tags can help you categorize and manage application in different ways, such as
    ///          by purpose, owner, environment, or other criteria. </p>
    ///          <p>Each tag consists of a required <i>tag key</i> and an
    ///          associated <i>tag value</i>, both of which you define. A tag key is a
    ///          general label that acts as a category for more specific tag values. A tag value acts as
    ///          a descriptor within a tag key.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Remove one or more tags (keys and values) from a specified application.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the application.</p>
    func updateApplication(input: UpdateApplicationInput, completion: @escaping (SdkResult<UpdateApplicationOutputResponse, UpdateApplicationOutputError>) -> Void)
    /// <p>Updates the custom component name and/or the list of resources that make up the
    ///          component.</p>
    func updateComponent(input: UpdateComponentInput, completion: @escaping (SdkResult<UpdateComponentOutputResponse, UpdateComponentOutputError>) -> Void)
    /// <p>Updates the monitoring configurations for the component. The configuration input parameter
    ///          is an escaped JSON of the configuration and should match the schema of what is returned
    ///          by <code>DescribeComponentConfigurationRecommendation</code>. </p>
    func updateComponentConfiguration(input: UpdateComponentConfigurationInput, completion: @escaping (SdkResult<UpdateComponentConfigurationOutputResponse, UpdateComponentConfigurationOutputError>) -> Void)
    /// <p>Adds a log pattern to a <code>LogPatternSet</code>.</p>
    func updateLogPattern(input: UpdateLogPatternInput, completion: @escaping (SdkResult<UpdateLogPatternOutputResponse, UpdateLogPatternOutputError>) -> Void)
}
