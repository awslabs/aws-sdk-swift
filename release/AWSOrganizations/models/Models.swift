// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AWSOrganizationsNotInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AWSOrganizationsNotInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your account isn't a member of an organization. To make this request, you must use the credentials of an account that belongs to an organization.
public struct AWSOrganizationsNotInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AWSOrganizationsNotInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AWSOrganizationsNotInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AcceptHandshakeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = self.handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

extension AcceptHandshakeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AcceptHandshakeInput: Swift.Equatable {
    /// The unique identifier (ID) of the handshake that you want to accept. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init (
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct AcceptHandshakeInputBody: Swift.Equatable {
    let handshakeId: Swift.String?
}

extension AcceptHandshakeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension AcceptHandshakeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptHandshakeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccessDeniedForDependencyException" : self = .accessDeniedForDependencyException(try AccessDeniedForDependencyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptHandshakeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accessDeniedForDependencyException(AccessDeniedForDependencyException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptHandshakeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AcceptHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct AcceptHandshakeOutputResponse: Swift.Equatable {
    /// A structure that contains details about the accepted handshake.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct AcceptHandshakeOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension AcceptHandshakeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see [Access Management](https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the IAM User Guide.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccessDeniedForDependencyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedForDependencyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation that you attempted requires you to have the iam:CreateServiceLinkedRole for organizations.amazonaws.com permission so that Organizations can create the required service-linked role. You don't have that permission.
public struct AccessDeniedForDependencyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var reason: OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct AccessDeniedForDependencyExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason?
}

extension AccessDeniedForDependencyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension OrganizationsClientTypes {
    public enum AccessDeniedForDependencyExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDeniedDuringCreateServiceLinkedRole
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDeniedForDependencyExceptionReason] {
            return [
                .accessDeniedDuringCreateServiceLinkedRole,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDeniedDuringCreateServiceLinkedRole: return "ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessDeniedForDependencyExceptionReason(rawValue: rawValue) ?? AccessDeniedForDependencyExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.Account: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case email = "Email"
        case id = "Id"
        case joinedMethod = "JoinedMethod"
        case joinedTimestamp = "JoinedTimestamp"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let joinedMethod = self.joinedMethod {
            try encodeContainer.encode(joinedMethod.rawValue, forKey: .joinedMethod)
        }
        if let joinedTimestamp = self.joinedTimestamp {
            try encodeContainer.encodeTimestamp(joinedTimestamp, format: .epochSeconds, forKey: .joinedTimestamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.AccountStatus.self, forKey: .status)
        status = statusDecoded
        let joinedMethodDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.AccountJoinedMethod.self, forKey: .joinedMethod)
        joinedMethod = joinedMethodDecoded
        let joinedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .joinedTimestamp)
        joinedTimestamp = joinedTimestampDecoded
    }
}

extension OrganizationsClientTypes.Account: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Account(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), joinedMethod: \(Swift.String(describing: joinedMethod)), joinedTimestamp: \(Swift.String(describing: joinedTimestamp)), status: \(Swift.String(describing: status)), email: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Contains information about an Amazon Web Services account that is a member of an organization.
    public struct Account: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the account. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The email address associated with the Amazon Web Services account. The [regex pattern](http://wikipedia.org/wiki/regex) for this parameter is a string of characters that represents a standard internet email address.
        public var email: Swift.String?
        /// The unique identifier (ID) of the account. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var id: Swift.String?
        /// The method by which the account joined the organization.
        public var joinedMethod: OrganizationsClientTypes.AccountJoinedMethod?
        /// The date the account became a part of the organization.
        public var joinedTimestamp: ClientRuntime.Date?
        /// The friendly name of the account. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The status of the account in the organization.
        public var status: OrganizationsClientTypes.AccountStatus?

        public init (
            arn: Swift.String? = nil,
            email: Swift.String? = nil,
            id: Swift.String? = nil,
            joinedMethod: OrganizationsClientTypes.AccountJoinedMethod? = nil,
            joinedTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: OrganizationsClientTypes.AccountStatus? = nil
        )
        {
            self.arn = arn
            self.email = email
            self.id = id
            self.joinedMethod = joinedMethod
            self.joinedTimestamp = joinedTimestamp
            self.name = name
            self.status = status
        }
    }

}

extension AccountAlreadyClosedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountAlreadyClosedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You attempted to close an account that is already closed.
public struct AccountAlreadyClosedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountAlreadyClosedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountAlreadyClosedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccountAlreadyRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account is already a delegated administrator for this Amazon Web Services service.
public struct AccountAlreadyRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountAlreadyRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountAlreadyRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum AccountJoinedMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case invited
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountJoinedMethod] {
            return [
                .created,
                .invited,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .invited: return "INVITED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountJoinedMethod(rawValue: rawValue) ?? AccountJoinedMethod.sdkUnknown(rawValue)
        }
    }
}

extension AccountNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find an Amazon Web Services account with the AccountId that you specified, or the account whose credentials you used to make this request isn't a member of an organization.
public struct AccountNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccountNotRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountNotRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified account is not a delegated administrator for this Amazon Web Services service.
public struct AccountNotRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountNotRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountNotRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccountOwnerNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountOwnerNotVerifiedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't invite an existing account to your organization until you verify that you own the email address associated with the management account. For more information, see [Email Address Verification](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_create.html#about-email-verification) in the Organizations User Guide.
public struct AccountOwnerNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountOwnerNotVerifiedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountOwnerNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum AccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case pendingClosure
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountStatus] {
            return [
                .active,
                .pendingClosure,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pendingClosure: return "PENDING_CLOSURE"
            case .suspended: return "SUSPENDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountStatus(rawValue: rawValue) ?? AccountStatus.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes {
    public enum ActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addOrganizationsServiceLinkedRole
        case approveAllFeatures
        case enableAllFeatures
        case inviteAccountToOrganization
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .addOrganizationsServiceLinkedRole,
                .approveAllFeatures,
                .enableAllFeatures,
                .inviteAccountToOrganization,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addOrganizationsServiceLinkedRole: return "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
            case .approveAllFeatures: return "APPROVE_ALL_FEATURES"
            case .enableAllFeatures: return "ENABLE_ALL_FEATURES"
            case .inviteAccountToOrganization: return "INVITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
        }
    }
}

extension AlreadyInOrganizationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AlreadyInOrganizationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This account is already a member of an organization. An account can belong to only one organization at a time.
public struct AlreadyInOrganizationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyInOrganizationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyInOrganizationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AttachPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

extension AttachPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachPolicyInput: Swift.Equatable {
    /// The unique identifier (ID) of the policy that you want to attach to the target. You can get the ID for the policy by calling the [ListPolicies] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?
    /// The unique identifier (ID) of the root, OU, or account that you want to attach the policy to. You can get the ID by calling the [ListRoots], [ListOrganizationalUnitsForParent], or [ListAccounts] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init (
        policyId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

struct AttachPolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
    let targetId: Swift.String?
}

extension AttachPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension AttachPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyAttachmentException" : self = .duplicatePolicyAttachmentException(try DuplicatePolicyAttachmentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotEnabledException" : self = .policyTypeNotEnabledException(try PolicyTypeNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachPolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyAttachmentException(DuplicatePolicyAttachmentException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotFoundException(PolicyNotFoundException)
    case policyTypeNotEnabledException(PolicyTypeNotEnabledException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension CancelHandshakeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = self.handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

extension CancelHandshakeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelHandshakeInput: Swift.Equatable {
    /// The unique identifier (ID) of the handshake that you want to cancel. You can get the ID from the [ListHandshakesForOrganization] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init (
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct CancelHandshakeInputBody: Swift.Equatable {
    let handshakeId: Swift.String?
}

extension CancelHandshakeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension CancelHandshakeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelHandshakeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelHandshakeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelHandshakeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct CancelHandshakeOutputResponse: Swift.Equatable {
    /// A structure that contains details about the handshake that you canceled.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct CancelHandshakeOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension CancelHandshakeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension OrganizationsClientTypes.Child: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ChildType.self, forKey: .type)
        type = typeDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains a list of child entities, either OUs or accounts.
    public struct Child: Swift.Equatable {
        /// The unique identifier (ID) of this child entity. The [regex pattern](http://wikipedia.org/wiki/regex) for a child ID string requires one of the following:
        ///
        /// * Account - A string that consists of exactly 12 digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The type of this child entity.
        public var type: OrganizationsClientTypes.ChildType?

        public init (
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.ChildType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension ChildNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ChildNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find an organizational unit (OU) or Amazon Web Services account with the ChildId that you specified.
public struct ChildNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ChildNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ChildNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum ChildType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case organizationalUnit
        case sdkUnknown(Swift.String)

        public static var allCases: [ChildType] {
            return [
                .account,
                .organizationalUnit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChildType(rawValue: rawValue) ?? ChildType.sdkUnknown(rawValue)
        }
    }
}

extension CloseAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
    }
}

extension CloseAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CloseAccountInput: Swift.Equatable {
    /// Retrieves the Amazon Web Services account Id for the current CloseAccount API request.
    /// This member is required.
    public var accountId: Swift.String?

    public init (
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

struct CloseAccountInputBody: Swift.Equatable {
    let accountId: Swift.String?
}

extension CloseAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension CloseAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CloseAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountAlreadyClosedException" : self = .accountAlreadyClosedException(try AccountAlreadyClosedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CloseAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountAlreadyClosedException(AccountAlreadyClosedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case conflictException(ConflictException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CloseAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CloseAccountOutputResponse: Swift.Equatable {

    public init () { }
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The target of the operation is currently being modified by a different request. Try again later.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because it conflicts with the current state of the specified resource.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConstraintViolationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConstraintViolationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Performing this operation violates a minimum or maximum value limit. For example, attempting to remove the last service control policy (SCP) from an OU or root, inviting or creating too many accounts to the organization, or attaching too many policies to an account, OU, or root. This exception includes a reason that contains additional information about the violated limit: Some of the reasons in the following list might not be applicable to this specific API or operation.
///
/// * ACCOUNT_CANNOT_LEAVE_ORGANIZATION: You attempted to remove the management account from the organization. You can't remove the management account. Instead, after you remove all member accounts, delete the organization itself.
///
/// * ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION: You attempted to remove an account from the organization that doesn't yet have enough information to exist as a standalone account. This account requires you to first complete phone verification. Follow the steps at [Removing a member account from your organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master) in the Organizations User Guide.
///
/// * ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of accounts that you can create in one day.
///
/// * ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number of accounts in an organization. If you need more accounts, contact [Amazon Web Services Support](https://docs.aws.amazon.com/support/home#/) to request an increase in your limit. Or the number of invitations that you tried to send would cause you to exceed the limit of accounts in your organization. Send fewer invitations or contact Amazon Web Services Support to request an increase in the number of accounts. Deleted and closed accounts still count toward your limit. If you get this exception when running a command immediately after creating the organization, wait one hour and try again. After an hour, if the command continues to fail with this error, contact [Amazon Web Services Support](https://docs.aws.amazon.com/support/home#/).
///
/// * CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR: You attempted to register the management account of the organization as a delegated administrator for an Amazon Web Services service integrated with Organizations. You can designate only a member account as a delegated administrator.
///
/// * CANNOT_CLOSE_MANAGEMENT_ACCOUNT: You attempted to close the management account. To close the management account for the organization, you must first either remove or close all member accounts in the organization. Follow standard account closure process using root credentials.
///
/// * CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG: You attempted to remove an account that is registered as a delegated administrator for a service integrated with your organization. To complete this operation, you must first deregister this account as a delegated administrator.
///
/// * CLOSE_ACCOUNT_QUOTA_EXCEEDED: You have exceeded close account quota for the past 30 days.
///
/// * CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED: You attempted to exceed the number of accounts that you can close at a time.
///
/// * CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION: To create an organization in the specified region, you must enable all features mode.
///
/// * DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE: You attempted to register an Amazon Web Services account as a delegated administrator for an Amazon Web Services service that already has a delegated administrator. To complete this operation, you must first deregister any existing delegated administrators for this service.
///
/// * EMAIL_VERIFICATION_CODE_EXPIRED: The email verification code is only valid for a limited period of time. You must resubmit the request and generate a new verfication code.
///
/// * HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes that you can send in one day.
///
/// * INVALID_PAYMENT_INSTRUMENT: You cannot remove an account because no supported payment method is associated with the account. Amazon Web Services does not support cards issued by financial institutions in Russia or Belarus. For more information, see [Managing your Amazon Web Services payments](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-general.html).
///
/// * MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE: To create an account in this organization, you first must migrate the organization's management account to the marketplace that corresponds to the management account's address. For example, accounts with India addresses must be associated with the AISPL marketplace. All accounts in an organization must be associated with the same marketplace.
///
/// * MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE: Applies only to the Amazon Web Services /> Regions in China. To create an organization, the master must have a valid business license. For more information, contact customer support.
///
/// * MASTER_ACCOUNT_MISSING_CONTACT_INFO: To complete this operation, you must first provide a valid contact address and phone number for the management account. Then try the operation again.
///
/// * MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED: To complete this operation, the management account must have an associated account in the Amazon Web Services GovCloud (US-West) Region. For more information, see [Organizations](https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html) in the Amazon Web Services GovCloud User Guide.
///
/// * MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To create an organization with this management account, you first must associate a valid payment instrument, such as a credit card, with the account. Follow the steps at [To leave an organization when all required account information has not yet been provided](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info) in the Organizations User Guide.
///
/// * MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED: You attempted to register more delegated administrators than allowed for the service principal.
///
/// * MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to exceed the number of policies of a certain type that can be attached to an entity at one time.
///
/// * MAX_TAG_LIMIT_EXCEEDED: You have exceeded the number of tags allowed on this resource.
///
/// * MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To complete this operation with this member account, you first must associate a valid payment instrument, such as a credit card, with the account. Follow the steps at [To leave an organization when all required account information has not yet been provided](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info) in the Organizations User Guide.
///
/// * MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to detach a policy from an entity that would cause the entity to have fewer than the minimum number of policies of a certain type required.
///
/// * ORGANIZATION_NOT_IN_ALL_FEATURES_MODE: You attempted to perform an operation that requires the organization to be configured to support all features. An organization that supports only consolidated billing features can't perform this operation.
///
/// * OU_DEPTH_LIMIT_EXCEEDED: You attempted to create an OU tree that is too many levels deep.
///
/// * OU_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of OUs that you can have in an organization.
///
/// * POLICY_CONTENT_LIMIT_EXCEEDED: You attempted to create a policy that is larger than the maximum size.
///
/// * POLICY_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of policies that you can have in an organization.
///
/// * SERVICE_ACCESS_NOT_ENABLED: You attempted to register a delegated administrator before you enabled service access. Call the EnableAWSServiceAccess API first.
///
/// * TAG_POLICY_VIOLATION: You attempted to create or update a resource with tags that are not compliant with the tag policy requirements for this account.
///
/// * WAIT_PERIOD_ACTIVE: After you create an Amazon Web Services account, there is a waiting period before you can remove it from the organization. If you get an error that indicates that a wait period is required, try again in a few days.
public struct ConstraintViolationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var reason: OrganizationsClientTypes.ConstraintViolationExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.ConstraintViolationExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct ConstraintViolationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: OrganizationsClientTypes.ConstraintViolationExceptionReason?
}

extension ConstraintViolationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ConstraintViolationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension OrganizationsClientTypes {
    public enum ConstraintViolationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountCannotLeaveOrganization
        case accountCannotLeaveWithoutEula
        case accountCannotLeaveWithoutPhoneVerification
        case accountCreationRateLimitExceeded
        case accountNumberLimitExceeded
        case cannotCloseManagementAccount
        case cannotRegisterMasterAsDelegatedAdministrator
        case cannotRemoveDelegatedAdministratorFromOrg
        case closeAccountQuotaExceeded
        case closeAccountRequestsLimitExceeded
        case createOrganizationInBillingModeUnsupportedRegion
        case delegatedAdministratorExistsForThisService
        case emailVerificationCodeExpired
        case handshakeRateLimitExceeded
        case invalidPaymentInstrument
        case masterAccountAddressDoesNotMatchMarketplace
        case masterAccountMissingBusinessLicense
        case masterAccountMissingContactInfo
        case masterAccountNotGovcloudEnabled
        case masterAccountPaymentInstrumentRequired
        case maxDelegatedAdministratorsForServiceLimitExceeded
        case maxPolicyTypeAttachmentLimitExceeded
        case maxTagLimitExceeded
        case memberAccountPaymentInstrumentRequired
        case minPolicyTypeAttachmentLimitExceeded
        case organizationNotInAllFeaturesMode
        case ouDepthLimitExceeded
        case ouNumberLimitExceeded
        case policyContentLimitExceeded
        case policyNumberLimitExceeded
        case serviceAccessNotEnabled
        case tagPolicyViolation
        case waitPeriodActive
        case sdkUnknown(Swift.String)

        public static var allCases: [ConstraintViolationExceptionReason] {
            return [
                .accountCannotLeaveOrganization,
                .accountCannotLeaveWithoutEula,
                .accountCannotLeaveWithoutPhoneVerification,
                .accountCreationRateLimitExceeded,
                .accountNumberLimitExceeded,
                .cannotCloseManagementAccount,
                .cannotRegisterMasterAsDelegatedAdministrator,
                .cannotRemoveDelegatedAdministratorFromOrg,
                .closeAccountQuotaExceeded,
                .closeAccountRequestsLimitExceeded,
                .createOrganizationInBillingModeUnsupportedRegion,
                .delegatedAdministratorExistsForThisService,
                .emailVerificationCodeExpired,
                .handshakeRateLimitExceeded,
                .invalidPaymentInstrument,
                .masterAccountAddressDoesNotMatchMarketplace,
                .masterAccountMissingBusinessLicense,
                .masterAccountMissingContactInfo,
                .masterAccountNotGovcloudEnabled,
                .masterAccountPaymentInstrumentRequired,
                .maxDelegatedAdministratorsForServiceLimitExceeded,
                .maxPolicyTypeAttachmentLimitExceeded,
                .maxTagLimitExceeded,
                .memberAccountPaymentInstrumentRequired,
                .minPolicyTypeAttachmentLimitExceeded,
                .organizationNotInAllFeaturesMode,
                .ouDepthLimitExceeded,
                .ouNumberLimitExceeded,
                .policyContentLimitExceeded,
                .policyNumberLimitExceeded,
                .serviceAccessNotEnabled,
                .tagPolicyViolation,
                .waitPeriodActive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountCannotLeaveOrganization: return "ACCOUNT_CANNOT_LEAVE_ORGANIZATION"
            case .accountCannotLeaveWithoutEula: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA"
            case .accountCannotLeaveWithoutPhoneVerification: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION"
            case .accountCreationRateLimitExceeded: return "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED"
            case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
            case .cannotCloseManagementAccount: return "CANNOT_CLOSE_MANAGEMENT_ACCOUNT"
            case .cannotRegisterMasterAsDelegatedAdministrator: return "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR"
            case .cannotRemoveDelegatedAdministratorFromOrg: return "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG"
            case .closeAccountQuotaExceeded: return "CLOSE_ACCOUNT_QUOTA_EXCEEDED"
            case .closeAccountRequestsLimitExceeded: return "CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED"
            case .createOrganizationInBillingModeUnsupportedRegion: return "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION"
            case .delegatedAdministratorExistsForThisService: return "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE"
            case .emailVerificationCodeExpired: return "EMAIL_VERIFICATION_CODE_EXPIRED"
            case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
            case .invalidPaymentInstrument: return "INVALID_PAYMENT_INSTRUMENT"
            case .masterAccountAddressDoesNotMatchMarketplace: return "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE"
            case .masterAccountMissingBusinessLicense: return "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE"
            case .masterAccountMissingContactInfo: return "MASTER_ACCOUNT_MISSING_CONTACT_INFO"
            case .masterAccountNotGovcloudEnabled: return "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED"
            case .masterAccountPaymentInstrumentRequired: return "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
            case .maxDelegatedAdministratorsForServiceLimitExceeded: return "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED"
            case .maxPolicyTypeAttachmentLimitExceeded: return "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
            case .maxTagLimitExceeded: return "MAX_TAG_LIMIT_EXCEEDED"
            case .memberAccountPaymentInstrumentRequired: return "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
            case .minPolicyTypeAttachmentLimitExceeded: return "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
            case .organizationNotInAllFeaturesMode: return "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE"
            case .ouDepthLimitExceeded: return "OU_DEPTH_LIMIT_EXCEEDED"
            case .ouNumberLimitExceeded: return "OU_NUMBER_LIMIT_EXCEEDED"
            case .policyContentLimitExceeded: return "POLICY_CONTENT_LIMIT_EXCEEDED"
            case .policyNumberLimitExceeded: return "POLICY_NUMBER_LIMIT_EXCEEDED"
            case .serviceAccessNotEnabled: return "SERVICE_ACCESS_NOT_ENABLED"
            case .tagPolicyViolation: return "TAG_POLICY_VIOLATION"
            case .waitPeriodActive: return "WAIT_PERIOD_ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConstraintViolationExceptionReason(rawValue: rawValue) ?? ConstraintViolationExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes {
    public enum CreateAccountFailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountLimitExceeded
        case concurrentAccountModification
        case emailAlreadyExists
        case failedBusinessValidation
        case govcloudAccountAlreadyExists
        case internalFailure
        case invalidAddress
        case invalidEmail
        case invalidIdentityForBusinessValidation
        case invalidPaymentInstrument
        case missingBusinessValidation
        case missingPaymentInstrument
        case pendingBusinessValidationv
        case unknownBusinessValidation
        case updateExistingResourcePolicyWithTagsNotSupported
        case sdkUnknown(Swift.String)

        public static var allCases: [CreateAccountFailureReason] {
            return [
                .accountLimitExceeded,
                .concurrentAccountModification,
                .emailAlreadyExists,
                .failedBusinessValidation,
                .govcloudAccountAlreadyExists,
                .internalFailure,
                .invalidAddress,
                .invalidEmail,
                .invalidIdentityForBusinessValidation,
                .invalidPaymentInstrument,
                .missingBusinessValidation,
                .missingPaymentInstrument,
                .pendingBusinessValidationv,
                .unknownBusinessValidation,
                .updateExistingResourcePolicyWithTagsNotSupported,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountLimitExceeded: return "ACCOUNT_LIMIT_EXCEEDED"
            case .concurrentAccountModification: return "CONCURRENT_ACCOUNT_MODIFICATION"
            case .emailAlreadyExists: return "EMAIL_ALREADY_EXISTS"
            case .failedBusinessValidation: return "FAILED_BUSINESS_VALIDATION"
            case .govcloudAccountAlreadyExists: return "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .invalidAddress: return "INVALID_ADDRESS"
            case .invalidEmail: return "INVALID_EMAIL"
            case .invalidIdentityForBusinessValidation: return "INVALID_IDENTITY_FOR_BUSINESS_VALIDATION"
            case .invalidPaymentInstrument: return "INVALID_PAYMENT_INSTRUMENT"
            case .missingBusinessValidation: return "MISSING_BUSINESS_VALIDATION"
            case .missingPaymentInstrument: return "MISSING_PAYMENT_INSTRUMENT"
            case .pendingBusinessValidationv: return "PENDING_BUSINESS_VALIDATION"
            case .unknownBusinessValidation: return "UNKNOWN_BUSINESS_VALIDATION"
            case .updateExistingResourcePolicyWithTagsNotSupported: return "UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CreateAccountFailureReason(rawValue: rawValue) ?? CreateAccountFailureReason.sdkUnknown(rawValue)
        }
    }
}

extension CreateAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountInput(iamUserAccessToBilling: \(Swift.String(describing: iamUserAccessToBilling)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)), accountName: \"CONTENT_REDACTED\", email: \"CONTENT_REDACTED\")"}
}

extension CreateAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = self.accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let iamUserAccessToBilling = self.iamUserAccessToBilling {
            try encodeContainer.encode(iamUserAccessToBilling.rawValue, forKey: .iamUserAccessToBilling)
        }
        if let roleName = self.roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAccountInput: Swift.Equatable {
    /// The friendly name of the member account.
    /// This member is required.
    public var accountName: Swift.String?
    /// The email address of the owner to assign to the new member account. This email address must not already be associated with another Amazon Web Services account. You must use a valid email address to complete account creation. The rules for a valid email address:
    ///
    /// * The address must be a minimum of 6 and a maximum of 64 characters long.
    ///
    /// * All characters must be 7-bit ASCII characters.
    ///
    /// * There must be one and only one @ symbol, which separates the local name from the domain name.
    ///
    /// * The local name can't contain any of the following characters: whitespace, " ' ( ) < > [ ] : ; , \ | % &
    ///
    /// * The local name can't begin with a dot (.)
    ///
    /// * The domain name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.)
    ///
    /// * The domain name can't begin or end with a hyphen (-) or dot (.)
    ///
    /// * The domain name must contain at least one dot
    ///
    ///
    /// You can't access the root user of the account or remove an account that was created with an invalid email address.
    /// This member is required.
    public var email: Swift.String?
    /// If set to ALLOW, the new account enables IAM users to access account billing information if they have the required permissions. If set to DENY, only the root user of the new account can access account billing information. For more information, see [Activating Access to the Billing and Cost Management Console](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate) in the Amazon Web Services Billing and Cost Management User Guide. If you don't specify this parameter, the value defaults to ALLOW, and IAM users and roles with the required permissions can access billing information for the new account.
    public var iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    /// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the management account, allowing users in the management account to assume the role, as permitted by the management account administrator. The role has administrator permissions in the new member account. If you don't specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see the following links:
    ///
    /// * [Accessing and Administering the Member Accounts in Your Organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role) in the Organizations User Guide
    ///
    /// * Steps 2 and 3 in [Tutorial: Delegate Access Across Amazon Web Services accounts Using IAM Roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) in the IAM User Guide
    ///
    ///
    /// The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter. The pattern can include uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
    public var roleName: Swift.String?
    /// A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is invalid or if you exceed the maximum allowed number of tags for an account, then the entire request fails and the account is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        accountName: Swift.String? = nil,
        email: Swift.String? = nil,
        iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling? = nil,
        roleName: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

struct CreateAccountInputBody: Swift.Equatable {
    let email: Swift.String?
    let accountName: Swift.String?
    let roleName: Swift.String?
    let iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension CreateAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let iamUserAccessToBillingDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.IAMUserAccessToBilling.self, forKey: .iamUserAccessToBilling)
        iamUserAccessToBilling = iamUserAccessToBillingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct CreateAccountOutputResponse: Swift.Equatable {
    /// A structure that contains details about the request to create an account. This response structure might not be fully populated when you first receive it because account creation is an asynchronous process. You can pass the returned CreateAccountStatus ID as a parameter to [DescribeCreateAccountStatus] to get status about the progress of the request at later times. You can also check the CloudTrail log for the CreateAccountResult event. For more information, see [Monitoring the Activity in Your Organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html) in the Organizations User Guide.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init (
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct CreateAccountOutputResponseBody: Swift.Equatable {
    let createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?
}

extension CreateAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

extension OrganizationsClientTypes {
    public enum CreateAccountState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CreateAccountState] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CreateAccountState(rawValue: rawValue) ?? CreateAccountState.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.CreateAccountStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case accountName = "AccountName"
        case completedTimestamp = "CompletedTimestamp"
        case failureReason = "FailureReason"
        case govCloudAccountId = "GovCloudAccountId"
        case id = "Id"
        case requestedTimestamp = "RequestedTimestamp"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let accountName = self.accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let completedTimestamp = self.completedTimestamp {
            try encodeContainer.encodeTimestamp(completedTimestamp, format: .epochSeconds, forKey: .completedTimestamp)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let govCloudAccountId = self.govCloudAccountId {
            try encodeContainer.encode(govCloudAccountId, forKey: .govCloudAccountId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let requestedTimestamp = self.requestedTimestamp {
            try encodeContainer.encodeTimestamp(requestedTimestamp, format: .epochSeconds, forKey: .requestedTimestamp)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let completedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completedTimestamp)
        completedTimestamp = completedTimestampDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let govCloudAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .govCloudAccountId)
        govCloudAccountId = govCloudAccountIdDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountFailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension OrganizationsClientTypes.CreateAccountStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountStatus(accountId: \(Swift.String(describing: accountId)), completedTimestamp: \(Swift.String(describing: completedTimestamp)), failureReason: \(Swift.String(describing: failureReason)), govCloudAccountId: \(Swift.String(describing: govCloudAccountId)), id: \(Swift.String(describing: id)), requestedTimestamp: \(Swift.String(describing: requestedTimestamp)), state: \(Swift.String(describing: state)), accountName: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Contains the status about a [CreateAccount] or [CreateGovCloudAccount] request to create an Amazon Web Services account or an Amazon Web Services GovCloud (US) account in an organization.
    public struct CreateAccountStatus: Swift.Equatable {
        /// If the account was created successfully, the unique identifier (ID) of the new account. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var accountId: Swift.String?
        /// The account name given to the account when it was created.
        public var accountName: Swift.String?
        /// The date and time that the account was created and the request completed.
        public var completedTimestamp: ClientRuntime.Date?
        /// If the request failed, a description of the reason for the failure.
        ///
        /// * ACCOUNT_LIMIT_EXCEEDED: The account couldn't be created because you reached the limit on the number of accounts in your organization.
        ///
        /// * CONCURRENT_ACCOUNT_MODIFICATION: You already submitted a request with the same information.
        ///
        /// * EMAIL_ALREADY_EXISTS: The account could not be created because another Amazon Web Services account with that email address already exists.
        ///
        /// * FAILED_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization failed to receive business license validation.
        ///
        /// * GOVCLOUD_ACCOUNT_ALREADY_EXISTS: The account in the Amazon Web Services GovCloud (US) Region could not be created because this Region already includes an account with that email address.
        ///
        /// * IDENTITY_INVALID_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization can't complete business license validation because it doesn't have valid identity data.
        ///
        /// * INVALID_ADDRESS: The account could not be created because the address you provided is not valid.
        ///
        /// * INVALID_EMAIL: The account could not be created because the email address you provided is not valid.
        ///
        /// * INVALID_PAYMENT_INSTRUMENT: The Amazon Web Services account that owns your organization does not have a supported payment method associated with the account. Amazon Web Services does not support cards issued by financial institutions in Russia or Belarus. For more information, see [Managing your Amazon Web Services payments](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-general.html).
        ///
        /// * INTERNAL_FAILURE: The account could not be created because of an internal failure. Try again later. If the problem persists, contact Amazon Web Services Customer Support.
        ///
        /// * MISSING_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization has not received Business Validation.
        ///
        /// * MISSING_PAYMENT_INSTRUMENT: You must configure the management account with a valid payment method, such as a credit card.
        ///
        /// * PENDING_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization is still in the process of completing business license validation.
        ///
        /// * UNKNOWN_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization has an unknown issue with business license validation.
        public var failureReason: OrganizationsClientTypes.CreateAccountFailureReason?
        /// If the account was created successfully, the unique identifier (ID) of the new account in the Amazon Web Services GovCloud (US) Region.
        public var govCloudAccountId: Swift.String?
        /// The unique identifier (ID) that references this request. You get this value from the response of the initial [CreateAccount] request to create the account. The [regex pattern](http://wikipedia.org/wiki/regex) for a create account request ID string requires "car-" followed by from 8 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The date and time that the request was made for the account creation.
        public var requestedTimestamp: ClientRuntime.Date?
        /// The status of the asynchronous request to create an Amazon Web Services account.
        public var state: OrganizationsClientTypes.CreateAccountState?

        public init (
            accountId: Swift.String? = nil,
            accountName: Swift.String? = nil,
            completedTimestamp: ClientRuntime.Date? = nil,
            failureReason: OrganizationsClientTypes.CreateAccountFailureReason? = nil,
            govCloudAccountId: Swift.String? = nil,
            id: Swift.String? = nil,
            requestedTimestamp: ClientRuntime.Date? = nil,
            state: OrganizationsClientTypes.CreateAccountState? = nil
        )
        {
            self.accountId = accountId
            self.accountName = accountName
            self.completedTimestamp = completedTimestamp
            self.failureReason = failureReason
            self.govCloudAccountId = govCloudAccountId
            self.id = id
            self.requestedTimestamp = requestedTimestamp
            self.state = state
        }
    }

}

extension CreateAccountStatusNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateAccountStatusNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find an create account request with the CreateAccountRequestId that you specified.
public struct CreateAccountStatusNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CreateAccountStatusNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CreateAccountStatusNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateGovCloudAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGovCloudAccountInput(iamUserAccessToBilling: \(Swift.String(describing: iamUserAccessToBilling)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)), accountName: \"CONTENT_REDACTED\", email: \"CONTENT_REDACTED\")"}
}

extension CreateGovCloudAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = self.accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let iamUserAccessToBilling = self.iamUserAccessToBilling {
            try encodeContainer.encode(iamUserAccessToBilling.rawValue, forKey: .iamUserAccessToBilling)
        }
        if let roleName = self.roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateGovCloudAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGovCloudAccountInput: Swift.Equatable {
    /// The friendly name of the member account. The account name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.) You can't separate characters with a dash (–).
    /// This member is required.
    public var accountName: Swift.String?
    /// Specifies the email address of the owner to assign to the new member account in the commercial Region. This email address must not already be associated with another Amazon Web Services account. You must use a valid email address to complete account creation. The rules for a valid email address:
    ///
    /// * The address must be a minimum of 6 and a maximum of 64 characters long.
    ///
    /// * All characters must be 7-bit ASCII characters.
    ///
    /// * There must be one and only one @ symbol, which separates the local name from the domain name.
    ///
    /// * The local name can't contain any of the following characters: whitespace, " ' ( ) < > [ ] : ; , \ | % &
    ///
    /// * The local name can't begin with a dot (.)
    ///
    /// * The domain name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.)
    ///
    /// * The domain name can't begin or end with a hyphen (-) or dot (.)
    ///
    /// * The domain name must contain at least one dot
    ///
    ///
    /// You can't access the root user of the account or remove an account that was created with an invalid email address. Like all request parameters for CreateGovCloudAccount, the request for the email address for the Amazon Web Services GovCloud (US) account originates from the commercial Region, not from the Amazon Web Services GovCloud (US) Region.
    /// This member is required.
    public var email: Swift.String?
    /// If set to ALLOW, the new linked account in the commercial Region enables IAM users to access account billing information if they have the required permissions. If set to DENY, only the root user of the new account can access account billing information. For more information, see [Activating Access to the Billing and Cost Management Console](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate) in the Amazon Web Services Billing and Cost Management User Guide. If you don't specify this parameter, the value defaults to ALLOW, and IAM users and roles with the required permissions can access billing information for the new account.
    public var iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    /// (Optional) The name of an IAM role that Organizations automatically preconfigures in the new member accounts in both the Amazon Web Services GovCloud (US) Region and in the commercial Region. This role trusts the management account, allowing users in the management account to assume the role, as permitted by the management account administrator. The role has administrator permissions in the new member account. If you don't specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see [Accessing and Administering the Member Accounts in Your Organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role) in the Organizations User Guide and steps 2 and 3 in [Tutorial: Delegate Access Across Amazon Web Services accounts Using IAM Roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) in the IAM User Guide. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter. The pattern can include uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
    public var roleName: Swift.String?
    /// A list of tags that you want to attach to the newly created account. These tags are attached to the commercial account associated with the GovCloud account, and not to the GovCloud account itself. To add tags to the actual GovCloud account, call the [TagResource] operation in the GovCloud region after the new GovCloud account exists. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is invalid or if you exceed the maximum allowed number of tags for an account, then the entire request fails and the account is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        accountName: Swift.String? = nil,
        email: Swift.String? = nil,
        iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling? = nil,
        roleName: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

struct CreateGovCloudAccountInputBody: Swift.Equatable {
    let email: Swift.String?
    let accountName: Swift.String?
    let roleName: Swift.String?
    let iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension CreateGovCloudAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let iamUserAccessToBillingDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.IAMUserAccessToBilling.self, forKey: .iamUserAccessToBilling)
        iamUserAccessToBilling = iamUserAccessToBillingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGovCloudAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGovCloudAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGovCloudAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGovCloudAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGovCloudAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct CreateGovCloudAccountOutputResponse: Swift.Equatable {
    /// Contains the status about a [CreateAccount] or [CreateGovCloudAccount] request to create an Amazon Web Services account or an Amazon Web Services GovCloud (US) account in an organization.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init (
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct CreateGovCloudAccountOutputResponseBody: Swift.Equatable {
    let createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?
}

extension CreateGovCloudAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

extension CreateOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureSet = "FeatureSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureSet = self.featureSet {
            try encodeContainer.encode(featureSet.rawValue, forKey: .featureSet)
        }
    }
}

extension CreateOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateOrganizationInput: Swift.Equatable {
    /// Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
    ///
    /// * CONSOLIDATED_BILLING: All member accounts have their bills consolidated to and paid by the management account. For more information, see [Consolidated billing](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-cb-only) in the Organizations User Guide. The consolidated billing feature subset isn't available for organizations in the Amazon Web Services GovCloud (US) Region.
    ///
    /// * ALL: In addition to all the features supported by the consolidated billing feature set, the management account can also apply any policy type to any member account in the organization. For more information, see [All features](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-all) in the Organizations User Guide.
    public var featureSet: OrganizationsClientTypes.OrganizationFeatureSet?

    public init (
        featureSet: OrganizationsClientTypes.OrganizationFeatureSet? = nil
    )
    {
        self.featureSet = featureSet
    }
}

struct CreateOrganizationInputBody: Swift.Equatable {
    let featureSet: OrganizationsClientTypes.OrganizationFeatureSet?
}

extension CreateOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureSet = "FeatureSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureSetDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationFeatureSet.self, forKey: .featureSet)
        featureSet = featureSetDecoded
    }
}

extension CreateOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccessDeniedForDependencyException" : self = .accessDeniedForDependencyException(try AccessDeniedForDependencyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AlreadyInOrganizationException" : self = .alreadyInOrganizationException(try AlreadyInOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accessDeniedForDependencyException(AccessDeniedForDependencyException)
    case alreadyInOrganizationException(AlreadyInOrganizationException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organization = output.organization
        } else {
            self.organization = nil
        }
    }
}

public struct CreateOrganizationOutputResponse: Swift.Equatable {
    /// A structure that contains details about the newly created organization.
    public var organization: OrganizationsClientTypes.Organization?

    public init (
        organization: OrganizationsClientTypes.Organization? = nil
    )
    {
        self.organization = organization
    }
}

struct CreateOrganizationOutputResponseBody: Swift.Equatable {
    let organization: OrganizationsClientTypes.Organization?
}

extension CreateOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organization = "Organization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Organization.self, forKey: .organization)
        organization = organizationDecoded
    }
}

extension CreateOrganizationalUnitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case parentId = "ParentId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateOrganizationalUnitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateOrganizationalUnitInput: Swift.Equatable {
    /// The friendly name to assign to the new OU.
    /// This member is required.
    public var name: Swift.String?
    /// The unique identifier (ID) of the parent root or OU that you want to create the new OU in. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?
    /// A list of tags that you want to attach to the newly created OU. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is invalid or if you exceed the allowed number of tags for an OU, then the entire request fails and the OU is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        name: Swift.String? = nil,
        parentId: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.parentId = parentId
        self.tags = tags
    }
}

struct CreateOrganizationalUnitInputBody: Swift.Equatable {
    let parentId: Swift.String?
    let name: Swift.String?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension CreateOrganizationalUnitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case parentId = "ParentId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateOrganizationalUnitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOrganizationalUnitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateOrganizationalUnitException" : self = .duplicateOrganizationalUnitException(try DuplicateOrganizationalUnitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateOrganizationalUnitOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicateOrganizationalUnitException(DuplicateOrganizationalUnitException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrganizationalUnitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct CreateOrganizationalUnitOutputResponse: Swift.Equatable {
    /// A structure that contains details about the newly created OU.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct CreateOrganizationalUnitOutputResponseBody: Swift.Equatable {
    let organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?
}

extension CreateOrganizationalUnitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

extension CreatePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension CreatePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePolicyInput: Swift.Equatable {
    /// The policy text content to add to the new policy. The text that you supply must adhere to the rules of the policy type you specify in the Type parameter.
    /// This member is required.
    public var content: Swift.String?
    /// An optional description to assign to the policy.
    /// This member is required.
    public var description: Swift.String?
    /// The friendly name to assign to the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is invalid or if you exceed the allowed number of tags for a policy, then the entire request fails and the policy is not created.
    public var tags: [OrganizationsClientTypes.Tag]?
    /// The type of policy to create. You can specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var type: OrganizationsClientTypes.PolicyType?

    public init (
        content: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil,
        type: OrganizationsClientTypes.PolicyType? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.tags = tags
        self.type = type
    }
}

struct CreatePolicyInputBody: Swift.Equatable {
    let content: Swift.String?
    let description: Swift.String?
    let name: Swift.String?
    let type: OrganizationsClientTypes.PolicyType?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension CreatePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .type)
        type = typeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyException" : self = .duplicatePolicyException(try DuplicatePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocumentException" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotAvailableForOrganizationException" : self = .policyTypeNotAvailableForOrganizationException(try PolicyTypeNotAvailableForOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyException(DuplicatePolicyException)
    case invalidInputException(InvalidInputException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case policyTypeNotAvailableForOrganizationException(PolicyTypeNotAvailableForOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct CreatePolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the newly created policy.
    public var policy: OrganizationsClientTypes.Policy?

    public init (
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct CreatePolicyOutputResponseBody: Swift.Equatable {
    let policy: OrganizationsClientTypes.Policy?
}

extension CreatePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension DeclineHandshakeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = self.handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

extension DeclineHandshakeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeclineHandshakeInput: Swift.Equatable {
    /// The unique identifier (ID) of the handshake that you want to decline. You can get the ID from the [ListHandshakesForAccount] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init (
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct DeclineHandshakeInputBody: Swift.Equatable {
    let handshakeId: Swift.String?
}

extension DeclineHandshakeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension DeclineHandshakeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeclineHandshakeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeAlreadyInStateException" : self = .handshakeAlreadyInStateException(try HandshakeAlreadyInStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidHandshakeTransitionException" : self = .invalidHandshakeTransitionException(try InvalidHandshakeTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeclineHandshakeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeAlreadyInStateException(HandshakeAlreadyInStateException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidHandshakeTransitionException(InvalidHandshakeTransitionException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeclineHandshakeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeclineHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct DeclineHandshakeOutputResponse: Swift.Equatable {
    /// A structure that contains details about the declined handshake. The state is updated to show the value DECLINED.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct DeclineHandshakeOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension DeclineHandshakeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension OrganizationsClientTypes.DelegatedAdministrator: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case delegationEnabledDate = "DelegationEnabledDate"
        case email = "Email"
        case id = "Id"
        case joinedMethod = "JoinedMethod"
        case joinedTimestamp = "JoinedTimestamp"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let delegationEnabledDate = self.delegationEnabledDate {
            try encodeContainer.encodeTimestamp(delegationEnabledDate, format: .epochSeconds, forKey: .delegationEnabledDate)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let joinedMethod = self.joinedMethod {
            try encodeContainer.encode(joinedMethod.rawValue, forKey: .joinedMethod)
        }
        if let joinedTimestamp = self.joinedTimestamp {
            try encodeContainer.encodeTimestamp(joinedTimestamp, format: .epochSeconds, forKey: .joinedTimestamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.AccountStatus.self, forKey: .status)
        status = statusDecoded
        let joinedMethodDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.AccountJoinedMethod.self, forKey: .joinedMethod)
        joinedMethod = joinedMethodDecoded
        let joinedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .joinedTimestamp)
        joinedTimestamp = joinedTimestampDecoded
        let delegationEnabledDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .delegationEnabledDate)
        delegationEnabledDate = delegationEnabledDateDecoded
    }
}

extension OrganizationsClientTypes.DelegatedAdministrator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegatedAdministrator(arn: \(Swift.String(describing: arn)), delegationEnabledDate: \(Swift.String(describing: delegationEnabledDate)), id: \(Swift.String(describing: id)), joinedMethod: \(Swift.String(describing: joinedMethod)), joinedTimestamp: \(Swift.String(describing: joinedTimestamp)), status: \(Swift.String(describing: status)), email: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Contains information about the delegated administrator.
    public struct DelegatedAdministrator: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the delegated administrator's account.
        public var arn: Swift.String?
        /// The date when the account was made a delegated administrator.
        public var delegationEnabledDate: ClientRuntime.Date?
        /// The email address that is associated with the delegated administrator's Amazon Web Services account.
        public var email: Swift.String?
        /// The unique identifier (ID) of the delegated administrator's account.
        public var id: Swift.String?
        /// The method by which the delegated administrator's account joined the organization.
        public var joinedMethod: OrganizationsClientTypes.AccountJoinedMethod?
        /// The date when the delegated administrator's account became a part of the organization.
        public var joinedTimestamp: ClientRuntime.Date?
        /// The friendly name of the delegated administrator's account.
        public var name: Swift.String?
        /// The status of the delegated administrator's account in the organization.
        public var status: OrganizationsClientTypes.AccountStatus?

        public init (
            arn: Swift.String? = nil,
            delegationEnabledDate: ClientRuntime.Date? = nil,
            email: Swift.String? = nil,
            id: Swift.String? = nil,
            joinedMethod: OrganizationsClientTypes.AccountJoinedMethod? = nil,
            joinedTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: OrganizationsClientTypes.AccountStatus? = nil
        )
        {
            self.arn = arn
            self.delegationEnabledDate = delegationEnabledDate
            self.email = email
            self.id = id
            self.joinedMethod = joinedMethod
            self.joinedTimestamp = joinedTimestamp
            self.name = name
            self.status = status
        }
    }

}

extension OrganizationsClientTypes.DelegatedService: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationEnabledDate = "DelegationEnabledDate"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let delegationEnabledDate = self.delegationEnabledDate {
            try encodeContainer.encodeTimestamp(delegationEnabledDate, format: .epochSeconds, forKey: .delegationEnabledDate)
        }
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let delegationEnabledDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .delegationEnabledDate)
        delegationEnabledDate = delegationEnabledDateDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains information about the Amazon Web Services service for which the account is a delegated administrator.
    public struct DelegatedService: Swift.Equatable {
        /// The date that the account became a delegated administrator for this service.
        public var delegationEnabledDate: ClientRuntime.Date?
        /// The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as:  servicename.amazonaws.com.
        public var servicePrincipal: Swift.String?

        public init (
            delegationEnabledDate: ClientRuntime.Date? = nil,
            servicePrincipal: Swift.String? = nil
        )
        {
            self.delegationEnabledDate = delegationEnabledDate
            self.servicePrincipal = servicePrincipal
        }
    }

}

extension DeleteOrganizationInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DeleteOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteOrganizationInput: Swift.Equatable {

    public init () { }
}

struct DeleteOrganizationInputBody: Swift.Equatable {
}

extension DeleteOrganizationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationNotEmptyException" : self = .organizationNotEmptyException(try OrganizationNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case organizationNotEmptyException(OrganizationNotEmptyException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteOrganizationalUnitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationalUnitId = self.organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

extension DeleteOrganizationalUnitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteOrganizationalUnitInput: Swift.Equatable {
    /// The unique identifier (ID) of the organizational unit that you want to delete. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init (
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

struct DeleteOrganizationalUnitInputBody: Swift.Equatable {
    let organizationalUnitId: Swift.String?
}

extension DeleteOrganizationalUnitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension DeleteOrganizationalUnitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationalUnitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotEmptyException" : self = .organizationalUnitNotEmptyException(try OrganizationalUnitNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteOrganizationalUnitOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotEmptyException(OrganizationalUnitNotEmptyException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationalUnitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationalUnitOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

extension DeletePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePolicyInput: Swift.Equatable {
    /// The unique identifier (ID) of the policy that you want to delete. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init (
        policyId: Swift.String? = nil
    )
    {
        self.policyId = policyId
    }
}

struct DeletePolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
}

extension DeletePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
    }
}

extension DeletePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyInUseException" : self = .policyInUseException(try PolicyInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case policyInUseException(PolicyInUseException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteResourcePolicyInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {

    public init () { }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourcePolicyNotFoundException" : self = .resourcePolicyNotFoundException(try ResourcePolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case resourcePolicyNotFoundException(ResourcePolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeregisterDelegatedAdministratorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

extension DeregisterDelegatedAdministratorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterDelegatedAdministratorInput: Swift.Equatable {
    /// The account ID number of the member account in the organization that you want to deregister as a delegated administrator.
    /// This member is required.
    public var accountId: Swift.String?
    /// The service principal name of an Amazon Web Services service for which the account is a delegated administrator. Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

struct DeregisterDelegatedAdministratorInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let servicePrincipal: Swift.String?
}

extension DeregisterDelegatedAdministratorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension DeregisterDelegatedAdministratorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterDelegatedAdministratorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotRegisteredException" : self = .accountNotRegisteredException(try AccountNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterDelegatedAdministratorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case accountNotRegisteredException(AccountNotRegisteredException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterDelegatedAdministratorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterDelegatedAdministratorOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
    }
}

extension DescribeAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAccountInput: Swift.Equatable {
    /// The unique identifier (ID) of the Amazon Web Services account that you want information about. You can get the ID from the [ListAccounts] or [ListAccountsForParent] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?

    public init (
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

struct DescribeAccountInputBody: Swift.Equatable {
    let accountId: Swift.String?
}

extension DescribeAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension DescribeAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.account = output.account
        } else {
            self.account = nil
        }
    }
}

public struct DescribeAccountOutputResponse: Swift.Equatable {
    /// A structure that contains information about the requested account.
    public var account: OrganizationsClientTypes.Account?

    public init (
        account: OrganizationsClientTypes.Account? = nil
    )
    {
        self.account = account
    }
}

struct DescribeAccountOutputResponseBody: Swift.Equatable {
    let account: OrganizationsClientTypes.Account?
}

extension DescribeAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Account.self, forKey: .account)
        account = accountDecoded
    }
}

extension DescribeCreateAccountStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountRequestId = "CreateAccountRequestId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createAccountRequestId = self.createAccountRequestId {
            try encodeContainer.encode(createAccountRequestId, forKey: .createAccountRequestId)
        }
    }
}

extension DescribeCreateAccountStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCreateAccountStatusInput: Swift.Equatable {
    /// Specifies the Id value that uniquely identifies the CreateAccount request. You can get the value from the CreateAccountStatus.Id response in an earlier [CreateAccount] request, or from the [ListCreateAccountStatus] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a create account request ID string requires "car-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var createAccountRequestId: Swift.String?

    public init (
        createAccountRequestId: Swift.String? = nil
    )
    {
        self.createAccountRequestId = createAccountRequestId
    }
}

struct DescribeCreateAccountStatusInputBody: Swift.Equatable {
    let createAccountRequestId: Swift.String?
}

extension DescribeCreateAccountStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountRequestId = "CreateAccountRequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createAccountRequestId)
        createAccountRequestId = createAccountRequestIdDecoded
    }
}

extension DescribeCreateAccountStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCreateAccountStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CreateAccountStatusNotFoundException" : self = .createAccountStatusNotFoundException(try CreateAccountStatusNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeCreateAccountStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case createAccountStatusNotFoundException(CreateAccountStatusNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCreateAccountStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeCreateAccountStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createAccountStatus = output.createAccountStatus
        } else {
            self.createAccountStatus = nil
        }
    }
}

public struct DescribeCreateAccountStatusOutputResponse: Swift.Equatable {
    /// A structure that contains the current status of an account creation request.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init (
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

struct DescribeCreateAccountStatusOutputResponseBody: Swift.Equatable {
    let createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?
}

extension DescribeCreateAccountStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountStatus = "CreateAccountStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountStatus.self, forKey: .createAccountStatus)
        createAccountStatus = createAccountStatusDecoded
    }
}

extension DescribeEffectivePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

extension DescribeEffectivePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEffectivePolicyInput: Swift.Equatable {
    /// The type of policy that you want information about. You can specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.EffectivePolicyType?
    /// When you're signed in as the management account, specify the ID of the account that you want details about. Specifying an organization root or organizational unit (OU) as the target is not supported.
    public var targetId: Swift.String?

    public init (
        policyType: OrganizationsClientTypes.EffectivePolicyType? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.targetId = targetId
    }
}

struct DescribeEffectivePolicyInputBody: Swift.Equatable {
    let policyType: OrganizationsClientTypes.EffectivePolicyType?
    let targetId: Swift.String?
}

extension DescribeEffectivePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.EffectivePolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension DescribeEffectivePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEffectivePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EffectivePolicyNotFoundException" : self = .effectivePolicyNotFoundException(try EffectivePolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEffectivePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case effectivePolicyNotFoundException(EffectivePolicyNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEffectivePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEffectivePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.effectivePolicy = output.effectivePolicy
        } else {
            self.effectivePolicy = nil
        }
    }
}

public struct DescribeEffectivePolicyOutputResponse: Swift.Equatable {
    /// The contents of the effective policy.
    public var effectivePolicy: OrganizationsClientTypes.EffectivePolicy?

    public init (
        effectivePolicy: OrganizationsClientTypes.EffectivePolicy? = nil
    )
    {
        self.effectivePolicy = effectivePolicy
    }
}

struct DescribeEffectivePolicyOutputResponseBody: Swift.Equatable {
    let effectivePolicy: OrganizationsClientTypes.EffectivePolicy?
}

extension DescribeEffectivePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case effectivePolicy = "EffectivePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let effectivePolicyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.EffectivePolicy.self, forKey: .effectivePolicy)
        effectivePolicy = effectivePolicyDecoded
    }
}

extension DescribeHandshakeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let handshakeId = self.handshakeId {
            try encodeContainer.encode(handshakeId, forKey: .handshakeId)
        }
    }
}

extension DescribeHandshakeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeHandshakeInput: Swift.Equatable {
    /// The unique identifier (ID) of the handshake that you want information about. You can get the ID from the original call to [InviteAccountToOrganization], or from a call to [ListHandshakesForAccount] or [ListHandshakesForOrganization]. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init (
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

struct DescribeHandshakeInputBody: Swift.Equatable {
    let handshakeId: Swift.String?
}

extension DescribeHandshakeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakeId = "HandshakeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handshakeId)
        handshakeId = handshakeIdDecoded
    }
}

extension DescribeHandshakeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHandshakeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeNotFoundException" : self = .handshakeNotFoundException(try HandshakeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeHandshakeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeNotFoundException(HandshakeNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHandshakeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeHandshakeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct DescribeHandshakeOutputResponse: Swift.Equatable {
    /// A structure that contains information about the specified handshake.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct DescribeHandshakeOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension DescribeHandshakeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension DescribeOrganizationInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeOrganizationInput: Swift.Equatable {

    public init () { }
}

struct DescribeOrganizationInputBody: Swift.Equatable {
}

extension DescribeOrganizationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organization = output.organization
        } else {
            self.organization = nil
        }
    }
}

public struct DescribeOrganizationOutputResponse: Swift.Equatable {
    /// A structure that contains information about the organization. The AvailablePolicyTypes part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. To determine which policy types are enabled in your organization, use the [ListRoots] operation.
    public var organization: OrganizationsClientTypes.Organization?

    public init (
        organization: OrganizationsClientTypes.Organization? = nil
    )
    {
        self.organization = organization
    }
}

struct DescribeOrganizationOutputResponseBody: Swift.Equatable {
    let organization: OrganizationsClientTypes.Organization?
}

extension DescribeOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organization = "Organization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Organization.self, forKey: .organization)
        organization = organizationDecoded
    }
}

extension DescribeOrganizationalUnitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationalUnitId = self.organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

extension DescribeOrganizationalUnitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeOrganizationalUnitInput: Swift.Equatable {
    /// The unique identifier (ID) of the organizational unit that you want details about. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init (
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

struct DescribeOrganizationalUnitInputBody: Swift.Equatable {
    let organizationalUnitId: Swift.String?
}

extension DescribeOrganizationalUnitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension DescribeOrganizationalUnitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationalUnitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeOrganizationalUnitOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationalUnitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct DescribeOrganizationalUnitOutputResponse: Swift.Equatable {
    /// A structure that contains details about the specified OU.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct DescribeOrganizationalUnitOutputResponseBody: Swift.Equatable {
    let organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?
}

extension DescribeOrganizationalUnitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

extension DescribePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

extension DescribePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePolicyInput: Swift.Equatable {
    /// The unique identifier (ID) of the policy that you want details about. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init (
        policyId: Swift.String? = nil
    )
    {
        self.policyId = policyId
    }
}

struct DescribePolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
}

extension DescribePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
    }
}

extension DescribePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct DescribePolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the specified policy.
    public var policy: OrganizationsClientTypes.Policy?

    public init (
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct DescribePolicyOutputResponseBody: Swift.Equatable {
    let policy: OrganizationsClientTypes.Policy?
}

extension DescribePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension DescribeResourcePolicyInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePolicyInput: Swift.Equatable {

    public init () { }
}

struct DescribeResourcePolicyInputBody: Swift.Equatable {
}

extension DescribeResourcePolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourcePolicyNotFoundException" : self = .resourcePolicyNotFoundException(try ResourcePolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case resourcePolicyNotFoundException(ResourcePolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct DescribeResourcePolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the resource policy.
    public var resourcePolicy: OrganizationsClientTypes.ResourcePolicy?

    public init (
        resourcePolicy: OrganizationsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct DescribeResourcePolicyOutputResponseBody: Swift.Equatable {
    let resourcePolicy: OrganizationsClientTypes.ResourcePolicy?
}

extension DescribeResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension DestinationParentNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DestinationParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find the destination container (a root or OU) with the ParentId that you specified.
public struct DestinationParentNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DestinationParentNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DestinationParentNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DetachPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

extension DetachPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachPolicyInput: Swift.Equatable {
    /// The unique identifier (ID) of the policy you want to detach. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?
    /// The unique identifier (ID) of the root, OU, or account that you want to detach the policy from. You can get the ID from the [ListRoots], [ListOrganizationalUnitsForParent], or [ListAccounts] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init (
        policyId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

struct DetachPolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
    let targetId: Swift.String?
}

extension DetachPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyId = "PolicyId"
        case targetId = "TargetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension DetachPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotAttachedException" : self = .policyNotAttachedException(try PolicyNotAttachedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachPolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotAttachedException(PolicyNotAttachedException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisableAWSServiceAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

extension DisableAWSServiceAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableAWSServiceAccessInput: Swift.Equatable {
    /// The service principal name of the Amazon Web Services service for which you want to disable integration with your organization. This is typically in the form of a URL, such as  service-abbreviation.amazonaws.com.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init (
        servicePrincipal: Swift.String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

struct DisableAWSServiceAccessInputBody: Swift.Equatable {
    let servicePrincipal: Swift.String?
}

extension DisableAWSServiceAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension DisableAWSServiceAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableAWSServiceAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableAWSServiceAccessOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAWSServiceAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableAWSServiceAccessOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisablePolicyTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let rootId = self.rootId {
            try encodeContainer.encode(rootId, forKey: .rootId)
        }
    }
}

extension DisablePolicyTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisablePolicyTypeInput: Swift.Equatable {
    /// The policy type that you want to disable in this root. You can specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.PolicyType?
    /// The unique identifier (ID) of the root in which you want to disable a policy type. You can get the ID from the [ListRoots] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
    /// This member is required.
    public var rootId: Swift.String?

    public init (
        policyType: OrganizationsClientTypes.PolicyType? = nil,
        rootId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

struct DisablePolicyTypeInputBody: Swift.Equatable {
    let rootId: Swift.String?
    let policyType: OrganizationsClientTypes.PolicyType?
}

extension DisablePolicyTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension DisablePolicyTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisablePolicyTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotEnabledException" : self = .policyTypeNotEnabledException(try PolicyTypeNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RootNotFoundException" : self = .rootNotFoundException(try RootNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisablePolicyTypeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyTypeNotEnabledException(PolicyTypeNotEnabledException)
    case rootNotFoundException(RootNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisablePolicyTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisablePolicyTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.root = output.root
        } else {
            self.root = nil
        }
    }
}

public struct DisablePolicyTypeOutputResponse: Swift.Equatable {
    /// A structure that shows the root with the updated list of enabled policy types.
    public var root: OrganizationsClientTypes.Root?

    public init (
        root: OrganizationsClientTypes.Root? = nil
    )
    {
        self.root = root
    }
}

struct DisablePolicyTypeOutputResponseBody: Swift.Equatable {
    let root: OrganizationsClientTypes.Root?
}

extension DisablePolicyTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case root = "Root"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Root.self, forKey: .root)
        root = rootDecoded
    }
}

extension DuplicateAccountException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicateAccountExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// That account is already present in the specified destination.
public struct DuplicateAccountException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateAccountExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateAccountExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicateHandshakeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicateHandshakeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A handshake with the same action and target already exists. For example, if you invited an account to join your organization, the invited account might already have a pending invitation from this organization. If you intend to resend an invitation to an account, ensure that existing handshakes that might be considered duplicates are canceled or declined.
public struct DuplicateHandshakeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateHandshakeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateHandshakeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicateOrganizationalUnitException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicateOrganizationalUnitExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An OU with the same name already exists.
public struct DuplicateOrganizationalUnitException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateOrganizationalUnitExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateOrganizationalUnitExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicatePolicyAttachmentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicatePolicyAttachmentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The selected policy is already attached to the specified target.
public struct DuplicatePolicyAttachmentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicatePolicyAttachmentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicatePolicyAttachmentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DuplicatePolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicatePolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A policy with the same name already exists.
public struct DuplicatePolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicatePolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicatePolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.EffectivePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case policyContent = "PolicyContent"
        case policyType = "PolicyType"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let policyContent = self.policyContent {
            try encodeContainer.encode(policyContent, forKey: .policyContent)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyContent)
        policyContent = policyContentDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.EffectivePolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains rules to be applied to the affected accounts. The effective policy is the aggregation of any policies the account inherits, plus any policy directly attached to the account.
    public struct EffectivePolicy: Swift.Equatable {
        /// The time of the last update to this policy.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The text content of the policy.
        public var policyContent: Swift.String?
        /// The policy type.
        public var policyType: OrganizationsClientTypes.EffectivePolicyType?
        /// The account ID of the policy target.
        public var targetId: Swift.String?

        public init (
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            policyContent: Swift.String? = nil,
            policyType: OrganizationsClientTypes.EffectivePolicyType? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.policyContent = policyContent
            self.policyType = policyType
            self.targetId = targetId
        }
    }

}

extension EffectivePolicyNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EffectivePolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// If you ran this action on the management account, this policy type is not enabled. If you ran the action on a member account, the account doesn't have an effective policy of this type. Contact the administrator of your organization about attaching a policy of this type to the account.
public struct EffectivePolicyNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EffectivePolicyNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension EffectivePolicyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum EffectivePolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aiservicesOptOutPolicy
        case backupPolicy
        case tagPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [EffectivePolicyType] {
            return [
                .aiservicesOptOutPolicy,
                .backupPolicy,
                .tagPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
            case .backupPolicy: return "BACKUP_POLICY"
            case .tagPolicy: return "TAG_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EffectivePolicyType(rawValue: rawValue) ?? EffectivePolicyType.sdkUnknown(rawValue)
        }
    }
}

extension EnableAWSServiceAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

extension EnableAWSServiceAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableAWSServiceAccessInput: Swift.Equatable {
    /// The service principal name of the Amazon Web Services service for which you want to enable integration with your organization. This is typically in the form of a URL, such as  service-abbreviation.amazonaws.com.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init (
        servicePrincipal: Swift.String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

struct EnableAWSServiceAccessInputBody: Swift.Equatable {
    let servicePrincipal: Swift.String?
}

extension EnableAWSServiceAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension EnableAWSServiceAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAWSServiceAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableAWSServiceAccessOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAWSServiceAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableAWSServiceAccessOutputResponse: Swift.Equatable {

    public init () { }
}

extension EnableAllFeaturesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension EnableAllFeaturesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableAllFeaturesInput: Swift.Equatable {

    public init () { }
}

struct EnableAllFeaturesInputBody: Swift.Equatable {
}

extension EnableAllFeaturesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension EnableAllFeaturesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAllFeaturesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableAllFeaturesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAllFeaturesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnableAllFeaturesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct EnableAllFeaturesOutputResponse: Swift.Equatable {
    /// A structure that contains details about the handshake created to support this request to enable all features in the organization.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct EnableAllFeaturesOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension EnableAllFeaturesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension EnablePolicyTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let rootId = self.rootId {
            try encodeContainer.encode(rootId, forKey: .rootId)
        }
    }
}

extension EnablePolicyTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnablePolicyTypeInput: Swift.Equatable {
    /// The policy type that you want to enable. You can specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.PolicyType?
    /// The unique identifier (ID) of the root in which you want to enable a policy type. You can get the ID from the [ListRoots] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
    /// This member is required.
    public var rootId: Swift.String?

    public init (
        policyType: OrganizationsClientTypes.PolicyType? = nil,
        rootId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

struct EnablePolicyTypeInputBody: Swift.Equatable {
    let rootId: Swift.String?
    let policyType: OrganizationsClientTypes.PolicyType?
}

extension EnablePolicyTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyType = "PolicyType"
        case rootId = "RootId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension EnablePolicyTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnablePolicyTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeAlreadyEnabledException" : self = .policyTypeAlreadyEnabledException(try PolicyTypeAlreadyEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyTypeNotAvailableForOrganizationException" : self = .policyTypeNotAvailableForOrganizationException(try PolicyTypeNotAvailableForOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RootNotFoundException" : self = .rootNotFoundException(try RootNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnablePolicyTypeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyTypeAlreadyEnabledException(PolicyTypeAlreadyEnabledException)
    case policyTypeNotAvailableForOrganizationException(PolicyTypeNotAvailableForOrganizationException)
    case rootNotFoundException(RootNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnablePolicyTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnablePolicyTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.root = output.root
        } else {
            self.root = nil
        }
    }
}

public struct EnablePolicyTypeOutputResponse: Swift.Equatable {
    /// A structure that shows the root with the updated list of enabled policy types.
    public var root: OrganizationsClientTypes.Root?

    public init (
        root: OrganizationsClientTypes.Root? = nil
    )
    {
        self.root = root
    }
}

struct EnablePolicyTypeOutputResponseBody: Swift.Equatable {
    let root: OrganizationsClientTypes.Root?
}

extension EnablePolicyTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case root = "Root"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Root.self, forKey: .root)
        root = rootDecoded
    }
}

extension OrganizationsClientTypes.EnabledServicePrincipal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateEnabled = "DateEnabled"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateEnabled = self.dateEnabled {
            try encodeContainer.encodeTimestamp(dateEnabled, format: .epochSeconds, forKey: .dateEnabled)
        }
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let dateEnabledDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .dateEnabled)
        dateEnabled = dateEnabledDecoded
    }
}

extension OrganizationsClientTypes {
    /// A structure that contains details of a service principal that represents an Amazon Web Services service that is enabled to integrate with Organizations.
    public struct EnabledServicePrincipal: Swift.Equatable {
        /// The date that the service principal was enabled for integration with Organizations.
        public var dateEnabled: ClientRuntime.Date?
        /// The name of the service principal. This is typically in the form of a URL, such as:  servicename.amazonaws.com.
        public var servicePrincipal: Swift.String?

        public init (
            dateEnabled: ClientRuntime.Date? = nil,
            servicePrincipal: Swift.String? = nil
        )
        {
            self.dateEnabled = dateEnabled
            self.servicePrincipal = servicePrincipal
        }
    }

}

extension FinalizingOrganizationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: FinalizingOrganizationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Organizations couldn't perform the operation because your organization hasn't finished initializing. This can take up to an hour. Try again later. If after one hour you continue to receive this error, contact [Amazon Web Services Support](https://console.aws.amazon.com/support/home#/).
public struct FinalizingOrganizationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct FinalizingOrganizationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension FinalizingOrganizationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.Handshake: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case arn = "Arn"
        case expirationTimestamp = "ExpirationTimestamp"
        case id = "Id"
        case parties = "Parties"
        case requestedTimestamp = "RequestedTimestamp"
        case resources = "Resources"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let expirationTimestamp = self.expirationTimestamp {
            try encodeContainer.encodeTimestamp(expirationTimestamp, format: .epochSeconds, forKey: .expirationTimestamp)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parties = parties {
            var partiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parties)
            for handshakeparty0 in parties {
                try partiesContainer.encode(handshakeparty0)
            }
        }
        if let requestedTimestamp = self.requestedTimestamp {
            try encodeContainer.encodeTimestamp(requestedTimestamp, format: .epochSeconds, forKey: .requestedTimestamp)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for handshakeresource0 in resources {
                try resourcesContainer.encode(handshakeresource0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let partiesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.HandshakeParty?].self, forKey: .parties)
        var partiesDecoded0:[OrganizationsClientTypes.HandshakeParty]? = nil
        if let partiesContainer = partiesContainer {
            partiesDecoded0 = [OrganizationsClientTypes.HandshakeParty]()
            for structure0 in partiesContainer {
                if let structure0 = structure0 {
                    partiesDecoded0?.append(structure0)
                }
            }
        }
        parties = partiesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let expirationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expirationTimestamp)
        expirationTimestamp = expirationTimestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ActionType.self, forKey: .action)
        action = actionDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.HandshakeResource?].self, forKey: .resources)
        var resourcesDecoded0:[OrganizationsClientTypes.HandshakeResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [OrganizationsClientTypes.HandshakeResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension OrganizationsClientTypes {
    /// Contains information that must be exchanged to securely establish a relationship between two accounts (an originator and a recipient). For example, when a management account (the originator) invites another account (the recipient) to join its organization, the two accounts exchange information as a series of handshake requests and responses. Note: Handshakes that are CANCELED, ACCEPTED, DECLINED, or EXPIRED show up in lists for only 30 days after entering that state After that they are deleted.
    public struct Handshake: Swift.Equatable {
        /// The type of handshake, indicating what action occurs when the recipient accepts the handshake. The following handshake types are supported:
        ///
        /// * INVITE: This type of handshake represents a request to join an organization. It is always sent from the management account to only non-member accounts.
        ///
        /// * ENABLE_ALL_FEATURES: This type of handshake represents a request to enable all features in an organization. It is always sent from the management account to only invited member accounts. Created accounts do not receive this because those accounts were created by the organization's management account and approval is inferred.
        ///
        /// * APPROVE_ALL_FEATURES: This type of handshake is sent from the Organizations service when all member accounts have approved the ENABLE_ALL_FEATURES invitation. It is sent only to the management account and signals the master that it can finalize the process to enable all features.
        public var action: OrganizationsClientTypes.ActionType?
        /// The Amazon Resource Name (ARN) of a handshake. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The date and time that the handshake expires. If the recipient of the handshake request fails to respond before the specified date and time, the handshake becomes inactive and is no longer valid.
        public var expirationTimestamp: ClientRuntime.Date?
        /// The unique identifier (ID) of a handshake. The originating account creates the ID when it initiates the handshake. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// Information about the two accounts that are participating in the handshake.
        public var parties: [OrganizationsClientTypes.HandshakeParty]?
        /// The date and time that the handshake request was made.
        public var requestedTimestamp: ClientRuntime.Date?
        /// Additional information that is needed to process the handshake.
        public var resources: [OrganizationsClientTypes.HandshakeResource]?
        /// The current state of the handshake. Use the state to trace the flow of the handshake through the process from its creation to its acceptance. The meaning of each of the valid values is as follows:
        ///
        /// * REQUESTED: This handshake was sent to multiple recipients (applicable to only some handshake types) and not all recipients have responded yet. The request stays in this state until all recipients respond.
        ///
        /// * OPEN: This handshake was sent to multiple recipients (applicable to only some policy types) and all recipients have responded, allowing the originator to complete the handshake action.
        ///
        /// * CANCELED: This handshake is no longer active because it was canceled by the originating account.
        ///
        /// * ACCEPTED: This handshake is complete because it has been accepted by the recipient.
        ///
        /// * DECLINED: This handshake is no longer active because it was declined by the recipient account.
        ///
        /// * EXPIRED: This handshake is no longer active because the originator did not receive a response of any kind from the recipient before the expiration time (15 days).
        public var state: OrganizationsClientTypes.HandshakeState?

        public init (
            action: OrganizationsClientTypes.ActionType? = nil,
            arn: Swift.String? = nil,
            expirationTimestamp: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            parties: [OrganizationsClientTypes.HandshakeParty]? = nil,
            requestedTimestamp: ClientRuntime.Date? = nil,
            resources: [OrganizationsClientTypes.HandshakeResource]? = nil,
            state: OrganizationsClientTypes.HandshakeState? = nil
        )
        {
            self.action = action
            self.arn = arn
            self.expirationTimestamp = expirationTimestamp
            self.id = id
            self.parties = parties
            self.requestedTimestamp = requestedTimestamp
            self.resources = resources
            self.state = state
        }
    }

}

extension HandshakeAlreadyInStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: HandshakeAlreadyInStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified handshake is already in the requested state. For example, you can't accept a handshake that was already accepted.
public struct HandshakeAlreadyInStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HandshakeAlreadyInStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension HandshakeAlreadyInStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HandshakeConstraintViolationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: HandshakeConstraintViolationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would violate the constraint identified in the reason code. Some of the reasons in the following list might not be applicable to this specific API or operation:
///
/// * ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number of accounts in an organization. Note that deleted and closed accounts still count toward your limit. If you get this exception immediately after creating the organization, wait one hour and try again. If after an hour it continues to fail with this error, contact [Amazon Web Services Support](https://docs.aws.amazon.com/support/home#/).
///
/// * ALREADY_IN_AN_ORGANIZATION: The handshake request is invalid because the invited account is already a member of an organization.
///
/// * HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes that you can send in one day.
///
/// * INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES: You can't issue new invitations to join an organization while it's in the process of enabling all features. You can resume inviting accounts after you finalize the process when all accounts have agreed to the change.
///
/// * ORGANIZATION_ALREADY_HAS_ALL_FEATURES: The handshake request is invalid because the organization has already enabled all features.
///
/// * ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION: The handshake request is invalid because the organization has already started the process to enable all features.
///
/// * ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: The request failed because the account is from a different marketplace than the accounts in the organization. For example, accounts with India addresses must be associated with the AISPL marketplace. All accounts in an organization must be from the same marketplace.
///
/// * ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: You attempted to change the membership of an account too quickly after its previous change.
///
/// * PAYMENT_INSTRUMENT_REQUIRED: You can't complete the operation with an account that doesn't have a payment instrument, such as a credit card, associated with it.
public struct HandshakeConstraintViolationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var reason: OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct HandshakeConstraintViolationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason?
}

extension HandshakeConstraintViolationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension OrganizationsClientTypes {
    public enum HandshakeConstraintViolationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountNumberLimitExceeded
        case alreadyInAnOrganization
        case handshakeRateLimitExceeded
        case inviteDisabledDuringEnableAllFeatures
        case managementAccountEmailNotVerified
        case organizationAlreadyHasAllFeatures
        case organizationFromDifferentSellerOfRecord
        case organizationIsAlreadyPendingAllFeaturesMigration
        case organizationMembershipChangeRateLimitExceeded
        case paymentInstrumentRequired
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeConstraintViolationExceptionReason] {
            return [
                .accountNumberLimitExceeded,
                .alreadyInAnOrganization,
                .handshakeRateLimitExceeded,
                .inviteDisabledDuringEnableAllFeatures,
                .managementAccountEmailNotVerified,
                .organizationAlreadyHasAllFeatures,
                .organizationFromDifferentSellerOfRecord,
                .organizationIsAlreadyPendingAllFeaturesMigration,
                .organizationMembershipChangeRateLimitExceeded,
                .paymentInstrumentRequired,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
            case .alreadyInAnOrganization: return "ALREADY_IN_AN_ORGANIZATION"
            case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
            case .inviteDisabledDuringEnableAllFeatures: return "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
            case .managementAccountEmailNotVerified: return "MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED"
            case .organizationAlreadyHasAllFeatures: return "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
            case .organizationFromDifferentSellerOfRecord: return "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
            case .organizationIsAlreadyPendingAllFeaturesMigration: return "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION"
            case .organizationMembershipChangeRateLimitExceeded: return "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
            case .paymentInstrumentRequired: return "PAYMENT_INSTRUMENT_REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandshakeConstraintViolationExceptionReason(rawValue: rawValue) ?? HandshakeConstraintViolationExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.HandshakeFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case parentHandshakeId = "ParentHandshakeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = self.actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let parentHandshakeId = self.parentHandshakeId {
            try encodeContainer.encode(parentHandshakeId, forKey: .parentHandshakeId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let parentHandshakeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentHandshakeId)
        parentHandshakeId = parentHandshakeIdDecoded
    }
}

extension OrganizationsClientTypes {
    /// Specifies the criteria that are used to select the handshakes for the operation.
    public struct HandshakeFilter: Swift.Equatable {
        /// Specifies the type of handshake action. If you specify ActionType, you cannot also specify ParentHandshakeId.
        public var actionType: OrganizationsClientTypes.ActionType?
        /// Specifies the parent handshake. Only used for handshake types that are a child of another type. If you specify ParentHandshakeId, you cannot also specify ActionType. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        public var parentHandshakeId: Swift.String?

        public init (
            actionType: OrganizationsClientTypes.ActionType? = nil,
            parentHandshakeId: Swift.String? = nil
        )
        {
            self.actionType = actionType
            self.parentHandshakeId = parentHandshakeId
        }
    }

}

extension HandshakeNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: HandshakeNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a handshake with the HandshakeId that you specified.
public struct HandshakeNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HandshakeNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension HandshakeNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.HandshakeParty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakePartyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension OrganizationsClientTypes.HandshakeParty: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HandshakeParty(type: \(Swift.String(describing: type)), id: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Identifies a participant in a handshake.
    public struct HandshakeParty: Swift.Equatable {
        /// The unique identifier (ID) for the party. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        /// This member is required.
        public var id: Swift.String?
        /// The type of party.
        /// This member is required.
        public var type: OrganizationsClientTypes.HandshakePartyType?

        public init (
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.HandshakePartyType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension OrganizationsClientTypes {
    public enum HandshakePartyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case email
        case organization
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakePartyType] {
            return [
                .account,
                .email,
                .organization,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .email: return "EMAIL"
            case .organization: return "ORGANIZATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandshakePartyType(rawValue: rawValue) ?? HandshakePartyType.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.HandshakeResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resources = "Resources"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for handshakeresource0 in resources {
                try resourcesContainer.encode(handshakeresource0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeResourceType.self, forKey: .type)
        type = typeDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.HandshakeResource?].self, forKey: .resources)
        var resourcesDecoded0:[OrganizationsClientTypes.HandshakeResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [OrganizationsClientTypes.HandshakeResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension OrganizationsClientTypes.HandshakeResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HandshakeResource(resources: \(Swift.String(describing: resources)), type: \(Swift.String(describing: type)), value: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Contains additional data that is needed to process a handshake.
    public struct HandshakeResource: Swift.Equatable {
        /// When needed, contains an additional array of HandshakeResource objects.
        public var resources: [OrganizationsClientTypes.HandshakeResource]?
        /// The type of information being passed, specifying how the value is to be interpreted by the other party:
        ///
        /// * ACCOUNT - Specifies an Amazon Web Services account ID number.
        ///
        /// * ORGANIZATION - Specifies an organization ID number.
        ///
        /// * EMAIL - Specifies the email address that is associated with the account that receives the handshake.
        ///
        /// * OWNER_EMAIL - Specifies the email address associated with the management account. Included as information about an organization.
        ///
        /// * OWNER_NAME - Specifies the name associated with the management account. Included as information about an organization.
        ///
        /// * NOTES - Additional text provided by the handshake initiator and intended for the recipient to read.
        public var type: OrganizationsClientTypes.HandshakeResourceType?
        /// The information that is passed to the other party in the handshake. The format of the value string must match the requirements of the specified type.
        public var value: Swift.String?

        public init (
            resources: [OrganizationsClientTypes.HandshakeResource]? = nil,
            type: OrganizationsClientTypes.HandshakeResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.resources = resources
            self.type = type
            self.value = value
        }
    }

}

extension OrganizationsClientTypes {
    public enum HandshakeResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case email
        case masterEmail
        case masterName
        case notes
        case organization
        case organizationFeatureSet
        case parentHandshake
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeResourceType] {
            return [
                .account,
                .email,
                .masterEmail,
                .masterName,
                .notes,
                .organization,
                .organizationFeatureSet,
                .parentHandshake,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .email: return "EMAIL"
            case .masterEmail: return "MASTER_EMAIL"
            case .masterName: return "MASTER_NAME"
            case .notes: return "NOTES"
            case .organization: return "ORGANIZATION"
            case .organizationFeatureSet: return "ORGANIZATION_FEATURE_SET"
            case .parentHandshake: return "PARENT_HANDSHAKE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandshakeResourceType(rawValue: rawValue) ?? HandshakeResourceType.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes {
    public enum HandshakeState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accepted
        case canceled
        case declined
        case expired
        case `open`
        case requested
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeState] {
            return [
                .accepted,
                .canceled,
                .declined,
                .expired,
                .open,
                .requested,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .canceled: return "CANCELED"
            case .declined: return "DECLINED"
            case .expired: return "EXPIRED"
            case .open: return "OPEN"
            case .requested: return "REQUESTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandshakeState(rawValue: rawValue) ?? HandshakeState.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes {
    public enum IAMUserAccessToBilling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [IAMUserAccessToBilling] {
            return [
                .allow,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IAMUserAccessToBilling(rawValue: rawValue) ?? IAMUserAccessToBilling.sdkUnknown(rawValue)
        }
    }
}

extension InvalidHandshakeTransitionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidHandshakeTransitionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't perform the operation on the handshake in its current state. For example, you can't cancel a handshake that was already accepted or accept a handshake that was already declined.
public struct InvalidHandshakeTransitionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidHandshakeTransitionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidHandshakeTransitionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation failed because you provided invalid values for one or more of the request parameters. This exception includes a reason that contains additional information about the violated limit: Some of the reasons in the following list might not be applicable to this specific API or operation.
///
/// * DUPLICATE_TAG_KEY: Tag keys must be unique among the tags attached to the same entity.
///
/// * IMMUTABLE_POLICY: You specified a policy that is managed by Amazon Web Services and can't be modified.
///
/// * INPUT_REQUIRED: You must include a value for all required parameters.
///
/// * INVALID_EMAIL_ADDRESS_TARGET: You specified an invalid email address for the invited account owner.
///
/// * INVALID_ENUM: You specified an invalid value.
///
/// * INVALID_ENUM_POLICY_TYPE: You specified an invalid policy type string.
///
/// * INVALID_FULL_NAME_TARGET: You specified a full name that contains invalid characters.
///
/// * INVALID_LIST_MEMBER: You provided a list to a parameter that contains at least one invalid value.
///
/// * INVALID_PAGINATION_TOKEN: Get the value for the NextToken parameter from the response to a previous call of the operation.
///
/// * INVALID_PARTY_TYPE_TARGET: You specified the wrong type of entity (account, organization, or email) as a party.
///
/// * INVALID_PATTERN: You provided a value that doesn't match the required pattern.
///
/// * INVALID_PATTERN_TARGET_ID: You specified a policy target ID that doesn't match the required pattern.
///
/// * INVALID_ROLE_NAME: You provided a role name that isn't valid. A role name can't begin with the reserved prefix AWSServiceRoleFor.
///
/// * INVALID_SYNTAX_ORGANIZATION_ARN: You specified an invalid Amazon Resource Name (ARN) for the organization.
///
/// * INVALID_SYNTAX_POLICY_ID: You specified an invalid policy ID.
///
/// * INVALID_SYSTEM_TAGS_PARAMETER: You specified a tag key that is a system tag. You can’t add, edit, or delete system tag keys because they're reserved for Amazon Web Services use. System tags don’t count against your tags per resource limit.
///
/// * MAX_FILTER_LIMIT_EXCEEDED: You can specify only one filter parameter for the operation.
///
/// * MAX_LENGTH_EXCEEDED: You provided a string parameter that is longer than allowed.
///
/// * MAX_VALUE_EXCEEDED: You provided a numeric parameter that has a larger value than allowed.
///
/// * MIN_LENGTH_EXCEEDED: You provided a string parameter that is shorter than allowed.
///
/// * MIN_VALUE_EXCEEDED: You provided a numeric parameter that has a smaller value than allowed.
///
/// * MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS: You can move an account only between entities in the same root.
///
/// * TARGET_NOT_SUPPORTED: You can't perform the specified operation on that target entity.
///
/// * UNRECOGNIZED_SERVICE_PRINCIPAL: You specified a service principal that isn't recognized.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var reason: OrganizationsClientTypes.InvalidInputExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.InvalidInputExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: OrganizationsClientTypes.InvalidInputExceptionReason?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.InvalidInputExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension OrganizationsClientTypes {
    public enum InvalidInputExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duplicateTagKey
        case immutablePolicy
        case inputRequired
        case invalidEmailAddressTarget
        case invalidEnum
        case invalidEnumPolicyType
        case invalidFullNameTarget
        case invalidListMember
        case invalidPaginationToken
        case invalidPartyTypeTarget
        case invalidPattern
        case invalidPatternTargetId
        case invalidResourcePolicyJson
        case invalidRoleName
        case invalidSyntaxOrganization
        case invalidSyntaxPolicy
        case invalidSystemTagsParameter
        case maxFilterLimitExceeded
        case maxLengthExceeded
        case maxValueExceeded
        case minLengthExceeded
        case minValueExceeded
        case movingAccountBetweenDifferentRoots
        case targetNotSupported
        case unrecognizedServicePrincipal
        case unsupportedActionInResourcePolicy
        case unsupportedPolicyTypeInResourcePolicy
        case unsupportedResourceInResourcePolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidInputExceptionReason] {
            return [
                .duplicateTagKey,
                .immutablePolicy,
                .inputRequired,
                .invalidEmailAddressTarget,
                .invalidEnum,
                .invalidEnumPolicyType,
                .invalidFullNameTarget,
                .invalidListMember,
                .invalidPaginationToken,
                .invalidPartyTypeTarget,
                .invalidPattern,
                .invalidPatternTargetId,
                .invalidResourcePolicyJson,
                .invalidRoleName,
                .invalidSyntaxOrganization,
                .invalidSyntaxPolicy,
                .invalidSystemTagsParameter,
                .maxFilterLimitExceeded,
                .maxLengthExceeded,
                .maxValueExceeded,
                .minLengthExceeded,
                .minValueExceeded,
                .movingAccountBetweenDifferentRoots,
                .targetNotSupported,
                .unrecognizedServicePrincipal,
                .unsupportedActionInResourcePolicy,
                .unsupportedPolicyTypeInResourcePolicy,
                .unsupportedResourceInResourcePolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duplicateTagKey: return "DUPLICATE_TAG_KEY"
            case .immutablePolicy: return "IMMUTABLE_POLICY"
            case .inputRequired: return "INPUT_REQUIRED"
            case .invalidEmailAddressTarget: return "INVALID_EMAIL_ADDRESS_TARGET"
            case .invalidEnum: return "INVALID_ENUM"
            case .invalidEnumPolicyType: return "INVALID_ENUM_POLICY_TYPE"
            case .invalidFullNameTarget: return "INVALID_FULL_NAME_TARGET"
            case .invalidListMember: return "INVALID_LIST_MEMBER"
            case .invalidPaginationToken: return "INVALID_NEXT_TOKEN"
            case .invalidPartyTypeTarget: return "INVALID_PARTY_TYPE_TARGET"
            case .invalidPattern: return "INVALID_PATTERN"
            case .invalidPatternTargetId: return "INVALID_PATTERN_TARGET_ID"
            case .invalidResourcePolicyJson: return "INVALID_RESOURCE_POLICY_JSON"
            case .invalidRoleName: return "INVALID_ROLE_NAME"
            case .invalidSyntaxOrganization: return "INVALID_SYNTAX_ORGANIZATION_ARN"
            case .invalidSyntaxPolicy: return "INVALID_SYNTAX_POLICY_ID"
            case .invalidSystemTagsParameter: return "INVALID_SYSTEM_TAGS_PARAMETER"
            case .maxFilterLimitExceeded: return "MAX_LIMIT_EXCEEDED_FILTER"
            case .maxLengthExceeded: return "MAX_LENGTH_EXCEEDED"
            case .maxValueExceeded: return "MAX_VALUE_EXCEEDED"
            case .minLengthExceeded: return "MIN_LENGTH_EXCEEDED"
            case .minValueExceeded: return "MIN_VALUE_EXCEEDED"
            case .movingAccountBetweenDifferentRoots: return "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
            case .targetNotSupported: return "TARGET_NOT_SUPPORTED"
            case .unrecognizedServicePrincipal: return "UNRECOGNIZED_SERVICE_PRINCIPAL"
            case .unsupportedActionInResourcePolicy: return "UNSUPPORTED_ACTION_IN_RESOURCE_POLICY"
            case .unsupportedPolicyTypeInResourcePolicy: return "UNSUPPORTED_POLICY_TYPE_IN_RESOURCE_POLICY"
            case .unsupportedResourceInResourcePolicy: return "UNSUPPORTED_RESOURCE_IN_RESOURCE_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvalidInputExceptionReason(rawValue: rawValue) ?? InvalidInputExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension InviteAccountToOrganizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteAccountToOrganizationInput(tags: \(Swift.String(describing: tags)), target: \(Swift.String(describing: target)), notes: \"CONTENT_REDACTED\")"}
}

extension InviteAccountToOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notes = "Notes"
        case tags = "Tags"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notes = self.notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}

extension InviteAccountToOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct InviteAccountToOrganizationInput: Swift.Equatable {
    /// Additional information that you want to include in the generated email to the recipient account owner.
    public var notes: Swift.String?
    /// A list of tags that you want to attach to the account when it becomes a member of the organization. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. Any tags in the request are checked for compliance with any applicable tag policies when the request is made. The request is rejected if the tags in the request don't match the requirements of the policy at that time. Tag policy compliance is not checked again when the invitation is accepted and the tags are actually attached to the account. That means that if the tag policy changes between the invitation and the acceptance, then that tags could potentially be non-compliant. If any one of the tags is invalid or if you exceed the allowed number of tags for an account, then the entire request fails and invitations are not sent.
    public var tags: [OrganizationsClientTypes.Tag]?
    /// The identifier (ID) of the Amazon Web Services account that you want to invite to join your organization. This is a JSON object that contains the following elements: { "Type": "ACCOUNT", "Id": "< account id number >" } If you use the CLI, you can submit this as a single string, similar to the following example: --target Id=123456789012,Type=ACCOUNT If you specify "Type": "ACCOUNT", you must provide the Amazon Web Services account ID number as the Id. If you specify "Type": "EMAIL", you must specify the email address that is associated with the account. --target Id=diego@example.com,Type=EMAIL
    /// This member is required.
    public var target: OrganizationsClientTypes.HandshakeParty?

    public init (
        notes: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil,
        target: OrganizationsClientTypes.HandshakeParty? = nil
    )
    {
        self.notes = notes
        self.tags = tags
        self.target = target
    }
}

struct InviteAccountToOrganizationInputBody: Swift.Equatable {
    let target: OrganizationsClientTypes.HandshakeParty?
    let notes: Swift.String?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension InviteAccountToOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notes = "Notes"
        case tags = "Tags"
        case target = "Target"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeParty.self, forKey: .target)
        target = targetDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension InviteAccountToOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension InviteAccountToOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountOwnerNotVerifiedException" : self = .accountOwnerNotVerifiedException(try AccountOwnerNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateHandshakeException" : self = .duplicateHandshakeException(try DuplicateHandshakeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FinalizingOrganizationException" : self = .finalizingOrganizationException(try FinalizingOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandshakeConstraintViolationException" : self = .handshakeConstraintViolationException(try HandshakeConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum InviteAccountToOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountOwnerNotVerifiedException(AccountOwnerNotVerifiedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicateHandshakeException(DuplicateHandshakeException)
    case finalizingOrganizationException(FinalizingOrganizationException)
    case handshakeConstraintViolationException(HandshakeConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension InviteAccountToOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InviteAccountToOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshake = output.handshake
        } else {
            self.handshake = nil
        }
    }
}

public struct InviteAccountToOrganizationOutputResponse: Swift.Equatable {
    /// A structure that contains details about the handshake that is created to support this invitation request.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init (
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

struct InviteAccountToOrganizationOutputResponseBody: Swift.Equatable {
    let handshake: OrganizationsClientTypes.Handshake?
}

extension InviteAccountToOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshake = "Handshake"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Handshake.self, forKey: .handshake)
        handshake = handshakeDecoded
    }
}

extension LeaveOrganizationInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension LeaveOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct LeaveOrganizationInput: Swift.Equatable {

    public init () { }
}

struct LeaveOrganizationInputBody: Swift.Equatable {
}

extension LeaveOrganizationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension LeaveOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension LeaveOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MasterCannotLeaveOrganizationException" : self = .masterCannotLeaveOrganizationException(try MasterCannotLeaveOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum LeaveOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case masterCannotLeaveOrganizationException(MasterCannotLeaveOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension LeaveOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct LeaveOrganizationOutputResponse: Swift.Equatable {

    public init () { }
}

extension ListAWSServiceAccessForOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAWSServiceAccessForOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAWSServiceAccessForOrganizationInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAWSServiceAccessForOrganizationInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAWSServiceAccessForOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAWSServiceAccessForOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAWSServiceAccessForOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAWSServiceAccessForOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAWSServiceAccessForOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAWSServiceAccessForOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.enabledServicePrincipals = output.enabledServicePrincipals
            self.nextToken = output.nextToken
        } else {
            self.enabledServicePrincipals = nil
            self.nextToken = nil
        }
    }
}

public struct ListAWSServiceAccessForOrganizationOutputResponse: Swift.Equatable {
    /// A list of the service principals for the services that are enabled to integrate with your organization. Each principal is a structure that includes the name and the date that it was enabled for integration with Organizations.
    public var enabledServicePrincipals: [OrganizationsClientTypes.EnabledServicePrincipal]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        enabledServicePrincipals: [OrganizationsClientTypes.EnabledServicePrincipal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.enabledServicePrincipals = enabledServicePrincipals
        self.nextToken = nextToken
    }
}

struct ListAWSServiceAccessForOrganizationOutputResponseBody: Swift.Equatable {
    let enabledServicePrincipals: [OrganizationsClientTypes.EnabledServicePrincipal]?
    let nextToken: Swift.String?
}

extension ListAWSServiceAccessForOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabledServicePrincipals = "EnabledServicePrincipals"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledServicePrincipalsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.EnabledServicePrincipal?].self, forKey: .enabledServicePrincipals)
        var enabledServicePrincipalsDecoded0:[OrganizationsClientTypes.EnabledServicePrincipal]? = nil
        if let enabledServicePrincipalsContainer = enabledServicePrincipalsContainer {
            enabledServicePrincipalsDecoded0 = [OrganizationsClientTypes.EnabledServicePrincipal]()
            for structure0 in enabledServicePrincipalsContainer {
                if let structure0 = structure0 {
                    enabledServicePrincipalsDecoded0?.append(structure0)
                }
            }
        }
        enabledServicePrincipals = enabledServicePrincipalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAccountsForParentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

extension ListAccountsForParentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAccountsForParentInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) for the parent root or organization unit (OU) whose accounts you want to list.
    /// This member is required.
    public var parentId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListAccountsForParentInputBody: Swift.Equatable {
    let parentId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAccountsForParentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAccountsForParentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAccountsForParentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAccountsForParentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccountsForParentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAccountsForParentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accounts = output.accounts
            self.nextToken = output.nextToken
        } else {
            self.accounts = nil
            self.nextToken = nil
        }
    }
}

public struct ListAccountsForParentOutputResponse: Swift.Equatable {
    /// A list of the accounts in the specified root or OU.
    public var accounts: [OrganizationsClientTypes.Account]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        accounts: [OrganizationsClientTypes.Account]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

struct ListAccountsForParentOutputResponseBody: Swift.Equatable {
    let accounts: [OrganizationsClientTypes.Account]?
    let nextToken: Swift.String?
}

extension ListAccountsForParentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Account?].self, forKey: .accounts)
        var accountsDecoded0:[OrganizationsClientTypes.Account]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [OrganizationsClientTypes.Account]()
            for structure0 in accountsContainer {
                if let structure0 = structure0 {
                    accountsDecoded0?.append(structure0)
                }
            }
        }
        accounts = accountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAccountsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAccountsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAccountsInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAccountsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAccountsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAccountsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAccountsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAccountsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAccountsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAccountsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accounts = output.accounts
            self.nextToken = output.nextToken
        } else {
            self.accounts = nil
            self.nextToken = nil
        }
    }
}

public struct ListAccountsOutputResponse: Swift.Equatable {
    /// A list of objects in the organization.
    public var accounts: [OrganizationsClientTypes.Account]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        accounts: [OrganizationsClientTypes.Account]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

struct ListAccountsOutputResponseBody: Swift.Equatable {
    let accounts: [OrganizationsClientTypes.Account]?
    let nextToken: Swift.String?
}

extension ListAccountsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Account?].self, forKey: .accounts)
        var accountsDecoded0:[OrganizationsClientTypes.Account]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [OrganizationsClientTypes.Account]()
            for structure0 in accountsContainer {
                if let structure0 = structure0 {
                    accountsDecoded0?.append(structure0)
                }
            }
        }
        accounts = accountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListChildrenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childType = "ChildType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childType = self.childType {
            try encodeContainer.encode(childType.rawValue, forKey: .childType)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

extension ListChildrenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListChildrenInput: Swift.Equatable {
    /// Filters the output to include only the specified child type.
    /// This member is required.
    public var childType: OrganizationsClientTypes.ChildType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) for the parent root or OU whose children you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?

    public init (
        childType: OrganizationsClientTypes.ChildType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.childType = childType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListChildrenInputBody: Swift.Equatable {
    let parentId: Swift.String?
    let childType: OrganizationsClientTypes.ChildType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListChildrenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childType = "ChildType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let childTypeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ChildType.self, forKey: .childType)
        childType = childTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListChildrenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListChildrenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListChildrenOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChildrenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListChildrenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.children = output.children
            self.nextToken = output.nextToken
        } else {
            self.children = nil
            self.nextToken = nil
        }
    }
}

public struct ListChildrenOutputResponse: Swift.Equatable {
    /// The list of children of the specified parent container.
    public var children: [OrganizationsClientTypes.Child]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        children: [OrganizationsClientTypes.Child]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.children = children
        self.nextToken = nextToken
    }
}

struct ListChildrenOutputResponseBody: Swift.Equatable {
    let children: [OrganizationsClientTypes.Child]?
    let nextToken: Swift.String?
}

extension ListChildrenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case children = "Children"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childrenContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Child?].self, forKey: .children)
        var childrenDecoded0:[OrganizationsClientTypes.Child]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [OrganizationsClientTypes.Child]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCreateAccountStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case states = "States"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for createaccountstate0 in states {
                try statesContainer.encode(createaccountstate0.rawValue)
            }
        }
    }
}

extension ListCreateAccountStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListCreateAccountStatusInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// A list of one or more states that you want included in the response. If this parameter isn't present, all requests are included in the response.
    public var states: [OrganizationsClientTypes.CreateAccountState]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        states: [OrganizationsClientTypes.CreateAccountState]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.states = states
    }
}

struct ListCreateAccountStatusInputBody: Swift.Equatable {
    let states: [OrganizationsClientTypes.CreateAccountState]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListCreateAccountStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case states = "States"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.CreateAccountState?].self, forKey: .states)
        var statesDecoded0:[OrganizationsClientTypes.CreateAccountState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [OrganizationsClientTypes.CreateAccountState]()
            for enum0 in statesContainer {
                if let enum0 = enum0 {
                    statesDecoded0?.append(enum0)
                }
            }
        }
        states = statesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListCreateAccountStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCreateAccountStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCreateAccountStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCreateAccountStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCreateAccountStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createAccountStatuses = output.createAccountStatuses
            self.nextToken = output.nextToken
        } else {
            self.createAccountStatuses = nil
            self.nextToken = nil
        }
    }
}

public struct ListCreateAccountStatusOutputResponse: Swift.Equatable {
    /// A list of objects with details about the requests. Certain elements, such as the accountId number, are present in the output only after the account has been successfully created.
    public var createAccountStatuses: [OrganizationsClientTypes.CreateAccountStatus]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        createAccountStatuses: [OrganizationsClientTypes.CreateAccountStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.createAccountStatuses = createAccountStatuses
        self.nextToken = nextToken
    }
}

struct ListCreateAccountStatusOutputResponseBody: Swift.Equatable {
    let createAccountStatuses: [OrganizationsClientTypes.CreateAccountStatus]?
    let nextToken: Swift.String?
}

extension ListCreateAccountStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAccountStatuses = "CreateAccountStatuses"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createAccountStatusesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.CreateAccountStatus?].self, forKey: .createAccountStatuses)
        var createAccountStatusesDecoded0:[OrganizationsClientTypes.CreateAccountStatus]? = nil
        if let createAccountStatusesContainer = createAccountStatusesContainer {
            createAccountStatusesDecoded0 = [OrganizationsClientTypes.CreateAccountStatus]()
            for structure0 in createAccountStatusesContainer {
                if let structure0 = structure0 {
                    createAccountStatusesDecoded0?.append(structure0)
                }
            }
        }
        createAccountStatuses = createAccountStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDelegatedAdministratorsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

extension ListDelegatedAdministratorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDelegatedAdministratorsInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
    public var servicePrincipal: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.servicePrincipal = servicePrincipal
    }
}

struct ListDelegatedAdministratorsInputBody: Swift.Equatable {
    let servicePrincipal: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDelegatedAdministratorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDelegatedAdministratorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDelegatedAdministratorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDelegatedAdministratorsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDelegatedAdministratorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDelegatedAdministratorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegatedAdministrators = output.delegatedAdministrators
            self.nextToken = output.nextToken
        } else {
            self.delegatedAdministrators = nil
            self.nextToken = nil
        }
    }
}

public struct ListDelegatedAdministratorsOutputResponse: Swift.Equatable {
    /// The list of delegated administrators in your organization.
    public var delegatedAdministrators: [OrganizationsClientTypes.DelegatedAdministrator]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        delegatedAdministrators: [OrganizationsClientTypes.DelegatedAdministrator]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.delegatedAdministrators = delegatedAdministrators
        self.nextToken = nextToken
    }
}

struct ListDelegatedAdministratorsOutputResponseBody: Swift.Equatable {
    let delegatedAdministrators: [OrganizationsClientTypes.DelegatedAdministrator]?
    let nextToken: Swift.String?
}

extension ListDelegatedAdministratorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegatedAdministrators = "DelegatedAdministrators"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegatedAdministratorsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.DelegatedAdministrator?].self, forKey: .delegatedAdministrators)
        var delegatedAdministratorsDecoded0:[OrganizationsClientTypes.DelegatedAdministrator]? = nil
        if let delegatedAdministratorsContainer = delegatedAdministratorsContainer {
            delegatedAdministratorsDecoded0 = [OrganizationsClientTypes.DelegatedAdministrator]()
            for structure0 in delegatedAdministratorsContainer {
                if let structure0 = structure0 {
                    delegatedAdministratorsDecoded0?.append(structure0)
                }
            }
        }
        delegatedAdministrators = delegatedAdministratorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDelegatedServicesForAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDelegatedServicesForAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDelegatedServicesForAccountInput: Swift.Equatable {
    /// The account ID number of a delegated administrator account in the organization.
    /// This member is required.
    public var accountId: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDelegatedServicesForAccountInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDelegatedServicesForAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDelegatedServicesForAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDelegatedServicesForAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotRegisteredException" : self = .accountNotRegisteredException(try AccountNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDelegatedServicesForAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case accountNotRegisteredException(AccountNotRegisteredException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDelegatedServicesForAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDelegatedServicesForAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegatedServices = output.delegatedServices
            self.nextToken = output.nextToken
        } else {
            self.delegatedServices = nil
            self.nextToken = nil
        }
    }
}

public struct ListDelegatedServicesForAccountOutputResponse: Swift.Equatable {
    /// The services for which the account is a delegated administrator.
    public var delegatedServices: [OrganizationsClientTypes.DelegatedService]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        delegatedServices: [OrganizationsClientTypes.DelegatedService]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.delegatedServices = delegatedServices
        self.nextToken = nextToken
    }
}

struct ListDelegatedServicesForAccountOutputResponseBody: Swift.Equatable {
    let delegatedServices: [OrganizationsClientTypes.DelegatedService]?
    let nextToken: Swift.String?
}

extension ListDelegatedServicesForAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegatedServices = "DelegatedServices"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegatedServicesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.DelegatedService?].self, forKey: .delegatedServices)
        var delegatedServicesDecoded0:[OrganizationsClientTypes.DelegatedService]? = nil
        if let delegatedServicesContainer = delegatedServicesContainer {
            delegatedServicesDecoded0 = [OrganizationsClientTypes.DelegatedService]()
            for structure0 in delegatedServicesContainer {
                if let structure0 = structure0 {
                    delegatedServicesDecoded0?.append(structure0)
                }
            }
        }
        delegatedServices = delegatedServicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHandshakesForAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListHandshakesForAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHandshakesForAccountInput: Swift.Equatable {
    /// Filters the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE_ALL_FEATURES, or APPROVE_ALL_FEATURES. Alternatively, for the ENABLE_ALL_FEATURES handshake that generates a separate child handshake for each member account, you can specify ParentHandshakeId to see only the handshakes that were generated by that parent request.
    public var filter: OrganizationsClientTypes.HandshakeFilter?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        filter: OrganizationsClientTypes.HandshakeFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHandshakesForAccountInputBody: Swift.Equatable {
    let filter: OrganizationsClientTypes.HandshakeFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListHandshakesForAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHandshakesForAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHandshakesForAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListHandshakesForAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHandshakesForAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListHandshakesForAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshakes = output.handshakes
            self.nextToken = output.nextToken
        } else {
            self.handshakes = nil
            self.nextToken = nil
        }
    }
}

public struct ListHandshakesForAccountOutputResponse: Swift.Equatable {
    /// A list of [Handshake] objects with details about each of the handshakes that is associated with the specified account.
    public var handshakes: [OrganizationsClientTypes.Handshake]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        handshakes: [OrganizationsClientTypes.Handshake]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

struct ListHandshakesForAccountOutputResponseBody: Swift.Equatable {
    let handshakes: [OrganizationsClientTypes.Handshake]?
    let nextToken: Swift.String?
}

extension ListHandshakesForAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakes = "Handshakes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Handshake?].self, forKey: .handshakes)
        var handshakesDecoded0:[OrganizationsClientTypes.Handshake]? = nil
        if let handshakesContainer = handshakesContainer {
            handshakesDecoded0 = [OrganizationsClientTypes.Handshake]()
            for structure0 in handshakesContainer {
                if let structure0 = structure0 {
                    handshakesDecoded0?.append(structure0)
                }
            }
        }
        handshakes = handshakesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHandshakesForOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListHandshakesForOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHandshakesForOrganizationInput: Swift.Equatable {
    /// A filter of the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-ALL-FEATURES, or APPROVE-ALL-FEATURES. Alternatively, for the ENABLE-ALL-FEATURES handshake that generates a separate child handshake for each member account, you can specify the ParentHandshakeId to see only the handshakes that were generated by that parent request.
    public var filter: OrganizationsClientTypes.HandshakeFilter?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        filter: OrganizationsClientTypes.HandshakeFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHandshakesForOrganizationInputBody: Swift.Equatable {
    let filter: OrganizationsClientTypes.HandshakeFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListHandshakesForOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.HandshakeFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHandshakesForOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHandshakesForOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListHandshakesForOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHandshakesForOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListHandshakesForOrganizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.handshakes = output.handshakes
            self.nextToken = output.nextToken
        } else {
            self.handshakes = nil
            self.nextToken = nil
        }
    }
}

public struct ListHandshakesForOrganizationOutputResponse: Swift.Equatable {
    /// A list of [Handshake] objects with details about each of the handshakes that are associated with an organization.
    public var handshakes: [OrganizationsClientTypes.Handshake]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        handshakes: [OrganizationsClientTypes.Handshake]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

struct ListHandshakesForOrganizationOutputResponseBody: Swift.Equatable {
    let handshakes: [OrganizationsClientTypes.Handshake]?
    let nextToken: Swift.String?
}

extension ListHandshakesForOrganizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case handshakes = "Handshakes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let handshakesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Handshake?].self, forKey: .handshakes)
        var handshakesDecoded0:[OrganizationsClientTypes.Handshake]? = nil
        if let handshakesContainer = handshakesContainer {
            handshakesDecoded0 = [OrganizationsClientTypes.Handshake]()
            for structure0 in handshakesContainer {
                if let structure0 = structure0 {
                    handshakesDecoded0?.append(structure0)
                }
            }
        }
        handshakes = handshakesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOrganizationalUnitsForParentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
    }
}

extension ListOrganizationalUnitsForParentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListOrganizationalUnitsForParentInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the root or OU whose child OUs you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

struct ListOrganizationalUnitsForParentInputBody: Swift.Equatable {
    let parentId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListOrganizationalUnitsForParentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parentId = "ParentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListOrganizationalUnitsForParentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOrganizationalUnitsForParentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentNotFoundException" : self = .parentNotFoundException(try ParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListOrganizationalUnitsForParentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case parentNotFoundException(ParentNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOrganizationalUnitsForParentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListOrganizationalUnitsForParentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationalUnits = output.organizationalUnits
        } else {
            self.nextToken = nil
            self.organizationalUnits = nil
        }
    }
}

public struct ListOrganizationalUnitsForParentOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of the OUs in the specified root or parent OU.
    public var organizationalUnits: [OrganizationsClientTypes.OrganizationalUnit]?

    public init (
        nextToken: Swift.String? = nil,
        organizationalUnits: [OrganizationsClientTypes.OrganizationalUnit]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationalUnits = organizationalUnits
    }
}

struct ListOrganizationalUnitsForParentOutputResponseBody: Swift.Equatable {
    let organizationalUnits: [OrganizationsClientTypes.OrganizationalUnit]?
    let nextToken: Swift.String?
}

extension ListOrganizationalUnitsForParentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationalUnits = "OrganizationalUnits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.OrganizationalUnit?].self, forKey: .organizationalUnits)
        var organizationalUnitsDecoded0:[OrganizationsClientTypes.OrganizationalUnit]? = nil
        if let organizationalUnitsContainer = organizationalUnitsContainer {
            organizationalUnitsDecoded0 = [OrganizationsClientTypes.OrganizationalUnit]()
            for structure0 in organizationalUnitsContainer {
                if let structure0 = structure0 {
                    organizationalUnitsDecoded0?.append(structure0)
                }
            }
        }
        organizationalUnits = organizationalUnitsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListParentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childId = "ChildId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childId = self.childId {
            try encodeContainer.encode(childId, forKey: .childId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListParentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListParentsInput: Swift.Equatable {
    /// The unique identifier (ID) of the OU or account whose parent containers you want to list. Don't specify a root. The [regex pattern](http://wikipedia.org/wiki/regex) for a child ID string requires one of the following:
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var childId: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        childId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.childId = childId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListParentsInputBody: Swift.Equatable {
    let childId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListParentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childId = "ChildId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .childId)
        childId = childIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListParentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListParentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ChildNotFoundException" : self = .childNotFoundException(try ChildNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListParentsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case childNotFoundException(ChildNotFoundException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListParentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListParentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.parents = output.parents
        } else {
            self.nextToken = nil
            self.parents = nil
        }
    }
}

public struct ListParentsOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of parents for the specified child account or OU.
    public var parents: [OrganizationsClientTypes.Parent]?

    public init (
        nextToken: Swift.String? = nil,
        parents: [OrganizationsClientTypes.Parent]? = nil
    )
    {
        self.nextToken = nextToken
        self.parents = parents
    }
}

struct ListParentsOutputResponseBody: Swift.Equatable {
    let parents: [OrganizationsClientTypes.Parent]?
    let nextToken: Swift.String?
}

extension ListParentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case parents = "Parents"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Parent?].self, forKey: .parents)
        var parentsDecoded0:[OrganizationsClientTypes.Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [OrganizationsClientTypes.Parent]()
            for structure0 in parentsContainer {
                if let structure0 = structure0 {
                    parentsDecoded0?.append(structure0)
                }
            }
        }
        parents = parentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPoliciesForTargetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case targetId = "TargetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter.rawValue, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

extension ListPoliciesForTargetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPoliciesForTargetInput: Swift.Equatable {
    /// The type of policy that you want to include in the returned list. You must specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var filter: OrganizationsClientTypes.PolicyType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the root, organizational unit, or account whose policies you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init (
        filter: OrganizationsClientTypes.PolicyType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.targetId = targetId
    }
}

struct ListPoliciesForTargetInputBody: Swift.Equatable {
    let targetId: Swift.String?
    let filter: OrganizationsClientTypes.PolicyType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPoliciesForTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case targetId = "TargetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let filterDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPoliciesForTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPoliciesForTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPoliciesForTargetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesForTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPoliciesForTargetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.policies = output.policies
        } else {
            self.nextToken = nil
            self.policies = nil
        }
    }
}

public struct ListPoliciesForTargetOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// The list of policies that match the criteria in the request.
    public var policies: [OrganizationsClientTypes.PolicySummary]?

    public init (
        nextToken: Swift.String? = nil,
        policies: [OrganizationsClientTypes.PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

struct ListPoliciesForTargetOutputResponseBody: Swift.Equatable {
    let policies: [OrganizationsClientTypes.PolicySummary]?
    let nextToken: Swift.String?
}

extension ListPoliciesForTargetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicySummary?].self, forKey: .policies)
        var policiesDecoded0:[OrganizationsClientTypes.PolicySummary]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [OrganizationsClientTypes.PolicySummary]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter.rawValue, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPoliciesInput: Swift.Equatable {
    /// Specifies the type of policy that you want to include in the response. You must specify one of the following values:
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    /// This member is required.
    public var filter: OrganizationsClientTypes.PolicyType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        filter: OrganizationsClientTypes.PolicyType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPoliciesInputBody: Swift.Equatable {
    let filter: OrganizationsClientTypes.PolicyType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPoliciesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.policies = output.policies
        } else {
            self.nextToken = nil
            self.policies = nil
        }
    }
}

public struct ListPoliciesOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of policies that match the filter criteria in the request. The output list doesn't include the policy contents. To see the content for a policy, see [DescribePolicy].
    public var policies: [OrganizationsClientTypes.PolicySummary]?

    public init (
        nextToken: Swift.String? = nil,
        policies: [OrganizationsClientTypes.PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

struct ListPoliciesOutputResponseBody: Swift.Equatable {
    let policies: [OrganizationsClientTypes.PolicySummary]?
    let nextToken: Swift.String?
}

extension ListPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicySummary?].self, forKey: .policies)
        var policiesDecoded0:[OrganizationsClientTypes.PolicySummary]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [OrganizationsClientTypes.PolicySummary]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRootsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListRootsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRootsInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRootsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListRootsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListRootsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRootsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRootsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRootsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRootsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.roots = output.roots
        } else {
            self.nextToken = nil
            self.roots = nil
        }
    }
}

public struct ListRootsOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of roots that are defined in an organization.
    public var roots: [OrganizationsClientTypes.Root]?

    public init (
        nextToken: Swift.String? = nil,
        roots: [OrganizationsClientTypes.Root]? = nil
    )
    {
        self.nextToken = nextToken
        self.roots = roots
    }
}

struct ListRootsOutputResponseBody: Swift.Equatable {
    let roots: [OrganizationsClientTypes.Root]?
    let nextToken: Swift.String?
}

extension ListRootsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case roots = "Roots"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Root?].self, forKey: .roots)
        var rootsDecoded0:[OrganizationsClientTypes.Root]? = nil
        if let rootsContainer = rootsContainer {
            rootsDecoded0 = [OrganizationsClientTypes.Root]()
            for structure0 in rootsContainer {
                if let structure0 = structure0 {
                    rootsDecoded0?.append(structure0)
                }
            }
        }
        roots = rootsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The ID of the resource with the tags to list. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceId = resourceId
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// The tags that are assigned to the resource.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [OrganizationsClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTargetsForPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

extension ListTargetsForPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTargetsForPolicyInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the policy whose attachments you want to know. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyId = policyId
    }
}

struct ListTargetsForPolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTargetsForPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyId = "PolicyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTargetsForPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTargetsForPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTargetsForPolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case invalidInputException(InvalidInputException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTargetsForPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTargetsForPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.targets = output.targets
        } else {
            self.nextToken = nil
            self.targets = nil
        }
    }
}

public struct ListTargetsForPolicyOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of structures, each of which contains details about one of the entities to which the specified policy is attached.
    public var targets: [OrganizationsClientTypes.PolicyTargetSummary]?

    public init (
        nextToken: Swift.String? = nil,
        targets: [OrganizationsClientTypes.PolicyTargetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.targets = targets
    }
}

struct ListTargetsForPolicyOutputResponseBody: Swift.Equatable {
    let targets: [OrganizationsClientTypes.PolicyTargetSummary]?
    let nextToken: Swift.String?
}

extension ListTargetsForPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicyTargetSummary?].self, forKey: .targets)
        var targetsDecoded0:[OrganizationsClientTypes.PolicyTargetSummary]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [OrganizationsClientTypes.PolicyTargetSummary]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension MalformedPolicyDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MalformedPolicyDocumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided policy document doesn't meet the requirements of the specified policy type. For example, the syntax might be incorrect. For details about service control policy syntax, see [Service Control Policy Syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html) in the Organizations User Guide.
public struct MalformedPolicyDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedPolicyDocumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MalformedPolicyDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MasterCannotLeaveOrganizationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MasterCannotLeaveOrganizationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't remove a management account from an organization. If you want the management account to become a member account in another organization, you must first delete the current organization of the management account.
public struct MasterCannotLeaveOrganizationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MasterCannotLeaveOrganizationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MasterCannotLeaveOrganizationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MoveAccountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case destinationParentId = "DestinationParentId"
        case sourceParentId = "SourceParentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let destinationParentId = self.destinationParentId {
            try encodeContainer.encode(destinationParentId, forKey: .destinationParentId)
        }
        if let sourceParentId = self.sourceParentId {
            try encodeContainer.encode(sourceParentId, forKey: .sourceParentId)
        }
    }
}

extension MoveAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct MoveAccountInput: Swift.Equatable {
    /// The unique identifier (ID) of the account that you want to move. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?
    /// The unique identifier (ID) of the root or organizational unit that you want to move the account to. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var destinationParentId: Swift.String?
    /// The unique identifier (ID) of the root or organizational unit that you want to move the account from. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var sourceParentId: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        destinationParentId: Swift.String? = nil,
        sourceParentId: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.destinationParentId = destinationParentId
        self.sourceParentId = sourceParentId
    }
}

struct MoveAccountInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let sourceParentId: Swift.String?
    let destinationParentId: Swift.String?
}

extension MoveAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case destinationParentId = "DestinationParentId"
        case sourceParentId = "SourceParentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let sourceParentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceParentId)
        sourceParentId = sourceParentIdDecoded
        let destinationParentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationParentId)
        destinationParentId = destinationParentIdDecoded
    }
}

extension MoveAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension MoveAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DestinationParentNotFoundException" : self = .destinationParentNotFoundException(try DestinationParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateAccountException" : self = .duplicateAccountException(try DuplicateAccountException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceParentNotFoundException" : self = .sourceParentNotFoundException(try SourceParentNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum MoveAccountOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case destinationParentNotFoundException(DestinationParentNotFoundException)
    case duplicateAccountException(DuplicateAccountException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case sourceParentNotFoundException(SourceParentNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension MoveAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct MoveAccountOutputResponse: Swift.Equatable {

    public init () { }
}

extension OrganizationsClientTypes.Organization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case availablePolicyTypes = "AvailablePolicyTypes"
        case featureSet = "FeatureSet"
        case id = "Id"
        case masterAccountArn = "MasterAccountArn"
        case masterAccountEmail = "MasterAccountEmail"
        case masterAccountId = "MasterAccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availablePolicyTypes = availablePolicyTypes {
            var availablePolicyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availablePolicyTypes)
            for policytypesummary0 in availablePolicyTypes {
                try availablePolicyTypesContainer.encode(policytypesummary0)
            }
        }
        if let featureSet = self.featureSet {
            try encodeContainer.encode(featureSet.rawValue, forKey: .featureSet)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let masterAccountArn = self.masterAccountArn {
            try encodeContainer.encode(masterAccountArn, forKey: .masterAccountArn)
        }
        if let masterAccountEmail = self.masterAccountEmail {
            try encodeContainer.encode(masterAccountEmail, forKey: .masterAccountEmail)
        }
        if let masterAccountId = self.masterAccountId {
            try encodeContainer.encode(masterAccountId, forKey: .masterAccountId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let featureSetDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationFeatureSet.self, forKey: .featureSet)
        featureSet = featureSetDecoded
        let masterAccountArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountArn)
        masterAccountArn = masterAccountArnDecoded
        let masterAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountId)
        masterAccountId = masterAccountIdDecoded
        let masterAccountEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountEmail)
        masterAccountEmail = masterAccountEmailDecoded
        let availablePolicyTypesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicyTypeSummary?].self, forKey: .availablePolicyTypes)
        var availablePolicyTypesDecoded0:[OrganizationsClientTypes.PolicyTypeSummary]? = nil
        if let availablePolicyTypesContainer = availablePolicyTypesContainer {
            availablePolicyTypesDecoded0 = [OrganizationsClientTypes.PolicyTypeSummary]()
            for structure0 in availablePolicyTypesContainer {
                if let structure0 = structure0 {
                    availablePolicyTypesDecoded0?.append(structure0)
                }
            }
        }
        availablePolicyTypes = availablePolicyTypesDecoded0
    }
}

extension OrganizationsClientTypes.Organization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Organization(arn: \(Swift.String(describing: arn)), availablePolicyTypes: \(Swift.String(describing: availablePolicyTypes)), featureSet: \(Swift.String(describing: featureSet)), id: \(Swift.String(describing: id)), masterAccountArn: \(Swift.String(describing: masterAccountArn)), masterAccountId: \(Swift.String(describing: masterAccountId)), masterAccountEmail: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {
    /// Contains details about an organization. An organization is a collection of accounts that are centrally managed together using consolidated billing, organized hierarchically with organizational units (OUs), and controlled with policies .
    public struct Organization: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an organization. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization. To determine the policies that are enabled and available for use in your organization, use the [ListRoots] operation instead.
        public var availablePolicyTypes: [OrganizationsClientTypes.PolicyTypeSummary]?
        /// Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see [Enabling All Features in Your Organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html) in the Organizations User Guide.
        public var featureSet: OrganizationsClientTypes.OrganizationFeatureSet?
        /// The unique identifier (ID) of an organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var masterAccountArn: Swift.String?
        /// The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.
        public var masterAccountEmail: Swift.String?
        /// The unique identifier (ID) of the management account of an organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var masterAccountId: Swift.String?

        public init (
            arn: Swift.String? = nil,
            availablePolicyTypes: [OrganizationsClientTypes.PolicyTypeSummary]? = nil,
            featureSet: OrganizationsClientTypes.OrganizationFeatureSet? = nil,
            id: Swift.String? = nil,
            masterAccountArn: Swift.String? = nil,
            masterAccountEmail: Swift.String? = nil,
            masterAccountId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.availablePolicyTypes = availablePolicyTypes
            self.featureSet = featureSet
            self.id = id
            self.masterAccountArn = masterAccountArn
            self.masterAccountEmail = masterAccountEmail
            self.masterAccountId = masterAccountId
        }
    }

}

extension OrganizationsClientTypes {
    public enum OrganizationFeatureSet: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case consolidatedBilling
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationFeatureSet] {
            return [
                .all,
                .consolidatedBilling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .consolidatedBilling: return "CONSOLIDATED_BILLING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationFeatureSet(rawValue: rawValue) ?? OrganizationFeatureSet.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationNotEmptyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OrganizationNotEmptyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The organization isn't empty. To delete an organization, you must first remove all accounts except the management account, delete all OUs, and delete all policies.
public struct OrganizationNotEmptyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationNotEmptyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OrganizationNotEmptyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.OrganizationalUnit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains details about an organizational unit (OU). An OU is a container of Amazon Web Services accounts within a root of an organization. Policies that are attached to an OU apply to all accounts contained in that OU and in any child OUs.
    public struct OrganizationalUnit: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of this OU. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The unique identifier (ID) associated with this OU. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The friendly name of this OU. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension OrganizationalUnitNotEmptyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OrganizationalUnitNotEmptyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified OU is not empty. Move all accounts to another root or to other OUs, remove all child OUs, and try the operation again.
public struct OrganizationalUnitNotEmptyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationalUnitNotEmptyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OrganizationalUnitNotEmptyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationalUnitNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OrganizationalUnitNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find an OU with the OrganizationalUnitId that you specified.
public struct OrganizationalUnitNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationalUnitNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OrganizationalUnitNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.Parent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ParentType.self, forKey: .type)
        type = typeDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains information about either a root or an organizational unit (OU) that can contain OUs or accounts in an organization.
    public struct Parent: Swift.Equatable {
        /// The unique identifier (ID) of the parent entity. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
        ///
        /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The type of the parent entity.
        public var type: OrganizationsClientTypes.ParentType?

        public init (
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.ParentType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension ParentNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a root or OU with the ParentId that you specified.
public struct ParentNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ParentNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ParentNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum ParentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case organizationalUnit
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [ParentType] {
            return [
                .organizationalUnit,
                .root,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParentType(rawValue: rawValue) ?? ParentType.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.Policy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case policySummary = "PolicySummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let policySummary = self.policySummary {
            try encodeContainer.encode(policySummary, forKey: .policySummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policySummaryDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicySummary.self, forKey: .policySummary)
        policySummary = policySummaryDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains rules to be applied to the affected accounts. Policies can be attached directly to accounts, or to roots and OUs to affect all accounts in those hierarchies.
    public struct Policy: Swift.Equatable {
        /// The text content of the policy.
        public var content: Swift.String?
        /// A structure that contains additional details about the policy.
        public var policySummary: OrganizationsClientTypes.PolicySummary?

        public init (
            content: Swift.String? = nil,
            policySummary: OrganizationsClientTypes.PolicySummary? = nil
        )
        {
            self.content = content
            self.policySummary = policySummary
        }
    }

}

extension PolicyChangesInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyChangesInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Changes to the effective policy are in progress, and its contents can't be returned. Try the operation again later.
public struct PolicyChangesInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyChangesInProgressExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyChangesInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The policy is attached to one or more entities. You must detach it from all roots, OUs, and accounts before performing this operation.
public struct PolicyInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyNotAttachedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyNotAttachedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The policy isn't attached to the specified target in the specified root.
public struct PolicyNotAttachedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotAttachedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyNotAttachedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a policy with the PolicyId that you specified.
public struct PolicyNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.PolicySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case awsManaged = "AwsManaged"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if awsManaged != false {
            try encodeContainer.encode(awsManaged, forKey: .awsManaged)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .type)
        type = typeDecoded
        let awsManagedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .awsManaged) ?? false
        awsManaged = awsManagedDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains information about a policy, but does not include the content. To see the content of a policy, see [DescribePolicy].
    public struct PolicySummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the policy. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// A boolean value that indicates whether the specified policy is an Amazon Web Services managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
        public var awsManaged: Swift.Bool
        /// The description of the policy.
        public var description: Swift.String?
        /// The unique identifier (ID) of the policy. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
        public var id: Swift.String?
        /// The friendly name of the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The type of policy.
        public var type: OrganizationsClientTypes.PolicyType?

        public init (
            arn: Swift.String? = nil,
            awsManaged: Swift.Bool = false,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            type: OrganizationsClientTypes.PolicyType? = nil
        )
        {
            self.arn = arn
            self.awsManaged = awsManaged
            self.description = description
            self.id = id
            self.name = name
            self.type = type
        }
    }

}

extension OrganizationsClientTypes.PolicyTargetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case name = "Name"
        case targetId = "TargetId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.TargetType.self, forKey: .type)
        type = typeDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains information about a root, OU, or account that a policy is attached to.
    public struct PolicyTargetSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the policy target. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The friendly name of the policy target. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The unique identifier (ID) of the policy target. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
        ///
        /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
        ///
        /// * Account - A string that consists of exactly 12 digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var targetId: Swift.String?
        /// The type of the policy target.
        public var type: OrganizationsClientTypes.TargetType?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            targetId: Swift.String? = nil,
            type: OrganizationsClientTypes.TargetType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.targetId = targetId
            self.type = type
        }
    }

}

extension OrganizationsClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aiservicesOptOutPolicy
        case backupPolicy
        case serviceControlPolicy
        case tagPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .aiservicesOptOutPolicy,
                .backupPolicy,
                .serviceControlPolicy,
                .tagPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
            case .backupPolicy: return "BACKUP_POLICY"
            case .serviceControlPolicy: return "SERVICE_CONTROL_POLICY"
            case .tagPolicy: return "TAG_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension PolicyTypeAlreadyEnabledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyTypeAlreadyEnabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified policy type is already enabled in the specified root.
public struct PolicyTypeAlreadyEnabledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeAlreadyEnabledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyTypeAlreadyEnabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyTypeNotAvailableForOrganizationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyTypeNotAvailableForOrganizationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't use the specified policy type with the feature set currently enabled for this organization. For example, you can enable SCPs only after you enable all features in the organization. For more information, see [Managing Organizations Policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html#enable_policies_on_root)in the Organizations User Guide.
public struct PolicyTypeNotAvailableForOrganizationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeNotAvailableForOrganizationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyTypeNotAvailableForOrganizationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PolicyTypeNotEnabledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PolicyTypeNotEnabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified policy type isn't currently enabled in this root. You can't attach policies of the specified type to entities in a root until you enable that type in the root. For more information, see [Enabling All Features in Your Organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html) in the Organizations User Guide.
public struct PolicyTypeNotEnabledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PolicyTypeNotEnabledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PolicyTypeNotEnabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum PolicyTypeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case pendingDisable
        case pendingEnable
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyTypeStatus] {
            return [
                .enabled,
                .pendingDisable,
                .pendingEnable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .pendingDisable: return "PENDING_DISABLE"
            case .pendingEnable: return "PENDING_ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyTypeStatus(rawValue: rawValue) ?? PolicyTypeStatus.sdkUnknown(rawValue)
        }
    }
}

extension OrganizationsClientTypes.PolicyTypeSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.PolicyTypeStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OrganizationsClientTypes {
    /// Contains information about a policy type and its status in the associated root.
    public struct PolicyTypeSummary: Swift.Equatable {
        /// The status of the policy type as it relates to the associated root. To attach a policy of the specified type to a root or to an OU or account in that root, it must be available in the organization and enabled for that root.
        public var status: OrganizationsClientTypes.PolicyTypeStatus?
        /// The name of the policy type.
        public var type: OrganizationsClientTypes.PolicyType?

        public init (
            status: OrganizationsClientTypes.PolicyTypeStatus? = nil,
            type: OrganizationsClientTypes.PolicyType? = nil
        )
        {
            self.status = status
            self.type = type
        }
    }

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// If provided, the new content for the resource policy. The text must be correctly formatted JSON that complies with the syntax for the resource policy's type. For more information, see [Service Control Policy Syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html) in the Organizations User Guide.
    /// This member is required.
    public var content: Swift.String?
    /// Updates the list of tags that you want to attach to the newly-created resource policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. Calls with tags apply to the initial creation of the resource policy, otherwise an exception is thrown. If any one of the tags is invalid or if you exceed the allowed number of tags for the resource policy, then the entire request fails and the resource policy is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        content: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.tags = tags
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let content: Swift.String?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the resource policy.
    public var resourcePolicy: OrganizationsClientTypes.ResourcePolicy?

    public init (
        resourcePolicy: OrganizationsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyOutputResponseBody: Swift.Equatable {
    let resourcePolicy: OrganizationsClientTypes.ResourcePolicy?
}

extension PutResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension RegisterDelegatedAdministratorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let servicePrincipal = self.servicePrincipal {
            try encodeContainer.encode(servicePrincipal, forKey: .servicePrincipal)
        }
    }
}

extension RegisterDelegatedAdministratorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterDelegatedAdministratorInput: Swift.Equatable {
    /// The account ID number of the member account in the organization to register as a delegated administrator.
    /// This member is required.
    public var accountId: Swift.String?
    /// The service principal of the Amazon Web Services service for which you want to make the member account a delegated administrator.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

struct RegisterDelegatedAdministratorInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let servicePrincipal: Swift.String?
}

extension RegisterDelegatedAdministratorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case servicePrincipal = "ServicePrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
    }
}

extension RegisterDelegatedAdministratorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterDelegatedAdministratorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountAlreadyRegisteredException" : self = .accountAlreadyRegisteredException(try AccountAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterDelegatedAdministratorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountAlreadyRegisteredException(AccountAlreadyRegisteredException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterDelegatedAdministratorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterDelegatedAdministratorOutputResponse: Swift.Equatable {

    public init () { }
}

extension RemoveAccountFromOrganizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
    }
}

extension RemoveAccountFromOrganizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveAccountFromOrganizationInput: Swift.Equatable {
    /// The unique identifier (ID) of the member account that you want to remove from the organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?

    public init (
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

struct RemoveAccountFromOrganizationInputBody: Swift.Equatable {
    let accountId: Swift.String?
}

extension RemoveAccountFromOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension RemoveAccountFromOrganizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAccountFromOrganizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountNotFoundException" : self = .accountNotFoundException(try AccountNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MasterCannotLeaveOrganizationException" : self = .masterCannotLeaveOrganizationException(try MasterCannotLeaveOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveAccountFromOrganizationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountNotFoundException(AccountNotFoundException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case masterCannotLeaveOrganizationException(MasterCannotLeaveOrganizationException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAccountFromOrganizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveAccountFromOrganizationOutputResponse: Swift.Equatable {

    public init () { }
}

extension OrganizationsClientTypes.ResourcePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case resourcePolicySummary = "ResourcePolicySummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let resourcePolicySummary = self.resourcePolicySummary {
            try encodeContainer.encode(resourcePolicySummary, forKey: .resourcePolicySummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicySummaryDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.ResourcePolicySummary.self, forKey: .resourcePolicySummary)
        resourcePolicySummary = resourcePolicySummaryDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension OrganizationsClientTypes {
    /// A structure that contains details about a resource policy.
    public struct ResourcePolicy: Swift.Equatable {
        /// The policy text of the resource policy.
        public var content: Swift.String?
        /// A structure that contains resource policy ID and Amazon Resource Name (ARN).
        public var resourcePolicySummary: OrganizationsClientTypes.ResourcePolicySummary?

        public init (
            content: Swift.String? = nil,
            resourcePolicySummary: OrganizationsClientTypes.ResourcePolicySummary? = nil
        )
        {
            self.content = content
            self.resourcePolicySummary = resourcePolicySummary
        }
    }

}

extension ResourcePolicyNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourcePolicyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a resource policy request with the parameter that you specified.
public struct ResourcePolicyNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourcePolicyNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourcePolicyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.ResourcePolicySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension OrganizationsClientTypes {
    /// A structure that contains resource policy ID and Amazon Resource Name (ARN).
    public struct ResourcePolicySummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource policy.
        public var arn: Swift.String?
        /// The unique identifier (ID) of the resource policy.
        public var id: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
        }
    }

}

extension OrganizationsClientTypes.Root: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case policyTypes = "PolicyTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyTypes = policyTypes {
            var policyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyTypes)
            for policytypesummary0 in policyTypes {
                try policyTypesContainer.encode(policytypesummary0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let policyTypesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicyTypeSummary?].self, forKey: .policyTypes)
        var policyTypesDecoded0:[OrganizationsClientTypes.PolicyTypeSummary]? = nil
        if let policyTypesContainer = policyTypesContainer {
            policyTypesDecoded0 = [OrganizationsClientTypes.PolicyTypeSummary]()
            for structure0 in policyTypesContainer {
                if let structure0 = structure0 {
                    policyTypesDecoded0?.append(structure0)
                }
            }
        }
        policyTypes = policyTypesDecoded0
    }
}

extension OrganizationsClientTypes {
    /// Contains details about a root. A root is a top-level parent node in the hierarchy of an organization that can contain organizational units (OUs) and accounts. The root contains every Amazon Web Services account in the organization.
    public struct Root: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the root. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The unique identifier (ID) for the root. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The friendly name of the root. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The types of policies that are currently enabled for the root and therefore can be attached to the root or to its OUs or accounts. Even if a policy type is shown as available in the organization, you can separately enable and disable them at the root level by using [EnablePolicyType] and [DisablePolicyType]. Use [DescribeOrganization] to see the availability of the policy types in that organization.
        public var policyTypes: [OrganizationsClientTypes.PolicyTypeSummary]?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            policyTypes: [OrganizationsClientTypes.PolicyTypeSummary]? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.policyTypes = policyTypes
        }
    }

}

extension RootNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RootNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a root with the RootId that you specified.
public struct RootNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RootNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension RootNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Organizations can't complete your request because of an internal service error. Try again later.
public struct ServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SourceParentNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SourceParentNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a source root or OU with the ParentId that you specified.
public struct SourceParentNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SourceParentNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SourceParentNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension OrganizationsClientTypes {
    /// A custom key-value pair associated with a resource within your organization. You can attach tags to any of the following organization resources.
    ///
    /// * Amazon Web Services account
    ///
    /// * Organizational unit (OU)
    ///
    /// * Organization root
    ///
    /// * Policy
    public struct Tag: Swift.Equatable {
        /// The key identifier, or name, of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ID of the resource to add a tag to. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tags to add to the specified resource. For each tag in the list, you must specify both a tag key and a value. The value can be an empty string, but you can't set it to null. If any one of the tags is invalid or if you exceed the maximum allowed number of tags for a resource, then the entire request fails.
    /// This member is required.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension TargetNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TargetNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find a root, OU, account, or policy with the TargetId that you specified.
public struct TargetNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TargetNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TargetNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationsClientTypes {
    public enum TargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case organizationalUnit
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .account,
                .organizationalUnit,
                .root,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetType(rawValue: rawValue) ?? TargetType.sdkUnknown(rawValue)
        }
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.type = output.type
        } else {
            self.message = nil
            self.type = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have sent too many requests in too short a period of time. The quota helps protect against denial-of-service attacks. Try again later. For information about quotas that affect Organizations, see [Quotas for Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html)in the Organizations User Guide.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var type: Swift.String?

    public init (
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.message = message
        self.type = type
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let type: Swift.String?
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedAPIEndpointException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedAPIEndpointExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This action isn't available in the current Amazon Web Services Region.
public struct UnsupportedAPIEndpointException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedAPIEndpointExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedAPIEndpointExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ID of the resource to remove a tag from. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?
    /// The list of keys for tags to remove from the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetNotFoundException" : self = .targetNotFoundException(try TargetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case targetNotFoundException(TargetNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateOrganizationalUnitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let organizationalUnitId = self.organizationalUnitId {
            try encodeContainer.encode(organizationalUnitId, forKey: .organizationalUnitId)
        }
    }
}

extension UpdateOrganizationalUnitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateOrganizationalUnitInput: Swift.Equatable {
    /// The new name that you want to assign to the OU. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    public var name: Swift.String?
    /// The unique identifier (ID) of the OU that you want to rename. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init (
        name: Swift.String? = nil,
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.name = name
        self.organizationalUnitId = organizationalUnitId
    }
}

struct UpdateOrganizationalUnitInputBody: Swift.Equatable {
    let organizationalUnitId: Swift.String?
    let name: Swift.String?
}

extension UpdateOrganizationalUnitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case organizationalUnitId = "OrganizationalUnitId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateOrganizationalUnitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateOrganizationalUnitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateOrganizationalUnitException" : self = .duplicateOrganizationalUnitException(try DuplicateOrganizationalUnitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationalUnitNotFoundException" : self = .organizationalUnitNotFoundException(try OrganizationalUnitNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateOrganizationalUnitOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case duplicateOrganizationalUnitException(DuplicateOrganizationalUnitException)
    case invalidInputException(InvalidInputException)
    case organizationalUnitNotFoundException(OrganizationalUnitNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateOrganizationalUnitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateOrganizationalUnitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organizationalUnit = output.organizationalUnit
        } else {
            self.organizationalUnit = nil
        }
    }
}

public struct UpdateOrganizationalUnitOutputResponse: Swift.Equatable {
    /// A structure that contains the details about the specified OU, including its new name.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init (
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

struct UpdateOrganizationalUnitOutputResponseBody: Swift.Equatable {
    let organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?
}

extension UpdateOrganizationalUnitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationalUnit = "OrganizationalUnit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationalUnit.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
    }
}

extension UpdatePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case policyId = "PolicyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
    }
}

extension UpdatePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePolicyInput: Swift.Equatable {
    /// If provided, the new content for the policy. The text must be correctly formatted JSON that complies with the syntax for the policy's type. For more information, see [Service Control Policy Syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html) in the Organizations User Guide.
    public var content: Swift.String?
    /// If provided, the new description for the policy.
    public var description: Swift.String?
    /// If provided, the new name for the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    public var name: Swift.String?
    /// The unique identifier (ID) of the policy that you want to update. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init (
        content: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        policyId: Swift.String? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.policyId = policyId
    }
}

struct UpdatePolicyInputBody: Swift.Equatable {
    let policyId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let content: Swift.String?
}

extension UpdatePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case policyId = "PolicyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension UpdatePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AWSOrganizationsNotInUseException" : self = .aWSOrganizationsNotInUseException(try AWSOrganizationsNotInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatePolicyException" : self = .duplicatePolicyException(try DuplicatePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocumentException" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyChangesInProgressException" : self = .policyChangesInProgressException(try PolicyChangesInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PolicyNotFoundException" : self = .policyNotFoundException(try PolicyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAPIEndpointException" : self = .unsupportedAPIEndpointException(try UnsupportedAPIEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePolicyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case aWSOrganizationsNotInUseException(AWSOrganizationsNotInUseException)
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case duplicatePolicyException(DuplicatePolicyException)
    case invalidInputException(InvalidInputException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case policyChangesInProgressException(PolicyChangesInProgressException)
    case policyNotFoundException(PolicyNotFoundException)
    case serviceException(ServiceException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedAPIEndpointException(UnsupportedAPIEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct UpdatePolicyOutputResponse: Swift.Equatable {
    /// A structure that contains details about the updated policy, showing the requested changes.
    public var policy: OrganizationsClientTypes.Policy?

    public init (
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct UpdatePolicyOutputResponseBody: Swift.Equatable {
    let policy: OrganizationsClientTypes.Policy?
}

extension UpdatePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}
