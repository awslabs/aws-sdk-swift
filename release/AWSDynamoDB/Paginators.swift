// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListContributorInsightsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListContributorInsightsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListContributorInsightsOutputResponse`
extension DynamoDbClient {
    public func listContributorInsightsPaginated(input: ListContributorInsightsInput) -> ClientRuntime.PaginatorSequence<ListContributorInsightsInput, ListContributorInsightsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListContributorInsightsInput, ListContributorInsightsOutputResponse>(input: input, inputKey: \ListContributorInsightsInput.nextToken, outputKey: \ListContributorInsightsOutputResponse.nextToken, paginationFunction: self.listContributorInsights(input:))
    }
}

extension ListContributorInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContributorInsightsInput {
        return ListContributorInsightsInput(
            maxResults: self.maxResults,
            nextToken: token,
            tableName: self.tableName
        )}
}

/// Paginate over `[ListExportsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListExportsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListExportsOutputResponse`
extension DynamoDbClient {
    public func listExportsPaginated(input: ListExportsInput) -> ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutputResponse>(input: input, inputKey: \ListExportsInput.nextToken, outputKey: \ListExportsOutputResponse.nextToken, paginationFunction: self.listExports(input:))
    }
}

extension ListExportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExportsInput {
        return ListExportsInput(
            maxResults: self.maxResults,
            nextToken: token,
            tableArn: self.tableArn
        )}
}

/// Paginate over `[ListImportsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImportsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImportsOutputResponse`
extension DynamoDbClient {
    public func listImportsPaginated(input: ListImportsInput) -> ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutputResponse>(input: input, inputKey: \ListImportsInput.nextToken, outputKey: \ListImportsOutputResponse.nextToken, paginationFunction: self.listImports(input:))
    }
}

extension ListImportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImportsInput {
        return ListImportsInput(
            nextToken: token,
            pageSize: self.pageSize,
            tableArn: self.tableArn
        )}
}

/// Paginate over `[ListTablesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTablesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTablesOutputResponse`
extension DynamoDbClient {
    public func listTablesPaginated(input: ListTablesInput) -> ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutputResponse>(input: input, inputKey: \ListTablesInput.exclusiveStartTableName, outputKey: \ListTablesOutputResponse.lastEvaluatedTableName, paginationFunction: self.listTables(input:))
    }
}

extension ListTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTablesInput {
        return ListTablesInput(
            exclusiveStartTableName: token,
            limit: self.limit
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listTablesPaginated`
/// to access the nested member `[Swift.String]`
/// - Returns: `[Swift.String]`
extension PaginatorSequence where Input == ListTablesInput, Output == ListTablesOutputResponse {
    public func tableNames() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.tableNames }
    }
}

/// Paginate over `[QueryOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[QueryInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `QueryOutputResponse`
extension DynamoDbClient {
    public func queryPaginated(input: QueryInput) -> ClientRuntime.PaginatorSequence<QueryInput, QueryOutputResponse> {
        return ClientRuntime.PaginatorSequence<QueryInput, QueryOutputResponse>(input: input, inputKey: \QueryInput.exclusiveStartKey, outputKey: \QueryOutputResponse.lastEvaluatedKey, paginationFunction: self.query(input:))
    }
}

extension QueryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: [Swift.String:DynamoDbClientTypes.AttributeValue]) -> QueryInput {
        return QueryInput(
            attributesToGet: self.attributesToGet,
            conditionalOperator: self.conditionalOperator,
            consistentRead: self.consistentRead,
            exclusiveStartKey: token,
            expressionAttributeNames: self.expressionAttributeNames,
            expressionAttributeValues: self.expressionAttributeValues,
            filterExpression: self.filterExpression,
            indexName: self.indexName,
            keyConditionExpression: self.keyConditionExpression,
            keyConditions: self.keyConditions,
            limit: self.limit,
            projectionExpression: self.projectionExpression,
            queryFilter: self.queryFilter,
            returnConsumedCapacity: self.returnConsumedCapacity,
            scanIndexForward: self.scanIndexForward,
            select: self.select,
            tableName: self.tableName
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `queryPaginated`
/// to access the nested member `[[Swift.String:DynamoDbClientTypes.AttributeValue]]`
/// - Returns: `[[Swift.String:DynamoDbClientTypes.AttributeValue]]`
extension PaginatorSequence where Input == QueryInput, Output == QueryOutputResponse {
    public func items() async throws -> [[Swift.String:DynamoDbClientTypes.AttributeValue]] {
        return try await self.asyncCompactMap { item in item.items }
    }
}

/// Paginate over `[ScanOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ScanInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ScanOutputResponse`
extension DynamoDbClient {
    public func scanPaginated(input: ScanInput) -> ClientRuntime.PaginatorSequence<ScanInput, ScanOutputResponse> {
        return ClientRuntime.PaginatorSequence<ScanInput, ScanOutputResponse>(input: input, inputKey: \ScanInput.exclusiveStartKey, outputKey: \ScanOutputResponse.lastEvaluatedKey, paginationFunction: self.scan(input:))
    }
}

extension ScanInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: [Swift.String:DynamoDbClientTypes.AttributeValue]) -> ScanInput {
        return ScanInput(
            attributesToGet: self.attributesToGet,
            conditionalOperator: self.conditionalOperator,
            consistentRead: self.consistentRead,
            exclusiveStartKey: token,
            expressionAttributeNames: self.expressionAttributeNames,
            expressionAttributeValues: self.expressionAttributeValues,
            filterExpression: self.filterExpression,
            indexName: self.indexName,
            limit: self.limit,
            projectionExpression: self.projectionExpression,
            returnConsumedCapacity: self.returnConsumedCapacity,
            scanFilter: self.scanFilter,
            segment: self.segment,
            select: self.select,
            tableName: self.tableName,
            totalSegments: self.totalSegments
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `scanPaginated`
/// to access the nested member `[[Swift.String:DynamoDbClientTypes.AttributeValue]]`
/// - Returns: `[[Swift.String:DynamoDbClientTypes.AttributeValue]]`
extension PaginatorSequence where Input == ScanInput, Output == ScanOutputResponse {
    public func items() async throws -> [[Swift.String:DynamoDbClientTypes.AttributeValue]] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
