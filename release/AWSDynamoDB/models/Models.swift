// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension DynamoDBClientTypes.ArchivalSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archivalBackupArn = "ArchivalBackupArn"
        case archivalDateTime = "ArchivalDateTime"
        case archivalReason = "ArchivalReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archivalBackupArn = self.archivalBackupArn {
            try encodeContainer.encode(archivalBackupArn, forKey: .archivalBackupArn)
        }
        if let archivalDateTime = self.archivalDateTime {
            try encodeContainer.encodeTimestamp(archivalDateTime, format: .epochSeconds, forKey: .archivalDateTime)
        }
        if let archivalReason = self.archivalReason {
            try encodeContainer.encode(archivalReason, forKey: .archivalReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archivalDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .archivalDateTime)
        archivalDateTime = archivalDateTimeDecoded
        let archivalReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archivalReason)
        archivalReason = archivalReasonDecoded
        let archivalBackupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archivalBackupArn)
        archivalBackupArn = archivalBackupArnDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains details of a table archival operation.
    public struct ArchivalSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.
        public var archivalBackupArn: Swift.String?
        /// The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.
        public var archivalDateTime: ClientRuntime.Date?
        /// The reason DynamoDB archived the table. Currently, the only possible value is:
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table's KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.
        public var archivalReason: Swift.String?

        public init (
            archivalBackupArn: Swift.String? = nil,
            archivalDateTime: ClientRuntime.Date? = nil,
            archivalReason: Swift.String? = nil
        )
        {
            self.archivalBackupArn = archivalBackupArn
            self.archivalDateTime = archivalDateTime
            self.archivalReason = archivalReason
        }
    }

}

extension DynamoDBClientTypes {
    public enum AttributeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeAction] {
            return [
                .add,
                .delete,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AttributeAction(rawValue: rawValue) ?? AttributeAction.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.AttributeDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeType = "AttributeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let attributeType = self.attributeType {
            try encodeContainer.encode(attributeType.rawValue, forKey: .attributeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ScalarAttributeType.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents an attribute for describing the key schema for the table and indexes.
    public struct AttributeDefinition: Swift.Equatable {
        /// A name for the attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The data type for the attribute, where:
        ///
        /// * S - the attribute is of type String
        ///
        /// * N - the attribute is of type Number
        ///
        /// * B - the attribute is of type Binary
        /// This member is required.
        public var attributeType: DynamoDBClientTypes.ScalarAttributeType?

        public init (
            attributeName: Swift.String? = nil,
            attributeType: DynamoDBClientTypes.ScalarAttributeType? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeType = attributeType
        }
    }

}

extension DynamoDBClientTypes.AttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case b = "B"
        case bool = "BOOL"
        case bs = "BS"
        case l = "L"
        case m = "M"
        case n = "N"
        case ns = "NS"
        case null = "NULL"
        case s = "S"
        case ss = "SS"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .b(b):
                try container.encode(b.base64EncodedString(), forKey: .b)
            case let .bool(bool):
                try container.encode(bool, forKey: .bool)
            case let .bs(bs):
                var bsContainer = container.nestedUnkeyedContainer(forKey: .bs)
                for binaryattributevalue0 in bs {
                    try bsContainer.encode(binaryattributevalue0.base64EncodedString())
                }
            case let .l(l):
                var lContainer = container.nestedUnkeyedContainer(forKey: .l)
                for attributevalue0 in l {
                    try lContainer.encode(attributevalue0)
                }
            case let .m(m):
                var mContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .m)
                for (dictKey0, mapAttributeValue0) in m {
                    try mContainer.encode(mapAttributeValue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
                }
            case let .n(n):
                try container.encode(n, forKey: .n)
            case let .ns(ns):
                var nsContainer = container.nestedUnkeyedContainer(forKey: .ns)
                for numberattributevalue0 in ns {
                    try nsContainer.encode(numberattributevalue0)
                }
            case let .null(null):
                try container.encode(null, forKey: .null)
            case let .s(s):
                try container.encode(s, forKey: .s)
            case let .ss(ss):
                var ssContainer = container.nestedUnkeyedContainer(forKey: .ss)
                for stringattributevalue0 in ss {
                    try ssContainer.encode(stringattributevalue0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .s)
        if let s = sDecoded {
            self = .s(s)
            return
        }
        let nDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .n)
        if let n = nDecoded {
            self = .n(n)
            return
        }
        let bDecoded = try values.decodeIfPresent(ClientRuntime.Data.self, forKey: .b)
        if let b = bDecoded {
            self = .b(b)
            return
        }
        let ssContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .ss)
        var ssDecoded0:[Swift.String]? = nil
        if let ssContainer = ssContainer {
            ssDecoded0 = [Swift.String]()
            for string0 in ssContainer {
                if let string0 = string0 {
                    ssDecoded0?.append(string0)
                }
            }
        }
        if let ss = ssDecoded0 {
            self = .ss(ss)
            return
        }
        let nsContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .ns)
        var nsDecoded0:[Swift.String]? = nil
        if let nsContainer = nsContainer {
            nsDecoded0 = [Swift.String]()
            for string0 in nsContainer {
                if let string0 = string0 {
                    nsDecoded0?.append(string0)
                }
            }
        }
        if let ns = nsDecoded0 {
            self = .ns(ns)
            return
        }
        let bsContainer = try values.decodeIfPresent([ClientRuntime.Data?].self, forKey: .bs)
        var bsDecoded0:[ClientRuntime.Data]? = nil
        if let bsContainer = bsContainer {
            bsDecoded0 = [ClientRuntime.Data]()
            for blob0 in bsContainer {
                if let blob0 = blob0 {
                    bsDecoded0?.append(blob0)
                }
            }
        }
        if let bs = bsDecoded0 {
            self = .bs(bs)
            return
        }
        let mContainer = try values.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .m)
        var mDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let mContainer = mContainer {
            mDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in mContainer {
                if let attributevalue0 = attributevalue0 {
                    mDecoded0?[key0] = attributevalue0
                }
            }
        }
        if let m = mDecoded0 {
            self = .m(m)
            return
        }
        let lContainer = try values.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .l)
        var lDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let lContainer = lContainer {
            lDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in lContainer {
                if let union0 = union0 {
                    lDecoded0?.append(union0)
                }
            }
        }
        if let l = lDecoded0 {
            self = .l(l)
            return
        }
        let nullDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .null)
        if let null = nullDecoded {
            self = .null(null)
            return
        }
        let boolDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .bool)
        if let bool = boolDecoded {
            self = .bool(bool)
            return
        }
        self = .sdkUnknown("")
    }
}

extension DynamoDBClientTypes {
    /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
    public enum AttributeValue: Swift.Equatable {
        /// An attribute of type String. For example: "S": "Hello"
        case s(Swift.String)
        /// An attribute of type Number. For example: "N": "123.45" Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case n(Swift.String)
        /// An attribute of type Binary. For example: "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
        case b(ClientRuntime.Data)
        /// An attribute of type String Set. For example: "SS": ["Giraffe", "Hippo" ,"Zebra"]
        case ss([Swift.String])
        /// An attribute of type Number Set. For example: "NS": ["42.2", "-19", "7.5", "3.14"] Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case ns([Swift.String])
        /// An attribute of type Binary Set. For example: "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
        case bs([ClientRuntime.Data])
        /// An attribute of type Map. For example: "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
        case m([Swift.String:DynamoDBClientTypes.AttributeValue])
        /// An attribute of type List. For example: "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N": "3.14159"}]
        case l([DynamoDBClientTypes.AttributeValue])
        /// An attribute of type Null. For example: "NULL": true
        case null(Swift.Bool)
        /// An attribute of type Boolean. For example: "BOOL": true
        case bool(Swift.Bool)
        case sdkUnknown(Swift.String)
    }

}

extension DynamoDBClientTypes.AttributeValueUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AttributeValue.self, forKey: .value)
        value = valueDecoded
        let actionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AttributeAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension DynamoDBClientTypes {
    /// For the UpdateItem operation, represents the attributes to be modified, the action to perform on each, and the new value for each. You cannot use UpdateItem to update any primary key attributes. Instead, you will need to delete the item, and then use PutItem to create a new item with new attributes. Attribute values cannot be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests with empty values will be rejected with a ValidationException exception.
    public struct AttributeValueUpdate: Swift.Equatable {
        /// Specifies how to perform the update. Valid values are PUT (default), DELETE, and ADD. The behavior depends on whether the specified primary key already exists in the table. If an item with the specified Key is found in the table:
        ///
        /// * PUT - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.
        ///
        /// * DELETE - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specified [a,c], then the final attribute value would be [b]. Specifying an empty set is an error.
        ///
        /// * ADD - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:
        ///
        /// * If the existing attribute is a number, and if Value is also a number, then the Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute. If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use ADD to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update does not yet have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway, even though it currently does not exist. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.
        ///
        /// * If the existing data type is a set, and if the Value is also a set, then the Value is added to the existing set. (This is a set operation, not mathematical addition.) For example, if the attribute value was the set [1,2], and the ADD action specified [3], then the final attribute value would be [1,2,3]. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings. The same holds true for number sets and binary sets.
        ///
        ///
        /// This action is only valid for an existing attribute whose data type is number or is a set. Do not use ADD for any other data types.
        ///
        ///
        /// If no item with the specified Key is found:
        ///
        /// * PUT - DynamoDB creates a new item with the specified primary key, and then adds the attribute.
        ///
        /// * DELETE - Nothing happens; there is no attribute to delete.
        ///
        /// * ADD - DynamoDB creates a new item with the supplied primary key and number (or set) for the attribute value. The only data types allowed are number, number set, string set or binary set.
        public var action: DynamoDBClientTypes.AttributeAction?
        /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
        public var value: DynamoDBClientTypes.AttributeValue?

        public init (
            action: DynamoDBClientTypes.AttributeAction? = nil,
            value: DynamoDBClientTypes.AttributeValue? = nil
        )
        {
            self.action = action
            self.value = value
        }
    }

}

extension DynamoDBClientTypes.AutoScalingPolicyDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let targetTrackingScalingPolicyConfiguration = self.targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of the scaling policy.
    public struct AutoScalingPolicyDescription: Swift.Equatable {
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// Represents a target tracking scaling policy configuration.
        public var targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription?

        public init (
            policyName: Swift.String? = nil,
            targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription? = nil
        )
        {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }
    }

}

extension DynamoDBClientTypes.AutoScalingPolicyUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let targetTrackingScalingPolicyConfiguration = self.targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling policy to be modified.
    public struct AutoScalingPolicyUpdate: Swift.Equatable {
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// Represents a target tracking scaling policy configuration.
        /// This member is required.
        public var targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate?

        public init (
            policyName: Swift.String? = nil,
            targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate? = nil
        )
        {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }
    }

}

extension DynamoDBClientTypes.AutoScalingSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingDisabled = "AutoScalingDisabled"
        case autoScalingRoleArn = "AutoScalingRoleArn"
        case maximumUnits = "MaximumUnits"
        case minimumUnits = "MinimumUnits"
        case scalingPolicies = "ScalingPolicies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingDisabled = self.autoScalingDisabled {
            try encodeContainer.encode(autoScalingDisabled, forKey: .autoScalingDisabled)
        }
        if let autoScalingRoleArn = self.autoScalingRoleArn {
            try encodeContainer.encode(autoScalingRoleArn, forKey: .autoScalingRoleArn)
        }
        if let maximumUnits = self.maximumUnits {
            try encodeContainer.encode(maximumUnits, forKey: .maximumUnits)
        }
        if let minimumUnits = self.minimumUnits {
            try encodeContainer.encode(minimumUnits, forKey: .minimumUnits)
        }
        if let scalingPolicies = scalingPolicies {
            var scalingPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingPolicies)
            for autoscalingpolicydescription0 in scalingPolicies {
                try scalingPoliciesContainer.encode(autoscalingpolicydescription0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumUnits)
        minimumUnits = minimumUnitsDecoded
        let maximumUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumUnits)
        maximumUnits = maximumUnitsDecoded
        let autoScalingDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoScalingDisabled)
        autoScalingDisabled = autoScalingDisabledDecoded
        let autoScalingRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRoleArn)
        autoScalingRoleArn = autoScalingRoleArnDecoded
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AutoScalingPolicyDescription?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[DynamoDBClientTypes.AutoScalingPolicyDescription]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [DynamoDBClientTypes.AutoScalingPolicyDescription]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings for a global table or global secondary index.
    public struct AutoScalingSettingsDescription: Swift.Equatable {
        /// Disabled auto scaling for this global table or global secondary index.
        public var autoScalingDisabled: Swift.Bool?
        /// Role ARN used for configuring the auto scaling policy.
        public var autoScalingRoleArn: Swift.String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public var maximumUnits: Swift.Int?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public var minimumUnits: Swift.Int?
        /// Information about the scaling policies.
        public var scalingPolicies: [DynamoDBClientTypes.AutoScalingPolicyDescription]?

        public init (
            autoScalingDisabled: Swift.Bool? = nil,
            autoScalingRoleArn: Swift.String? = nil,
            maximumUnits: Swift.Int? = nil,
            minimumUnits: Swift.Int? = nil,
            scalingPolicies: [DynamoDBClientTypes.AutoScalingPolicyDescription]? = nil
        )
        {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicies = scalingPolicies
        }
    }

}

extension DynamoDBClientTypes.AutoScalingSettingsUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingDisabled = "AutoScalingDisabled"
        case autoScalingRoleArn = "AutoScalingRoleArn"
        case maximumUnits = "MaximumUnits"
        case minimumUnits = "MinimumUnits"
        case scalingPolicyUpdate = "ScalingPolicyUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingDisabled = self.autoScalingDisabled {
            try encodeContainer.encode(autoScalingDisabled, forKey: .autoScalingDisabled)
        }
        if let autoScalingRoleArn = self.autoScalingRoleArn {
            try encodeContainer.encode(autoScalingRoleArn, forKey: .autoScalingRoleArn)
        }
        if let maximumUnits = self.maximumUnits {
            try encodeContainer.encode(maximumUnits, forKey: .maximumUnits)
        }
        if let minimumUnits = self.minimumUnits {
            try encodeContainer.encode(minimumUnits, forKey: .minimumUnits)
        }
        if let scalingPolicyUpdate = self.scalingPolicyUpdate {
            try encodeContainer.encode(scalingPolicyUpdate, forKey: .scalingPolicyUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumUnits)
        minimumUnits = minimumUnitsDecoded
        let maximumUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumUnits)
        maximumUnits = maximumUnitsDecoded
        let autoScalingDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoScalingDisabled)
        autoScalingDisabled = autoScalingDisabledDecoded
        let autoScalingRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRoleArn)
        autoScalingRoleArn = autoScalingRoleArnDecoded
        let scalingPolicyUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingPolicyUpdate.self, forKey: .scalingPolicyUpdate)
        scalingPolicyUpdate = scalingPolicyUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings to be modified for a global table or global secondary index.
    public struct AutoScalingSettingsUpdate: Swift.Equatable {
        /// Disabled auto scaling for this global table or global secondary index.
        public var autoScalingDisabled: Swift.Bool?
        /// Role ARN used for configuring auto scaling policy.
        public var autoScalingRoleArn: Swift.String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public var maximumUnits: Swift.Int?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public var minimumUnits: Swift.Int?
        /// The scaling policy to apply for scaling target global table or global secondary index capacity units.
        public var scalingPolicyUpdate: DynamoDBClientTypes.AutoScalingPolicyUpdate?

        public init (
            autoScalingDisabled: Swift.Bool? = nil,
            autoScalingRoleArn: Swift.String? = nil,
            maximumUnits: Swift.Int? = nil,
            minimumUnits: Swift.Int? = nil,
            scalingPolicyUpdate: DynamoDBClientTypes.AutoScalingPolicyUpdate? = nil
        )
        {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicyUpdate = scalingPolicyUpdate
        }
    }

}

extension DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableScaleIn = "DisableScaleIn"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disableScaleIn = self.disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let scaleInCooldown = self.scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = self.scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = self.targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a target tracking scaling policy.
    public struct AutoScalingTargetTrackingScalingPolicyConfigurationDescription: Swift.Equatable {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public var disableScaleIn: Swift.Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public var scaleInCooldown: Swift.Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public var scaleOutCooldown: Swift.Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            disableScaleIn: Swift.Bool? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableScaleIn = "DisableScaleIn"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disableScaleIn = self.disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let scaleInCooldown = self.scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = self.scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = self.targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings of a target tracking scaling policy that will be modified.
    public struct AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: Swift.Equatable {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public var disableScaleIn: Swift.Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public var scaleInCooldown: Swift.Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public var scaleOutCooldown: Swift.Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            disableScaleIn: Swift.Bool? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension DynamoDBClientTypes.BackupDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupDetails = "BackupDetails"
        case sourceTableDetails = "SourceTableDetails"
        case sourceTableFeatureDetails = "SourceTableFeatureDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupDetails = self.backupDetails {
            try encodeContainer.encode(backupDetails, forKey: .backupDetails)
        }
        if let sourceTableDetails = self.sourceTableDetails {
            try encodeContainer.encode(sourceTableDetails, forKey: .sourceTableDetails)
        }
        if let sourceTableFeatureDetails = self.sourceTableFeatureDetails {
            try encodeContainer.encode(sourceTableFeatureDetails, forKey: .sourceTableFeatureDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDetailsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupDetails.self, forKey: .backupDetails)
        backupDetails = backupDetailsDecoded
        let sourceTableDetailsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SourceTableDetails.self, forKey: .sourceTableDetails)
        sourceTableDetails = sourceTableDetailsDecoded
        let sourceTableFeatureDetailsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SourceTableFeatureDetails.self, forKey: .sourceTableFeatureDetails)
        sourceTableFeatureDetails = sourceTableFeatureDetailsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the description of the backup created for the table.
    public struct BackupDescription: Swift.Equatable {
        /// Contains the details of the backup created for the table.
        public var backupDetails: DynamoDBClientTypes.BackupDetails?
        /// Contains the details of the table when the backup was created.
        public var sourceTableDetails: DynamoDBClientTypes.SourceTableDetails?
        /// Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
        public var sourceTableFeatureDetails: DynamoDBClientTypes.SourceTableFeatureDetails?

        public init (
            backupDetails: DynamoDBClientTypes.BackupDetails? = nil,
            sourceTableDetails: DynamoDBClientTypes.SourceTableDetails? = nil,
            sourceTableFeatureDetails: DynamoDBClientTypes.SourceTableFeatureDetails? = nil
        )
        {
            self.backupDetails = backupDetails
            self.sourceTableDetails = sourceTableDetails
            self.sourceTableFeatureDetails = sourceTableFeatureDetails
        }
    }

}

extension DynamoDBClientTypes.BackupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = self.backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = self.backupCreationDateTime {
            try encodeContainer.encodeTimestamp(backupCreationDateTime, format: .epochSeconds, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = self.backupExpiryDateTime {
            try encodeContainer.encodeTimestamp(backupExpiryDateTime, format: .epochSeconds, forKey: .backupExpiryDateTime)
        }
        if let backupName = self.backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = self.backupSizeBytes {
            try encodeContainer.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = self.backupStatus {
            try encodeContainer.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = self.backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the details of the backup created for the table.
    public struct BackupDetails: Swift.Equatable {
        /// ARN associated with the backup.
        /// This member is required.
        public var backupArn: Swift.String?
        /// Time at which the backup was created. This is the request time of the backup.
        /// This member is required.
        public var backupCreationDateTime: ClientRuntime.Date?
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public var backupExpiryDateTime: ClientRuntime.Date?
        /// Name of the requested backup.
        /// This member is required.
        public var backupName: Swift.String?
        /// Size of the backup in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var backupSizeBytes: Swift.Int?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        /// This member is required.
        public var backupStatus: DynamoDBClientTypes.BackupStatus?
        /// BackupType:
        ///
        /// * USER - You create and manage these using the on-demand backup feature.
        ///
        /// * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.
        ///
        /// * AWS_BACKUP - On-demand backup created by you from Backup service.
        /// This member is required.
        public var backupType: DynamoDBClientTypes.BackupType?

        public init (
            backupArn: Swift.String? = nil,
            backupCreationDateTime: ClientRuntime.Date? = nil,
            backupExpiryDateTime: ClientRuntime.Date? = nil,
            backupName: Swift.String? = nil,
            backupSizeBytes: Swift.Int? = nil,
            backupStatus: DynamoDBClientTypes.BackupStatus? = nil,
            backupType: DynamoDBClientTypes.BackupType? = nil
        )
        {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
        }
    }

}

extension BackupInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is another ongoing conflicting backup control plane operation on the table. The backup is either being created, deleted or restored to a table.
public struct BackupInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BackupInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BackupInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BackupNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BackupNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Backup not found for the given BackupARN.
public struct BackupNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BackupNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BackupNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum BackupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleted
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupStatus] {
            return [
                .available,
                .creating,
                .deleted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupStatus(rawValue: rawValue) ?? BackupStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.BackupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
        case tableArn = "TableArn"
        case tableId = "TableId"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = self.backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = self.backupCreationDateTime {
            try encodeContainer.encodeTimestamp(backupCreationDateTime, format: .epochSeconds, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = self.backupExpiryDateTime {
            try encodeContainer.encodeTimestamp(backupExpiryDateTime, format: .epochSeconds, forKey: .backupExpiryDateTime)
        }
        if let backupName = self.backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = self.backupSizeBytes {
            try encodeContainer.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = self.backupStatus {
            try encodeContainer.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = self.backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let backupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains details for the backup.
    public struct BackupSummary: Swift.Equatable {
        /// ARN associated with the backup.
        public var backupArn: Swift.String?
        /// Time at which the backup was created.
        public var backupCreationDateTime: ClientRuntime.Date?
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public var backupExpiryDateTime: ClientRuntime.Date?
        /// Name of the specified backup.
        public var backupName: Swift.String?
        /// Size of the backup in bytes.
        public var backupSizeBytes: Swift.Int?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        public var backupStatus: DynamoDBClientTypes.BackupStatus?
        /// BackupType:
        ///
        /// * USER - You create and manage these using the on-demand backup feature.
        ///
        /// * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.
        ///
        /// * AWS_BACKUP - On-demand backup created by you from Backup service.
        public var backupType: DynamoDBClientTypes.BackupType?
        /// ARN associated with the table.
        public var tableArn: Swift.String?
        /// Unique identifier for the table.
        public var tableId: Swift.String?
        /// Name of the table.
        public var tableName: Swift.String?

        public init (
            backupArn: Swift.String? = nil,
            backupCreationDateTime: ClientRuntime.Date? = nil,
            backupExpiryDateTime: ClientRuntime.Date? = nil,
            backupName: Swift.String? = nil,
            backupSizeBytes: Swift.Int? = nil,
            backupStatus: DynamoDBClientTypes.BackupStatus? = nil,
            backupType: DynamoDBClientTypes.BackupType? = nil,
            tableArn: Swift.String? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
            self.tableArn = tableArn
            self.tableId = tableId
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    public enum BackupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsBackup
        case system
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupType] {
            return [
                .awsBackup,
                .system,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsBackup: return "AWS_BACKUP"
            case .system: return "SYSTEM"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupType(rawValue: rawValue) ?? BackupType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum BackupTypeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case awsBackup
        case system
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupTypeFilter] {
            return [
                .all,
                .awsBackup,
                .system,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .awsBackup: return "AWS_BACKUP"
            case .system: return "SYSTEM"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupTypeFilter(rawValue: rawValue) ?? BackupTypeFilter.sdkUnknown(rawValue)
        }
    }
}

extension BatchExecuteStatementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for batchstatementrequest0 in statements {
                try statementsContainer.encode(batchstatementrequest0)
            }
        }
    }
}

extension BatchExecuteStatementInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchExecuteStatementInput: Swift.Equatable {
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The list of PartiQL statements representing the batch to run.
    /// This member is required.
    public var statements: [DynamoDBClientTypes.BatchStatementRequest]?

    public init (
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        statements: [DynamoDBClientTypes.BatchStatementRequest]? = nil
    )
    {
        self.returnConsumedCapacity = returnConsumedCapacity
        self.statements = statements
    }
}

struct BatchExecuteStatementInputBody: Swift.Equatable {
    let statements: [DynamoDBClientTypes.BatchStatementRequest]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
}

extension BatchExecuteStatementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case statements = "Statements"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.BatchStatementRequest?].self, forKey: .statements)
        var statementsDecoded0:[DynamoDBClientTypes.BatchStatementRequest]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [DynamoDBClientTypes.BatchStatementRequest]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension BatchExecuteStatementOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchExecuteStatementOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchExecuteStatementOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case requestLimitExceeded(RequestLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchExecuteStatementOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchExecuteStatementOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
        } else {
            self.consumedCapacity = nil
            self.responses = nil
        }
    }
}

public struct BatchExecuteStatementOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// The response to each PartiQL statement in the batch.
    public var responses: [DynamoDBClientTypes.BatchStatementResponse]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.BatchStatementResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

struct BatchExecuteStatementOutputResponseBody: Swift.Equatable {
    let responses: [DynamoDBClientTypes.BatchStatementResponse]?
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
}

extension BatchExecuteStatementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.BatchStatementResponse?].self, forKey: .responses)
        var responsesDecoded0:[DynamoDBClientTypes.BatchStatementResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [DynamoDBClientTypes.BatchStatementResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

extension BatchGetItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestItems = requestItems {
            var requestItemsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestItems)
            for (dictKey0, batchGetRequestMap0) in requestItems {
                try requestItemsContainer.encode(batchGetRequestMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
    }
}

extension BatchGetItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetItem operation.
public struct BatchGetItemInput: Swift.Equatable {
    /// A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per BatchGetItem request. Each element in the map of items to retrieve consists of the following:
    ///
    /// * ConsistentRead - If true, a strongly consistent read is used; if false (the default), an eventually consistent read is used.
    ///
    /// * ExpressionAttributeNames - One or more substitution tokens for attribute names in the ProjectionExpression parameter. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information about expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    ///
    /// * Keys - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide both the partition key value and the sort key value.
    ///
    /// * ProjectionExpression - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    ///
    /// * AttributesToGet - This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    /// This member is required.
    public var requestItems: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?

    public init (
        requestItems: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
    }
}

struct BatchGetItemInputBody: Swift.Equatable {
    let requestItems: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
}

extension BatchGetItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestItemsContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.KeysAndAttributes?].self, forKey: .requestItems)
        var requestItemsDecoded0: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]? = nil
        if let requestItemsContainer = requestItemsContainer {
            requestItemsDecoded0 = [Swift.String:DynamoDBClientTypes.KeysAndAttributes]()
            for (key0, keysandattributes0) in requestItemsContainer {
                if let keysandattributes0 = keysandattributes0 {
                    requestItemsDecoded0?[key0] = keysandattributes0
                }
            }
        }
        requestItems = requestItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension BatchGetItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetItemOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
            self.unprocessedKeys = output.unprocessedKeys
        } else {
            self.consumedCapacity = nil
            self.responses = nil
            self.unprocessedKeys = nil
        }
    }
}

/// Represents the output of a BatchGetItem operation.
public struct BatchGetItemOutputResponse: Swift.Equatable {
    /// The read capacity units consumed by the entire BatchGetItem operation. Each element consists of:
    ///
    /// * TableName - The table that consumed the provisioned throughput.
    ///
    /// * CapacityUnits - The total number of capacity units consumed.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A map of table name to a list of items. Each object in Responses consists of a table name, along with a map of attribute data consisting of the data type and attribute value.
    public var responses: [Swift.String:[[Swift.String:DynamoDBClientTypes.AttributeValue]]]?
    /// A map of tables and their respective keys that were not processed with the current response. The UnprocessedKeys value is in the same form as RequestItems, so the value can be provided directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section. Each element consists of:
    ///
    /// * Keys - An array of primary key attribute values that define specific items in the table.
    ///
    /// * ProjectionExpression - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.
    ///
    /// * ConsistentRead - The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    ///
    ///
    /// If there are no unprocessed keys remaining, the response contains an empty UnprocessedKeys map.
    public var unprocessedKeys: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [Swift.String:[[Swift.String:DynamoDBClientTypes.AttributeValue]]]? = nil,
        unprocessedKeys: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
        self.unprocessedKeys = unprocessedKeys
    }
}

struct BatchGetItemOutputResponseBody: Swift.Equatable {
    let responses: [Swift.String:[[Swift.String:DynamoDBClientTypes.AttributeValue]]]?
    let unprocessedKeys: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]?
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
}

extension BatchGetItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
        case unprocessedKeys = "UnprocessedKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([Swift.String: [[Swift.String: DynamoDBClientTypes.AttributeValue?]?]?].self, forKey: .responses)
        var responsesDecoded0: [Swift.String:[[Swift.String:DynamoDBClientTypes.AttributeValue]]]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [Swift.String:[[Swift.String:DynamoDBClientTypes.AttributeValue]]]()
            for (key0, itemlist0) in responsesContainer {
                var itemlist0Decoded0: [[Swift.String: DynamoDBClientTypes.AttributeValue]]? = nil
                if let itemlist0 = itemlist0 {
                    itemlist0Decoded0 = [[Swift.String: DynamoDBClientTypes.AttributeValue]]()
                    for map1 in itemlist0 {
                        var itemlist0Decoded1: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
                        if let map1 = map1 {
                            itemlist0Decoded1 = [Swift.String: DynamoDBClientTypes.AttributeValue]()
                            for (key2, attributevalue2) in map1 {
                                if let attributevalue2 = attributevalue2 {
                                    itemlist0Decoded1?[key2] = attributevalue2
                                }
                            }
                        }
                        if let itemlist0Decoded1 = itemlist0Decoded1 {
                            itemlist0Decoded0?.append(itemlist0Decoded1)
                        }
                    }
                }
                responsesDecoded0?[key0] = itemlist0Decoded0
            }
        }
        responses = responsesDecoded0
        let unprocessedKeysContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.KeysAndAttributes?].self, forKey: .unprocessedKeys)
        var unprocessedKeysDecoded0: [Swift.String:DynamoDBClientTypes.KeysAndAttributes]? = nil
        if let unprocessedKeysContainer = unprocessedKeysContainer {
            unprocessedKeysDecoded0 = [Swift.String:DynamoDBClientTypes.KeysAndAttributes]()
            for (key0, keysandattributes0) in unprocessedKeysContainer {
                if let keysandattributes0 = keysandattributes0 {
                    unprocessedKeysDecoded0?[key0] = keysandattributes0
                }
            }
        }
        unprocessedKeys = unprocessedKeysDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

extension DynamoDBClientTypes.BatchStatementError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BatchStatementErrorCodeEnum.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    /// An error associated with a statement in a PartiQL batch that was run.
    public struct BatchStatementError: Swift.Equatable {
        /// The error code associated with the failed PartiQL batch statement.
        public var code: DynamoDBClientTypes.BatchStatementErrorCodeEnum?
        /// The error message associated with the PartiQL batch response.
        public var message: Swift.String?

        public init (
            code: DynamoDBClientTypes.BatchStatementErrorCodeEnum? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension DynamoDBClientTypes {
    public enum BatchStatementErrorCodeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case conditionalcheckfailed
        case duplicateitem
        case internalservererror
        case itemcollectionsizelimitexceeded
        case provisionedthroughputexceeded
        case requestlimitexceeded
        case resourcenotfound
        case throttlingerror
        case transactionconflict
        case validationerror
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchStatementErrorCodeEnum] {
            return [
                .accessdenied,
                .conditionalcheckfailed,
                .duplicateitem,
                .internalservererror,
                .itemcollectionsizelimitexceeded,
                .provisionedthroughputexceeded,
                .requestlimitexceeded,
                .resourcenotfound,
                .throttlingerror,
                .transactionconflict,
                .validationerror,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .conditionalcheckfailed: return "ConditionalCheckFailed"
            case .duplicateitem: return "DuplicateItem"
            case .internalservererror: return "InternalServerError"
            case .itemcollectionsizelimitexceeded: return "ItemCollectionSizeLimitExceeded"
            case .provisionedthroughputexceeded: return "ProvisionedThroughputExceeded"
            case .requestlimitexceeded: return "RequestLimitExceeded"
            case .resourcenotfound: return "ResourceNotFound"
            case .throttlingerror: return "ThrottlingError"
            case .transactionconflict: return "TransactionConflict"
            case .validationerror: return "ValidationError"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchStatementErrorCodeEnum(rawValue: rawValue) ?? BatchStatementErrorCodeEnum.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.BatchStatementRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consistentRead = "ConsistentRead"
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for attributevalue0 in parameters {
                try parametersContainer.encode(attributevalue0)
            }
        }
        if let statement = self.statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
    }
}

extension DynamoDBClientTypes {
    /// A PartiQL batch statement request.
    public struct BatchStatementRequest: Swift.Equatable {
        /// The read consistency of the PartiQL batch request.
        public var consistentRead: Swift.Bool?
        /// The parameters associated with a PartiQL statement in the batch request.
        public var parameters: [DynamoDBClientTypes.AttributeValue]?
        /// A valid PartiQL statement.
        /// This member is required.
        public var statement: Swift.String?

        public init (
            consistentRead: Swift.Bool? = nil,
            parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
            statement: Swift.String? = nil
        )
        {
            self.consistentRead = consistentRead
            self.parameters = parameters
            self.statement = statement
        }
    }

}

extension DynamoDBClientTypes.BatchStatementResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case item = "Item"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, attributeMap0) in item {
                try itemContainer.encode(attributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BatchStatementError.self, forKey: .error)
        error = errorDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension DynamoDBClientTypes {
    /// A PartiQL batch statement response..
    public struct BatchStatementResponse: Swift.Equatable {
        /// The error associated with a failed PartiQL batch statement.
        public var error: DynamoDBClientTypes.BatchStatementError?
        /// A DynamoDB item associated with a BatchStatementResponse
        public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// The table name associated with a failed PartiQL batch statement.
        public var tableName: Swift.String?

        public init (
            error: DynamoDBClientTypes.BatchStatementError? = nil,
            item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.error = error
            self.item = item
            self.tableName = tableName
        }
    }

}

extension BatchWriteItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestItems = requestItems {
            var requestItemsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestItems)
            for (dictKey0, batchWriteItemRequestMap0) in requestItems {
                var batchWriteItemRequestMap0Container = requestItemsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for writerequest1 in batchWriteItemRequestMap0 {
                    try batchWriteItemRequestMap0Container.encode(writerequest1)
                }
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
    }
}

extension BatchWriteItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchWriteItem operation.
public struct BatchWriteItemInput: Swift.Equatable {
    /// A map of one or more table names and, for each table, a list of operations to be performed (DeleteRequest or PutRequest). Each element in the map consists of the following:
    ///
    /// * DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:
    ///
    /// * Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    ///
    ///
    ///
    ///
    /// * PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:
    ///
    /// * Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
    /// This member is required.
    public var requestItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?

    public init (
        requestItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
    }
}

struct BatchWriteItemInputBody: Swift.Equatable {
    let requestItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
}

extension BatchWriteItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestItemsContainer = try containerValues.decodeIfPresent([Swift.String: [DynamoDBClientTypes.WriteRequest?]?].self, forKey: .requestItems)
        var requestItemsDecoded0: [Swift.String:[DynamoDBClientTypes.WriteRequest]]? = nil
        if let requestItemsContainer = requestItemsContainer {
            requestItemsDecoded0 = [Swift.String:[DynamoDBClientTypes.WriteRequest]]()
            for (key0, writerequests0) in requestItemsContainer {
                var writerequests0Decoded0: [DynamoDBClientTypes.WriteRequest]? = nil
                if let writerequests0 = writerequests0 {
                    writerequests0Decoded0 = [DynamoDBClientTypes.WriteRequest]()
                    for structure1 in writerequests0 {
                        if let structure1 = structure1 {
                            writerequests0Decoded0?.append(structure1)
                        }
                    }
                }
                requestItemsDecoded0?[key0] = writerequests0Decoded0
            }
        }
        requestItems = requestItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
    }
}

extension BatchWriteItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchWriteItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchWriteItemOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchWriteItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchWriteItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
            self.unprocessedItems = output.unprocessedItems
        } else {
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
            self.unprocessedItems = nil
        }
    }
}

/// Represents the output of a BatchWriteItem operation.
public struct BatchWriteItemOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the entire BatchWriteItem operation. Each element consists of:
    ///
    /// * TableName - The table that consumed the provisioned throughput.
    ///
    /// * CapacityUnits - The total number of capacity units consumed.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A list of tables that were processed by BatchWriteItem and, for each table, information about any item collections that were affected by individual DeleteItem or PutItem operations. Each entry consists of the following subelements:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]?
    /// A map of tables and requests against those tables that were not processed. The UnprocessedItems value is in the same form as RequestItems, so you can provide this value directly to a subsequent BatchWriteItem operation. For more information, see RequestItems in the Request Parameters section. Each UnprocessedItems entry consists of a table name and, for that table, a list of operations to perform (DeleteRequest or PutRequest).
    ///
    /// * DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:
    ///
    /// * Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.
    ///
    ///
    ///
    ///
    /// * PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:
    ///
    /// * Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
    ///
    ///
    ///
    ///
    ///
    /// If there are no unprocessed items remaining, the response contains an empty UnprocessedItems map.
    public var unprocessedItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]? = nil,
        unprocessedItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
        self.unprocessedItems = unprocessedItems
    }
}

struct BatchWriteItemOutputResponseBody: Swift.Equatable {
    let unprocessedItems: [Swift.String:[DynamoDBClientTypes.WriteRequest]]?
    let itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]?
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
}

extension BatchWriteItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
        case unprocessedItems = "UnprocessedItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedItemsContainer = try containerValues.decodeIfPresent([Swift.String: [DynamoDBClientTypes.WriteRequest?]?].self, forKey: .unprocessedItems)
        var unprocessedItemsDecoded0: [Swift.String:[DynamoDBClientTypes.WriteRequest]]? = nil
        if let unprocessedItemsContainer = unprocessedItemsContainer {
            unprocessedItemsDecoded0 = [Swift.String:[DynamoDBClientTypes.WriteRequest]]()
            for (key0, writerequests0) in unprocessedItemsContainer {
                var writerequests0Decoded0: [DynamoDBClientTypes.WriteRequest]? = nil
                if let writerequests0 = writerequests0 {
                    writerequests0Decoded0 = [DynamoDBClientTypes.WriteRequest]()
                    for structure1 in writerequests0 {
                        if let structure1 = structure1 {
                            writerequests0Decoded0?.append(structure1)
                        }
                    }
                }
                unprocessedItemsDecoded0?[key0] = writerequests0Decoded0
            }
        }
        unprocessedItems = unprocessedItemsDecoded0
        let itemCollectionMetricsContainer = try containerValues.decodeIfPresent([Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics?]?].self, forKey: .itemCollectionMetrics)
        var itemCollectionMetricsDecoded0: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]? = nil
        if let itemCollectionMetricsContainer = itemCollectionMetricsContainer {
            itemCollectionMetricsDecoded0 = [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]()
            for (key0, itemcollectionmetricsmultiple0) in itemCollectionMetricsContainer {
                var itemcollectionmetricsmultiple0Decoded0: [DynamoDBClientTypes.ItemCollectionMetrics]? = nil
                if let itemcollectionmetricsmultiple0 = itemcollectionmetricsmultiple0 {
                    itemcollectionmetricsmultiple0Decoded0 = [DynamoDBClientTypes.ItemCollectionMetrics]()
                    for structure1 in itemcollectionmetricsmultiple0 {
                        if let structure1 = structure1 {
                            itemcollectionmetricsmultiple0Decoded0?.append(structure1)
                        }
                    }
                }
                itemCollectionMetricsDecoded0?[key0] = itemcollectionmetricsmultiple0Decoded0
            }
        }
        itemCollectionMetrics = itemCollectionMetricsDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

extension DynamoDBClientTypes {
    public enum BillingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case payPerRequest
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [BillingMode] {
            return [
                .payPerRequest,
                .provisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .payPerRequest: return "PAY_PER_REQUEST"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BillingMode(rawValue: rawValue) ?? BillingMode.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.BillingModeSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingMode = "BillingMode"
        case lastUpdateToPayPerRequestDateTime = "LastUpdateToPayPerRequestDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let lastUpdateToPayPerRequestDateTime = self.lastUpdateToPayPerRequestDateTime {
            try encodeContainer.encodeTimestamp(lastUpdateToPayPerRequestDateTime, format: .epochSeconds, forKey: .lastUpdateToPayPerRequestDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let lastUpdateToPayPerRequestDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateToPayPerRequestDateTime)
        lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the details for the read/write capacity mode. This page talks about PROVISIONED and PAY_PER_REQUEST billing modes. For more information about these modes, see [Read/write capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html). You may need to switch to on-demand mode at least once in order to return a BillingModeSummary response.
    public struct BillingModeSummary: Swift.Equatable {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
        ///
        /// * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
        ///
        /// * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
        public var lastUpdateToPayPerRequestDateTime: ClientRuntime.Date?

        public init (
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            lastUpdateToPayPerRequestDateTime: ClientRuntime.Date? = nil
        )
        {
            self.billingMode = billingMode
            self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
        }
    }

}

extension DynamoDBClientTypes.CancellationReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case item = "Item"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, attributeMap0) in item {
                try itemContainer.encode(attributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    /// An ordered list of errors for each item in the request which caused the transaction to get cancelled. The values of the list are ordered according to the ordering of the TransactWriteItems request parameter. If no error occurred for the associated item an error with a Null code and Null message will be present.
    public struct CancellationReason: Swift.Equatable {
        /// Status code for the result of the cancelled transaction.
        public var code: Swift.String?
        /// Item in the request which caused the transaction to get cancelled.
        public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// Cancellation reason message description.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.item = item
            self.message = message
        }
    }

}

extension DynamoDBClientTypes.Capacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = self.capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the amount of provisioned throughput capacity consumed on a table or an index.
    public struct Capacity: Swift.Equatable {
        /// The total number of capacity units consumed on a table or an index.
        public var capacityUnits: Swift.Double?
        /// The total number of read capacity units consumed on a table or an index.
        public var readCapacityUnits: Swift.Double?
        /// The total number of write capacity units consumed on a table or an index.
        public var writeCapacityUnits: Swift.Double?

        public init (
            capacityUnits: Swift.Double? = nil,
            readCapacityUnits: Swift.Double? = nil,
            writeCapacityUnits: Swift.Double? = nil
        )
        {
            self.capacityUnits = capacityUnits
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case beginsWith
        case between
        case contains
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case ne
        case notContains
        case notNull
        case null
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .beginsWith,
                .between,
                .contains,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .ne,
                .notContains,
                .notNull,
                .null,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .beginsWith: return "BEGINS_WITH"
            case .between: return "BETWEEN"
            case .contains: return "CONTAINS"
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .in: return "IN"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case .notContains: return "NOT_CONTAINS"
            case .notNull: return "NOT_NULL"
            case .null: return "NULL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.Condition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeValueList = "AttributeValueList"
        case comparisonOperator = "ComparisonOperator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeValueList = attributeValueList {
            var attributeValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeValueList)
            for attributevalue0 in attributeValueList {
                try attributeValueListContainer.encode(attributevalue0)
            }
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeValueListContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .attributeValueList)
        var attributeValueListDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let attributeValueListContainer = attributeValueListContainer {
            attributeValueListDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in attributeValueListContainer {
                if let union0 = union0 {
                    attributeValueListDecoded0?.append(union0)
                }
            }
        }
        attributeValueList = attributeValueListDecoded0
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the selection criteria for a Query or Scan operation:
    ///
    /// * For a Query operation, Condition is used for specifying the KeyConditions to use when querying a table or an index. For KeyConditions, only the following comparison operators are supported: EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEENCondition is also used in a QueryFilter, which evaluates the query results and returns only the desired values.
    ///
    /// * For a Scan operation, Condition is used in a ScanFilter, which evaluates the scan results and returns only the desired values.
    public struct Condition: Swift.Equatable {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see [http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters). For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.
        public var attributeValueList: [DynamoDBClientTypes.AttributeValue]?
        /// A comparator for evaluating attributes. For example, equals, greater than, less than, etc. The following comparison operators are available: EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN The following are descriptions of each comparison operator.
        ///
        /// * EQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * NE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * LE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * LT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps. This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.
        ///
        /// * NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps. This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.
        ///
        /// * CONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * BEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).
        ///
        /// * IN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.
        ///
        /// * BETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        ///
        ///
        /// For usage examples of AttributeValueList and ComparisonOperator, see [Legacy Conditional Parameters](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html) in the Amazon DynamoDB Developer Guide.
        /// This member is required.
        public var comparisonOperator: DynamoDBClientTypes.ComparisonOperator?

        public init (
            attributeValueList: [DynamoDBClientTypes.AttributeValue]? = nil,
            comparisonOperator: DynamoDBClientTypes.ComparisonOperator? = nil
        )
        {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
        }
    }

}

extension DynamoDBClientTypes.ConditionCheck: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = self.returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a check that an item exists or to check the condition of specific attributes of the item.
    public struct ConditionCheck: Swift.Equatable {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        /// This member is required.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the ConditionCheck condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the check item request.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension ConditionalCheckFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConditionalCheckFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A condition specified in the operation could not be evaluated.
public struct ConditionalCheckFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The conditional request failed.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConditionalCheckFailedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConditionalCheckFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum ConditionalOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case and
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionalOperator] {
            return [
                .and,
                .or,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case .or: return "OR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConditionalOperator(rawValue: rawValue) ?? ConditionalOperator.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ConsumedCapacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case readCapacityUnits = "ReadCapacityUnits"
        case table = "Table"
        case tableName = "TableName"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = self.capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .globalSecondaryIndexes)
            for (dictKey0, secondaryIndexesCapacityMap0) in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(secondaryIndexesCapacityMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .localSecondaryIndexes)
            for (dictKey0, secondaryIndexesCapacityMap0) in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(secondaryIndexesCapacityMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let table = self.table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let tableDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Capacity.self, forKey: .table)
        table = tableDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.Capacity?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0: [Swift.String:DynamoDBClientTypes.Capacity]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [Swift.String:DynamoDBClientTypes.Capacity]()
            for (key0, capacity0) in localSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    localSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.Capacity?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0: [Swift.String:DynamoDBClientTypes.Capacity]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [Swift.String:DynamoDBClientTypes.Capacity]()
            for (key0, capacity0) in globalSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    globalSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see [Provisioned Throughput](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public struct ConsumedCapacity: Swift.Equatable {
        /// The total number of capacity units consumed by the operation.
        public var capacityUnits: Swift.Double?
        /// The amount of throughput consumed on each global index affected by the operation.
        public var globalSecondaryIndexes: [Swift.String:DynamoDBClientTypes.Capacity]?
        /// The amount of throughput consumed on each local index affected by the operation.
        public var localSecondaryIndexes: [Swift.String:DynamoDBClientTypes.Capacity]?
        /// The total number of read capacity units consumed by the operation.
        public var readCapacityUnits: Swift.Double?
        /// The amount of throughput consumed on the table affected by the operation.
        public var table: DynamoDBClientTypes.Capacity?
        /// The name of the table that was affected by the operation.
        public var tableName: Swift.String?
        /// The total number of write capacity units consumed by the operation.
        public var writeCapacityUnits: Swift.Double?

        public init (
            capacityUnits: Swift.Double? = nil,
            globalSecondaryIndexes: [Swift.String:DynamoDBClientTypes.Capacity]? = nil,
            localSecondaryIndexes: [Swift.String:DynamoDBClientTypes.Capacity]? = nil,
            readCapacityUnits: Swift.Double? = nil,
            table: DynamoDBClientTypes.Capacity? = nil,
            tableName: Swift.String? = nil,
            writeCapacityUnits: Swift.Double? = nil
        )
        {
            self.capacityUnits = capacityUnits
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.readCapacityUnits = readCapacityUnits
            self.table = table
            self.tableName = tableName
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes.ContinuousBackupsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuousBackupsStatus = "ContinuousBackupsStatus"
        case pointInTimeRecoveryDescription = "PointInTimeRecoveryDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let continuousBackupsStatus = self.continuousBackupsStatus {
            try encodeContainer.encode(continuousBackupsStatus.rawValue, forKey: .continuousBackupsStatus)
        }
        if let pointInTimeRecoveryDescription = self.pointInTimeRecoveryDescription {
            try encodeContainer.encode(pointInTimeRecoveryDescription, forKey: .pointInTimeRecoveryDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContinuousBackupsStatus.self, forKey: .continuousBackupsStatus)
        continuousBackupsStatus = continuousBackupsStatusDecoded
        let pointInTimeRecoveryDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.PointInTimeRecoveryDescription.self, forKey: .pointInTimeRecoveryDescription)
        pointInTimeRecoveryDescription = pointInTimeRecoveryDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public struct ContinuousBackupsDescription: Swift.Equatable {
        /// ContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED
        /// This member is required.
        public var continuousBackupsStatus: DynamoDBClientTypes.ContinuousBackupsStatus?
        /// The description of the point in time recovery settings applied to the table.
        public var pointInTimeRecoveryDescription: DynamoDBClientTypes.PointInTimeRecoveryDescription?

        public init (
            continuousBackupsStatus: DynamoDBClientTypes.ContinuousBackupsStatus? = nil,
            pointInTimeRecoveryDescription: DynamoDBClientTypes.PointInTimeRecoveryDescription? = nil
        )
        {
            self.continuousBackupsStatus = continuousBackupsStatus
            self.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription
        }
    }

}

extension DynamoDBClientTypes {
    public enum ContinuousBackupsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ContinuousBackupsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContinuousBackupsStatus(rawValue: rawValue) ?? ContinuousBackupsStatus.sdkUnknown(rawValue)
        }
    }
}

extension ContinuousBackupsUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ContinuousBackupsUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Backups have not yet been enabled for this table.
public struct ContinuousBackupsUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ContinuousBackupsUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ContinuousBackupsUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum ContributorInsightsAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disable
        case enable
        case sdkUnknown(Swift.String)

        public static var allCases: [ContributorInsightsAction] {
            return [
                .disable,
                .enable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContributorInsightsAction(rawValue: rawValue) ?? ContributorInsightsAction.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum ContributorInsightsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ContributorInsightsStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContributorInsightsStatus(rawValue: rawValue) ?? ContributorInsightsStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ContributorInsightsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contributorInsightsStatus = self.contributorInsightsStatus {
            try encodeContainer.encode(contributorInsightsStatus.rawValue, forKey: .contributorInsightsStatus)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a Contributor Insights summary entry.
    public struct ContributorInsightsSummary: Swift.Equatable {
        /// Describes the current status for contributor insights for the given table and index, if applicable.
        public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
        /// Name of the index associated with the summary, if any.
        public var indexName: Swift.String?
        /// Name of the table associated with the summary.
        public var tableName: Swift.String?

        public init (
            contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
            indexName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.contributorInsightsStatus = contributorInsightsStatus
            self.indexName = indexName
            self.tableName = tableName
        }
    }

}

extension CreateBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupName = "BackupName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupName = self.backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension CreateBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBackupInput: Swift.Equatable {
    /// Specified name for the backup.
    /// This member is required.
    public var backupName: Swift.String?
    /// The name of the table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        backupName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.backupName = backupName
        self.tableName = tableName
    }
}

struct CreateBackupInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let backupName: Swift.String?
}

extension CreateBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupName = "BackupName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupName)
        backupName = backupNameDecoded
    }
}

extension CreateBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContinuousBackupsUnavailableException" : self = .continuousBackupsUnavailableException(try ContinuousBackupsUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBackupOutputError: Swift.Error, Swift.Equatable {
    case backupInUseException(BackupInUseException)
    case continuousBackupsUnavailableException(ContinuousBackupsUnavailableException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableInUseException(TableInUseException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backupDetails = output.backupDetails
        } else {
            self.backupDetails = nil
        }
    }
}

public struct CreateBackupOutputResponse: Swift.Equatable {
    /// Contains the details of the backup created for the table.
    public var backupDetails: DynamoDBClientTypes.BackupDetails?

    public init (
        backupDetails: DynamoDBClientTypes.BackupDetails? = nil
    )
    {
        self.backupDetails = backupDetails
    }
}

struct CreateBackupOutputResponseBody: Swift.Equatable {
    let backupDetails: DynamoDBClientTypes.BackupDetails?
}

extension CreateBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupDetails = "BackupDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDetailsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupDetails.self, forKey: .backupDetails)
        backupDetails = backupDetailsDecoded
    }
}

extension DynamoDBClientTypes.CreateGlobalSecondaryIndexAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a new global secondary index to be added to an existing table.
    public struct CreateGlobalSecondaryIndexAction: Swift.Equatable {
        /// The name of the global secondary index to be created.
        /// This member is required.
        public var indexName: Swift.String?
        /// The key schema for the global secondary index.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init (
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension CreateGlobalTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replica0 in replicationGroup {
                try replicationGroupContainer.encode(replica0)
            }
        }
    }
}

extension CreateGlobalTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGlobalTableInput: Swift.Equatable {
    /// The global table name.
    /// This member is required.
    public var globalTableName: Swift.String?
    /// The Regions where the global table needs to be created.
    /// This member is required.
    public var replicationGroup: [DynamoDBClientTypes.Replica]?

    public init (
        globalTableName: Swift.String? = nil,
        replicationGroup: [DynamoDBClientTypes.Replica]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicationGroup = replicationGroup
    }
}

struct CreateGlobalTableInputBody: Swift.Equatable {
    let globalTableName: Swift.String?
    let replicationGroup: [DynamoDBClientTypes.Replica]?
}

extension CreateGlobalTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicationGroupContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Replica?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[DynamoDBClientTypes.Replica]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [DynamoDBClientTypes.Replica]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
    }
}

extension CreateGlobalTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGlobalTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalTableAlreadyExistsException" : self = .globalTableAlreadyExistsException(try GlobalTableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGlobalTableOutputError: Swift.Error, Swift.Equatable {
    case globalTableAlreadyExistsException(GlobalTableAlreadyExistsException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGlobalTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct CreateGlobalTableOutputResponse: Swift.Equatable {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init (
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct CreateGlobalTableOutputResponseBody: Swift.Equatable {
    let globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?
}

extension CreateGlobalTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

extension DynamoDBClientTypes.CreateReplicaAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be added.
    public struct CreateReplicaAction: Swift.Equatable {
        /// The Region of the replica to be added.
        /// This member is required.
        public var regionName: Swift.String?

        public init (
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension DynamoDBClientTypes.CreateReplicationGroupMemberAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kmsMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case tableClassOverride = "TableClassOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindex0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindex0)
            }
        }
        if let kmsMasterKeyId = self.kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let tableClassOverride = self.tableClassOverride {
            try encodeContainer.encode(tableClassOverride.rawValue, forKey: .tableClassOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let tableClassOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .tableClassOverride)
        tableClassOverride = tableClassOverrideDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be created.
    public struct CreateReplicationGroupMemberAction: Swift.Equatable {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]?
        /// The KMS key that should be used for KMS encryption in the new replica. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The Region where the new replica will be created.
        /// This member is required.
        public var regionName: Swift.String?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var tableClassOverride: DynamoDBClientTypes.TableClass?

        public init (
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            tableClassOverride: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.tableClassOverride = tableClassOverride
        }
    }

}

extension CreateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sseSpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinition0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinition0)
            }
        }
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindex0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindex0)
            }
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindex0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindex0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let sseSpecification = self.sseSpecification {
            try encodeContainer.encode(sseSpecification, forKey: .sseSpecification)
        }
        if let streamSpecification = self.streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableClass = self.tableClass {
            try encodeContainer.encode(tableClass.rawValue, forKey: .tableClass)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateTable operation.
public struct CreateTableInput: Swift.Equatable {
    /// An array of attributes that describe the key schema for the table and indexes.
    /// This member is required.
    public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
    public var billingMode: DynamoDBClientTypes.BillingMode?
    /// One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:
    ///
    /// * IndexName - The name of the global secondary index. Must be unique only for this table.
    ///
    /// * KeySchema - Specifies the key schema for the global secondary index.
    ///
    /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
    ///
    /// * ProjectionType - One of the following:
    ///
    /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
    ///
    /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
    ///
    /// * ALL - All of the table attributes are projected into the index.
    ///
    ///
    ///
    ///
    /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
    ///
    ///
    ///
    ///
    /// * ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.
    public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// Specifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see [Data Model](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html) in the Amazon DynamoDB Developer Guide. Each KeySchemaElement in the array is composed of:
    ///
    /// * AttributeName - The name of this key attribute.
    ///
    /// * KeyType - The role that the key attribute will assume:
    ///
    /// * HASH - partition key
    ///
    /// * RANGE - sort key
    ///
    ///
    ///
    ///
    ///
    /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. For a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE. For more information, see [Working with Tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key) in the Amazon DynamoDB Developer Guide.
    /// This member is required.
    public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
    /// One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained. Each local secondary index in the array includes the following:
    ///
    /// * IndexName - The name of the local secondary index. Must be unique only for this table.
    ///
    /// * KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.
    ///
    /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
    ///
    /// * ProjectionType - One of the following:
    ///
    /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
    ///
    /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
    ///
    /// * ALL - All of the table attributes are projected into the index.
    ///
    ///
    ///
    ///
    /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
    public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    /// Represents the settings used to enable server-side encryption.
    public var sseSpecification: DynamoDBClientTypes.SSESpecification?
    /// The settings for DynamoDB Streams on the table. These settings consist of:
    ///
    /// * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).
    ///
    /// * StreamViewType - When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values for StreamViewType are:
    ///
    /// * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
    ///
    /// * NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.
    ///
    /// * OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.
    ///
    /// * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
    public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
    /// The table class of the new table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
    public var tableClass: DynamoDBClientTypes.TableClass?
    /// The name of the table to create.
    /// This member is required.
    public var tableName: Swift.String?
    /// A list of key-value pairs to label the table. For more information, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).
    public var tags: [DynamoDBClientTypes.Tag]?

    public init (
        attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
        billingMode: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
        localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
        streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
        tableClass: DynamoDBClientTypes.TableClass? = nil,
        tableName: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.keySchema = keySchema
        self.localSecondaryIndexes = localSecondaryIndexes
        self.provisionedThroughput = provisionedThroughput
        self.sseSpecification = sseSpecification
        self.streamSpecification = streamSpecification
        self.tableClass = tableClass
        self.tableName = tableName
        self.tags = tags
    }
}

struct CreateTableInputBody: Swift.Equatable {
    let attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    let tableName: Swift.String?
    let keySchema: [DynamoDBClientTypes.KeySchemaElement]?
    let localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndex]?
    let globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    let billingMode: DynamoDBClientTypes.BillingMode?
    let provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    let streamSpecification: DynamoDBClientTypes.StreamSpecification?
    let sseSpecification: DynamoDBClientTypes.SSESpecification?
    let tags: [DynamoDBClientTypes.Tag]?
    let tableClass: DynamoDBClientTypes.TableClass?
}

extension CreateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sseSpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDBClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDBClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.LocalSecondaryIndex?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[DynamoDBClientTypes.LocalSecondaryIndex]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [DynamoDBClientTypes.LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sseSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSESpecification.self, forKey: .sseSpecification)
        sseSpecification = sseSpecificationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DynamoDBClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DynamoDBClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let tableClassDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .tableClass)
        tableClass = tableClassDecoded
    }
}

extension CreateTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateTableOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// Represents the output of a CreateTable operation.
public struct CreateTableOutputResponse: Swift.Equatable {
    /// Represents the properties of the table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init (
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct CreateTableOutputResponseBody: Swift.Equatable {
    let tableDescription: DynamoDBClientTypes.TableDescription?
}

extension CreateTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension DynamoDBClientTypes.CsvOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delimiter = "Delimiter"
        case headerList = "HeaderList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let delimiter = self.delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let headerList = headerList {
            var headerListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headerList)
            for csvheader0 in headerList {
                try headerListContainer.encode(csvheader0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let headerListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .headerList)
        var headerListDecoded0:[Swift.String]? = nil
        if let headerListContainer = headerListContainer {
            headerListDecoded0 = [Swift.String]()
            for string0 in headerListContainer {
                if let string0 = string0 {
                    headerListDecoded0?.append(string0)
                }
            }
        }
        headerList = headerListDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Processing options for the CSV file being imported.
    public struct CsvOptions: Swift.Equatable {
        /// The delimiter used for separating items in the CSV file being imported.
        public var delimiter: Swift.String?
        /// List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header.
        public var headerList: [Swift.String]?

        public init (
            delimiter: Swift.String? = nil,
            headerList: [Swift.String]? = nil
        )
        {
            self.delimiter = delimiter
            self.headerList = headerList
        }
    }

}

extension DynamoDBClientTypes.Delete: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = self.returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a DeleteItem operation.
    public struct Delete: Swift.Equatable {
        /// A condition that must be satisfied in order for a conditional delete to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Delete condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which the item to be deleted resides.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension DeleteBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = self.backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
    }
}

extension DeleteBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBackupInput: Swift.Equatable {
    /// The ARN associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?

    public init (
        backupArn: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

struct DeleteBackupInputBody: Swift.Equatable {
    let backupArn: Swift.String?
}

extension DeleteBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
    }
}

extension DeleteBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBackupOutputError: Swift.Error, Swift.Equatable {
    case backupInUseException(BackupInUseException)
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backupDescription = output.backupDescription
        } else {
            self.backupDescription = nil
        }
    }
}

public struct DeleteBackupOutputResponse: Swift.Equatable {
    /// Contains the description of the backup created for the table.
    public var backupDescription: DynamoDBClientTypes.BackupDescription?

    public init (
        backupDescription: DynamoDBClientTypes.BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

struct DeleteBackupOutputResponseBody: Swift.Equatable {
    let backupDescription: DynamoDBClientTypes.BackupDescription?
}

extension DeleteBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupDescription = "BackupDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupDescription.self, forKey: .backupDescription)
        backupDescription = backupDescriptionDecoded
    }
}

extension DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a global secondary index to be deleted from an existing table.
    public struct DeleteGlobalSecondaryIndexAction: Swift.Equatable {
        /// The name of the global secondary index to be deleted.
        /// This member is required.
        public var indexName: Swift.String?

        public init (
            indexName: Swift.String? = nil
        )
        {
            self.indexName = indexName
        }
    }

}

extension DeleteItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expected)
            for (dictKey0, expectedAttributeMap0) in expected {
                try expectedContainer.encode(expectedAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = self.returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeleteItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteItem operation.
public struct DeleteItemInput: Swift.Equatable {
    /// A condition that must be satisfied in order for a conditional DeleteItem to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information about condition expressions, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// A map of attribute names to AttributeValue objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - The content of the old item is returned.
    ///
    ///
    /// There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The ReturnValues parameter is used by several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE or ALL_OLD.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// The name of the table from which to delete the item.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
    }
}

struct DeleteItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    let conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    let returnValues: DynamoDBClientTypes.ReturnValue?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    let conditionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
}

extension DeleteItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension DeleteItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteItemOutputError: Swift.Error, Swift.Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// Represents the output of a DeleteItem operation.
public struct DeleteItemOutputResponse: Swift.Equatable {
    /// A map of attribute names to AttributeValue objects, representing the item as it appeared before the DeleteItem operation. This map appears in the response only if ReturnValues was specified as ALL_OLD in the request.
    public var attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the DeleteItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the DeleteItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init (
        attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct DeleteItemOutputResponseBody: Swift.Equatable {
    let attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    let itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?
}

extension DeleteItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension DynamoDBClientTypes.DeleteReplicaAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be removed.
    public struct DeleteReplicaAction: Swift.Equatable {
        /// The Region of the replica to be removed.
        /// This member is required.
        public var regionName: Swift.String?

        public init (
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension DynamoDBClientTypes.DeleteReplicationGroupMemberAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be deleted.
    public struct DeleteReplicationGroupMemberAction: Swift.Equatable {
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?

        public init (
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension DynamoDBClientTypes.DeleteRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a DeleteItem operation on an item.
    public struct DeleteRequest: Swift.Equatable {
        /// A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
        /// This member is required.
        public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?

        public init (
            key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.key = key
        }
    }

}

extension DeleteTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DeleteTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteTable operation.
public struct DeleteTableInput: Swift.Equatable {
    /// The name of the table to delete.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DeleteTableInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DeleteTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DeleteTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteTableOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// Represents the output of a DeleteTable operation.
public struct DeleteTableOutputResponse: Swift.Equatable {
    /// Represents the properties of a table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init (
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct DeleteTableOutputResponseBody: Swift.Equatable {
    let tableDescription: DynamoDBClientTypes.TableDescription?
}

extension DeleteTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension DescribeBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = self.backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
    }
}

extension DescribeBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeBackupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?

    public init (
        backupArn: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

struct DescribeBackupInputBody: Swift.Equatable {
    let backupArn: Swift.String?
}

extension DescribeBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
    }
}

extension DescribeBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeBackupOutputError: Swift.Error, Swift.Equatable {
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backupDescription = output.backupDescription
        } else {
            self.backupDescription = nil
        }
    }
}

public struct DescribeBackupOutputResponse: Swift.Equatable {
    /// Contains the description of the backup created for the table.
    public var backupDescription: DynamoDBClientTypes.BackupDescription?

    public init (
        backupDescription: DynamoDBClientTypes.BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

struct DescribeBackupOutputResponseBody: Swift.Equatable {
    let backupDescription: DynamoDBClientTypes.BackupDescription?
}

extension DescribeBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupDescription = "BackupDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupDescription.self, forKey: .backupDescription)
        backupDescription = backupDescriptionDecoded
    }
}

extension DescribeContinuousBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeContinuousBackupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeContinuousBackupsInput: Swift.Equatable {
    /// Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeContinuousBackupsInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DescribeContinuousBackupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeContinuousBackupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContinuousBackupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeContinuousBackupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContinuousBackupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeContinuousBackupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.continuousBackupsDescription = output.continuousBackupsDescription
        } else {
            self.continuousBackupsDescription = nil
        }
    }
}

public struct DescribeContinuousBackupsOutputResponse: Swift.Equatable {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public var continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?

    public init (
        continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

struct DescribeContinuousBackupsOutputResponseBody: Swift.Equatable {
    let continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?
}

extension DescribeContinuousBackupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuousBackupsDescription = "ContinuousBackupsDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContinuousBackupsDescription.self, forKey: .continuousBackupsDescription)
        continuousBackupsDescription = continuousBackupsDescriptionDecoded
    }
}

extension DescribeContributorInsightsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeContributorInsightsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeContributorInsightsInput: Swift.Equatable {
    /// The name of the global secondary index to describe, if applicable.
    public var indexName: Swift.String?
    /// The name of the table to describe.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct DescribeContributorInsightsInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
}

extension DescribeContributorInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension DescribeContributorInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContributorInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeContributorInsightsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContributorInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contributorInsightsRuleList = output.contributorInsightsRuleList
            self.contributorInsightsStatus = output.contributorInsightsStatus
            self.failureException = output.failureException
            self.indexName = output.indexName
            self.lastUpdateDateTime = output.lastUpdateDateTime
            self.tableName = output.tableName
        } else {
            self.contributorInsightsRuleList = nil
            self.contributorInsightsStatus = nil
            self.failureException = nil
            self.indexName = nil
            self.lastUpdateDateTime = nil
            self.tableName = nil
        }
    }
}

public struct DescribeContributorInsightsOutputResponse: Swift.Equatable {
    /// List of names of the associated contributor insights rules.
    public var contributorInsightsRuleList: [Swift.String]?
    /// Current status of contributor insights.
    public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
    /// Returns information about the last failure that was encountered. The most common exceptions for a FAILED status are:
    ///
    /// * LimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor Insights rules before retrying.
    ///
    /// * AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.
    ///
    /// * AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.
    ///
    /// * InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.
    public var failureException: DynamoDBClientTypes.FailureException?
    /// The name of the global secondary index being described.
    public var indexName: Swift.String?
    /// Timestamp of the last time the status was changed.
    public var lastUpdateDateTime: ClientRuntime.Date?
    /// The name of the table being described.
    public var tableName: Swift.String?

    public init (
        contributorInsightsRuleList: [Swift.String]? = nil,
        contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
        failureException: DynamoDBClientTypes.FailureException? = nil,
        indexName: Swift.String? = nil,
        lastUpdateDateTime: ClientRuntime.Date? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsRuleList = contributorInsightsRuleList
        self.contributorInsightsStatus = contributorInsightsStatus
        self.failureException = failureException
        self.indexName = indexName
        self.lastUpdateDateTime = lastUpdateDateTime
        self.tableName = tableName
    }
}

struct DescribeContributorInsightsOutputResponseBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
    let contributorInsightsRuleList: [Swift.String]?
    let contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
    let lastUpdateDateTime: ClientRuntime.Date?
    let failureException: DynamoDBClientTypes.FailureException?
}

extension DescribeContributorInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsRuleList = "ContributorInsightsRuleList"
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case failureException = "FailureException"
        case indexName = "IndexName"
        case lastUpdateDateTime = "LastUpdateDateTime"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsRuleListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .contributorInsightsRuleList)
        var contributorInsightsRuleListDecoded0:[Swift.String]? = nil
        if let contributorInsightsRuleListContainer = contributorInsightsRuleListContainer {
            contributorInsightsRuleListDecoded0 = [Swift.String]()
            for string0 in contributorInsightsRuleListContainer {
                if let string0 = string0 {
                    contributorInsightsRuleListDecoded0?.append(string0)
                }
            }
        }
        contributorInsightsRuleList = contributorInsightsRuleListDecoded0
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
        let lastUpdateDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateDateTime)
        lastUpdateDateTime = lastUpdateDateTimeDecoded
        let failureExceptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.FailureException.self, forKey: .failureException)
        failureException = failureExceptionDecoded
    }
}

extension DescribeEndpointsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointsInput: Swift.Equatable {

    public init () { }
}

struct DescribeEndpointsInputBody: Swift.Equatable {
}

extension DescribeEndpointsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEndpointsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpoints = output.endpoints
        } else {
            self.endpoints = nil
        }
    }
}

public struct DescribeEndpointsOutputResponse: Swift.Equatable {
    /// List of endpoints.
    /// This member is required.
    public var endpoints: [DynamoDBClientTypes.Endpoint]?

    public init (
        endpoints: [DynamoDBClientTypes.Endpoint]? = nil
    )
    {
        self.endpoints = endpoints
    }
}

struct DescribeEndpointsOutputResponseBody: Swift.Equatable {
    let endpoints: [DynamoDBClientTypes.Endpoint]?
}

extension DescribeEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoints = "Endpoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Endpoint?].self, forKey: .endpoints)
        var endpointsDecoded0:[DynamoDBClientTypes.Endpoint]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [DynamoDBClientTypes.Endpoint]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
    }
}

extension DescribeExportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportArn = "ExportArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportArn = self.exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
    }
}

extension DescribeExportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExportInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) associated with the export.
    /// This member is required.
    public var exportArn: Swift.String?

    public init (
        exportArn: Swift.String? = nil
    )
    {
        self.exportArn = exportArn
    }
}

struct DescribeExportInputBody: Swift.Equatable {
    let exportArn: Swift.String?
}

extension DescribeExportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportArn = "ExportArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
    }
}

extension DescribeExportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExportNotFoundException" : self = .exportNotFoundException(try ExportNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeExportOutputError: Swift.Error, Swift.Equatable {
    case exportNotFoundException(ExportNotFoundException)
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeExportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportDescription = output.exportDescription
        } else {
            self.exportDescription = nil
        }
    }
}

public struct DescribeExportOutputResponse: Swift.Equatable {
    /// Represents the properties of the export.
    public var exportDescription: DynamoDBClientTypes.ExportDescription?

    public init (
        exportDescription: DynamoDBClientTypes.ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

struct DescribeExportOutputResponseBody: Swift.Equatable {
    let exportDescription: DynamoDBClientTypes.ExportDescription?
}

extension DescribeExportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportDescription = "ExportDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportDescription.self, forKey: .exportDescription)
        exportDescription = exportDescriptionDecoded
    }
}

extension DescribeGlobalTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
    }
}

extension DescribeGlobalTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGlobalTableInput: Swift.Equatable {
    /// The name of the global table.
    /// This member is required.
    public var globalTableName: Swift.String?

    public init (
        globalTableName: Swift.String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

struct DescribeGlobalTableInputBody: Swift.Equatable {
    let globalTableName: Swift.String?
}

extension DescribeGlobalTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension DescribeGlobalTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGlobalTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGlobalTableOutputError: Swift.Error, Swift.Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct DescribeGlobalTableOutputResponse: Swift.Equatable {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init (
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct DescribeGlobalTableOutputResponseBody: Swift.Equatable {
    let globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?
}

extension DescribeGlobalTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

extension DescribeGlobalTableSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
    }
}

extension DescribeGlobalTableSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGlobalTableSettingsInput: Swift.Equatable {
    /// The name of the global table to describe.
    /// This member is required.
    public var globalTableName: Swift.String?

    public init (
        globalTableName: Swift.String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

struct DescribeGlobalTableSettingsInputBody: Swift.Equatable {
    let globalTableName: Swift.String?
}

extension DescribeGlobalTableSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension DescribeGlobalTableSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGlobalTableSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGlobalTableSettingsOutputError: Swift.Error, Swift.Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalTableSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGlobalTableSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTableName = output.globalTableName
            self.replicaSettings = output.replicaSettings
        } else {
            self.globalTableName = nil
            self.replicaSettings = nil
        }
    }
}

public struct DescribeGlobalTableSettingsOutputResponse: Swift.Equatable {
    /// The name of the global table.
    public var globalTableName: Swift.String?
    /// The Region-specific settings for the global table.
    public var replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?

    public init (
        globalTableName: Swift.String? = nil,
        replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

struct DescribeGlobalTableSettingsOutputResponseBody: Swift.Equatable {
    let globalTableName: Swift.String?
    let replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?
}

extension DescribeGlobalTableSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaSettings = "ReplicaSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaSettingsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaSettingsDescription?].self, forKey: .replicaSettings)
        var replicaSettingsDecoded0:[DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
        if let replicaSettingsContainer = replicaSettingsContainer {
            replicaSettingsDecoded0 = [DynamoDBClientTypes.ReplicaSettingsDescription]()
            for structure0 in replicaSettingsContainer {
                if let structure0 = structure0 {
                    replicaSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaSettings = replicaSettingsDecoded0
    }
}

extension DescribeImportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importArn = "ImportArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importArn = self.importArn {
            try encodeContainer.encode(importArn, forKey: .importArn)
        }
    }
}

extension DescribeImportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeImportInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) associated with the table you're importing to.
    /// This member is required.
    public var importArn: Swift.String?

    public init (
        importArn: Swift.String? = nil
    )
    {
        self.importArn = importArn
    }
}

struct DescribeImportInputBody: Swift.Equatable {
    let importArn: Swift.String?
}

extension DescribeImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importArn = "ImportArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importArn)
        importArn = importArnDecoded
    }
}

extension DescribeImportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeImportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ImportNotFoundException" : self = .importNotFoundException(try ImportNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeImportOutputError: Swift.Error, Swift.Equatable {
    case importNotFoundException(ImportNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importTableDescription = output.importTableDescription
        } else {
            self.importTableDescription = nil
        }
    }
}

public struct DescribeImportOutputResponse: Swift.Equatable {
    /// Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered.
    /// This member is required.
    public var importTableDescription: DynamoDBClientTypes.ImportTableDescription?

    public init (
        importTableDescription: DynamoDBClientTypes.ImportTableDescription? = nil
    )
    {
        self.importTableDescription = importTableDescription
    }
}

struct DescribeImportOutputResponseBody: Swift.Equatable {
    let importTableDescription: DynamoDBClientTypes.ImportTableDescription?
}

extension DescribeImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importTableDescription = "ImportTableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importTableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ImportTableDescription.self, forKey: .importTableDescription)
        importTableDescription = importTableDescriptionDecoded
    }
}

extension DescribeKinesisStreamingDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeKinesisStreamingDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeKinesisStreamingDestinationInput: Swift.Equatable {
    /// The name of the table being described.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeKinesisStreamingDestinationInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DescribeKinesisStreamingDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeKinesisStreamingDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeKinesisStreamingDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeKinesisStreamingDestinationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeKinesisStreamingDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.kinesisDataStreamDestinations = output.kinesisDataStreamDestinations
            self.tableName = output.tableName
        } else {
            self.kinesisDataStreamDestinations = nil
            self.tableName = nil
        }
    }
}

public struct DescribeKinesisStreamingDestinationOutputResponse: Swift.Equatable {
    /// The list of replica structures for the table being described.
    public var kinesisDataStreamDestinations: [DynamoDBClientTypes.KinesisDataStreamDestination]?
    /// The name of the table being described.
    public var tableName: Swift.String?

    public init (
        kinesisDataStreamDestinations: [DynamoDBClientTypes.KinesisDataStreamDestination]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.kinesisDataStreamDestinations = kinesisDataStreamDestinations
        self.tableName = tableName
    }
}

struct DescribeKinesisStreamingDestinationOutputResponseBody: Swift.Equatable {
    let tableName: Swift.String?
    let kinesisDataStreamDestinations: [DynamoDBClientTypes.KinesisDataStreamDestination]?
}

extension DescribeKinesisStreamingDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kinesisDataStreamDestinations = "KinesisDataStreamDestinations"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let kinesisDataStreamDestinationsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KinesisDataStreamDestination?].self, forKey: .kinesisDataStreamDestinations)
        var kinesisDataStreamDestinationsDecoded0:[DynamoDBClientTypes.KinesisDataStreamDestination]? = nil
        if let kinesisDataStreamDestinationsContainer = kinesisDataStreamDestinationsContainer {
            kinesisDataStreamDestinationsDecoded0 = [DynamoDBClientTypes.KinesisDataStreamDestination]()
            for structure0 in kinesisDataStreamDestinationsContainer {
                if let structure0 = structure0 {
                    kinesisDataStreamDestinationsDecoded0?.append(structure0)
                }
            }
        }
        kinesisDataStreamDestinations = kinesisDataStreamDestinationsDecoded0
    }
}

extension DescribeLimitsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeLimits operation. Has no content.
public struct DescribeLimitsInput: Swift.Equatable {

    public init () { }
}

struct DescribeLimitsInputBody: Swift.Equatable {
}

extension DescribeLimitsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLimitsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountMaxReadCapacityUnits = output.accountMaxReadCapacityUnits
            self.accountMaxWriteCapacityUnits = output.accountMaxWriteCapacityUnits
            self.tableMaxReadCapacityUnits = output.tableMaxReadCapacityUnits
            self.tableMaxWriteCapacityUnits = output.tableMaxWriteCapacityUnits
        } else {
            self.accountMaxReadCapacityUnits = nil
            self.accountMaxWriteCapacityUnits = nil
            self.tableMaxReadCapacityUnits = nil
            self.tableMaxWriteCapacityUnits = nil
        }
    }
}

/// Represents the output of a DescribeLimits operation.
public struct DescribeLimitsOutputResponse: Swift.Equatable {
    /// The maximum total read capacity units that your account allows you to provision across all of your tables in this Region.
    public var accountMaxReadCapacityUnits: Swift.Int?
    /// The maximum total write capacity units that your account allows you to provision across all of your tables in this Region.
    public var accountMaxWriteCapacityUnits: Swift.Int?
    /// The maximum read capacity units that your account allows you to provision for a new table that you are creating in this Region, including the read capacity units provisioned for its global secondary indexes (GSIs).
    public var tableMaxReadCapacityUnits: Swift.Int?
    /// The maximum write capacity units that your account allows you to provision for a new table that you are creating in this Region, including the write capacity units provisioned for its global secondary indexes (GSIs).
    public var tableMaxWriteCapacityUnits: Swift.Int?

    public init (
        accountMaxReadCapacityUnits: Swift.Int? = nil,
        accountMaxWriteCapacityUnits: Swift.Int? = nil,
        tableMaxReadCapacityUnits: Swift.Int? = nil,
        tableMaxWriteCapacityUnits: Swift.Int? = nil
    )
    {
        self.accountMaxReadCapacityUnits = accountMaxReadCapacityUnits
        self.accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnits
        self.tableMaxReadCapacityUnits = tableMaxReadCapacityUnits
        self.tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnits
    }
}

struct DescribeLimitsOutputResponseBody: Swift.Equatable {
    let accountMaxReadCapacityUnits: Swift.Int?
    let accountMaxWriteCapacityUnits: Swift.Int?
    let tableMaxReadCapacityUnits: Swift.Int?
    let tableMaxWriteCapacityUnits: Swift.Int?
}

extension DescribeLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountMaxReadCapacityUnits = "AccountMaxReadCapacityUnits"
        case accountMaxWriteCapacityUnits = "AccountMaxWriteCapacityUnits"
        case tableMaxReadCapacityUnits = "TableMaxReadCapacityUnits"
        case tableMaxWriteCapacityUnits = "TableMaxWriteCapacityUnits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountMaxReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accountMaxReadCapacityUnits)
        accountMaxReadCapacityUnits = accountMaxReadCapacityUnitsDecoded
        let accountMaxWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accountMaxWriteCapacityUnits)
        accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnitsDecoded
        let tableMaxReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tableMaxReadCapacityUnits)
        tableMaxReadCapacityUnits = tableMaxReadCapacityUnitsDecoded
        let tableMaxWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tableMaxWriteCapacityUnits)
        tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnitsDecoded
    }
}

extension DescribeTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeTable operation.
public struct DescribeTableInput: Swift.Equatable {
    /// The name of the table to describe.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTableInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DescribeTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeTableOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .internalServerError: return "InternalServerError"
        case .invalidEndpointException: return "InvalidEndpointException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeTableOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.table = output.table
        } else {
            self.table = nil
        }
    }
}

/// Represents the output of a DescribeTable operation.
public struct DescribeTableOutputResponse: Swift.Equatable {
    /// The properties of the table.
    public var table: DynamoDBClientTypes.TableDescription?

    public init (
        table: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.table = table
    }
}

struct DescribeTableOutputResponseBody: Swift.Equatable {
    let table: DynamoDBClientTypes.TableDescription?
}

extension DescribeTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case table = "Table"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .table)
        table = tableDecoded
    }
}

extension DescribeTableReplicaAutoScalingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeTableReplicaAutoScalingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTableReplicaAutoScalingInput: Swift.Equatable {
    /// The name of the table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTableReplicaAutoScalingInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DescribeTableReplicaAutoScalingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTableReplicaAutoScalingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTableReplicaAutoScalingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTableReplicaAutoScalingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTableReplicaAutoScalingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTableReplicaAutoScalingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableAutoScalingDescription = output.tableAutoScalingDescription
        } else {
            self.tableAutoScalingDescription = nil
        }
    }
}

public struct DescribeTableReplicaAutoScalingOutputResponse: Swift.Equatable {
    /// Represents the auto scaling properties of the table.
    public var tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?

    public init (
        tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

struct DescribeTableReplicaAutoScalingOutputResponseBody: Swift.Equatable {
    let tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?
}

extension DescribeTableReplicaAutoScalingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableAutoScalingDescription = "TableAutoScalingDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableAutoScalingDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableAutoScalingDescription.self, forKey: .tableAutoScalingDescription)
        tableAutoScalingDescription = tableAutoScalingDescriptionDecoded
    }
}

extension DescribeTimeToLiveInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DescribeTimeToLiveInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTimeToLiveInput: Swift.Equatable {
    /// The name of the table to be described.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTimeToLiveInputBody: Swift.Equatable {
    let tableName: Swift.String?
}

extension DescribeTimeToLiveInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTimeToLiveOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTimeToLiveOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTimeToLiveOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTimeToLiveOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTimeToLiveOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.timeToLiveDescription = output.timeToLiveDescription
        } else {
            self.timeToLiveDescription = nil
        }
    }
}

public struct DescribeTimeToLiveOutputResponse: Swift.Equatable {
    ///
    public var timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription?

    public init (
        timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription? = nil
    )
    {
        self.timeToLiveDescription = timeToLiveDescription
    }
}

struct DescribeTimeToLiveOutputResponseBody: Swift.Equatable {
    let timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription?
}

extension DescribeTimeToLiveOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeToLiveDescription = "TimeToLiveDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TimeToLiveDescription.self, forKey: .timeToLiveDescription)
        timeToLiveDescription = timeToLiveDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    public enum DestinationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case disabling
        case enableFailed
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [DestinationStatus] {
            return [
                .active,
                .disabled,
                .disabling,
                .enableFailed,
                .enabling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enableFailed: return "ENABLE_FAILED"
            case .enabling: return "ENABLING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DestinationStatus(rawValue: rawValue) ?? DestinationStatus.sdkUnknown(rawValue)
        }
    }
}

extension DisableKinesisStreamingDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = self.streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension DisableKinesisStreamingDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableKinesisStreamingDestinationInput: Swift.Equatable {
    /// The ARN for a Kinesis data stream.
    /// This member is required.
    public var streamArn: Swift.String?
    /// The name of the DynamoDB table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct DisableKinesisStreamingDestinationInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let streamArn: Swift.String?
}

extension DisableKinesisStreamingDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
    }
}

extension DisableKinesisStreamingDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableKinesisStreamingDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableKinesisStreamingDestinationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableKinesisStreamingDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisableKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinationStatus = output.destinationStatus
            self.streamArn = output.streamArn
            self.tableName = output.tableName
        } else {
            self.destinationStatus = nil
            self.streamArn = nil
            self.tableName = nil
        }
    }
}

public struct DisableKinesisStreamingDestinationOutputResponse: Swift.Equatable {
    /// The current status of the replication.
    public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
    /// The ARN for the specific Kinesis data stream.
    public var streamArn: Swift.String?
    /// The name of the table being modified.
    public var tableName: Swift.String?

    public init (
        destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct DisableKinesisStreamingDestinationOutputResponseBody: Swift.Equatable {
    let tableName: Swift.String?
    let streamArn: Swift.String?
    let destinationStatus: DynamoDBClientTypes.DestinationStatus?
}

extension DisableKinesisStreamingDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationStatus = "DestinationStatus"
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
    }
}

extension DuplicateItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicateItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was an attempt to insert an item with the same primary key as an item that already exists in the DynamoDB table.
public struct DuplicateItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EnableKinesisStreamingDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = self.streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension EnableKinesisStreamingDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableKinesisStreamingDestinationInput: Swift.Equatable {
    /// The ARN for a Kinesis data stream.
    /// This member is required.
    public var streamArn: Swift.String?
    /// The name of the DynamoDB table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct EnableKinesisStreamingDestinationInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let streamArn: Swift.String?
}

extension EnableKinesisStreamingDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
    }
}

extension EnableKinesisStreamingDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableKinesisStreamingDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableKinesisStreamingDestinationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableKinesisStreamingDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnableKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinationStatus = output.destinationStatus
            self.streamArn = output.streamArn
            self.tableName = output.tableName
        } else {
            self.destinationStatus = nil
            self.streamArn = nil
            self.tableName = nil
        }
    }
}

public struct EnableKinesisStreamingDestinationOutputResponse: Swift.Equatable {
    /// The current status of the replication.
    public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
    /// The ARN for the specific Kinesis data stream.
    public var streamArn: Swift.String?
    /// The name of the table being modified.
    public var tableName: Swift.String?

    public init (
        destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct EnableKinesisStreamingDestinationOutputResponseBody: Swift.Equatable {
    let tableName: Swift.String?
    let streamArn: Swift.String?
    let destinationStatus: DynamoDBClientTypes.DestinationStatus?
}

extension EnableKinesisStreamingDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationStatus = "DestinationStatus"
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
    }
}

extension DynamoDBClientTypes.Endpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case cachePeriodInMinutes = "CachePeriodInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if cachePeriodInMinutes != 0 {
            try encodeContainer.encode(cachePeriodInMinutes, forKey: .cachePeriodInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let cachePeriodInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cachePeriodInMinutes) ?? 0
        cachePeriodInMinutes = cachePeriodInMinutesDecoded
    }
}

extension DynamoDBClientTypes {
    /// An endpoint information details.
    public struct Endpoint: Swift.Equatable {
        /// IP address of the endpoint.
        /// This member is required.
        public var address: Swift.String?
        /// Endpoint cache time to live (TTL) value.
        /// This member is required.
        public var cachePeriodInMinutes: Swift.Int

        public init (
            address: Swift.String? = nil,
            cachePeriodInMinutes: Swift.Int = 0
        )
        {
            self.address = address
            self.cachePeriodInMinutes = cachePeriodInMinutes
        }
    }

}

extension ExecuteStatementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consistentRead = "ConsistentRead"
        case limit = "Limit"
        case nextToken = "NextToken"
        case parameters = "Parameters"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case statement = "Statement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for attributevalue0 in parameters {
                try parametersContainer.encode(attributevalue0)
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let statement = self.statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }
}

extension ExecuteStatementInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExecuteStatementInput: Swift.Equatable {
    /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    public var consistentRead: Swift.Bool?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in LastEvaluatedKey to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation.
    public var limit: Swift.Int?
    /// Set this value to get remaining results, if NextToken was returned in the statement response.
    public var nextToken: Swift.String?
    /// The parameters for the PartiQL statement, if any.
    public var parameters: [DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The PartiQL statement representing the operation to run.
    /// This member is required.
    public var statement: Swift.String?

    public init (
        consistentRead: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        statement: Swift.String? = nil
    )
    {
        self.consistentRead = consistentRead
        self.limit = limit
        self.nextToken = nextToken
        self.parameters = parameters
        self.returnConsumedCapacity = returnConsumedCapacity
        self.statement = statement
    }
}

struct ExecuteStatementInputBody: Swift.Equatable {
    let statement: Swift.String?
    let parameters: [DynamoDBClientTypes.AttributeValue]?
    let consistentRead: Swift.Bool?
    let nextToken: Swift.String?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let limit: Swift.Int?
}

extension ExecuteStatementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consistentRead = "ConsistentRead"
        case limit = "Limit"
        case nextToken = "NextToken"
        case parameters = "Parameters"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case statement = "Statement"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ExecuteStatementOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExecuteStatementOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateItemException" : self = .duplicateItemException(try DuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExecuteStatementOutputError: Swift.Error, Swift.Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case duplicateItemException(DuplicateItemException)
    case internalServerError(InternalServerError)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteStatementOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExecuteStatementOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.items = output.items
            self.lastEvaluatedKey = output.lastEvaluatedKey
            self.nextToken = output.nextToken
        } else {
            self.consumedCapacity = nil
            self.items = nil
            self.lastEvaluatedKey = nil
            self.nextToken = nil
        }
    }
}

public struct ExecuteStatementOutputResponse: Swift.Equatable {
    /// The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see [Provisioned Throughput](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// If a read operation was used, this property will contain the result of the read operation; a map of attribute names and their values. For the write operations this value will be empty.
    public var items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
    public var nextToken: Swift.String?

    public init (
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.nextToken = nextToken
    }
}

struct ExecuteStatementOutputResponseBody: Swift.Equatable {
    let items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    let nextToken: Swift.String?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    let lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
}

extension ExecuteStatementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[Swift.String: DynamoDBClientTypes.AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[Swift.String:DynamoDBClientTypes.AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [Swift.String: DynamoDBClientTypes.AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
    }
}

extension ExecuteTransactionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactStatements = "TransactStatements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let transactStatements = transactStatements {
            var transactStatementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactStatements)
            for parameterizedstatement0 in transactStatements {
                try transactStatementsContainer.encode(parameterizedstatement0)
            }
        }
    }
}

extension ExecuteTransactionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExecuteTransactionInput: Swift.Equatable {
    /// Set this value to get remaining results, if NextToken was returned in the statement response.
    public var clientRequestToken: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response. For more information, see [TransactGetItems](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html) and [TransactWriteItems](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html).
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The list of PartiQL statements representing the transaction to run.
    /// This member is required.
    public var transactStatements: [DynamoDBClientTypes.ParameterizedStatement]?

    public init (
        clientRequestToken: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        transactStatements: [DynamoDBClientTypes.ParameterizedStatement]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.returnConsumedCapacity = returnConsumedCapacity
        self.transactStatements = transactStatements
    }
}

struct ExecuteTransactionInputBody: Swift.Equatable {
    let transactStatements: [DynamoDBClientTypes.ParameterizedStatement]?
    let clientRequestToken: Swift.String?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
}

extension ExecuteTransactionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactStatements = "TransactStatements"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactStatementsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ParameterizedStatement?].self, forKey: .transactStatements)
        var transactStatementsDecoded0:[DynamoDBClientTypes.ParameterizedStatement]? = nil
        if let transactStatementsContainer = transactStatementsContainer {
            transactStatementsDecoded0 = [DynamoDBClientTypes.ParameterizedStatement]()
            for structure0 in transactStatementsContainer {
                if let structure0 = structure0 {
                    transactStatementsDecoded0?.append(structure0)
                }
            }
        }
        transactStatements = transactStatementsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension ExecuteTransactionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExecuteTransactionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionInProgressException" : self = .transactionInProgressException(try TransactionInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExecuteTransactionOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case transactionInProgressException(TransactionInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteTransactionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExecuteTransactionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
        } else {
            self.consumedCapacity = nil
            self.responses = nil
        }
    }
}

public struct ExecuteTransactionOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// The response to a PartiQL transaction.
    public var responses: [DynamoDBClientTypes.ItemResponse]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.ItemResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

struct ExecuteTransactionOutputResponseBody: Swift.Equatable {
    let responses: [DynamoDBClientTypes.ItemResponse]?
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
}

extension ExecuteTransactionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ItemResponse?].self, forKey: .responses)
        var responsesDecoded0:[DynamoDBClientTypes.ItemResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [DynamoDBClientTypes.ItemResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

extension DynamoDBClientTypes.ExpectedAttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeValueList = "AttributeValueList"
        case comparisonOperator = "ComparisonOperator"
        case exists = "Exists"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeValueList = attributeValueList {
            var attributeValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeValueList)
            for attributevalue0 in attributeValueList {
                try attributeValueListContainer.encode(attributevalue0)
            }
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let exists = self.exists {
            try encodeContainer.encode(exists, forKey: .exists)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AttributeValue.self, forKey: .value)
        value = valueDecoded
        let existsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exists)
        exists = existsDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let attributeValueListContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .attributeValueList)
        var attributeValueListDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let attributeValueListContainer = attributeValueListContainer {
            attributeValueListDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in attributeValueListContainer {
                if let union0 = union0 {
                    attributeValueListDecoded0?.append(union0)
                }
            }
        }
        attributeValueList = attributeValueListDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents a condition to be compared with an attribute value. This condition can be used with DeleteItem, PutItem, or UpdateItem operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use ExpectedAttributeValue in one of two different ways:
    ///
    /// * Use AttributeValueList to specify one or more values to compare against an attribute. Use ComparisonOperator to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.
    ///
    /// * Use Value to specify a value that DynamoDB will compare against an attribute. If the values match, then ExpectedAttributeValue evaluates to true and the conditional operation succeeds. Optionally, you can also set Exists to false, indicating that you do not expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.
    ///
    ///
    /// Value and Exists are incompatible with AttributeValueList and ComparisonOperator. Note that if you use both sets of parameters at once, DynamoDB will return a ValidationException exception.
    public struct ExpectedAttributeValue: Swift.Equatable {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see [http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters). For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values. For information on specifying data types in JSON, see [JSON Data Format](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html) in the Amazon DynamoDB Developer Guide.
        public var attributeValueList: [DynamoDBClientTypes.AttributeValue]?
        /// A comparator for evaluating attributes in the AttributeValueList. For example, equals, greater than, less than, etc. The following comparison operators are available: EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN The following are descriptions of each comparison operator.
        ///
        /// * EQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * NE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * LE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * LT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps. This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.
        ///
        /// * NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps. This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.
        ///
        /// * CONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * BEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).
        ///
        /// * IN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.
        ///
        /// * BETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        public var comparisonOperator: DynamoDBClientTypes.ComparisonOperator?
        /// Causes DynamoDB to evaluate the value before attempting a conditional operation:
        ///
        /// * If Exists is true, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException.
        ///
        /// * If Exists is false, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException.
        ///
        ///
        /// The default setting for Exists is true. If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don't have to set Exists to true, because it is implied. DynamoDB returns a ValidationException if:
        ///
        /// * Exists is true but there is no Value to check. (You expect a value to exist, but don't specify what that value is.)
        ///
        /// * Exists is false but you also provide a Value. (You cannot expect an attribute to have a value, while also expecting it not to exist.)
        public var exists: Swift.Bool?
        /// Represents the data for the expected attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
        public var value: DynamoDBClientTypes.AttributeValue?

        public init (
            attributeValueList: [DynamoDBClientTypes.AttributeValue]? = nil,
            comparisonOperator: DynamoDBClientTypes.ComparisonOperator? = nil,
            exists: Swift.Bool? = nil,
            value: DynamoDBClientTypes.AttributeValue? = nil
        )
        {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
            self.exists = exists
            self.value = value
        }
    }

}

extension ExportConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was a conflict when writing to the specified S3 bucket.
public struct ExportConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExportConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExportConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ExportDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billedSizeBytes = "BilledSizeBytes"
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case exportArn = "ExportArn"
        case exportFormat = "ExportFormat"
        case exportManifest = "ExportManifest"
        case exportStatus = "ExportStatus"
        case exportTime = "ExportTime"
        case failureCode = "FailureCode"
        case failureMessage = "FailureMessage"
        case itemCount = "ItemCount"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case startTime = "StartTime"
        case tableArn = "TableArn"
        case tableId = "TableId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billedSizeBytes = self.billedSizeBytes {
            try encodeContainer.encode(billedSizeBytes, forKey: .billedSizeBytes)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let exportArn = self.exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
        if let exportFormat = self.exportFormat {
            try encodeContainer.encode(exportFormat.rawValue, forKey: .exportFormat)
        }
        if let exportManifest = self.exportManifest {
            try encodeContainer.encode(exportManifest, forKey: .exportManifest)
        }
        if let exportStatus = self.exportStatus {
            try encodeContainer.encode(exportStatus.rawValue, forKey: .exportStatus)
        }
        if let exportTime = self.exportTime {
            try encodeContainer.encodeTimestamp(exportTime, format: .epochSeconds, forKey: .exportTime)
        }
        if let failureCode = self.failureCode {
            try encodeContainer.encode(failureCode, forKey: .failureCode)
        }
        if let failureMessage = self.failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3BucketOwner = self.s3BucketOwner {
            try encodeContainer.encode(s3BucketOwner, forKey: .s3BucketOwner)
        }
        if let s3Prefix = self.s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
        if let s3SseAlgorithm = self.s3SseAlgorithm {
            try encodeContainer.encode(s3SseAlgorithm.rawValue, forKey: .s3SseAlgorithm)
        }
        if let s3SseKmsKeyId = self.s3SseKmsKeyId {
            try encodeContainer.encode(s3SseKmsKeyId, forKey: .s3SseKmsKeyId)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let exportManifestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportManifest)
        exportManifest = exportManifestDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let exportTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .exportTime)
        exportTime = exportTimeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3BucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketOwner)
        s3BucketOwner = s3BucketOwnerDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let s3SseAlgorithmDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.S3SseAlgorithm.self, forKey: .s3SseAlgorithm)
        s3SseAlgorithm = s3SseAlgorithmDecoded
        let s3SseKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3SseKmsKeyId)
        s3SseKmsKeyId = s3SseKmsKeyIdDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let exportFormatDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportFormat.self, forKey: .exportFormat)
        exportFormat = exportFormatDecoded
        let billedSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billedSizeBytes)
        billedSizeBytes = billedSizeBytesDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of the exported table.
    public struct ExportDescription: Swift.Equatable {
        /// The billable size of the table export.
        public var billedSizeBytes: Swift.Int?
        /// The client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.
        public var clientToken: Swift.String?
        /// The time at which the export task completed.
        public var endTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the table export.
        public var exportArn: Swift.String?
        /// The format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
        public var exportFormat: DynamoDBClientTypes.ExportFormat?
        /// The name of the manifest file for the export task.
        public var exportManifest: Swift.String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public var exportStatus: DynamoDBClientTypes.ExportStatus?
        /// Point in time from which table data was exported.
        public var exportTime: ClientRuntime.Date?
        /// Status code for the result of the failed export.
        public var failureCode: Swift.String?
        /// Export failure reason description.
        public var failureMessage: Swift.String?
        /// The number of items exported.
        public var itemCount: Swift.Int?
        /// The name of the Amazon S3 bucket containing the export.
        public var s3Bucket: Swift.String?
        /// The ID of the Amazon Web Services account that owns the bucket containing the export.
        public var s3BucketOwner: Swift.String?
        /// The Amazon S3 bucket prefix used as the file name and path of the exported snapshot.
        public var s3Prefix: Swift.String?
        /// Type of encryption used on the bucket where export data is stored. Valid values for S3SseAlgorithm are:
        ///
        /// * AES256 - server-side encryption with Amazon S3 managed keys
        ///
        /// * KMS - server-side encryption with KMS managed keys
        public var s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm?
        /// The ID of the KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).
        public var s3SseKmsKeyId: Swift.String?
        /// The time at which the export task began.
        public var startTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the table that was exported.
        public var tableArn: Swift.String?
        /// Unique ID of the table that was exported.
        public var tableId: Swift.String?

        public init (
            billedSizeBytes: Swift.Int? = nil,
            clientToken: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            exportArn: Swift.String? = nil,
            exportFormat: DynamoDBClientTypes.ExportFormat? = nil,
            exportManifest: Swift.String? = nil,
            exportStatus: DynamoDBClientTypes.ExportStatus? = nil,
            exportTime: ClientRuntime.Date? = nil,
            failureCode: Swift.String? = nil,
            failureMessage: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            s3Bucket: Swift.String? = nil,
            s3BucketOwner: Swift.String? = nil,
            s3Prefix: Swift.String? = nil,
            s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm? = nil,
            s3SseKmsKeyId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            tableArn: Swift.String? = nil,
            tableId: Swift.String? = nil
        )
        {
            self.billedSizeBytes = billedSizeBytes
            self.clientToken = clientToken
            self.endTime = endTime
            self.exportArn = exportArn
            self.exportFormat = exportFormat
            self.exportManifest = exportManifest
            self.exportStatus = exportStatus
            self.exportTime = exportTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.itemCount = itemCount
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3Prefix = s3Prefix
            self.s3SseAlgorithm = s3SseAlgorithm
            self.s3SseKmsKeyId = s3SseKmsKeyId
            self.startTime = startTime
            self.tableArn = tableArn
            self.tableId = tableId
        }
    }

}

extension DynamoDBClientTypes {
    public enum ExportFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dynamodbJson
        case ion
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportFormat] {
            return [
                .dynamodbJson,
                .ion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamodbJson: return "DYNAMODB_JSON"
            case .ion: return "ION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportFormat(rawValue: rawValue) ?? ExportFormat.sdkUnknown(rawValue)
        }
    }
}

extension ExportNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified export was not found.
public struct ExportNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExportNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExportNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum ExportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportStatus(rawValue: rawValue) ?? ExportStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ExportSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportArn = "ExportArn"
        case exportStatus = "ExportStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportArn = self.exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
        if let exportStatus = self.exportStatus {
            try encodeContainer.encode(exportStatus.rawValue, forKey: .exportStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
    }
}

extension DynamoDBClientTypes {
    /// Summary information about an export task.
    public struct ExportSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the export.
        public var exportArn: Swift.String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public var exportStatus: DynamoDBClientTypes.ExportStatus?

        public init (
            exportArn: Swift.String? = nil,
            exportStatus: DynamoDBClientTypes.ExportStatus? = nil
        )
        {
            self.exportArn = exportArn
            self.exportStatus = exportStatus
        }
    }

}

extension ExportTableToPointInTimeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case exportFormat = "ExportFormat"
        case exportTime = "ExportTime"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let exportFormat = self.exportFormat {
            try encodeContainer.encode(exportFormat.rawValue, forKey: .exportFormat)
        }
        if let exportTime = self.exportTime {
            try encodeContainer.encodeTimestamp(exportTime, format: .epochSeconds, forKey: .exportTime)
        }
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3BucketOwner = self.s3BucketOwner {
            try encodeContainer.encode(s3BucketOwner, forKey: .s3BucketOwner)
        }
        if let s3Prefix = self.s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
        if let s3SseAlgorithm = self.s3SseAlgorithm {
            try encodeContainer.encode(s3SseAlgorithm.rawValue, forKey: .s3SseAlgorithm)
        }
        if let s3SseKmsKeyId = self.s3SseKmsKeyId {
            try encodeContainer.encode(s3SseKmsKeyId, forKey: .s3SseKmsKeyId)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}

extension ExportTableToPointInTimeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportTableToPointInTimeInput: Swift.Equatable {
    /// Providing a ClientToken makes the call to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call. A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an ImportConflictException.
    public var clientToken: Swift.String?
    /// The format for the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
    public var exportFormat: DynamoDBClientTypes.ExportFormat?
    /// Time in the past from which to export table data, counted in seconds from the start of the Unix epoch. The table export will be a snapshot of the table's state at this point in time.
    public var exportTime: ClientRuntime.Date?
    /// The name of the Amazon S3 bucket to export the snapshot to.
    /// This member is required.
    public var s3Bucket: Swift.String?
    /// The ID of the Amazon Web Services account that owns the bucket the export will be stored in.
    public var s3BucketOwner: Swift.String?
    /// The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
    public var s3Prefix: Swift.String?
    /// Type of encryption used on the bucket where export data will be stored. Valid values for S3SseAlgorithm are:
    ///
    /// * AES256 - server-side encryption with Amazon S3 managed keys
    ///
    /// * KMS - server-side encryption with KMS managed keys
    public var s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm?
    /// The ID of the KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).
    public var s3SseKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) associated with the table to export.
    /// This member is required.
    public var tableArn: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        exportFormat: DynamoDBClientTypes.ExportFormat? = nil,
        exportTime: ClientRuntime.Date? = nil,
        s3Bucket: Swift.String? = nil,
        s3BucketOwner: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm? = nil,
        s3SseKmsKeyId: Swift.String? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.exportFormat = exportFormat
        self.exportTime = exportTime
        self.s3Bucket = s3Bucket
        self.s3BucketOwner = s3BucketOwner
        self.s3Prefix = s3Prefix
        self.s3SseAlgorithm = s3SseAlgorithm
        self.s3SseKmsKeyId = s3SseKmsKeyId
        self.tableArn = tableArn
    }
}

struct ExportTableToPointInTimeInputBody: Swift.Equatable {
    let tableArn: Swift.String?
    let exportTime: ClientRuntime.Date?
    let clientToken: Swift.String?
    let s3Bucket: Swift.String?
    let s3BucketOwner: Swift.String?
    let s3Prefix: Swift.String?
    let s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm?
    let s3SseKmsKeyId: Swift.String?
    let exportFormat: DynamoDBClientTypes.ExportFormat?
}

extension ExportTableToPointInTimeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case exportFormat = "ExportFormat"
        case exportTime = "ExportTime"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case tableArn = "TableArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let exportTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .exportTime)
        exportTime = exportTimeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3BucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketOwner)
        s3BucketOwner = s3BucketOwnerDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let s3SseAlgorithmDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.S3SseAlgorithm.self, forKey: .s3SseAlgorithm)
        s3SseAlgorithm = s3SseAlgorithmDecoded
        let s3SseKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3SseKmsKeyId)
        s3SseKmsKeyId = s3SseKmsKeyIdDecoded
        let exportFormatDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportFormat.self, forKey: .exportFormat)
        exportFormat = exportFormatDecoded
    }
}

extension ExportTableToPointInTimeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportTableToPointInTimeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExportConflictException" : self = .exportConflictException(try ExportConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExportTimeException" : self = .invalidExportTimeException(try InvalidExportTimeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PointInTimeRecoveryUnavailableException" : self = .pointInTimeRecoveryUnavailableException(try PointInTimeRecoveryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportTableToPointInTimeOutputError: Swift.Error, Swift.Equatable {
    case exportConflictException(ExportConflictException)
    case internalServerError(InternalServerError)
    case invalidExportTimeException(InvalidExportTimeException)
    case limitExceededException(LimitExceededException)
    case pointInTimeRecoveryUnavailableException(PointInTimeRecoveryUnavailableException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportTableToPointInTimeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportTableToPointInTimeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportDescription = output.exportDescription
        } else {
            self.exportDescription = nil
        }
    }
}

public struct ExportTableToPointInTimeOutputResponse: Swift.Equatable {
    /// Contains a description of the table export.
    public var exportDescription: DynamoDBClientTypes.ExportDescription?

    public init (
        exportDescription: DynamoDBClientTypes.ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

struct ExportTableToPointInTimeOutputResponseBody: Swift.Equatable {
    let exportDescription: DynamoDBClientTypes.ExportDescription?
}

extension ExportTableToPointInTimeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportDescription = "ExportDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ExportDescription.self, forKey: .exportDescription)
        exportDescription = exportDescriptionDecoded
    }
}

extension DynamoDBClientTypes.FailureException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exceptionDescription = "ExceptionDescription"
        case exceptionName = "ExceptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exceptionDescription = self.exceptionDescription {
            try encodeContainer.encode(exceptionDescription, forKey: .exceptionDescription)
        }
        if let exceptionName = self.exceptionName {
            try encodeContainer.encode(exceptionName, forKey: .exceptionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exceptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exceptionName)
        exceptionName = exceptionNameDecoded
        let exceptionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exceptionDescription)
        exceptionDescription = exceptionDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a failure a contributor insights operation.
    public struct FailureException: Swift.Equatable {
        /// Description of the failure.
        public var exceptionDescription: Swift.String?
        /// Exception name.
        public var exceptionName: Swift.String?

        public init (
            exceptionDescription: Swift.String? = nil,
            exceptionName: Swift.String? = nil
        )
        {
            self.exceptionDescription = exceptionDescription
            self.exceptionName = exceptionName
        }
    }

}

extension DynamoDBClientTypes.Get: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Specifies an item and related attribute values to retrieve in a TransactGetItem object.
    public struct Get: Swift.Equatable {
        /// One or more substitution tokens for attribute names in the ProjectionExpression parameter.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// A map of attribute names to AttributeValue objects that specifies the primary key of the item to retrieve.
        /// This member is required.
        public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// A string that identifies one or more attributes of the specified item to retrieve from the table. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.
        public var projectionExpression: Swift.String?
        /// The name of the table from which to retrieve the specified item.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            projectionExpression: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.tableName = tableName
        }
    }

}

extension GetItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributename0 in attributesToGet {
                try attributesToGetContainer.encode(attributename0)
            }
        }
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension GetItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetItem operation.
public struct GetItemInput: Swift.Equatable {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
    public var consistentRead: Swift.Bool?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The name of the table containing the requested item.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        attributesToGet: [Swift.String]? = nil,
        consistentRead: Swift.Bool? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        projectionExpression: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.consistentRead = consistentRead
        self.expressionAttributeNames = expressionAttributeNames
        self.key = key
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.tableName = tableName
    }
}

struct GetItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let attributesToGet: [Swift.String]?
    let consistentRead: Swift.Bool?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let projectionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
}

extension GetItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension GetItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetItemOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.item = output.item
        } else {
            self.consumedCapacity = nil
            self.item = nil
        }
    }
}

/// Represents the output of a GetItem operation.
public struct GetItemOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the GetItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Read/Write Capacity Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// A map of attribute names to AttributeValue objects, as specified by ProjectionExpression.
    public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?

    public init (
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.item = item
    }
}

struct GetItemOutputResponseBody: Swift.Equatable {
    let item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
}

extension GetItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case item = "Item"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct GlobalSecondaryIndex: Swift.Equatable {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init (
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedWriteCapacityAutoScalingUpdate = self.provisionedWriteCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingUpdate, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedWriteCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a global secondary index for a global table that will be modified.
    public struct GlobalSecondaryIndexAutoScalingUpdate: Swift.Equatable {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init (
            indexName: Swift.String? = nil,
            provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        }
    }

}

extension DynamoDBClientTypes.GlobalSecondaryIndexDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backfilling = "Backfilling"
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case indexSizeBytes = "IndexSizeBytes"
        case indexStatus = "IndexStatus"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backfilling = self.backfilling {
            try encodeContainer.encode(backfilling, forKey: .backfilling)
        }
        if let indexArn = self.indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexSizeBytes = self.indexSizeBytes {
            try encodeContainer.encode(indexSizeBytes, forKey: .indexSizeBytes)
        }
        if let indexStatus = self.indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let backfillingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .backfilling)
        backfilling = backfillingDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputDescription.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let indexSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .indexSizeBytes)
        indexSizeBytes = indexSizeBytesDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let indexArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct GlobalSecondaryIndexDescription: Swift.Equatable {
        /// Indicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false. You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. For indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.
        public var backfilling: Swift.Bool?
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public var indexArn: Swift.String?
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var indexSizeBytes: Swift.Int?
        /// The current state of the global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The index is being updated.
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription?

        public init (
            backfilling: Swift.Bool? = nil,
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexSizeBytes: Swift.Int? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription? = nil
        )
        {
            self.backfilling = backfilling
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.indexStatus = indexStatus
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes.GlobalSecondaryIndexInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index for the table when the backup was created.
    public struct GlobalSecondaryIndexInfo: Swift.Equatable {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init (
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes.GlobalSecondaryIndexUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case create = "Create"
        case delete = "Delete"
        case update = "Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = self.create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = self.delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let update = self.update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction.self, forKey: .update)
        update = updateDecoded
        let createDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.CreateGlobalSecondaryIndexAction.self, forKey: .create)
        create = createDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new global secondary index to be added to an existing table.
    ///
    /// * New provisioned throughput parameters for an existing global secondary index.
    ///
    /// * An existing global secondary index to be removed from an existing table.
    public struct GlobalSecondaryIndexUpdate: Swift.Equatable {
        /// The parameters required for creating a global secondary index on an existing table:
        ///
        /// * IndexName
        ///
        /// * KeySchema
        ///
        /// * AttributeDefinitions
        ///
        /// * Projection
        ///
        /// * ProvisionedThroughput
        public var create: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index to be removed.
        public var delete: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.
        public var update: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction?

        public init (
            create: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction? = nil,
            delete: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction? = nil,
            update: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction? = nil
        )
        {
            self.create = create
            self.delete = delete
            self.update = update
        }
    }

}

extension DynamoDBClientTypes.GlobalTable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replica0 in replicationGroup {
                try replicationGroupContainer.encode(replica0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicationGroupContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Replica?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[DynamoDBClientTypes.Replica]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [DynamoDBClientTypes.Replica]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global table.
    public struct GlobalTable: Swift.Equatable {
        /// The global table name.
        public var globalTableName: Swift.String?
        /// The Regions where the global table has replicas.
        public var replicationGroup: [DynamoDBClientTypes.Replica]?

        public init (
            globalTableName: Swift.String? = nil,
            replicationGroup: [DynamoDBClientTypes.Replica]? = nil
        )
        {
            self.globalTableName = globalTableName
            self.replicationGroup = replicationGroup
        }
    }

}

extension GlobalTableAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GlobalTableAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified global table already exists.
public struct GlobalTableAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalTableAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GlobalTableAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.GlobalTableDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case globalTableArn = "GlobalTableArn"
        case globalTableName = "GlobalTableName"
        case globalTableStatus = "GlobalTableStatus"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let globalTableArn = self.globalTableArn {
            try encodeContainer.encode(globalTableArn, forKey: .globalTableArn)
        }
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableStatus = self.globalTableStatus {
            try encodeContainer.encode(globalTableStatus.rawValue, forKey: .globalTableStatus)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replicadescription0 in replicationGroup {
                try replicationGroupContainer.encode(replicadescription0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaDescription?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[DynamoDBClientTypes.ReplicaDescription]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [DynamoDBClientTypes.ReplicaDescription]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
        let globalTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableArn)
        globalTableArn = globalTableArnDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let globalTableStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.GlobalTableStatus.self, forKey: .globalTableStatus)
        globalTableStatus = globalTableStatusDecoded
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains details about the global table.
    public struct GlobalTableDescription: Swift.Equatable {
        /// The creation time of the global table.
        public var creationDateTime: ClientRuntime.Date?
        /// The unique identifier of the global table.
        public var globalTableArn: Swift.String?
        /// The global table name.
        public var globalTableName: Swift.String?
        /// The current state of the global table:
        ///
        /// * CREATING - The global table is being created.
        ///
        /// * UPDATING - The global table is being updated.
        ///
        /// * DELETING - The global table is being deleted.
        ///
        /// * ACTIVE - The global table is ready for use.
        public var globalTableStatus: DynamoDBClientTypes.GlobalTableStatus?
        /// The Regions where the global table has replicas.
        public var replicationGroup: [DynamoDBClientTypes.ReplicaDescription]?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            globalTableArn: Swift.String? = nil,
            globalTableName: Swift.String? = nil,
            globalTableStatus: DynamoDBClientTypes.GlobalTableStatus? = nil,
            replicationGroup: [DynamoDBClientTypes.ReplicaDescription]? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.globalTableArn = globalTableArn
            self.globalTableName = globalTableName
            self.globalTableStatus = globalTableStatus
            self.replicationGroup = replicationGroup
        }
    }

}

extension DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedWriteCapacityAutoScalingSettingsUpdate = "ProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedWriteCapacityAutoScalingSettingsUpdate = self.provisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .provisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let provisionedWriteCapacityUnits = self.provisionedWriteCapacityUnits {
            try encodeContainer.encode(provisionedWriteCapacityUnits, forKey: .provisionedWriteCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedWriteCapacityUnits)
        provisionedWriteCapacityUnits = provisionedWriteCapacityUnitsDecoded
        let provisionedWriteCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingSettingsUpdate)
        provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public struct GlobalTableGlobalSecondaryIndexSettingsUpdate: Swift.Equatable {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// Auto scaling settings for managing a global secondary index's write capacity units.
        public var provisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedWriteCapacityUnits: Swift.Int?

        public init (
            indexName: Swift.String? = nil,
            provisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdate
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }
    }

}

extension GlobalTableNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GlobalTableNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified global table does not exist.
public struct GlobalTableNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalTableNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GlobalTableNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum GlobalTableStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalTableStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalTableStatus(rawValue: rawValue) ?? GlobalTableStatus.sdkUnknown(rawValue)
        }
    }
}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// DynamoDB rejected the request because you retried a request with a different payload but with an idempotent token that was already used.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ImportConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was a conflict when importing from the specified S3 source. This can occur when the current import conflicts with a previous import request that had the same client token.
public struct ImportConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ImportConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ImportConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ImportNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified import was not found.
public struct ImportNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ImportNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ImportNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum ImportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportStatus] {
            return [
                .cancelled,
                .cancelling,
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImportStatus(rawValue: rawValue) ?? ImportStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ImportSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case endTime = "EndTime"
        case importArn = "ImportArn"
        case importStatus = "ImportStatus"
        case inputFormat = "InputFormat"
        case s3BucketSource = "S3BucketSource"
        case startTime = "StartTime"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let importArn = self.importArn {
            try encodeContainer.encode(importArn, forKey: .importArn)
        }
        if let importStatus = self.importStatus {
            try encodeContainer.encode(importStatus.rawValue, forKey: .importStatus)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let s3BucketSource = self.s3BucketSource {
            try encodeContainer.encode(s3BucketSource, forKey: .s3BucketSource)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importArn)
        importArn = importArnDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let s3BucketSourceDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.S3BucketSource.self, forKey: .s3BucketSource)
        s3BucketSource = s3BucketSourceDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Summary information about the source file for the import.
    public struct ImportSummary: Swift.Equatable {
        /// The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with this import task.
        public var cloudWatchLogGroupArn: Swift.String?
        /// The time at which this import task ended. (Does this include the successful complete creation of the table it was imported to?)
        public var endTime: ClientRuntime.Date?
        /// The Amazon Resource Number (ARN) corresponding to the import request.
        public var importArn: Swift.String?
        /// The status of the import operation.
        public var importStatus: DynamoDBClientTypes.ImportStatus?
        /// The format of the source data. Valid values are CSV, DYNAMODB_JSON or ION.
        public var inputFormat: DynamoDBClientTypes.InputFormat?
        /// The path and S3 bucket of the source file that is being imported. This includes the S3Bucket (required), S3KeyPrefix (optional) and S3BucketOwner (optional if the bucket is owned by the requester).
        public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
        /// The time at which this import task began.
        public var startTime: ClientRuntime.Date?
        /// The Amazon Resource Number (ARN) of the table being imported into.
        public var tableArn: Swift.String?

        public init (
            cloudWatchLogGroupArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            importArn: Swift.String? = nil,
            importStatus: DynamoDBClientTypes.ImportStatus? = nil,
            inputFormat: DynamoDBClientTypes.InputFormat? = nil,
            s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
            startTime: ClientRuntime.Date? = nil,
            tableArn: Swift.String? = nil
        )
        {
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.endTime = endTime
            self.importArn = importArn
            self.importStatus = importStatus
            self.inputFormat = inputFormat
            self.s3BucketSource = s3BucketSource
            self.startTime = startTime
            self.tableArn = tableArn
        }
    }

}

extension DynamoDBClientTypes.ImportTableDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case endTime = "EndTime"
        case errorCount = "ErrorCount"
        case failureCode = "FailureCode"
        case failureMessage = "FailureMessage"
        case importArn = "ImportArn"
        case importStatus = "ImportStatus"
        case importedItemCount = "ImportedItemCount"
        case inputCompressionType = "InputCompressionType"
        case inputFormat = "InputFormat"
        case inputFormatOptions = "InputFormatOptions"
        case processedItemCount = "ProcessedItemCount"
        case processedSizeBytes = "ProcessedSizeBytes"
        case s3BucketSource = "S3BucketSource"
        case startTime = "StartTime"
        case tableArn = "TableArn"
        case tableCreationParameters = "TableCreationParameters"
        case tableId = "TableId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if errorCount != 0 {
            try encodeContainer.encode(errorCount, forKey: .errorCount)
        }
        if let failureCode = self.failureCode {
            try encodeContainer.encode(failureCode, forKey: .failureCode)
        }
        if let failureMessage = self.failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
        if let importArn = self.importArn {
            try encodeContainer.encode(importArn, forKey: .importArn)
        }
        if let importStatus = self.importStatus {
            try encodeContainer.encode(importStatus.rawValue, forKey: .importStatus)
        }
        if importedItemCount != 0 {
            try encodeContainer.encode(importedItemCount, forKey: .importedItemCount)
        }
        if let inputCompressionType = self.inputCompressionType {
            try encodeContainer.encode(inputCompressionType.rawValue, forKey: .inputCompressionType)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let inputFormatOptions = self.inputFormatOptions {
            try encodeContainer.encode(inputFormatOptions, forKey: .inputFormatOptions)
        }
        if processedItemCount != 0 {
            try encodeContainer.encode(processedItemCount, forKey: .processedItemCount)
        }
        if let processedSizeBytes = self.processedSizeBytes {
            try encodeContainer.encode(processedSizeBytes, forKey: .processedSizeBytes)
        }
        if let s3BucketSource = self.s3BucketSource {
            try encodeContainer.encode(s3BucketSource, forKey: .s3BucketSource)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableCreationParameters = self.tableCreationParameters {
            try encodeContainer.encode(tableCreationParameters, forKey: .tableCreationParameters)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importArn)
        importArn = importArnDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketSourceDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.S3BucketSource.self, forKey: .s3BucketSource)
        s3BucketSource = s3BucketSourceDecoded
        let errorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorCount) ?? 0
        errorCount = errorCountDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let inputFormatOptionsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputFormatOptions.self, forKey: .inputFormatOptions)
        inputFormatOptions = inputFormatOptionsDecoded
        let inputCompressionTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputCompressionType.self, forKey: .inputCompressionType)
        inputCompressionType = inputCompressionTypeDecoded
        let tableCreationParametersDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableCreationParameters.self, forKey: .tableCreationParameters)
        tableCreationParameters = tableCreationParametersDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let processedSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedSizeBytes)
        processedSizeBytes = processedSizeBytesDecoded
        let processedItemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedItemCount) ?? 0
        processedItemCount = processedItemCountDecoded
        let importedItemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedItemCount) ?? 0
        importedItemCount = importedItemCountDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of the table being imported into.
    public struct ImportTableDescription: Swift.Equatable {
        /// The client token that was provided for the import task. Reusing the client token on retry makes a call to ImportTable idempotent.
        public var clientToken: Swift.String?
        /// The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with the target table.
        public var cloudWatchLogGroupArn: Swift.String?
        /// The time at which the creation of the table associated with this import task completed.
        public var endTime: ClientRuntime.Date?
        /// The number of errors occurred on importing the source file into the target table.
        public var errorCount: Swift.Int
        /// The error code corresponding to the failure that the import job ran into during execution.
        public var failureCode: Swift.String?
        /// The error message corresponding to the failure that the import job ran into during execution.
        public var failureMessage: Swift.String?
        /// The Amazon Resource Number (ARN) corresponding to the import request.
        public var importArn: Swift.String?
        /// The status of the import.
        public var importStatus: DynamoDBClientTypes.ImportStatus?
        /// The number of items successfully imported into the new table.
        public var importedItemCount: Swift.Int
        /// The compression options for the data that has been imported into the target table. The values are NONE, GZIP, or ZSTD.
        public var inputCompressionType: DynamoDBClientTypes.InputCompressionType?
        /// The format of the source data going into the target table.
        public var inputFormat: DynamoDBClientTypes.InputFormat?
        /// The format options for the data that was imported into the target table. There is one value, CsvOption.
        public var inputFormatOptions: DynamoDBClientTypes.InputFormatOptions?
        /// The total number of items processed from the source file.
        public var processedItemCount: Swift.Int
        /// The total size of data processed from the source file, in Bytes.
        public var processedSizeBytes: Swift.Int?
        /// Values for the S3 bucket the source file is imported from. Includes bucket name (required), key prefix (optional) and bucket account owner ID (optional).
        public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
        /// The time when this import task started.
        public var startTime: ClientRuntime.Date?
        /// The Amazon Resource Number (ARN) of the table being imported into.
        public var tableArn: Swift.String?
        /// The parameters for the new table that is being imported into.
        public var tableCreationParameters: DynamoDBClientTypes.TableCreationParameters?
        /// The table id corresponding to the table created by import table process.
        public var tableId: Swift.String?

        public init (
            clientToken: Swift.String? = nil,
            cloudWatchLogGroupArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            errorCount: Swift.Int = 0,
            failureCode: Swift.String? = nil,
            failureMessage: Swift.String? = nil,
            importArn: Swift.String? = nil,
            importStatus: DynamoDBClientTypes.ImportStatus? = nil,
            importedItemCount: Swift.Int = 0,
            inputCompressionType: DynamoDBClientTypes.InputCompressionType? = nil,
            inputFormat: DynamoDBClientTypes.InputFormat? = nil,
            inputFormatOptions: DynamoDBClientTypes.InputFormatOptions? = nil,
            processedItemCount: Swift.Int = 0,
            processedSizeBytes: Swift.Int? = nil,
            s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
            startTime: ClientRuntime.Date? = nil,
            tableArn: Swift.String? = nil,
            tableCreationParameters: DynamoDBClientTypes.TableCreationParameters? = nil,
            tableId: Swift.String? = nil
        )
        {
            self.clientToken = clientToken
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.endTime = endTime
            self.errorCount = errorCount
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.importArn = importArn
            self.importStatus = importStatus
            self.importedItemCount = importedItemCount
            self.inputCompressionType = inputCompressionType
            self.inputFormat = inputFormat
            self.inputFormatOptions = inputFormatOptions
            self.processedItemCount = processedItemCount
            self.processedSizeBytes = processedSizeBytes
            self.s3BucketSource = s3BucketSource
            self.startTime = startTime
            self.tableArn = tableArn
            self.tableCreationParameters = tableCreationParameters
            self.tableId = tableId
        }
    }

}

extension ImportTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case inputCompressionType = "InputCompressionType"
        case inputFormat = "InputFormat"
        case inputFormatOptions = "InputFormatOptions"
        case s3BucketSource = "S3BucketSource"
        case tableCreationParameters = "TableCreationParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let inputCompressionType = self.inputCompressionType {
            try encodeContainer.encode(inputCompressionType.rawValue, forKey: .inputCompressionType)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let inputFormatOptions = self.inputFormatOptions {
            try encodeContainer.encode(inputFormatOptions, forKey: .inputFormatOptions)
        }
        if let s3BucketSource = self.s3BucketSource {
            try encodeContainer.encode(s3BucketSource, forKey: .s3BucketSource)
        }
        if let tableCreationParameters = self.tableCreationParameters {
            try encodeContainer.encode(tableCreationParameters, forKey: .tableCreationParameters)
        }
    }
}

extension ImportTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportTableInput: Swift.Equatable {
    /// Providing a ClientToken makes the call to ImportTableInput idempotent, meaning that multiple identical calls have the same effect as one single call. A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
    public var clientToken: Swift.String?
    /// Type of compression to be used on the input coming from the imported table.
    public var inputCompressionType: DynamoDBClientTypes.InputCompressionType?
    /// The format of the source data. Valid values for ImportFormat are CSV, DYNAMODB_JSON or ION.
    /// This member is required.
    public var inputFormat: DynamoDBClientTypes.InputFormat?
    /// Additional properties that specify how the input is formatted,
    public var inputFormatOptions: DynamoDBClientTypes.InputFormatOptions?
    /// The S3 bucket that provides the source for the import.
    /// This member is required.
    public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
    /// Parameters for the table to import the data into.
    /// This member is required.
    public var tableCreationParameters: DynamoDBClientTypes.TableCreationParameters?

    public init (
        clientToken: Swift.String? = nil,
        inputCompressionType: DynamoDBClientTypes.InputCompressionType? = nil,
        inputFormat: DynamoDBClientTypes.InputFormat? = nil,
        inputFormatOptions: DynamoDBClientTypes.InputFormatOptions? = nil,
        s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
        tableCreationParameters: DynamoDBClientTypes.TableCreationParameters? = nil
    )
    {
        self.clientToken = clientToken
        self.inputCompressionType = inputCompressionType
        self.inputFormat = inputFormat
        self.inputFormatOptions = inputFormatOptions
        self.s3BucketSource = s3BucketSource
        self.tableCreationParameters = tableCreationParameters
    }
}

struct ImportTableInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let s3BucketSource: DynamoDBClientTypes.S3BucketSource?
    let inputFormat: DynamoDBClientTypes.InputFormat?
    let inputFormatOptions: DynamoDBClientTypes.InputFormatOptions?
    let inputCompressionType: DynamoDBClientTypes.InputCompressionType?
    let tableCreationParameters: DynamoDBClientTypes.TableCreationParameters?
}

extension ImportTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case inputCompressionType = "InputCompressionType"
        case inputFormat = "InputFormat"
        case inputFormatOptions = "InputFormatOptions"
        case s3BucketSource = "S3BucketSource"
        case tableCreationParameters = "TableCreationParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketSourceDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.S3BucketSource.self, forKey: .s3BucketSource)
        s3BucketSource = s3BucketSourceDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let inputFormatOptionsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputFormatOptions.self, forKey: .inputFormatOptions)
        inputFormatOptions = inputFormatOptionsDecoded
        let inputCompressionTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.InputCompressionType.self, forKey: .inputCompressionType)
        inputCompressionType = inputCompressionTypeDecoded
        let tableCreationParametersDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableCreationParameters.self, forKey: .tableCreationParameters)
        tableCreationParameters = tableCreationParametersDecoded
    }
}

extension ImportTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ImportConflictException" : self = .importConflictException(try ImportConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ImportTableOutputError: Swift.Error, Swift.Equatable {
    case importConflictException(ImportConflictException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importTableDescription = output.importTableDescription
        } else {
            self.importTableDescription = nil
        }
    }
}

public struct ImportTableOutputResponse: Swift.Equatable {
    /// Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered.
    /// This member is required.
    public var importTableDescription: DynamoDBClientTypes.ImportTableDescription?

    public init (
        importTableDescription: DynamoDBClientTypes.ImportTableDescription? = nil
    )
    {
        self.importTableDescription = importTableDescription
    }
}

struct ImportTableOutputResponseBody: Swift.Equatable {
    let importTableDescription: DynamoDBClientTypes.ImportTableDescription?
}

extension ImportTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importTableDescription = "ImportTableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importTableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ImportTableDescription.self, forKey: .importTableDescription)
        importTableDescription = importTableDescriptionDecoded
    }
}

extension IndexNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IndexNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation tried to access a nonexistent index.
public struct IndexNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IndexNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IndexNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum IndexStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IndexStatus(rawValue: rawValue) ?? IndexStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum InputCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gzip
        case `none`
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputCompressionType] {
            return [
                .gzip,
                .none,
                .zstd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputCompressionType(rawValue: rawValue) ?? InputCompressionType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum InputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case dynamodbJson
        case ion
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFormat] {
            return [
                .csv,
                .dynamodbJson,
                .ion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .dynamodbJson: return "DYNAMODB_JSON"
            case .ion: return "ION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputFormat(rawValue: rawValue) ?? InputFormat.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.InputFormatOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csv = "Csv"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csv = self.csv {
            try encodeContainer.encode(csv, forKey: .csv)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let csvDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.CsvOptions.self, forKey: .csv)
        csv = csvDecoded
    }
}

extension DynamoDBClientTypes {
    /// The format options for the data that was imported into the target table. There is one value, CsvOption.
    public struct InputFormatOptions: Swift.Equatable {
        /// The options for imported source files in CSV format. The values are Delimiter and HeaderList.
        public var csv: DynamoDBClientTypes.CsvOptions?

        public init (
            csv: DynamoDBClientTypes.CsvOptions? = nil
        )
        {
            self.csv = csv
        }
    }

}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred on the server side.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The server encountered an internal error trying to fulfill the request.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEndpointException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidEndpointExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct InvalidEndpointException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEndpointExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidEndpointExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExportTimeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidExportTimeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified ExportTime is outside of the point in time recovery window.
public struct InvalidExportTimeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExportTimeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidExportTimeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRestoreTimeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRestoreTimeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid restore time was specified. RestoreDateTime must be between EarliestRestorableDateTime and LatestRestorableDateTime.
public struct InvalidRestoreTimeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRestoreTimeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRestoreTimeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ItemCollectionMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case itemCollectionKey = "ItemCollectionKey"
        case sizeEstimateRangeGB = "SizeEstimateRangeGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let itemCollectionKey = itemCollectionKey {
            var itemCollectionKeyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .itemCollectionKey)
            for (dictKey0, itemCollectionKeyAttributeMap0) in itemCollectionKey {
                try itemCollectionKeyContainer.encode(itemCollectionKeyAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sizeEstimateRangeGB = sizeEstimateRangeGB {
            var sizeEstimateRangeGBContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sizeEstimateRangeGB)
            for itemcollectionsizeestimatebound0 in sizeEstimateRangeGB {
                try sizeEstimateRangeGBContainer.encode(itemcollectionsizeestimatebound0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemCollectionKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .itemCollectionKey)
        var itemCollectionKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemCollectionKeyContainer = itemCollectionKeyContainer {
            itemCollectionKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemCollectionKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    itemCollectionKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        itemCollectionKey = itemCollectionKeyDecoded0
        let sizeEstimateRangeGBContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .sizeEstimateRangeGB)
        var sizeEstimateRangeGBDecoded0:[Swift.Double]? = nil
        if let sizeEstimateRangeGBContainer = sizeEstimateRangeGBContainer {
            sizeEstimateRangeGBDecoded0 = [Swift.Double]()
            for double0 in sizeEstimateRangeGBContainer {
                if let double0 = double0 {
                    sizeEstimateRangeGBDecoded0?.append(double0)
                }
            }
        }
        sizeEstimateRangeGB = sizeEstimateRangeGBDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Information about item collections, if any, that were affected by the operation. ItemCollectionMetrics is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.
    public struct ItemCollectionMetrics: Swift.Equatable {
        /// The partition key value of the item collection. This value is the same as the partition key value of the item.
        public var itemCollectionKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public var sizeEstimateRangeGB: [Swift.Double]?

        public init (
            itemCollectionKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            sizeEstimateRangeGB: [Swift.Double]? = nil
        )
        {
            self.itemCollectionKey = itemCollectionKey
            self.sizeEstimateRangeGB = sizeEstimateRangeGB
        }
    }

}

extension ItemCollectionSizeLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ItemCollectionSizeLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.
public struct ItemCollectionSizeLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The total size of an item collection has exceeded the maximum limit of 10 gigabytes.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ItemCollectionSizeLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ItemCollectionSizeLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ItemResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, attributeMap0) in item {
                try itemContainer.encode(attributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Details for the requested item.
    public struct ItemResponse: Swift.Equatable {
        /// Map of attribute data consisting of the data type and attribute value.
        public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?

        public init (
            item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.item = item
        }
    }

}

extension DynamoDBClientTypes.KeySchemaElement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case keyType = "KeyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let keyType = self.keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index. A KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key. A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
    public struct KeySchemaElement: Swift.Equatable {
        /// The name of a key attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The role that this key attribute will assume:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keyType: DynamoDBClientTypes.KeyType?

        public init (
            attributeName: Swift.String? = nil,
            keyType: DynamoDBClientTypes.KeyType? = nil
        )
        {
            self.attributeName = attributeName
            self.keyType = keyType
        }
    }

}

extension DynamoDBClientTypes {
    public enum KeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hash
        case range
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyType] {
            return [
                .hash,
                .range,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hash: return "HASH"
            case .range: return "RANGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyType(rawValue: rawValue) ?? KeyType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.KeysAndAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case keys = "Keys"
        case projectionExpression = "ProjectionExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributename0 in attributesToGet {
                try attributesToGetContainer.encode(attributename0)
            }
        }
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for key0 in keys {
                var key0Container = keysContainer.nestedContainer(keyedBy: ClientRuntime.Key.self)
                for (dictKey1, key1) in key0 {
                    try key0Container.encode(key1, forKey: ClientRuntime.Key(stringValue: dictKey1))
                }
            }
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([[Swift.String: DynamoDBClientTypes.AttributeValue?]?].self, forKey: .keys)
        var keysDecoded0:[[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [[Swift.String:DynamoDBClientTypes.AttributeValue]]()
            for map0 in keysContainer {
                var keysContainerDecoded0: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
                if let map0 = map0 {
                    keysContainerDecoded0 = [Swift.String: DynamoDBClientTypes.AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            keysContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let keysContainerDecoded0 = keysContainerDecoded0 {
                    keysDecoded0?.append(keysContainerDecoded0)
                }
            }
        }
        keys = keysDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents a set of primary keys and, for each key, the attributes to retrieve from the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide both the partition key and the sort key.
    public struct KeysAndAttributes: Swift.Equatable {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [Legacy Conditional Parameters](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html) in the Amazon DynamoDB Developer Guide.
        public var attributesToGet: [Swift.String]?
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public var consistentRead: Swift.Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
        ///
        /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
        ///
        /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
        ///
        /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
        ///
        ///
        /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
        ///
        /// * Percentile
        ///
        ///
        /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
        ///
        /// * {"#P":"Percentile"}
        ///
        ///
        /// You could then use this substitution in an expression, as in this example:
        ///
        /// * #P = :val
        ///
        ///
        /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// The primary key attribute values that define the items and the attributes associated with the items.
        /// This member is required.
        public var keys: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
        public var projectionExpression: Swift.String?

        public init (
            attributesToGet: [Swift.String]? = nil,
            consistentRead: Swift.Bool? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            keys: [[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil,
            projectionExpression: Swift.String? = nil
        )
        {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.keys = keys
            self.projectionExpression = projectionExpression
        }
    }

}

extension DynamoDBClientTypes.KinesisDataStreamDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationStatus = "DestinationStatus"
        case destinationStatusDescription = "DestinationStatusDescription"
        case streamArn = "StreamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationStatus = self.destinationStatus {
            try encodeContainer.encode(destinationStatus.rawValue, forKey: .destinationStatus)
        }
        if let destinationStatusDescription = self.destinationStatusDescription {
            try encodeContainer.encode(destinationStatusDescription, forKey: .destinationStatusDescription)
        }
        if let streamArn = self.streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
        let destinationStatusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationStatusDescription)
        destinationStatusDescription = destinationStatusDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Describes a Kinesis data stream destination.
    public struct KinesisDataStreamDestination: Swift.Equatable {
        /// The current status of replication.
        public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
        /// The human-readable string that corresponds to the replica status.
        public var destinationStatusDescription: Swift.String?
        /// The ARN for a specific Kinesis data stream.
        public var streamArn: Swift.String?

        public init (
            destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
            destinationStatusDescription: Swift.String? = nil,
            streamArn: Swift.String? = nil
        )
        {
            self.destinationStatus = destinationStatus
            self.destinationStatusDescription = destinationStatusDescription
            self.streamArn = streamArn
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is no limit to the number of daily on-demand backups that can be taken. For most purposes, up to 500 simultaneous table operations are allowed per account. These operations include CreateTable, UpdateTable, DeleteTable,UpdateTimeToLive, RestoreTableFromBackup, and RestoreTableToPointInTime. When you are creating a table with one or more secondary indexes, you can have up to 250 such requests running at a time. However, if the table or index specifications are complex, then DynamoDB might temporarily reduce the number of concurrent operations. When importing into DynamoDB, up to 50 simultaneous import table operations are allowed per account. There is a soft account quota of 2,500 tables.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Too many operations for a given subscriber.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupType = self.backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let exclusiveStartBackupArn = self.exclusiveStartBackupArn {
            try encodeContainer.encode(exclusiveStartBackupArn, forKey: .exclusiveStartBackupArn)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeRangeLowerBound = self.timeRangeLowerBound {
            try encodeContainer.encodeTimestamp(timeRangeLowerBound, format: .epochSeconds, forKey: .timeRangeLowerBound)
        }
        if let timeRangeUpperBound = self.timeRangeUpperBound {
            try encodeContainer.encodeTimestamp(timeRangeUpperBound, format: .epochSeconds, forKey: .timeRangeUpperBound)
        }
    }
}

extension ListBackupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBackupsInput: Swift.Equatable {
    /// The backups from the table specified by BackupType are listed. Where BackupType can be:
    ///
    /// * USER - On-demand backup created by you. (The default setting if no other backup types are specified.)
    ///
    /// * SYSTEM - On-demand backup automatically created by DynamoDB.
    ///
    /// * ALL - All types of on-demand backups (USER and SYSTEM).
    public var backupType: DynamoDBClientTypes.BackupTypeFilter?
    /// LastEvaluatedBackupArn is the Amazon Resource Name (ARN) of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.
    public var exclusiveStartBackupArn: Swift.String?
    /// Maximum number of backups to return at once.
    public var limit: Swift.Int?
    /// The backups from the table specified by TableName are listed.
    public var tableName: Swift.String?
    /// Only backups created after this time are listed. TimeRangeLowerBound is inclusive.
    public var timeRangeLowerBound: ClientRuntime.Date?
    /// Only backups created before this time are listed. TimeRangeUpperBound is exclusive.
    public var timeRangeUpperBound: ClientRuntime.Date?

    public init (
        backupType: DynamoDBClientTypes.BackupTypeFilter? = nil,
        exclusiveStartBackupArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        tableName: Swift.String? = nil,
        timeRangeLowerBound: ClientRuntime.Date? = nil,
        timeRangeUpperBound: ClientRuntime.Date? = nil
    )
    {
        self.backupType = backupType
        self.exclusiveStartBackupArn = exclusiveStartBackupArn
        self.limit = limit
        self.tableName = tableName
        self.timeRangeLowerBound = timeRangeLowerBound
        self.timeRangeUpperBound = timeRangeUpperBound
    }
}

struct ListBackupsInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let limit: Swift.Int?
    let timeRangeLowerBound: ClientRuntime.Date?
    let timeRangeUpperBound: ClientRuntime.Date?
    let exclusiveStartBackupArn: Swift.String?
    let backupType: DynamoDBClientTypes.BackupTypeFilter?
}

extension ListBackupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let timeRangeLowerBoundDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timeRangeLowerBound)
        timeRangeLowerBound = timeRangeLowerBoundDecoded
        let timeRangeUpperBoundDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timeRangeUpperBound)
        timeRangeUpperBound = timeRangeUpperBoundDecoded
        let exclusiveStartBackupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartBackupArn)
        exclusiveStartBackupArn = exclusiveStartBackupArnDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BackupTypeFilter.self, forKey: .backupType)
        backupType = backupTypeDecoded
    }
}

extension ListBackupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBackupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListBackupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBackupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListBackupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.backupSummaries = output.backupSummaries
            self.lastEvaluatedBackupArn = output.lastEvaluatedBackupArn
        } else {
            self.backupSummaries = nil
            self.lastEvaluatedBackupArn = nil
        }
    }
}

public struct ListBackupsOutputResponse: Swift.Equatable {
    /// List of BackupSummary objects.
    public var backupSummaries: [DynamoDBClientTypes.BackupSummary]?
    /// The ARN of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results. If LastEvaluatedBackupArn is empty, then the last page of results has been processed and there are no more results to be retrieved. If LastEvaluatedBackupArn is not empty, this may or may not indicate that there is more data to be returned. All results are guaranteed to have been returned if and only if no value for LastEvaluatedBackupArn is returned.
    public var lastEvaluatedBackupArn: Swift.String?

    public init (
        backupSummaries: [DynamoDBClientTypes.BackupSummary]? = nil,
        lastEvaluatedBackupArn: Swift.String? = nil
    )
    {
        self.backupSummaries = backupSummaries
        self.lastEvaluatedBackupArn = lastEvaluatedBackupArn
    }
}

struct ListBackupsOutputResponseBody: Swift.Equatable {
    let backupSummaries: [DynamoDBClientTypes.BackupSummary]?
    let lastEvaluatedBackupArn: Swift.String?
}

extension ListBackupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupSummaries = "BackupSummaries"
        case lastEvaluatedBackupArn = "LastEvaluatedBackupArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupSummariesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.BackupSummary?].self, forKey: .backupSummaries)
        var backupSummariesDecoded0:[DynamoDBClientTypes.BackupSummary]? = nil
        if let backupSummariesContainer = backupSummariesContainer {
            backupSummariesDecoded0 = [DynamoDBClientTypes.BackupSummary]()
            for structure0 in backupSummariesContainer {
                if let structure0 = structure0 {
                    backupSummariesDecoded0?.append(structure0)
                }
            }
        }
        backupSummaries = backupSummariesDecoded0
        let lastEvaluatedBackupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedBackupArn)
        lastEvaluatedBackupArn = lastEvaluatedBackupArnDecoded
    }
}

extension ListContributorInsightsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension ListContributorInsightsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListContributorInsightsInput: Swift.Equatable {
    /// Maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// A token to for the desired page, if there is one.
    public var nextToken: Swift.String?
    /// The name of the table.
    public var tableName: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableName = tableName
    }
}

struct ListContributorInsightsInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int
}

extension ListContributorInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}

extension ListContributorInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContributorInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListContributorInsightsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContributorInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contributorInsightsSummaries = output.contributorInsightsSummaries
            self.nextToken = output.nextToken
        } else {
            self.contributorInsightsSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListContributorInsightsOutputResponse: Swift.Equatable {
    /// A list of ContributorInsightsSummary.
    public var contributorInsightsSummaries: [DynamoDBClientTypes.ContributorInsightsSummary]?
    /// A token to go to the next page if there is one.
    public var nextToken: Swift.String?

    public init (
        contributorInsightsSummaries: [DynamoDBClientTypes.ContributorInsightsSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contributorInsightsSummaries = contributorInsightsSummaries
        self.nextToken = nextToken
    }
}

struct ListContributorInsightsOutputResponseBody: Swift.Equatable {
    let contributorInsightsSummaries: [DynamoDBClientTypes.ContributorInsightsSummary]?
    let nextToken: Swift.String?
}

extension ListContributorInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsSummaries = "ContributorInsightsSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contributorInsightsSummariesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ContributorInsightsSummary?].self, forKey: .contributorInsightsSummaries)
        var contributorInsightsSummariesDecoded0:[DynamoDBClientTypes.ContributorInsightsSummary]? = nil
        if let contributorInsightsSummariesContainer = contributorInsightsSummariesContainer {
            contributorInsightsSummariesDecoded0 = [DynamoDBClientTypes.ContributorInsightsSummary]()
            for structure0 in contributorInsightsSummariesContainer {
                if let structure0 = structure0 {
                    contributorInsightsSummariesDecoded0?.append(structure0)
                }
            }
        }
        contributorInsightsSummaries = contributorInsightsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExportsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}

extension ListExportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExportsInput: Swift.Equatable {
    /// Maximum number of results to return per page.
    public var maxResults: Swift.Int?
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListExports. When provided in this manner, the API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) associated with the exported table.
    public var tableArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableArn = tableArn
    }
}

struct ListExportsInputBody: Swift.Equatable {
    let tableArn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListExportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableArn = "TableArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListExportsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListExportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportSummaries = output.exportSummaries
            self.nextToken = output.nextToken
        } else {
            self.exportSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListExportsOutputResponse: Swift.Equatable {
    /// A list of ExportSummary objects.
    public var exportSummaries: [DynamoDBClientTypes.ExportSummary]?
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListExports again, with NextToken set to this value.
    public var nextToken: Swift.String?

    public init (
        exportSummaries: [DynamoDBClientTypes.ExportSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportSummaries = exportSummaries
        self.nextToken = nextToken
    }
}

struct ListExportsOutputResponseBody: Swift.Equatable {
    let exportSummaries: [DynamoDBClientTypes.ExportSummary]?
    let nextToken: Swift.String?
}

extension ListExportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportSummaries = "ExportSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportSummariesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ExportSummary?].self, forKey: .exportSummaries)
        var exportSummariesDecoded0:[DynamoDBClientTypes.ExportSummary]? = nil
        if let exportSummariesContainer = exportSummariesContainer {
            exportSummariesDecoded0 = [DynamoDBClientTypes.ExportSummary]()
            for structure0 in exportSummariesContainer {
                if let structure0 = structure0 {
                    exportSummariesDecoded0?.append(structure0)
                }
            }
        }
        exportSummaries = exportSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGlobalTablesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
        case limit = "Limit"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartGlobalTableName = self.exclusiveStartGlobalTableName {
            try encodeContainer.encode(exclusiveStartGlobalTableName, forKey: .exclusiveStartGlobalTableName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }
}

extension ListGlobalTablesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGlobalTablesInput: Swift.Equatable {
    /// The first global table name that this operation will evaluate.
    public var exclusiveStartGlobalTableName: Swift.String?
    /// The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100. If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
    public var limit: Swift.Int?
    /// Lists the global tables in a specific Region.
    public var regionName: Swift.String?

    public init (
        exclusiveStartGlobalTableName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName
        self.limit = limit
        self.regionName = regionName
    }
}

struct ListGlobalTablesInputBody: Swift.Equatable {
    let exclusiveStartGlobalTableName: Swift.String?
    let limit: Swift.Int?
    let regionName: Swift.String?
}

extension ListGlobalTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
        case limit = "Limit"
        case regionName = "RegionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exclusiveStartGlobalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartGlobalTableName)
        exclusiveStartGlobalTableName = exclusiveStartGlobalTableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension ListGlobalTablesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGlobalTablesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGlobalTablesOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGlobalTablesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGlobalTablesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTables = output.globalTables
            self.lastEvaluatedGlobalTableName = output.lastEvaluatedGlobalTableName
        } else {
            self.globalTables = nil
            self.lastEvaluatedGlobalTableName = nil
        }
    }
}

public struct ListGlobalTablesOutputResponse: Swift.Equatable {
    /// List of global table names.
    public var globalTables: [DynamoDBClientTypes.GlobalTable]?
    /// Last evaluated global table name.
    public var lastEvaluatedGlobalTableName: Swift.String?

    public init (
        globalTables: [DynamoDBClientTypes.GlobalTable]? = nil,
        lastEvaluatedGlobalTableName: Swift.String? = nil
    )
    {
        self.globalTables = globalTables
        self.lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableName
    }
}

struct ListGlobalTablesOutputResponseBody: Swift.Equatable {
    let globalTables: [DynamoDBClientTypes.GlobalTable]?
    let lastEvaluatedGlobalTableName: Swift.String?
}

extension ListGlobalTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTables = "GlobalTables"
        case lastEvaluatedGlobalTableName = "LastEvaluatedGlobalTableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTablesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalTable?].self, forKey: .globalTables)
        var globalTablesDecoded0:[DynamoDBClientTypes.GlobalTable]? = nil
        if let globalTablesContainer = globalTablesContainer {
            globalTablesDecoded0 = [DynamoDBClientTypes.GlobalTable]()
            for structure0 in globalTablesContainer {
                if let structure0 = structure0 {
                    globalTablesDecoded0?.append(structure0)
                }
            }
        }
        globalTables = globalTablesDecoded0
        let lastEvaluatedGlobalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedGlobalTableName)
        lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableNameDecoded
    }
}

extension ListImportsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pageSize = "PageSize"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pageSize = self.pageSize {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}

extension ListImportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListImportsInput: Swift.Equatable {
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListImports. When provided in this manner, the API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The number of ImportSummary objects returned in a single page.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) associated with the table that was imported to.
    public var tableArn: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.tableArn = tableArn
    }
}

struct ListImportsInputBody: Swift.Equatable {
    let tableArn: Swift.String?
    let pageSize: Swift.Int?
    let nextToken: Swift.String?
}

extension ListImportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pageSize = "PageSize"
        case tableArn = "TableArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListImportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListImportsOutputError: Swift.Error, Swift.Equatable {
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListImportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importSummaryList = output.importSummaryList
            self.nextToken = output.nextToken
        } else {
            self.importSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListImportsOutputResponse: Swift.Equatable {
    /// A list of ImportSummary objects.
    public var importSummaryList: [DynamoDBClientTypes.ImportSummary]?
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListImports again, with NextToken set to this value.
    public var nextToken: Swift.String?

    public init (
        importSummaryList: [DynamoDBClientTypes.ImportSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.importSummaryList = importSummaryList
        self.nextToken = nextToken
    }
}

struct ListImportsOutputResponseBody: Swift.Equatable {
    let importSummaryList: [DynamoDBClientTypes.ImportSummary]?
    let nextToken: Swift.String?
}

extension ListImportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importSummaryList = "ImportSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importSummaryListContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ImportSummary?].self, forKey: .importSummaryList)
        var importSummaryListDecoded0:[DynamoDBClientTypes.ImportSummary]? = nil
        if let importSummaryListContainer = importSummaryListContainer {
            importSummaryListDecoded0 = [DynamoDBClientTypes.ImportSummary]()
            for structure0 in importSummaryListContainer {
                if let structure0 = structure0 {
                    importSummaryListDecoded0?.append(structure0)
                }
            }
        }
        importSummaryList = importSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTablesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartTableName = "ExclusiveStartTableName"
        case limit = "Limit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartTableName = self.exclusiveStartTableName {
            try encodeContainer.encode(exclusiveStartTableName, forKey: .exclusiveStartTableName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
    }
}

extension ListTablesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListTables operation.
public struct ListTablesInput: Swift.Equatable {
    /// The first table name that this operation will evaluate. Use the value that was returned for LastEvaluatedTableName in a previous operation, so that you can obtain the next page of results.
    public var exclusiveStartTableName: Swift.String?
    /// A maximum number of table names to return. If this parameter is not specified, the limit is 100.
    public var limit: Swift.Int?

    public init (
        exclusiveStartTableName: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.exclusiveStartTableName = exclusiveStartTableName
        self.limit = limit
    }
}

struct ListTablesInputBody: Swift.Equatable {
    let exclusiveStartTableName: Swift.String?
    let limit: Swift.Int?
}

extension ListTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartTableName = "ExclusiveStartTableName"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exclusiveStartTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartTableName)
        exclusiveStartTableName = exclusiveStartTableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListTablesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTablesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTablesOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTablesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTablesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lastEvaluatedTableName = output.lastEvaluatedTableName
            self.tableNames = output.tableNames
        } else {
            self.lastEvaluatedTableName = nil
            self.tableNames = nil
        }
    }
}

/// Represents the output of a ListTables operation.
public struct ListTablesOutputResponse: Swift.Equatable {
    /// The name of the last table in the current page of results. Use this value as the ExclusiveStartTableName in a new request to obtain the next page of results, until all the table names are returned. If you do not receive a LastEvaluatedTableName value in the response, this means that there are no more table names to be retrieved.
    public var lastEvaluatedTableName: Swift.String?
    /// The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. If LastEvaluatedTableName also appears in the output, you can use this value as the ExclusiveStartTableName parameter in a subsequent ListTables request and obtain the next page of results.
    public var tableNames: [Swift.String]?

    public init (
        lastEvaluatedTableName: Swift.String? = nil,
        tableNames: [Swift.String]? = nil
    )
    {
        self.lastEvaluatedTableName = lastEvaluatedTableName
        self.tableNames = tableNames
    }
}

struct ListTablesOutputResponseBody: Swift.Equatable {
    let tableNames: [Swift.String]?
    let lastEvaluatedTableName: Swift.String?
}

extension ListTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastEvaluatedTableName = "LastEvaluatedTableName"
        case tableNames = "TableNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tableNames)
        var tableNamesDecoded0:[Swift.String]? = nil
        if let tableNamesContainer = tableNamesContainer {
            tableNamesDecoded0 = [Swift.String]()
            for string0 in tableNamesContainer {
                if let string0 = string0 {
                    tableNamesDecoded0?.append(string0)
                }
            }
        }
        tableNames = tableNamesDecoded0
        let lastEvaluatedTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedTableName)
        lastEvaluatedTableName = lastEvaluatedTableNameDecoded
    }
}

extension ListTagsOfResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsOfResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsOfResourceInput: Swift.Equatable {
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsOfResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
}

extension ListTagsOfResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsOfResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOfResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsOfResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOfResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsOfResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsOfResourceOutputResponse: Swift.Equatable {
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.
    public var nextToken: Swift.String?
    /// The tags currently associated with the Amazon DynamoDB resource.
    public var tags: [DynamoDBClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsOfResourceOutputResponseBody: Swift.Equatable {
    let tags: [DynamoDBClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsOfResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DynamoDBClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DynamoDBClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DynamoDBClientTypes.LocalSecondaryIndex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index.
    public struct LocalSecondaryIndex: Swift.Equatable {
        /// The name of the local secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?

        public init (
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes.LocalSecondaryIndexDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case indexSizeBytes = "IndexSizeBytes"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexArn = self.indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexSizeBytes = self.indexSizeBytes {
            try encodeContainer.encode(indexSizeBytes, forKey: .indexSizeBytes)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
        let indexSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .indexSizeBytes)
        indexSizeBytes = indexSizeBytesDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let indexArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index.
    public struct LocalSecondaryIndexDescription: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public var indexArn: Swift.String?
        /// Represents the name of the local secondary index.
        public var indexName: Swift.String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var indexSizeBytes: Swift.Int?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?

        public init (
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexSizeBytes: Swift.Int? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes.LocalSecondaryIndexInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let projection = self.projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Projection.self, forKey: .projection)
        projection = projectionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index for the table when the backup was created.
    public struct LocalSecondaryIndexInfo: Swift.Equatable {
        /// Represents the name of the local secondary index.
        public var indexName: Swift.String?
        /// The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?

        public init (
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes.ParameterizedStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for attributevalue0 in parameters {
                try parametersContainer.encode(attributevalue0)
            }
        }
        if let statement = self.statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[DynamoDBClientTypes.AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [DynamoDBClientTypes.AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents a PartiQL statment that uses parameters.
    public struct ParameterizedStatement: Swift.Equatable {
        /// The parameter values.
        public var parameters: [DynamoDBClientTypes.AttributeValue]?
        /// A PartiQL statment that uses parameters.
        /// This member is required.
        public var statement: Swift.String?

        public init (
            parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
            statement: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.statement = statement
        }
    }

}

extension DynamoDBClientTypes.PointInTimeRecoveryDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case earliestRestorableDateTime = "EarliestRestorableDateTime"
        case latestRestorableDateTime = "LatestRestorableDateTime"
        case pointInTimeRecoveryStatus = "PointInTimeRecoveryStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let earliestRestorableDateTime = self.earliestRestorableDateTime {
            try encodeContainer.encodeTimestamp(earliestRestorableDateTime, format: .epochSeconds, forKey: .earliestRestorableDateTime)
        }
        if let latestRestorableDateTime = self.latestRestorableDateTime {
            try encodeContainer.encodeTimestamp(latestRestorableDateTime, format: .epochSeconds, forKey: .latestRestorableDateTime)
        }
        if let pointInTimeRecoveryStatus = self.pointInTimeRecoveryStatus {
            try encodeContainer.encode(pointInTimeRecoveryStatus.rawValue, forKey: .pointInTimeRecoveryStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pointInTimeRecoveryStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.PointInTimeRecoveryStatus.self, forKey: .pointInTimeRecoveryStatus)
        pointInTimeRecoveryStatus = pointInTimeRecoveryStatusDecoded
        let earliestRestorableDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .earliestRestorableDateTime)
        earliestRestorableDateTime = earliestRestorableDateTimeDecoded
        let latestRestorableDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestRestorableDateTime)
        latestRestorableDateTime = latestRestorableDateTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// The description of the point in time settings applied to the table.
    public struct PointInTimeRecoveryDescription: Swift.Equatable {
        /// Specifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.
        public var earliestRestorableDateTime: ClientRuntime.Date?
        /// LatestRestorableDateTime is typically 5 minutes before the current time.
        public var latestRestorableDateTime: ClientRuntime.Date?
        /// The current state of point in time recovery:
        ///
        /// * ENABLED - Point in time recovery is enabled.
        ///
        /// * DISABLED - Point in time recovery is disabled.
        public var pointInTimeRecoveryStatus: DynamoDBClientTypes.PointInTimeRecoveryStatus?

        public init (
            earliestRestorableDateTime: ClientRuntime.Date? = nil,
            latestRestorableDateTime: ClientRuntime.Date? = nil,
            pointInTimeRecoveryStatus: DynamoDBClientTypes.PointInTimeRecoveryStatus? = nil
        )
        {
            self.earliestRestorableDateTime = earliestRestorableDateTime
            self.latestRestorableDateTime = latestRestorableDateTime
            self.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus
        }
    }

}

extension DynamoDBClientTypes.PointInTimeRecoverySpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pointInTimeRecoveryEnabled = "PointInTimeRecoveryEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pointInTimeRecoveryEnabled = self.pointInTimeRecoveryEnabled {
            try encodeContainer.encode(pointInTimeRecoveryEnabled, forKey: .pointInTimeRecoveryEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pointInTimeRecoveryEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pointInTimeRecoveryEnabled)
        pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabledDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable point in time recovery.
    public struct PointInTimeRecoverySpecification: Swift.Equatable {
        /// Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var pointInTimeRecoveryEnabled: Swift.Bool?

        public init (
            pointInTimeRecoveryEnabled: Swift.Bool? = nil
        )
        {
            self.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled
        }
    }

}

extension DynamoDBClientTypes {
    public enum PointInTimeRecoveryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PointInTimeRecoveryStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PointInTimeRecoveryStatus(rawValue: rawValue) ?? PointInTimeRecoveryStatus.sdkUnknown(rawValue)
        }
    }
}

extension PointInTimeRecoveryUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PointInTimeRecoveryUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Point in time recovery has not yet been enabled for this source table.
public struct PointInTimeRecoveryUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PointInTimeRecoveryUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PointInTimeRecoveryUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.Projection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nonKeyAttributes = "NonKeyAttributes"
        case projectionType = "ProjectionType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nonKeyAttributes = nonKeyAttributes {
            var nonKeyAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nonKeyAttributes)
            for nonkeyattributename0 in nonKeyAttributes {
                try nonKeyAttributesContainer.encode(nonkeyattributename0)
            }
        }
        if let projectionType = self.projectionType {
            try encodeContainer.encode(projectionType.rawValue, forKey: .projectionType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectionTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProjectionType.self, forKey: .projectionType)
        projectionType = projectionTypeDecoded
        let nonKeyAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nonKeyAttributes)
        var nonKeyAttributesDecoded0:[Swift.String]? = nil
        if let nonKeyAttributesContainer = nonKeyAttributesContainer {
            nonKeyAttributesDecoded0 = [Swift.String]()
            for string0 in nonKeyAttributesContainer {
                if let string0 = string0 {
                    nonKeyAttributesDecoded0?.append(string0)
                }
            }
        }
        nonKeyAttributes = nonKeyAttributesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
    public struct Projection: Swift.Equatable {
        /// Represents the non-key attribute names which will be projected into the index. For local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        public var nonKeyAttributes: [Swift.String]?
        /// The set of attributes that are projected into the index:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        public var projectionType: DynamoDBClientTypes.ProjectionType?

        public init (
            nonKeyAttributes: [Swift.String]? = nil,
            projectionType: DynamoDBClientTypes.ProjectionType? = nil
        )
        {
            self.nonKeyAttributes = nonKeyAttributes
            self.projectionType = projectionType
        }
    }

}

extension DynamoDBClientTypes {
    public enum ProjectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case include
        case keysOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectionType] {
            return [
                .all,
                .include,
                .keysOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .include: return "INCLUDE"
            case .keysOnly: return "KEYS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectionType(rawValue: rawValue) ?? ProjectionType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ProvisionedThroughput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    public struct ProvisionedThroughput: Swift.Equatable {
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        /// This member is required.
        public var readCapacityUnits: Swift.Int?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        /// This member is required.
        public var writeCapacityUnits: Swift.Int?

        public init (
            readCapacityUnits: Swift.Int? = nil,
            writeCapacityUnits: Swift.Int? = nil
        )
        {
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes.ProvisionedThroughputDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastDecreaseDateTime = "LastDecreaseDateTime"
        case lastIncreaseDateTime = "LastIncreaseDateTime"
        case numberOfDecreasesToday = "NumberOfDecreasesToday"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastDecreaseDateTime = self.lastDecreaseDateTime {
            try encodeContainer.encodeTimestamp(lastDecreaseDateTime, format: .epochSeconds, forKey: .lastDecreaseDateTime)
        }
        if let lastIncreaseDateTime = self.lastIncreaseDateTime {
            try encodeContainer.encodeTimestamp(lastIncreaseDateTime, format: .epochSeconds, forKey: .lastIncreaseDateTime)
        }
        if let numberOfDecreasesToday = self.numberOfDecreasesToday {
            try encodeContainer.encode(numberOfDecreasesToday, forKey: .numberOfDecreasesToday)
        }
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastIncreaseDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastIncreaseDateTime)
        lastIncreaseDateTime = lastIncreaseDateTimeDecoded
        let lastDecreaseDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastDecreaseDateTime)
        lastDecreaseDateTime = lastDecreaseDateTimeDecoded
        let numberOfDecreasesTodayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfDecreasesToday)
        numberOfDecreasesToday = numberOfDecreasesTodayDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
    public struct ProvisionedThroughputDescription: Swift.Equatable {
        /// The date and time of the last provisioned throughput decrease for this table.
        public var lastDecreaseDateTime: ClientRuntime.Date?
        /// The date and time of the last provisioned throughput increase for this table.
        public var lastIncreaseDateTime: ClientRuntime.Date?
        /// The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var numberOfDecreasesToday: Swift.Int?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.
        public var readCapacityUnits: Swift.Int?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var writeCapacityUnits: Swift.Int?

        public init (
            lastDecreaseDateTime: ClientRuntime.Date? = nil,
            lastIncreaseDateTime: ClientRuntime.Date? = nil,
            numberOfDecreasesToday: Swift.Int? = nil,
            readCapacityUnits: Swift.Int? = nil,
            writeCapacityUnits: Swift.Int? = nil
        )
        {
            self.lastDecreaseDateTime = lastDecreaseDateTime
            self.lastIncreaseDateTime = lastIncreaseDateTime
            self.numberOfDecreasesToday = numberOfDecreasesToday
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension ProvisionedThroughputExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ProvisionedThroughputExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request rate is too high. The Amazon Web Services SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. Reduce the frequency of requests and use exponential backoff. For more information, go to [Error Retries and Exponential Backoff](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff) in the Amazon DynamoDB Developer Guide.
public struct ProvisionedThroughputExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// You exceeded your maximum allowed provisioned throughput.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ProvisionedThroughputExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ProvisionedThroughputExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ProvisionedThroughputOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case readCapacityUnits = "ReadCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Replica-specific provisioned throughput settings. If not specified, uses the source table's provisioned throughput settings.
    public struct ProvisionedThroughputOverride: Swift.Equatable {
        /// Replica-specific read capacity units. If not specified, uses the source table's read capacity settings.
        public var readCapacityUnits: Swift.Int?

        public init (
            readCapacityUnits: Swift.Int? = nil
        )
        {
            self.readCapacityUnits = readCapacityUnits
        }
    }

}

extension DynamoDBClientTypes.Put: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, putItemInputAttributeMap0) in item {
                try itemContainer.encode(putItemInputAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = self.returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a PutItem operation.
    public struct Put: Swift.Equatable {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// A map of attribute name to attribute values, representing the primary key of the item to be written by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        /// This member is required.
        public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which to write the item.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension PutItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expected)
            for (dictKey0, expectedAttributeMap0) in expected {
                try expectedContainer.encode(expectedAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, putItemInputAttributeMap0) in item {
                try itemContainer.encode(putItemInputAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = self.returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension PutItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutItem operation.
public struct PutItemInput: Swift.Equatable {
    /// A condition that must be satisfied in order for a conditional PutItem operation to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information on condition expressions, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. For more information about primary keys, see [Primary Key](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey) in the Amazon DynamoDB Developer Guide. Each element in the Item map is an AttributeValue object.
    /// This member is required.
    public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - If PutItem overwrote an attribute name-value pair, then the content of the old item is returned.
    ///
    ///
    /// The values returned are strongly consistent. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The ReturnValues parameter is used by several DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// The name of the table to contain the item.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.item = item
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
    }
}

struct PutItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let item: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    let returnValues: DynamoDBClientTypes.ReturnValue?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    let conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    let conditionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
}

extension PutItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let returnValuesDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension PutItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutItemOutputError: Swift.Error, Swift.Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// Represents the output of a PutItem operation.
public struct PutItemOutputResponse: Swift.Equatable {
    /// The attribute values as they appeared before the PutItem operation, but only if ReturnValues is specified as ALL_OLD in the request. Each element consists of an attribute name and an attribute value.
    public var attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the PutItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Read/Write Capacity Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the PutItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init (
        attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct PutItemOutputResponseBody: Swift.Equatable {
    let attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    let itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?
}

extension PutItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension DynamoDBClientTypes.PutRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, putItemInputAttributeMap0) in item {
                try itemContainer.encode(putItemInputAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a PutItem operation on an item.
    public struct PutRequest: Swift.Equatable {
        /// A map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        /// This member is required.
        public var item: [Swift.String:DynamoDBClientTypes.AttributeValue]?

        public init (
            item: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.item = item
        }
    }

}

extension QueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case keyConditionExpression = "KeyConditionExpression"
        case keyConditions = "KeyConditions"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case queryFilter = "QueryFilter"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanIndexForward = "ScanIndexForward"
        case select = "Select"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributename0 in attributesToGet {
                try attributesToGetContainer.encode(attributename0)
            }
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let exclusiveStartKey = exclusiveStartKey {
            var exclusiveStartKeyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exclusiveStartKey)
            for (dictKey0, key0) in exclusiveStartKey {
                try exclusiveStartKeyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let filterExpression = self.filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keyConditionExpression = self.keyConditionExpression {
            try encodeContainer.encode(keyConditionExpression, forKey: .keyConditionExpression)
        }
        if let keyConditions = keyConditions {
            var keyConditionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .keyConditions)
            for (dictKey0, keyConditions0) in keyConditions {
                try keyConditionsContainer.encode(keyConditions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let queryFilter = queryFilter {
            var queryFilterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .queryFilter)
            for (dictKey0, filterConditionMap0) in queryFilter {
                try queryFilterContainer.encode(filterConditionMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let scanIndexForward = self.scanIndexForward {
            try encodeContainer.encode(scanIndexForward, forKey: .scanIndexForward)
        }
        if let select = self.select {
            try encodeContainer.encode(select.rawValue, forKey: .select)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension QueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a Query operation.
public struct QueryInput: Swift.Equatable {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads. Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
    public var consistentRead: Swift.Bool?
    /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number, or Binary. No set data types are allowed.
    public var exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Specifying Conditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// A string that contains conditions that DynamoDB applies after the Query operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key. A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units. For more information, see [Filter Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression) in the Amazon DynamoDB Developer Guide.
    public var filterExpression: Swift.String?
    /// The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.
    public var indexName: Swift.String?
    /// The condition that specifies the key values for items to be retrieved by the Query action. The condition must perform an equality test on a single partition key value. The condition can optionally perform one of several comparison tests on a single sort key value. This allows Query to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values. The partition key equality test is required, and must be specified in the following format: partitionKeyName = :partitionkeyval If you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key. Following is an example, using the = comparison operator for the sort key: partitionKeyName
    ///     =
    ///
    ///
    ///     :partitionkeyval
    ///
    ///
    ///     AND
    ///
    ///
    ///     sortKeyName
    ///
    ///
    ///     =
    ///
    /// :sortkeyval Valid comparisons for the sort key condition are as follows:
    ///
    /// * sortKeyName=:sortkeyval - true if the sort key value is equal to :sortkeyval.
    ///
    /// * sortKeyName<:sortkeyval - true if the sort key value is less than :sortkeyval.
    ///
    /// * sortKeyName<=:sortkeyval - true if the sort key value is less than or equal to :sortkeyval.
    ///
    /// * sortKeyName>:sortkeyval - true if the sort key value is greater than :sortkeyval.
    ///
    /// * sortKeyName>= :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval.
    ///
    /// * sortKeyNameBETWEEN:sortkeyval1AND:sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1, and less than or equal to :sortkeyval2.
    ///
    /// * begins_with (sortKeyName, :sortkeyval) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name begins_with is case-sensitive.
    ///
    ///
    /// Use the ExpressionAttributeValues parameter to replace tokens such as :partitionval and :sortval with actual values at runtime. You can optionally use the ExpressionAttributeNames parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following KeyConditionExpression parameter causes an error because Size is a reserved word:
    ///
    /// * Size = :myval
    ///
    ///
    /// To work around this, define a placeholder (such a #S) to represent the attribute name Size. KeyConditionExpression then is as follows:
    ///
    /// * #S = :myval
    ///
    ///
    /// For a list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide. For more information on ExpressionAttributeNames and ExpressionAttributeValues, see [Using Placeholders for Attribute Names and Values](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html) in the Amazon DynamoDB Developer Guide.
    public var keyConditionExpression: Swift.String?
    /// This is a legacy parameter. Use KeyConditionExpression instead. For more information, see [KeyConditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html) in the Amazon DynamoDB Developer Guide.
    public var keyConditions: [Swift.String:DynamoDBClientTypes.Condition]?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see [Query and Scan](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html) in the Amazon DynamoDB Developer Guide.
    public var limit: Swift.Int?
    /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [QueryFilter](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html) in the Amazon DynamoDB Developer Guide.
    public var queryFilter: [Swift.String:DynamoDBClientTypes.Condition]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Specifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false, the traversal is performed in descending order. Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned. If ScanIndexForward is true, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.
    public var scanIndexForward: Swift.Bool?
    /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.
    ///
    /// * ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.
    ///
    /// * ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.
    ///
    /// * COUNT - Returns the number of matching items, rather than the matching items themselves.
    ///
    /// * SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.
    ///
    ///
    /// If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.) If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
    public var select: DynamoDBClientTypes.Select?
    /// The name of the table containing the requested items.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        attributesToGet: [Swift.String]? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        consistentRead: Swift.Bool? = nil,
        exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        filterExpression: Swift.String? = nil,
        indexName: Swift.String? = nil,
        keyConditionExpression: Swift.String? = nil,
        keyConditions: [Swift.String:DynamoDBClientTypes.Condition]? = nil,
        limit: Swift.Int? = nil,
        projectionExpression: Swift.String? = nil,
        queryFilter: [Swift.String:DynamoDBClientTypes.Condition]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        scanIndexForward: Swift.Bool? = nil,
        select: DynamoDBClientTypes.Select? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.keyConditionExpression = keyConditionExpression
        self.keyConditions = keyConditions
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.queryFilter = queryFilter
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanIndexForward = scanIndexForward
        self.select = select
        self.tableName = tableName
    }
}

struct QueryInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
    let select: DynamoDBClientTypes.Select?
    let attributesToGet: [Swift.String]?
    let limit: Swift.Int?
    let consistentRead: Swift.Bool?
    let keyConditions: [Swift.String:DynamoDBClientTypes.Condition]?
    let queryFilter: [Swift.String:DynamoDBClientTypes.Condition]?
    let conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    let scanIndexForward: Swift.Bool?
    let exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let projectionExpression: Swift.String?
    let filterExpression: Swift.String?
    let keyConditionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
}

extension QueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case keyConditionExpression = "KeyConditionExpression"
        case keyConditions = "KeyConditions"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case queryFilter = "QueryFilter"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanIndexForward = "ScanIndexForward"
        case select = "Select"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let selectDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Select.self, forKey: .select)
        select = selectDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let keyConditionsContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.Condition?].self, forKey: .keyConditions)
        var keyConditionsDecoded0: [Swift.String:DynamoDBClientTypes.Condition]? = nil
        if let keyConditionsContainer = keyConditionsContainer {
            keyConditionsDecoded0 = [Swift.String:DynamoDBClientTypes.Condition]()
            for (key0, condition0) in keyConditionsContainer {
                if let condition0 = condition0 {
                    keyConditionsDecoded0?[key0] = condition0
                }
            }
        }
        keyConditions = keyConditionsDecoded0
        let queryFilterContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.Condition?].self, forKey: .queryFilter)
        var queryFilterDecoded0: [Swift.String:DynamoDBClientTypes.Condition]? = nil
        if let queryFilterContainer = queryFilterContainer {
            queryFilterDecoded0 = [Swift.String:DynamoDBClientTypes.Condition]()
            for (key0, condition0) in queryFilterContainer {
                if let condition0 = condition0 {
                    queryFilterDecoded0?[key0] = condition0
                }
            }
        }
        queryFilter = queryFilterDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let scanIndexForwardDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .scanIndexForward)
        scanIndexForward = scanIndexForwardDecoded
        let exclusiveStartKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .exclusiveStartKey)
        var exclusiveStartKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let exclusiveStartKeyContainer = exclusiveStartKeyContainer {
            exclusiveStartKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in exclusiveStartKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    exclusiveStartKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        exclusiveStartKey = exclusiveStartKeyDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let keyConditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyConditionExpression)
        keyConditionExpression = keyConditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension QueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum QueryOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension QueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: QueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.count = output.count
            self.items = output.items
            self.lastEvaluatedKey = output.lastEvaluatedKey
            self.scannedCount = output.scannedCount
        } else {
            self.consumedCapacity = nil
            self.count = 0
            self.items = nil
            self.lastEvaluatedKey = nil
            self.scannedCount = 0
        }
    }
}

/// Represents the output of a Query operation.
public struct QueryOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the Query operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Provisioned Throughput](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// The number of items in the response. If you used a QueryFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count and ScannedCount are the same.
    public var count: Swift.Int
    /// An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.
    public var items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The number of items evaluated, before any QueryFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Query operation. For more information, see [Count and ScannedCount](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count) in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
    public var scannedCount: Swift.Int

    public init (
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        count: Swift.Int = 0,
        items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        scannedCount: Swift.Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

struct QueryOutputResponseBody: Swift.Equatable {
    let items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    let count: Swift.Int
    let scannedCount: Swift.Int
    let lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
}

extension QueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case count = "Count"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case scannedCount = "ScannedCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[Swift.String: DynamoDBClientTypes.AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[Swift.String:DynamoDBClientTypes.AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [Swift.String: DynamoDBClientTypes.AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let scannedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scannedCount) ?? 0
        scannedCount = scannedCountDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

extension DynamoDBClientTypes.Replica: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica.
    public struct Replica: Swift.Equatable {
        /// The Region where the replica needs to be created.
        public var regionName: Swift.String?

        public init (
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension ReplicaAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReplicaAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified replica is already part of the global table.
public struct ReplicaAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicaAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicaAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ReplicaAutoScalingDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case regionName = "RegionName"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaStatus = "ReplicaStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexautoscalingdescription0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexautoscalingdescription0)
            }
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = self.replicaProvisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = self.replicaProvisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaStatus = self.replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of the replica.
    public struct ReplicaAutoScalingDescription: Swift.Equatable {
        /// Replica-specific global secondary index auto scaling settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]?
        /// The Region where the replica exists.
        public var regionName: Swift.String?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The current state of the replica:
        ///
        /// * CREATING - The replica is being created.
        ///
        /// * UPDATING - The replica is being updated.
        ///
        /// * DELETING - The replica is being deleted.
        ///
        /// * ACTIVE - The replica is ready for use.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?

        public init (
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil,
            regionName: Swift.String? = nil,
            replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.regionName = regionName
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaStatus = replicaStatus
        }
    }

}

extension DynamoDBClientTypes.ReplicaAutoScalingUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
        case replicaGlobalSecondaryIndexUpdates = "ReplicaGlobalSecondaryIndexUpdates"
        case replicaProvisionedReadCapacityAutoScalingUpdate = "ReplicaProvisionedReadCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates {
            var replicaGlobalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexUpdates)
            for replicaglobalsecondaryindexautoscalingupdate0 in replicaGlobalSecondaryIndexUpdates {
                try replicaGlobalSecondaryIndexUpdatesContainer.encode(replicaglobalsecondaryindexautoscalingupdate0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingUpdate = self.replicaProvisionedReadCapacityAutoScalingUpdate {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingUpdate, forKey: .replicaProvisionedReadCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaGlobalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate?].self, forKey: .replicaGlobalSecondaryIndexUpdates)
        var replicaGlobalSecondaryIndexUpdatesDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil
        if let replicaGlobalSecondaryIndexUpdatesContainer = replicaGlobalSecondaryIndexUpdatesContainer {
            replicaGlobalSecondaryIndexUpdatesDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]()
            for structure0 in replicaGlobalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdatesDecoded0
        let replicaProvisionedReadCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .replicaProvisionedReadCapacityAutoScalingUpdate)
        replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a replica that will be modified.
    public struct ReplicaAutoScalingUpdate: Swift.Equatable {
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?
        /// Represents the auto scaling settings of global secondary indexes that will be modified.
        public var replicaGlobalSecondaryIndexUpdates: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var replicaProvisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init (
            regionName: Swift.String? = nil,
            replicaGlobalSecondaryIndexUpdates: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil,
            replicaProvisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates
            self.replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdate
        }
    }

}

extension DynamoDBClientTypes.ReplicaDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kmsMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case replicaInaccessibleDateTime = "ReplicaInaccessibleDateTime"
        case replicaStatus = "ReplicaStatus"
        case replicaStatusDescription = "ReplicaStatusDescription"
        case replicaStatusPercentProgress = "ReplicaStatusPercentProgress"
        case replicaTableClassSummary = "ReplicaTableClassSummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexdescription0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexdescription0)
            }
        }
        if let kmsMasterKeyId = self.kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaInaccessibleDateTime = self.replicaInaccessibleDateTime {
            try encodeContainer.encodeTimestamp(replicaInaccessibleDateTime, format: .epochSeconds, forKey: .replicaInaccessibleDateTime)
        }
        if let replicaStatus = self.replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
        if let replicaStatusDescription = self.replicaStatusDescription {
            try encodeContainer.encode(replicaStatusDescription, forKey: .replicaStatusDescription)
        }
        if let replicaStatusPercentProgress = self.replicaStatusPercentProgress {
            try encodeContainer.encode(replicaStatusPercentProgress, forKey: .replicaStatusPercentProgress)
        }
        if let replicaTableClassSummary = self.replicaTableClassSummary {
            try encodeContainer.encode(replicaTableClassSummary, forKey: .replicaTableClassSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaStatusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaStatusDescription)
        replicaStatusDescription = replicaStatusDescriptionDecoded
        let replicaStatusPercentProgressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaStatusPercentProgress)
        replicaStatusPercentProgress = replicaStatusPercentProgressDecoded
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaInaccessibleDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .replicaInaccessibleDateTime)
        replicaInaccessibleDateTime = replicaInaccessibleDateTimeDecoded
        let replicaTableClassSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClassSummary.self, forKey: .replicaTableClassSummary)
        replicaTableClassSummary = replicaTableClassSummaryDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the details of the replica.
    public struct ReplicaDescription: Swift.Equatable {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]?
        /// The KMS key of the replica that will be used for KMS encryption.
        public var kmsMasterKeyId: Swift.String?
        /// Replica-specific provisioned throughput. If not described, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The name of the Region.
        public var regionName: Swift.String?
        /// The time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.
        public var replicaInaccessibleDateTime: ClientRuntime.Date?
        /// The current state of the replica:
        ///
        /// * CREATING - The replica is being created.
        ///
        /// * UPDATING - The replica is being updated.
        ///
        /// * DELETING - The replica is being deleted.
        ///
        /// * ACTIVE - The replica is ready for use.
        ///
        /// * REGION_DISABLED - The replica is inaccessible because the Amazon Web Services Region has been disabled. If the Amazon Web Services Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS  - The KMS key used to encrypt the table is inaccessible. If the KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?
        /// Detailed information about the replica status.
        public var replicaStatusDescription: Swift.String?
        /// Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.
        public var replicaStatusPercentProgress: Swift.String?
        /// Contains details of the table class.
        public var replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary?

        public init (
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            replicaInaccessibleDateTime: ClientRuntime.Date? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil,
            replicaStatusDescription: Swift.String? = nil,
            replicaStatusPercentProgress: Swift.String? = nil,
            replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.replicaInaccessibleDateTime = replicaInaccessibleDateTime
            self.replicaStatus = replicaStatus
            self.replicaStatusDescription = replicaStatusDescription
            self.replicaStatusPercentProgress = replicaStatusPercentProgress
            self.replicaTableClassSummary = replicaTableClassSummary
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndex: Swift.Equatable {
        /// The name of the global secondary index.
        /// This member is required.
        public var indexName: Swift.String?
        /// Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's read capacity settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?

        public init (
            indexName: Swift.String? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil
        )
        {
            self.indexName = indexName
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
        case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = self.indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let provisionedReadCapacityAutoScalingSettings = self.provisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettings, forKey: .provisionedReadCapacityAutoScalingSettings)
        }
        if let provisionedWriteCapacityAutoScalingSettings = self.provisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettings, forKey: .provisionedWriteCapacityAutoScalingSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let provisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .provisionedReadCapacityAutoScalingSettings)
        provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettingsDecoded
        let provisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .provisionedWriteCapacityAutoScalingSettings)
        provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettingsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling configuration for a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndexAutoScalingDescription: Swift.Equatable {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The current state of the replica global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The table/index configuration is being updated. The table/index remains available for data operations when UPDATING
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?

        public init (
            indexName: Swift.String? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil
        )
        {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedReadCapacityAutoScalingUpdate = "ProvisionedReadCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedReadCapacityAutoScalingUpdate = self.provisionedReadCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingUpdate, forKey: .provisionedReadCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedReadCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .provisionedReadCapacityAutoScalingUpdate)
        provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a global secondary index for a replica that will be modified.
    public struct ReplicaGlobalSecondaryIndexAutoScalingUpdate: Swift.Equatable {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var provisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init (
            indexName: Swift.String? = nil,
            provisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdate
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndexDescription: Swift.Equatable {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// If not described, uses the source table GSI's read capacity settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?

        public init (
            indexName: Swift.String? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil
        )
        {
            self.indexName = indexName
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
        case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
        case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
        case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = self.indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let provisionedReadCapacityAutoScalingSettings = self.provisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettings, forKey: .provisionedReadCapacityAutoScalingSettings)
        }
        if let provisionedReadCapacityUnits = self.provisionedReadCapacityUnits {
            try encodeContainer.encode(provisionedReadCapacityUnits, forKey: .provisionedReadCapacityUnits)
        }
        if let provisionedWriteCapacityAutoScalingSettings = self.provisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettings, forKey: .provisionedWriteCapacityAutoScalingSettings)
        }
        if let provisionedWriteCapacityUnits = self.provisionedWriteCapacityUnits {
            try encodeContainer.encode(provisionedWriteCapacityUnits, forKey: .provisionedWriteCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let provisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedReadCapacityUnits)
        provisionedReadCapacityUnits = provisionedReadCapacityUnitsDecoded
        let provisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .provisionedReadCapacityAutoScalingSettings)
        provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettingsDecoded
        let provisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedWriteCapacityUnits)
        provisionedWriteCapacityUnits = provisionedWriteCapacityUnitsDecoded
        let provisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .provisionedWriteCapacityAutoScalingSettings)
        provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettingsDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct ReplicaGlobalSecondaryIndexSettingsDescription: Swift.Equatable {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The current status of the global secondary index:
        ///
        /// * CREATING - The global secondary index is being created.
        ///
        /// * UPDATING - The global secondary index is being updated.
        ///
        /// * DELETING - The global secondary index is being deleted.
        ///
        /// * ACTIVE - The global secondary index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// Auto scaling settings for a global secondary index replica's read capacity units.
        public var provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedReadCapacityUnits: Swift.Int?
        /// Auto scaling settings for a global secondary index replica's write capacity units.
        public var provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedWriteCapacityUnits: Swift.Int?

        public init (
            indexName: Swift.String? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedReadCapacityUnits: Swift.Int? = nil,
            provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }
    }

}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedReadCapacityAutoScalingSettingsUpdate = "ProvisionedReadCapacityAutoScalingSettingsUpdate"
        case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedReadCapacityAutoScalingSettingsUpdate = self.provisionedReadCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettingsUpdate, forKey: .provisionedReadCapacityAutoScalingSettingsUpdate)
        }
        if let provisionedReadCapacityUnits = self.provisionedReadCapacityUnits {
            try encodeContainer.encode(provisionedReadCapacityUnits, forKey: .provisionedReadCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedReadCapacityUnits)
        provisionedReadCapacityUnits = provisionedReadCapacityUnitsDecoded
        let provisionedReadCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .provisionedReadCapacityAutoScalingSettingsUpdate)
        provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdateDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public struct ReplicaGlobalSecondaryIndexSettingsUpdate: Swift.Equatable {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// Auto scaling settings for managing a global secondary index replica's read capacity units.
        public var provisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedReadCapacityUnits: Swift.Int?

        public init (
            indexName: Swift.String? = nil,
            provisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            provisionedReadCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdate
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
        }
    }

}

extension ReplicaNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReplicaNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified replica is no longer part of the global table.
public struct ReplicaNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicaNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicaNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.ReplicaSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
        case replicaBillingModeSummary = "ReplicaBillingModeSummary"
        case replicaGlobalSecondaryIndexSettings = "ReplicaGlobalSecondaryIndexSettings"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityUnits = "ReplicaProvisionedWriteCapacityUnits"
        case replicaStatus = "ReplicaStatus"
        case replicaTableClassSummary = "ReplicaTableClassSummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaBillingModeSummary = self.replicaBillingModeSummary {
            try encodeContainer.encode(replicaBillingModeSummary, forKey: .replicaBillingModeSummary)
        }
        if let replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings {
            var replicaGlobalSecondaryIndexSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettings)
            for replicaglobalsecondaryindexsettingsdescription0 in replicaGlobalSecondaryIndexSettings {
                try replicaGlobalSecondaryIndexSettingsContainer.encode(replicaglobalsecondaryindexsettingsdescription0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = self.replicaProvisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedReadCapacityUnits = self.replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = self.replicaProvisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityUnits = self.replicaProvisionedWriteCapacityUnits {
            try encodeContainer.encode(replicaProvisionedWriteCapacityUnits, forKey: .replicaProvisionedWriteCapacityUnits)
        }
        if let replicaStatus = self.replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
        if let replicaTableClassSummary = self.replicaTableClassSummary {
            try encodeContainer.encode(replicaTableClassSummary, forKey: .replicaTableClassSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaBillingModeSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingModeSummary.self, forKey: .replicaBillingModeSummary)
        replicaBillingModeSummary = replicaBillingModeSummaryDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedWriteCapacityUnits)
        replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnitsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaGlobalSecondaryIndexSettingsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription?].self, forKey: .replicaGlobalSecondaryIndexSettings)
        var replicaGlobalSecondaryIndexSettingsDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]? = nil
        if let replicaGlobalSecondaryIndexSettingsContainer = replicaGlobalSecondaryIndexSettingsContainer {
            replicaGlobalSecondaryIndexSettingsDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]()
            for structure0 in replicaGlobalSecondaryIndexSettingsContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettingsDecoded0
        let replicaTableClassSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClassSummary.self, forKey: .replicaTableClassSummary)
        replicaTableClassSummary = replicaTableClassSummaryDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica.
    public struct ReplicaSettingsDescription: Swift.Equatable {
        /// The Region name of the replica.
        /// This member is required.
        public var regionName: Swift.String?
        /// The read/write capacity mode of the replica.
        public var replicaBillingModeSummary: DynamoDBClientTypes.BillingModeSummary?
        /// Replica global secondary index settings for the global table.
        public var replicaGlobalSecondaryIndexSettings: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]?
        /// Auto scaling settings for a global table replica's read capacity units.
        public var replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedReadCapacityUnits: Swift.Int?
        /// Auto scaling settings for a global table replica's write capacity units.
        public var replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedWriteCapacityUnits: Swift.Int?
        /// The current state of the Region:
        ///
        /// * CREATING - The Region is being created.
        ///
        /// * UPDATING - The Region is being updated.
        ///
        /// * DELETING - The Region is being deleted.
        ///
        /// * ACTIVE - The Region is ready for use.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?
        /// Contains details of the table class.
        public var replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary?

        public init (
            regionName: Swift.String? = nil,
            replicaBillingModeSummary: DynamoDBClientTypes.BillingModeSummary? = nil,
            replicaGlobalSecondaryIndexSettings: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]? = nil,
            replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedReadCapacityUnits: Swift.Int? = nil,
            replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedWriteCapacityUnits: Swift.Int? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil,
            replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil
        )
        {
            self.regionName = regionName
            self.replicaBillingModeSummary = replicaBillingModeSummary
            self.replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnits
            self.replicaStatus = replicaStatus
            self.replicaTableClassSummary = replicaTableClassSummary
        }
    }

}

extension DynamoDBClientTypes.ReplicaSettingsUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
        case replicaGlobalSecondaryIndexSettingsUpdate = "ReplicaGlobalSecondaryIndexSettingsUpdate"
        case replicaProvisionedReadCapacityAutoScalingSettingsUpdate = "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        case replicaTableClass = "ReplicaTableClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate {
            var replicaGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
            for replicaglobalsecondaryindexsettingsupdate0 in replicaGlobalSecondaryIndexSettingsUpdate {
                try replicaGlobalSecondaryIndexSettingsUpdateContainer.encode(replicaglobalsecondaryindexsettingsupdate0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettingsUpdate = self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettingsUpdate, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        }
        if let replicaProvisionedReadCapacityUnits = self.replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
        if let replicaTableClass = self.replicaTableClass {
            try encodeContainer.encode(replicaTableClass.rawValue, forKey: .replicaTableClass)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded
        let replicaGlobalSecondaryIndexSettingsUpdateContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate?].self, forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
        var replicaGlobalSecondaryIndexSettingsUpdateDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil
        if let replicaGlobalSecondaryIndexSettingsUpdateContainer = replicaGlobalSecondaryIndexSettingsUpdateContainer {
            replicaGlobalSecondaryIndexSettingsUpdateDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]()
            for structure0 in replicaGlobalSecondaryIndexSettingsUpdateContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdateDecoded0
        let replicaTableClassDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .replicaTableClass)
        replicaTableClass = replicaTableClassDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings for a global table in a Region that will be modified.
    public struct ReplicaSettingsUpdate: Swift.Equatable {
        /// The Region of the replica to be added.
        /// This member is required.
        public var regionName: Swift.String?
        /// Represents the settings of a global secondary index for a global table that will be modified.
        public var replicaGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]?
        /// Auto scaling settings for managing a global table replica's read capacity units.
        public var replicaProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedReadCapacityUnits: Swift.Int?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var replicaTableClass: DynamoDBClientTypes.TableClass?

        public init (
            regionName: Swift.String? = nil,
            replicaGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil,
            replicaProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            replicaProvisionedReadCapacityUnits: Swift.Int? = nil,
            replicaTableClass: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate
            self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
            self.replicaTableClass = replicaTableClass
        }
    }

}

extension DynamoDBClientTypes {
    public enum ReplicaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case creationFailed
        case deleting
        case inaccessibleEncryptionCredentials
        case regionDisabled
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaStatus] {
            return [
                .active,
                .creating,
                .creationFailed,
                .deleting,
                .inaccessibleEncryptionCredentials,
                .regionDisabled,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .creationFailed: return "CREATION_FAILED"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
            case .regionDisabled: return "REGION_DISABLED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicaStatus(rawValue: rawValue) ?? ReplicaStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.ReplicaUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case create = "Create"
        case delete = "Delete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = self.create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = self.delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.CreateReplicaAction.self, forKey: .create)
        create = createDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DeleteReplicaAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new replica to be added to an existing global table.
    ///
    /// * New parameters for an existing replica.
    ///
    /// * An existing replica to be removed from an existing global table.
    public struct ReplicaUpdate: Swift.Equatable {
        /// The parameters required for creating a replica on an existing global table.
        public var create: DynamoDBClientTypes.CreateReplicaAction?
        /// The name of the existing replica to be removed.
        public var delete: DynamoDBClientTypes.DeleteReplicaAction?

        public init (
            create: DynamoDBClientTypes.CreateReplicaAction? = nil,
            delete: DynamoDBClientTypes.DeleteReplicaAction? = nil
        )
        {
            self.create = create
            self.delete = delete
        }
    }

}

extension DynamoDBClientTypes.ReplicationGroupUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case create = "Create"
        case delete = "Delete"
        case update = "Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = self.create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = self.delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let update = self.update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.CreateReplicationGroupMemberAction.self, forKey: .create)
        create = createDecoded
        let updateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.UpdateReplicationGroupMemberAction.self, forKey: .update)
        update = updateDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DeleteReplicationGroupMemberAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new replica to be added to an existing regional table or global table. This request invokes the CreateTableReplica action in the destination Region.
    ///
    /// * New parameters for an existing replica. This request invokes the UpdateTable action in the destination Region.
    ///
    /// * An existing replica to be deleted. The request invokes the DeleteTableReplica action in the destination Region, deleting the replica and all if its items in the destination Region.
    ///
    ///
    /// When you manually remove a table or global table replica, you do not automatically remove any associated scalable targets, scaling policies, or CloudWatch alarms.
    public struct ReplicationGroupUpdate: Swift.Equatable {
        /// The parameters required for creating a replica for the table.
        public var create: DynamoDBClientTypes.CreateReplicationGroupMemberAction?
        /// The parameters required for deleting a replica for the table.
        public var delete: DynamoDBClientTypes.DeleteReplicationGroupMemberAction?
        /// The parameters required for updating a replica for the table.
        public var update: DynamoDBClientTypes.UpdateReplicationGroupMemberAction?

        public init (
            create: DynamoDBClientTypes.CreateReplicationGroupMemberAction? = nil,
            delete: DynamoDBClientTypes.DeleteReplicationGroupMemberAction? = nil,
            update: DynamoDBClientTypes.UpdateReplicationGroupMemberAction? = nil
        )
        {
            self.create = create
            self.delete = delete
            self.update = update
        }
    }

}

extension RequestLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RequestLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Throughput exceeds the current throughput quota for your account. Please contact [Amazon Web Services Support](https://aws.amazon.com/support) to request a quota increase.
public struct RequestLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RequestLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension RequestLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation conflicts with the resource's availability. For example, you attempted to recreate an existing table, or tried to delete a table currently in the CREATING state.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The resource which is being attempted to be changed is in use.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation tried to access a nonexistent table or index. The resource might not be specified correctly, or its status might not be ACTIVE.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The resource which is being requested does not exist.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.RestoreSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDateTime = "RestoreDateTime"
        case restoreInProgress = "RestoreInProgress"
        case sourceBackupArn = "SourceBackupArn"
        case sourceTableArn = "SourceTableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restoreDateTime = self.restoreDateTime {
            try encodeContainer.encodeTimestamp(restoreDateTime, format: .epochSeconds, forKey: .restoreDateTime)
        }
        if let restoreInProgress = self.restoreInProgress {
            try encodeContainer.encode(restoreInProgress, forKey: .restoreInProgress)
        }
        if let sourceBackupArn = self.sourceBackupArn {
            try encodeContainer.encode(sourceBackupArn, forKey: .sourceBackupArn)
        }
        if let sourceTableArn = self.sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceBackupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupArn)
        sourceBackupArn = sourceBackupArnDecoded
        let sourceTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableArn)
        sourceTableArn = sourceTableArnDecoded
        let restoreDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .restoreDateTime)
        restoreDateTime = restoreDateTimeDecoded
        let restoreInProgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .restoreInProgress)
        restoreInProgress = restoreInProgressDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains details for the restore.
    public struct RestoreSummary: Swift.Equatable {
        /// Point in time or source backup time.
        /// This member is required.
        public var restoreDateTime: ClientRuntime.Date?
        /// Indicates if a restore is in progress or not.
        /// This member is required.
        public var restoreInProgress: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the backup from which the table was restored.
        public var sourceBackupArn: Swift.String?
        /// The ARN of the source table of the backup that is being restored.
        public var sourceTableArn: Swift.String?

        public init (
            restoreDateTime: ClientRuntime.Date? = nil,
            restoreInProgress: Swift.Bool? = nil,
            sourceBackupArn: Swift.String? = nil,
            sourceTableArn: Swift.String? = nil
        )
        {
            self.restoreDateTime = restoreDateTime
            self.restoreInProgress = restoreInProgress
            self.sourceBackupArn = sourceBackupArn
            self.sourceTableArn = sourceTableArn
        }
    }

}

extension RestoreTableFromBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case sseSpecificationOverride = "SSESpecificationOverride"
        case targetTableName = "TargetTableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = self.backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let billingModeOverride = self.billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindex0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindex0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindex0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindex0)
            }
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let sseSpecificationOverride = self.sseSpecificationOverride {
            try encodeContainer.encode(sseSpecificationOverride, forKey: .sseSpecificationOverride)
        }
        if let targetTableName = self.targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
    }
}

extension RestoreTableFromBackupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RestoreTableFromBackupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?
    /// The billing mode of the restored table.
    public var billingModeOverride: DynamoDBClientTypes.BillingMode?
    /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Provisioned throughput settings for the restored table.
    public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    /// The new server-side encryption settings for the restored table.
    public var sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
    /// The name of the new table to which the backup must be restored.
    /// This member is required.
    public var targetTableName: Swift.String?

    public init (
        backupArn: Swift.String? = nil,
        billingModeOverride: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        sseSpecificationOverride: DynamoDBClientTypes.SSESpecification? = nil,
        targetTableName: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.sseSpecificationOverride = sseSpecificationOverride
        self.targetTableName = targetTableName
    }
}

struct RestoreTableFromBackupInputBody: Swift.Equatable {
    let targetTableName: Swift.String?
    let backupArn: Swift.String?
    let billingModeOverride: DynamoDBClientTypes.BillingMode?
    let globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    let localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    let provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    let sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
}

extension RestoreTableFromBackupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupArn = "BackupArn"
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case sseSpecificationOverride = "SSESpecificationOverride"
        case targetTableName = "TargetTableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetTableName)
        targetTableName = targetTableNameDecoded
        let backupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let billingModeOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingModeOverride)
        billingModeOverride = billingModeOverrideDecoded
        let globalSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexOverride)
        var globalSecondaryIndexOverrideDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexOverrideContainer = globalSecondaryIndexOverrideContainer {
            globalSecondaryIndexOverrideDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexOverride = globalSecondaryIndexOverrideDecoded0
        let localSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.LocalSecondaryIndex?].self, forKey: .localSecondaryIndexOverride)
        var localSecondaryIndexOverrideDecoded0:[DynamoDBClientTypes.LocalSecondaryIndex]? = nil
        if let localSecondaryIndexOverrideContainer = localSecondaryIndexOverrideContainer {
            localSecondaryIndexOverrideDecoded0 = [DynamoDBClientTypes.LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexOverride = localSecondaryIndexOverrideDecoded0
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let sseSpecificationOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSESpecification.self, forKey: .sseSpecificationOverride)
        sseSpecificationOverride = sseSpecificationOverrideDecoded
    }
}

extension RestoreTableFromBackupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreTableFromBackupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableAlreadyExistsException" : self = .tableAlreadyExistsException(try TableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RestoreTableFromBackupOutputError: Swift.Error, Swift.Equatable {
    case backupInUseException(BackupInUseException)
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableAlreadyExistsException(TableAlreadyExistsException)
    case tableInUseException(TableInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreTableFromBackupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RestoreTableFromBackupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

public struct RestoreTableFromBackupOutputResponse: Swift.Equatable {
    /// The description of the table created from an existing backup.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init (
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct RestoreTableFromBackupOutputResponseBody: Swift.Equatable {
    let tableDescription: DynamoDBClientTypes.TableDescription?
}

extension RestoreTableFromBackupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension RestoreTableToPointInTimeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sseSpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingModeOverride = self.billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindex0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindex0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindex0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindex0)
            }
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let restoreDateTime = self.restoreDateTime {
            try encodeContainer.encodeTimestamp(restoreDateTime, format: .epochSeconds, forKey: .restoreDateTime)
        }
        if let sseSpecificationOverride = self.sseSpecificationOverride {
            try encodeContainer.encode(sseSpecificationOverride, forKey: .sseSpecificationOverride)
        }
        if let sourceTableArn = self.sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
        if let sourceTableName = self.sourceTableName {
            try encodeContainer.encode(sourceTableName, forKey: .sourceTableName)
        }
        if let targetTableName = self.targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
        if let useLatestRestorableTime = self.useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}

extension RestoreTableToPointInTimeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RestoreTableToPointInTimeInput: Swift.Equatable {
    /// The billing mode of the restored table.
    public var billingModeOverride: DynamoDBClientTypes.BillingMode?
    /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Provisioned throughput settings for the restored table.
    public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    /// Time in the past to restore the table to.
    public var restoreDateTime: ClientRuntime.Date?
    /// The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).
    public var sourceTableArn: Swift.String?
    /// Name of the source table that is being restored.
    public var sourceTableName: Swift.String?
    /// The new server-side encryption settings for the restored table.
    public var sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
    /// The name of the new table to which it must be restored to.
    /// This member is required.
    public var targetTableName: Swift.String?
    /// Restore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.
    public var useLatestRestorableTime: Swift.Bool?

    public init (
        billingModeOverride: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        restoreDateTime: ClientRuntime.Date? = nil,
        sourceTableArn: Swift.String? = nil,
        sourceTableName: Swift.String? = nil,
        sseSpecificationOverride: DynamoDBClientTypes.SSESpecification? = nil,
        targetTableName: Swift.String? = nil,
        useLatestRestorableTime: Swift.Bool? = nil
    )
    {
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.restoreDateTime = restoreDateTime
        self.sourceTableArn = sourceTableArn
        self.sourceTableName = sourceTableName
        self.sseSpecificationOverride = sseSpecificationOverride
        self.targetTableName = targetTableName
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

struct RestoreTableToPointInTimeInputBody: Swift.Equatable {
    let sourceTableArn: Swift.String?
    let sourceTableName: Swift.String?
    let targetTableName: Swift.String?
    let useLatestRestorableTime: Swift.Bool?
    let restoreDateTime: ClientRuntime.Date?
    let billingModeOverride: DynamoDBClientTypes.BillingMode?
    let globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    let localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    let provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    let sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
}

extension RestoreTableToPointInTimeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sseSpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableArn)
        sourceTableArn = sourceTableArnDecoded
        let sourceTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableName)
        sourceTableName = sourceTableNameDecoded
        let targetTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetTableName)
        targetTableName = targetTableNameDecoded
        let useLatestRestorableTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableTime)
        useLatestRestorableTime = useLatestRestorableTimeDecoded
        let restoreDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .restoreDateTime)
        restoreDateTime = restoreDateTimeDecoded
        let billingModeOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingModeOverride)
        billingModeOverride = billingModeOverrideDecoded
        let globalSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexOverride)
        var globalSecondaryIndexOverrideDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexOverrideContainer = globalSecondaryIndexOverrideContainer {
            globalSecondaryIndexOverrideDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexOverride = globalSecondaryIndexOverrideDecoded0
        let localSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.LocalSecondaryIndex?].self, forKey: .localSecondaryIndexOverride)
        var localSecondaryIndexOverrideDecoded0:[DynamoDBClientTypes.LocalSecondaryIndex]? = nil
        if let localSecondaryIndexOverrideContainer = localSecondaryIndexOverrideContainer {
            localSecondaryIndexOverrideDecoded0 = [DynamoDBClientTypes.LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexOverride = localSecondaryIndexOverrideDecoded0
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let sseSpecificationOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSESpecification.self, forKey: .sseSpecificationOverride)
        sseSpecificationOverride = sseSpecificationOverrideDecoded
    }
}

extension RestoreTableToPointInTimeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreTableToPointInTimeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRestoreTimeException" : self = .invalidRestoreTimeException(try InvalidRestoreTimeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PointInTimeRecoveryUnavailableException" : self = .pointInTimeRecoveryUnavailableException(try PointInTimeRecoveryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableAlreadyExistsException" : self = .tableAlreadyExistsException(try TableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RestoreTableToPointInTimeOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case invalidRestoreTimeException(InvalidRestoreTimeException)
    case limitExceededException(LimitExceededException)
    case pointInTimeRecoveryUnavailableException(PointInTimeRecoveryUnavailableException)
    case tableAlreadyExistsException(TableAlreadyExistsException)
    case tableInUseException(TableInUseException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreTableToPointInTimeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RestoreTableToPointInTimeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

public struct RestoreTableToPointInTimeOutputResponse: Swift.Equatable {
    /// Represents the properties of a table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init (
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct RestoreTableToPointInTimeOutputResponseBody: Swift.Equatable {
    let tableDescription: DynamoDBClientTypes.TableDescription?
}

extension RestoreTableToPointInTimeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public enum ReturnConsumedCapacity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case indexes
        case `none`
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnConsumedCapacity] {
            return [
                .indexes,
                .none,
                .total,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .indexes: return "INDEXES"
            case .none: return "NONE"
            case .total: return "TOTAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReturnConsumedCapacity(rawValue: rawValue) ?? ReturnConsumedCapacity.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum ReturnItemCollectionMetrics: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case size
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnItemCollectionMetrics] {
            return [
                .none,
                .size,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .size: return "SIZE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReturnItemCollectionMetrics(rawValue: rawValue) ?? ReturnItemCollectionMetrics.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum ReturnValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allNew
        case allOld
        case `none`
        case updatedNew
        case updatedOld
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnValue] {
            return [
                .allNew,
                .allOld,
                .none,
                .updatedNew,
                .updatedOld,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allNew: return "ALL_NEW"
            case .allOld: return "ALL_OLD"
            case .none: return "NONE"
            case .updatedNew: return "UPDATED_NEW"
            case .updatedOld: return "UPDATED_OLD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReturnValue(rawValue: rawValue) ?? ReturnValue.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum ReturnValuesOnConditionCheckFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allOld
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnValuesOnConditionCheckFailure] {
            return [
                .allOld,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allOld: return "ALL_OLD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReturnValuesOnConditionCheckFailure(rawValue: rawValue) ?? ReturnValuesOnConditionCheckFailure.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.S3BucketSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3BucketOwner = self.s3BucketOwner {
            try encodeContainer.encode(s3BucketOwner, forKey: .s3BucketOwner)
        }
        if let s3KeyPrefix = self.s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketOwner)
        s3BucketOwner = s3BucketOwnerDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
    }
}

extension DynamoDBClientTypes {
    /// The S3 bucket that is being imported from.
    public struct S3BucketSource: Swift.Equatable {
        /// The S3 bucket that is being imported from.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional.
        public var s3BucketOwner: Swift.String?
        /// The key prefix shared by all S3 Objects that are being imported.
        public var s3KeyPrefix: Swift.String?

        public init (
            s3Bucket: Swift.String? = nil,
            s3BucketOwner: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

extension DynamoDBClientTypes {
    public enum S3SseAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes256
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [S3SseAlgorithm] {
            return [
                .aes256,
                .kms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3SseAlgorithm(rawValue: rawValue) ?? S3SseAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.SSEDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
        case kmsMasterKeyArn = "KMSMasterKeyArn"
        case sseType = "SSEType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inaccessibleEncryptionDateTime = self.inaccessibleEncryptionDateTime {
            try encodeContainer.encodeTimestamp(inaccessibleEncryptionDateTime, format: .epochSeconds, forKey: .inaccessibleEncryptionDateTime)
        }
        if let kmsMasterKeyArn = self.kmsMasterKeyArn {
            try encodeContainer.encode(kmsMasterKeyArn, forKey: .kmsMasterKeyArn)
        }
        if let sseType = self.sseType {
            try encodeContainer.encode(sseType.rawValue, forKey: .sseType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSEStatus.self, forKey: .status)
        status = statusDecoded
        let sseTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSEType.self, forKey: .sseType)
        sseType = sseTypeDecoded
        let kmsMasterKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyArn)
        kmsMasterKeyArn = kmsMasterKeyArnDecoded
        let inaccessibleEncryptionDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .inaccessibleEncryptionDateTime)
        inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// The description of the server-side encryption status on the specified table.
    public struct SSEDescription: Swift.Equatable {
        /// Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table's KMS key is accessible again. DynamoDB will initiate the table archival process when table's KMS key remains inaccessible for more than seven days from this date.
        public var inaccessibleEncryptionDateTime: ClientRuntime.Date?
        /// The KMS key ARN used for the KMS encryption.
        public var kmsMasterKeyArn: Swift.String?
        /// Server-side encryption type. The only supported value is:
        ///
        /// * KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public var sseType: DynamoDBClientTypes.SSEType?
        /// Represents the current state of server-side encryption. The only supported values are:
        ///
        /// * ENABLED - Server-side encryption is enabled.
        ///
        /// * UPDATING - Server-side encryption is being updated.
        public var status: DynamoDBClientTypes.SSEStatus?

        public init (
            inaccessibleEncryptionDateTime: ClientRuntime.Date? = nil,
            kmsMasterKeyArn: Swift.String? = nil,
            sseType: DynamoDBClientTypes.SSEType? = nil,
            status: DynamoDBClientTypes.SSEStatus? = nil
        )
        {
            self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
            self.kmsMasterKeyArn = kmsMasterKeyArn
            self.sseType = sseType
            self.status = status
        }
    }

}

extension DynamoDBClientTypes.SSESpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case kmsMasterKeyId = "KMSMasterKeyId"
        case sseType = "SSEType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kmsMasterKeyId = self.kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let sseType = self.sseType {
            try encodeContainer.encode(sseType.rawValue, forKey: .sseType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let sseTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSEType.self, forKey: .sseType)
        sseType = sseTypeDecoded
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable server-side encryption.
    public struct SSESpecification: Swift.Equatable {
        /// Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to KMS and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key.
        public var enabled: Swift.Bool?
        /// The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// Server-side encryption type. The only supported value is:
        ///
        /// * KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public var sseType: DynamoDBClientTypes.SSEType?

        public init (
            enabled: Swift.Bool? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            sseType: DynamoDBClientTypes.SSEType? = nil
        )
        {
            self.enabled = enabled
            self.kmsMasterKeyId = kmsMasterKeyId
            self.sseType = sseType
        }
    }

}

extension DynamoDBClientTypes {
    public enum SSEStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [SSEStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SSEStatus(rawValue: rawValue) ?? SSEStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum SSEType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes256
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [SSEType] {
            return [
                .aes256,
                .kms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SSEType(rawValue: rawValue) ?? SSEType.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes {
    public enum ScalarAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case b
        case n
        case s
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalarAttributeType] {
            return [
                .b,
                .n,
                .s,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .b: return "B"
            case .n: return "N"
            case .s: return "S"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalarAttributeType(rawValue: rawValue) ?? ScalarAttributeType.sdkUnknown(rawValue)
        }
    }
}

extension ScanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanFilter = "ScanFilter"
        case segment = "Segment"
        case select = "Select"
        case tableName = "TableName"
        case totalSegments = "TotalSegments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributename0 in attributesToGet {
                try attributesToGetContainer.encode(attributename0)
            }
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let exclusiveStartKey = exclusiveStartKey {
            var exclusiveStartKeyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exclusiveStartKey)
            for (dictKey0, key0) in exclusiveStartKey {
                try exclusiveStartKeyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let filterExpression = self.filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let scanFilter = scanFilter {
            var scanFilterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .scanFilter)
            for (dictKey0, filterConditionMap0) in scanFilter {
                try scanFilterContainer.encode(filterConditionMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let segment = self.segment {
            try encodeContainer.encode(segment, forKey: .segment)
        }
        if let select = self.select {
            try encodeContainer.encode(select.rawValue, forKey: .select)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let totalSegments = self.totalSegments {
            try encodeContainer.encode(totalSegments, forKey: .totalSegments)
        }
    }
}

extension ScanInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a Scan operation.
public struct ScanInput: Swift.Equatable {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// A Boolean value that determines the read consistency model during the scan:
    ///
    /// * If ConsistentRead is false, then the data returned from Scan might not contain the results from other recently completed write operations (PutItem, UpdateItem, or DeleteItem).
    ///
    /// * If ConsistentRead is true, then all of the write operations that completed before the Scan began are guaranteed to be contained in the Scan response.
    ///
    ///
    /// The default setting for ConsistentRead is false. The ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
    public var consistentRead: Swift.Bool?
    /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number or Binary. No set data types are allowed. In a parallel scan, a Scan request that includes ExclusiveStartKey must specify the same segment whose previous Scan returned the corresponding value of LastEvaluatedKey.
    public var exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// A string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units. For more information, see [Filter Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression) in the Amazon DynamoDB Developer Guide.
    public var filterExpression: Swift.String?
    /// The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName.
    public var indexName: Swift.String?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see [Working with Queries](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html) in the Amazon DynamoDB Developer Guide.
    public var limit: Swift.Int?
    /// A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ScanFilter](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html) in the Amazon DynamoDB Developer Guide.
    public var scanFilter: [Swift.String:DynamoDBClientTypes.Condition]?
    /// For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker. Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on. The value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation. The value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments. If you provide Segment, you must also provide TotalSegments.
    public var segment: Swift.Int?
    /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.
    ///
    /// * ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.
    ///
    /// * ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.
    ///
    /// * COUNT - Returns the number of matching items, rather than the matching items themselves.
    ///
    /// * SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.
    ///
    ///
    /// If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.) If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
    public var select: DynamoDBClientTypes.Select?
    /// The name of the table containing the requested items; or, if you provide IndexName, the name of the table to which that index belongs.
    /// This member is required.
    public var tableName: Swift.String?
    /// For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4. The value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel. If you specify TotalSegments, you must also specify Segment.
    public var totalSegments: Swift.Int?

    public init (
        attributesToGet: [Swift.String]? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        consistentRead: Swift.Bool? = nil,
        exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        filterExpression: Swift.String? = nil,
        indexName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        projectionExpression: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        scanFilter: [Swift.String:DynamoDBClientTypes.Condition]? = nil,
        segment: Swift.Int? = nil,
        select: DynamoDBClientTypes.Select? = nil,
        tableName: Swift.String? = nil,
        totalSegments: Swift.Int? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanFilter = scanFilter
        self.segment = segment
        self.select = select
        self.tableName = tableName
        self.totalSegments = totalSegments
    }
}

struct ScanInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
    let attributesToGet: [Swift.String]?
    let limit: Swift.Int?
    let select: DynamoDBClientTypes.Select?
    let scanFilter: [Swift.String:DynamoDBClientTypes.Condition]?
    let conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    let exclusiveStartKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let totalSegments: Swift.Int?
    let segment: Swift.Int?
    let projectionExpression: Swift.String?
    let filterExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consistentRead: Swift.Bool?
}

extension ScanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanFilter = "ScanFilter"
        case segment = "Segment"
        case select = "Select"
        case tableName = "TableName"
        case totalSegments = "TotalSegments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let selectDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Select.self, forKey: .select)
        select = selectDecoded
        let scanFilterContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.Condition?].self, forKey: .scanFilter)
        var scanFilterDecoded0: [Swift.String:DynamoDBClientTypes.Condition]? = nil
        if let scanFilterContainer = scanFilterContainer {
            scanFilterDecoded0 = [Swift.String:DynamoDBClientTypes.Condition]()
            for (key0, condition0) in scanFilterContainer {
                if let condition0 = condition0 {
                    scanFilterDecoded0?[key0] = condition0
                }
            }
        }
        scanFilter = scanFilterDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let exclusiveStartKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .exclusiveStartKey)
        var exclusiveStartKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let exclusiveStartKeyContainer = exclusiveStartKeyContainer {
            exclusiveStartKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in exclusiveStartKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    exclusiveStartKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        exclusiveStartKey = exclusiveStartKeyDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let totalSegmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalSegments)
        totalSegments = totalSegmentsDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segment)
        segment = segmentDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
    }
}

extension ScanOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ScanOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ScanOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ScanOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ScanOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.count = output.count
            self.items = output.items
            self.lastEvaluatedKey = output.lastEvaluatedKey
            self.scannedCount = output.scannedCount
        } else {
            self.consumedCapacity = nil
            self.count = 0
            self.items = nil
            self.lastEvaluatedKey = nil
            self.scannedCount = 0
        }
    }
}

/// Represents the output of a Scan operation.
public struct ScanOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the Scan operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Provisioned Throughput](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// The number of items in the response. If you set ScanFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count is the same as ScannedCount.
    public var count: Swift.Int
    /// An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.
    public var items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The number of items evaluated, before any ScanFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Scan operation. For more information, see [Count and ScannedCount](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count) in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
    public var scannedCount: Swift.Int

    public init (
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        count: Swift.Int = 0,
        items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        scannedCount: Swift.Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

struct ScanOutputResponseBody: Swift.Equatable {
    let items: [[Swift.String:DynamoDBClientTypes.AttributeValue]]?
    let count: Swift.Int
    let scannedCount: Swift.Int
    let lastEvaluatedKey: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
}

extension ScanOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case count = "Count"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case scannedCount = "ScannedCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[Swift.String: DynamoDBClientTypes.AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[Swift.String:DynamoDBClientTypes.AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[Swift.String:DynamoDBClientTypes.AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [Swift.String: DynamoDBClientTypes.AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let scannedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scannedCount) ?? 0
        scannedCount = scannedCountDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

extension DynamoDBClientTypes {
    public enum Select: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allAttributes
        case allProjectedAttributes
        case count
        case specificAttributes
        case sdkUnknown(Swift.String)

        public static var allCases: [Select] {
            return [
                .allAttributes,
                .allProjectedAttributes,
                .count,
                .specificAttributes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allAttributes: return "ALL_ATTRIBUTES"
            case .allProjectedAttributes: return "ALL_PROJECTED_ATTRIBUTES"
            case .count: return "COUNT"
            case .specificAttributes: return "SPECIFIC_ATTRIBUTES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Select(rawValue: rawValue) ?? Select.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.SourceTableDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingMode = "BillingMode"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case provisionedThroughput = "ProvisionedThroughput"
        case tableArn = "TableArn"
        case tableCreationDateTime = "TableCreationDateTime"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableCreationDateTime = self.tableCreationDateTime {
            try encodeContainer.encodeTimestamp(tableCreationDateTime, format: .epochSeconds, forKey: .tableCreationDateTime)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tableSizeBytes = self.tableSizeBytes {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let tableCreationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .tableCreationDateTime)
        tableCreationDateTime = tableCreationDateTimeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the details of the table when the backup was created.
    public struct SourceTableDetails: Swift.Equatable {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
        ///
        /// * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
        ///
        /// * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// Number of items in the table. Note that this is an approximate value.
        public var itemCount: Swift.Int?
        /// Schema of the table.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Read IOPs and Write IOPS on the table when the backup was created.
        /// This member is required.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
        /// ARN of the table for which backup was created.
        public var tableArn: Swift.String?
        /// Time when the source table was created.
        /// This member is required.
        public var tableCreationDateTime: ClientRuntime.Date?
        /// Unique identifier for the table for which the backup was created.
        /// This member is required.
        public var tableId: Swift.String?
        /// The name of the table for which the backup was created.
        /// This member is required.
        public var tableName: Swift.String?
        /// Size of the table in bytes. Note that this is an approximate value.
        public var tableSizeBytes: Swift.Int?

        public init (
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
            tableArn: Swift.String? = nil,
            tableCreationDateTime: ClientRuntime.Date? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil,
            tableSizeBytes: Swift.Int? = nil
        )
        {
            self.billingMode = billingMode
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.provisionedThroughput = provisionedThroughput
            self.tableArn = tableArn
            self.tableCreationDateTime = tableCreationDateTime
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
        }
    }

}

extension DynamoDBClientTypes.SourceTableFeatureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case sseDescription = "SSEDescription"
        case streamDescription = "StreamDescription"
        case timeToLiveDescription = "TimeToLiveDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexinfo0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexinfo0)
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexinfo0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexinfo0)
            }
        }
        if let sseDescription = self.sseDescription {
            try encodeContainer.encode(sseDescription, forKey: .sseDescription)
        }
        if let streamDescription = self.streamDescription {
            try encodeContainer.encode(streamDescription, forKey: .streamDescription)
        }
        if let timeToLiveDescription = self.timeToLiveDescription {
            try encodeContainer.encode(timeToLiveDescription, forKey: .timeToLiveDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.LocalSecondaryIndexInfo?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[DynamoDBClientTypes.LocalSecondaryIndexInfo]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [DynamoDBClientTypes.LocalSecondaryIndexInfo]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndexInfo?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndexInfo]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndexInfo]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let streamDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.StreamSpecification.self, forKey: .streamDescription)
        streamDescription = streamDescriptionDecoded
        let timeToLiveDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TimeToLiveDescription.self, forKey: .timeToLiveDescription)
        timeToLiveDescription = timeToLiveDescriptionDecoded
        let sseDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSEDescription.self, forKey: .sseDescription)
        sseDescription = sseDescriptionDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
    public struct SourceTableFeatureDetails: Swift.Equatable {
        /// Represents the GSI properties for the table when the backup was created. It includes the IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the time of backup.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexInfo]?
        /// Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
        public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexInfo]?
        /// The description of the server-side encryption status on the table when the backup was created.
        public var sseDescription: DynamoDBClientTypes.SSEDescription?
        /// Stream settings on the table when the backup was created.
        public var streamDescription: DynamoDBClientTypes.StreamSpecification?
        /// Time to Live settings on the table when the backup was created.
        public var timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription?

        public init (
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexInfo]? = nil,
            localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexInfo]? = nil,
            sseDescription: DynamoDBClientTypes.SSEDescription? = nil,
            streamDescription: DynamoDBClientTypes.StreamSpecification? = nil,
            timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.sseDescription = sseDescription
            self.streamDescription = streamDescription
            self.timeToLiveDescription = timeToLiveDescription
        }
    }

}

extension DynamoDBClientTypes.StreamSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamEnabled = "StreamEnabled"
        case streamViewType = "StreamViewType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamEnabled = self.streamEnabled {
            try encodeContainer.encode(streamEnabled, forKey: .streamEnabled)
        }
        if let streamViewType = self.streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .streamEnabled)
        streamEnabled = streamEnabledDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the DynamoDB Streams configuration for a table in DynamoDB.
    public struct StreamSpecification: Swift.Equatable {
        /// Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var streamEnabled: Swift.Bool?
        /// When an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:
        ///
        /// * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
        ///
        /// * NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.
        ///
        /// * OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.
        ///
        /// * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
        public var streamViewType: DynamoDBClientTypes.StreamViewType?

        public init (
            streamEnabled: Swift.Bool? = nil,
            streamViewType: DynamoDBClientTypes.StreamViewType? = nil
        )
        {
            self.streamEnabled = streamEnabled
            self.streamViewType = streamViewType
        }
    }

}

extension DynamoDBClientTypes {
    public enum StreamViewType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keysOnly
        case newAndOldImages
        case newImage
        case oldImage
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamViewType] {
            return [
                .keysOnly,
                .newAndOldImages,
                .newImage,
                .oldImage,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keysOnly: return "KEYS_ONLY"
            case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
            case .newImage: return "NEW_IMAGE"
            case .oldImage: return "OLD_IMAGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamViewType(rawValue: rawValue) ?? StreamViewType.sdkUnknown(rawValue)
        }
    }
}

extension TableAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TableAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A target table with the specified name already exists.
public struct TableAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TableAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TableAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes.TableAutoScalingDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicas = "Replicas"
        case tableName = "TableName"
        case tableStatus = "TableStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replicas = replicas {
            var replicasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicas)
            for replicaautoscalingdescription0 in replicas {
                try replicasContainer.encode(replicaautoscalingdescription0)
            }
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tableStatus = self.tableStatus {
            try encodeContainer.encode(tableStatus.rawValue, forKey: .tableStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableStatus.self, forKey: .tableStatus)
        tableStatus = tableStatusDecoded
        let replicasContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaAutoScalingDescription?].self, forKey: .replicas)
        var replicasDecoded0:[DynamoDBClientTypes.ReplicaAutoScalingDescription]? = nil
        if let replicasContainer = replicasContainer {
            replicasDecoded0 = [DynamoDBClientTypes.ReplicaAutoScalingDescription]()
            for structure0 in replicasContainer {
                if let structure0 = structure0 {
                    replicasDecoded0?.append(structure0)
                }
            }
        }
        replicas = replicasDecoded0
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling configuration for a global table.
    public struct TableAutoScalingDescription: Swift.Equatable {
        /// Represents replicas of the global table.
        public var replicas: [DynamoDBClientTypes.ReplicaAutoScalingDescription]?
        /// The name of the table.
        public var tableName: Swift.String?
        /// The current state of the table:
        ///
        /// * CREATING - The table is being created.
        ///
        /// * UPDATING - The table is being updated.
        ///
        /// * DELETING - The table is being deleted.
        ///
        /// * ACTIVE - The table is ready for use.
        public var tableStatus: DynamoDBClientTypes.TableStatus?

        public init (
            replicas: [DynamoDBClientTypes.ReplicaAutoScalingDescription]? = nil,
            tableName: Swift.String? = nil,
            tableStatus: DynamoDBClientTypes.TableStatus? = nil
        )
        {
            self.replicas = replicas
            self.tableName = tableName
            self.tableStatus = tableStatus
        }
    }

}

extension DynamoDBClientTypes {
    public enum TableClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case standardInfrequentAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [TableClass] {
            return [
                .standard,
                .standardInfrequentAccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .standardInfrequentAccess: return "STANDARD_INFREQUENT_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TableClass(rawValue: rawValue) ?? TableClass.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.TableClassSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdateDateTime = "LastUpdateDateTime"
        case tableClass = "TableClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdateDateTime = self.lastUpdateDateTime {
            try encodeContainer.encodeTimestamp(lastUpdateDateTime, format: .epochSeconds, forKey: .lastUpdateDateTime)
        }
        if let tableClass = self.tableClass {
            try encodeContainer.encode(tableClass.rawValue, forKey: .tableClass)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableClassDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .tableClass)
        tableClass = tableClassDecoded
        let lastUpdateDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateDateTime)
        lastUpdateDateTime = lastUpdateDateTimeDecoded
    }
}

extension DynamoDBClientTypes {
    /// Contains details of the table class.
    public struct TableClassSummary: Swift.Equatable {
        /// The date and time at which the table class was last updated.
        public var lastUpdateDateTime: ClientRuntime.Date?
        /// The table class of the specified table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
        public var tableClass: DynamoDBClientTypes.TableClass?

        public init (
            lastUpdateDateTime: ClientRuntime.Date? = nil,
            tableClass: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.lastUpdateDateTime = lastUpdateDateTime
            self.tableClass = tableClass
        }
    }

}

extension DynamoDBClientTypes.TableCreationParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case provisionedThroughput = "ProvisionedThroughput"
        case sseSpecification = "SSESpecification"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinition0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinition0)
            }
        }
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindex0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindex0)
            }
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let sseSpecification = self.sseSpecification {
            try encodeContainer.encode(sseSpecification, forKey: .sseSpecification)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDBClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDBClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let sseSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSESpecification.self, forKey: .sseSpecification)
        sseSpecification = sseSpecificationDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}

extension DynamoDBClientTypes {
    /// The parameters for the table created as part of the import operation.
    public struct TableCreationParameters: Swift.Equatable {
        /// The attributes of the table created as part of the import operation.
        /// This member is required.
        public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
        /// The billing mode for provisioning the table created as part of the import operation.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// The Global Secondary Indexes (GSI) of the table to be created as part of the import operation.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]?
        /// The primary key and option sort key of the table created as part of the import operation.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
        /// Represents the settings used to enable server-side encryption.
        public var sseSpecification: DynamoDBClientTypes.SSESpecification?
        /// The name of the table created as part of the import operation.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
            sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.attributeDefinitions = attributeDefinitions
            self.billingMode = billingMode
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.keySchema = keySchema
            self.provisionedThroughput = provisionedThroughput
            self.sseSpecification = sseSpecification
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes.TableDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archivalSummary = "ArchivalSummary"
        case attributeDefinitions = "AttributeDefinitions"
        case billingModeSummary = "BillingModeSummary"
        case creationDateTime = "CreationDateTime"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case globalTableVersion = "GlobalTableVersion"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case latestStreamArn = "LatestStreamArn"
        case latestStreamLabel = "LatestStreamLabel"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicas = "Replicas"
        case restoreSummary = "RestoreSummary"
        case sseDescription = "SSEDescription"
        case streamSpecification = "StreamSpecification"
        case tableArn = "TableArn"
        case tableClassSummary = "TableClassSummary"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
        case tableStatus = "TableStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archivalSummary = self.archivalSummary {
            try encodeContainer.encode(archivalSummary, forKey: .archivalSummary)
        }
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinition0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinition0)
            }
        }
        if let billingModeSummary = self.billingModeSummary {
            try encodeContainer.encode(billingModeSummary, forKey: .billingModeSummary)
        }
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexdescription0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexdescription0)
            }
        }
        if let globalTableVersion = self.globalTableVersion {
            try encodeContainer.encode(globalTableVersion, forKey: .globalTableVersion)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschemaelement0 in keySchema {
                try keySchemaContainer.encode(keyschemaelement0)
            }
        }
        if let latestStreamArn = self.latestStreamArn {
            try encodeContainer.encode(latestStreamArn, forKey: .latestStreamArn)
        }
        if let latestStreamLabel = self.latestStreamLabel {
            try encodeContainer.encode(latestStreamLabel, forKey: .latestStreamLabel)
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexdescription0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexdescription0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicas = replicas {
            var replicasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicas)
            for replicadescription0 in replicas {
                try replicasContainer.encode(replicadescription0)
            }
        }
        if let restoreSummary = self.restoreSummary {
            try encodeContainer.encode(restoreSummary, forKey: .restoreSummary)
        }
        if let sseDescription = self.sseDescription {
            try encodeContainer.encode(sseDescription, forKey: .sseDescription)
        }
        if let streamSpecification = self.streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableClassSummary = self.tableClassSummary {
            try encodeContainer.encode(tableClassSummary, forKey: .tableClassSummary)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tableSizeBytes = self.tableSizeBytes {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
        if let tableStatus = self.tableStatus {
            try encodeContainer.encode(tableStatus.rawValue, forKey: .tableStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDBClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDBClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDBClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDBClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let tableStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableStatus.self, forKey: .tableStatus)
        tableStatus = tableStatusDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputDescription.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let tableSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let billingModeSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingModeSummary.self, forKey: .billingModeSummary)
        billingModeSummary = billingModeSummaryDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.LocalSecondaryIndexDescription?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[DynamoDBClientTypes.LocalSecondaryIndexDescription]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [DynamoDBClientTypes.LocalSecondaryIndexDescription]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndexDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndexDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndexDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let latestStreamLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestStreamLabel)
        latestStreamLabel = latestStreamLabelDecoded
        let latestStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestStreamArn)
        latestStreamArn = latestStreamArnDecoded
        let globalTableVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableVersion)
        globalTableVersion = globalTableVersionDecoded
        let replicasContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaDescription?].self, forKey: .replicas)
        var replicasDecoded0:[DynamoDBClientTypes.ReplicaDescription]? = nil
        if let replicasContainer = replicasContainer {
            replicasDecoded0 = [DynamoDBClientTypes.ReplicaDescription]()
            for structure0 in replicasContainer {
                if let structure0 = structure0 {
                    replicasDecoded0?.append(structure0)
                }
            }
        }
        replicas = replicasDecoded0
        let restoreSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.RestoreSummary.self, forKey: .restoreSummary)
        restoreSummary = restoreSummaryDecoded
        let sseDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSEDescription.self, forKey: .sseDescription)
        sseDescription = sseDescriptionDecoded
        let archivalSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ArchivalSummary.self, forKey: .archivalSummary)
        archivalSummary = archivalSummaryDecoded
        let tableClassSummaryDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClassSummary.self, forKey: .tableClassSummary)
        tableClassSummary = tableClassSummaryDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a table.
    public struct TableDescription: Swift.Equatable {
        /// Contains information about the table archive.
        public var archivalSummary: DynamoDBClientTypes.ArchivalSummary?
        /// An array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema. Each AttributeDefinition object in this array is composed of:
        ///
        /// * AttributeName - The name of the attribute.
        ///
        /// * AttributeType - The data type for the attribute.
        public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
        /// Contains the details for the read/write capacity mode.
        public var billingModeSummary: DynamoDBClientTypes.BillingModeSummary?
        /// The date and time when the table was created, in [UNIX epoch time](http://www.epochconverter.com/) format.
        public var creationDateTime: ClientRuntime.Date?
        /// The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:
        ///
        /// * Backfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)
        ///
        /// * IndexName - The name of the global secondary index.
        ///
        /// * IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * IndexStatus - The current status of the global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The index is being updated.
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        ///
        ///
        ///
        ///
        /// * ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.
        ///
        /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
        ///
        /// * ProjectionType - One of the following:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        ///
        ///
        ///
        ///
        /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        ///
        ///
        ///
        ///
        /// * ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.
        ///
        ///
        /// If the table is in the DELETING state, no information about indexes will be returned.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexDescription]?
        /// Represents the version of [global tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html) in use, if the table is replicated across Amazon Web Services Regions.
        public var globalTableVersion: Swift.String?
        /// The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The primary key structure for the table. Each KeySchemaElement consists of:
        ///
        /// * AttributeName - The name of the attribute.
        ///
        /// * KeyType - The role of the attribute:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        ///
        ///
        /// For more information about primary keys, see [Primary Key](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey) in the Amazon DynamoDB Developer Guide.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
        public var latestStreamArn: Swift.String?
        /// A timestamp, in ISO 8601 format, for this stream. Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:
        ///
        /// * Amazon Web Services customer ID
        ///
        /// * Table name
        ///
        /// * StreamLabel
        public var latestStreamLabel: Swift.String?
        /// Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:
        ///
        /// * IndexName - The name of the local secondary index.
        ///
        /// * KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.
        ///
        /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
        ///
        /// * ProjectionType - One of the following:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        ///
        ///
        ///
        ///
        /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        ///
        ///
        ///
        ///
        /// * IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * ItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        ///
        /// If the table is in the DELETING state, no information about indexes will be returned.
        public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexDescription]?
        /// The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription?
        /// Represents replicas of the table.
        public var replicas: [DynamoDBClientTypes.ReplicaDescription]?
        /// Contains details for the restore.
        public var restoreSummary: DynamoDBClientTypes.RestoreSummary?
        /// The description of the server-side encryption status on the specified table.
        public var sseDescription: DynamoDBClientTypes.SSEDescription?
        /// The current DynamoDB Streams configuration for the table.
        public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
        /// The Amazon Resource Name (ARN) that uniquely identifies the table.
        public var tableArn: Swift.String?
        /// Contains details of the table class.
        public var tableClassSummary: DynamoDBClientTypes.TableClassSummary?
        /// Unique identifier for the table for which the backup was created.
        public var tableId: Swift.String?
        /// The name of the table.
        public var tableName: Swift.String?
        /// The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var tableSizeBytes: Swift.Int?
        /// The current state of the table:
        ///
        /// * CREATING - The table is being created.
        ///
        /// * UPDATING - The table/index configuration is being updated. The table/index remains available for data operations when UPDATING.
        ///
        /// * DELETING - The table is being deleted.
        ///
        /// * ACTIVE - The table is ready for use.
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the KMS key. DynamoDB will initiate the table archival process when a table's KMS key remains inaccessible for more than seven days.
        ///
        /// * ARCHIVING - The table is being archived. Operations are not allowed until archival is complete.
        ///
        /// * ARCHIVED - The table has been archived. See the ArchivalReason for more information.
        public var tableStatus: DynamoDBClientTypes.TableStatus?

        public init (
            archivalSummary: DynamoDBClientTypes.ArchivalSummary? = nil,
            attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
            billingModeSummary: DynamoDBClientTypes.BillingModeSummary? = nil,
            creationDateTime: ClientRuntime.Date? = nil,
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexDescription]? = nil,
            globalTableVersion: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            latestStreamArn: Swift.String? = nil,
            latestStreamLabel: Swift.String? = nil,
            localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexDescription]? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription? = nil,
            replicas: [DynamoDBClientTypes.ReplicaDescription]? = nil,
            restoreSummary: DynamoDBClientTypes.RestoreSummary? = nil,
            sseDescription: DynamoDBClientTypes.SSEDescription? = nil,
            streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
            tableArn: Swift.String? = nil,
            tableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil,
            tableSizeBytes: Swift.Int? = nil,
            tableStatus: DynamoDBClientTypes.TableStatus? = nil
        )
        {
            self.archivalSummary = archivalSummary
            self.attributeDefinitions = attributeDefinitions
            self.billingModeSummary = billingModeSummary
            self.creationDateTime = creationDateTime
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.globalTableVersion = globalTableVersion
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.latestStreamArn = latestStreamArn
            self.latestStreamLabel = latestStreamLabel
            self.localSecondaryIndexes = localSecondaryIndexes
            self.provisionedThroughput = provisionedThroughput
            self.replicas = replicas
            self.restoreSummary = restoreSummary
            self.sseDescription = sseDescription
            self.streamSpecification = streamSpecification
            self.tableArn = tableArn
            self.tableClassSummary = tableClassSummary
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
            self.tableStatus = tableStatus
        }
    }

}

extension TableInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TableInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A target table with the specified name is either being created or deleted.
public struct TableInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TableInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TableInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TableNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TableNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A source table with the name TableName does not currently exist within the subscriber's account or the subscriber is operating in the wrong Amazon Web Services Region.
public struct TableNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TableNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TableNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DynamoDBClientTypes {
    public enum TableStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case archived
        case archiving
        case creating
        case deleting
        case inaccessibleEncryptionCredentials
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [TableStatus] {
            return [
                .active,
                .archived,
                .archiving,
                .creating,
                .deleting,
                .inaccessibleEncryptionCredentials,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .archived: return "ARCHIVED"
            case .archiving: return "ARCHIVING"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TableStatus(rawValue: rawValue) ?? TableStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DynamoDBClientTypes {
    /// Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. Amazon Web Services-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. Amazon Web Services-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag. For an overview on tagging DynamoDB resources, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the Amazon DynamoDB Developer Guide.
    public struct Tag: Swift.Equatable {
        /// The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag. Tag values are case-sensitive and can be null.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to be assigned to the Amazon DynamoDB resource.
    /// This member is required.
    public var tags: [DynamoDBClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [DynamoDBClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DynamoDBClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DynamoDBClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension DynamoDBClientTypes.TimeToLiveDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case timeToLiveStatus = "TimeToLiveStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let timeToLiveStatus = self.timeToLiveStatus {
            try encodeContainer.encode(timeToLiveStatus.rawValue, forKey: .timeToLiveStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TimeToLiveStatus.self, forKey: .timeToLiveStatus)
        timeToLiveStatus = timeToLiveStatusDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// The description of the Time to Live (TTL) status on the specified table.
    public struct TimeToLiveDescription: Swift.Equatable {
        /// The name of the TTL attribute for items in the table.
        public var attributeName: Swift.String?
        /// The TTL status for the table.
        public var timeToLiveStatus: DynamoDBClientTypes.TimeToLiveStatus?

        public init (
            attributeName: Swift.String? = nil,
            timeToLiveStatus: DynamoDBClientTypes.TimeToLiveStatus? = nil
        )
        {
            self.attributeName = attributeName
            self.timeToLiveStatus = timeToLiveStatus
        }
    }

}

extension DynamoDBClientTypes.TimeToLiveSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
    public struct TimeToLiveSpecification: Swift.Equatable {
        /// The name of the TTL attribute used to store the expiration time for items in the table.
        /// This member is required.
        public var attributeName: Swift.String?
        /// Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var enabled: Swift.Bool?

        public init (
            attributeName: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.attributeName = attributeName
            self.enabled = enabled
        }
    }

}

extension DynamoDBClientTypes {
    public enum TimeToLiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeToLiveStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimeToLiveStatus(rawValue: rawValue) ?? TimeToLiveStatus.sdkUnknown(rawValue)
        }
    }
}

extension DynamoDBClientTypes.TransactGetItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `get` = "Get"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `get` = self.`get` {
            try encodeContainer.encode(`get`, forKey: .`get`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let getDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Get.self, forKey: .get)
        `get` = getDecoded
    }
}

extension DynamoDBClientTypes {
    /// Specifies an item to be retrieved as part of the transaction.
    public struct TransactGetItem: Swift.Equatable {
        /// Contains the primary key that identifies the item to get, together with the name of the table that contains the item, and optionally the specific attributes of the item to retrieve.
        /// This member is required.
        public var `get`: DynamoDBClientTypes.Get?

        public init (
            `get`: DynamoDBClientTypes.Get? = nil
        )
        {
            self.`get` = `get`
        }
    }

}

extension TransactGetItemsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactItems = "TransactItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let transactItems = transactItems {
            var transactItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactItems)
            for transactgetitem0 in transactItems {
                try transactItemsContainer.encode(transactgetitem0)
            }
        }
    }
}

extension TransactGetItemsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TransactGetItemsInput: Swift.Equatable {
    /// A value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// An ordered array of up to 100 TransactGetItem objects, each of which contains a Get structure.
    /// This member is required.
    public var transactItems: [DynamoDBClientTypes.TransactGetItem]?

    public init (
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        transactItems: [DynamoDBClientTypes.TransactGetItem]? = nil
    )
    {
        self.returnConsumedCapacity = returnConsumedCapacity
        self.transactItems = transactItems
    }
}

struct TransactGetItemsInputBody: Swift.Equatable {
    let transactItems: [DynamoDBClientTypes.TransactGetItem]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
}

extension TransactGetItemsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactItems = "TransactItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactItemsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.TransactGetItem?].self, forKey: .transactItems)
        var transactItemsDecoded0:[DynamoDBClientTypes.TransactGetItem]? = nil
        if let transactItemsContainer = transactItemsContainer {
            transactItemsDecoded0 = [DynamoDBClientTypes.TransactGetItem]()
            for structure0 in transactItemsContainer {
                if let structure0 = structure0 {
                    transactItemsDecoded0?.append(structure0)
                }
            }
        }
        transactItems = transactItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension TransactGetItemsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransactGetItemsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TransactGetItemsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransactGetItemsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TransactGetItemsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
        } else {
            self.consumedCapacity = nil
            self.responses = nil
        }
    }
}

public struct TransactGetItemsOutputResponse: Swift.Equatable {
    /// If the ReturnConsumedCapacity value was TOTAL, this is an array of ConsumedCapacity objects, one for each table addressed by TransactGetItem objects in the TransactItems parameter. These ConsumedCapacity objects report the read-capacity units consumed by the TransactGetItems call in that table.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// An ordered array of up to 100 ItemResponse objects, each of which corresponds to the TransactGetItem object in the same position in the TransactItems array. Each ItemResponse object contains a Map of the name-value pairs that are the projected attributes of the requested item. If a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.
    public var responses: [DynamoDBClientTypes.ItemResponse]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.ItemResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

struct TransactGetItemsOutputResponseBody: Swift.Equatable {
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    let responses: [DynamoDBClientTypes.ItemResponse]?
}

extension TransactGetItemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
        let responsesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ItemResponse?].self, forKey: .responses)
        var responsesDecoded0:[DynamoDBClientTypes.ItemResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [DynamoDBClientTypes.ItemResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
    }
}

extension DynamoDBClientTypes.TransactWriteItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionCheck = "ConditionCheck"
        case delete = "Delete"
        case put = "Put"
        case update = "Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionCheck = self.conditionCheck {
            try encodeContainer.encode(conditionCheck, forKey: .conditionCheck)
        }
        if let delete = self.delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let put = self.put {
            try encodeContainer.encode(put, forKey: .put)
        }
        if let update = self.update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionCheckDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionCheck.self, forKey: .conditionCheck)
        conditionCheck = conditionCheckDecoded
        let putDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Put.self, forKey: .put)
        put = putDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Delete.self, forKey: .delete)
        delete = deleteDecoded
        let updateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension DynamoDBClientTypes {
    /// A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.
    public struct TransactWriteItem: Swift.Equatable {
        /// A request to perform a check item operation.
        public var conditionCheck: DynamoDBClientTypes.ConditionCheck?
        /// A request to perform a DeleteItem operation.
        public var delete: DynamoDBClientTypes.Delete?
        /// A request to perform a PutItem operation.
        public var put: DynamoDBClientTypes.Put?
        /// A request to perform an UpdateItem operation.
        public var update: DynamoDBClientTypes.Update?

        public init (
            conditionCheck: DynamoDBClientTypes.ConditionCheck? = nil,
            delete: DynamoDBClientTypes.Delete? = nil,
            put: DynamoDBClientTypes.Put? = nil,
            update: DynamoDBClientTypes.Update? = nil
        )
        {
            self.conditionCheck = conditionCheck
            self.delete = delete
            self.put = put
            self.update = update
        }
    }

}

extension TransactWriteItemsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case transactItems = "TransactItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let transactItems = transactItems {
            var transactItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactItems)
            for transactwriteitem0 in transactItems {
                try transactItemsContainer.encode(transactwriteitem0)
            }
        }
    }
}

extension TransactWriteItemsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TransactWriteItemsInput: Swift.Equatable {
    /// Providing a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call. Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity> parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item. A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
    public var clientRequestToken: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// An ordered array of up to 100 TransactWriteItem objects, each of which contains a ConditionCheck, Put, Update, or Delete object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item.
    /// This member is required.
    public var transactItems: [DynamoDBClientTypes.TransactWriteItem]?

    public init (
        clientRequestToken: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        transactItems: [DynamoDBClientTypes.TransactWriteItem]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.transactItems = transactItems
    }
}

struct TransactWriteItemsInputBody: Swift.Equatable {
    let transactItems: [DynamoDBClientTypes.TransactWriteItem]?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    let clientRequestToken: Swift.String?
}

extension TransactWriteItemsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case transactItems = "TransactItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactItemsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.TransactWriteItem?].self, forKey: .transactItems)
        var transactItemsDecoded0:[DynamoDBClientTypes.TransactWriteItem]? = nil
        if let transactItemsContainer = transactItemsContainer {
            transactItemsDecoded0 = [DynamoDBClientTypes.TransactWriteItem]()
            for structure0 in transactItemsContainer {
                if let structure0 = structure0 {
                    transactItemsDecoded0?.append(structure0)
                }
            }
        }
        transactItems = transactItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension TransactWriteItemsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransactWriteItemsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionInProgressException" : self = .transactionInProgressException(try TransactionInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TransactWriteItemsOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case transactionInProgressException(TransactionInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransactWriteItemsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TransactWriteItemsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

public struct TransactWriteItemsOutputResponse: Swift.Equatable {
    /// The capacity units consumed by the entire TransactWriteItems operation. The values of the list are ordered according to the ordering of the TransactItems request parameter.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A list of tables that were processed by TransactWriteItems and, for each table, information about any item collections that were affected by individual UpdateItem, PutItem, or DeleteItem operations.
    public var itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]?

    public init (
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct TransactWriteItemsOutputResponseBody: Swift.Equatable {
    let consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    let itemCollectionMetrics: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]?
}

extension TransactWriteItemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDBClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDBClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
        let itemCollectionMetricsContainer = try containerValues.decodeIfPresent([Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics?]?].self, forKey: .itemCollectionMetrics)
        var itemCollectionMetricsDecoded0: [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]? = nil
        if let itemCollectionMetricsContainer = itemCollectionMetricsContainer {
            itemCollectionMetricsDecoded0 = [Swift.String:[DynamoDBClientTypes.ItemCollectionMetrics]]()
            for (key0, itemcollectionmetricsmultiple0) in itemCollectionMetricsContainer {
                var itemcollectionmetricsmultiple0Decoded0: [DynamoDBClientTypes.ItemCollectionMetrics]? = nil
                if let itemcollectionmetricsmultiple0 = itemcollectionmetricsmultiple0 {
                    itemcollectionmetricsmultiple0Decoded0 = [DynamoDBClientTypes.ItemCollectionMetrics]()
                    for structure1 in itemcollectionmetricsmultiple0 {
                        if let structure1 = structure1 {
                            itemcollectionmetricsmultiple0Decoded0?.append(structure1)
                        }
                    }
                }
                itemCollectionMetricsDecoded0?[key0] = itemcollectionmetricsmultiple0Decoded0
            }
        }
        itemCollectionMetrics = itemCollectionMetricsDecoded0
    }
}

extension TransactionCanceledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TransactionCanceledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.cancellationReasons = output.cancellationReasons
            self.message = output.message
        } else {
            self.cancellationReasons = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The entire transaction request was canceled. DynamoDB cancels a TransactWriteItems request under the following circumstances:
///
/// * A condition in one of the condition expressions is not met.
///
/// * A table in the TransactWriteItems request is in a different account or region.
///
/// * More than one action in the TransactWriteItems operation targets the same item.
///
/// * There is insufficient provisioned capacity for the transaction to be completed.
///
/// * An item size becomes too large (larger than 400 KB), or a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.
///
/// * There is a user error, such as an invalid data format.
///
///
/// DynamoDB cancels a TransactGetItems request under the following circumstances:
///
/// * There is an ongoing TransactGetItems operation that conflicts with a concurrent PutItem, UpdateItem, DeleteItem or TransactWriteItems request. In this case the TransactGetItems operation fails with a TransactionCanceledException.
///
/// * A table in the TransactGetItems request is in a different account or region.
///
/// * There is insufficient provisioned capacity for the transaction to be completed.
///
/// * There is a user error, such as an invalid data format.
///
///
/// If using Java, DynamoDB lists the cancellation reasons on the CancellationReasons property. This property is not set for other languages. Transaction cancellation reasons are ordered in the order of requested items, if an item has no error it will have None code and Null message. Cancellation reason codes and possible error messages:
///
/// * No Errors:
///
/// * Code: None
///
/// * Message: null
///
///
///
///
/// * Conditional Check Failed:
///
/// * Code: ConditionalCheckFailed
///
/// * Message: The conditional request failed.
///
///
///
///
/// * Item Collection Size Limit Exceeded:
///
/// * Code: ItemCollectionSizeLimitExceeded
///
/// * Message: Collection size exceeded.
///
///
///
///
/// * Transaction Conflict:
///
/// * Code: TransactionConflict
///
/// * Message: Transaction is ongoing for the item.
///
///
///
///
/// * Provisioned Throughput Exceeded:
///
/// * Code: ProvisionedThroughputExceeded
///
/// * Messages:
///
/// * The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API. This Message is received when provisioned throughput is exceeded is on a provisioned DynamoDB table.
///
/// * The level of configured provisioned throughput for one or more global secondary indexes of the table was exceeded. Consider increasing your provisioning level for the under-provisioned global secondary indexes with the UpdateTable API. This message is returned when provisioned throughput is exceeded is on a provisioned GSI.
///
///
///
///
///
///
///
/// * Throttling Error:
///
/// * Code: ThrottlingError
///
/// * Messages:
///
/// * Throughput exceeds the current capacity of your table or index. DynamoDB is automatically scaling your table or index so please try again shortly. If exceptions persist, check if you have a hot key: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html. This message is returned when writes get throttled on an On-Demand table as DynamoDB is automatically scaling the table.
///
/// * Throughput exceeds the current capacity for one or more global secondary indexes. DynamoDB is automatically scaling your index so please try again shortly. This message is returned when when writes get throttled on an On-Demand GSI as DynamoDB is automatically scaling the GSI.
///
///
///
///
///
///
///
/// * Validation Error:
///
/// * Code: ValidationError
///
/// * Messages:
///
/// * One or more parameter values were invalid.
///
/// * The update expression attempted to update the secondary index key beyond allowed size limits.
///
/// * The update expression attempted to update the secondary index key to unsupported type.
///
/// * An operand in the update expression has an incorrect data type.
///
/// * Item size to update has exceeded the maximum allowed size.
///
/// * Number overflow. Attempting to store a number with magnitude larger than supported range.
///
/// * Type mismatch for attribute to update.
///
/// * Nesting Levels have exceeded supported limits.
///
/// * The document path provided in the update expression is invalid for update.
///
/// * The provided expression refers to an attribute that does not exist in the item.
public struct TransactionCanceledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A list of cancellation reasons.
    public var cancellationReasons: [DynamoDBClientTypes.CancellationReason]?
    public var message: Swift.String?

    public init (
        cancellationReasons: [DynamoDBClientTypes.CancellationReason]? = nil,
        message: Swift.String? = nil
    )
    {
        self.cancellationReasons = cancellationReasons
        self.message = message
    }
}

struct TransactionCanceledExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let cancellationReasons: [DynamoDBClientTypes.CancellationReason]?
}

extension TransactionCanceledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancellationReasons = "CancellationReasons"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let cancellationReasonsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.CancellationReason?].self, forKey: .cancellationReasons)
        var cancellationReasonsDecoded0:[DynamoDBClientTypes.CancellationReason]? = nil
        if let cancellationReasonsContainer = cancellationReasonsContainer {
            cancellationReasonsDecoded0 = [DynamoDBClientTypes.CancellationReason]()
            for structure0 in cancellationReasonsContainer {
                if let structure0 = structure0 {
                    cancellationReasonsDecoded0?.append(structure0)
                }
            }
        }
        cancellationReasons = cancellationReasonsDecoded0
    }
}

extension TransactionConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TransactionConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Operation was rejected because there is an ongoing transaction for the item.
public struct TransactionConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TransactionConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TransactionConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TransactionInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TransactionInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The transaction with the given request token is already in progress.
public struct TransactionInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TransactionInProgressExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TransactionInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeystring0 in tagKeys {
                try tagKeysContainer.encode(tagkeystring0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension DynamoDBClientTypes.Update: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = self.returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let updateExpression = self.updateExpression {
            try encodeContainer.encode(updateExpression, forKey: .updateExpression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let updateExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform an UpdateItem operation.
    public struct Update: Swift.Equatable {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Update condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the UpdateItem request.
        /// This member is required.
        public var tableName: Swift.String?
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.
        /// This member is required.
        public var updateExpression: Swift.String?

        public init (
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil,
            updateExpression: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
            self.updateExpression = updateExpression
        }
    }

}

extension UpdateContinuousBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pointInTimeRecoverySpecification = "PointInTimeRecoverySpecification"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pointInTimeRecoverySpecification = self.pointInTimeRecoverySpecification {
            try encodeContainer.encode(pointInTimeRecoverySpecification, forKey: .pointInTimeRecoverySpecification)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateContinuousBackupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateContinuousBackupsInput: Swift.Equatable {
    /// Represents the settings used to enable point in time recovery.
    /// This member is required.
    public var pointInTimeRecoverySpecification: DynamoDBClientTypes.PointInTimeRecoverySpecification?
    /// The name of the table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        pointInTimeRecoverySpecification: DynamoDBClientTypes.PointInTimeRecoverySpecification? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.pointInTimeRecoverySpecification = pointInTimeRecoverySpecification
        self.tableName = tableName
    }
}

struct UpdateContinuousBackupsInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let pointInTimeRecoverySpecification: DynamoDBClientTypes.PointInTimeRecoverySpecification?
}

extension UpdateContinuousBackupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pointInTimeRecoverySpecification = "PointInTimeRecoverySpecification"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let pointInTimeRecoverySpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.PointInTimeRecoverySpecification.self, forKey: .pointInTimeRecoverySpecification)
        pointInTimeRecoverySpecification = pointInTimeRecoverySpecificationDecoded
    }
}

extension UpdateContinuousBackupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContinuousBackupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContinuousBackupsUnavailableException" : self = .continuousBackupsUnavailableException(try ContinuousBackupsUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateContinuousBackupsOutputError: Swift.Error, Swift.Equatable {
    case continuousBackupsUnavailableException(ContinuousBackupsUnavailableException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContinuousBackupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateContinuousBackupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.continuousBackupsDescription = output.continuousBackupsDescription
        } else {
            self.continuousBackupsDescription = nil
        }
    }
}

public struct UpdateContinuousBackupsOutputResponse: Swift.Equatable {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public var continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?

    public init (
        continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

struct UpdateContinuousBackupsOutputResponseBody: Swift.Equatable {
    let continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?
}

extension UpdateContinuousBackupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuousBackupsDescription = "ContinuousBackupsDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContinuousBackupsDescription.self, forKey: .continuousBackupsDescription)
        continuousBackupsDescription = continuousBackupsDescriptionDecoded
    }
}

extension UpdateContributorInsightsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsAction = "ContributorInsightsAction"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contributorInsightsAction = self.contributorInsightsAction {
            try encodeContainer.encode(contributorInsightsAction.rawValue, forKey: .contributorInsightsAction)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateContributorInsightsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateContributorInsightsInput: Swift.Equatable {
    /// Represents the contributor insights action.
    /// This member is required.
    public var contributorInsightsAction: DynamoDBClientTypes.ContributorInsightsAction?
    /// The global secondary index name, if applicable.
    public var indexName: Swift.String?
    /// The name of the table.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        contributorInsightsAction: DynamoDBClientTypes.ContributorInsightsAction? = nil,
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsAction = contributorInsightsAction
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct UpdateContributorInsightsInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
    let contributorInsightsAction: DynamoDBClientTypes.ContributorInsightsAction?
}

extension UpdateContributorInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsAction = "ContributorInsightsAction"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsActionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContributorInsightsAction.self, forKey: .contributorInsightsAction)
        contributorInsightsAction = contributorInsightsActionDecoded
    }
}

extension UpdateContributorInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContributorInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateContributorInsightsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContributorInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contributorInsightsStatus = output.contributorInsightsStatus
            self.indexName = output.indexName
            self.tableName = output.tableName
        } else {
            self.contributorInsightsStatus = nil
            self.indexName = nil
            self.tableName = nil
        }
    }
}

public struct UpdateContributorInsightsOutputResponse: Swift.Equatable {
    /// The status of contributor insights
    public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
    /// The name of the global secondary index, if applicable.
    public var indexName: Swift.String?
    /// The name of the table.
    public var tableName: Swift.String?

    public init (
        contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsStatus = contributorInsightsStatus
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct UpdateContributorInsightsOutputResponseBody: Swift.Equatable {
    let tableName: Swift.String?
    let indexName: Swift.String?
    let contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
}

extension UpdateContributorInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
    }
}

extension DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents the new provisioned throughput settings to be applied to a global secondary index.
    public struct UpdateGlobalSecondaryIndexAction: Swift.Equatable {
        /// The name of the global secondary index to be updated.
        /// This member is required.
        public var indexName: Swift.String?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        /// This member is required.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init (
            indexName: Swift.String? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension UpdateGlobalTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaUpdates = "ReplicaUpdates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicaupdate0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicaupdate0)
            }
        }
    }
}

extension UpdateGlobalTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGlobalTableInput: Swift.Equatable {
    /// The global table name.
    /// This member is required.
    public var globalTableName: Swift.String?
    /// A list of Regions that should be added or removed from the global table.
    /// This member is required.
    public var replicaUpdates: [DynamoDBClientTypes.ReplicaUpdate]?

    public init (
        globalTableName: Swift.String? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicaUpdate]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaUpdates = replicaUpdates
    }
}

struct UpdateGlobalTableInputBody: Swift.Equatable {
    let globalTableName: Swift.String?
    let replicaUpdates: [DynamoDBClientTypes.ReplicaUpdate]?
}

extension UpdateGlobalTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaUpdates = "ReplicaUpdates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[DynamoDBClientTypes.ReplicaUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [DynamoDBClientTypes.ReplicaUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}

extension UpdateGlobalTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGlobalTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaAlreadyExistsException" : self = .replicaAlreadyExistsException(try ReplicaAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaNotFoundException" : self = .replicaNotFoundException(try ReplicaNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGlobalTableOutputError: Swift.Error, Swift.Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case replicaAlreadyExistsException(ReplicaAlreadyExistsException)
    case replicaNotFoundException(ReplicaNotFoundException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGlobalTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct UpdateGlobalTableOutputResponse: Swift.Equatable {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init (
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct UpdateGlobalTableOutputResponseBody: Swift.Equatable {
    let globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?
}

extension UpdateGlobalTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

extension UpdateGlobalTableSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableBillingMode = self.globalTableBillingMode {
            try encodeContainer.encode(globalTableBillingMode.rawValue, forKey: .globalTableBillingMode)
        }
        if let globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate {
            var globalTableGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
            for globaltableglobalsecondaryindexsettingsupdate0 in globalTableGlobalSecondaryIndexSettingsUpdate {
                try globalTableGlobalSecondaryIndexSettingsUpdateContainer.encode(globaltableglobalsecondaryindexsettingsupdate0)
            }
        }
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let globalTableProvisionedWriteCapacityUnits = self.globalTableProvisionedWriteCapacityUnits {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityUnits, forKey: .globalTableProvisionedWriteCapacityUnits)
        }
        if let replicaSettingsUpdate = replicaSettingsUpdate {
            var replicaSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaSettingsUpdate)
            for replicasettingsupdate0 in replicaSettingsUpdate {
                try replicaSettingsUpdateContainer.encode(replicasettingsupdate0)
            }
        }
    }
}

extension UpdateGlobalTableSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGlobalTableSettingsInput: Swift.Equatable {
    /// The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
    public var globalTableBillingMode: DynamoDBClientTypes.BillingMode?
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public var globalTableGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]?
    /// The name of the global table
    /// This member is required.
    public var globalTableName: Swift.String?
    /// Auto scaling settings for managing provisioned write capacity for the global table.
    public var globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
    public var globalTableProvisionedWriteCapacityUnits: Swift.Int?
    /// Represents the settings for a global table in a Region that will be modified.
    public var replicaSettingsUpdate: [DynamoDBClientTypes.ReplicaSettingsUpdate]?

    public init (
        globalTableBillingMode: DynamoDBClientTypes.BillingMode? = nil,
        globalTableGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil,
        globalTableName: Swift.String? = nil,
        globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
        globalTableProvisionedWriteCapacityUnits: Swift.Int? = nil,
        replicaSettingsUpdate: [DynamoDBClientTypes.ReplicaSettingsUpdate]? = nil
    )
    {
        self.globalTableBillingMode = globalTableBillingMode
        self.globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate
        self.globalTableName = globalTableName
        self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
        self.globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits
        self.replicaSettingsUpdate = replicaSettingsUpdate
    }
}

struct UpdateGlobalTableSettingsInputBody: Swift.Equatable {
    let globalTableName: Swift.String?
    let globalTableBillingMode: DynamoDBClientTypes.BillingMode?
    let globalTableProvisionedWriteCapacityUnits: Swift.Int?
    let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    let globalTableGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]?
    let replicaSettingsUpdate: [DynamoDBClientTypes.ReplicaSettingsUpdate]?
}

extension UpdateGlobalTableSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let globalTableBillingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .globalTableBillingMode)
        globalTableBillingMode = globalTableBillingModeDecoded
        let globalTableProvisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .globalTableProvisionedWriteCapacityUnits)
        globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnitsDecoded
        let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdateDecoded
        let globalTableGlobalSecondaryIndexSettingsUpdateContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate?].self, forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
        var globalTableGlobalSecondaryIndexSettingsUpdateDecoded0:[DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil
        if let globalTableGlobalSecondaryIndexSettingsUpdateContainer = globalTableGlobalSecondaryIndexSettingsUpdateContainer {
            globalTableGlobalSecondaryIndexSettingsUpdateDecoded0 = [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]()
            for structure0 in globalTableGlobalSecondaryIndexSettingsUpdateContainer {
                if let structure0 = structure0 {
                    globalTableGlobalSecondaryIndexSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdateDecoded0
        let replicaSettingsUpdateContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaSettingsUpdate?].self, forKey: .replicaSettingsUpdate)
        var replicaSettingsUpdateDecoded0:[DynamoDBClientTypes.ReplicaSettingsUpdate]? = nil
        if let replicaSettingsUpdateContainer = replicaSettingsUpdateContainer {
            replicaSettingsUpdateDecoded0 = [DynamoDBClientTypes.ReplicaSettingsUpdate]()
            for structure0 in replicaSettingsUpdateContainer {
                if let structure0 = structure0 {
                    replicaSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        replicaSettingsUpdate = replicaSettingsUpdateDecoded0
    }
}

extension UpdateGlobalTableSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGlobalTableSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IndexNotFoundException" : self = .indexNotFoundException(try IndexNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaNotFoundException" : self = .replicaNotFoundException(try ReplicaNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGlobalTableSettingsOutputError: Swift.Error, Swift.Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case indexNotFoundException(IndexNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case replicaNotFoundException(ReplicaNotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGlobalTableSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGlobalTableSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalTableName = output.globalTableName
            self.replicaSettings = output.replicaSettings
        } else {
            self.globalTableName = nil
            self.replicaSettings = nil
        }
    }
}

public struct UpdateGlobalTableSettingsOutputResponse: Swift.Equatable {
    /// The name of the global table.
    public var globalTableName: Swift.String?
    /// The Region-specific settings for the global table.
    public var replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?

    public init (
        globalTableName: Swift.String? = nil,
        replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

struct UpdateGlobalTableSettingsOutputResponseBody: Swift.Equatable {
    let globalTableName: Swift.String?
    let replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?
}

extension UpdateGlobalTableSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaSettings = "ReplicaSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaSettingsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaSettingsDescription?].self, forKey: .replicaSettings)
        var replicaSettingsDecoded0:[DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
        if let replicaSettingsContainer = replicaSettingsContainer {
            replicaSettingsDecoded0 = [DynamoDBClientTypes.ReplicaSettingsDescription]()
            for structure0 in replicaSettingsContainer {
                if let structure0 = structure0 {
                    replicaSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaSettings = replicaSettingsDecoded0
    }
}

extension UpdateItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeUpdates = attributeUpdates {
            var attributeUpdatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeUpdates)
            for (dictKey0, attributeUpdates0) in attributeUpdates {
                try attributeUpdatesContainer.encode(attributeUpdates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expected)
            for (dictKey0, expectedAttributeMap0) in expected {
                try expectedContainer.encode(expectedAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionAttributeNameMap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionAttributeNameMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionAttributeValueMap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionAttributeValueMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = self.returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let updateExpression = self.updateExpression {
            try encodeContainer.encode(updateExpression, forKey: .updateExpression)
        }
    }
}

extension UpdateItemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdateItem operation.
public struct UpdateItemInput: Swift.Equatable {
    /// This is a legacy parameter. Use UpdateExpression instead. For more information, see [AttributeUpdates](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html) in the Amazon DynamoDB Developer Guide.
    public var attributeUpdates: [Swift.String:DynamoDBClientTypes.AttributeValueUpdate]?
    /// A condition that must be satisfied in order for a conditional update to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information about condition expressions, see [Specifying Conditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide.) To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information about expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String:Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appear before or after they are updated. For UpdateItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.
    ///
    /// * UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.
    ///
    /// * ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.
    ///
    /// * UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.
    ///
    ///
    /// There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// The name of the table containing the item to update.
    /// This member is required.
    public var tableName: Swift.String?
    /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them. The following action values are available for UpdateExpression.
    ///
    /// * SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :valSET supports the following functions:
    ///
    /// * if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.
    ///
    /// * list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.
    ///
    ///
    /// These function names are case-sensitive.
    ///
    /// * REMOVE - Removes one or more attributes from an item.
    ///
    /// * ADD - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:
    ///
    /// * If the existing attribute is a number, and if Value is also a number, then Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute. If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. Similarly, if you use ADD for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update doesn't have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.
    ///
    /// * If the existing data type is a set and if Value is also a set, then Value is added to the existing set. For example, if the attribute value is the set [1,2], and the ADD action specified [3], then the final attribute value is [1,2,3]. An error occurs if an ADD action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings.
    ///
    ///
    /// The ADD action only supports Number and set data types. In addition, ADD can only be used on top-level attributes, not nested attributes.
    ///
    /// * DELETE - Deletes an element from a set. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specifies [a,c], then the final attribute value is [b]. Specifying an empty set is an error. The DELETE action only supports set data types. In addition, DELETE can only be used on top-level attributes, not nested attributes.
    ///
    ///
    /// You can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5 For more information on update expressions, see [Modifying Items and Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html) in the Amazon DynamoDB Developer Guide.
    public var updateExpression: Swift.String?

    public init (
        attributeUpdates: [Swift.String:DynamoDBClientTypes.AttributeValueUpdate]? = nil,
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String:Swift.String]? = nil,
        expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        key: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        tableName: Swift.String? = nil,
        updateExpression: Swift.String? = nil
    )
    {
        self.attributeUpdates = attributeUpdates
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
        self.updateExpression = updateExpression
    }
}

struct UpdateItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let key: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let attributeUpdates: [Swift.String:DynamoDBClientTypes.AttributeValueUpdate]?
    let expected: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]?
    let conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    let returnValues: DynamoDBClientTypes.ReturnValue?
    let returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    let updateExpression: Swift.String?
    let conditionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDBClientTypes.AttributeValue]?
}

extension UpdateItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributeUpdatesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValueUpdate?].self, forKey: .attributeUpdates)
        var attributeUpdatesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValueUpdate]? = nil
        if let attributeUpdatesContainer = attributeUpdatesContainer {
            attributeUpdatesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValueUpdate]()
            for (key0, attributevalueupdate0) in attributeUpdatesContainer {
                if let attributevalueupdate0 = attributevalueupdate0 {
                    attributeUpdatesDecoded0?[key0] = attributevalueupdate0
                }
            }
        }
        attributeUpdates = attributeUpdatesDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [Swift.String:DynamoDBClientTypes.ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let updateExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension UpdateItemOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateItemOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateItemOutputError: Swift.Error, Swift.Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateItemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateItemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// Represents the output of an UpdateItem operation.
public struct UpdateItemOutputResponse: Swift.Equatable {
    /// A map of attribute values as they appear before or after the UpdateItem operation, as determined by the ReturnValues parameter. The Attributes map is only present if ReturnValues was specified as something other than NONE in the request. Each element represents one attribute.
    public var attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the UpdateItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Provisioned Throughput](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the UpdateItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init (
        attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct UpdateItemOutputResponseBody: Swift.Equatable {
    let attributes: [Swift.String:DynamoDBClientTypes.AttributeValue]?
    let consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    let itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?
}

extension UpdateItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDBClientTypes.AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:DynamoDBClientTypes.AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:DynamoDBClientTypes.AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension DynamoDBClientTypes.UpdateReplicationGroupMemberAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kmsMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case tableClassOverride = "TableClassOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindex0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindex0)
            }
        }
        if let kmsMasterKeyId = self.kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let tableClassOverride = self.tableClassOverride {
            try encodeContainer.encode(tableClassOverride.rawValue, forKey: .tableClassOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let tableClassOverrideDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .tableClassOverride)
        tableClassOverride = tableClassOverrideDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be modified.
    public struct UpdateReplicationGroupMemberAction: Swift.Equatable {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]?
        /// The KMS key of the replica that should be used for KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var tableClassOverride: DynamoDBClientTypes.TableClass?

        public init (
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            tableClassOverride: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.tableClassOverride = tableClassOverride
        }
    }

}

extension UpdateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sseSpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinition0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinition0)
            }
        }
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexupdate0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexupdate0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicationgroupupdate0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicationgroupupdate0)
            }
        }
        if let sseSpecification = self.sseSpecification {
            try encodeContainer.encode(sseSpecification, forKey: .sseSpecification)
        }
        if let streamSpecification = self.streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableClass = self.tableClass {
            try encodeContainer.encode(tableClass.rawValue, forKey: .tableClass)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdateTable operation.
public struct UpdateTableInput: Swift.Equatable {
    /// An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.
    public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    /// Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
    public var billingMode: DynamoDBClientTypes.BillingMode?
    /// An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:
    ///
    /// * Create - add a new global secondary index to the table.
    ///
    /// * Update - modify the provisioned throughput settings of an existing global secondary index.
    ///
    /// * Delete - remove a global secondary index from the table.
    ///
    ///
    /// You can create or delete only one global secondary index per UpdateTable operation. For more information, see [Managing Global Secondary Indexes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html) in the Amazon DynamoDB Developer Guide.
    public var globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]?
    /// The new provisioned throughput settings for the specified table or index.
    public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    /// A list of replica update actions (create, delete, or update) for the table. This property only applies to [Version 2019.11.21](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) of global tables.
    public var replicaUpdates: [DynamoDBClientTypes.ReplicationGroupUpdate]?
    /// The new server-side encryption settings for the specified table.
    public var sseSpecification: DynamoDBClientTypes.SSESpecification?
    /// Represents the DynamoDB Streams configuration for the table. You receive a ResourceInUseException if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn't have a stream.
    public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
    /// The table class of the table to be updated. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
    public var tableClass: DynamoDBClientTypes.TableClass?
    /// The name of the table to be updated.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
        billingMode: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]? = nil,
        provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicationGroupUpdate]? = nil,
        sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
        streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
        tableClass: DynamoDBClientTypes.TableClass? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.provisionedThroughput = provisionedThroughput
        self.replicaUpdates = replicaUpdates
        self.sseSpecification = sseSpecification
        self.streamSpecification = streamSpecification
        self.tableClass = tableClass
        self.tableName = tableName
    }
}

struct UpdateTableInputBody: Swift.Equatable {
    let attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    let tableName: Swift.String?
    let billingMode: DynamoDBClientTypes.BillingMode?
    let provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    let globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]?
    let streamSpecification: DynamoDBClientTypes.StreamSpecification?
    let sseSpecification: DynamoDBClientTypes.SSESpecification?
    let replicaUpdates: [DynamoDBClientTypes.ReplicationGroupUpdate]?
    let tableClass: DynamoDBClientTypes.TableClass?
}

extension UpdateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sseSpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDBClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDBClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndexUpdate?].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndexUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sseSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.SSESpecification.self, forKey: .sseSpecification)
        sseSpecification = sseSpecificationDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicationGroupUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[DynamoDBClientTypes.ReplicationGroupUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [DynamoDBClientTypes.ReplicationGroupUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
        let tableClassDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableClass.self, forKey: .tableClass)
        tableClass = tableClassDecoded
    }
}

extension UpdateTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTableOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// Represents the output of an UpdateTable operation.
public struct UpdateTableOutputResponse: Swift.Equatable {
    /// Represents the properties of the table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init (
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct UpdateTableOutputResponseBody: Swift.Equatable {
    let tableDescription: DynamoDBClientTypes.TableDescription?
}

extension UpdateTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension UpdateTableReplicaAutoScalingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        case replicaUpdates = "ReplicaUpdates"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexautoscalingupdate0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexautoscalingupdate0)
            }
        }
        if let provisionedWriteCapacityAutoScalingUpdate = self.provisionedWriteCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingUpdate, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicaautoscalingupdate0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicaautoscalingupdate0)
            }
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

extension UpdateTableReplicaAutoScalingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTableReplicaAutoScalingInput: Swift.Equatable {
    /// Represents the auto scaling settings of the global secondary indexes of the replica to be updated.
    public var globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]?
    /// Represents the auto scaling settings to be modified for a global table or global secondary index.
    public var provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    /// Represents the auto scaling settings of replicas of the table that will be modified.
    public var replicaUpdates: [DynamoDBClientTypes.ReplicaAutoScalingUpdate]?
    /// The name of the global table to be updated.
    /// This member is required.
    public var tableName: Swift.String?

    public init (
        globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]? = nil,
        provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicaAutoScalingUpdate]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        self.replicaUpdates = replicaUpdates
        self.tableName = tableName
    }
}

struct UpdateTableReplicaAutoScalingInputBody: Swift.Equatable {
    let globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]?
    let tableName: Swift.String?
    let provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    let replicaUpdates: [DynamoDBClientTypes.ReplicaAutoScalingUpdate]?
}

extension UpdateTableReplicaAutoScalingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        case replicaUpdates = "ReplicaUpdates"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate?].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let provisionedWriteCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdateDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([DynamoDBClientTypes.ReplicaAutoScalingUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[DynamoDBClientTypes.ReplicaAutoScalingUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [DynamoDBClientTypes.ReplicaAutoScalingUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}

extension UpdateTableReplicaAutoScalingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTableReplicaAutoScalingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTableReplicaAutoScalingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTableReplicaAutoScalingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateTableReplicaAutoScalingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tableAutoScalingDescription = output.tableAutoScalingDescription
        } else {
            self.tableAutoScalingDescription = nil
        }
    }
}

public struct UpdateTableReplicaAutoScalingOutputResponse: Swift.Equatable {
    /// Returns information about the auto scaling settings of a table with replicas.
    public var tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?

    public init (
        tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

struct UpdateTableReplicaAutoScalingOutputResponseBody: Swift.Equatable {
    let tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?
}

extension UpdateTableReplicaAutoScalingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableAutoScalingDescription = "TableAutoScalingDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableAutoScalingDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TableAutoScalingDescription.self, forKey: .tableAutoScalingDescription)
        tableAutoScalingDescription = tableAutoScalingDescriptionDecoded
    }
}

extension UpdateTimeToLiveInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeToLiveSpecification = self.timeToLiveSpecification {
            try encodeContainer.encode(timeToLiveSpecification, forKey: .timeToLiveSpecification)
        }
    }
}

extension UpdateTimeToLiveInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdateTimeToLive operation.
public struct UpdateTimeToLiveInput: Swift.Equatable {
    /// The name of the table to be configured.
    /// This member is required.
    public var tableName: Swift.String?
    /// Represents the settings used to enable or disable Time to Live for the specified table.
    /// This member is required.
    public var timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?

    public init (
        tableName: Swift.String? = nil,
        timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification? = nil
    )
    {
        self.tableName = tableName
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

struct UpdateTimeToLiveInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?
}

extension UpdateTimeToLiveInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName = "TableName"
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let timeToLiveSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TimeToLiveSpecification.self, forKey: .timeToLiveSpecification)
        timeToLiveSpecification = timeToLiveSpecificationDecoded
    }
}

extension UpdateTimeToLiveOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTimeToLiveOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTimeToLiveOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTimeToLiveOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateTimeToLiveOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.timeToLiveSpecification = output.timeToLiveSpecification
        } else {
            self.timeToLiveSpecification = nil
        }
    }
}

public struct UpdateTimeToLiveOutputResponse: Swift.Equatable {
    /// Represents the output of an UpdateTimeToLive operation.
    public var timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?

    public init (
        timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification? = nil
    )
    {
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

struct UpdateTimeToLiveOutputResponseBody: Swift.Equatable {
    let timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?
}

extension UpdateTimeToLiveOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.TimeToLiveSpecification.self, forKey: .timeToLiveSpecification)
        timeToLiveSpecification = timeToLiveSpecificationDecoded
    }
}

extension DynamoDBClientTypes.WriteRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteRequest = "DeleteRequest"
        case putRequest = "PutRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteRequest = self.deleteRequest {
            try encodeContainer.encode(deleteRequest, forKey: .deleteRequest)
        }
        if let putRequest = self.putRequest {
            try encodeContainer.encode(putRequest, forKey: .putRequest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let putRequestDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.PutRequest.self, forKey: .putRequest)
        putRequest = putRequestDecoded
        let deleteRequestDecoded = try containerValues.decodeIfPresent(DynamoDBClientTypes.DeleteRequest.self, forKey: .deleteRequest)
        deleteRequest = deleteRequestDecoded
    }
}

extension DynamoDBClientTypes {
    /// Represents an operation to perform - either DeleteItem or PutItem. You can only request one of these operations, not both, in a single WriteRequest. If you do need to perform both of these operations, you need to provide two separate WriteRequest objects.
    public struct WriteRequest: Swift.Equatable {
        /// A request to perform a DeleteItem operation.
        public var deleteRequest: DynamoDBClientTypes.DeleteRequest?
        /// A request to perform a PutItem operation.
        public var putRequest: DynamoDBClientTypes.PutRequest?

        public init (
            deleteRequest: DynamoDBClientTypes.DeleteRequest? = nil,
            putRequest: DynamoDBClientTypes.PutRequest? = nil
        )
        {
            self.deleteRequest = deleteRequest
            self.putRequest = putRequest
        }
    }

}
