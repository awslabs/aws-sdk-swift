// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains the details of an Amazon Neptune DB cluster.</p>
///          <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
public struct DBCluster: Equatable {
    /// <p>
    ///             <code>AllocatedStorage</code> always returns 1, because Neptune DB cluster storage size is
    ///       not fixed, but instead automatically adjusts as needed.</p>
    public let allocatedStorage: Int?
    /// <p>Provides a list of the Amazon Identity and Access Management (IAM) roles that are associated
    ///       with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the
    ///       DB cluster to access other Amazon services on your behalf.</p>
    public let associatedRoles: [DBClusterRole]?
    /// <p>Time at which the DB cluster will be automatically restarted.</p>
    public let automaticRestartTime: Date?
    /// <p>Provides the list of EC2 Availability Zones that instances in the DB cluster can be
    ///       created in.</p>
    public let availabilityZones: [String]?
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    public let backupRetentionPeriod: Int?
    /// <p>Not supported by Neptune.</p>
    public let characterSetName: String?
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    public let cloneGroupId: String?
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time
    ///       (UTC).</p>
    public let clusterCreateTime: Date?
    /// <p>
    ///             <i>If set to <code>true</code>, tags are copied to any snapshot of
    ///       the DB cluster that is created.</i>
    ///          </p>
    public let copyTagsToSnapshot: Bool?
    /// <p>If set to <code>true</code>, the DB cluster can be cloned across accounts.</p>
    public let crossAccountClone: Bool?
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    public let dBClusterArn: String?
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that
    ///       identifies a DB cluster.</p>
    public let dBClusterIdentifier: String?
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    public let dBClusterMembers: [DBClusterMember]?
    /// <p>Not supported by Neptune.</p>
    public let dBClusterOptionGroupMemberships: [DBClusterOptionGroupStatus]?
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    public let dBClusterParameterGroup: String?
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the
    ///       name, description, and subnets in the subnet group.</p>
    public let dBSubnetGroup: String?
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create
    ///       time, if one was specified when the DB cluster was created. This same name is returned for the
    ///       life of the DB cluster.</p>
    public let databaseName: String?
    /// <p>The Amazon Region-unique, immutable identifier for the DB cluster. This identifier is found
    ///       in Amazon CloudTrail log entries whenever the Amazon KMS key for the DB cluster is accessed.</p>
    public let dbClusterResourceId: String?
    /// <p>Indicates whether or not the DB cluster has deletion protection enabled.
    ///       The database can't be deleted when deletion protection is enabled.</p>
    public let deletionProtection: Bool?
    /// <p>Specifies the earliest time to which a database can be restored with point-in-time
    ///       restore.</p>
    public let earliestRestorableTime: Date?
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
    public let enabledCloudwatchLogsExports: [String]?
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    public let endpoint: String?
    /// <p>Provides the name of the database engine to be used for this DB cluster.</p>
    public let engine: String?
    /// <p>Indicates the database engine version.</p>
    public let engineVersion: String?
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    public let hostedZoneId: String?
    /// <p>True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts
    ///       is enabled, and otherwise false.</p>
    public let iAMDatabaseAuthenticationEnabled: Bool
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon KMS key identifier for the
    ///       encrypted DB cluster.</p>
    public let kmsKeyId: String?
    /// <p>Specifies the latest time to which a database can be restored with point-in-time
    ///       restore.</p>
    public let latestRestorableTime: Date?
    /// <p>Not supported by Neptune.</p>
    public let masterUsername: String?
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    public let multiAZ: Bool
    /// <p>Specifies the progress of the operation as a percentage.</p>
    public let percentProgress: String?
    /// <p>Specifies the port that the database engine is listening on.</p>
    public let port: Int?
    /// <p>Specifies the daily time range during which automated backups are created if automated
    ///       backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    public let preferredBackupWindow: String?
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal
    ///       Coordinated Time (UTC).</p>
    public let preferredMaintenanceWindow: String?
    /// <p>Contains one or more identifiers of the Read Replicas associated with this DB
    ///       cluster.</p>
    public let readReplicaIdentifiers: [String]?
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances
    ///       connections across the Read Replicas that are available in a DB cluster. As clients request
    ///       new connections to the reader endpoint, Neptune distributes the connection requests among the
    ///       Read Replicas in the DB cluster. This functionality can help balance your read workload across
    ///       multiple Read Replicas in your DB cluster.</p>
    ///          <p>If a failover occurs, and the Read Replica that you are connected to is promoted to be the
    ///       primary instance, your connection is dropped. To continue sending your read workload to other
    ///       Read Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    public let readerEndpoint: String?
    /// <p>Not supported by Neptune.</p>
    public let replicationSourceIdentifier: String?
    /// <p>Specifies the current state of this DB cluster.</p>
    public let status: String?
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    public let storageEncrypted: Bool
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    public let vpcSecurityGroups: [VpcSecurityGroupMembership]?

    public init (
        allocatedStorage: Int? = nil,
        associatedRoles: [DBClusterRole]? = nil,
        automaticRestartTime: Date? = nil,
        availabilityZones: [String]? = nil,
        backupRetentionPeriod: Int? = nil,
        characterSetName: String? = nil,
        cloneGroupId: String? = nil,
        clusterCreateTime: Date? = nil,
        copyTagsToSnapshot: Bool? = nil,
        crossAccountClone: Bool? = nil,
        dBClusterArn: String? = nil,
        dBClusterIdentifier: String? = nil,
        dBClusterMembers: [DBClusterMember]? = nil,
        dBClusterOptionGroupMemberships: [DBClusterOptionGroupStatus]? = nil,
        dBClusterParameterGroup: String? = nil,
        dBSubnetGroup: String? = nil,
        databaseName: String? = nil,
        dbClusterResourceId: String? = nil,
        deletionProtection: Bool? = nil,
        earliestRestorableTime: Date? = nil,
        enabledCloudwatchLogsExports: [String]? = nil,
        endpoint: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        hostedZoneId: String? = nil,
        iAMDatabaseAuthenticationEnabled: Bool = false,
        kmsKeyId: String? = nil,
        latestRestorableTime: Date? = nil,
        masterUsername: String? = nil,
        multiAZ: Bool = false,
        percentProgress: String? = nil,
        port: Int? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        readReplicaIdentifiers: [String]? = nil,
        readerEndpoint: String? = nil,
        replicationSourceIdentifier: String? = nil,
        status: String? = nil,
        storageEncrypted: Bool = false,
        vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.associatedRoles = associatedRoles
        self.automaticRestartTime = automaticRestartTime
        self.availabilityZones = availabilityZones
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.cloneGroupId = cloneGroupId
        self.clusterCreateTime = clusterCreateTime
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.crossAccountClone = crossAccountClone
        self.dBClusterArn = dBClusterArn
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterMembers = dBClusterMembers
        self.dBClusterOptionGroupMemberships = dBClusterOptionGroupMemberships
        self.dBClusterParameterGroup = dBClusterParameterGroup
        self.dBSubnetGroup = dBSubnetGroup
        self.databaseName = databaseName
        self.dbClusterResourceId = dbClusterResourceId
        self.deletionProtection = deletionProtection
        self.earliestRestorableTime = earliestRestorableTime
        self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
        self.endpoint = endpoint
        self.engine = engine
        self.engineVersion = engineVersion
        self.hostedZoneId = hostedZoneId
        self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
        self.kmsKeyId = kmsKeyId
        self.latestRestorableTime = latestRestorableTime
        self.masterUsername = masterUsername
        self.multiAZ = multiAZ
        self.percentProgress = percentProgress
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.readReplicaIdentifiers = readReplicaIdentifiers
        self.readerEndpoint = readerEndpoint
        self.replicationSourceIdentifier = replicationSourceIdentifier
        self.status = status
        self.storageEncrypted = storageEncrypted
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}
