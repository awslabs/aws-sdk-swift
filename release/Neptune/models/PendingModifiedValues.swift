// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p> This data type is used as a response element in the <a>ModifyDBInstance</a>
///       action.</p>
public struct PendingModifiedValues: Equatable {
    /// <p> Contains the new <code>AllocatedStorage</code> size for the DB instance that will be
    ///       applied or is currently being applied.</p>
    public let allocatedStorage: Int?
    /// <p>Specifies the pending number of days for which automated backups are retained.</p>
    public let backupRetentionPeriod: Int?
    /// <p>Specifies the identifier of the CA certificate for the DB instance.</p>
    public let cACertificateIdentifier: String?
    /// <p> Contains the new <code>DBInstanceClass</code> for the DB instance that will be applied or
    ///       is currently being applied.</p>
    public let dBInstanceClass: String?
    /// <p> Contains the new <code>DBInstanceIdentifier</code> for the DB instance that will be
    ///       applied or is currently being applied.</p>
    public let dBInstanceIdentifier: String?
    /// <p>The new DB subnet group for the DB instance.</p>
    public let dBSubnetGroupName: String?
    /// <p>Indicates the database engine version.</p>
    public let engineVersion: String?
    /// <p>Specifies the new Provisioned IOPS value for the DB instance that will be applied or is
    ///       currently being applied.</p>
    public let iops: Int?
    /// <p>Not supported by Neptune.</p>
    public let licenseModel: String?
    /// <p>Not supported by Neptune.</p>
    public let masterUserPassword: String?
    /// <p>Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.</p>
    public let multiAZ: Bool?
    /// <p>This <code>PendingCloudwatchLogsExports</code> structure specifies
    ///       pending changes to which CloudWatch logs are enabled and which are disabled.</p>
    public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?
    /// <p>Specifies the pending port for the DB instance.</p>
    public let port: Int?
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    public let storageType: String?

    public init (
        allocatedStorage: Int? = nil,
        backupRetentionPeriod: Int? = nil,
        cACertificateIdentifier: String? = nil,
        dBInstanceClass: String? = nil,
        dBInstanceIdentifier: String? = nil,
        dBSubnetGroupName: String? = nil,
        engineVersion: String? = nil,
        iops: Int? = nil,
        licenseModel: String? = nil,
        masterUserPassword: String? = nil,
        multiAZ: Bool? = nil,
        pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil,
        port: Int? = nil,
        storageType: String? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.backupRetentionPeriod = backupRetentionPeriod
        self.cACertificateIdentifier = cACertificateIdentifier
        self.dBInstanceClass = dBInstanceClass
        self.dBInstanceIdentifier = dBInstanceIdentifier
        self.dBSubnetGroupName = dBSubnetGroupName
        self.engineVersion = engineVersion
        self.iops = iops
        self.licenseModel = licenseModel
        self.masterUserPassword = masterUserPassword
        self.multiAZ = multiAZ
        self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
        self.port = port
        self.storageType = storageType
    }
}
