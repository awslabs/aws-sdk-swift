// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RestoreDBClusterToPointInTimeInput: Equatable {
    /// <p>The name of the new DB cluster to be created.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot end with a hyphen or contain two consecutive hyphens</p>
    ///             </li>
    ///          </ul>
    public let dBClusterIdentifier: String?
    /// <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
    ///             </li>
    ///          </ul>
    public let dBClusterParameterGroupName: String?
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    ///          <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    ///          <p>Example: <code>mySubnetgroup</code>
    ///          </p>
    public let dBSubnetGroupName: String?
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    ///       The database can't be deleted when deletion protection is enabled. By default,
    ///       deletion protection is disabled.
    ///     </p>
    public let deletionProtection: Bool?
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs.</p>
    public let enableCloudwatchLogsExports: [String]?
    /// <p>True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database
    ///       accounts, and otherwise false.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    public let enableIAMDatabaseAuthentication: Bool?
    /// <p>The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted
    ///       DB cluster.</p>
    ///          <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If
    ///       you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used
    ///       to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the
    ///       KMS encryption key.</p>
    ///          <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is
    ///       different than the KMS key used to encrypt the source DB cluster. The new DB cluster is
    ///       encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    ///          <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following
    ///       will occur:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the
    ///           KMS key that was used to encrypt the source DB cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the DB cluster is not encrypted, then the restored DB cluster is not
    ///           encrypted.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the
    ///       restore request is rejected.</p>
    public let kmsKeyId: String?
    /// <p>
    ///             <i>(Not supported by Neptune)</i>
    ///          </p>
    public let optionGroupName: String?
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    ///          <p>Constraints: Value must be <code>1150-65535</code>
    ///          </p>
    ///          <p>Default: The same port as the original DB cluster.</p>
    public let port: Int?
    /// <p>The date and time to restore the DB cluster to.</p>
    ///          <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be before the latest restorable time for the DB instance</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not
    ///           provided</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot be specified if <code>RestoreType</code> parameter is
    ///           <code>copy-on-write</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>2015-03-07T23:45:00Z</code>
    ///          </p>
    public let restoreToTime: Date?
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>full-copy</code> - The new DB cluster is restored as a full copy of the source
    ///           DB cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source
    ///           DB cluster.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored
    ///       as a full copy of the source DB cluster.</p>
    public let restoreType: String?
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must match the identifier of an existing DBCluster.</p>
    ///             </li>
    ///          </ul>
    public let sourceDBClusterIdentifier: String?
    /// <p>The tags to be applied to the restored DB cluster.</p>
    public let tags: [Tag]?
    /// <p>A value that is set to <code>true</code> to restore the DB cluster to the latest
    ///       restorable backup time, and <code>false</code> otherwise.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    ///          <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is
    ///       provided.</p>
    public let useLatestRestorableTime: Bool
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    public let vpcSecurityGroupIds: [String]?

    public init (
        dBClusterIdentifier: String? = nil,
        dBClusterParameterGroupName: String? = nil,
        dBSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        enableIAMDatabaseAuthentication: Bool? = nil,
        kmsKeyId: String? = nil,
        optionGroupName: String? = nil,
        port: Int? = nil,
        restoreToTime: Date? = nil,
        restoreType: String? = nil,
        sourceDBClusterIdentifier: String? = nil,
        tags: [Tag]? = nil,
        useLatestRestorableTime: Bool = false,
        vpcSecurityGroupIds: [String]? = nil
    )
    {
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterParameterGroupName = dBClusterParameterGroupName
        self.dBSubnetGroupName = dBSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.kmsKeyId = kmsKeyId
        self.optionGroupName = optionGroupName
        self.port = port
        self.restoreToTime = restoreToTime
        self.restoreType = restoreType
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
