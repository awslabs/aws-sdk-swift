// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeDBClustersInput: Equatable {
    /// <p>The user-supplied DB cluster identifier. If this parameter is specified, information from
    ///       only the specific DB cluster is returned. This parameter isn't case-sensitive.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If supplied, must match an existing DBClusterIdentifier.</p>
    ///             </li>
    ///          </ul>
    public let dBClusterIdentifier: String?
    /// <p>A filter that specifies one or more DB clusters to describe.</p>
    ///          <p>Supported filters:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon
    ///         Resource Names (ARNs). The results list will only include information about the DB
    ///         clusters identified by these ARNs.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>engine</code> - Accepts an engine name (such as <code>neptune</code>),
    ///         and restricts the results list to DB clusters created by that engine.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>For example, to invoke this API from the Amazon CLI and filter so that only
    ///       Neptune DB clusters are returned, you could use the following command:</p>
    public let filters: [Filter]?
    /// <p>An optional pagination token provided by a previous <a>DescribeDBClusters</a>
    ///       request. If this parameter is specified, the response includes only records beyond the marker,
    ///       up to the value specified by <code>MaxRecords</code>.</p>
    public let marker: String?
    /// <p>The maximum number of records to include in the response. If more records exist than the
    ///       specified <code>MaxRecords</code> value, a pagination token called a marker is included in the
    ///       response so that the remaining results can be retrieved.</p>
    ///          <p>Default: 100</p>
    ///          <p>Constraints: Minimum 20, maximum 100.</p>
    public let maxRecords: Int?

    public init (
        dBClusterIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil
    )
    {
        self.dBClusterIdentifier = dBClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}
