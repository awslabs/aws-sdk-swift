// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains the details of an Amazon Neptune DB instance.</p>
///          <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
public struct DBInstance: Equatable {
    /// <p>Not supported by Neptune.</p>
    public let allocatedStorage: Int
    /// <p>Indicates that minor version patches are applied automatically.</p>
    public let autoMinorVersionUpgrade: Bool
    /// <p>Specifies the name of the Availability Zone the DB instance is located in.</p>
    public let availabilityZone: String?
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    public let backupRetentionPeriod: Int
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    public let cACertificateIdentifier: String?
    /// <p>
    ///             <i>(Not supported by Neptune)</i>
    ///          </p>
    public let characterSetName: String?
    /// <p>Specifies whether tags are copied from the DB instance to snapshots of the DB
    ///       instance.</p>
    public let copyTagsToSnapshot: Bool
    /// <p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that
    ///       the DB instance is a member of.</p>
    public let dBClusterIdentifier: String?
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    public let dBInstanceArn: String?
    /// <p>Contains the name of the compute and memory capacity class of the DB instance.</p>
    public let dBInstanceClass: String?
    /// <p>Contains a user-supplied database identifier. This identifier is the unique key that
    ///       identifies a DB instance.</p>
    public let dBInstanceIdentifier: String?
    /// <p>Specifies the current state of this database.</p>
    public let dBInstanceStatus: String?
    /// <p>The database name.</p>
    public let dBName: String?
    /// <p>Provides the list of DB parameter groups applied to this DB instance.</p>
    public let dBParameterGroups: [DBParameterGroupStatus]?
    /// <p> Provides List of DB security group elements containing only
    ///       <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    public let dBSecurityGroups: [DBSecurityGroupMembership]?
    /// <p>Specifies information on the subnet group associated with the DB instance, including the
    ///       name, description, and subnets in the subnet group.</p>
    public let dBSubnetGroup: DBSubnetGroup?
    /// <p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB
    ///       cluster, this can be a different port than the DB cluster port.</p>
    public let dbInstancePort: Int
    /// <p>The Amazon Region-unique, immutable identifier for the DB instance. This identifier is found
    ///       in Amazon CloudTrail log entries whenever the Amazon KMS key for the DB instance is accessed.</p>
    public let dbiResourceId: String?
    /// <p>Indicates whether or not the DB instance has deletion protection enabled.
    ///       The instance can't be deleted when deletion protection is enabled. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting
    ///       a DB Instance</a>.</p>
    public let deletionProtection: Bool?
    /// <p>Not supported</p>
    public let domainMemberships: [DomainMembership]?
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch
    ///       Logs.</p>
    public let enabledCloudwatchLogsExports: [String]?
    /// <p>Specifies the connection endpoint.</p>
    public let endpoint: Endpoint?
    /// <p>Provides the name of the database engine to be used for this DB instance.</p>
    public let engine: String?
    /// <p>Indicates the database engine version.</p>
    public let engineVersion: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the
    ///       Enhanced Monitoring metrics data for the DB instance.</p>
    public let enhancedMonitoringResourceArn: String?
    /// <p>True if Amazon Identity and Access Management (IAM) authentication is enabled, and otherwise
    ///       false.</p>
    public let iAMDatabaseAuthenticationEnabled: Bool
    /// <p>Provides the date and time the DB instance was created.</p>
    public let instanceCreateTime: Date?
    /// <p>Specifies the Provisioned IOPS (I/O operations per second) value.</p>
    public let iops: Int?
    /// <p> Not supported: The encryption for DB instances is managed by the DB cluster.</p>
    public let kmsKeyId: String?
    /// <p>Specifies the latest time to which a database can be restored with point-in-time
    ///       restore.</p>
    public let latestRestorableTime: Date?
    /// <p>License model information for this DB instance.</p>
    public let licenseModel: String?
    /// <p>Not supported by Neptune.</p>
    public let masterUsername: String?
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected
    ///       for the DB instance.</p>
    public let monitoringInterval: Int?
    /// <p>The ARN for the IAM role that permits Neptune to send Enhanced Monitoring metrics to
    ///       Amazon CloudWatch Logs.</p>
    public let monitoringRoleArn: String?
    /// <p>Specifies if the DB instance is a Multi-AZ deployment.</p>
    public let multiAZ: Bool
    /// <p>
    ///             <i>(Not supported by Neptune)</i>
    ///          </p>
    public let optionGroupMemberships: [OptionGroupMembership]?
    /// <p>Specifies that changes to the DB instance are pending. This element is only included when
    ///       changes are pending. Specific changes are identified by subelements.</p>
    public let pendingModifiedValues: PendingModifiedValues?
    /// <p>
    ///             <i>(Not supported by Neptune)</i>
    ///          </p>
    public let performanceInsightsEnabled: Bool?
    /// <p>
    ///             <i>(Not supported by Neptune)</i>
    ///          </p>
    public let performanceInsightsKMSKeyId: String?
    /// <p> Specifies the daily time range during which automated backups are created if automated
    ///       backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    public let preferredBackupWindow: String?
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal
    ///       Coordinated Time (UTC).</p>
    public let preferredMaintenanceWindow: String?
    /// <p>A value that specifies the order in which a Read Replica is promoted to the primary
    ///       instance after a failure of the existing primary instance.
    ///    </p>
    public let promotionTier: Int?
    /// <p>This flag should no longer be used.</p>
    @available(*, deprecated)
    public let publiclyAccessible: Bool
    /// <p>Contains one or more identifiers of DB clusters that are Read Replicas of this DB
    ///       instance.</p>
    public let readReplicaDBClusterIdentifiers: [String]?
    /// <p>Contains one or more identifiers of the Read Replicas associated with this DB
    ///       instance.</p>
    public let readReplicaDBInstanceIdentifiers: [String]?
    /// <p>Contains the identifier of the source DB instance if this DB instance is a Read
    ///       Replica.</p>
    public let readReplicaSourceDBInstanceIdentifier: String?
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with
    ///       multi-AZ support.</p>
    public let secondaryAvailabilityZone: String?
    /// <p>The status of a Read Replica. If the instance is not a Read Replica, this is blank.</p>
    public let statusInfos: [DBInstanceStatusInfo]?
    /// <p>Not supported: The encryption for DB instances is managed by the DB cluster.</p>
    public let storageEncrypted: Bool
    /// <p>Specifies the storage type associated with DB instance.</p>
    public let storageType: String?
    /// <p>The ARN from the key store with which the instance is associated for TDE
    ///       encryption.</p>
    public let tdeCredentialArn: String?
    /// <p>Not supported.</p>
    public let timezone: String?
    /// <p>Provides a list of VPC security group elements that the DB instance belongs to.</p>
    public let vpcSecurityGroups: [VpcSecurityGroupMembership]?

    public init (
        allocatedStorage: Int = 0,
        autoMinorVersionUpgrade: Bool = false,
        availabilityZone: String? = nil,
        backupRetentionPeriod: Int = 0,
        cACertificateIdentifier: String? = nil,
        characterSetName: String? = nil,
        copyTagsToSnapshot: Bool = false,
        dBClusterIdentifier: String? = nil,
        dBInstanceArn: String? = nil,
        dBInstanceClass: String? = nil,
        dBInstanceIdentifier: String? = nil,
        dBInstanceStatus: String? = nil,
        dBName: String? = nil,
        dBParameterGroups: [DBParameterGroupStatus]? = nil,
        dBSecurityGroups: [DBSecurityGroupMembership]? = nil,
        dBSubnetGroup: DBSubnetGroup? = nil,
        dbInstancePort: Int = 0,
        dbiResourceId: String? = nil,
        deletionProtection: Bool? = nil,
        domainMemberships: [DomainMembership]? = nil,
        enabledCloudwatchLogsExports: [String]? = nil,
        endpoint: Endpoint? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        enhancedMonitoringResourceArn: String? = nil,
        iAMDatabaseAuthenticationEnabled: Bool = false,
        instanceCreateTime: Date? = nil,
        iops: Int? = nil,
        kmsKeyId: String? = nil,
        latestRestorableTime: Date? = nil,
        licenseModel: String? = nil,
        masterUsername: String? = nil,
        monitoringInterval: Int? = nil,
        monitoringRoleArn: String? = nil,
        multiAZ: Bool = false,
        optionGroupMemberships: [OptionGroupMembership]? = nil,
        pendingModifiedValues: PendingModifiedValues? = nil,
        performanceInsightsEnabled: Bool? = nil,
        performanceInsightsKMSKeyId: String? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        promotionTier: Int? = nil,
        publiclyAccessible: Bool = false,
        readReplicaDBClusterIdentifiers: [String]? = nil,
        readReplicaDBInstanceIdentifiers: [String]? = nil,
        readReplicaSourceDBInstanceIdentifier: String? = nil,
        secondaryAvailabilityZone: String? = nil,
        statusInfos: [DBInstanceStatusInfo]? = nil,
        storageEncrypted: Bool = false,
        storageType: String? = nil,
        tdeCredentialArn: String? = nil,
        timezone: String? = nil,
        vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupRetentionPeriod = backupRetentionPeriod
        self.cACertificateIdentifier = cACertificateIdentifier
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBInstanceArn = dBInstanceArn
        self.dBInstanceClass = dBInstanceClass
        self.dBInstanceIdentifier = dBInstanceIdentifier
        self.dBInstanceStatus = dBInstanceStatus
        self.dBName = dBName
        self.dBParameterGroups = dBParameterGroups
        self.dBSecurityGroups = dBSecurityGroups
        self.dBSubnetGroup = dBSubnetGroup
        self.dbInstancePort = dbInstancePort
        self.dbiResourceId = dbiResourceId
        self.deletionProtection = deletionProtection
        self.domainMemberships = domainMemberships
        self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
        self.endpoint = endpoint
        self.engine = engine
        self.engineVersion = engineVersion
        self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
        self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
        self.instanceCreateTime = instanceCreateTime
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.latestRestorableTime = latestRestorableTime
        self.licenseModel = licenseModel
        self.masterUsername = masterUsername
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.optionGroupMemberships = optionGroupMemberships
        self.pendingModifiedValues = pendingModifiedValues
        self.performanceInsightsEnabled = performanceInsightsEnabled
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
        self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
        self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
        self.secondaryAvailabilityZone = secondaryAvailabilityZone
        self.statusInfos = statusInfos
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tdeCredentialArn = tdeCredentialArn
        self.timezone = timezone
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}
