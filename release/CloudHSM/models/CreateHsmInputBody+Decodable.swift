// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateHsmInputBody: Equatable {
    public let subnetId: String?
    public let sshKey: String?
    public let eniIp: String?
    public let iamRoleArn: String?
    public let externalId: String?
    public let subscriptionType: SubscriptionType?
    public let clientToken: String?
    public let syslogIp: String?
}

extension CreateHsmInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case eniIp = "EniIp"
        case externalId = "ExternalId"
        case iamRoleArn = "IamRoleArn"
        case sshKey = "SshKey"
        case subnetId = "SubnetId"
        case subscriptionType = "SubscriptionType"
        case syslogIp = "SyslogIp"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let sshKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshKey)
        sshKey = sshKeyDecoded
        let eniIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eniIp)
        eniIp = eniIpDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let subscriptionTypeDecoded = try containerValues.decodeIfPresent(SubscriptionType.self, forKey: .subscriptionType)
        subscriptionType = subscriptionTypeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let syslogIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .syslogIp)
        syslogIp = syslogIpDecoded
    }
}
