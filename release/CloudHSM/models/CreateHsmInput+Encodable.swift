// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateHsmInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case eniIp = "EniIp"
        case externalId = "ExternalId"
        case iamRoleArn = "IamRoleArn"
        case sshKey = "SshKey"
        case subnetId = "SubnetId"
        case subscriptionType = "SubscriptionType"
        case syslogIp = "SyslogIp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let eniIp = eniIp {
            try encodeContainer.encode(eniIp, forKey: .eniIp)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let sshKey = sshKey {
            try encodeContainer.encode(sshKey, forKey: .sshKey)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let subscriptionType = subscriptionType {
            try encodeContainer.encode(subscriptionType.rawValue, forKey: .subscriptionType)
        }
        if let syslogIp = syslogIp {
            try encodeContainer.encode(syslogIp, forKey: .syslogIp)
        }
    }
}
