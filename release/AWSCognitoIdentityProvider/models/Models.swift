// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CognitoIdentityProviderClientTypes.AccountRecoverySettingType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recoveryMechanisms = "RecoveryMechanisms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recoveryMechanisms = recoveryMechanisms {
            var recoveryMechanismsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recoveryMechanisms)
            for recoveryoptiontype0 in recoveryMechanisms {
                try recoveryMechanismsContainer.encode(recoveryoptiontype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recoveryMechanismsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.RecoveryOptionType?].self, forKey: .recoveryMechanisms)
        var recoveryMechanismsDecoded0:[CognitoIdentityProviderClientTypes.RecoveryOptionType]? = nil
        if let recoveryMechanismsContainer = recoveryMechanismsContainer {
            recoveryMechanismsDecoded0 = [CognitoIdentityProviderClientTypes.RecoveryOptionType]()
            for structure0 in recoveryMechanismsContainer {
                if let structure0 = structure0 {
                    recoveryMechanismsDecoded0?.append(structure0)
                }
            }
        }
        recoveryMechanisms = recoveryMechanismsDecoded0
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The data type for AccountRecoverySetting.
    public struct AccountRecoverySettingType: Swift.Equatable {
        /// The list of RecoveryOptionTypes.
        public var recoveryMechanisms: [CognitoIdentityProviderClientTypes.RecoveryOptionType]?

        public init (
            recoveryMechanisms: [CognitoIdentityProviderClientTypes.RecoveryOptionType]? = nil
        )
        {
            self.recoveryMechanisms = recoveryMechanisms
        }
    }

}

extension CognitoIdentityProviderClientTypes.AccountTakeoverActionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventAction = "EventAction"
        case notify = "Notify"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventAction = self.eventAction {
            try encodeContainer.encode(eventAction.rawValue, forKey: .eventAction)
        }
        if notify != false {
            try encodeContainer.encode(notify, forKey: .notify)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notify) ?? false
        notify = notifyDecoded
        let eventActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverEventActionType.self, forKey: .eventAction)
        eventAction = eventActionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Account takeover action type.
    public struct AccountTakeoverActionType: Swift.Equatable {
        /// The action to take in response to the account takeover action. Valid values are as follows:
        ///
        /// * BLOCK Choosing this action will block the request.
        ///
        /// * MFA_IF_CONFIGURED Present an MFA challenge if user has configured it, else allow the request.
        ///
        /// * MFA_REQUIRED Present an MFA challenge if user has configured it, else block the request.
        ///
        /// * NO_ACTION Allow the user to sign in.
        /// This member is required.
        public var eventAction: CognitoIdentityProviderClientTypes.AccountTakeoverEventActionType?
        /// Flag specifying whether to send a notification.
        /// This member is required.
        public var notify: Swift.Bool

        public init (
            eventAction: CognitoIdentityProviderClientTypes.AccountTakeoverEventActionType? = nil,
            notify: Swift.Bool = false
        )
        {
            self.eventAction = eventAction
            self.notify = notify
        }
    }

}

extension CognitoIdentityProviderClientTypes.AccountTakeoverActionsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case highAction = "HighAction"
        case lowAction = "LowAction"
        case mediumAction = "MediumAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let highAction = self.highAction {
            try encodeContainer.encode(highAction, forKey: .highAction)
        }
        if let lowAction = self.lowAction {
            try encodeContainer.encode(lowAction, forKey: .lowAction)
        }
        if let mediumAction = self.mediumAction {
            try encodeContainer.encode(mediumAction, forKey: .mediumAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lowActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverActionType.self, forKey: .lowAction)
        lowAction = lowActionDecoded
        let mediumActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverActionType.self, forKey: .mediumAction)
        mediumAction = mediumActionDecoded
        let highActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverActionType.self, forKey: .highAction)
        highAction = highActionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Account takeover actions type.
    public struct AccountTakeoverActionsType: Swift.Equatable {
        /// Action to take for a high risk.
        public var highAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?
        /// Action to take for a low risk.
        public var lowAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?
        /// Action to take for a medium risk.
        public var mediumAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?

        public init (
            highAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil,
            lowAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil,
            mediumAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil
        )
        {
            self.highAction = highAction
            self.lowAction = lowAction
            self.mediumAction = mediumAction
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum AccountTakeoverEventActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case block
        case mfaIfConfigured
        case mfaRequired
        case noAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountTakeoverEventActionType] {
            return [
                .block,
                .mfaIfConfigured,
                .mfaRequired,
                .noAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .block: return "BLOCK"
            case .mfaIfConfigured: return "MFA_IF_CONFIGURED"
            case .mfaRequired: return "MFA_REQUIRED"
            case .noAction: return "NO_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountTakeoverEventActionType(rawValue: rawValue) ?? AccountTakeoverEventActionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case notifyConfiguration = "NotifyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = self.actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let notifyConfiguration = self.notifyConfiguration {
            try encodeContainer.encode(notifyConfiguration, forKey: .notifyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NotifyConfigurationType.self, forKey: .notifyConfiguration)
        notifyConfiguration = notifyConfigurationDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverActionsType.self, forKey: .actions)
        actions = actionsDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
    public struct AccountTakeoverRiskConfigurationType: Swift.Equatable {
        /// Account takeover risk configuration actions.
        /// This member is required.
        public var actions: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType?
        /// The notify configuration used to construct email notifications.
        public var notifyConfiguration: CognitoIdentityProviderClientTypes.NotifyConfigurationType?

        public init (
            actions: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType? = nil,
            notifyConfiguration: CognitoIdentityProviderClientTypes.NotifyConfigurationType? = nil
        )
        {
            self.actions = actions
            self.notifyConfiguration = notifyConfiguration
        }
    }

}

extension AddCustomAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customAttributes = "CustomAttributes"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customAttributes = customAttributes {
            var customAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customAttributes)
            for schemaattributetype0 in customAttributes {
                try customAttributesContainer.encode(schemaattributetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension AddCustomAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to add custom attributes.
public struct AddCustomAttributesInput: Swift.Equatable {
    /// An array of custom attributes, such as Mutable and Name.
    /// This member is required.
    public var customAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// The user pool ID for the user pool where you want to add custom attributes.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        customAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customAttributes = customAttributes
        self.userPoolId = userPoolId
    }
}

struct AddCustomAttributesInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let customAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
}

extension AddCustomAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customAttributes = "CustomAttributes"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let customAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.SchemaAttributeType?].self, forKey: .customAttributes)
        var customAttributesDecoded0:[CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil
        if let customAttributesContainer = customAttributesContainer {
            customAttributesDecoded0 = [CognitoIdentityProviderClientTypes.SchemaAttributeType]()
            for structure0 in customAttributesContainer {
                if let structure0 = structure0 {
                    customAttributesDecoded0?.append(structure0)
                }
            }
        }
        customAttributes = customAttributesDecoded0
    }
}

extension AddCustomAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddCustomAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserImportInProgressException" : self = .userImportInProgressException(try UserImportInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddCustomAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userImportInProgressException(UserImportInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddCustomAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server for the request to add custom attributes.
public struct AddCustomAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminAddUserToGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminAddUserToGroupInput(groupName: \(Swift.String(describing: groupName)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminAddUserToGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminAddUserToGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminAddUserToGroupInput: Swift.Equatable {
    /// The group name.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username for the user.
    /// This member is required.
    public var username: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminAddUserToGroupInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let groupName: Swift.String?
}

extension AdminAddUserToGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
    }
}

extension AdminAddUserToGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminAddUserToGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminAddUserToGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminAddUserToGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminAddUserToGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminConfirmSignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminConfirmSignUpInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminConfirmSignUpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminConfirmSignUpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to confirm user registration.
public struct AdminConfirmSignUpInput: Swift.Equatable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. If your user pool configuration includes triggers, the AdminConfirmSignUp API action invokes the Lambda function that is specified for the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. In this payload, the clientMetadata attribute provides the data that you assigned to the ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in Lambda, you can process the ClientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The user pool ID for which you want to confirm user registration.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name for which you want to confirm user registration.
    /// This member is required.
    public var username: Swift.String?

    public init (
        clientMetadata: [Swift.String:Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminConfirmSignUpInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension AdminConfirmSignUpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension AdminConfirmSignUpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminConfirmSignUpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyFailedAttemptsException" : self = .tooManyFailedAttemptsException(try TooManyFailedAttemptsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminConfirmSignUpOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyFailedAttemptsException(TooManyFailedAttemptsException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminConfirmSignUpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server for the request to confirm registration.
public struct AdminConfirmSignUpOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes.AdminCreateUserConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowAdminCreateUserOnly = "AllowAdminCreateUserOnly"
        case inviteMessageTemplate = "InviteMessageTemplate"
        case unusedAccountValidityDays = "UnusedAccountValidityDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowAdminCreateUserOnly != false {
            try encodeContainer.encode(allowAdminCreateUserOnly, forKey: .allowAdminCreateUserOnly)
        }
        if let inviteMessageTemplate = self.inviteMessageTemplate {
            try encodeContainer.encode(inviteMessageTemplate, forKey: .inviteMessageTemplate)
        }
        if unusedAccountValidityDays != 0 {
            try encodeContainer.encode(unusedAccountValidityDays, forKey: .unusedAccountValidityDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowAdminCreateUserOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowAdminCreateUserOnly) ?? false
        allowAdminCreateUserOnly = allowAdminCreateUserOnlyDecoded
        let unusedAccountValidityDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unusedAccountValidityDays) ?? 0
        unusedAccountValidityDays = unusedAccountValidityDaysDecoded
        let inviteMessageTemplateDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.MessageTemplateType.self, forKey: .inviteMessageTemplate)
        inviteMessageTemplate = inviteMessageTemplateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The configuration for creating a new user profile.
    public struct AdminCreateUserConfigType: Swift.Equatable {
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public var allowAdminCreateUserOnly: Swift.Bool
        /// The message template to be used for the welcome message to new users. See also [Customizing User Invitation Messages](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization).
        public var inviteMessageTemplate: CognitoIdentityProviderClientTypes.MessageTemplateType?
        /// The user account expiration limit, in days, after which a new account that hasn't signed in is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this parameter is 7. If you set a value for TemporaryPasswordValidityDays in PasswordPolicy, that value will be used, and UnusedAccountValidityDays will be no longer be an available parameter for that user pool.
        public var unusedAccountValidityDays: Swift.Int

        public init (
            allowAdminCreateUserOnly: Swift.Bool = false,
            inviteMessageTemplate: CognitoIdentityProviderClientTypes.MessageTemplateType? = nil,
            unusedAccountValidityDays: Swift.Int = 0
        )
        {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.inviteMessageTemplate = inviteMessageTemplate
            self.unusedAccountValidityDays = unusedAccountValidityDays
        }
    }

}

extension AdminCreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminCreateUserInput(clientMetadata: \(Swift.String(describing: clientMetadata)), desiredDeliveryMediums: \(Swift.String(describing: desiredDeliveryMediums)), forceAliasCreation: \(Swift.String(describing: forceAliasCreation)), messageAction: \(Swift.String(describing: messageAction)), userAttributes: \(Swift.String(describing: userAttributes)), userPoolId: \(Swift.String(describing: userPoolId)), validationData: \(Swift.String(describing: validationData)), temporaryPassword: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension AdminCreateUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case desiredDeliveryMediums = "DesiredDeliveryMediums"
        case forceAliasCreation = "ForceAliasCreation"
        case messageAction = "MessageAction"
        case temporaryPassword = "TemporaryPassword"
        case userAttributes = "UserAttributes"
        case userPoolId = "UserPoolId"
        case username = "Username"
        case validationData = "ValidationData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let desiredDeliveryMediums = desiredDeliveryMediums {
            var desiredDeliveryMediumsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredDeliveryMediums)
            for deliverymediumtype0 in desiredDeliveryMediums {
                try desiredDeliveryMediumsContainer.encode(deliverymediumtype0.rawValue)
            }
        }
        if forceAliasCreation != false {
            try encodeContainer.encode(forceAliasCreation, forKey: .forceAliasCreation)
        }
        if let messageAction = self.messageAction {
            try encodeContainer.encode(messageAction.rawValue, forKey: .messageAction)
        }
        if let temporaryPassword = self.temporaryPassword {
            try encodeContainer.encode(temporaryPassword, forKey: .temporaryPassword)
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for attributetype0 in userAttributes {
                try userAttributesContainer.encode(attributetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
        if let validationData = validationData {
            var validationDataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationData)
            for attributetype0 in validationData {
                try validationDataContainer.encode(attributetype0)
            }
        }
    }
}

extension AdminCreateUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to create a user in the specified user pool.
public struct AdminCreateUserInput: Swift.Equatable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the pre sign-up trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". You can specify more than one value.
    public var desiredDeliveryMediums: [CognitoIdentityProviderClientTypes.DeliveryMediumType]?
    /// This parameter is used only if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
    public var forceAliasCreation: Swift.Bool
    /// Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to SUPPRESS to suppress sending the message. You can specify only one value.
    public var messageAction: CognitoIdentityProviderClientTypes.MessageActionType?
    /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page, along with a new password to be used in all future sign-ins. This parameter isn't required. If you don't specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
    public var temporaryPassword: Swift.String?
    /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (when creating a user pool or in the Attributes tab of the console) either you should supply (in your call to AdminCreateUser) or the user should supply (when they sign up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. You can do this in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. You can also do this by calling [AdminUpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html).
    ///
    /// * email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.
    ///
    /// * phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The user pool ID for the user pool where the user will be created.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username can't be changed.
    /// This member is required.
    public var username: Swift.String?
    /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data isn't persisted.
    public var validationData: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init (
        clientMetadata: [Swift.String:Swift.String]? = nil,
        desiredDeliveryMediums: [CognitoIdentityProviderClientTypes.DeliveryMediumType]? = nil,
        forceAliasCreation: Swift.Bool = false,
        messageAction: CognitoIdentityProviderClientTypes.MessageActionType? = nil,
        temporaryPassword: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil,
        validationData: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.desiredDeliveryMediums = desiredDeliveryMediums
        self.forceAliasCreation = forceAliasCreation
        self.messageAction = messageAction
        self.temporaryPassword = temporaryPassword
        self.userAttributes = userAttributes
        self.userPoolId = userPoolId
        self.username = username
        self.validationData = validationData
    }
}

struct AdminCreateUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let validationData: [CognitoIdentityProviderClientTypes.AttributeType]?
    let temporaryPassword: Swift.String?
    let forceAliasCreation: Swift.Bool
    let messageAction: CognitoIdentityProviderClientTypes.MessageActionType?
    let desiredDeliveryMediums: [CognitoIdentityProviderClientTypes.DeliveryMediumType]?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension AdminCreateUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case desiredDeliveryMediums = "DesiredDeliveryMediums"
        case forceAliasCreation = "ForceAliasCreation"
        case messageAction = "MessageAction"
        case temporaryPassword = "TemporaryPassword"
        case userAttributes = "UserAttributes"
        case userPoolId = "UserPoolId"
        case username = "Username"
        case validationData = "ValidationData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let validationDataContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .validationData)
        var validationDataDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let validationDataContainer = validationDataContainer {
            validationDataDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in validationDataContainer {
                if let structure0 = structure0 {
                    validationDataDecoded0?.append(structure0)
                }
            }
        }
        validationData = validationDataDecoded0
        let temporaryPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .temporaryPassword)
        temporaryPassword = temporaryPasswordDecoded
        let forceAliasCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceAliasCreation) ?? false
        forceAliasCreation = forceAliasCreationDecoded
        let messageActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.MessageActionType.self, forKey: .messageAction)
        messageAction = messageActionDecoded
        let desiredDeliveryMediumsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.DeliveryMediumType?].self, forKey: .desiredDeliveryMediums)
        var desiredDeliveryMediumsDecoded0:[CognitoIdentityProviderClientTypes.DeliveryMediumType]? = nil
        if let desiredDeliveryMediumsContainer = desiredDeliveryMediumsContainer {
            desiredDeliveryMediumsDecoded0 = [CognitoIdentityProviderClientTypes.DeliveryMediumType]()
            for enum0 in desiredDeliveryMediumsContainer {
                if let enum0 = enum0 {
                    desiredDeliveryMediumsDecoded0?.append(enum0)
                }
            }
        }
        desiredDeliveryMediums = desiredDeliveryMediumsDecoded0
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension AdminCreateUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminCreateUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionNotMetException" : self = .preconditionNotMetException(try PreconditionNotMetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedUserStateException" : self = .unsupportedUserStateException(try UnsupportedUserStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UsernameExistsException" : self = .usernameExistsException(try UsernameExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminCreateUserOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case preconditionNotMetException(PreconditionNotMetException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case unsupportedUserStateException(UnsupportedUserStateException)
    case userLambdaValidationException(UserLambdaValidationException)
    case usernameExistsException(UsernameExistsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminCreateUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminCreateUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.user = output.user
        } else {
            self.user = nil
        }
    }
}

/// Represents the response from the server to the request to create the user.
public struct AdminCreateUserOutputResponse: Swift.Equatable {
    /// The newly created user.
    public var user: CognitoIdentityProviderClientTypes.UserType?

    public init (
        user: CognitoIdentityProviderClientTypes.UserType? = nil
    )
    {
        self.user = user
    }
}

struct AdminCreateUserOutputResponseBody: Swift.Equatable {
    let user: CognitoIdentityProviderClientTypes.UserType?
}

extension AdminCreateUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserType.self, forKey: .user)
        user = userDecoded
    }
}

extension AdminDeleteUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDeleteUserAttributesInput(userAttributeNames: \(Swift.String(describing: userAttributeNames)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminDeleteUserAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userAttributeNames = "UserAttributeNames"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userAttributeNames = userAttributeNames {
            var userAttributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributeNames)
            for attributenametype0 in userAttributeNames {
                try userAttributeNamesContainer.encode(attributenametype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminDeleteUserAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete user attributes as an administrator.
public struct AdminDeleteUserAttributesInput: Swift.Equatable {
    /// An array of strings representing the user attribute names you want to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
    /// This member is required.
    public var userAttributeNames: [Swift.String]?
    /// The user pool ID for the user pool where you want to delete user attributes.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user from which you would like to delete attributes.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userAttributeNames: [Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userAttributeNames = userAttributeNames
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminDeleteUserAttributesInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let userAttributeNames: [Swift.String]?
}

extension AdminDeleteUserAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userAttributeNames = "UserAttributeNames"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userAttributeNames)
        var userAttributeNamesDecoded0:[Swift.String]? = nil
        if let userAttributeNamesContainer = userAttributeNamesContainer {
            userAttributeNamesDecoded0 = [Swift.String]()
            for string0 in userAttributeNamesContainer {
                if let string0 = string0 {
                    userAttributeNamesDecoded0?.append(string0)
                }
            }
        }
        userAttributeNames = userAttributeNamesDecoded0
    }
}

extension AdminDeleteUserAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminDeleteUserAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminDeleteUserAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminDeleteUserAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response received from the server for a request to delete user attributes.
public struct AdminDeleteUserAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminDeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDeleteUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminDeleteUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminDeleteUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete a user as an administrator.
public struct AdminDeleteUserInput: Swift.Equatable {
    /// The user pool ID for the user pool where you want to delete the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user you want to delete.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminDeleteUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminDeleteUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminDeleteUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminDeleteUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminDeleteUserOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminDeleteUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminDeleteUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminDisableProviderForUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension AdminDisableProviderForUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminDisableProviderForUserInput: Swift.Equatable {
    /// The user to be disabled.
    /// This member is required.
    public var user: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        user: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.user = user
        self.userPoolId = userPoolId
    }
}

struct AdminDisableProviderForUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let user: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
}

extension AdminDisableProviderForUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.self, forKey: .user)
        user = userDecoded
    }
}

extension AdminDisableProviderForUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminDisableProviderForUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminDisableProviderForUserOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminDisableProviderForUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminDisableProviderForUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminDisableUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDisableUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminDisableUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminDisableUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to disable the user as an administrator.
public struct AdminDisableUserInput: Swift.Equatable {
    /// The user pool ID for the user pool where you want to disable the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user you want to disable.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminDisableUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminDisableUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminDisableUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminDisableUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminDisableUserOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminDisableUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response received from the server to disable the user as an administrator.
public struct AdminDisableUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminEnableUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminEnableUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminEnableUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminEnableUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request that enables the user as an administrator.
public struct AdminEnableUserInput: Swift.Equatable {
    /// The user pool ID for the user pool where you want to enable the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user you want to enable.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminEnableUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminEnableUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminEnableUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminEnableUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminEnableUserOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminEnableUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server for the request to enable a user as an administrator.
public struct AdminEnableUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminForgetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminForgetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminForgetDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminForgetDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Sends the forgot device request, as an administrator.
public struct AdminForgetDeviceInput: Swift.Equatable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name.
    /// This member is required.
    public var username: Swift.String?

    public init (
        deviceKey: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminForgetDeviceInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let deviceKey: Swift.String?
}

extension AdminForgetDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
    }
}

extension AdminForgetDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminForgetDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminForgetDeviceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminForgetDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminForgetDeviceOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminGetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminGetDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminGetDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get the device, as an administrator.
public struct AdminGetDeviceInput: Swift.Equatable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name.
    /// This member is required.
    public var username: Swift.String?

    public init (
        deviceKey: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminGetDeviceInputBody: Swift.Equatable {
    let deviceKey: Swift.String?
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminGetDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminGetDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminGetDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminGetDeviceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminGetDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminGetDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.device = output.device
        } else {
            self.device = nil
        }
    }
}

/// Gets the device response, as an administrator.
public struct AdminGetDeviceOutputResponse: Swift.Equatable {
    /// The device.
    /// This member is required.
    public var device: CognitoIdentityProviderClientTypes.DeviceType?

    public init (
        device: CognitoIdentityProviderClientTypes.DeviceType? = nil
    )
    {
        self.device = device
    }
}

struct AdminGetDeviceOutputResponseBody: Swift.Equatable {
    let device: CognitoIdentityProviderClientTypes.DeviceType?
}

extension AdminGetDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case device = "Device"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceType.self, forKey: .device)
        device = deviceDecoded
    }
}

extension AdminGetUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminGetUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminGetUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get the specified user as an administrator.
public struct AdminGetUserInput: Swift.Equatable {
    /// The user pool ID for the user pool where you want to get information about the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user you want to retrieve.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminGetUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminGetUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminGetUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminGetUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminGetUserOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminGetUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetUserOutputResponse(enabled: \(Swift.String(describing: enabled)), mfaOptions: \(Swift.String(describing: mfaOptions)), preferredMfaSetting: \(Swift.String(describing: preferredMfaSetting)), userAttributes: \(Swift.String(describing: userAttributes)), userCreateDate: \(Swift.String(describing: userCreateDate)), userLastModifiedDate: \(Swift.String(describing: userLastModifiedDate)), userMFASettingList: \(Swift.String(describing: userMFASettingList)), userStatus: \(Swift.String(describing: userStatus)), username: \"CONTENT_REDACTED\")"}
}

extension AdminGetUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminGetUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.enabled = output.enabled
            self.mfaOptions = output.mfaOptions
            self.preferredMfaSetting = output.preferredMfaSetting
            self.userAttributes = output.userAttributes
            self.userCreateDate = output.userCreateDate
            self.userLastModifiedDate = output.userLastModifiedDate
            self.userMFASettingList = output.userMFASettingList
            self.userStatus = output.userStatus
            self.username = output.username
        } else {
            self.enabled = false
            self.mfaOptions = nil
            self.preferredMfaSetting = nil
            self.userAttributes = nil
            self.userCreateDate = nil
            self.userLastModifiedDate = nil
            self.userMFASettingList = nil
            self.userStatus = nil
            self.username = nil
        }
    }
}

/// Represents the response from the server from the request to get the specified user as an administrator.
public struct AdminGetUserOutputResponse: Swift.Equatable {
    /// Indicates that the status is enabled.
    public var enabled: Swift.Bool
    /// This response parameter is no longer supported. It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The user's preferred MFA setting.
    public var preferredMfaSetting: Swift.String?
    /// An array of name-value pairs representing user attributes.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The date the user was created.
    public var userCreateDate: ClientRuntime.Date?
    /// The date the user was last modified.
    public var userLastModifiedDate: ClientRuntime.Date?
    /// The MFA options that are activated for the user. The possible values in this list are SMS_MFA and SOFTWARE_TOKEN_MFA.
    public var userMFASettingList: [Swift.String]?
    /// The user status. Can be one of the following:
    ///
    /// * UNCONFIRMED - User has been created but not confirmed.
    ///
    /// * CONFIRMED - User has been confirmed.
    ///
    /// * ARCHIVED - User is no longer active.
    ///
    /// * UNKNOWN - User status isn't known.
    ///
    /// * RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.
    ///
    /// * FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else.
    public var userStatus: CognitoIdentityProviderClientTypes.UserStatusType?
    /// The user name of the user about whom you're receiving information.
    /// This member is required.
    public var username: Swift.String?

    public init (
        enabled: Swift.Bool = false,
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        preferredMfaSetting: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userCreateDate: ClientRuntime.Date? = nil,
        userLastModifiedDate: ClientRuntime.Date? = nil,
        userMFASettingList: [Swift.String]? = nil,
        userStatus: CognitoIdentityProviderClientTypes.UserStatusType? = nil,
        username: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.mfaOptions = mfaOptions
        self.preferredMfaSetting = preferredMfaSetting
        self.userAttributes = userAttributes
        self.userCreateDate = userCreateDate
        self.userLastModifiedDate = userLastModifiedDate
        self.userMFASettingList = userMFASettingList
        self.userStatus = userStatus
        self.username = username
    }
}

struct AdminGetUserOutputResponseBody: Swift.Equatable {
    let username: Swift.String?
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let userCreateDate: ClientRuntime.Date?
    let userLastModifiedDate: ClientRuntime.Date?
    let enabled: Swift.Bool
    let userStatus: CognitoIdentityProviderClientTypes.UserStatusType?
    let mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    let preferredMfaSetting: Swift.String?
    let userMFASettingList: [Swift.String]?
}

extension AdminGetUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case mfaOptions = "MFAOptions"
        case preferredMfaSetting = "PreferredMfaSetting"
        case userAttributes = "UserAttributes"
        case userCreateDate = "UserCreateDate"
        case userLastModifiedDate = "UserLastModifiedDate"
        case userMFASettingList = "UserMFASettingList"
        case userStatus = "UserStatus"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let userCreateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .userCreateDate)
        userCreateDate = userCreateDateDecoded
        let userLastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .userLastModifiedDate)
        userLastModifiedDate = userLastModifiedDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let userStatusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserStatusType.self, forKey: .userStatus)
        userStatus = userStatusDecoded
        let mfaOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mfaOptions)
        var mfaOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mfaOptionsContainer = mfaOptionsContainer {
            mfaOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mfaOptionsContainer {
                if let structure0 = structure0 {
                    mfaOptionsDecoded0?.append(structure0)
                }
            }
        }
        mfaOptions = mfaOptionsDecoded0
        let preferredMfaSettingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMfaSetting)
        preferredMfaSetting = preferredMfaSettingDecoded
        let userMFASettingListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userMFASettingList)
        var userMFASettingListDecoded0:[Swift.String]? = nil
        if let userMFASettingListContainer = userMFASettingListContainer {
            userMFASettingListDecoded0 = [Swift.String]()
            for string0 in userMFASettingListContainer {
                if let string0 = string0 {
                    userMFASettingListDecoded0?.append(string0)
                }
            }
        }
        userMFASettingList = userMFASettingListDecoded0
    }
}

extension AdminInitiateAuthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminInitiateAuthInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), authFlow: \(Swift.String(describing: authFlow)), clientMetadata: \(Swift.String(describing: clientMetadata)), contextData: \(Swift.String(describing: contextData)), userPoolId: \(Swift.String(describing: userPoolId)), authParameters: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\")"}
}

extension AdminInitiateAuthInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case contextData = "ContextData"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let authFlow = self.authFlow {
            try encodeContainer.encode(authFlow.rawValue, forKey: .authFlow)
        }
        if let authParameters = authParameters {
            var authParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .authParameters)
            for (dictKey0, authParametersType0) in authParameters {
                try authParametersContainer.encode(authParametersType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let contextData = self.contextData {
            try encodeContainer.encode(contextData, forKey: .contextData)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension AdminInitiateAuthInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Initiates the authorization request, as an administrator.
public struct AdminInitiateAuthInput: Swift.Equatable {
    /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminInitiateAuth calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The authentication flow for this call to run. The API action will depend on this value. For example:
    ///
    /// * REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.
    ///
    /// * USER_SRP_AUTH will take in USERNAME and SRP_A and return the Secure Remote Password (SRP) protocol variables to be used for next challenge execution.
    ///
    /// * ADMIN_USER_PASSWORD_AUTH will take in USERNAME and PASSWORD and return the next challenge or tokens.
    ///
    ///
    /// Valid values include:
    ///
    /// * USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.
    ///
    /// * REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.
    ///
    /// * CUSTOM_AUTH: Custom authentication flow.
    ///
    /// * ADMIN_NO_SRP_AUTH: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.
    ///
    /// * ADMIN_USER_PASSWORD_AUTH: Admin-based user password authentication. This replaces the ADMIN_NO_SRP_AUTH authentication flow. In this flow, Amazon Cognito receives the password in the request instead of using the SRP process to verify passwords.
    /// This member is required.
    public var authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    /// The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:
    ///
    /// * For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For ADMIN_NO_SRP_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), PASSWORD (required), DEVICE_KEY.
    ///
    /// * For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).
    public var authParameters: [Swift.String:Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:
    ///
    /// * Pre signup
    ///
    /// * Pre authentication
    ///
    /// * User migration
    ///
    ///
    /// When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminInitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:
    ///
    /// * Post authentication
    ///
    /// * Custom message
    ///
    /// * Pre token generation
    ///
    /// * Create auth challenge
    ///
    /// * Define auth challenge
    ///
    /// * Verify auth challenge
    ///
    ///
    /// For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        authFlow: CognitoIdentityProviderClientTypes.AuthFlowType? = nil,
        authParameters: [Swift.String:Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        contextData: CognitoIdentityProviderClientTypes.ContextDataType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.authFlow = authFlow
        self.authParameters = authParameters
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.contextData = contextData
        self.userPoolId = userPoolId
    }
}

struct AdminInitiateAuthInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
    let authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    let authParameters: [Swift.String:Swift.String]?
    let clientMetadata: [Swift.String:Swift.String]?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let contextData: CognitoIdentityProviderClientTypes.ContextDataType?
}

extension AdminInitiateAuthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case contextData = "ContextData"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let authFlowDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthFlowType.self, forKey: .authFlow)
        authFlow = authFlowDecoded
        let authParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .authParameters)
        var authParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let authParametersContainer = authParametersContainer {
            authParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in authParametersContainer {
                if let stringtype0 = stringtype0 {
                    authParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        authParameters = authParametersDecoded0
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let contextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ContextDataType.self, forKey: .contextData)
        contextData = contextDataDecoded
    }
}

extension AdminInitiateAuthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminInitiateAuthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MFAMethodNotFoundException" : self = .mFAMethodNotFoundException(try MFAMethodNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminInitiateAuthOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case mFAMethodNotFoundException(MFAMethodNotFoundException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminInitiateAuthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminInitiateAuthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authenticationResult = output.authenticationResult
            self.challengeName = output.challengeName
            self.challengeParameters = output.challengeParameters
            self.session = output.session
        } else {
            self.authenticationResult = nil
            self.challengeName = nil
            self.challengeParameters = nil
            self.session = nil
        }
    }
}

/// Initiates the authentication response, as an administrator.
public struct AdminInitiateAuthOutputResponse: Swift.Equatable {
    /// The result of the authentication response. This is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge that you're responding to with this call. This is returned in the AdminInitiateAuth response if you must pass another challenge.
    ///
    /// * MFA_SETUP: If MFA is required, users who don't have at least one of the MFA methods set up are presented with an MFA_SETUP challenge. The user must set up at least one MFA type to continue to authenticate.
    ///
    /// * SELECT_MFA_TYPE: Selects the MFA type. Valid MFA options are SMS_MFA for text SMS MFA, and SOFTWARE_TOKEN_MFA for time-based one-time password (TOTP) software token MFA.
    ///
    /// * SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.
    ///
    /// * PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.
    ///
    /// * CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.
    ///
    /// * DEVICE_SRP_AUTH: If device tracking was activated in your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.
    ///
    /// * DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.
    ///
    /// * ADMIN_NO_SRP_AUTH: This is returned if you must authenticate with USERNAME and PASSWORD directly. An app client must be enabled to use this flow.
    ///
    /// * NEW_PASSWORD_REQUIRED: For users who are required to change their passwords after successful first login. Respond to this challenge with NEW_PASSWORD and any required attributes that Amazon Cognito returned in the requiredAttributes parameter. You can also set values for attributes that aren't required by your user pool and that your app client can write. For more information, see [AdminRespondToAuthChallenge](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminRespondToAuthChallenge.html). In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In AdminRespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the AdminUpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * MFA_SETUP: For users who are required to set up an MFA factor before they can sign in. The MFA types activated for the user pool will be listed in the challenge parameters MFA_CAN_SETUP value. To set up software token MFA, use the session returned here from InitiateAuth as an input to AssociateSoftwareToken, and use the session returned by VerifySoftwareToken as an input to RespondToAuthChallenge with challenge name MFA_SETUP to complete sign-in. To set up SMS MFA, users will need help from an administrator to add a phone number to their account and then call InitiateAuth again to restart sign-in.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. These are returned to you in the AdminInitiateAuth response if you must pass another challenge. The responses in this parameter should be used to compute inputs to the next call (AdminRespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable). The value of the USER_ID_FOR_SRP attribute is the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to AdminInitiateAuth. This happens because, in the AdminRespondToAuthChallenge API ChallengeResponses, the USERNAME attribute can't be an alias.
    public var challengeParameters: [Swift.String:Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If AdminInitiateAuth or AdminRespondToAuthChallenge API call determines that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next AdminRespondToAuthChallenge API call.
    public var session: Swift.String?

    public init (
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

struct AdminInitiateAuthOutputResponseBody: Swift.Equatable {
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeParameters: [Swift.String:Swift.String]?
    let authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
}

extension AdminInitiateAuthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationResult = "AuthenticationResult"
        case challengeName = "ChallengeName"
        case challengeParameters = "ChallengeParameters"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeParameters)
        var challengeParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeParametersContainer = challengeParametersContainer {
            challengeParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeParametersContainer {
                if let stringtype0 = stringtype0 {
                    challengeParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeParameters = challengeParametersDecoded0
        let authenticationResultDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthenticationResultType.self, forKey: .authenticationResult)
        authenticationResult = authenticationResultDecoded
    }
}

extension AdminLinkProviderForUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationUser = "DestinationUser"
        case sourceUser = "SourceUser"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationUser = self.destinationUser {
            try encodeContainer.encode(destinationUser, forKey: .destinationUser)
        }
        if let sourceUser = self.sourceUser {
            try encodeContainer.encode(sourceUser, forKey: .sourceUser)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension AdminLinkProviderForUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminLinkProviderForUserInput: Swift.Equatable {
    /// The existing user in the user pool that you want to assign to the external IdP user account. This user can be a native (Username + Password) Amazon Cognito user pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, Amazon Cognito generates an exception. Amazon Cognito returns this user when the new user (with the linked IdP attribute) signs in. For a native username + password user, the ProviderAttributeValue for the DestinationUser should be the username in the user pool. For a federated user, it should be the provider-specific user_id. The ProviderAttributeName of the DestinationUser is ignored. The ProviderName should be set to Cognito for users in Cognito user pools. All attributes in the DestinationUser profile must be mutable. If you have assigned the user any immutable custom attributes, the operation won't succeed.
    /// This member is required.
    public var destinationUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// An external IdP account for a user who doesn't exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user. If the SourceUser is using a federated social IdP, such as Facebook, Google, or Login with Amazon, you must set the ProviderAttributeName to Cognito_Subject. For social IdPs, the ProviderName will be Facebook, Google, or LoginWithAmazon, and Amazon Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for id, sub, and user_id, respectively. The ProviderAttributeValue for the user must be the same value as the id, sub, or user_id value found in the social IdP token. For SAML, the ProviderAttributeName can be any value that matches a claim in the SAML assertion. If you want to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML IdP and submit that claim name as the ProviderAttributeName. If you set ProviderAttributeName to Cognito_Subject, Amazon Cognito will automatically parse the default unique identifier found in the subject from the SAML token.
    /// This member is required.
    public var sourceUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        destinationUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        sourceUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.destinationUser = destinationUser
        self.sourceUser = sourceUser
        self.userPoolId = userPoolId
    }
}

struct AdminLinkProviderForUserInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let destinationUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    let sourceUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
}

extension AdminLinkProviderForUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationUser = "DestinationUser"
        case sourceUser = "SourceUser"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let destinationUserDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.self, forKey: .destinationUser)
        destinationUser = destinationUserDecoded
        let sourceUserDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.self, forKey: .sourceUser)
        sourceUser = sourceUserDecoded
    }
}

extension AdminLinkProviderForUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminLinkProviderForUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminLinkProviderForUserOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminLinkProviderForUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminLinkProviderForUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminListDevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListDevicesInput(limit: \(Swift.String(describing: limit)), paginationToken: \(Swift.String(describing: paginationToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminListDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminListDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list devices, as an administrator.
public struct AdminListDevicesInput: Swift.Equatable {
    /// The limit of the devices request.
    public var limit: Swift.Int?
    /// The pagination token.
    public var paginationToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name.
    /// This member is required.
    public var username: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.limit = limit
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminListDevicesInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let limit: Swift.Int?
    let paginationToken: Swift.String?
}

extension AdminListDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension AdminListDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminListDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminListDevicesOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminListDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminListDevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devices = output.devices
            self.paginationToken = output.paginationToken
        } else {
            self.devices = nil
            self.paginationToken = nil
        }
    }
}

/// Lists the device's response, as an administrator.
public struct AdminListDevicesOutputResponse: Swift.Equatable {
    /// The devices in the list of devices response.
    public var devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    /// The pagination token.
    public var paginationToken: Swift.String?

    public init (
        devices: [CognitoIdentityProviderClientTypes.DeviceType]? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.devices = devices
        self.paginationToken = paginationToken
    }
}

struct AdminListDevicesOutputResponseBody: Swift.Equatable {
    let devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    let paginationToken: Swift.String?
}

extension AdminListDevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devices = "Devices"
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devicesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.DeviceType?].self, forKey: .devices)
        var devicesDecoded0:[CognitoIdentityProviderClientTypes.DeviceType]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [CognitoIdentityProviderClientTypes.DeviceType]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension AdminListGroupsForUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListGroupsForUserInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminListGroupsForUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminListGroupsForUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminListGroupsForUserInput: Swift.Equatable {
    /// The limit of the request to list groups.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username for the user.
    /// This member is required.
    public var username: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminListGroupsForUserInputBody: Swift.Equatable {
    let username: Swift.String?
    let userPoolId: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension AdminListGroupsForUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AdminListGroupsForUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminListGroupsForUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminListGroupsForUserOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminListGroupsForUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminListGroupsForUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groups = output.groups
            self.nextToken = output.nextToken
        } else {
            self.groups = nil
            self.nextToken = nil
        }
    }
}

public struct AdminListGroupsForUserOutputResponse: Swift.Equatable {
    /// The groups that the user belongs to.
    public var groups: [CognitoIdentityProviderClientTypes.GroupType]?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init (
        groups: [CognitoIdentityProviderClientTypes.GroupType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

struct AdminListGroupsForUserOutputResponseBody: Swift.Equatable {
    let groups: [CognitoIdentityProviderClientTypes.GroupType]?
    let nextToken: Swift.String?
}

extension AdminListGroupsForUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.GroupType?].self, forKey: .groups)
        var groupsDecoded0:[CognitoIdentityProviderClientTypes.GroupType]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [CognitoIdentityProviderClientTypes.GroupType]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AdminListUserAuthEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListUserAuthEventsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminListUserAuthEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminListUserAuthEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminListUserAuthEventsInput: Swift.Equatable {
    /// The maximum number of authentication events to return. Returns 60 events if you set MaxResults to 0, or if you don't include a MaxResults parameter.
    public var maxResults: Swift.Int?
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user pool username or an alias.
    /// This member is required.
    public var username: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminListUserAuthEventsInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension AdminListUserAuthEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AdminListUserAuthEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminListUserAuthEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolAddOnNotEnabledException" : self = .userPoolAddOnNotEnabledException(try UserPoolAddOnNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminListUserAuthEventsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case userPoolAddOnNotEnabledException(UserPoolAddOnNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminListUserAuthEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminListUserAuthEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authEvents = output.authEvents
            self.nextToken = output.nextToken
        } else {
            self.authEvents = nil
            self.nextToken = nil
        }
    }
}

public struct AdminListUserAuthEventsOutputResponse: Swift.Equatable {
    /// The response object. It includes the EventID, EventType, CreationDate, EventRisk, and EventResponse.
    public var authEvents: [CognitoIdentityProviderClientTypes.AuthEventType]?
    /// A pagination token.
    public var nextToken: Swift.String?

    public init (
        authEvents: [CognitoIdentityProviderClientTypes.AuthEventType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.authEvents = authEvents
        self.nextToken = nextToken
    }
}

struct AdminListUserAuthEventsOutputResponseBody: Swift.Equatable {
    let authEvents: [CognitoIdentityProviderClientTypes.AuthEventType]?
    let nextToken: Swift.String?
}

extension AdminListUserAuthEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authEvents = "AuthEvents"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authEventsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AuthEventType?].self, forKey: .authEvents)
        var authEventsDecoded0:[CognitoIdentityProviderClientTypes.AuthEventType]? = nil
        if let authEventsContainer = authEventsContainer {
            authEventsDecoded0 = [CognitoIdentityProviderClientTypes.AuthEventType]()
            for structure0 in authEventsContainer {
                if let structure0 = structure0 {
                    authEventsDecoded0?.append(structure0)
                }
            }
        }
        authEvents = authEventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AdminRemoveUserFromGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminRemoveUserFromGroupInput(groupName: \(Swift.String(describing: groupName)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminRemoveUserFromGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminRemoveUserFromGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminRemoveUserFromGroupInput: Swift.Equatable {
    /// The group name.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username for the user.
    /// This member is required.
    public var username: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminRemoveUserFromGroupInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let groupName: Swift.String?
}

extension AdminRemoveUserFromGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
    }
}

extension AdminRemoveUserFromGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminRemoveUserFromGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminRemoveUserFromGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminRemoveUserFromGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminRemoveUserFromGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminResetUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminResetUserPasswordInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminResetUserPasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminResetUserPasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to reset a user's password as an administrator.
public struct AdminResetUserPasswordInput: Swift.Equatable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminResetUserPassword API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminResetUserPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The user pool ID for the user pool where you want to reset the user's password.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user whose password you want to reset.
    /// This member is required.
    public var username: Swift.String?

    public init (
        clientMetadata: [Swift.String:Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminResetUserPasswordInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension AdminResetUserPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension AdminResetUserPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminResetUserPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminResetUserPasswordOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminResetUserPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server to reset a user password as an administrator.
public struct AdminResetUserPasswordOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminRespondToAuthChallengeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminRespondToAuthChallengeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), challengeName: \(Swift.String(describing: challengeName)), challengeResponses: \(Swift.String(describing: challengeResponses)), clientMetadata: \(Swift.String(describing: clientMetadata)), contextData: \(Swift.String(describing: contextData)), session: \(Swift.String(describing: session)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension AdminRespondToAuthChallengeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case contextData = "ContextData"
        case session = "Session"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let challengeName = self.challengeName {
            try encodeContainer.encode(challengeName.rawValue, forKey: .challengeName)
        }
        if let challengeResponses = challengeResponses {
            var challengeResponsesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .challengeResponses)
            for (dictKey0, challengeResponsesType0) in challengeResponses {
                try challengeResponsesContainer.encode(challengeResponsesType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let contextData = self.contextData {
            try encodeContainer.encode(contextData, forKey: .contextData)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension AdminRespondToAuthChallengeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request to respond to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeInput: Swift.Equatable {
    /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The challenge name. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    /// This member is required.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:
    ///
    /// * SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret). PASSWORD_VERIFIER requires DEVICE_KEY when signing in with a remembered device.
    ///
    /// * ADMIN_NO_SRP_AUTH: PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * NEW_PASSWORD_REQUIRED: NEW_PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret). To set any required attributes that Amazon Cognito returned as requiredAttributes in the AdminInitiateAuth response, add a userAttributes.attributename  parameter. This parameter can also set values for writable attributes that aren't required by your user pool. In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In AdminRespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the AdminUpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * MFA_SETUP requires USERNAME, plus you must use the session value returned by VerifySoftwareToken in the Session parameter.
    ///
    ///
    /// The value of the USERNAME attribute must be the user's actual username, not an alias (such as an email address or phone number). To make this simpler, the AdminInitiateAuth response includes the actual username value in the USERNAMEUSER_ID_FOR_SRP attribute. This happens even if you specified an alias in your call to AdminInitiateAuth.
    public var challengeResponses: [Swift.String:Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions that you have assigned to the following triggers:
    ///
    /// * pre sign-up
    ///
    /// * custom message
    ///
    /// * post authentication
    ///
    /// * user migration
    ///
    /// * pre token generation
    ///
    /// * define auth challenge
    ///
    /// * create auth challenge
    ///
    /// * verify auth challenge response
    ///
    ///
    /// When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute that provides the data that you assigned to the ClientMetadata parameter in your AdminRespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    /// The session that should be passed both ways in challenge-response calls to the service. If an InitiateAuth or RespondToAuthChallenge API call determines that the caller must pass another challenge, it returns a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeResponses: [Swift.String:Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        contextData: CognitoIdentityProviderClientTypes.ContextDataType? = nil,
        session: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.contextData = contextData
        self.session = session
        self.userPoolId = userPoolId
    }
}

struct AdminRespondToAuthChallengeInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let challengeResponses: [Swift.String:Swift.String]?
    let session: Swift.String?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension AdminRespondToAuthChallengeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case contextData = "ContextData"
        case session = "Session"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let challengeResponsesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeResponses)
        var challengeResponsesDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeResponsesContainer = challengeResponsesContainer {
            challengeResponsesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeResponsesContainer {
                if let stringtype0 = stringtype0 {
                    challengeResponsesDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeResponses = challengeResponsesDecoded0
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let contextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ContextDataType.self, forKey: .contextData)
        contextData = contextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension AdminRespondToAuthChallengeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminRespondToAuthChallengeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MFAMethodNotFoundException" : self = .mFAMethodNotFoundException(try MFAMethodNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SoftwareTokenMFANotFoundException" : self = .softwareTokenMFANotFoundException(try SoftwareTokenMFANotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminRespondToAuthChallengeOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case mFAMethodNotFoundException(MFAMethodNotFoundException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case softwareTokenMFANotFoundException(SoftwareTokenMFANotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminRespondToAuthChallengeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AdminRespondToAuthChallengeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authenticationResult = output.authenticationResult
            self.challengeName = output.challengeName
            self.challengeParameters = output.challengeParameters
            self.session = output.session
        } else {
            self.authenticationResult = nil
            self.challengeName = nil
            self.challengeParameters = nil
            self.session = nil
        }
    }
}

/// Responds to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeOutputResponse: Swift.Equatable {
    /// The result returned by the server in response to the authentication request.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeParameters: [Swift.String:Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init (
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

struct AdminRespondToAuthChallengeOutputResponseBody: Swift.Equatable {
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeParameters: [Swift.String:Swift.String]?
    let authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
}

extension AdminRespondToAuthChallengeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationResult = "AuthenticationResult"
        case challengeName = "ChallengeName"
        case challengeParameters = "ChallengeParameters"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeParameters)
        var challengeParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeParametersContainer = challengeParametersContainer {
            challengeParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeParametersContainer {
                if let stringtype0 = stringtype0 {
                    challengeParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeParameters = challengeParametersDecoded0
        let authenticationResultDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthenticationResultType.self, forKey: .authenticationResult)
        authenticationResult = authenticationResultDecoded
    }
}

extension AdminSetUserMFAPreferenceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserMFAPreferenceInput(smsMfaSettings: \(Swift.String(describing: smsMfaSettings)), softwareTokenMfaSettings: \(Swift.String(describing: softwareTokenMfaSettings)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminSetUserMFAPreferenceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsMfaSettings = "SMSMfaSettings"
        case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let smsMfaSettings = self.smsMfaSettings {
            try encodeContainer.encode(smsMfaSettings, forKey: .smsMfaSettings)
        }
        if let softwareTokenMfaSettings = self.softwareTokenMfaSettings {
            try encodeContainer.encode(softwareTokenMfaSettings, forKey: .softwareTokenMfaSettings)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminSetUserMFAPreferenceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminSetUserMFAPreferenceInput: Swift.Equatable {
    /// The SMS text message MFA settings.
    public var smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    /// The time-based one-time password software token MFA settings.
    public var softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user pool username or alias.
    /// This member is required.
    public var username: Swift.String?

    public init (
        smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.smsMfaSettings = smsMfaSettings
        self.softwareTokenMfaSettings = softwareTokenMfaSettings
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminSetUserMFAPreferenceInputBody: Swift.Equatable {
    let smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    let softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?
    let username: Swift.String?
    let userPoolId: Swift.String?
}

extension AdminSetUserMFAPreferenceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsMfaSettings = "SMSMfaSettings"
        case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMfaSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SMSMfaSettingsType.self, forKey: .smsMfaSettings)
        smsMfaSettings = smsMfaSettingsDecoded
        let softwareTokenMfaSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType.self, forKey: .softwareTokenMfaSettings)
        softwareTokenMfaSettings = softwareTokenMfaSettingsDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension AdminSetUserMFAPreferenceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminSetUserMFAPreferenceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminSetUserMFAPreferenceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminSetUserMFAPreferenceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminSetUserMFAPreferenceOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminSetUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserPasswordInput(permanent: \(Swift.String(describing: permanent)), userPoolId: \(Swift.String(describing: userPoolId)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension AdminSetUserPasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case permanent = "Permanent"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if permanent != false {
            try encodeContainer.encode(permanent, forKey: .permanent)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminSetUserPasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminSetUserPasswordInput: Swift.Equatable {
    /// The password for the user.
    /// This member is required.
    public var password: Swift.String?
    /// True if the password is permanent, False if it is temporary.
    public var permanent: Swift.Bool
    /// The user pool ID for the user pool where you want to set the user's password.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user whose password you want to set.
    /// This member is required.
    public var username: Swift.String?

    public init (
        password: Swift.String? = nil,
        permanent: Swift.Bool = false,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.password = password
        self.permanent = permanent
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminSetUserPasswordInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let password: Swift.String?
    let permanent: Swift.Bool
}

extension AdminSetUserPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case permanent = "Permanent"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let permanentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .permanent) ?? false
        permanent = permanentDecoded
    }
}

extension AdminSetUserPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminSetUserPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminSetUserPasswordOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminSetUserPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminSetUserPasswordOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminSetUserSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserSettingsInput(mfaOptions: \(Swift.String(describing: mfaOptions)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminSetUserSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaOptions = "MFAOptions"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mfaOptions = mfaOptions {
            var mfaOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mfaOptions)
            for mfaoptiontype0 in mfaOptions {
                try mfaOptionsContainer.encode(mfaoptiontype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminSetUserSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// You can use this parameter to set an MFA configuration that uses the SMS delivery medium.
public struct AdminSetUserSettingsInput: Swift.Equatable {
    /// You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    /// This member is required.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The ID of the user pool that contains the user whose options you're setting.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user whose options you're setting.
    /// This member is required.
    public var username: Swift.String?

    public init (
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.mfaOptions = mfaOptions
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminSetUserSettingsInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
}

extension AdminSetUserSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaOptions = "MFAOptions"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let mfaOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mfaOptions)
        var mfaOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mfaOptionsContainer = mfaOptionsContainer {
            mfaOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mfaOptionsContainer {
                if let structure0 = structure0 {
                    mfaOptionsDecoded0?.append(structure0)
                }
            }
        }
        mfaOptions = mfaOptionsDecoded0
    }
}

extension AdminSetUserSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminSetUserSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminSetUserSettingsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminSetUserSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server to set user settings as an administrator.
public struct AdminSetUserSettingsOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminUpdateAuthEventFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateAuthEventFeedbackInput(eventId: \(Swift.String(describing: eventId)), feedbackValue: \(Swift.String(describing: feedbackValue)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminUpdateAuthEventFeedbackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId = "EventId"
        case feedbackValue = "FeedbackValue"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let feedbackValue = self.feedbackValue {
            try encodeContainer.encode(feedbackValue.rawValue, forKey: .feedbackValue)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminUpdateAuthEventFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AdminUpdateAuthEventFeedbackInput: Swift.Equatable {
    /// The authentication event ID.
    /// This member is required.
    public var eventId: Swift.String?
    /// The authentication event feedback value.
    /// This member is required.
    public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user pool username.
    /// This member is required.
    public var username: Swift.String?

    public init (
        eventId: Swift.String? = nil,
        feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.eventId = eventId
        self.feedbackValue = feedbackValue
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminUpdateAuthEventFeedbackInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let eventId: Swift.String?
    let feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
}

extension AdminUpdateAuthEventFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId = "EventId"
        case feedbackValue = "FeedbackValue"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let feedbackValueDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.FeedbackValueType.self, forKey: .feedbackValue)
        feedbackValue = feedbackValueDecoded
    }
}

extension AdminUpdateAuthEventFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminUpdateAuthEventFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolAddOnNotEnabledException" : self = .userPoolAddOnNotEnabledException(try UserPoolAddOnNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminUpdateAuthEventFeedbackOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case userPoolAddOnNotEnabledException(UserPoolAddOnNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminUpdateAuthEventFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AdminUpdateAuthEventFeedbackOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminUpdateDeviceStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateDeviceStatusInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceRememberedStatus: \(Swift.String(describing: deviceRememberedStatus)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminUpdateDeviceStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case deviceRememberedStatus = "DeviceRememberedStatus"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let deviceRememberedStatus = self.deviceRememberedStatus {
            try encodeContainer.encode(deviceRememberedStatus.rawValue, forKey: .deviceRememberedStatus)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminUpdateDeviceStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request to update the device status, as an administrator.
public struct AdminUpdateDeviceStatusInput: Swift.Equatable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The status indicating whether a device has been remembered or not.
    public var deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name.
    /// This member is required.
    public var username: Swift.String?

    public init (
        deviceKey: Swift.String? = nil,
        deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.deviceRememberedStatus = deviceRememberedStatus
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminUpdateDeviceStatusInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let deviceKey: Swift.String?
    let deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?
}

extension AdminUpdateDeviceStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceKey = "DeviceKey"
        case deviceRememberedStatus = "DeviceRememberedStatus"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceRememberedStatusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceRememberedStatusType.self, forKey: .deviceRememberedStatus)
        deviceRememberedStatus = deviceRememberedStatusDecoded
    }
}

extension AdminUpdateDeviceStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminUpdateDeviceStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminUpdateDeviceStatusOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminUpdateDeviceStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The status response to the request to update the device, as an administrator.
public struct AdminUpdateDeviceStatusOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminUpdateUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateUserAttributesInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminUpdateUserAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userAttributes = "UserAttributes"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for attributetype0 in userAttributes {
                try userAttributesContainer.encode(attributetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminUpdateUserAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to update the user's attributes as an administrator.
public struct AdminUpdateUserAttributesInput: Swift.Equatable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminUpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If your user pool requires verification before Amazon Cognito updates an attribute value that you specify in this request, Amazon Cognito doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value. To update the value of an attribute that requires verification in the same API request, include the email_verified or phone_number_verified attribute, with a value of true. If you set the email_verified or phone_number_verified value for an email or phone_number attribute that requires verification to true, Amazon Cognito doesn’t send a verification message to your user.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The user pool ID for the user pool where you want to update user attributes.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name of the user for whom you want to update user attributes.
    /// This member is required.
    public var username: Swift.String?

    public init (
        clientMetadata: [Swift.String:Swift.String]? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userAttributes = userAttributes
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminUpdateUserAttributesInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension AdminUpdateUserAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientMetadata = "ClientMetadata"
        case userAttributes = "UserAttributes"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension AdminUpdateUserAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminUpdateUserAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminUpdateUserAttributesOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminUpdateUserAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server for the request to update user attributes as an administrator.
public struct AdminUpdateUserAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension AdminUserGlobalSignOutInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUserGlobalSignOutInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension AdminUserGlobalSignOutInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension AdminUserGlobalSignOutInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request to sign out of all devices, as an administrator.
public struct AdminUserGlobalSignOutInput: Swift.Equatable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user name.
    /// This member is required.
    public var username: Swift.String?

    public init (
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct AdminUserGlobalSignOutInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
}

extension AdminUserGlobalSignOutInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension AdminUserGlobalSignOutOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AdminUserGlobalSignOutOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AdminUserGlobalSignOutOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AdminUserGlobalSignOutOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The global sign-out response, as an administrator.
public struct AdminUserGlobalSignOutOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes {
    public enum AdvancedSecurityModeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case audit
        case enforced
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedSecurityModeType] {
            return [
                .audit,
                .enforced,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .audit: return "AUDIT"
            case .enforced: return "ENFORCED"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdvancedSecurityModeType(rawValue: rawValue) ?? AdvancedSecurityModeType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum AliasAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case phoneNumber
        case preferredUsername
        case sdkUnknown(Swift.String)

        public static var allCases: [AliasAttributeType] {
            return [
                .email,
                .phoneNumber,
                .preferredUsername,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case .preferredUsername: return "preferred_username"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AliasAttributeType(rawValue: rawValue) ?? AliasAttributeType.sdkUnknown(rawValue)
        }
    }
}

extension AliasExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AliasExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
public struct AliasExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that Amazon Cognito sends to the user when the value of an alias attribute is already linked to another user profile.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AliasExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AliasExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.AnalyticsConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn = "ApplicationArn"
        case applicationId = "ApplicationId"
        case externalId = "ExternalId"
        case roleArn = "RoleArn"
        case userDataShared = "UserDataShared"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationArn = self.applicationArn {
            try encodeContainer.encode(applicationArn, forKey: .applicationArn)
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if userDataShared != false {
            try encodeContainer.encode(userDataShared, forKey: .userDataShared)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let userDataSharedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userDataShared) ?? false
        userDataShared = userDataSharedDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The Amazon Pinpoint analytics configuration necessary to collect metrics for a user pool. In Regions where Amazon Pinpointisn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public struct AnalyticsConfigurationType: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.
        public var applicationArn: Swift.String?
        /// The application ID for an Amazon Pinpoint application.
        public var applicationId: Swift.String?
        /// The external ID.
        public var externalId: Swift.String?
        /// The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        public var roleArn: Swift.String?
        /// If UserDataShared is true, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.
        public var userDataShared: Swift.Bool

        public init (
            applicationArn: Swift.String? = nil,
            applicationId: Swift.String? = nil,
            externalId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userDataShared: Swift.Bool = false
        )
        {
            self.applicationArn = applicationArn
            self.applicationId = applicationId
            self.externalId = externalId
            self.roleArn = roleArn
            self.userDataShared = userDataShared
        }
    }

}

extension CognitoIdentityProviderClientTypes.AnalyticsMetadataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsEndpointId = "AnalyticsEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsEndpointId = self.analyticsEndpointId {
            try encodeContainer.encode(analyticsEndpointId, forKey: .analyticsEndpointId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyticsEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyticsEndpointId)
        analyticsEndpointId = analyticsEndpointIdDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// An Amazon Pinpoint analytics endpoint. An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics. For more information about Amazon Web Services Regions that can contain Amazon Pinpoint resources for use with Amazon Cognito user pools, see [Using Amazon Pinpoint analytics with Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-pinpoint-integration.html).
    public struct AnalyticsMetadataType: Swift.Equatable {
        /// The endpoint ID.
        public var analyticsEndpointId: Swift.String?

        public init (
            analyticsEndpointId: Swift.String? = nil
        )
        {
            self.analyticsEndpointId = analyticsEndpointId
        }
    }

}

extension AssociateSoftwareTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSoftwareTokenInput(session: \(Swift.String(describing: session)), accessToken: \"CONTENT_REDACTED\")"}
}

extension AssociateSoftwareTokenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case session = "Session"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
    }
}

extension AssociateSoftwareTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateSoftwareTokenInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose software token you want to generate.
    public var accessToken: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    public var session: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        session: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.session = session
    }
}

struct AssociateSoftwareTokenInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let session: Swift.String?
}

extension AssociateSoftwareTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
    }
}

extension AssociateSoftwareTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateSoftwareTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SoftwareTokenMFANotFoundException" : self = .softwareTokenMFANotFoundException(try SoftwareTokenMFANotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateSoftwareTokenOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case softwareTokenMFANotFoundException(SoftwareTokenMFANotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateSoftwareTokenOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSoftwareTokenOutputResponse(session: \(Swift.String(describing: session)), secretCode: \"CONTENT_REDACTED\")"}
}

extension AssociateSoftwareTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateSoftwareTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.secretCode = output.secretCode
            self.session = output.session
        } else {
            self.secretCode = nil
            self.session = nil
        }
    }
}

public struct AssociateSoftwareTokenOutputResponse: Swift.Equatable {
    /// A unique generated shared secret code that is used in the TOTP algorithm to generate a one-time code.
    public var secretCode: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    public var session: Swift.String?

    public init (
        secretCode: Swift.String? = nil,
        session: Swift.String? = nil
    )
    {
        self.secretCode = secretCode
        self.session = session
    }
}

struct AssociateSoftwareTokenOutputResponseBody: Swift.Equatable {
    let secretCode: Swift.String?
    let session: Swift.String?
}

extension AssociateSoftwareTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretCode = "SecretCode"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretCode)
        secretCode = secretCodeDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum AttributeDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case boolean
        case datetime
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeDataType] {
            return [
                .boolean,
                .datetime,
                .number,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .datetime: return "DateTime"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AttributeDataType(rawValue: rawValue) ?? AttributeDataType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.AttributeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CognitoIdentityProviderClientTypes.AttributeType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttributeType(name: \(Swift.String(describing: name)), value: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// Specifies whether the attribute is standard or custom.
    public struct AttributeType: Swift.Equatable {
        /// The name of the attribute.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension CognitoIdentityProviderClientTypes.AuthEventType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case challengeResponses = "ChallengeResponses"
        case creationDate = "CreationDate"
        case eventContextData = "EventContextData"
        case eventFeedback = "EventFeedback"
        case eventId = "EventId"
        case eventResponse = "EventResponse"
        case eventRisk = "EventRisk"
        case eventType = "EventType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let challengeResponses = challengeResponses {
            var challengeResponsesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .challengeResponses)
            for challengeresponsetype0 in challengeResponses {
                try challengeResponsesContainer.encode(challengeresponsetype0)
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let eventContextData = self.eventContextData {
            try encodeContainer.encode(eventContextData, forKey: .eventContextData)
        }
        if let eventFeedback = self.eventFeedback {
            try encodeContainer.encode(eventFeedback, forKey: .eventFeedback)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventResponse = self.eventResponse {
            try encodeContainer.encode(eventResponse.rawValue, forKey: .eventResponse)
        }
        if let eventRisk = self.eventRisk {
            try encodeContainer.encode(eventRisk, forKey: .eventRisk)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let eventResponseDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventResponseType.self, forKey: .eventResponse)
        eventResponse = eventResponseDecoded
        let eventRiskDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventRiskType.self, forKey: .eventRisk)
        eventRisk = eventRiskDecoded
        let challengeResponsesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ChallengeResponseType?].self, forKey: .challengeResponses)
        var challengeResponsesDecoded0:[CognitoIdentityProviderClientTypes.ChallengeResponseType]? = nil
        if let challengeResponsesContainer = challengeResponsesContainer {
            challengeResponsesDecoded0 = [CognitoIdentityProviderClientTypes.ChallengeResponseType]()
            for structure0 in challengeResponsesContainer {
                if let structure0 = structure0 {
                    challengeResponsesDecoded0?.append(structure0)
                }
            }
        }
        challengeResponses = challengeResponsesDecoded0
        let eventContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventContextDataType.self, forKey: .eventContextData)
        eventContextData = eventContextDataDecoded
        let eventFeedbackDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventFeedbackType.self, forKey: .eventFeedback)
        eventFeedback = eventFeedbackDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The authentication event type.
    public struct AuthEventType: Swift.Equatable {
        /// The challenge responses.
        public var challengeResponses: [CognitoIdentityProviderClientTypes.ChallengeResponseType]?
        /// The creation date
        public var creationDate: ClientRuntime.Date?
        /// The user context data captured at the time of an event request. This value provides additional information about the client from which event the request is received.
        public var eventContextData: CognitoIdentityProviderClientTypes.EventContextDataType?
        /// A flag specifying the user feedback captured at the time of an event request is good or bad.
        public var eventFeedback: CognitoIdentityProviderClientTypes.EventFeedbackType?
        /// The event ID.
        public var eventId: Swift.String?
        /// The event response.
        public var eventResponse: CognitoIdentityProviderClientTypes.EventResponseType?
        /// The event risk.
        public var eventRisk: CognitoIdentityProviderClientTypes.EventRiskType?
        /// The event type.
        public var eventType: CognitoIdentityProviderClientTypes.EventType?

        public init (
            challengeResponses: [CognitoIdentityProviderClientTypes.ChallengeResponseType]? = nil,
            creationDate: ClientRuntime.Date? = nil,
            eventContextData: CognitoIdentityProviderClientTypes.EventContextDataType? = nil,
            eventFeedback: CognitoIdentityProviderClientTypes.EventFeedbackType? = nil,
            eventId: Swift.String? = nil,
            eventResponse: CognitoIdentityProviderClientTypes.EventResponseType? = nil,
            eventRisk: CognitoIdentityProviderClientTypes.EventRiskType? = nil,
            eventType: CognitoIdentityProviderClientTypes.EventType? = nil
        )
        {
            self.challengeResponses = challengeResponses
            self.creationDate = creationDate
            self.eventContextData = eventContextData
            self.eventFeedback = eventFeedback
            self.eventId = eventId
            self.eventResponse = eventResponse
            self.eventRisk = eventRisk
            self.eventType = eventType
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum AuthFlowType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adminNoSrpAuth
        case adminUserPasswordAuth
        case customAuth
        case refreshToken
        case refreshTokenAuth
        case userPasswordAuth
        case userSrpAuth
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthFlowType] {
            return [
                .adminNoSrpAuth,
                .adminUserPasswordAuth,
                .customAuth,
                .refreshToken,
                .refreshTokenAuth,
                .userPasswordAuth,
                .userSrpAuth,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .adminUserPasswordAuth: return "ADMIN_USER_PASSWORD_AUTH"
            case .customAuth: return "CUSTOM_AUTH"
            case .refreshToken: return "REFRESH_TOKEN"
            case .refreshTokenAuth: return "REFRESH_TOKEN_AUTH"
            case .userPasswordAuth: return "USER_PASSWORD_AUTH"
            case .userSrpAuth: return "USER_SRP_AUTH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthFlowType(rawValue: rawValue) ?? AuthFlowType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.AuthenticationResultType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case expiresIn = "ExpiresIn"
        case idToken = "IdToken"
        case newDeviceMetadata = "NewDeviceMetadata"
        case refreshToken = "RefreshToken"
        case tokenType = "TokenType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if expiresIn != 0 {
            try encodeContainer.encode(expiresIn, forKey: .expiresIn)
        }
        if let idToken = self.idToken {
            try encodeContainer.encode(idToken, forKey: .idToken)
        }
        if let newDeviceMetadata = self.newDeviceMetadata {
            try encodeContainer.encode(newDeviceMetadata, forKey: .newDeviceMetadata)
        }
        if let refreshToken = self.refreshToken {
            try encodeContainer.encode(refreshToken, forKey: .refreshToken)
        }
        if let tokenType = self.tokenType {
            try encodeContainer.encode(tokenType, forKey: .tokenType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let expiresInDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiresIn) ?? 0
        expiresIn = expiresInDecoded
        let tokenTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenType)
        tokenType = tokenTypeDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
        let idTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idToken)
        idToken = idTokenDecoded
        let newDeviceMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NewDeviceMetadataType.self, forKey: .newDeviceMetadata)
        newDeviceMetadata = newDeviceMetadataDecoded
    }
}

extension CognitoIdentityProviderClientTypes.AuthenticationResultType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthenticationResultType(expiresIn: \(Swift.String(describing: expiresIn)), newDeviceMetadata: \(Swift.String(describing: newDeviceMetadata)), tokenType: \(Swift.String(describing: tokenType)), accessToken: \"CONTENT_REDACTED\", idToken: \"CONTENT_REDACTED\", refreshToken: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// The authentication result.
    public struct AuthenticationResultType: Swift.Equatable {
        /// A valid access token that Amazon Cognito issued to the user who you want to authenticate.
        public var accessToken: Swift.String?
        /// The expiration period of the authentication result in seconds.
        public var expiresIn: Swift.Int
        /// The ID token.
        public var idToken: Swift.String?
        /// The new device metadata from an authentication result.
        public var newDeviceMetadata: CognitoIdentityProviderClientTypes.NewDeviceMetadataType?
        /// The refresh token.
        public var refreshToken: Swift.String?
        /// The token type.
        public var tokenType: Swift.String?

        public init (
            accessToken: Swift.String? = nil,
            expiresIn: Swift.Int = 0,
            idToken: Swift.String? = nil,
            newDeviceMetadata: CognitoIdentityProviderClientTypes.NewDeviceMetadataType? = nil,
            refreshToken: Swift.String? = nil,
            tokenType: Swift.String? = nil
        )
        {
            self.accessToken = accessToken
            self.expiresIn = expiresIn
            self.idToken = idToken
            self.newDeviceMetadata = newDeviceMetadata
            self.refreshToken = refreshToken
            self.tokenType = tokenType
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum ChallengeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mfa
        case password
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeName] {
            return [
                .mfa,
                .password,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mfa: return "Mfa"
            case .password: return "Password"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChallengeName(rawValue: rawValue) ?? ChallengeName.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum ChallengeNameType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adminNoSrpAuth
        case customChallenge
        case devicePasswordVerifier
        case deviceSrpAuth
        case mfaSetup
        case newPasswordRequired
        case passwordVerifier
        case selectMfaType
        case smsMfa
        case softwareTokenMfa
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeNameType] {
            return [
                .adminNoSrpAuth,
                .customChallenge,
                .devicePasswordVerifier,
                .deviceSrpAuth,
                .mfaSetup,
                .newPasswordRequired,
                .passwordVerifier,
                .selectMfaType,
                .smsMfa,
                .softwareTokenMfa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .customChallenge: return "CUSTOM_CHALLENGE"
            case .devicePasswordVerifier: return "DEVICE_PASSWORD_VERIFIER"
            case .deviceSrpAuth: return "DEVICE_SRP_AUTH"
            case .mfaSetup: return "MFA_SETUP"
            case .newPasswordRequired: return "NEW_PASSWORD_REQUIRED"
            case .passwordVerifier: return "PASSWORD_VERIFIER"
            case .selectMfaType: return "SELECT_MFA_TYPE"
            case .smsMfa: return "SMS_MFA"
            case .softwareTokenMfa: return "SOFTWARE_TOKEN_MFA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChallengeNameType(rawValue: rawValue) ?? ChallengeNameType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum ChallengeResponse: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeResponse] {
            return [
                .failure,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "Failure"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChallengeResponse(rawValue: rawValue) ?? ChallengeResponse.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.ChallengeResponseType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case challengeName = "ChallengeName"
        case challengeResponse = "ChallengeResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let challengeName = self.challengeName {
            try encodeContainer.encode(challengeName.rawValue, forKey: .challengeName)
        }
        if let challengeResponse = self.challengeResponse {
            try encodeContainer.encode(challengeResponse.rawValue, forKey: .challengeResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeName.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let challengeResponseDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeResponse.self, forKey: .challengeResponse)
        challengeResponse = challengeResponseDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The challenge response type.
    public struct ChallengeResponseType: Swift.Equatable {
        /// The challenge name.
        public var challengeName: CognitoIdentityProviderClientTypes.ChallengeName?
        /// The challenge response.
        public var challengeResponse: CognitoIdentityProviderClientTypes.ChallengeResponse?

        public init (
            challengeName: CognitoIdentityProviderClientTypes.ChallengeName? = nil,
            challengeResponse: CognitoIdentityProviderClientTypes.ChallengeResponse? = nil
        )
        {
            self.challengeName = challengeName
            self.challengeResponse = challengeResponse
        }
    }

}

extension ChangePasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangePasswordInput(accessToken: \"CONTENT_REDACTED\", previousPassword: \"CONTENT_REDACTED\", proposedPassword: \"CONTENT_REDACTED\")"}
}

extension ChangePasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case previousPassword = "PreviousPassword"
        case proposedPassword = "ProposedPassword"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let previousPassword = self.previousPassword {
            try encodeContainer.encode(previousPassword, forKey: .previousPassword)
        }
        if let proposedPassword = self.proposedPassword {
            try encodeContainer.encode(proposedPassword, forKey: .proposedPassword)
        }
    }
}

extension ChangePasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to change a user password.
public struct ChangePasswordInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose password you want to change.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The old password.
    /// This member is required.
    public var previousPassword: Swift.String?
    /// The new password.
    /// This member is required.
    public var proposedPassword: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        previousPassword: Swift.String? = nil,
        proposedPassword: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.previousPassword = previousPassword
        self.proposedPassword = proposedPassword
    }
}

struct ChangePasswordInputBody: Swift.Equatable {
    let previousPassword: Swift.String?
    let proposedPassword: Swift.String?
    let accessToken: Swift.String?
}

extension ChangePasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case previousPassword = "PreviousPassword"
        case proposedPassword = "ProposedPassword"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let previousPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousPassword)
        previousPassword = previousPasswordDecoded
        let proposedPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedPassword)
        proposedPassword = proposedPasswordDecoded
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension ChangePasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ChangePasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ChangePasswordOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangePasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response from the server to the change password request.
public struct ChangePasswordOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case deliveryMedium = "DeliveryMedium"
        case destination = "Destination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let deliveryMedium = self.deliveryMedium {
            try encodeContainer.encode(deliveryMedium.rawValue, forKey: .deliveryMedium)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let deliveryMediumDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeliveryMediumType.self, forKey: .deliveryMedium)
        deliveryMedium = deliveryMediumDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The delivery details for an email or SMS message that Amazon Cognito sent for authentication or verification.
    public struct CodeDeliveryDetailsType: Swift.Equatable {
        /// The name of the attribute that Amazon Cognito verifies with the code.
        public var attributeName: Swift.String?
        /// The method that Amazon Cognito used to send the code.
        public var deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType?
        /// The email address or phone number destination where Amazon Cognito sent the code.
        public var destination: Swift.String?

        public init (
            attributeName: Swift.String? = nil,
            deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType? = nil,
            destination: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
            self.destination = destination
        }
    }

}

extension CodeDeliveryFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CodeDeliveryFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a verification code fails to deliver successfully.
public struct CodeDeliveryFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message sent when a verification code fails to deliver successfully.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CodeDeliveryFailureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CodeDeliveryFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CodeMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown if the provided code doesn't match what the server was expecting.
public struct CodeMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided when the code mismatch exception is thrown.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CodeMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CodeMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventAction = "EventAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventAction = self.eventAction {
            try encodeContainer.encode(eventAction.rawValue, forKey: .eventAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventActionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CompromisedCredentialsEventActionType.self, forKey: .eventAction)
        eventAction = eventActionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The compromised credentials actions type.
    public struct CompromisedCredentialsActionsType: Swift.Equatable {
        /// The event action.
        /// This member is required.
        public var eventAction: CognitoIdentityProviderClientTypes.CompromisedCredentialsEventActionType?

        public init (
            eventAction: CognitoIdentityProviderClientTypes.CompromisedCredentialsEventActionType? = nil
        )
        {
            self.eventAction = eventAction
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum CompromisedCredentialsEventActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case block
        case noAction
        case sdkUnknown(Swift.String)

        public static var allCases: [CompromisedCredentialsEventActionType] {
            return [
                .block,
                .noAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .block: return "BLOCK"
            case .noAction: return "NO_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompromisedCredentialsEventActionType(rawValue: rawValue) ?? CompromisedCredentialsEventActionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case eventFilter = "EventFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = self.actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let eventFilter = eventFilter {
            var eventFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventFilter)
            for eventfiltertype0 in eventFilter {
                try eventFilterContainer.encode(eventfiltertype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventFilterContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.EventFilterType?].self, forKey: .eventFilter)
        var eventFilterDecoded0:[CognitoIdentityProviderClientTypes.EventFilterType]? = nil
        if let eventFilterContainer = eventFilterContainer {
            eventFilterDecoded0 = [CognitoIdentityProviderClientTypes.EventFilterType]()
            for enum0 in eventFilterContainer {
                if let enum0 = enum0 {
                    eventFilterDecoded0?.append(enum0)
                }
            }
        }
        eventFilter = eventFilterDecoded0
        let actionsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType.self, forKey: .actions)
        actions = actionsDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The compromised credentials risk configuration type.
    public struct CompromisedCredentialsRiskConfigurationType: Swift.Equatable {
        /// The compromised credentials risk configuration actions.
        /// This member is required.
        public var actions: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType?
        /// Perform the action for these events. The default is to perform all events if no event filter is specified.
        public var eventFilter: [CognitoIdentityProviderClientTypes.EventFilterType]?

        public init (
            actions: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType? = nil,
            eventFilter: [CognitoIdentityProviderClientTypes.EventFilterType]? = nil
        )
        {
            self.actions = actions
            self.eventFilter = eventFilter
        }
    }

}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown if two or more modifications are happening concurrently.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided when the concurrent exception is thrown.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfirmDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceName: \(Swift.String(describing: deviceName)), deviceSecretVerifierConfig: \(Swift.String(describing: deviceSecretVerifierConfig)), accessToken: \"CONTENT_REDACTED\")"}
}

extension ConfirmDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
        case deviceName = "DeviceName"
        case deviceSecretVerifierConfig = "DeviceSecretVerifierConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let deviceName = self.deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let deviceSecretVerifierConfig = self.deviceSecretVerifierConfig {
            try encodeContainer.encode(deviceSecretVerifierConfig, forKey: .deviceSecretVerifierConfig)
        }
    }
}

extension ConfirmDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Confirms the device request.
public struct ConfirmDeviceInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose device you want to confirm.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The device name.
    public var deviceName: Swift.String?
    /// The configuration of the device secret verifier.
    public var deviceSecretVerifierConfig: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType?

    public init (
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        deviceSecretVerifierConfig: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
        self.deviceName = deviceName
        self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
    }
}

struct ConfirmDeviceInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let deviceKey: Swift.String?
    let deviceSecretVerifierConfig: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType?
    let deviceName: Swift.String?
}

extension ConfirmDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
        case deviceName = "DeviceName"
        case deviceSecretVerifierConfig = "DeviceSecretVerifierConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceSecretVerifierConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType.self, forKey: .deviceSecretVerifierConfig)
        deviceSecretVerifierConfig = deviceSecretVerifierConfigDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
    }
}

extension ConfirmDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UsernameExistsException" : self = .usernameExistsException(try UsernameExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ConfirmDeviceOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case usernameExistsException(UsernameExistsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConfirmDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userConfirmationNecessary = output.userConfirmationNecessary
        } else {
            self.userConfirmationNecessary = false
        }
    }
}

/// Confirms the device response.
public struct ConfirmDeviceOutputResponse: Swift.Equatable {
    /// Indicates whether the user confirmation must confirm the device response.
    public var userConfirmationNecessary: Swift.Bool

    public init (
        userConfirmationNecessary: Swift.Bool = false
    )
    {
        self.userConfirmationNecessary = userConfirmationNecessary
    }
}

struct ConfirmDeviceOutputResponseBody: Swift.Equatable {
    let userConfirmationNecessary: Swift.Bool
}

extension ConfirmDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userConfirmationNecessary = "UserConfirmationNecessary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userConfirmationNecessaryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userConfirmationNecessary) ?? false
        userConfirmationNecessary = userConfirmationNecessaryDecoded
    }
}

extension ConfirmForgotPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmForgotPasswordInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), confirmationCode: \(Swift.String(describing: confirmationCode)), userContextData: \(Swift.String(describing: userContextData)), clientId: \"CONTENT_REDACTED\", password: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension ConfirmForgotPasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case password = "Password"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let confirmationCode = self.confirmationCode {
            try encodeContainer.encode(confirmationCode, forKey: .confirmationCode)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension ConfirmForgotPasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request representing the confirmation for a password reset.
public struct ConfirmForgotPasswordInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmForgotPassword calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The confirmation code from your user's request to reset their password. For more information, see [ForgotPassword](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html).
    /// This member is required.
    public var confirmationCode: Swift.String?
    /// The new password that your user wants to set.
    /// This member is required.
    public var password: Swift.String?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
    /// This member is required.
    public var username: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        confirmationCode: Swift.String? = nil,
        password: Swift.String? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.confirmationCode = confirmationCode
        self.password = password
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

struct ConfirmForgotPasswordInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let secretHash: Swift.String?
    let username: Swift.String?
    let confirmationCode: Swift.String?
    let password: Swift.String?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension ConfirmForgotPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case password = "Password"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let secretHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretHash)
        secretHash = secretHashDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let confirmationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationCode)
        confirmationCode = confirmationCodeDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension ConfirmForgotPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmForgotPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyFailedAttemptsException" : self = .tooManyFailedAttemptsException(try TooManyFailedAttemptsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ConfirmForgotPasswordOutputError: Swift.Error, Swift.Equatable {
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyFailedAttemptsException(TooManyFailedAttemptsException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmForgotPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response from the server that results from a user's request to retrieve a forgotten password.
public struct ConfirmForgotPasswordOutputResponse: Swift.Equatable {

    public init () { }
}

extension ConfirmSignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmSignUpInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), confirmationCode: \(Swift.String(describing: confirmationCode)), forceAliasCreation: \(Swift.String(describing: forceAliasCreation)), userContextData: \(Swift.String(describing: userContextData)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension ConfirmSignUpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case forceAliasCreation = "ForceAliasCreation"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let confirmationCode = self.confirmationCode {
            try encodeContainer.encode(confirmationCode, forKey: .confirmationCode)
        }
        if forceAliasCreation != false {
            try encodeContainer.encode(forceAliasCreation, forKey: .forceAliasCreation)
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension ConfirmSignUpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to confirm registration of a user.
public struct ConfirmSignUpInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmSignUp calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the app client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The confirmation code sent by a user's request to confirm registration.
    /// This member is required.
    public var confirmationCode: Swift.String?
    /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
    public var forceAliasCreation: Swift.Bool
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The user name of the user whose registration you want to confirm.
    /// This member is required.
    public var username: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        confirmationCode: Swift.String? = nil,
        forceAliasCreation: Swift.Bool = false,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.confirmationCode = confirmationCode
        self.forceAliasCreation = forceAliasCreation
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

struct ConfirmSignUpInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let secretHash: Swift.String?
    let username: Swift.String?
    let confirmationCode: Swift.String?
    let forceAliasCreation: Swift.Bool
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension ConfirmSignUpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case forceAliasCreation = "ForceAliasCreation"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let secretHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretHash)
        secretHash = secretHashDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let confirmationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationCode)
        confirmationCode = confirmationCodeDecoded
        let forceAliasCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceAliasCreation) ?? false
        forceAliasCreation = forceAliasCreationDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension ConfirmSignUpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmSignUpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyFailedAttemptsException" : self = .tooManyFailedAttemptsException(try TooManyFailedAttemptsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ConfirmSignUpOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyFailedAttemptsException(TooManyFailedAttemptsException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmSignUpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server for the registration confirmation.
public struct ConfirmSignUpOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes.ContextDataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encodedData = "EncodedData"
        case httpHeaders = "HttpHeaders"
        case ipAddress = "IpAddress"
        case serverName = "ServerName"
        case serverPath = "ServerPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encodedData = self.encodedData {
            try encodeContainer.encode(encodedData, forKey: .encodedData)
        }
        if let httpHeaders = httpHeaders {
            var httpHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpHeaders)
            for httpheader0 in httpHeaders {
                try httpHeadersContainer.encode(httpheader0)
            }
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let serverName = self.serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let serverPath = self.serverPath {
            try encodeContainer.encode(serverPath, forKey: .serverPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let serverPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverPath)
        serverPath = serverPathDecoded
        let httpHeadersContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.HttpHeader?].self, forKey: .httpHeaders)
        var httpHeadersDecoded0:[CognitoIdentityProviderClientTypes.HttpHeader]? = nil
        if let httpHeadersContainer = httpHeadersContainer {
            httpHeadersDecoded0 = [CognitoIdentityProviderClientTypes.HttpHeader]()
            for structure0 in httpHeadersContainer {
                if let structure0 = structure0 {
                    httpHeadersDecoded0?.append(structure0)
                }
            }
        }
        httpHeaders = httpHeadersDecoded0
        let encodedDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encodedData)
        encodedData = encodedDataDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    public struct ContextDataType: Swift.Equatable {
        /// Encoded device-fingerprint details that your app collected with the Amazon Cognito context data collection library. For more information, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var encodedData: Swift.String?
        /// HttpHeaders received on your server in same order.
        /// This member is required.
        public var httpHeaders: [CognitoIdentityProviderClientTypes.HttpHeader]?
        /// The source IP address of your user's device.
        /// This member is required.
        public var ipAddress: Swift.String?
        /// Your server endpoint where this API is invoked.
        /// This member is required.
        public var serverName: Swift.String?
        /// Your server path where this API is invoked.
        /// This member is required.
        public var serverPath: Swift.String?

        public init (
            encodedData: Swift.String? = nil,
            httpHeaders: [CognitoIdentityProviderClientTypes.HttpHeader]? = nil,
            ipAddress: Swift.String? = nil,
            serverName: Swift.String? = nil,
            serverPath: Swift.String? = nil
        )
        {
            self.encodedData = encodedData
            self.httpHeaders = httpHeaders
            self.ipAddress = ipAddress
            self.serverName = serverName
            self.serverPath = serverPath
        }
    }

}

extension CreateGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case groupName = "GroupName"
        case precedence = "Precedence"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let precedence = self.precedence {
            try encodeContainer.encode(precedence, forKey: .precedence)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension CreateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGroupInput: Swift.Equatable {
    /// A string containing the description of the group.
    public var description: Swift.String?
    /// The name of the group. Must be unique.
    /// This member is required.
    public var groupName: Swift.String?
    /// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the cognito:roles and cognito:preferred_role claims. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim isn't set in users' tokens. The default Precedence value is null. The maximum Precedence value is 2^31-1.
    public var precedence: Swift.Int?
    /// The role Amazon Resource Name (ARN) for the group.
    public var roleArn: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        description: Swift.String? = nil,
        groupName: Swift.String? = nil,
        precedence: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.description = description
        self.groupName = groupName
        self.precedence = precedence
        self.roleArn = roleArn
        self.userPoolId = userPoolId
    }
}

struct CreateGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let userPoolId: Swift.String?
    let description: Swift.String?
    let roleArn: Swift.String?
    let precedence: Swift.Int?
}

extension CreateGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case groupName = "GroupName"
        case precedence = "Precedence"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let precedenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .precedence)
        precedence = precedenceDecoded
    }
}

extension CreateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GroupExistsException" : self = .groupExistsException(try GroupExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGroupOutputError: Swift.Error, Swift.Equatable {
    case groupExistsException(GroupExistsException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct CreateGroupOutputResponse: Swift.Equatable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init (
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

struct CreateGroupOutputResponseBody: Swift.Equatable {
    let group: CognitoIdentityProviderClientTypes.GroupType?
}

extension CreateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.GroupType.self, forKey: .group)
        group = groupDecoded
    }
}

extension CreateIdentityProviderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case idpIdentifiers = "IdpIdentifiers"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeMapping = attributeMapping {
            var attributeMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeMapping)
            for (dictKey0, attributeMappingType0) in attributeMapping {
                try attributeMappingContainer.encode(attributeMappingType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let idpIdentifiers = idpIdentifiers {
            var idpIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .idpIdentifiers)
            for idpidentifiertype0 in idpIdentifiers {
                try idpIdentifiersContainer.encode(idpidentifiertype0)
            }
        }
        if let providerDetails = providerDetails {
            var providerDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .providerDetails)
            for (dictKey0, providerDetailsType0) in providerDetails {
                try providerDetailsContainer.encode(providerDetailsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension CreateIdentityProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateIdentityProviderInput: Swift.Equatable {
    /// A mapping of IdP attributes to standard and custom user pool attributes.
    public var attributeMapping: [Swift.String:Swift.String]?
    /// A list of IdP identifiers.
    public var idpIdentifiers: [Swift.String]?
    /// The IdP details. The following list describes the provider detail keys for each IdP type.
    ///
    /// * For Google and Login with Amazon:
    ///
    /// * client_id
    ///
    /// * client_secret
    ///
    /// * authorize_scopes
    ///
    ///
    ///
    ///
    /// * For Facebook:
    ///
    /// * client_id
    ///
    /// * client_secret
    ///
    /// * authorize_scopes
    ///
    /// * api_version
    ///
    ///
    ///
    ///
    /// * For Sign in with Apple:
    ///
    /// * client_id
    ///
    /// * team_id
    ///
    /// * key_id
    ///
    /// * private_key
    ///
    /// * authorize_scopes
    ///
    ///
    ///
    ///
    /// * For OpenID Connect (OIDC) providers:
    ///
    /// * client_id
    ///
    /// * client_secret
    ///
    /// * attributes_request_method
    ///
    /// * oidc_issuer
    ///
    /// * authorize_scopes
    ///
    /// * The following keys are only present if Amazon Cognito didn't discover them at the oidc_issuer URL.
    ///
    /// * authorize_url
    ///
    /// * token_url
    ///
    /// * attributes_url
    ///
    /// * jwks_uri
    ///
    ///
    ///
    ///
    /// * Amazon Cognito sets the value of the following keys automatically. They are read-only.
    ///
    /// * attributes_url_add_attributes
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    /// * For SAML providers:
    ///
    /// * MetadataFile or MetadataURL
    ///
    /// * IDPSignout optional
    /// This member is required.
    public var providerDetails: [Swift.String:Swift.String]?
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The IdP type.
    /// This member is required.
    public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        attributeMapping: [Swift.String:Swift.String]? = nil,
        idpIdentifiers: [Swift.String]? = nil,
        providerDetails: [Swift.String:Swift.String]? = nil,
        providerName: Swift.String? = nil,
        providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributeMapping = attributeMapping
        self.idpIdentifiers = idpIdentifiers
        self.providerDetails = providerDetails
        self.providerName = providerName
        self.providerType = providerType
        self.userPoolId = userPoolId
    }
}

struct CreateIdentityProviderInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let providerName: Swift.String?
    let providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?
    let providerDetails: [Swift.String:Swift.String]?
    let attributeMapping: [Swift.String:Swift.String]?
    let idpIdentifiers: [Swift.String]?
}

extension CreateIdentityProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case idpIdentifiers = "IdpIdentifiers"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderTypeType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let providerDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .providerDetails)
        var providerDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let providerDetailsContainer = providerDetailsContainer {
            providerDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in providerDetailsContainer {
                if let stringtype0 = stringtype0 {
                    providerDetailsDecoded0?[key0] = stringtype0
                }
            }
        }
        providerDetails = providerDetailsDecoded0
        let attributeMappingContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributeMapping)
        var attributeMappingDecoded0: [Swift.String:Swift.String]? = nil
        if let attributeMappingContainer = attributeMappingContainer {
            attributeMappingDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in attributeMappingContainer {
                if let stringtype0 = stringtype0 {
                    attributeMappingDecoded0?[key0] = stringtype0
                }
            }
        }
        attributeMapping = attributeMappingDecoded0
        let idpIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .idpIdentifiers)
        var idpIdentifiersDecoded0:[Swift.String]? = nil
        if let idpIdentifiersContainer = idpIdentifiersContainer {
            idpIdentifiersDecoded0 = [Swift.String]()
            for string0 in idpIdentifiersContainer {
                if let string0 = string0 {
                    idpIdentifiersDecoded0?.append(string0)
                }
            }
        }
        idpIdentifiers = idpIdentifiersDecoded0
    }
}

extension CreateIdentityProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIdentityProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateProviderException" : self = .duplicateProviderException(try DuplicateProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateIdentityProviderOutputError: Swift.Error, Swift.Equatable {
    case duplicateProviderException(DuplicateProviderException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIdentityProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateIdentityProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProvider = output.identityProvider
        } else {
            self.identityProvider = nil
        }
    }
}

public struct CreateIdentityProviderOutputResponse: Swift.Equatable {
    /// The newly created IdP object.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init (
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

struct CreateIdentityProviderOutputResponseBody: Swift.Equatable {
    let identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?
}

extension CreateIdentityProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProvider = "IdentityProvider"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderType.self, forKey: .identityProvider)
        identityProvider = identityProviderDecoded
    }
}

extension CreateResourceServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scopes = scopes {
            var scopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scopes)
            for resourceserverscopetype0 in scopes {
                try scopesContainer.encode(resourceserverscopetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension CreateResourceServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateResourceServerInput: Swift.Equatable {
    /// A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located, such as https://my-weather-api.example.com.
    /// This member is required.
    public var identifier: Swift.String?
    /// A friendly name for the resource server.
    /// This member is required.
    public var name: Swift.String?
    /// A list of scopes. Each scope is a key-value map with the keys name and description.
    public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        identifier: Swift.String? = nil,
        name: Swift.String? = nil,
        scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.name = name
        self.scopes = scopes
        self.userPoolId = userPoolId
    }
}

struct CreateResourceServerInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let identifier: Swift.String?
    let name: Swift.String?
    let scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
}

extension CreateResourceServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ResourceServerScopeType?].self, forKey: .scopes)
        var scopesDecoded0:[CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [CognitoIdentityProviderClientTypes.ResourceServerScopeType]()
            for structure0 in scopesContainer {
                if let structure0 = structure0 {
                    scopesDecoded0?.append(structure0)
                }
            }
        }
        scopes = scopesDecoded0
    }
}

extension CreateResourceServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateResourceServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateResourceServerOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateResourceServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateResourceServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceServer = output.resourceServer
        } else {
            self.resourceServer = nil
        }
    }
}

public struct CreateResourceServerOutputResponse: Swift.Equatable {
    /// The newly created resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init (
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

struct CreateResourceServerOutputResponseBody: Swift.Equatable {
    let resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?
}

extension CreateResourceServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceServer = "ResourceServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceServerDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ResourceServerType.self, forKey: .resourceServer)
        resourceServer = resourceServerDecoded
    }
}

extension CreateUserImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
        case jobName = "JobName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsRoleArn = self.cloudWatchLogsRoleArn {
            try encodeContainer.encode(cloudWatchLogsRoleArn, forKey: .cloudWatchLogsRoleArn)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension CreateUserImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to create the user import job.
public struct CreateUserImportJobInput: Swift.Equatable {
    /// The role ARN for the Amazon CloudWatch Logs Logging role for the user import job.
    /// This member is required.
    public var cloudWatchLogsRoleArn: Swift.String?
    /// The job name for the user import job.
    /// This member is required.
    public var jobName: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        cloudWatchLogsRoleArn: Swift.String? = nil,
        jobName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
        self.jobName = jobName
        self.userPoolId = userPoolId
    }
}

struct CreateUserImportJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let userPoolId: Swift.String?
    let cloudWatchLogsRoleArn: Swift.String?
}

extension CreateUserImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
        case jobName = "JobName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let cloudWatchLogsRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsRoleArn)
        cloudWatchLogsRoleArn = cloudWatchLogsRoleArnDecoded
    }
}

extension CreateUserImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionNotMetException" : self = .preconditionNotMetException(try PreconditionNotMetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateUserImportJobOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case preconditionNotMetException(PreconditionNotMetException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateUserImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userImportJob = output.userImportJob
        } else {
            self.userImportJob = nil
        }
    }
}

/// Represents the response from the server to the request to create the user import job.
public struct CreateUserImportJobOutputResponse: Swift.Equatable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init (
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

struct CreateUserImportJobOutputResponseBody: Swift.Equatable {
    let userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?
}

extension CreateUserImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userImportJob = "UserImportJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userImportJobDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserImportJobType.self, forKey: .userImportJob)
        userImportJob = userImportJobDecoded
    }
}

extension CreateUserPoolClientInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case generateSecret = "GenerateSecret"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTokenValidity = self.accessTokenValidity {
            try encodeContainer.encode(accessTokenValidity, forKey: .accessTokenValidity)
        }
        if let allowedOAuthFlows = allowedOAuthFlows {
            var allowedOAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthFlows)
            for oauthflowtype0 in allowedOAuthFlows {
                try allowedOAuthFlowsContainer.encode(oauthflowtype0.rawValue)
            }
        }
        if allowedOAuthFlowsUserPoolClient != false {
            try encodeContainer.encode(allowedOAuthFlowsUserPoolClient, forKey: .allowedOAuthFlowsUserPoolClient)
        }
        if let allowedOAuthScopes = allowedOAuthScopes {
            var allowedOAuthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthScopes)
            for scopetype0 in allowedOAuthScopes {
                try allowedOAuthScopesContainer.encode(scopetype0)
            }
        }
        if let analyticsConfiguration = self.analyticsConfiguration {
            try encodeContainer.encode(analyticsConfiguration, forKey: .analyticsConfiguration)
        }
        if let authSessionValidity = self.authSessionValidity {
            try encodeContainer.encode(authSessionValidity, forKey: .authSessionValidity)
        }
        if let callbackURLs = callbackURLs {
            var callbackURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .callbackURLs)
            for redirecturltype0 in callbackURLs {
                try callbackURLsContainer.encode(redirecturltype0)
            }
        }
        if let clientName = self.clientName {
            try encodeContainer.encode(clientName, forKey: .clientName)
        }
        if let defaultRedirectURI = self.defaultRedirectURI {
            try encodeContainer.encode(defaultRedirectURI, forKey: .defaultRedirectURI)
        }
        if let enablePropagateAdditionalUserContextData = self.enablePropagateAdditionalUserContextData {
            try encodeContainer.encode(enablePropagateAdditionalUserContextData, forKey: .enablePropagateAdditionalUserContextData)
        }
        if let enableTokenRevocation = self.enableTokenRevocation {
            try encodeContainer.encode(enableTokenRevocation, forKey: .enableTokenRevocation)
        }
        if let explicitAuthFlows = explicitAuthFlows {
            var explicitAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .explicitAuthFlows)
            for explicitauthflowstype0 in explicitAuthFlows {
                try explicitAuthFlowsContainer.encode(explicitauthflowstype0.rawValue)
            }
        }
        if generateSecret != false {
            try encodeContainer.encode(generateSecret, forKey: .generateSecret)
        }
        if let idTokenValidity = self.idTokenValidity {
            try encodeContainer.encode(idTokenValidity, forKey: .idTokenValidity)
        }
        if let logoutURLs = logoutURLs {
            var logoutURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logoutURLs)
            for redirecturltype0 in logoutURLs {
                try logoutURLsContainer.encode(redirecturltype0)
            }
        }
        if let preventUserExistenceErrors = self.preventUserExistenceErrors {
            try encodeContainer.encode(preventUserExistenceErrors.rawValue, forKey: .preventUserExistenceErrors)
        }
        if let readAttributes = readAttributes {
            var readAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readAttributes)
            for clientpermissiontype0 in readAttributes {
                try readAttributesContainer.encode(clientpermissiontype0)
            }
        }
        if refreshTokenValidity != 0 {
            try encodeContainer.encode(refreshTokenValidity, forKey: .refreshTokenValidity)
        }
        if let supportedIdentityProviders = supportedIdentityProviders {
            var supportedIdentityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedIdentityProviders)
            for providernametype0 in supportedIdentityProviders {
                try supportedIdentityProvidersContainer.encode(providernametype0)
            }
        }
        if let tokenValidityUnits = self.tokenValidityUnits {
            try encodeContainer.encode(tokenValidityUnits, forKey: .tokenValidityUnits)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let writeAttributes = writeAttributes {
            var writeAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .writeAttributes)
            for clientpermissiontype0 in writeAttributes {
                try writeAttributesContainer.encode(clientpermissiontype0)
            }
        }
    }
}

extension CreateUserPoolClientInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to create a user pool client.
public struct CreateUserPoolClientInput: Swift.Equatable {
    /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
    public var accessTokenValidity: Swift.Int?
    /// The allowed OAuth flows. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    /// Set to true if the client is allowed to follow the OAuth protocol when interacting with Amazon Cognito user pools.
    public var allowedOAuthFlowsUserPoolClient: Swift.Bool
    /// The allowed OAuth scopes. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    public var allowedOAuthScopes: [Swift.String]?
    /// The user pool analytics configuration for collecting metrics and sending them to your Amazon Pinpoint campaign. In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in Amazon Web Services Region us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
    public var authSessionValidity: Swift.Int?
    /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var callbackURLs: [Swift.String]?
    /// The client name for the user pool client you would like to create.
    /// This member is required.
    public var clientName: Swift.String?
    /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var defaultRedirectURI: Swift.String?
    /// Activates the propagation of additional user context data. For more information about propagation of user context data, see [ Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html). If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    public var enablePropagateAdditionalUserContextData: Swift.Bool?
    /// Activates or deactivates token revocation. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html). If you don't include this parameter, token revocation is automatically activated for the new user pool client.
    public var enableTokenRevocation: Swift.Bool?
    /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
    ///
    /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
    ///
    /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
    ///
    /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
    ///
    /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
    ///
    /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
    ///
    ///
    /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
    public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    /// Boolean to specify whether you want to generate a secret for the user pool client being created.
    public var generateSecret: Swift.Bool
    /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
    public var idTokenValidity: Swift.Int?
    /// A list of allowed logout URLs for the IdPs.
    public var logoutURLs: [Swift.String]?
    /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
    ///
    /// * ENABLED - This prevents user existence-related errors.
    ///
    /// * LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.
    public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    /// The read attributes.
    public var readAttributes: [Swift.String]?
    /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
    public var refreshTokenValidity: Swift.Int
    /// A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: COGNITO, Facebook, Google, SignInWithApple, and LoginWithAmazon. You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example MySAMLIdP or MyOIDCIdP.
    public var supportedIdentityProviders: [Swift.String]?
    /// The units in which the validity times are represented. The default unit for RefreshToken is days, and default for ID and access tokens are hours.
    public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    /// The user pool ID for the user pool where you want to create a user pool client.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user pool attributes that the app client can write to. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see [Specifying IdP Attribute Mappings for Your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
    public var writeAttributes: [Swift.String]?

    public init (
        accessTokenValidity: Swift.Int? = nil,
        allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Swift.Bool = false,
        allowedOAuthScopes: [Swift.String]? = nil,
        analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
        authSessionValidity: Swift.Int? = nil,
        callbackURLs: [Swift.String]? = nil,
        clientName: Swift.String? = nil,
        defaultRedirectURI: Swift.String? = nil,
        enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
        enableTokenRevocation: Swift.Bool? = nil,
        explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
        generateSecret: Swift.Bool = false,
        idTokenValidity: Swift.Int? = nil,
        logoutURLs: [Swift.String]? = nil,
        preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
        readAttributes: [Swift.String]? = nil,
        refreshTokenValidity: Swift.Int = 0,
        supportedIdentityProviders: [Swift.String]? = nil,
        tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
        userPoolId: Swift.String? = nil,
        writeAttributes: [Swift.String]? = nil
    )
    {
        self.accessTokenValidity = accessTokenValidity
        self.allowedOAuthFlows = allowedOAuthFlows
        self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
        self.allowedOAuthScopes = allowedOAuthScopes
        self.analyticsConfiguration = analyticsConfiguration
        self.authSessionValidity = authSessionValidity
        self.callbackURLs = callbackURLs
        self.clientName = clientName
        self.defaultRedirectURI = defaultRedirectURI
        self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
        self.enableTokenRevocation = enableTokenRevocation
        self.explicitAuthFlows = explicitAuthFlows
        self.generateSecret = generateSecret
        self.idTokenValidity = idTokenValidity
        self.logoutURLs = logoutURLs
        self.preventUserExistenceErrors = preventUserExistenceErrors
        self.readAttributes = readAttributes
        self.refreshTokenValidity = refreshTokenValidity
        self.supportedIdentityProviders = supportedIdentityProviders
        self.tokenValidityUnits = tokenValidityUnits
        self.userPoolId = userPoolId
        self.writeAttributes = writeAttributes
    }
}

struct CreateUserPoolClientInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientName: Swift.String?
    let generateSecret: Swift.Bool
    let refreshTokenValidity: Swift.Int
    let accessTokenValidity: Swift.Int?
    let idTokenValidity: Swift.Int?
    let tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    let readAttributes: [Swift.String]?
    let writeAttributes: [Swift.String]?
    let explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    let supportedIdentityProviders: [Swift.String]?
    let callbackURLs: [Swift.String]?
    let logoutURLs: [Swift.String]?
    let defaultRedirectURI: Swift.String?
    let allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    let allowedOAuthScopes: [Swift.String]?
    let allowedOAuthFlowsUserPoolClient: Swift.Bool
    let analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    let preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    let enableTokenRevocation: Swift.Bool?
    let enablePropagateAdditionalUserContextData: Swift.Bool?
    let authSessionValidity: Swift.Int?
}

extension CreateUserPoolClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case generateSecret = "GenerateSecret"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let generateSecretDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generateSecret) ?? false
        generateSecret = generateSecretDecoded
        let refreshTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .refreshTokenValidity) ?? 0
        refreshTokenValidity = refreshTokenValidityDecoded
        let accessTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accessTokenValidity)
        accessTokenValidity = accessTokenValidityDecoded
        let idTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idTokenValidity)
        idTokenValidity = idTokenValidityDecoded
        let tokenValidityUnitsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TokenValidityUnitsType.self, forKey: .tokenValidityUnits)
        tokenValidityUnits = tokenValidityUnitsDecoded
        let readAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readAttributes)
        var readAttributesDecoded0:[Swift.String]? = nil
        if let readAttributesContainer = readAttributesContainer {
            readAttributesDecoded0 = [Swift.String]()
            for string0 in readAttributesContainer {
                if let string0 = string0 {
                    readAttributesDecoded0?.append(string0)
                }
            }
        }
        readAttributes = readAttributesDecoded0
        let writeAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .writeAttributes)
        var writeAttributesDecoded0:[Swift.String]? = nil
        if let writeAttributesContainer = writeAttributesContainer {
            writeAttributesDecoded0 = [Swift.String]()
            for string0 in writeAttributesContainer {
                if let string0 = string0 {
                    writeAttributesDecoded0?.append(string0)
                }
            }
        }
        writeAttributes = writeAttributesDecoded0
        let explicitAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType?].self, forKey: .explicitAuthFlows)
        var explicitAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil
        if let explicitAuthFlowsContainer = explicitAuthFlowsContainer {
            explicitAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]()
            for enum0 in explicitAuthFlowsContainer {
                if let enum0 = enum0 {
                    explicitAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        explicitAuthFlows = explicitAuthFlowsDecoded0
        let supportedIdentityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedIdentityProviders)
        var supportedIdentityProvidersDecoded0:[Swift.String]? = nil
        if let supportedIdentityProvidersContainer = supportedIdentityProvidersContainer {
            supportedIdentityProvidersDecoded0 = [Swift.String]()
            for string0 in supportedIdentityProvidersContainer {
                if let string0 = string0 {
                    supportedIdentityProvidersDecoded0?.append(string0)
                }
            }
        }
        supportedIdentityProviders = supportedIdentityProvidersDecoded0
        let callbackURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .callbackURLs)
        var callbackURLsDecoded0:[Swift.String]? = nil
        if let callbackURLsContainer = callbackURLsContainer {
            callbackURLsDecoded0 = [Swift.String]()
            for string0 in callbackURLsContainer {
                if let string0 = string0 {
                    callbackURLsDecoded0?.append(string0)
                }
            }
        }
        callbackURLs = callbackURLsDecoded0
        let logoutURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logoutURLs)
        var logoutURLsDecoded0:[Swift.String]? = nil
        if let logoutURLsContainer = logoutURLsContainer {
            logoutURLsDecoded0 = [Swift.String]()
            for string0 in logoutURLsContainer {
                if let string0 = string0 {
                    logoutURLsDecoded0?.append(string0)
                }
            }
        }
        logoutURLs = logoutURLsDecoded0
        let defaultRedirectURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRedirectURI)
        defaultRedirectURI = defaultRedirectURIDecoded
        let allowedOAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.OAuthFlowType?].self, forKey: .allowedOAuthFlows)
        var allowedOAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil
        if let allowedOAuthFlowsContainer = allowedOAuthFlowsContainer {
            allowedOAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.OAuthFlowType]()
            for enum0 in allowedOAuthFlowsContainer {
                if let enum0 = enum0 {
                    allowedOAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        allowedOAuthFlows = allowedOAuthFlowsDecoded0
        let allowedOAuthScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOAuthScopes)
        var allowedOAuthScopesDecoded0:[Swift.String]? = nil
        if let allowedOAuthScopesContainer = allowedOAuthScopesContainer {
            allowedOAuthScopesDecoded0 = [Swift.String]()
            for string0 in allowedOAuthScopesContainer {
                if let string0 = string0 {
                    allowedOAuthScopesDecoded0?.append(string0)
                }
            }
        }
        allowedOAuthScopes = allowedOAuthScopesDecoded0
        let allowedOAuthFlowsUserPoolClientDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedOAuthFlowsUserPoolClient) ?? false
        allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClientDecoded
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
        let preventUserExistenceErrorsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes.self, forKey: .preventUserExistenceErrors)
        preventUserExistenceErrors = preventUserExistenceErrorsDecoded
        let enableTokenRevocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTokenRevocation)
        enableTokenRevocation = enableTokenRevocationDecoded
        let enablePropagateAdditionalUserContextDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePropagateAdditionalUserContextData)
        enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextDataDecoded
        let authSessionValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .authSessionValidity)
        authSessionValidity = authSessionValidityDecoded
    }
}

extension CreateUserPoolClientOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserPoolClientOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOAuthFlowException" : self = .invalidOAuthFlowException(try InvalidOAuthFlowException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScopeDoesNotExistException" : self = .scopeDoesNotExistException(try ScopeDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateUserPoolClientOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidOAuthFlowException(InvalidOAuthFlowException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case scopeDoesNotExistException(ScopeDoesNotExistException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserPoolClientOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateUserPoolClientOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userPoolClient = output.userPoolClient
        } else {
            self.userPoolClient = nil
        }
    }
}

/// Represents the response from the server to create a user pool client.
public struct CreateUserPoolClientOutputResponse: Swift.Equatable {
    /// The user pool client that was just created.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init (
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

struct CreateUserPoolClientOutputResponseBody: Swift.Equatable {
    let userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?
}

extension CreateUserPoolClientOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolClient = "UserPoolClient"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolClientDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolClientType.self, forKey: .userPoolClient)
        userPoolClient = userPoolClientDecoded
    }
}

extension CreateUserPoolDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainConfig = "CustomDomainConfig"
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customDomainConfig = self.customDomainConfig {
            try encodeContainer.encode(customDomainConfig, forKey: .customDomainConfig)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension CreateUserPoolDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserPoolDomainInput: Swift.Equatable {
    /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application. Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead. For more information about the hosted domain and custom domains, see [Configuring a User Pool Domain](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html).
    public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customDomainConfig = customDomainConfig
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

struct CreateUserPoolDomainInputBody: Swift.Equatable {
    let domain: Swift.String?
    let userPoolId: Swift.String?
    let customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
}

extension CreateUserPoolDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainConfig = "CustomDomainConfig"
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let customDomainConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomDomainConfigType.self, forKey: .customDomainConfig)
        customDomainConfig = customDomainConfigDecoded
    }
}

extension CreateUserPoolDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserPoolDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateUserPoolDomainOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserPoolDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateUserPoolDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudFrontDomain = output.cloudFrontDomain
        } else {
            self.cloudFrontDomain = nil
        }
    }
}

public struct CreateUserPoolDomainOutputResponse: Swift.Equatable {
    /// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
    public var cloudFrontDomain: Swift.String?

    public init (
        cloudFrontDomain: Swift.String? = nil
    )
    {
        self.cloudFrontDomain = cloudFrontDomain
    }
}

struct CreateUserPoolDomainOutputResponseBody: Swift.Equatable {
    let cloudFrontDomain: Swift.String?
}

extension CreateUserPoolDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFrontDomain = "CloudFrontDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFrontDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudFrontDomain)
        cloudFrontDomain = cloudFrontDomainDecoded
    }
}

extension CreateUserPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case aliasAttributes = "AliasAttributes"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deletionProtection = "DeletionProtection"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case poolName = "PoolName"
        case schema = "Schema"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolTags = "UserPoolTags"
        case usernameAttributes = "UsernameAttributes"
        case usernameConfiguration = "UsernameConfiguration"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountRecoverySetting = self.accountRecoverySetting {
            try encodeContainer.encode(accountRecoverySetting, forKey: .accountRecoverySetting)
        }
        if let adminCreateUserConfig = self.adminCreateUserConfig {
            try encodeContainer.encode(adminCreateUserConfig, forKey: .adminCreateUserConfig)
        }
        if let aliasAttributes = aliasAttributes {
            var aliasAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliasAttributes)
            for aliasattributetype0 in aliasAttributes {
                try aliasAttributesContainer.encode(aliasattributetype0.rawValue)
            }
        }
        if let autoVerifiedAttributes = autoVerifiedAttributes {
            var autoVerifiedAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoVerifiedAttributes)
            for verifiedattributetype0 in autoVerifiedAttributes {
                try autoVerifiedAttributesContainer.encode(verifiedattributetype0.rawValue)
            }
        }
        if let deletionProtection = self.deletionProtection {
            try encodeContainer.encode(deletionProtection.rawValue, forKey: .deletionProtection)
        }
        if let deviceConfiguration = self.deviceConfiguration {
            try encodeContainer.encode(deviceConfiguration, forKey: .deviceConfiguration)
        }
        if let emailConfiguration = self.emailConfiguration {
            try encodeContainer.encode(emailConfiguration, forKey: .emailConfiguration)
        }
        if let emailVerificationMessage = self.emailVerificationMessage {
            try encodeContainer.encode(emailVerificationMessage, forKey: .emailVerificationMessage)
        }
        if let emailVerificationSubject = self.emailVerificationSubject {
            try encodeContainer.encode(emailVerificationSubject, forKey: .emailVerificationSubject)
        }
        if let lambdaConfig = self.lambdaConfig {
            try encodeContainer.encode(lambdaConfig, forKey: .lambdaConfig)
        }
        if let mfaConfiguration = self.mfaConfiguration {
            try encodeContainer.encode(mfaConfiguration.rawValue, forKey: .mfaConfiguration)
        }
        if let policies = self.policies {
            try encodeContainer.encode(policies, forKey: .policies)
        }
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let schema = schema {
            var schemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schema)
            for schemaattributetype0 in schema {
                try schemaContainer.encode(schemaattributetype0)
            }
        }
        if let smsAuthenticationMessage = self.smsAuthenticationMessage {
            try encodeContainer.encode(smsAuthenticationMessage, forKey: .smsAuthenticationMessage)
        }
        if let smsConfiguration = self.smsConfiguration {
            try encodeContainer.encode(smsConfiguration, forKey: .smsConfiguration)
        }
        if let smsVerificationMessage = self.smsVerificationMessage {
            try encodeContainer.encode(smsVerificationMessage, forKey: .smsVerificationMessage)
        }
        if let userAttributeUpdateSettings = self.userAttributeUpdateSettings {
            try encodeContainer.encode(userAttributeUpdateSettings, forKey: .userAttributeUpdateSettings)
        }
        if let userPoolAddOns = self.userPoolAddOns {
            try encodeContainer.encode(userPoolAddOns, forKey: .userPoolAddOns)
        }
        if let userPoolTags = userPoolTags {
            var userPoolTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userPoolTags)
            for (dictKey0, userPoolTagsType0) in userPoolTags {
                try userPoolTagsContainer.encode(userPoolTagsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usernameAttributes = usernameAttributes {
            var usernameAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usernameAttributes)
            for usernameattributetype0 in usernameAttributes {
                try usernameAttributesContainer.encode(usernameattributetype0.rawValue)
            }
        }
        if let usernameConfiguration = self.usernameConfiguration {
            try encodeContainer.encode(usernameConfiguration, forKey: .usernameConfiguration)
        }
        if let verificationMessageTemplate = self.verificationMessageTemplate {
            try encodeContainer.encode(verificationMessageTemplate, forKey: .verificationMessageTemplate)
        }
    }
}

extension CreateUserPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to create a user pool.
public struct CreateUserPoolInput: Swift.Equatable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
    public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
    /// The attributes to be auto-verified. Possible values: email, phone_number.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
    public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda trigger configuration information for the new user pool. In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see[ AddPermission ](https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html). For adding permission using the CLI, see[ add-permission ](https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Specifies MFA configuration details.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The policies associated with the new user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// A string used to name the user pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
    public var schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// A string representing the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// Enables advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// Specifies whether a user can use an email address or phone number as a username when they sign up.
    public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
    /// Case sensitivity on the username input for the selected sign-in option. For example, when case sensitivity is set to False, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
    public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
    /// The template for the verification message that the user sees when the app requests permission to access the user's information.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        poolName: Swift.String? = nil,
        schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
        usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deletionProtection = deletionProtection
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.poolName = poolName
        self.schema = schema
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}

struct CreateUserPoolInputBody: Swift.Equatable {
    let poolName: Swift.String?
    let policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    let deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    let lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    let autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    let aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
    let usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
    let smsVerificationMessage: Swift.String?
    let emailVerificationMessage: Swift.String?
    let emailVerificationSubject: Swift.String?
    let verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?
    let smsAuthenticationMessage: Swift.String?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    let userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    let deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    let emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    let smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    let userPoolTags: [Swift.String:Swift.String]?
    let adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    let schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    let userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    let usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
    let accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
}

extension CreateUserPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case aliasAttributes = "AliasAttributes"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deletionProtection = "DeletionProtection"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case poolName = "PoolName"
        case schema = "Schema"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolTags = "UserPoolTags"
        case usernameAttributes = "UsernameAttributes"
        case usernameConfiguration = "UsernameConfiguration"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolPolicyType.self, forKey: .policies)
        policies = policiesDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeletionProtectionType.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let autoVerifiedAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.VerifiedAttributeType?].self, forKey: .autoVerifiedAttributes)
        var autoVerifiedAttributesDecoded0:[CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        if let autoVerifiedAttributesContainer = autoVerifiedAttributesContainer {
            autoVerifiedAttributesDecoded0 = [CognitoIdentityProviderClientTypes.VerifiedAttributeType]()
            for enum0 in autoVerifiedAttributesContainer {
                if let enum0 = enum0 {
                    autoVerifiedAttributesDecoded0?.append(enum0)
                }
            }
        }
        autoVerifiedAttributes = autoVerifiedAttributesDecoded0
        let aliasAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AliasAttributeType?].self, forKey: .aliasAttributes)
        var aliasAttributesDecoded0:[CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil
        if let aliasAttributesContainer = aliasAttributesContainer {
            aliasAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AliasAttributeType]()
            for enum0 in aliasAttributesContainer {
                if let enum0 = enum0 {
                    aliasAttributesDecoded0?.append(enum0)
                }
            }
        }
        aliasAttributes = aliasAttributesDecoded0
        let usernameAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UsernameAttributeType?].self, forKey: .usernameAttributes)
        var usernameAttributesDecoded0:[CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil
        if let usernameAttributesContainer = usernameAttributesContainer {
            usernameAttributesDecoded0 = [CognitoIdentityProviderClientTypes.UsernameAttributeType]()
            for enum0 in usernameAttributesContainer {
                if let enum0 = enum0 {
                    usernameAttributesDecoded0?.append(enum0)
                }
            }
        }
        usernameAttributes = usernameAttributesDecoded0
        let smsVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsVerificationMessage)
        smsVerificationMessage = smsVerificationMessageDecoded
        let emailVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationMessage)
        emailVerificationMessage = emailVerificationMessageDecoded
        let emailVerificationSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationSubject)
        emailVerificationSubject = emailVerificationSubjectDecoded
        let verificationMessageTemplateDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.self, forKey: .verificationMessageTemplate)
        verificationMessageTemplate = verificationMessageTemplateDecoded
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
        let userAttributeUpdateSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.self, forKey: .userAttributeUpdateSettings)
        userAttributeUpdateSettings = userAttributeUpdateSettingsDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceConfigurationType.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let emailConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EmailConfigurationType.self, forKey: .emailConfiguration)
        emailConfiguration = emailConfigurationDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
        let userPoolTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userPoolTags)
        var userPoolTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let userPoolTagsContainer = userPoolTagsContainer {
            userPoolTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in userPoolTagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    userPoolTagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        userPoolTags = userPoolTagsDecoded0
        let adminCreateUserConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.self, forKey: .adminCreateUserConfig)
        adminCreateUserConfig = adminCreateUserConfigDecoded
        let schemaContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.SchemaAttributeType?].self, forKey: .schema)
        var schemaDecoded0:[CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [CognitoIdentityProviderClientTypes.SchemaAttributeType]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
        let userPoolAddOnsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolAddOnsType.self, forKey: .userPoolAddOns)
        userPoolAddOns = userPoolAddOnsDecoded
        let usernameConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UsernameConfigurationType.self, forKey: .usernameConfiguration)
        usernameConfiguration = usernameConfigurationDecoded
        let accountRecoverySettingDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountRecoverySettingType.self, forKey: .accountRecoverySetting)
        accountRecoverySetting = accountRecoverySettingDecoded
    }
}

extension CreateUserPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolTaggingException" : self = .userPoolTaggingException(try UserPoolTaggingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateUserPoolOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case tooManyRequestsException(TooManyRequestsException)
    case userPoolTaggingException(UserPoolTaggingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateUserPoolOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userPool = output.userPool
        } else {
            self.userPool = nil
        }
    }
}

/// Represents the response from the server for the request to create a user pool.
public struct CreateUserPoolOutputResponse: Swift.Equatable {
    /// A container for the user pool details.
    public var userPool: CognitoIdentityProviderClientTypes.UserPoolType?

    public init (
        userPool: CognitoIdentityProviderClientTypes.UserPoolType? = nil
    )
    {
        self.userPool = userPool
    }
}

struct CreateUserPoolOutputResponseBody: Swift.Equatable {
    let userPool: CognitoIdentityProviderClientTypes.UserPoolType?
}

extension CreateUserPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPool = "UserPool"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolType.self, forKey: .userPool)
        userPool = userPoolDecoded
    }
}

extension CognitoIdentityProviderClientTypes.CustomDomainConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = self.certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
    public struct CustomDomainConfigType: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
        /// This member is required.
        public var certificateArn: Swift.String?

        public init (
            certificateArn: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
        }
    }

}

extension CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaArn = "LambdaArn"
        case lambdaVersion = "LambdaVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lambdaArn = self.lambdaArn {
            try encodeContainer.encode(lambdaArn, forKey: .lambdaArn)
        }
        if let lambdaVersion = self.lambdaVersion {
            try encodeContainer.encode(lambdaVersion.rawValue, forKey: .lambdaVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaVersionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomEmailSenderLambdaVersionType.self, forKey: .lambdaVersion)
        lambdaVersion = lambdaVersionDecoded
        let lambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaArn)
        lambdaArn = lambdaArnDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A custom email sender Lambda configuration type.
    public struct CustomEmailLambdaVersionConfigType: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send email notifications to users.
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// Signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.
        /// This member is required.
        public var lambdaVersion: CognitoIdentityProviderClientTypes.CustomEmailSenderLambdaVersionType?

        public init (
            lambdaArn: Swift.String? = nil,
            lambdaVersion: CognitoIdentityProviderClientTypes.CustomEmailSenderLambdaVersionType? = nil
        )
        {
            self.lambdaArn = lambdaArn
            self.lambdaVersion = lambdaVersion
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum CustomEmailSenderLambdaVersionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v10
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomEmailSenderLambdaVersionType] {
            return [
                .v10,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v10: return "V1_0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomEmailSenderLambdaVersionType(rawValue: rawValue) ?? CustomEmailSenderLambdaVersionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaArn = "LambdaArn"
        case lambdaVersion = "LambdaVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lambdaArn = self.lambdaArn {
            try encodeContainer.encode(lambdaArn, forKey: .lambdaArn)
        }
        if let lambdaVersion = self.lambdaVersion {
            try encodeContainer.encode(lambdaVersion.rawValue, forKey: .lambdaVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaVersionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomSMSSenderLambdaVersionType.self, forKey: .lambdaVersion)
        lambdaVersion = lambdaVersionDecoded
        let lambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaArn)
        lambdaArn = lambdaArnDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A custom SMS sender Lambda configuration type.
    public struct CustomSMSLambdaVersionConfigType: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send SMS notifications to users.
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// Signature of the "request" attribute in the "event" information that Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.
        /// This member is required.
        public var lambdaVersion: CognitoIdentityProviderClientTypes.CustomSMSSenderLambdaVersionType?

        public init (
            lambdaArn: Swift.String? = nil,
            lambdaVersion: CognitoIdentityProviderClientTypes.CustomSMSSenderLambdaVersionType? = nil
        )
        {
            self.lambdaArn = lambdaArn
            self.lambdaVersion = lambdaVersion
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum CustomSMSSenderLambdaVersionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v10
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomSMSSenderLambdaVersionType] {
            return [
                .v10,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v10: return "V1_0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomSMSSenderLambdaVersionType(rawValue: rawValue) ?? CustomSMSSenderLambdaVersionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum DefaultEmailOptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case confirmWithCode
        case confirmWithLink
        case sdkUnknown(Swift.String)

        public static var allCases: [DefaultEmailOptionType] {
            return [
                .confirmWithCode,
                .confirmWithLink,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .confirmWithCode: return "CONFIRM_WITH_CODE"
            case .confirmWithLink: return "CONFIRM_WITH_LINK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DefaultEmailOptionType(rawValue: rawValue) ?? DefaultEmailOptionType.sdkUnknown(rawValue)
        }
    }
}

extension DeleteGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGroupInput: Swift.Equatable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
    }
}

struct DeleteGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let userPoolId: Swift.String?
}

extension DeleteGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension DeleteGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteIdentityProviderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteIdentityProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteIdentityProviderInput: Swift.Equatable {
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

struct DeleteIdentityProviderInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let providerName: Swift.String?
}

extension DeleteIdentityProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}

extension DeleteIdentityProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIdentityProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedIdentityProviderException" : self = .unsupportedIdentityProviderException(try UnsupportedIdentityProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteIdentityProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedIdentityProviderException(UnsupportedIdentityProviderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIdentityProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIdentityProviderOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteResourceServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteResourceServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourceServerInput: Swift.Equatable {
    /// The identifier for the resource server.
    /// This member is required.
    public var identifier: Swift.String?
    /// The user pool ID for the user pool that hosts the resource server.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        identifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.userPoolId = userPoolId
    }
}

struct DeleteResourceServerInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let identifier: Swift.String?
}

extension DeleteResourceServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension DeleteResourceServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourceServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourceServerOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourceServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourceServerOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserAttributesInput(userAttributeNames: \(Swift.String(describing: userAttributeNames)), accessToken: \"CONTENT_REDACTED\")"}
}

extension DeleteUserAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case userAttributeNames = "UserAttributeNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let userAttributeNames = userAttributeNames {
            var userAttributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributeNames)
            for attributenametype0 in userAttributeNames {
                try userAttributeNamesContainer.encode(attributenametype0)
            }
        }
    }
}

extension DeleteUserAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete user attributes.
public struct DeleteUserAttributesInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.
    /// This member is required.
    public var accessToken: Swift.String?
    /// An array of strings representing the user attribute names you want to delete. For custom attributes, you must prependattach the custom: prefix to the front of the attribute name.
    /// This member is required.
    public var userAttributeNames: [Swift.String]?

    public init (
        accessToken: Swift.String? = nil,
        userAttributeNames: [Swift.String]? = nil
    )
    {
        self.accessToken = accessToken
        self.userAttributeNames = userAttributeNames
    }
}

struct DeleteUserAttributesInputBody: Swift.Equatable {
    let userAttributeNames: [Swift.String]?
    let accessToken: Swift.String?
}

extension DeleteUserAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case userAttributeNames = "UserAttributeNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userAttributeNames)
        var userAttributeNamesDecoded0:[Swift.String]? = nil
        if let userAttributeNamesContainer = userAttributeNamesContainer {
            userAttributeNamesDecoded0 = [Swift.String]()
            for string0 in userAttributeNamesContainer {
                if let string0 = string0 {
                    userAttributeNamesDecoded0?.append(string0)
                }
            }
        }
        userAttributeNames = userAttributeNamesDecoded0
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension DeleteUserAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserAttributesOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server to delete user attributes.
public struct DeleteUserAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserInput(accessToken: \"CONTENT_REDACTED\")"}
}

extension DeleteUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
    }
}

extension DeleteUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete a user.
public struct DeleteUserInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose user profile you want to delete.
    /// This member is required.
    public var accessToken: Swift.String?

    public init (
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

struct DeleteUserInputBody: Swift.Equatable {
    let accessToken: Swift.String?
}

extension DeleteUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension DeleteUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPoolClientInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension DeleteUserPoolClientInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteUserPoolClientInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete a user pool client.
public struct DeleteUserPoolClientInput: Swift.Equatable {
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool where you want to delete the client.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

struct DeleteUserPoolClientInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
}

extension DeleteUserPoolClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension DeleteUserPoolClientOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserPoolClientOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserPoolClientOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserPoolClientOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserPoolClientOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteUserPoolDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteUserPoolDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserPoolDomainInput: Swift.Equatable {
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

struct DeleteUserPoolDomainInputBody: Swift.Equatable {
    let domain: Swift.String?
    let userPoolId: Swift.String?
}

extension DeleteUserPoolDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension DeleteUserPoolDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserPoolDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserPoolDomainOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserPoolDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserPoolDomainOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteUserPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DeleteUserPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to delete a user pool.
public struct DeleteUserPoolInput: Swift.Equatable {
    /// The user pool ID for the user pool you want to delete.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

struct DeleteUserPoolInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
}

extension DeleteUserPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension DeleteUserPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserImportInProgressException" : self = .userImportInProgressException(try UserImportInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserPoolOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userImportInProgressException(UserImportInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes {
    public enum DeletionProtectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [DeletionProtectionType] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeletionProtectionType(rawValue: rawValue) ?? DeletionProtectionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum DeliveryMediumType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryMediumType] {
            return [
                .email,
                .sms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "EMAIL"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryMediumType(rawValue: rawValue) ?? DeliveryMediumType.sdkUnknown(rawValue)
        }
    }
}

extension DescribeIdentityProviderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeIdentityProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeIdentityProviderInput: Swift.Equatable {
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

struct DescribeIdentityProviderInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let providerName: Swift.String?
}

extension DescribeIdentityProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}

extension DescribeIdentityProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeIdentityProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeIdentityProviderOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeIdentityProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeIdentityProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProvider = output.identityProvider
        } else {
            self.identityProvider = nil
        }
    }
}

public struct DescribeIdentityProviderOutputResponse: Swift.Equatable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init (
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

struct DescribeIdentityProviderOutputResponseBody: Swift.Equatable {
    let identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?
}

extension DescribeIdentityProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProvider = "IdentityProvider"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderType.self, forKey: .identityProvider)
        identityProvider = identityProviderDecoded
    }
}

extension DescribeResourceServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeResourceServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourceServerInput: Swift.Equatable {
    /// The identifier for the resource server
    /// This member is required.
    public var identifier: Swift.String?
    /// The user pool ID for the user pool that hosts the resource server.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        identifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.userPoolId = userPoolId
    }
}

struct DescribeResourceServerInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let identifier: Swift.String?
}

extension DescribeResourceServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension DescribeResourceServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourceServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeResourceServerOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourceServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeResourceServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceServer = output.resourceServer
        } else {
            self.resourceServer = nil
        }
    }
}

public struct DescribeResourceServerOutputResponse: Swift.Equatable {
    /// The resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init (
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

struct DescribeResourceServerOutputResponseBody: Swift.Equatable {
    let resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?
}

extension DescribeResourceServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceServer = "ResourceServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceServerDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ResourceServerType.self, forKey: .resourceServer)
        resourceServer = resourceServerDecoded
    }
}

extension DescribeRiskConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRiskConfigurationInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension DescribeRiskConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeRiskConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRiskConfigurationInput: Swift.Equatable {
    /// The app client ID.
    public var clientId: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

struct DescribeRiskConfigurationInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
}

extension DescribeRiskConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension DescribeRiskConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRiskConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolAddOnNotEnabledException" : self = .userPoolAddOnNotEnabledException(try UserPoolAddOnNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRiskConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userPoolAddOnNotEnabledException(UserPoolAddOnNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRiskConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRiskConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.riskConfiguration = output.riskConfiguration
        } else {
            self.riskConfiguration = nil
        }
    }
}

public struct DescribeRiskConfigurationOutputResponse: Swift.Equatable {
    /// The risk configuration.
    /// This member is required.
    public var riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?

    public init (
        riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType? = nil
    )
    {
        self.riskConfiguration = riskConfiguration
    }
}

struct DescribeRiskConfigurationOutputResponseBody: Swift.Equatable {
    let riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?
}

extension DescribeRiskConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case riskConfiguration = "RiskConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let riskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskConfigurationType.self, forKey: .riskConfiguration)
        riskConfiguration = riskConfigurationDecoded
    }
}

extension DescribeUserImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeUserImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to describe the user import job.
public struct DescribeUserImportJobInput: Swift.Equatable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

struct DescribeUserImportJobInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let jobId: Swift.String?
}

extension DescribeUserImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeUserImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeUserImportJobOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeUserImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userImportJob = output.userImportJob
        } else {
            self.userImportJob = nil
        }
    }
}

/// Represents the response from the server to the request to describe the user import job.
public struct DescribeUserImportJobOutputResponse: Swift.Equatable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init (
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

struct DescribeUserImportJobOutputResponseBody: Swift.Equatable {
    let userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?
}

extension DescribeUserImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userImportJob = "UserImportJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userImportJobDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserImportJobType.self, forKey: .userImportJob)
        userImportJob = userImportJobDecoded
    }
}

extension DescribeUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserPoolClientInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension DescribeUserPoolClientInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeUserPoolClientInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to describe a user pool client.
public struct DescribeUserPoolClientInput: Swift.Equatable {
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool you want to describe.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

struct DescribeUserPoolClientInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
}

extension DescribeUserPoolClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension DescribeUserPoolClientOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserPoolClientOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeUserPoolClientOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserPoolClientOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeUserPoolClientOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userPoolClient = output.userPoolClient
        } else {
            self.userPoolClient = nil
        }
    }
}

/// Represents the response from the server from a request to describe the user pool client.
public struct DescribeUserPoolClientOutputResponse: Swift.Equatable {
    /// The user pool client from a server response to describe the user pool client.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init (
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

struct DescribeUserPoolClientOutputResponseBody: Swift.Equatable {
    let userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?
}

extension DescribeUserPoolClientOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolClient = "UserPoolClient"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolClientDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolClientType.self, forKey: .userPoolClient)
        userPoolClient = userPoolClientDecoded
    }
}

extension DescribeUserPoolDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

extension DescribeUserPoolDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUserPoolDomainInput: Swift.Equatable {
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

struct DescribeUserPoolDomainInputBody: Swift.Equatable {
    let domain: Swift.String?
}

extension DescribeUserPoolDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension DescribeUserPoolDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserPoolDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeUserPoolDomainOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserPoolDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeUserPoolDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDescription = output.domainDescription
        } else {
            self.domainDescription = nil
        }
    }
}

public struct DescribeUserPoolDomainOutputResponse: Swift.Equatable {
    /// A domain description object containing information about the domain.
    public var domainDescription: CognitoIdentityProviderClientTypes.DomainDescriptionType?

    public init (
        domainDescription: CognitoIdentityProviderClientTypes.DomainDescriptionType? = nil
    )
    {
        self.domainDescription = domainDescription
    }
}

struct DescribeUserPoolDomainOutputResponseBody: Swift.Equatable {
    let domainDescription: CognitoIdentityProviderClientTypes.DomainDescriptionType?
}

extension DescribeUserPoolDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDescription = "DomainDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDescriptionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DomainDescriptionType.self, forKey: .domainDescription)
        domainDescription = domainDescriptionDecoded
    }
}

extension DescribeUserPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension DescribeUserPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to describe the user pool.
public struct DescribeUserPoolInput: Swift.Equatable {
    /// The user pool ID for the user pool you want to describe.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

struct DescribeUserPoolInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
}

extension DescribeUserPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension DescribeUserPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolTaggingException" : self = .userPoolTaggingException(try UserPoolTaggingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeUserPoolOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userPoolTaggingException(UserPoolTaggingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeUserPoolOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userPool = output.userPool
        } else {
            self.userPool = nil
        }
    }
}

/// Represents the response to describe the user pool.
public struct DescribeUserPoolOutputResponse: Swift.Equatable {
    /// The container of metadata returned by the server to describe the pool.
    public var userPool: CognitoIdentityProviderClientTypes.UserPoolType?

    public init (
        userPool: CognitoIdentityProviderClientTypes.UserPoolType? = nil
    )
    {
        self.userPool = userPool
    }
}

struct DescribeUserPoolOutputResponseBody: Swift.Equatable {
    let userPool: CognitoIdentityProviderClientTypes.UserPoolType?
}

extension DescribeUserPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPool = "UserPool"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolType.self, forKey: .userPool)
        userPool = userPoolDecoded
    }
}

extension CognitoIdentityProviderClientTypes.DeviceConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case challengeRequiredOnNewDevice = "ChallengeRequiredOnNewDevice"
        case deviceOnlyRememberedOnUserPrompt = "DeviceOnlyRememberedOnUserPrompt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if challengeRequiredOnNewDevice != false {
            try encodeContainer.encode(challengeRequiredOnNewDevice, forKey: .challengeRequiredOnNewDevice)
        }
        if deviceOnlyRememberedOnUserPrompt != false {
            try encodeContainer.encode(deviceOnlyRememberedOnUserPrompt, forKey: .deviceOnlyRememberedOnUserPrompt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeRequiredOnNewDeviceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .challengeRequiredOnNewDevice) ?? false
        challengeRequiredOnNewDevice = challengeRequiredOnNewDeviceDecoded
        let deviceOnlyRememberedOnUserPromptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deviceOnlyRememberedOnUserPrompt) ?? false
        deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPromptDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The device-remembering configuration for a user pool. A [ DescribeUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html) request returns a null value for this object when the user pool isn't configured to remember devices. When device remembering is active, you can remember a user's device with a [ConfirmDevice](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html) API request. Additionally. when the property DeviceOnlyRememberedOnUserPrompt is true, you must follow ConfirmDevice with an [UpdateDeviceStatus](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html) API request that sets the user's device to remembered or not_remembered. To sign in with a remembered device, include DEVICE_KEY in the authentication parameters in your user's [ InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html) request. If your app doesn't include a DEVICE_KEY parameter, the [response](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html#API_InitiateAuth_ResponseSyntax) from Amazon Cognito includes newly-generated DEVICE_KEY and DEVICE_GROUP_KEY values under NewDeviceMetadata. Store these values to use in future device-authentication requests. When you provide a value for any property of DeviceConfiguration, you activate the device remembering for the user pool.
    public struct DeviceConfigurationType: Swift.Equatable {
        /// When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA). Whether or not ChallengeRequiredOnNewDevice is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.
        public var challengeRequiredOnNewDevice: Swift.Bool
        /// When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a [ ConfirmDevice](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html) API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an [ UpdateDeviceStatus](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html) API request. When DeviceOnlyRememberedOnUserPrompt is false, Amazon Cognito immediately remembers devices that you register in a ConfirmDevice API request.
        public var deviceOnlyRememberedOnUserPrompt: Swift.Bool

        public init (
            challengeRequiredOnNewDevice: Swift.Bool = false,
            deviceOnlyRememberedOnUserPrompt: Swift.Bool = false
        )
        {
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum DeviceRememberedStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notRemembered
        case remembered
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceRememberedStatusType] {
            return [
                .notRemembered,
                .remembered,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notRemembered: return "not_remembered"
            case .remembered: return "remembered"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceRememberedStatusType(rawValue: rawValue) ?? DeviceRememberedStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordVerifier = "PasswordVerifier"
        case salt = "Salt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordVerifier = self.passwordVerifier {
            try encodeContainer.encode(passwordVerifier, forKey: .passwordVerifier)
        }
        if let salt = self.salt {
            try encodeContainer.encode(salt, forKey: .salt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordVerifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passwordVerifier)
        passwordVerifier = passwordVerifierDecoded
        let saltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .salt)
        salt = saltDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The device verifier against which it is authenticated.
    public struct DeviceSecretVerifierConfigType: Swift.Equatable {
        /// The password verifier.
        public var passwordVerifier: Swift.String?
        /// The [salt](https://en.wikipedia.org/wiki/Salt_(cryptography))
        public var salt: Swift.String?

        public init (
            passwordVerifier: Swift.String? = nil,
            salt: Swift.String? = nil
        )
        {
            self.passwordVerifier = passwordVerifier
            self.salt = salt
        }
    }

}

extension CognitoIdentityProviderClientTypes.DeviceType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceAttributes = "DeviceAttributes"
        case deviceCreateDate = "DeviceCreateDate"
        case deviceKey = "DeviceKey"
        case deviceLastAuthenticatedDate = "DeviceLastAuthenticatedDate"
        case deviceLastModifiedDate = "DeviceLastModifiedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceAttributes = deviceAttributes {
            var deviceAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceAttributes)
            for attributetype0 in deviceAttributes {
                try deviceAttributesContainer.encode(attributetype0)
            }
        }
        if let deviceCreateDate = self.deviceCreateDate {
            try encodeContainer.encodeTimestamp(deviceCreateDate, format: .epochSeconds, forKey: .deviceCreateDate)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let deviceLastAuthenticatedDate = self.deviceLastAuthenticatedDate {
            try encodeContainer.encodeTimestamp(deviceLastAuthenticatedDate, format: .epochSeconds, forKey: .deviceLastAuthenticatedDate)
        }
        if let deviceLastModifiedDate = self.deviceLastModifiedDate {
            try encodeContainer.encodeTimestamp(deviceLastModifiedDate, format: .epochSeconds, forKey: .deviceLastModifiedDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .deviceAttributes)
        var deviceAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let deviceAttributesContainer = deviceAttributesContainer {
            deviceAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in deviceAttributesContainer {
                if let structure0 = structure0 {
                    deviceAttributesDecoded0?.append(structure0)
                }
            }
        }
        deviceAttributes = deviceAttributesDecoded0
        let deviceCreateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deviceCreateDate)
        deviceCreateDate = deviceCreateDateDecoded
        let deviceLastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deviceLastModifiedDate)
        deviceLastModifiedDate = deviceLastModifiedDateDecoded
        let deviceLastAuthenticatedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deviceLastAuthenticatedDate)
        deviceLastAuthenticatedDate = deviceLastAuthenticatedDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The device type.
    public struct DeviceType: Swift.Equatable {
        /// The device attributes.
        public var deviceAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
        /// The creation date of the device.
        public var deviceCreateDate: ClientRuntime.Date?
        /// The device key.
        public var deviceKey: Swift.String?
        /// The date when the device was last authenticated.
        public var deviceLastAuthenticatedDate: ClientRuntime.Date?
        /// The last modified date of the device.
        public var deviceLastModifiedDate: ClientRuntime.Date?

        public init (
            deviceAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
            deviceCreateDate: ClientRuntime.Date? = nil,
            deviceKey: Swift.String? = nil,
            deviceLastAuthenticatedDate: ClientRuntime.Date? = nil,
            deviceLastModifiedDate: ClientRuntime.Date? = nil
        )
        {
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceKey = deviceKey
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
            self.deviceLastModifiedDate = deviceLastModifiedDate
        }
    }

}

extension CognitoIdentityProviderClientTypes.DomainDescriptionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId = "AWSAccountId"
        case cloudFrontDistribution = "CloudFrontDistribution"
        case customDomainConfig = "CustomDomainConfig"
        case domain = "Domain"
        case s3Bucket = "S3Bucket"
        case status = "Status"
        case userPoolId = "UserPoolId"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = self.awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let cloudFrontDistribution = self.cloudFrontDistribution {
            try encodeContainer.encode(cloudFrontDistribution, forKey: .cloudFrontDistribution)
        }
        if let customDomainConfig = self.customDomainConfig {
            try encodeContainer.encode(customDomainConfig, forKey: .customDomainConfig)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let cloudFrontDistributionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudFrontDistribution)
        cloudFrontDistribution = cloudFrontDistributionDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DomainStatusType.self, forKey: .status)
        status = statusDecoded
        let customDomainConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomDomainConfigType.self, forKey: .customDomainConfig)
        customDomainConfig = customDomainConfigDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for information about a domain.
    public struct DomainDescriptionType: Swift.Equatable {
        /// The Amazon Web Services ID for the user pool owner.
        public var awsAccountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon CloudFront distribution.
        public var cloudFrontDistribution: Swift.String?
        /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
        public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
        /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
        public var domain: Swift.String?
        /// The Amazon S3 bucket where the static files for this domain are stored.
        public var s3Bucket: Swift.String?
        /// The domain status.
        public var status: CognitoIdentityProviderClientTypes.DomainStatusType?
        /// The user pool ID.
        public var userPoolId: Swift.String?
        /// The app version.
        public var version: Swift.String?

        public init (
            awsAccountId: Swift.String? = nil,
            cloudFrontDistribution: Swift.String? = nil,
            customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
            domain: Swift.String? = nil,
            s3Bucket: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.DomainStatusType? = nil,
            userPoolId: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.awsAccountId = awsAccountId
            self.cloudFrontDistribution = cloudFrontDistribution
            self.customDomainConfig = customDomainConfig
            self.domain = domain
            self.s3Bucket = s3Bucket
            self.status = status
            self.userPoolId = userPoolId
            self.version = version
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum DomainStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatusType] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainStatusType(rawValue: rawValue) ?? DomainStatusType.sdkUnknown(rawValue)
        }
    }
}

extension DuplicateProviderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicateProviderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the provider is already supported by the user pool.
public struct DuplicateProviderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateProviderExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateProviderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.EmailConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
        case emailSendingAccount = "EmailSendingAccount"
        case from = "From"
        case replyToEmailAddress = "ReplyToEmailAddress"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSet = self.configurationSet {
            try encodeContainer.encode(configurationSet, forKey: .configurationSet)
        }
        if let emailSendingAccount = self.emailSendingAccount {
            try encodeContainer.encode(emailSendingAccount.rawValue, forKey: .emailSendingAccount)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let replyToEmailAddress = self.replyToEmailAddress {
            try encodeContainer.encode(replyToEmailAddress, forKey: .replyToEmailAddress)
        }
        if let sourceArn = self.sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let replyToEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replyToEmailAddress)
        replyToEmailAddress = replyToEmailAddressDecoded
        let emailSendingAccountDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EmailSendingAccountType.self, forKey: .emailSendingAccount)
        emailSendingAccount = emailSendingAccountDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .from)
        from = fromDecoded
        let configurationSetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool. Amazon Cognito can send email messages with Amazon Simple Email Service resources in the Amazon Web Services Region where you created your user pool, and in alternate Regions in some cases. For more information on the supported Regions, see [Email settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html).
    public struct EmailConfigurationType: Swift.Equatable {
        /// The set of configuration rules that can be applied to emails sent using Amazon Simple Email Service. A configuration set is applied to an email by including a reference to the configuration set in the headers of the email. Once applied, all of the rules in that configuration set are applied to the email. Configuration sets can be used to apply the following types of rules to emails: Event publishing Amazon Simple Email Service can track the number of send, delivery, open, click, bounce, and complaint events for each email sent. Use event publishing to send information about these events to other Amazon Web Services services such as and Amazon CloudWatch IP pool management When leasing dedicated IP addresses with Amazon Simple Email Service, you can create groups of IP addresses, called dedicated IP pools. You can then associate the dedicated IP pools with configuration sets.
        public var configurationSet: Swift.String?
        /// Specifies whether Amazon Cognito uses its built-in functionality to send your users email messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following values: COGNITO_DEFAULT When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is less than the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration. To look up the email delivery limit for the default option, see [Limits](https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html) in the Amazon Cognito Developer Guide. The default FROM address is no-reply@verificationemail.com. To customize the FROM address, provide the Amazon Resource Name (ARN) of an Amazon SES verified email address for the SourceArn parameter. DEVELOPER When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your Amazon Web Services account. If you use this option, provide the ARN of an Amazon SES verified email address for the SourceArn parameter. Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a service-linked role, which is a type of role in your Amazon Web Services account. This role contains the permissions that allow you to access Amazon SES and send email messages from your email address. For more information about the service-linked role that Amazon Cognito creates, see [Using Service-Linked Roles for Amazon Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html) in the Amazon Cognito Developer Guide.
        public var emailSendingAccount: CognitoIdentityProviderClientTypes.EmailSendingAccountType?
        /// Either the sender’s email address or the sender’s name with their email address. For example, testuser@example.com or Test User . This address appears before the body of the email.
        public var from: Swift.String?
        /// The destination to which the receiver of the email should reply.
        public var replyToEmailAddress: Swift.String?
        /// The ARN of a verified email address in Amazon SES. Amazon Cognito uses this email address in one of the following ways, depending on the value that you specify for the EmailSendingAccount parameter:
        ///
        /// * If you specify COGNITO_DEFAULT, Amazon Cognito uses this address as the custom FROM address when it emails your users using its built-in email account.
        ///
        /// * If you specify DEVELOPER, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.
        ///
        ///
        /// The Region value of the SourceArn parameter must indicate a supported Amazon Web Services Region of your user pool. Typically, the Region in the SourceArn and the user pool Region are the same. For more information, see [Amazon SES email configuration regions](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping) in the [Amazon Cognito Developer Guide](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
        public var sourceArn: Swift.String?

        public init (
            configurationSet: Swift.String? = nil,
            emailSendingAccount: CognitoIdentityProviderClientTypes.EmailSendingAccountType? = nil,
            from: Swift.String? = nil,
            replyToEmailAddress: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.configurationSet = configurationSet
            self.emailSendingAccount = emailSendingAccount
            self.from = from
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum EmailSendingAccountType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cognitoDefault
        case developer
        case sdkUnknown(Swift.String)

        public static var allCases: [EmailSendingAccountType] {
            return [
                .cognitoDefault,
                .developer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cognitoDefault: return "COGNITO_DEFAULT"
            case .developer: return "DEVELOPER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EmailSendingAccountType(rawValue: rawValue) ?? EmailSendingAccountType.sdkUnknown(rawValue)
        }
    }
}

extension EnableSoftwareTokenMFAException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnableSoftwareTokenMFAExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when there is a code mismatch and the service fails to configure the software token TOTP multi-factor authentication (MFA).
public struct EnableSoftwareTokenMFAException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct EnableSoftwareTokenMFAExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension EnableSoftwareTokenMFAExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.EventContextDataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case city = "City"
        case country = "Country"
        case deviceName = "DeviceName"
        case ipAddress = "IpAddress"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let city = self.city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let deviceName = self.deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let cityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .city)
        city = cityDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Specifies the user context data captured at the time of an event request.
    public struct EventContextDataType: Swift.Equatable {
        /// The user's city.
        public var city: Swift.String?
        /// The user's country.
        public var country: Swift.String?
        /// The user's device name.
        public var deviceName: Swift.String?
        /// The source IP address of your user's device.
        public var ipAddress: Swift.String?
        /// The user's time zone.
        public var timezone: Swift.String?

        public init (
            city: Swift.String? = nil,
            country: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.city = city
            self.country = country
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.timezone = timezone
        }
    }

}

extension CognitoIdentityProviderClientTypes.EventFeedbackType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case feedbackDate = "FeedbackDate"
        case feedbackValue = "FeedbackValue"
        case provider = "Provider"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let feedbackDate = self.feedbackDate {
            try encodeContainer.encodeTimestamp(feedbackDate, format: .epochSeconds, forKey: .feedbackDate)
        }
        if let feedbackValue = self.feedbackValue {
            try encodeContainer.encode(feedbackValue.rawValue, forKey: .feedbackValue)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let feedbackValueDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.FeedbackValueType.self, forKey: .feedbackValue)
        feedbackValue = feedbackValueDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let feedbackDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .feedbackDate)
        feedbackDate = feedbackDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Specifies the event feedback type.
    public struct EventFeedbackType: Swift.Equatable {
        /// The event feedback date.
        public var feedbackDate: ClientRuntime.Date?
        /// The event feedback value.
        /// This member is required.
        public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
        /// The provider.
        /// This member is required.
        public var provider: Swift.String?

        public init (
            feedbackDate: ClientRuntime.Date? = nil,
            feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
            provider: Swift.String? = nil
        )
        {
            self.feedbackDate = feedbackDate
            self.feedbackValue = feedbackValue
            self.provider = provider
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum EventFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case passwordChange
        case signIn
        case signUp
        case sdkUnknown(Swift.String)

        public static var allCases: [EventFilterType] {
            return [
                .passwordChange,
                .signIn,
                .signUp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .passwordChange: return "PASSWORD_CHANGE"
            case .signIn: return "SIGN_IN"
            case .signUp: return "SIGN_UP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventFilterType(rawValue: rawValue) ?? EventFilterType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum EventResponseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fail
        case inprogress
        case pass
        case sdkUnknown(Swift.String)

        public static var allCases: [EventResponseType] {
            return [
                .fail,
                .inprogress,
                .pass,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fail: return "Fail"
            case .inprogress: return "InProgress"
            case .pass: return "Pass"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventResponseType(rawValue: rawValue) ?? EventResponseType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.EventRiskType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compromisedCredentialsDetected = "CompromisedCredentialsDetected"
        case riskDecision = "RiskDecision"
        case riskLevel = "RiskLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compromisedCredentialsDetected = self.compromisedCredentialsDetected {
            try encodeContainer.encode(compromisedCredentialsDetected, forKey: .compromisedCredentialsDetected)
        }
        if let riskDecision = self.riskDecision {
            try encodeContainer.encode(riskDecision.rawValue, forKey: .riskDecision)
        }
        if let riskLevel = self.riskLevel {
            try encodeContainer.encode(riskLevel.rawValue, forKey: .riskLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let riskDecisionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskDecisionType.self, forKey: .riskDecision)
        riskDecision = riskDecisionDecoded
        let riskLevelDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskLevelType.self, forKey: .riskLevel)
        riskLevel = riskLevelDecoded
        let compromisedCredentialsDetectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .compromisedCredentialsDetected)
        compromisedCredentialsDetected = compromisedCredentialsDetectedDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The event risk type.
    public struct EventRiskType: Swift.Equatable {
        /// Indicates whether compromised credentials were detected during an authentication event.
        public var compromisedCredentialsDetected: Swift.Bool?
        /// The risk decision.
        public var riskDecision: CognitoIdentityProviderClientTypes.RiskDecisionType?
        /// The risk level.
        public var riskLevel: CognitoIdentityProviderClientTypes.RiskLevelType?

        public init (
            compromisedCredentialsDetected: Swift.Bool? = nil,
            riskDecision: CognitoIdentityProviderClientTypes.RiskDecisionType? = nil,
            riskLevel: CognitoIdentityProviderClientTypes.RiskLevelType? = nil
        )
        {
            self.compromisedCredentialsDetected = compromisedCredentialsDetected
            self.riskDecision = riskDecision
            self.riskLevel = riskLevel
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forgotpassword
        case passwordchange
        case resendcode
        case signin
        case signup
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .forgotpassword,
                .passwordchange,
                .resendcode,
                .signin,
                .signup,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forgotpassword: return "ForgotPassword"
            case .passwordchange: return "PasswordChange"
            case .resendcode: return "ResendCode"
            case .signin: return "SignIn"
            case .signup: return "SignUp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension ExpiredCodeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExpiredCodeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown if a code has expired.
public struct ExpiredCodeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the expired code exception is thrown.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExpiredCodeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExpiredCodeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum ExplicitAuthFlowsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adminNoSrpAuth
        case allowAdminUserPasswordAuth
        case allowCustomAuth
        case allowRefreshTokenAuth
        case allowUserPasswordAuth
        case allowUserSrpAuth
        case customAuthFlowOnly
        case userPasswordAuth
        case sdkUnknown(Swift.String)

        public static var allCases: [ExplicitAuthFlowsType] {
            return [
                .adminNoSrpAuth,
                .allowAdminUserPasswordAuth,
                .allowCustomAuth,
                .allowRefreshTokenAuth,
                .allowUserPasswordAuth,
                .allowUserSrpAuth,
                .customAuthFlowOnly,
                .userPasswordAuth,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .allowAdminUserPasswordAuth: return "ALLOW_ADMIN_USER_PASSWORD_AUTH"
            case .allowCustomAuth: return "ALLOW_CUSTOM_AUTH"
            case .allowRefreshTokenAuth: return "ALLOW_REFRESH_TOKEN_AUTH"
            case .allowUserPasswordAuth: return "ALLOW_USER_PASSWORD_AUTH"
            case .allowUserSrpAuth: return "ALLOW_USER_SRP_AUTH"
            case .customAuthFlowOnly: return "CUSTOM_AUTH_FLOW_ONLY"
            case .userPasswordAuth: return "USER_PASSWORD_AUTH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExplicitAuthFlowsType(rawValue: rawValue) ?? ExplicitAuthFlowsType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum FeedbackValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case invalid
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [FeedbackValueType] {
            return [
                .invalid,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "Invalid"
            case .valid: return "Valid"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeedbackValueType(rawValue: rawValue) ?? FeedbackValueType.sdkUnknown(rawValue)
        }
    }
}

extension ForbiddenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
public struct ForbiddenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ForbiddenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ForgetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForgetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), accessToken: \"CONTENT_REDACTED\")"}
}

extension ForgetDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
    }
}

extension ForgetDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to forget the device.
public struct ForgetDeviceInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose registered device you want to forget.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
    }
}

struct ForgetDeviceInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let deviceKey: Swift.String?
}

extension ForgetDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
    }
}

extension ForgetDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ForgetDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ForgetDeviceOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ForgetDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ForgetDeviceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ForgotPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForgotPasswordInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), userContextData: \(Swift.String(describing: userContextData)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension ForgotPasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension ForgotPasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to reset a user's password.
public struct ForgotPasswordInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for ForgotPassword calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and user migration. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The user name of the user for whom you want to enter a code to reset a forgotten password.
    /// This member is required.
    public var username: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

struct ForgotPasswordInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let secretHash: Swift.String?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let username: Swift.String?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension ForgotPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let secretHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretHash)
        secretHash = secretHashDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension ForgotPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ForgotPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ForgotPasswordOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ForgotPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ForgotPasswordOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeDeliveryDetails = output.codeDeliveryDetails
        } else {
            self.codeDeliveryDetails = nil
        }
    }
}

/// The response from Amazon Cognito to a request to reset a password.
public struct ForgotPasswordOutputResponse: Swift.Equatable {
    /// The code delivery details returned by the server in response to the request to reset a password.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init (
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

struct ForgotPasswordOutputResponseBody: Swift.Equatable {
    let codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
}

extension ForgotPasswordOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeDeliveryDetails = "CodeDeliveryDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDeliveryDetailsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.self, forKey: .codeDeliveryDetails)
        codeDeliveryDetails = codeDeliveryDetailsDecoded
    }
}

extension GetCSVHeaderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetCSVHeaderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get the header information of the CSV file for the user import job.
public struct GetCSVHeaderInput: Swift.Equatable {
    /// The user pool ID for the user pool that the users are to be imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

struct GetCSVHeaderInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
}

extension GetCSVHeaderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension GetCSVHeaderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCSVHeaderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCSVHeaderOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCSVHeaderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCSVHeaderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.csvHeader = output.csvHeader
            self.userPoolId = output.userPoolId
        } else {
            self.csvHeader = nil
            self.userPoolId = nil
        }
    }
}

/// Represents the response from the server to the request to get the header information of the CSV file for the user import job.
public struct GetCSVHeaderOutputResponse: Swift.Equatable {
    /// The header information of the CSV file for the user import job.
    public var csvHeader: [Swift.String]?
    /// The user pool ID for the user pool that the users are to be imported into.
    public var userPoolId: Swift.String?

    public init (
        csvHeader: [Swift.String]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.csvHeader = csvHeader
        self.userPoolId = userPoolId
    }
}

struct GetCSVHeaderOutputResponseBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let csvHeader: [Swift.String]?
}

extension GetCSVHeaderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvHeader = "CSVHeader"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let csvHeaderContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .csvHeader)
        var csvHeaderDecoded0:[Swift.String]? = nil
        if let csvHeaderContainer = csvHeaderContainer {
            csvHeaderDecoded0 = [Swift.String]()
            for string0 in csvHeaderContainer {
                if let string0 = string0 {
                    csvHeaderDecoded0?.append(string0)
                }
            }
        }
        csvHeader = csvHeaderDecoded0
    }
}

extension GetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), accessToken: \"CONTENT_REDACTED\")"}
}

extension GetDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
    }
}

extension GetDeviceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get the device.
public struct GetDeviceInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose device information you want to request.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
    }
}

struct GetDeviceInputBody: Swift.Equatable {
    let deviceKey: Swift.String?
    let accessToken: Swift.String?
}

extension GetDeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension GetDeviceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeviceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeviceOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeviceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeviceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.device = output.device
        } else {
            self.device = nil
        }
    }
}

/// Gets the device response.
public struct GetDeviceOutputResponse: Swift.Equatable {
    /// The device.
    /// This member is required.
    public var device: CognitoIdentityProviderClientTypes.DeviceType?

    public init (
        device: CognitoIdentityProviderClientTypes.DeviceType? = nil
    )
    {
        self.device = device
    }
}

struct GetDeviceOutputResponseBody: Swift.Equatable {
    let device: CognitoIdentityProviderClientTypes.DeviceType?
}

extension GetDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case device = "Device"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceType.self, forKey: .device)
        device = deviceDecoded
    }
}

extension GetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetGroupInput: Swift.Equatable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
    }
}

struct GetGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let userPoolId: Swift.String?
}

extension GetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension GetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct GetGroupOutputResponse: Swift.Equatable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init (
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

struct GetGroupOutputResponseBody: Swift.Equatable {
    let group: CognitoIdentityProviderClientTypes.GroupType?
}

extension GetGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.GroupType.self, forKey: .group)
        group = groupDecoded
    }
}

extension GetIdentityProviderByIdentifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idpIdentifier = "IdpIdentifier"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let idpIdentifier = self.idpIdentifier {
            try encodeContainer.encode(idpIdentifier, forKey: .idpIdentifier)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetIdentityProviderByIdentifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetIdentityProviderByIdentifierInput: Swift.Equatable {
    /// The IdP identifier.
    /// This member is required.
    public var idpIdentifier: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        idpIdentifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.idpIdentifier = idpIdentifier
        self.userPoolId = userPoolId
    }
}

struct GetIdentityProviderByIdentifierInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let idpIdentifier: Swift.String?
}

extension GetIdentityProviderByIdentifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idpIdentifier = "IdpIdentifier"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let idpIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpIdentifier)
        idpIdentifier = idpIdentifierDecoded
    }
}

extension GetIdentityProviderByIdentifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIdentityProviderByIdentifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIdentityProviderByIdentifierOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIdentityProviderByIdentifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIdentityProviderByIdentifierOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProvider = output.identityProvider
        } else {
            self.identityProvider = nil
        }
    }
}

public struct GetIdentityProviderByIdentifierOutputResponse: Swift.Equatable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init (
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

struct GetIdentityProviderByIdentifierOutputResponseBody: Swift.Equatable {
    let identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?
}

extension GetIdentityProviderByIdentifierOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProvider = "IdentityProvider"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderType.self, forKey: .identityProvider)
        identityProvider = identityProviderDecoded
    }
}

extension GetSigningCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetSigningCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Request to get a signing certificate from Amazon Cognito.
public struct GetSigningCertificateInput: Swift.Equatable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

struct GetSigningCertificateInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
}

extension GetSigningCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension GetSigningCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSigningCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSigningCertificateOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSigningCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSigningCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
        } else {
            self.certificate = nil
        }
    }
}

/// Response from Amazon Cognito for a signing certificate request.
public struct GetSigningCertificateOutputResponse: Swift.Equatable {
    /// The signing certificate.
    public var certificate: Swift.String?

    public init (
        certificate: Swift.String? = nil
    )
    {
        self.certificate = certificate
    }
}

struct GetSigningCertificateOutputResponseBody: Swift.Equatable {
    let certificate: Swift.String?
}

extension GetSigningCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
    }
}

extension GetUICustomizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUICustomizationInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension GetUICustomizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetUICustomizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUICustomizationInput: Swift.Equatable {
    /// The client ID for the client app.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

struct GetUICustomizationInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
}

extension GetUICustomizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension GetUICustomizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUICustomizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUICustomizationOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUICustomizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUICustomizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.uiCustomization = output.uiCustomization
        } else {
            self.uiCustomization = nil
        }
    }
}

public struct GetUICustomizationOutputResponse: Swift.Equatable {
    /// The UI customization information.
    /// This member is required.
    public var uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?

    public init (
        uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType? = nil
    )
    {
        self.uiCustomization = uiCustomization
    }
}

struct GetUICustomizationOutputResponseBody: Swift.Equatable {
    let uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?
}

extension GetUICustomizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case uiCustomization = "UICustomization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uiCustomizationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UICustomizationType.self, forKey: .uiCustomization)
        uiCustomization = uiCustomizationDecoded
    }
}

extension GetUserAttributeVerificationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserAttributeVerificationCodeInput(attributeName: \(Swift.String(describing: attributeName)), clientMetadata: \(Swift.String(describing: clientMetadata)), accessToken: \"CONTENT_REDACTED\")"}
}

extension GetUserAttributeVerificationCodeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case attributeName = "AttributeName"
        case clientMetadata = "ClientMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension GetUserAttributeVerificationCodeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get user attribute verification.
public struct GetUserAttributeVerificationCodeInput: Swift.Equatable {
    /// A non-expired access token for the user whose attribute verification code you want to generate.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The attribute name returned by the server response to get the user attribute verification code.
    /// This member is required.
    public var attributeName: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your GetUserAttributeVerificationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?

    public init (
        accessToken: Swift.String? = nil,
        attributeName: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil
    )
    {
        self.accessToken = accessToken
        self.attributeName = attributeName
        self.clientMetadata = clientMetadata
    }
}

struct GetUserAttributeVerificationCodeInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let attributeName: Swift.String?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension GetUserAttributeVerificationCodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case attributeName = "AttributeName"
        case clientMetadata = "ClientMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension GetUserAttributeVerificationCodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserAttributeVerificationCodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUserAttributeVerificationCodeOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserAttributeVerificationCodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUserAttributeVerificationCodeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeDeliveryDetails = output.codeDeliveryDetails
        } else {
            self.codeDeliveryDetails = nil
        }
    }
}

/// The verification code response returned by the server response to get the user attribute verification code.
public struct GetUserAttributeVerificationCodeOutputResponse: Swift.Equatable {
    /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init (
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

struct GetUserAttributeVerificationCodeOutputResponseBody: Swift.Equatable {
    let codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
}

extension GetUserAttributeVerificationCodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeDeliveryDetails = "CodeDeliveryDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDeliveryDetailsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.self, forKey: .codeDeliveryDetails)
        codeDeliveryDetails = codeDeliveryDetailsDecoded
    }
}

extension GetUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserInput(accessToken: \"CONTENT_REDACTED\")"}
}

extension GetUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
    }
}

extension GetUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to get information about the user.
public struct GetUserInput: Swift.Equatable {
    /// A non-expired access token for the user whose information you want to query.
    /// This member is required.
    public var accessToken: Swift.String?

    public init (
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

struct GetUserInputBody: Swift.Equatable {
    let accessToken: Swift.String?
}

extension GetUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension GetUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUserOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserOutputResponse(mfaOptions: \(Swift.String(describing: mfaOptions)), preferredMfaSetting: \(Swift.String(describing: preferredMfaSetting)), userAttributes: \(Swift.String(describing: userAttributes)), userMFASettingList: \(Swift.String(describing: userMFASettingList)), username: \"CONTENT_REDACTED\")"}
}

extension GetUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mfaOptions = output.mfaOptions
            self.preferredMfaSetting = output.preferredMfaSetting
            self.userAttributes = output.userAttributes
            self.userMFASettingList = output.userMFASettingList
            self.username = output.username
        } else {
            self.mfaOptions = nil
            self.preferredMfaSetting = nil
            self.userAttributes = nil
            self.userMFASettingList = nil
            self.username = nil
        }
    }
}

/// Represents the response from the server from the request to get information about the user.
public struct GetUserOutputResponse: Swift.Equatable {
    /// This response parameter is no longer supported. It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The user's preferred MFA setting.
    public var preferredMfaSetting: Swift.String?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The MFA options that are activated for the user. The possible values in this list are SMS_MFA and SOFTWARE_TOKEN_MFA.
    public var userMFASettingList: [Swift.String]?
    /// The user name of the user you want to retrieve from the get user request.
    /// This member is required.
    public var username: Swift.String?

    public init (
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        preferredMfaSetting: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userMFASettingList: [Swift.String]? = nil,
        username: Swift.String? = nil
    )
    {
        self.mfaOptions = mfaOptions
        self.preferredMfaSetting = preferredMfaSetting
        self.userAttributes = userAttributes
        self.userMFASettingList = userMFASettingList
        self.username = username
    }
}

struct GetUserOutputResponseBody: Swift.Equatable {
    let username: Swift.String?
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    let preferredMfaSetting: Swift.String?
    let userMFASettingList: [Swift.String]?
}

extension GetUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaOptions = "MFAOptions"
        case preferredMfaSetting = "PreferredMfaSetting"
        case userAttributes = "UserAttributes"
        case userMFASettingList = "UserMFASettingList"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let mfaOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mfaOptions)
        var mfaOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mfaOptionsContainer = mfaOptionsContainer {
            mfaOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mfaOptionsContainer {
                if let structure0 = structure0 {
                    mfaOptionsDecoded0?.append(structure0)
                }
            }
        }
        mfaOptions = mfaOptionsDecoded0
        let preferredMfaSettingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMfaSetting)
        preferredMfaSetting = preferredMfaSettingDecoded
        let userMFASettingListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userMFASettingList)
        var userMFASettingListDecoded0:[Swift.String]? = nil
        if let userMFASettingListContainer = userMFASettingListContainer {
            userMFASettingListDecoded0 = [Swift.String]()
            for string0 in userMFASettingListContainer {
                if let string0 = string0 {
                    userMFASettingListDecoded0?.append(string0)
                }
            }
        }
        userMFASettingList = userMFASettingListDecoded0
    }
}

extension GetUserPoolMfaConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension GetUserPoolMfaConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetUserPoolMfaConfigInput: Swift.Equatable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

struct GetUserPoolMfaConfigInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
}

extension GetUserPoolMfaConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
    }
}

extension GetUserPoolMfaConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserPoolMfaConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUserPoolMfaConfigOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserPoolMfaConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUserPoolMfaConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mfaConfiguration = output.mfaConfiguration
            self.smsMfaConfiguration = output.smsMfaConfiguration
            self.softwareTokenMfaConfiguration = output.softwareTokenMfaConfiguration
        } else {
            self.mfaConfiguration = nil
            self.smsMfaConfiguration = nil
            self.softwareTokenMfaConfiguration = nil
        }
    }
}

public struct GetUserPoolMfaConfigOutputResponse: Swift.Equatable {
    /// The multi-factor authentication (MFA) configuration. Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor activated.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The SMS text message multi-factor authentication (MFA) configuration.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// The software token multi-factor authentication (MFA) configuration.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?

    public init (
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil
    )
    {
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
    }
}

struct GetUserPoolMfaConfigOutputResponseBody: Swift.Equatable {
    let smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    let softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
}

extension GetUserPoolMfaConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaConfiguration = "MfaConfiguration"
        case smsMfaConfiguration = "SmsMfaConfiguration"
        case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsMfaConfigType.self, forKey: .smsMfaConfiguration)
        smsMfaConfiguration = smsMfaConfigurationDecoded
        let softwareTokenMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.self, forKey: .softwareTokenMfaConfiguration)
        softwareTokenMfaConfiguration = softwareTokenMfaConfigurationDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
    }
}

extension GlobalSignOutInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GlobalSignOutInput(accessToken: \"CONTENT_REDACTED\")"}
}

extension GlobalSignOutInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
    }
}

extension GlobalSignOutInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to sign out all devices.
public struct GlobalSignOutInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user who you want to sign out.
    /// This member is required.
    public var accessToken: Swift.String?

    public init (
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

struct GlobalSignOutInputBody: Swift.Equatable {
    let accessToken: Swift.String?
}

extension GlobalSignOutInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension GlobalSignOutOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GlobalSignOutOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GlobalSignOutOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GlobalSignOutOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response to the request to sign out all devices.
public struct GlobalSignOutOutputResponse: Swift.Equatable {

    public init () { }
}

extension GroupExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GroupExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.
public struct GroupExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GroupExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GroupExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.GroupType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case description = "Description"
        case groupName = "GroupName"
        case lastModifiedDate = "LastModifiedDate"
        case precedence = "Precedence"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let precedence = self.precedence {
            try encodeContainer.encode(precedence, forKey: .precedence)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let precedenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .precedence)
        precedence = precedenceDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The group type.
    public struct GroupType: Swift.Equatable {
        /// The date the group was created.
        public var creationDate: ClientRuntime.Date?
        /// A string containing the description of the group.
        public var description: Swift.String?
        /// The name of the group.
        public var groupName: Swift.String?
        /// The date the group was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher ornull Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the cognito:roles and cognito:preferred_role claims. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim isn't set in users' tokens. The default Precedence value is null.
        public var precedence: Swift.Int?
        /// The role Amazon Resource Name (ARN) for the group.
        public var roleArn: Swift.String?
        /// The user pool ID for the user pool.
        public var userPoolId: Swift.String?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            groupName: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            precedence: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.description = description
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }

}

extension CognitoIdentityProviderClientTypes.HttpHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headerName
        case headerValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headerName = self.headerName {
            try encodeContainer.encode(headerName, forKey: .headerName)
        }
        if let headerValue = self.headerValue {
            try encodeContainer.encode(headerValue, forKey: .headerValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let headerValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerValue)
        headerValue = headerValueDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The HTTP header.
    public struct HttpHeader: Swift.Equatable {
        /// The header name.
        public var headerName: Swift.String?
        /// The header value.
        public var headerValue: Swift.String?

        public init (
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }

}

extension CognitoIdentityProviderClientTypes.IdentityProviderType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case creationDate = "CreationDate"
        case idpIdentifiers = "IdpIdentifiers"
        case lastModifiedDate = "LastModifiedDate"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeMapping = attributeMapping {
            var attributeMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeMapping)
            for (dictKey0, attributeMappingType0) in attributeMapping {
                try attributeMappingContainer.encode(attributeMappingType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let idpIdentifiers = idpIdentifiers {
            var idpIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .idpIdentifiers)
            for idpidentifiertype0 in idpIdentifiers {
                try idpIdentifiersContainer.encode(idpidentifiertype0)
            }
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let providerDetails = providerDetails {
            var providerDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .providerDetails)
            for (dictKey0, providerDetailsType0) in providerDetails {
                try providerDetailsContainer.encode(providerDetailsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderTypeType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let providerDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .providerDetails)
        var providerDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let providerDetailsContainer = providerDetailsContainer {
            providerDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in providerDetailsContainer {
                if let stringtype0 = stringtype0 {
                    providerDetailsDecoded0?[key0] = stringtype0
                }
            }
        }
        providerDetails = providerDetailsDecoded0
        let attributeMappingContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributeMapping)
        var attributeMappingDecoded0: [Swift.String:Swift.String]? = nil
        if let attributeMappingContainer = attributeMappingContainer {
            attributeMappingDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in attributeMappingContainer {
                if let stringtype0 = stringtype0 {
                    attributeMappingDecoded0?[key0] = stringtype0
                }
            }
        }
        attributeMapping = attributeMappingDecoded0
        let idpIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .idpIdentifiers)
        var idpIdentifiersDecoded0:[Swift.String]? = nil
        if let idpIdentifiersContainer = idpIdentifiersContainer {
            idpIdentifiersDecoded0 = [Swift.String]()
            for string0 in idpIdentifiersContainer {
                if let string0 = string0 {
                    idpIdentifiersDecoded0?.append(string0)
                }
            }
        }
        idpIdentifiers = idpIdentifiersDecoded0
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for information about an IdP.
    public struct IdentityProviderType: Swift.Equatable {
        /// A mapping of IdP attributes to standard and custom user pool attributes.
        public var attributeMapping: [Swift.String:Swift.String]?
        /// The date the IdP was created.
        public var creationDate: ClientRuntime.Date?
        /// A list of IdP identifiers.
        public var idpIdentifiers: [Swift.String]?
        /// The date the IdP was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The IdP details. The following list describes the provider detail keys for each IdP type.
        ///
        /// * For Google and Login with Amazon:
        ///
        /// * client_id
        ///
        /// * client_secret
        ///
        /// * authorize_scopes
        ///
        ///
        ///
        ///
        /// * For Facebook:
        ///
        /// * client_id
        ///
        /// * client_secret
        ///
        /// * authorize_scopes
        ///
        /// * api_version
        ///
        ///
        ///
        ///
        /// * For Sign in with Apple:
        ///
        /// * client_id
        ///
        /// * team_id
        ///
        /// * key_id
        ///
        /// * private_key You can submit a private_key when you add or update an IdP. Describe operations don't return the private key.
        ///
        /// * authorize_scopes
        ///
        ///
        ///
        ///
        /// * For OIDC providers:
        ///
        /// * client_id
        ///
        /// * client_secret
        ///
        /// * attributes_request_method
        ///
        /// * oidc_issuer
        ///
        /// * authorize_scopes
        ///
        /// * The following keys are only present if Amazon Cognito didn't discover them at the oidc_issuer URL.
        ///
        /// * authorize_url
        ///
        /// * token_url
        ///
        /// * attributes_url
        ///
        /// * jwks_uri
        ///
        ///
        ///
        ///
        /// * Amazon Cognito sets the value of the following keys automatically. They are read-only.
        ///
        /// * attributes_url_add_attributes
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * For SAML providers:
        ///
        /// * MetadataFile or MetadataURL
        ///
        /// * IDPSignout optional
        public var providerDetails: [Swift.String:Swift.String]?
        /// The IdP name.
        public var providerName: Swift.String?
        /// The IdP type.
        public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?
        /// The user pool ID.
        public var userPoolId: Swift.String?

        public init (
            attributeMapping: [Swift.String:Swift.String]? = nil,
            creationDate: ClientRuntime.Date? = nil,
            idpIdentifiers: [Swift.String]? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            providerDetails: [Swift.String:Swift.String]? = nil,
            providerName: Swift.String? = nil,
            providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.attributeMapping = attributeMapping
            self.creationDate = creationDate
            self.idpIdentifiers = idpIdentifiers
            self.lastModifiedDate = lastModifiedDate
            self.providerDetails = providerDetails
            self.providerName = providerName
            self.providerType = providerType
            self.userPoolId = userPoolId
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum IdentityProviderTypeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case facebook
        case google
        case loginwithamazon
        case oidc
        case saml
        case signinwithapple
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityProviderTypeType] {
            return [
                .facebook,
                .google,
                .loginwithamazon,
                .oidc,
                .saml,
                .signinwithapple,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .facebook: return "Facebook"
            case .google: return "Google"
            case .loginwithamazon: return "LoginWithAmazon"
            case .oidc: return "OIDC"
            case .saml: return "SAML"
            case .signinwithapple: return "SignInWithApple"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityProviderTypeType(rawValue: rawValue) ?? IdentityProviderTypeType.sdkUnknown(rawValue)
        }
    }
}

extension InitiateAuthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InitiateAuthInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), authFlow: \(Swift.String(describing: authFlow)), clientMetadata: \(Swift.String(describing: clientMetadata)), userContextData: \(Swift.String(describing: userContextData)), authParameters: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\")"}
}

extension InitiateAuthInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case userContextData = "UserContextData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let authFlow = self.authFlow {
            try encodeContainer.encode(authFlow.rawValue, forKey: .authFlow)
        }
        if let authParameters = authParameters {
            var authParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .authParameters)
            for (dictKey0, authParametersType0) in authParameters {
                try authParametersContainer.encode(authParametersType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
    }
}

extension InitiateAuthInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Initiates the authentication request.
public struct InitiateAuthInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for InitiateAuth calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The authentication flow for this call to run. The API action will depend on this value. For example:
    ///
    /// * REFRESH_TOKEN_AUTH takes in a valid refresh token and returns new tokens.
    ///
    /// * USER_SRP_AUTH takes in USERNAME and SRP_A and returns the SRP variables to be used for next challenge execution.
    ///
    /// * USER_PASSWORD_AUTH takes in USERNAME and PASSWORD and returns the next challenge or tokens.
    ///
    ///
    /// Valid values include:
    ///
    /// * USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.
    ///
    /// * REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.
    ///
    /// * CUSTOM_AUTH: Custom authentication flow.
    ///
    /// * USER_PASSWORD_AUTH: Non-SRP authentication flow; user name and password are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if it doesn't find the user name in the user pool.
    ///
    ///
    /// ADMIN_NO_SRP_AUTH isn't a valid value.
    /// This member is required.
    public var authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    /// The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:
    ///
    /// * For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).
    public var authParameters: [Swift.String:Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:
    ///
    /// * Pre signup
    ///
    /// * Pre authentication
    ///
    /// * User migration
    ///
    ///
    /// When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your InitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:
    ///
    /// * Post authentication
    ///
    /// * Custom message
    ///
    /// * Pre token generation
    ///
    /// * Create auth challenge
    ///
    /// * Define auth challenge
    ///
    /// * Verify auth challenge
    ///
    ///
    /// For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        authFlow: CognitoIdentityProviderClientTypes.AuthFlowType? = nil,
        authParameters: [Swift.String:Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.authFlow = authFlow
        self.authParameters = authParameters
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.userContextData = userContextData
    }
}

struct InitiateAuthInputBody: Swift.Equatable {
    let authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    let authParameters: [Swift.String:Swift.String]?
    let clientMetadata: [Swift.String:Swift.String]?
    let clientId: Swift.String?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
}

extension InitiateAuthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case userContextData = "UserContextData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authFlowDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthFlowType.self, forKey: .authFlow)
        authFlow = authFlowDecoded
        let authParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .authParameters)
        var authParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let authParametersContainer = authParametersContainer {
            authParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in authParametersContainer {
                if let stringtype0 = stringtype0 {
                    authParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        authParameters = authParametersDecoded0
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
    }
}

extension InitiateAuthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension InitiateAuthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum InitiateAuthOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension InitiateAuthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InitiateAuthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authenticationResult = output.authenticationResult
            self.challengeName = output.challengeName
            self.challengeParameters = output.challengeParameters
            self.session = output.session
        } else {
            self.authenticationResult = nil
            self.challengeName = nil
            self.challengeParameters = nil
            self.session = nil
        }
    }
}

/// Initiates the authentication response.
public struct InitiateAuthOutputResponse: Swift.Equatable {
    /// The result of the authentication response. This result is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge that you're responding to with this call. This name is returned in the AdminInitiateAuth response if you must pass another challenge. Valid values include the following: All of the following challenges require USERNAME and SECRET_HASH (if applicable) in the parameters.
    ///
    /// * SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.
    ///
    /// * PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.
    ///
    /// * CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.
    ///
    /// * DEVICE_SRP_AUTH: If device tracking was activated on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.
    ///
    /// * DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.
    ///
    /// * NEW_PASSWORD_REQUIRED: For users who are required to change their passwords after successful first login. Respond to this challenge with NEW_PASSWORD and any required attributes that Amazon Cognito returned in the requiredAttributes parameter. You can also set values for attributes that aren't required by your user pool and that your app client can write. For more information, see [RespondToAuthChallenge](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RespondToAuthChallenge.html). In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In RespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the UpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * MFA_SETUP: For users who are required to setup an MFA factor before they can sign in. The MFA types activated for the user pool will be listed in the challenge parameters MFA_CAN_SETUP value. To set up software token MFA, use the session returned here from InitiateAuth as an input to AssociateSoftwareToken. Use the session returned by VerifySoftwareToken as an input to RespondToAuthChallenge with challenge name MFA_SETUP to complete sign-in. To set up SMS MFA, an administrator should help the user to add a phone number to their account, and then the user should call InitiateAuth again to restart sign-in.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. These are returned in the InitiateAuth response if you must pass another challenge. The responses in this parameter should be used to compute inputs to the next call (RespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable).
    public var challengeParameters: [Swift.String:Swift.String]?
    /// The session that should pass both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init (
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

struct InitiateAuthOutputResponseBody: Swift.Equatable {
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeParameters: [Swift.String:Swift.String]?
    let authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
}

extension InitiateAuthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationResult = "AuthenticationResult"
        case challengeName = "ChallengeName"
        case challengeParameters = "ChallengeParameters"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeParameters)
        var challengeParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeParametersContainer = challengeParametersContainer {
            challengeParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeParametersContainer {
                if let stringtype0 = stringtype0 {
                    challengeParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeParameters = challengeParametersDecoded0
        let authenticationResultDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthenticationResultType.self, forKey: .authenticationResult)
        authenticationResult = authenticationResultDecoded
    }
}

extension InternalErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an internal error.
public struct InternalErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message returned when Amazon Cognito throws an internal error exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEmailRoleAccessPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidEmailRoleAccessPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
public struct InvalidEmailRoleAccessPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when you have an unverified email address or the identity policy isn't set on an email address that Amazon Cognito can access.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEmailRoleAccessPolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidEmailRoleAccessPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLambdaResponseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidLambdaResponseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
public struct InvalidLambdaResponseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito throws an invalid Lambda response exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLambdaResponseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidLambdaResponseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOAuthFlowException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOAuthFlowExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the specified OAuth flow is not valid.
public struct InvalidOAuthFlowException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOAuthFlowExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOAuthFlowExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the Amazon Cognito service throws an invalid parameter exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPasswordException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPasswordExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an invalid password.
public struct InvalidPasswordException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito throws an invalid user password exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPasswordExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPasswordExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSmsRoleAccessPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSmsRoleAccessPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
public struct InvalidSmsRoleAccessPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the invalid SMS role access policy exception is thrown.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSmsRoleAccessPolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSmsRoleAccessPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSmsRoleTrustRelationshipException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSmsRoleTrustRelationshipExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
public struct InvalidSmsRoleTrustRelationshipException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the role trust relationship for the SMS message is not valid.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSmsRoleTrustRelationshipExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSmsRoleTrustRelationshipExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserPoolConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidUserPoolConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the user pool configuration is not valid.
public struct InvalidUserPoolConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the user pool configuration is not valid.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserPoolConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidUserPoolConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.LambdaConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAuthChallenge = "CreateAuthChallenge"
        case customEmailSender = "CustomEmailSender"
        case customMessage = "CustomMessage"
        case customSMSSender = "CustomSMSSender"
        case defineAuthChallenge = "DefineAuthChallenge"
        case kmsKeyID = "KMSKeyID"
        case postAuthentication = "PostAuthentication"
        case postConfirmation = "PostConfirmation"
        case preAuthentication = "PreAuthentication"
        case preSignUp = "PreSignUp"
        case preTokenGeneration = "PreTokenGeneration"
        case userMigration = "UserMigration"
        case verifyAuthChallengeResponse = "VerifyAuthChallengeResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createAuthChallenge = self.createAuthChallenge {
            try encodeContainer.encode(createAuthChallenge, forKey: .createAuthChallenge)
        }
        if let customEmailSender = self.customEmailSender {
            try encodeContainer.encode(customEmailSender, forKey: .customEmailSender)
        }
        if let customMessage = self.customMessage {
            try encodeContainer.encode(customMessage, forKey: .customMessage)
        }
        if let customSMSSender = self.customSMSSender {
            try encodeContainer.encode(customSMSSender, forKey: .customSMSSender)
        }
        if let defineAuthChallenge = self.defineAuthChallenge {
            try encodeContainer.encode(defineAuthChallenge, forKey: .defineAuthChallenge)
        }
        if let kmsKeyID = self.kmsKeyID {
            try encodeContainer.encode(kmsKeyID, forKey: .kmsKeyID)
        }
        if let postAuthentication = self.postAuthentication {
            try encodeContainer.encode(postAuthentication, forKey: .postAuthentication)
        }
        if let postConfirmation = self.postConfirmation {
            try encodeContainer.encode(postConfirmation, forKey: .postConfirmation)
        }
        if let preAuthentication = self.preAuthentication {
            try encodeContainer.encode(preAuthentication, forKey: .preAuthentication)
        }
        if let preSignUp = self.preSignUp {
            try encodeContainer.encode(preSignUp, forKey: .preSignUp)
        }
        if let preTokenGeneration = self.preTokenGeneration {
            try encodeContainer.encode(preTokenGeneration, forKey: .preTokenGeneration)
        }
        if let userMigration = self.userMigration {
            try encodeContainer.encode(userMigration, forKey: .userMigration)
        }
        if let verifyAuthChallengeResponse = self.verifyAuthChallengeResponse {
            try encodeContainer.encode(verifyAuthChallengeResponse, forKey: .verifyAuthChallengeResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preSignUpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignUp)
        preSignUp = preSignUpDecoded
        let customMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customMessage)
        customMessage = customMessageDecoded
        let postConfirmationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postConfirmation)
        postConfirmation = postConfirmationDecoded
        let preAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preAuthentication)
        preAuthentication = preAuthenticationDecoded
        let postAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAuthentication)
        postAuthentication = postAuthenticationDecoded
        let defineAuthChallengeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defineAuthChallenge)
        defineAuthChallenge = defineAuthChallengeDecoded
        let createAuthChallengeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createAuthChallenge)
        createAuthChallenge = createAuthChallengeDecoded
        let verifyAuthChallengeResponseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifyAuthChallengeResponse)
        verifyAuthChallengeResponse = verifyAuthChallengeResponseDecoded
        let preTokenGenerationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preTokenGeneration)
        preTokenGeneration = preTokenGenerationDecoded
        let userMigrationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userMigration)
        userMigration = userMigrationDecoded
        let customSMSSenderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType.self, forKey: .customSMSSender)
        customSMSSender = customSMSSenderDecoded
        let customEmailSenderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType.self, forKey: .customEmailSender)
        customEmailSender = customEmailSenderDecoded
        let kmsKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyID)
        kmsKeyID = kmsKeyIDDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Specifies the configuration for Lambda triggers.
    public struct LambdaConfigType: Swift.Equatable {
        /// Creates an authentication challenge.
        public var createAuthChallenge: Swift.String?
        /// A custom email sender Lambda trigger.
        public var customEmailSender: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType?
        /// A custom Message Lambda trigger.
        public var customMessage: Swift.String?
        /// A custom SMS sender Lambda trigger.
        public var customSMSSender: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType?
        /// Defines the authentication challenge.
        public var defineAuthChallenge: Swift.String?
        /// The Amazon Resource Name (ARN) of an [KMS key]. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
        public var kmsKeyID: Swift.String?
        /// A post-authentication Lambda trigger.
        public var postAuthentication: Swift.String?
        /// A post-confirmation Lambda trigger.
        public var postConfirmation: Swift.String?
        /// A pre-authentication Lambda trigger.
        public var preAuthentication: Swift.String?
        /// A pre-registration Lambda trigger.
        public var preSignUp: Swift.String?
        /// A Lambda trigger that is invoked before token generation.
        public var preTokenGeneration: Swift.String?
        /// The user migration Lambda config type.
        public var userMigration: Swift.String?
        /// Verifies the authentication challenge response.
        public var verifyAuthChallengeResponse: Swift.String?

        public init (
            createAuthChallenge: Swift.String? = nil,
            customEmailSender: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType? = nil,
            customMessage: Swift.String? = nil,
            customSMSSender: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType? = nil,
            defineAuthChallenge: Swift.String? = nil,
            kmsKeyID: Swift.String? = nil,
            postAuthentication: Swift.String? = nil,
            postConfirmation: Swift.String? = nil,
            preAuthentication: Swift.String? = nil,
            preSignUp: Swift.String? = nil,
            preTokenGeneration: Swift.String? = nil,
            userMigration: Swift.String? = nil,
            verifyAuthChallengeResponse: Swift.String? = nil
        )
        {
            self.createAuthChallenge = createAuthChallenge
            self.customEmailSender = customEmailSender
            self.customMessage = customMessage
            self.customSMSSender = customSMSSender
            self.defineAuthChallenge = defineAuthChallenge
            self.kmsKeyID = kmsKeyID
            self.postAuthentication = postAuthentication
            self.postConfirmation = postConfirmation
            self.preAuthentication = preAuthentication
            self.preSignUp = preSignUp
            self.preTokenGeneration = preTokenGeneration
            self.userMigration = userMigration
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito throws a limit exceeded exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListDevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDevicesInput(limit: \(Swift.String(describing: limit)), paginationToken: \(Swift.String(describing: paginationToken)), accessToken: \"CONTENT_REDACTED\")"}
}

extension ListDevicesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
    }
}

extension ListDevicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list the devices.
public struct ListDevicesInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose list of devices you want to view.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The limit of the device request.
    public var limit: Swift.Int?
    /// The pagination token for the list request.
    public var paginationToken: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.limit = limit
        self.paginationToken = paginationToken
    }
}

struct ListDevicesInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let limit: Swift.Int?
    let paginationToken: Swift.String?
}

extension ListDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension ListDevicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDevicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDevicesOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDevicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDevicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.devices = output.devices
            self.paginationToken = output.paginationToken
        } else {
            self.devices = nil
            self.paginationToken = nil
        }
    }
}

/// Represents the response to list devices.
public struct ListDevicesOutputResponse: Swift.Equatable {
    /// The devices returned in the list devices response.
    public var devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    /// The pagination token for the list device response.
    public var paginationToken: Swift.String?

    public init (
        devices: [CognitoIdentityProviderClientTypes.DeviceType]? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.devices = devices
        self.paginationToken = paginationToken
    }
}

struct ListDevicesOutputResponseBody: Swift.Equatable {
    let devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    let paginationToken: Swift.String?
}

extension ListDevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devices = "Devices"
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devicesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.DeviceType?].self, forKey: .devices)
        var devicesDecoded0:[CognitoIdentityProviderClientTypes.DeviceType]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [CognitoIdentityProviderClientTypes.DeviceType]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension ListGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGroupsInput: Swift.Equatable {
    /// The limit of the request to list groups.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

struct ListGroupsInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groups = output.groups
            self.nextToken = output.nextToken
        } else {
            self.groups = nil
            self.nextToken = nil
        }
    }
}

public struct ListGroupsOutputResponse: Swift.Equatable {
    /// The group objects for the groups.
    public var groups: [CognitoIdentityProviderClientTypes.GroupType]?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init (
        groups: [CognitoIdentityProviderClientTypes.GroupType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

struct ListGroupsOutputResponseBody: Swift.Equatable {
    let groups: [CognitoIdentityProviderClientTypes.GroupType]?
    let nextToken: Swift.String?
}

extension ListGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.GroupType?].self, forKey: .groups)
        var groupsDecoded0:[CognitoIdentityProviderClientTypes.GroupType]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [CognitoIdentityProviderClientTypes.GroupType]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentityProvidersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListIdentityProvidersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListIdentityProvidersInput: Swift.Equatable {
    /// The maximum number of IdPs to return.
    public var maxResults: Swift.Int?
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

struct ListIdentityProvidersInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListIdentityProvidersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentityProvidersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIdentityProvidersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIdentityProvidersOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentityProvidersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIdentityProvidersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.providers = output.providers
        } else {
            self.nextToken = nil
            self.providers = nil
        }
    }
}

public struct ListIdentityProvidersOutputResponse: Swift.Equatable {
    /// A pagination token.
    public var nextToken: Swift.String?
    /// A list of IdP objects.
    /// This member is required.
    public var providers: [CognitoIdentityProviderClientTypes.ProviderDescription]?

    public init (
        nextToken: Swift.String? = nil,
        providers: [CognitoIdentityProviderClientTypes.ProviderDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.providers = providers
    }
}

struct ListIdentityProvidersOutputResponseBody: Swift.Equatable {
    let providers: [CognitoIdentityProviderClientTypes.ProviderDescription]?
    let nextToken: Swift.String?
}

extension ListIdentityProvidersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case providers = "Providers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providersContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ProviderDescription?].self, forKey: .providers)
        var providersDecoded0:[CognitoIdentityProviderClientTypes.ProviderDescription]? = nil
        if let providersContainer = providersContainer {
            providersDecoded0 = [CognitoIdentityProviderClientTypes.ProviderDescription]()
            for structure0 in providersContainer {
                if let structure0 = structure0 {
                    providersDecoded0?.append(structure0)
                }
            }
        }
        providers = providersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListResourceServersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListResourceServersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListResourceServersInput: Swift.Equatable {
    /// The maximum number of resource servers to return.
    public var maxResults: Swift.Int
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

struct ListResourceServersInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListResourceServersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListResourceServersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListResourceServersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListResourceServersOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListResourceServersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListResourceServersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceServers = output.resourceServers
        } else {
            self.nextToken = nil
            self.resourceServers = nil
        }
    }
}

public struct ListResourceServersOutputResponse: Swift.Equatable {
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The resource servers.
    /// This member is required.
    public var resourceServers: [CognitoIdentityProviderClientTypes.ResourceServerType]?

    public init (
        nextToken: Swift.String? = nil,
        resourceServers: [CognitoIdentityProviderClientTypes.ResourceServerType]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceServers = resourceServers
    }
}

struct ListResourceServersOutputResponseBody: Swift.Equatable {
    let resourceServers: [CognitoIdentityProviderClientTypes.ResourceServerType]?
    let nextToken: Swift.String?
}

extension ListResourceServersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceServers = "ResourceServers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceServersContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ResourceServerType?].self, forKey: .resourceServers)
        var resourceServersDecoded0:[CognitoIdentityProviderClientTypes.ResourceServerType]? = nil
        if let resourceServersContainer = resourceServersContainer {
            resourceServersDecoded0 = [CognitoIdentityProviderClientTypes.ResourceServerType]()
            for structure0 in resourceServersContainer {
                if let structure0 = structure0 {
                    resourceServersDecoded0?.append(structure0)
                }
            }
        }
        resourceServers = resourceServersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags that are assigned to the user pool.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in tagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    tagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListUserImportJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListUserImportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list the user import jobs.
public struct ListUserImportJobsInput: Swift.Equatable {
    /// The maximum number of import jobs you want the request to return.
    /// This member is required.
    public var maxResults: Swift.Int
    /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
    public var paginationToken: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
    }
}

struct ListUserImportJobsInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let maxResults: Swift.Int
    let paginationToken: Swift.String?
}

extension ListUserImportJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension ListUserImportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUserImportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUserImportJobsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserImportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUserImportJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.userImportJobs = output.userImportJobs
        } else {
            self.paginationToken = nil
            self.userImportJobs = nil
        }
    }
}

/// Represents the response from the server to the request to list the user import jobs.
public struct ListUserImportJobsOutputResponse: Swift.Equatable {
    /// An identifier that can be used to return the next set of user import jobs in the list.
    public var paginationToken: Swift.String?
    /// The user import jobs.
    public var userImportJobs: [CognitoIdentityProviderClientTypes.UserImportJobType]?

    public init (
        paginationToken: Swift.String? = nil,
        userImportJobs: [CognitoIdentityProviderClientTypes.UserImportJobType]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.userImportJobs = userImportJobs
    }
}

struct ListUserImportJobsOutputResponseBody: Swift.Equatable {
    let userImportJobs: [CognitoIdentityProviderClientTypes.UserImportJobType]?
    let paginationToken: Swift.String?
}

extension ListUserImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case userImportJobs = "UserImportJobs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userImportJobsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UserImportJobType?].self, forKey: .userImportJobs)
        var userImportJobsDecoded0:[CognitoIdentityProviderClientTypes.UserImportJobType]? = nil
        if let userImportJobsContainer = userImportJobsContainer {
            userImportJobsDecoded0 = [CognitoIdentityProviderClientTypes.UserImportJobType]()
            for structure0 in userImportJobsContainer {
                if let structure0 = structure0 {
                    userImportJobsDecoded0?.append(structure0)
                }
            }
        }
        userImportJobs = userImportJobsDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension ListUserPoolClientsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListUserPoolClientsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list the user pool clients.
public struct ListUserPoolClientsInput: Swift.Equatable {
    /// The maximum number of results you want the request to return when listing the user pool clients.
    public var maxResults: Swift.Int
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool where you want to list user pool clients.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

struct ListUserPoolClientsInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListUserPoolClientsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUserPoolClientsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUserPoolClientsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUserPoolClientsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserPoolClientsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUserPoolClientsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userPoolClients = output.userPoolClients
        } else {
            self.nextToken = nil
            self.userPoolClients = nil
        }
    }
}

/// Represents the response from the server that lists user pool clients.
public struct ListUserPoolClientsOutputResponse: Swift.Equatable {
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool clients in the response that lists user pool clients.
    public var userPoolClients: [CognitoIdentityProviderClientTypes.UserPoolClientDescription]?

    public init (
        nextToken: Swift.String? = nil,
        userPoolClients: [CognitoIdentityProviderClientTypes.UserPoolClientDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.userPoolClients = userPoolClients
    }
}

struct ListUserPoolClientsOutputResponseBody: Swift.Equatable {
    let userPoolClients: [CognitoIdentityProviderClientTypes.UserPoolClientDescription]?
    let nextToken: Swift.String?
}

extension ListUserPoolClientsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userPoolClients = "UserPoolClients"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolClientsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UserPoolClientDescription?].self, forKey: .userPoolClients)
        var userPoolClientsDecoded0:[CognitoIdentityProviderClientTypes.UserPoolClientDescription]? = nil
        if let userPoolClientsContainer = userPoolClientsContainer {
            userPoolClientsDecoded0 = [CognitoIdentityProviderClientTypes.UserPoolClientDescription]()
            for structure0 in userPoolClientsContainer {
                if let structure0 = structure0 {
                    userPoolClientsDecoded0?.append(structure0)
                }
            }
        }
        userPoolClients = userPoolClientsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUserPoolsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListUserPoolsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list user pools.
public struct ListUserPoolsInput: Swift.Equatable {
    /// The maximum number of results you want the request to return when listing the user pools.
    /// This member is required.
    public var maxResults: Swift.Int
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListUserPoolsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int
}

extension ListUserPoolsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}

extension ListUserPoolsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUserPoolsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUserPoolsOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserPoolsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUserPoolsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userPools = output.userPools
        } else {
            self.nextToken = nil
            self.userPools = nil
        }
    }
}

/// Represents the response to list user pools.
public struct ListUserPoolsOutputResponse: Swift.Equatable {
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pools from the response to list users.
    public var userPools: [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]?

    public init (
        nextToken: Swift.String? = nil,
        userPools: [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]? = nil
    )
    {
        self.nextToken = nextToken
        self.userPools = userPools
    }
}

struct ListUserPoolsOutputResponseBody: Swift.Equatable {
    let userPools: [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]?
    let nextToken: Swift.String?
}

extension ListUserPoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userPools = "UserPools"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UserPoolDescriptionType?].self, forKey: .userPools)
        var userPoolsDecoded0:[CognitoIdentityProviderClientTypes.UserPoolDescriptionType]? = nil
        if let userPoolsContainer = userPoolsContainer {
            userPoolsDecoded0 = [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]()
            for structure0 in userPoolsContainer {
                if let structure0 = structure0 {
                    userPoolsDecoded0?.append(structure0)
                }
            }
        }
        userPools = userPoolsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUsersInGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListUsersInGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListUsersInGroupInput: Swift.Equatable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The limit of the request to list users.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        groupName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

struct ListUsersInGroupInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let groupName: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListUsersInGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUsersInGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUsersInGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUsersInGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUsersInGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUsersInGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.users = output.users
        } else {
            self.nextToken = nil
            self.users = nil
        }
    }
}

public struct ListUsersInGroupOutputResponse: Swift.Equatable {
    /// An identifier that you can use in a later request to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The users returned in the request to list users.
    public var users: [CognitoIdentityProviderClientTypes.UserType]?

    public init (
        nextToken: Swift.String? = nil,
        users: [CognitoIdentityProviderClientTypes.UserType]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

struct ListUsersInGroupOutputResponseBody: Swift.Equatable {
    let users: [CognitoIdentityProviderClientTypes.UserType]?
    let nextToken: Swift.String?
}

extension ListUsersInGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case users = "Users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usersContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UserType?].self, forKey: .users)
        var usersDecoded0:[CognitoIdentityProviderClientTypes.UserType]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [CognitoIdentityProviderClientTypes.UserType]()
            for structure0 in usersContainer {
                if let structure0 = structure0 {
                    usersDecoded0?.append(structure0)
                }
            }
        }
        users = usersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUsersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case filter = "Filter"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenametype0 in attributesToGet {
                try attributesToGetContainer.encode(attributenametype0)
            }
        }
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension ListUsersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to list users.
public struct ListUsersInput: Swift.Equatable {
    /// An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.
    public var attributesToGet: [Swift.String]?
    /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".
    ///
    /// * AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.
    ///
    /// * Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".
    ///
    /// * AttributeValue: The attribute value that must be matched for each user.
    ///
    ///
    /// If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:
    ///
    /// * username (case-sensitive)
    ///
    /// * email
    ///
    /// * phone_number
    ///
    /// * name
    ///
    /// * given_name
    ///
    /// * family_name
    ///
    /// * preferred_username
    ///
    /// * cognito:user_status (called Status in the Console) (case-insensitive)
    ///
    /// * status (called Enabled in the Console) (case-sensitive)
    ///
    /// * sub
    ///
    ///
    /// Custom attributes aren't searchable. You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the --query parameter of the list-users action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result. For more information about server-side and client-side filtering, see [FilteringCLI output](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html) in the [Command Line Interface User Guide](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html). For more information, see [Searching for Users Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api) and [Examples of Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples) in the Amazon Cognito Developer Guide.
    public var filter: Swift.String?
    /// Maximum number of users to be returned.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var paginationToken: Swift.String?
    /// The user pool ID for the user pool on which the search should be performed.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        attributesToGet: [Swift.String]? = nil,
        filter: Swift.String? = nil,
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.filter = filter
        self.limit = limit
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
    }
}

struct ListUsersInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let attributesToGet: [Swift.String]?
    let limit: Swift.Int?
    let paginationToken: Swift.String?
    let filter: Swift.String?
}

extension ListUsersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case filter = "Filter"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension ListUsersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUsersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUsersOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUsersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUsersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.users = output.users
        } else {
            self.paginationToken = nil
            self.users = nil
        }
    }
}

/// The response from the request to list users.
public struct ListUsersOutputResponse: Swift.Equatable {
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var paginationToken: Swift.String?
    /// The users returned in the request to list users.
    public var users: [CognitoIdentityProviderClientTypes.UserType]?

    public init (
        paginationToken: Swift.String? = nil,
        users: [CognitoIdentityProviderClientTypes.UserType]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.users = users
    }
}

struct ListUsersOutputResponseBody: Swift.Equatable {
    let users: [CognitoIdentityProviderClientTypes.UserType]?
    let paginationToken: Swift.String?
}

extension ListUsersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case users = "Users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usersContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UserType?].self, forKey: .users)
        var usersDecoded0:[CognitoIdentityProviderClientTypes.UserType]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [CognitoIdentityProviderClientTypes.UserType]()
            for structure0 in usersContainer {
                if let structure0 = structure0 {
                    usersDecoded0?.append(structure0)
                }
            }
        }
        users = usersDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension MFAMethodNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MFAMethodNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.
public struct MFAMethodNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito throws an MFA method not found exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MFAMethodNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MFAMethodNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.MFAOptionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case deliveryMedium = "DeliveryMedium"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let deliveryMedium = self.deliveryMedium {
            try encodeContainer.encode(deliveryMedium.rawValue, forKey: .deliveryMedium)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryMediumDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeliveryMediumType.self, forKey: .deliveryMedium)
        deliveryMedium = deliveryMediumDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// This data type is no longer supported. Applies only to SMS multi-factor authentication (MFA) configurations. Does not apply to time-based one-time password (TOTP) software token MFA configurations.
    public struct MFAOptionType: Swift.Equatable {
        /// The attribute name of the MFA option type. The only valid value is phone_number.
        public var attributeName: Swift.String?
        /// The delivery medium to send the MFA code. You can use this parameter to set only the SMS delivery medium value.
        public var deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType?

        public init (
            attributeName: Swift.String? = nil,
            deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType? = nil
        )
        {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum MessageActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resend
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageActionType] {
            return [
                .resend,
                .suppress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resend: return "RESEND"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageActionType(rawValue: rawValue) ?? MessageActionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.MessageTemplateType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailMessage = "EmailMessage"
        case emailSubject = "EmailSubject"
        case smsMessage = "SMSMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let emailSubject = self.emailSubject {
            try encodeContainer.encode(emailSubject, forKey: .emailSubject)
        }
        if let smsMessage = self.smsMessage {
            try encodeContainer.encode(smsMessage, forKey: .smsMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsMessage)
        smsMessage = smsMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let emailSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailSubject)
        emailSubject = emailSubjectDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The message template structure.
    public struct MessageTemplateType: Swift.Equatable {
        /// The message template for email messages. EmailMessage is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
        public var emailMessage: Swift.String?
        /// The subject line for email messages. EmailSubject is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
        public var emailSubject: Swift.String?
        /// The message template for SMS messages.
        public var smsMessage: Swift.String?

        public init (
            emailMessage: Swift.String? = nil,
            emailSubject: Swift.String? = nil,
            smsMessage: Swift.String? = nil
        )
        {
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
            self.smsMessage = smsMessage
        }
    }

}

extension CognitoIdentityProviderClientTypes.NewDeviceMetadataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceGroupKey = "DeviceGroupKey"
        case deviceKey = "DeviceKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceGroupKey = self.deviceGroupKey {
            try encodeContainer.encode(deviceGroupKey, forKey: .deviceGroupKey)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceGroupKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceGroupKey)
        deviceGroupKey = deviceGroupKeyDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The new device metadata type.
    public struct NewDeviceMetadataType: Swift.Equatable {
        /// The device group key.
        public var deviceGroupKey: Swift.String?
        /// The device key.
        public var deviceKey: Swift.String?

        public init (
            deviceGroupKey: Swift.String? = nil,
            deviceKey: Swift.String? = nil
        )
        {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }
    }

}

extension NotAuthorizedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotAuthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user isn't authorized.
public struct NotAuthorizedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the Amazon Cognito service returns a not authorized exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotAuthorizedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotAuthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.NotifyConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockEmail = "BlockEmail"
        case from = "From"
        case mfaEmail = "MfaEmail"
        case noActionEmail = "NoActionEmail"
        case replyTo = "ReplyTo"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockEmail = self.blockEmail {
            try encodeContainer.encode(blockEmail, forKey: .blockEmail)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let mfaEmail = self.mfaEmail {
            try encodeContainer.encode(mfaEmail, forKey: .mfaEmail)
        }
        if let noActionEmail = self.noActionEmail {
            try encodeContainer.encode(noActionEmail, forKey: .noActionEmail)
        }
        if let replyTo = self.replyTo {
            try encodeContainer.encode(replyTo, forKey: .replyTo)
        }
        if let sourceArn = self.sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .from)
        from = fromDecoded
        let replyToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replyTo)
        replyTo = replyToDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let blockEmailDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NotifyEmailType.self, forKey: .blockEmail)
        blockEmail = blockEmailDecoded
        let noActionEmailDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NotifyEmailType.self, forKey: .noActionEmail)
        noActionEmail = noActionEmailDecoded
        let mfaEmailDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NotifyEmailType.self, forKey: .mfaEmail)
        mfaEmail = mfaEmailDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The notify configuration type.
    public struct NotifyConfigurationType: Swift.Equatable {
        /// Email template used when a detected risk event is blocked.
        public var blockEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
        public var from: Swift.String?
        /// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk.
        public var mfaEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The email template used when a detected risk event is allowed.
        public var noActionEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The destination to which the receiver of an email should reply to.
        public var replyTo: Swift.String?
        /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
        /// This member is required.
        public var sourceArn: Swift.String?

        public init (
            blockEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            from: Swift.String? = nil,
            mfaEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            noActionEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            replyTo: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.blockEmail = blockEmail
            self.from = from
            self.mfaEmail = mfaEmail
            self.noActionEmail = noActionEmail
            self.replyTo = replyTo
            self.sourceArn = sourceArn
        }
    }

}

extension CognitoIdentityProviderClientTypes.NotifyEmailType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlBody = "HtmlBody"
        case subject = "Subject"
        case textBody = "TextBody"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let htmlBody = self.htmlBody {
            try encodeContainer.encode(htmlBody, forKey: .htmlBody)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let textBody = self.textBody {
            try encodeContainer.encode(textBody, forKey: .textBody)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let htmlBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlBody)
        htmlBody = htmlBodyDecoded
        let textBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textBody)
        textBody = textBodyDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The notify email type.
    public struct NotifyEmailType: Swift.Equatable {
        /// The email HTML body.
        public var htmlBody: Swift.String?
        /// The email subject.
        /// This member is required.
        public var subject: Swift.String?
        /// The email text body.
        public var textBody: Swift.String?

        public init (
            htmlBody: Swift.String? = nil,
            subject: Swift.String? = nil,
            textBody: Swift.String? = nil
        )
        {
            self.htmlBody = htmlBody
            self.subject = subject
            self.textBody = textBody
        }
    }

}

extension CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxValue = "MaxValue"
        case minValue = "MinValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxValue = self.maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = self.minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxValue)
        maxValue = maxValueDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The minimum and maximum values of an attribute that is of the number data type.
    public struct NumberAttributeConstraintsType: Swift.Equatable {
        /// The maximum value of an attribute that is of the number data type.
        public var maxValue: Swift.String?
        /// The minimum value of an attribute that is of the number data type.
        public var minValue: Swift.String?

        public init (
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum OAuthFlowType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clientCredentials
        case code
        case implicit
        case sdkUnknown(Swift.String)

        public static var allCases: [OAuthFlowType] {
            return [
                .clientCredentials,
                .code,
                .implicit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clientCredentials: return "client_credentials"
            case .code: return "code"
            case .implicit: return "implicit"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OAuthFlowType(rawValue: rawValue) ?? OAuthFlowType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.PasswordPolicyType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minimumLength = "MinimumLength"
        case requireLowercase = "RequireLowercase"
        case requireNumbers = "RequireNumbers"
        case requireSymbols = "RequireSymbols"
        case requireUppercase = "RequireUppercase"
        case temporaryPasswordValidityDays = "TemporaryPasswordValidityDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if minimumLength != 0 {
            try encodeContainer.encode(minimumLength, forKey: .minimumLength)
        }
        if requireLowercase != false {
            try encodeContainer.encode(requireLowercase, forKey: .requireLowercase)
        }
        if requireNumbers != false {
            try encodeContainer.encode(requireNumbers, forKey: .requireNumbers)
        }
        if requireSymbols != false {
            try encodeContainer.encode(requireSymbols, forKey: .requireSymbols)
        }
        if requireUppercase != false {
            try encodeContainer.encode(requireUppercase, forKey: .requireUppercase)
        }
        if temporaryPasswordValidityDays != 0 {
            try encodeContainer.encode(temporaryPasswordValidityDays, forKey: .temporaryPasswordValidityDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumLength) ?? 0
        minimumLength = minimumLengthDecoded
        let requireUppercaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireUppercase) ?? false
        requireUppercase = requireUppercaseDecoded
        let requireLowercaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireLowercase) ?? false
        requireLowercase = requireLowercaseDecoded
        let requireNumbersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireNumbers) ?? false
        requireNumbers = requireNumbersDecoded
        let requireSymbolsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireSymbols) ?? false
        requireSymbols = requireSymbolsDecoded
        let temporaryPasswordValidityDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .temporaryPasswordValidityDays) ?? 0
        temporaryPasswordValidityDays = temporaryPasswordValidityDaysDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The password policy type.
    public struct PasswordPolicyType: Swift.Equatable {
        /// The minimum length of the password in the policy that you have set. This value can't be less than 6.
        public var minimumLength: Swift.Int
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public var requireLowercase: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public var requireNumbers: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public var requireSymbols: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public var requireUppercase: Swift.Bool
        /// The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password. When you set TemporaryPasswordValidityDays for a user pool, you can no longer set a value for the legacy UnusedAccountValidityDays parameter in that user pool.
        public var temporaryPasswordValidityDays: Swift.Int

        public init (
            minimumLength: Swift.Int = 0,
            requireLowercase: Swift.Bool = false,
            requireNumbers: Swift.Bool = false,
            requireSymbols: Swift.Bool = false,
            requireUppercase: Swift.Bool = false,
            temporaryPasswordValidityDays: Swift.Int = 0
        )
        {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireNumbers = requireNumbers
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.temporaryPasswordValidityDays = temporaryPasswordValidityDays
        }
    }

}

extension PasswordResetRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PasswordResetRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a password reset is required.
public struct PasswordResetRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when a password reset is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PasswordResetRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PasswordResetRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PreconditionNotMetException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PreconditionNotMetExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a precondition is not met.
public struct PreconditionNotMetException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when a precondition is not met.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PreconditionNotMetExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PreconditionNotMetExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum PreventUserExistenceErrorTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case legacy
        case sdkUnknown(Swift.String)

        public static var allCases: [PreventUserExistenceErrorTypes] {
            return [
                .enabled,
                .legacy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .legacy: return "LEGACY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreventUserExistenceErrorTypes(rawValue: rawValue) ?? PreventUserExistenceErrorTypes.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.ProviderDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case lastModifiedDate = "LastModifiedDate"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderTypeType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for IdP details.
    public struct ProviderDescription: Swift.Equatable {
        /// The date the provider was added to the user pool.
        public var creationDate: ClientRuntime.Date?
        /// The date the provider was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The IdP name.
        public var providerName: Swift.String?
        /// The IdP type.
        public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            providerName: Swift.String? = nil,
            providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil
        )
        {
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.providerName = providerName
            self.providerType = providerType
        }
    }

}

extension CognitoIdentityProviderClientTypes.ProviderUserIdentifierType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case providerAttributeName = "ProviderAttributeName"
        case providerAttributeValue = "ProviderAttributeValue"
        case providerName = "ProviderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let providerAttributeName = self.providerAttributeName {
            try encodeContainer.encode(providerAttributeName, forKey: .providerAttributeName)
        }
        if let providerAttributeValue = self.providerAttributeValue {
            try encodeContainer.encode(providerAttributeValue, forKey: .providerAttributeValue)
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerAttributeName)
        providerAttributeName = providerAttributeNameDecoded
        let providerAttributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerAttributeValue)
        providerAttributeValue = providerAttributeValueDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for information about an IdP for a user pool.
    public struct ProviderUserIdentifierType: Swift.Equatable {
        /// The name of the provider attribute to link to, such as NameID.
        public var providerAttributeName: Swift.String?
        /// The value of the provider attribute to link to, such as xxxxx_account.
        public var providerAttributeValue: Swift.String?
        /// The name of the provider, such as Facebook, Google, or Login with Amazon.
        public var providerName: Swift.String?

        public init (
            providerAttributeName: Swift.String? = nil,
            providerAttributeValue: Swift.String? = nil,
            providerName: Swift.String? = nil
        )
        {
            self.providerAttributeName = providerAttributeName
            self.providerAttributeValue = providerAttributeValue
            self.providerName = providerName
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum RecoveryOptionNameType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adminOnly
        case verifiedEmail
        case verifiedPhoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [RecoveryOptionNameType] {
            return [
                .adminOnly,
                .verifiedEmail,
                .verifiedPhoneNumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adminOnly: return "admin_only"
            case .verifiedEmail: return "verified_email"
            case .verifiedPhoneNumber: return "verified_phone_number"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecoveryOptionNameType(rawValue: rawValue) ?? RecoveryOptionNameType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.RecoveryOptionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case priority = "Priority"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let nameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RecoveryOptionNameType.self, forKey: .name)
        name = nameDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A map containing a priority as a key, and recovery method name as a value.
    public struct RecoveryOptionType: Swift.Equatable {
        /// The recovery method for a user.
        /// This member is required.
        public var name: CognitoIdentityProviderClientTypes.RecoveryOptionNameType?
        /// A positive integer specifying priority of a method with 1 being the highest priority.
        /// This member is required.
        public var priority: Swift.Int

        public init (
            name: CognitoIdentityProviderClientTypes.RecoveryOptionNameType? = nil,
            priority: Swift.Int = 0
        )
        {
            self.name = name
            self.priority = priority
        }
    }

}

extension ResendConfirmationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResendConfirmationCodeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), userContextData: \(Swift.String(describing: userContextData)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension ResendConfirmationCodeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension ResendConfirmationCodeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to resend the confirmation code.
public struct ResendConfirmationCodeInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for ResendConfirmationCode calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username attribute of the user to whom you want to resend a confirmation code.
    /// This member is required.
    public var username: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

struct ResendConfirmationCodeInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let secretHash: Swift.String?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let username: Swift.String?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension ResendConfirmationCodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let secretHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretHash)
        secretHash = secretHashDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension ResendConfirmationCodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResendConfirmationCodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ResendConfirmationCodeOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResendConfirmationCodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResendConfirmationCodeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeDeliveryDetails = output.codeDeliveryDetails
        } else {
            self.codeDeliveryDetails = nil
        }
    }
}

/// The response from the server when Amazon Cognito makes the request to resend a confirmation code.
public struct ResendConfirmationCodeOutputResponse: Swift.Equatable {
    /// The code delivery details returned by the server in response to the request to resend the confirmation code.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init (
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

struct ResendConfirmationCodeOutputResponseBody: Swift.Equatable {
    let codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
}

extension ResendConfirmationCodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeDeliveryDetails = "CodeDeliveryDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDeliveryDetailsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.self, forKey: .codeDeliveryDetails)
        codeDeliveryDetails = codeDeliveryDetailsDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the Amazon Cognito service can't find the requested resource.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the Amazon Cognito service returns a resource not found exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.ResourceServerScopeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scopeDescription = "ScopeDescription"
        case scopeName = "ScopeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scopeDescription = self.scopeDescription {
            try encodeContainer.encode(scopeDescription, forKey: .scopeDescription)
        }
        if let scopeName = self.scopeName {
            try encodeContainer.encode(scopeName, forKey: .scopeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scopeName)
        scopeName = scopeNameDecoded
        let scopeDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scopeDescription)
        scopeDescription = scopeDescriptionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A resource server scope.
    public struct ResourceServerScopeType: Swift.Equatable {
        /// A description of the scope.
        /// This member is required.
        public var scopeDescription: Swift.String?
        /// The name of the scope.
        /// This member is required.
        public var scopeName: Swift.String?

        public init (
            scopeDescription: Swift.String? = nil,
            scopeName: Swift.String? = nil
        )
        {
            self.scopeDescription = scopeDescription
            self.scopeName = scopeName
        }
    }

}

extension CognitoIdentityProviderClientTypes.ResourceServerType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scopes = scopes {
            var scopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scopes)
            for resourceserverscopetype0 in scopes {
                try scopesContainer.encode(resourceserverscopetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ResourceServerScopeType?].self, forKey: .scopes)
        var scopesDecoded0:[CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [CognitoIdentityProviderClientTypes.ResourceServerScopeType]()
            for structure0 in scopesContainer {
                if let structure0 = structure0 {
                    scopesDecoded0?.append(structure0)
                }
            }
        }
        scopes = scopesDecoded0
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for information about a resource server for a user pool.
    public struct ResourceServerType: Swift.Equatable {
        /// The identifier for the resource server.
        public var identifier: Swift.String?
        /// The name of the resource server.
        public var name: Swift.String?
        /// A list of scopes that are defined for the resource server.
        public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
        /// The user pool ID for the user pool that hosts the resource server.
        public var userPoolId: Swift.String?

        public init (
            identifier: Swift.String? = nil,
            name: Swift.String? = nil,
            scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }
    }

}

extension RespondToAuthChallengeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RespondToAuthChallengeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), challengeName: \(Swift.String(describing: challengeName)), challengeResponses: \(Swift.String(describing: challengeResponses)), clientMetadata: \(Swift.String(describing: clientMetadata)), session: \(Swift.String(describing: session)), userContextData: \(Swift.String(describing: userContextData)), clientId: \"CONTENT_REDACTED\")"}
}

extension RespondToAuthChallengeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case session = "Session"
        case userContextData = "UserContextData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let challengeName = self.challengeName {
            try encodeContainer.encode(challengeName.rawValue, forKey: .challengeName)
        }
        if let challengeResponses = challengeResponses {
            var challengeResponsesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .challengeResponses)
            for (dictKey0, challengeResponsesType0) in challengeResponses {
                try challengeResponsesContainer.encode(challengeResponsesType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
    }
}

extension RespondToAuthChallengeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request to respond to an authentication challenge.
public struct RespondToAuthChallengeInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for RespondToAuthChallenge calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The challenge name. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html). ADMIN_NO_SRP_AUTH isn't a valid value.
    /// This member is required.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example: SECRET_HASH (if app client is configured with client secret) applies to all of the inputs that follow (including SOFTWARE_TOKEN_MFA).
    ///
    /// * SMS_MFA: SMS_MFA_CODE, USERNAME.
    ///
    /// * PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME. PASSWORD_VERIFIER requires DEVICE_KEY when you sign in with a remembered device.
    ///
    /// * NEW_PASSWORD_REQUIRED: NEW_PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret). To set any required attributes that Amazon Cognito returned as requiredAttributes in the InitiateAuth response, add a userAttributes.attributename  parameter. This parameter can also set values for writable attributes that aren't required by your user pool. In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In RespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the UpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * SOFTWARE_TOKEN_MFA: USERNAME and SOFTWARE_TOKEN_MFA_CODE are required attributes.
    ///
    /// * DEVICE_SRP_AUTH requires USERNAME, DEVICE_KEY, SRP_A (and SECRET_HASH).
    ///
    /// * DEVICE_PASSWORD_VERIFIER requires everything that PASSWORD_VERIFIER requires, plus DEVICE_KEY.
    ///
    /// * MFA_SETUP requires USERNAME, plus you must use the session value returned by VerifySoftwareToken in the Session parameter.
    public var challengeResponses: [Swift.String:Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: post authentication, pre token generation, define auth challenge, create auth challenge, and verify auth challenge. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeResponses: [Swift.String:Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.session = session
        self.userContextData = userContextData
    }
}

struct RespondToAuthChallengeInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeResponses: [Swift.String:Swift.String]?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension RespondToAuthChallengeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case session = "Session"
        case userContextData = "UserContextData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeResponsesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeResponses)
        var challengeResponsesDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeResponsesContainer = challengeResponsesContainer {
            challengeResponsesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeResponsesContainer {
                if let stringtype0 = stringtype0 {
                    challengeResponsesDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeResponses = challengeResponsesDecoded0
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension RespondToAuthChallengeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondToAuthChallengeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MFAMethodNotFoundException" : self = .mFAMethodNotFoundException(try MFAMethodNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SoftwareTokenMFANotFoundException" : self = .softwareTokenMFANotFoundException(try SoftwareTokenMFANotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RespondToAuthChallengeOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case mFAMethodNotFoundException(MFAMethodNotFoundException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case softwareTokenMFANotFoundException(SoftwareTokenMFANotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondToAuthChallengeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RespondToAuthChallengeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authenticationResult = output.authenticationResult
            self.challengeName = output.challengeName
            self.challengeParameters = output.challengeParameters
            self.session = output.session
        } else {
            self.authenticationResult = nil
            self.challengeName = nil
            self.challengeParameters = nil
            self.session = nil
        }
    }
}

/// The response to respond to the authentication challenge.
public struct RespondToAuthChallengeOutputResponse: Swift.Equatable {
    /// The result returned by the server in response to the request to respond to the authentication challenge.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The challenge name. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html).
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html).
    public var challengeParameters: [Swift.String:Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init (
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

struct RespondToAuthChallengeOutputResponseBody: Swift.Equatable {
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeParameters: [Swift.String:Swift.String]?
    let authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
}

extension RespondToAuthChallengeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationResult = "AuthenticationResult"
        case challengeName = "ChallengeName"
        case challengeParameters = "ChallengeParameters"
        case session = "Session"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeParameters)
        var challengeParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeParametersContainer = challengeParametersContainer {
            challengeParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeParametersContainer {
                if let stringtype0 = stringtype0 {
                    challengeParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeParameters = challengeParametersDecoded0
        let authenticationResultDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AuthenticationResultType.self, forKey: .authenticationResult)
        authenticationResult = authenticationResultDecoded
    }
}

extension RevokeTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RevokeTokenInput(clientId: \"CONTENT_REDACTED\", clientSecret: \"CONTENT_REDACTED\", token: \"CONTENT_REDACTED\")"}
}

extension RevokeTokenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case token = "Token"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientSecret = self.clientSecret {
            try encodeContainer.encode(clientSecret, forKey: .clientSecret)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }
}

extension RevokeTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RevokeTokenInput: Swift.Equatable {
    /// The client ID for the token that you want to revoke.
    /// This member is required.
    public var clientId: Swift.String?
    /// The secret for the client ID. This is required only if the client ID has a secret.
    public var clientSecret: Swift.String?
    /// The refresh token that you want to revoke.
    /// This member is required.
    public var token: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        clientSecret: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.token = token
    }
}

struct RevokeTokenInputBody: Swift.Equatable {
    let token: Swift.String?
    let clientId: Swift.String?
    let clientSecret: Swift.String?
}

extension RevokeTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case token = "Token"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
    }
}

extension RevokeTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RevokeTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedTokenTypeException" : self = .unsupportedTokenTypeException(try UnsupportedTokenTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RevokeTokenOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case tooManyRequestsException(TooManyRequestsException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unsupportedTokenTypeException(UnsupportedTokenTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RevokeTokenOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes.RiskConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
        case clientId = "ClientId"
        case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
        case lastModifiedDate = "LastModifiedDate"
        case riskExceptionConfiguration = "RiskExceptionConfiguration"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountTakeoverRiskConfiguration = self.accountTakeoverRiskConfiguration {
            try encodeContainer.encode(accountTakeoverRiskConfiguration, forKey: .accountTakeoverRiskConfiguration)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let compromisedCredentialsRiskConfiguration = self.compromisedCredentialsRiskConfiguration {
            try encodeContainer.encode(compromisedCredentialsRiskConfiguration, forKey: .compromisedCredentialsRiskConfiguration)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let riskExceptionConfiguration = self.riskExceptionConfiguration {
            try encodeContainer.encode(riskExceptionConfiguration, forKey: .riskExceptionConfiguration)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let compromisedCredentialsRiskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType.self, forKey: .compromisedCredentialsRiskConfiguration)
        compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfigurationDecoded
        let accountTakeoverRiskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType.self, forKey: .accountTakeoverRiskConfiguration)
        accountTakeoverRiskConfiguration = accountTakeoverRiskConfigurationDecoded
        let riskExceptionConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType.self, forKey: .riskExceptionConfiguration)
        riskExceptionConfiguration = riskExceptionConfigurationDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes.RiskConfigurationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RiskConfigurationType(accountTakeoverRiskConfiguration: \(Swift.String(describing: accountTakeoverRiskConfiguration)), compromisedCredentialsRiskConfiguration: \(Swift.String(describing: compromisedCredentialsRiskConfiguration)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), riskExceptionConfiguration: \(Swift.String(describing: riskExceptionConfiguration)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// The risk configuration type.
    public struct RiskConfigurationType: Swift.Equatable {
        /// The account takeover risk configuration object, including the NotifyConfiguration object and Actions to take if there is an account takeover.
        public var accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?
        /// The app client ID.
        public var clientId: Swift.String?
        /// The compromised credentials risk configuration object, including the EventFilter and the EventAction.
        public var compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?
        /// The last modified date.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The configuration to override the risk decision.
        public var riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?
        /// The user pool ID.
        public var userPoolId: Swift.String?

        public init (
            accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType? = nil,
            clientId: Swift.String? = nil,
            compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.lastModifiedDate = lastModifiedDate
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.userPoolId = userPoolId
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum RiskDecisionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accounttakeover
        case block
        case norisk
        case sdkUnknown(Swift.String)

        public static var allCases: [RiskDecisionType] {
            return [
                .accounttakeover,
                .block,
                .norisk,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accounttakeover: return "AccountTakeover"
            case .block: return "Block"
            case .norisk: return "NoRisk"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RiskDecisionType(rawValue: rawValue) ?? RiskDecisionType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockedIPRangeList = "BlockedIPRangeList"
        case skippedIPRangeList = "SkippedIPRangeList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockedIPRangeList = blockedIPRangeList {
            var blockedIPRangeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockedIPRangeList)
            for stringtype0 in blockedIPRangeList {
                try blockedIPRangeListContainer.encode(stringtype0)
            }
        }
        if let skippedIPRangeList = skippedIPRangeList {
            var skippedIPRangeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .skippedIPRangeList)
            for stringtype0 in skippedIPRangeList {
                try skippedIPRangeListContainer.encode(stringtype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockedIPRangeListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .blockedIPRangeList)
        var blockedIPRangeListDecoded0:[Swift.String]? = nil
        if let blockedIPRangeListContainer = blockedIPRangeListContainer {
            blockedIPRangeListDecoded0 = [Swift.String]()
            for string0 in blockedIPRangeListContainer {
                if let string0 = string0 {
                    blockedIPRangeListDecoded0?.append(string0)
                }
            }
        }
        blockedIPRangeList = blockedIPRangeListDecoded0
        let skippedIPRangeListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .skippedIPRangeList)
        var skippedIPRangeListDecoded0:[Swift.String]? = nil
        if let skippedIPRangeListContainer = skippedIPRangeListContainer {
            skippedIPRangeListDecoded0 = [Swift.String]()
            for string0 in skippedIPRangeListContainer {
                if let string0 = string0 {
                    skippedIPRangeListDecoded0?.append(string0)
                }
            }
        }
        skippedIPRangeList = skippedIPRangeListDecoded0
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The type of the configuration to override the risk decision.
    public struct RiskExceptionConfigurationType: Swift.Equatable {
        /// Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
        public var blockedIPRangeList: [Swift.String]?
        /// Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation.
        public var skippedIPRangeList: [Swift.String]?

        public init (
            blockedIPRangeList: [Swift.String]? = nil,
            skippedIPRangeList: [Swift.String]? = nil
        )
        {
            self.blockedIPRangeList = blockedIPRangeList
            self.skippedIPRangeList = skippedIPRangeList
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum RiskLevelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [RiskLevelType] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RiskLevelType(rawValue: rawValue) ?? RiskLevelType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.SMSMfaSettingsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case preferredMfa = "PreferredMfa"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if preferredMfa != false {
            try encodeContainer.encode(preferredMfa, forKey: .preferredMfa)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let preferredMfaDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .preferredMfa) ?? false
        preferredMfa = preferredMfaDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The type used for enabling SMS multi-factor authentication (MFA) at the user level. Phone numbers don't need to be verified to be used for SMS MFA. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you would like MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.
    public struct SMSMfaSettingsType: Swift.Equatable {
        /// Specifies whether SMS text message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.
        public var enabled: Swift.Bool
        /// Specifies whether SMS is the preferred MFA method.
        public var preferredMfa: Swift.Bool

        public init (
            enabled: Swift.Bool = false,
            preferredMfa: Swift.Bool = false
        )
        {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }
    }

}

extension CognitoIdentityProviderClientTypes.SchemaAttributeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDataType = "AttributeDataType"
        case developerOnlyAttribute = "DeveloperOnlyAttribute"
        case mutable = "Mutable"
        case name = "Name"
        case numberAttributeConstraints = "NumberAttributeConstraints"
        case `required` = "Required"
        case stringAttributeConstraints = "StringAttributeConstraints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDataType = self.attributeDataType {
            try encodeContainer.encode(attributeDataType.rawValue, forKey: .attributeDataType)
        }
        if let developerOnlyAttribute = self.developerOnlyAttribute {
            try encodeContainer.encode(developerOnlyAttribute, forKey: .developerOnlyAttribute)
        }
        if let mutable = self.mutable {
            try encodeContainer.encode(mutable, forKey: .mutable)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberAttributeConstraints = self.numberAttributeConstraints {
            try encodeContainer.encode(numberAttributeConstraints, forKey: .numberAttributeConstraints)
        }
        if let `required` = self.`required` {
            try encodeContainer.encode(`required`, forKey: .`required`)
        }
        if let stringAttributeConstraints = self.stringAttributeConstraints {
            try encodeContainer.encode(stringAttributeConstraints, forKey: .stringAttributeConstraints)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributeDataTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AttributeDataType.self, forKey: .attributeDataType)
        attributeDataType = attributeDataTypeDecoded
        let developerOnlyAttributeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .developerOnlyAttribute)
        developerOnlyAttribute = developerOnlyAttributeDecoded
        let mutableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .mutable)
        mutable = mutableDecoded
        let requiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .required)
        `required` = requiredDecoded
        let numberAttributeConstraintsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType.self, forKey: .numberAttributeConstraints)
        numberAttributeConstraints = numberAttributeConstraintsDecoded
        let stringAttributeConstraintsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.StringAttributeConstraintsType.self, forKey: .stringAttributeConstraints)
        stringAttributeConstraints = stringAttributeConstraintsDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Contains information about the schema attribute.
    public struct SchemaAttributeType: Swift.Equatable {
        /// The attribute data type.
        public var attributeDataType: CognitoIdentityProviderClientTypes.AttributeDataType?
        /// You should use [WriteAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes) in the user pool client to control how attributes can be mutated for new use cases instead of using DeveloperOnlyAttribute. Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, DeveloperOnlyAttribute can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.
        public var developerOnlyAttribute: Swift.Bool?
        /// Specifies whether the value of the attribute can be changed. For any user pool attribute that is mapped to an IdP attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see [Specifying Identity Provider Attribute Mappings for Your User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
        public var mutable: Swift.Bool?
        /// A schema attribute of the name type.
        public var name: Swift.String?
        /// Specifies the constraints for an attribute of the number type.
        public var numberAttributeConstraints: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.
        public var `required`: Swift.Bool?
        /// Specifies the constraints for an attribute of the string type.
        public var stringAttributeConstraints: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType?

        public init (
            attributeDataType: CognitoIdentityProviderClientTypes.AttributeDataType? = nil,
            developerOnlyAttribute: Swift.Bool? = nil,
            mutable: Swift.Bool? = nil,
            name: Swift.String? = nil,
            numberAttributeConstraints: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType? = nil,
            `required`: Swift.Bool? = nil,
            stringAttributeConstraints: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType? = nil
        )
        {
            self.attributeDataType = attributeDataType
            self.developerOnlyAttribute = developerOnlyAttribute
            self.mutable = mutable
            self.name = name
            self.numberAttributeConstraints = numberAttributeConstraints
            self.`required` = `required`
            self.stringAttributeConstraints = stringAttributeConstraints
        }
    }

}

extension ScopeDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ScopeDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the specified scope doesn't exist.
public struct ScopeDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ScopeDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScopeDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SetRiskConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetRiskConfigurationInput(accountTakeoverRiskConfiguration: \(Swift.String(describing: accountTakeoverRiskConfiguration)), compromisedCredentialsRiskConfiguration: \(Swift.String(describing: compromisedCredentialsRiskConfiguration)), riskExceptionConfiguration: \(Swift.String(describing: riskExceptionConfiguration)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension SetRiskConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
        case clientId = "ClientId"
        case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
        case riskExceptionConfiguration = "RiskExceptionConfiguration"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountTakeoverRiskConfiguration = self.accountTakeoverRiskConfiguration {
            try encodeContainer.encode(accountTakeoverRiskConfiguration, forKey: .accountTakeoverRiskConfiguration)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let compromisedCredentialsRiskConfiguration = self.compromisedCredentialsRiskConfiguration {
            try encodeContainer.encode(compromisedCredentialsRiskConfiguration, forKey: .compromisedCredentialsRiskConfiguration)
        }
        if let riskExceptionConfiguration = self.riskExceptionConfiguration {
            try encodeContainer.encode(riskExceptionConfiguration, forKey: .riskExceptionConfiguration)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension SetRiskConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetRiskConfigurationInput: Swift.Equatable {
    /// The account takeover risk configuration.
    public var accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?
    /// The app client ID. If ClientId is null, then the risk configuration is mapped to userPoolId. When the client ID is null, the same risk configuration is applied to all the clients in the userPool. Otherwise, ClientId is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.
    public var clientId: Swift.String?
    /// The compromised credentials risk configuration.
    public var compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?
    /// The configuration to override the risk decision.
    public var riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType? = nil,
        clientId: Swift.String? = nil,
        compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType? = nil,
        riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
        self.clientId = clientId
        self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
        self.riskExceptionConfiguration = riskExceptionConfiguration
        self.userPoolId = userPoolId
    }
}

struct SetRiskConfigurationInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
    let compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?
    let accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?
    let riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?
}

extension SetRiskConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
        case clientId = "ClientId"
        case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
        case riskExceptionConfiguration = "RiskExceptionConfiguration"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let compromisedCredentialsRiskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType.self, forKey: .compromisedCredentialsRiskConfiguration)
        compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfigurationDecoded
        let accountTakeoverRiskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType.self, forKey: .accountTakeoverRiskConfiguration)
        accountTakeoverRiskConfiguration = accountTakeoverRiskConfigurationDecoded
        let riskExceptionConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType.self, forKey: .riskExceptionConfiguration)
        riskExceptionConfiguration = riskExceptionConfigurationDecoded
    }
}

extension SetRiskConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetRiskConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolAddOnNotEnabledException" : self = .userPoolAddOnNotEnabledException(try UserPoolAddOnNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetRiskConfigurationOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userPoolAddOnNotEnabledException(UserPoolAddOnNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetRiskConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetRiskConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.riskConfiguration = output.riskConfiguration
        } else {
            self.riskConfiguration = nil
        }
    }
}

public struct SetRiskConfigurationOutputResponse: Swift.Equatable {
    /// The risk configuration.
    /// This member is required.
    public var riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?

    public init (
        riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType? = nil
    )
    {
        self.riskConfiguration = riskConfiguration
    }
}

struct SetRiskConfigurationOutputResponseBody: Swift.Equatable {
    let riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?
}

extension SetRiskConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case riskConfiguration = "RiskConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let riskConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskConfigurationType.self, forKey: .riskConfiguration)
        riskConfiguration = riskConfigurationDecoded
    }
}

extension SetUICustomizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUICustomizationInput(css: \(Swift.String(describing: css)), imageFile: \(Swift.String(describing: imageFile)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension SetUICustomizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case css = "CSS"
        case clientId = "ClientId"
        case imageFile = "ImageFile"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let css = self.css {
            try encodeContainer.encode(css, forKey: .css)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let imageFile = self.imageFile {
            try encodeContainer.encode(imageFile.base64EncodedString(), forKey: .imageFile)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension SetUICustomizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetUICustomizationInput: Swift.Equatable {
    /// The client ID for the client app.
    public var clientId: Swift.String?
    /// The CSS values in the UI customization.
    public var css: Swift.String?
    /// The uploaded logo image for the UI customization.
    public var imageFile: ClientRuntime.Data?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        clientId: Swift.String? = nil,
        css: Swift.String? = nil,
        imageFile: ClientRuntime.Data? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.css = css
        self.imageFile = imageFile
        self.userPoolId = userPoolId
    }
}

struct SetUICustomizationInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
    let css: Swift.String?
    let imageFile: ClientRuntime.Data?
}

extension SetUICustomizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case css = "CSS"
        case clientId = "ClientId"
        case imageFile = "ImageFile"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let cssDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .css)
        css = cssDecoded
        let imageFileDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .imageFile)
        imageFile = imageFileDecoded
    }
}

extension SetUICustomizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetUICustomizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetUICustomizationOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetUICustomizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetUICustomizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.uiCustomization = output.uiCustomization
        } else {
            self.uiCustomization = nil
        }
    }
}

public struct SetUICustomizationOutputResponse: Swift.Equatable {
    /// The UI customization information.
    /// This member is required.
    public var uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?

    public init (
        uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType? = nil
    )
    {
        self.uiCustomization = uiCustomization
    }
}

struct SetUICustomizationOutputResponseBody: Swift.Equatable {
    let uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?
}

extension SetUICustomizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case uiCustomization = "UICustomization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uiCustomizationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UICustomizationType.self, forKey: .uiCustomization)
        uiCustomization = uiCustomizationDecoded
    }
}

extension SetUserMFAPreferenceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUserMFAPreferenceInput(smsMfaSettings: \(Swift.String(describing: smsMfaSettings)), softwareTokenMfaSettings: \(Swift.String(describing: softwareTokenMfaSettings)), accessToken: \"CONTENT_REDACTED\")"}
}

extension SetUserMFAPreferenceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case smsMfaSettings = "SMSMfaSettings"
        case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let smsMfaSettings = self.smsMfaSettings {
            try encodeContainer.encode(smsMfaSettings, forKey: .smsMfaSettings)
        }
        if let softwareTokenMfaSettings = self.softwareTokenMfaSettings {
            try encodeContainer.encode(softwareTokenMfaSettings, forKey: .softwareTokenMfaSettings)
        }
    }
}

extension SetUserMFAPreferenceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetUserMFAPreferenceInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The SMS text message multi-factor authentication (MFA) settings.
    public var smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    /// The time-based one-time password (TOTP) software token MFA settings.
    public var softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?

    public init (
        accessToken: Swift.String? = nil,
        smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType? = nil
    )
    {
        self.accessToken = accessToken
        self.smsMfaSettings = smsMfaSettings
        self.softwareTokenMfaSettings = softwareTokenMfaSettings
    }
}

struct SetUserMFAPreferenceInputBody: Swift.Equatable {
    let smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    let softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?
    let accessToken: Swift.String?
}

extension SetUserMFAPreferenceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case smsMfaSettings = "SMSMfaSettings"
        case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMfaSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SMSMfaSettingsType.self, forKey: .smsMfaSettings)
        smsMfaSettings = smsMfaSettingsDecoded
        let softwareTokenMfaSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType.self, forKey: .softwareTokenMfaSettings)
        softwareTokenMfaSettings = softwareTokenMfaSettingsDecoded
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}

extension SetUserMFAPreferenceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetUserMFAPreferenceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetUserMFAPreferenceOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetUserMFAPreferenceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetUserMFAPreferenceOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetUserPoolMfaConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaConfiguration = "MfaConfiguration"
        case smsMfaConfiguration = "SmsMfaConfiguration"
        case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mfaConfiguration = self.mfaConfiguration {
            try encodeContainer.encode(mfaConfiguration.rawValue, forKey: .mfaConfiguration)
        }
        if let smsMfaConfiguration = self.smsMfaConfiguration {
            try encodeContainer.encode(smsMfaConfiguration, forKey: .smsMfaConfiguration)
        }
        if let softwareTokenMfaConfiguration = self.softwareTokenMfaConfiguration {
            try encodeContainer.encode(softwareTokenMfaConfiguration, forKey: .softwareTokenMfaConfiguration)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension SetUserPoolMfaConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetUserPoolMfaConfigInput: Swift.Equatable {
    /// The MFA configuration. If you set the MfaConfiguration value to ‘ON’, only users who have set up an MFA factor can sign in. To learn more, see [Adding Multi-Factor Authentication (MFA) to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html). Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor activated.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The SMS text message MFA configuration.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// The software token MFA configuration.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
        self.userPoolId = userPoolId
    }
}

struct SetUserPoolMfaConfigInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    let softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
}

extension SetUserPoolMfaConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaConfiguration = "MfaConfiguration"
        case smsMfaConfiguration = "SmsMfaConfiguration"
        case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let smsMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsMfaConfigType.self, forKey: .smsMfaConfiguration)
        smsMfaConfiguration = smsMfaConfigurationDecoded
        let softwareTokenMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.self, forKey: .softwareTokenMfaConfiguration)
        softwareTokenMfaConfiguration = softwareTokenMfaConfigurationDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
    }
}

extension SetUserPoolMfaConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetUserPoolMfaConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetUserPoolMfaConfigOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetUserPoolMfaConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetUserPoolMfaConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mfaConfiguration = output.mfaConfiguration
            self.smsMfaConfiguration = output.smsMfaConfiguration
            self.softwareTokenMfaConfiguration = output.softwareTokenMfaConfiguration
        } else {
            self.mfaConfiguration = nil
            self.smsMfaConfiguration = nil
            self.softwareTokenMfaConfiguration = nil
        }
    }
}

public struct SetUserPoolMfaConfigOutputResponse: Swift.Equatable {
    /// The MFA configuration. Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor enabled.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The SMS text message MFA configuration.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// The software token MFA configuration.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?

    public init (
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil
    )
    {
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
    }
}

struct SetUserPoolMfaConfigOutputResponseBody: Swift.Equatable {
    let smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    let softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
}

extension SetUserPoolMfaConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mfaConfiguration = "MfaConfiguration"
        case smsMfaConfiguration = "SmsMfaConfiguration"
        case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsMfaConfigType.self, forKey: .smsMfaConfiguration)
        smsMfaConfiguration = smsMfaConfigurationDecoded
        let softwareTokenMfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.self, forKey: .softwareTokenMfaConfiguration)
        softwareTokenMfaConfiguration = softwareTokenMfaConfigurationDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
    }
}

extension SetUserSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUserSettingsInput(mfaOptions: \(Swift.String(describing: mfaOptions)), accessToken: \"CONTENT_REDACTED\")"}
}

extension SetUserSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case mfaOptions = "MFAOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let mfaOptions = mfaOptions {
            var mfaOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mfaOptions)
            for mfaoptiontype0 in mfaOptions {
                try mfaOptionsContainer.encode(mfaoptiontype0)
            }
        }
    }
}

extension SetUserSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to set user settings.
public struct SetUserSettingsInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose user settings you want to configure.
    /// This member is required.
    public var accessToken: Swift.String?
    /// You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    /// This member is required.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?

    public init (
        accessToken: Swift.String? = nil,
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
    )
    {
        self.accessToken = accessToken
        self.mfaOptions = mfaOptions
    }
}

struct SetUserSettingsInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
}

extension SetUserSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case mfaOptions = "MFAOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let mfaOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mfaOptions)
        var mfaOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mfaOptionsContainer = mfaOptionsContainer {
            mfaOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mfaOptionsContainer {
                if let structure0 = structure0 {
                    mfaOptionsDecoded0?.append(structure0)
                }
            }
        }
        mfaOptions = mfaOptionsDecoded0
    }
}

extension SetUserSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetUserSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetUserSettingsOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetUserSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response from the server for a set user settings request.
public struct SetUserSettingsOutputResponse: Swift.Equatable {

    public init () { }
}

extension SignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignUpInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), userContextData: \(Swift.String(describing: userContextData)), validationData: \(Swift.String(describing: validationData)), clientId: \"CONTENT_REDACTED\", password: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension SignUpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case password = "Password"
        case secretHash = "SecretHash"
        case userAttributes = "UserAttributes"
        case userContextData = "UserContextData"
        case username = "Username"
        case validationData = "ValidationData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for attributetype0 in userAttributes {
                try userAttributesContainer.encode(attributetype0)
            }
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
        if let validationData = validationData {
            var validationDataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationData)
            for attributetype0 in validationData {
                try validationDataContainer.encode(attributetype0)
            }
        }
    }
}

extension SignUpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to register a user.
public struct SignUpInput: Swift.Equatable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for SignUp calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the SignUp API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and post confirmation. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your SignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// The password of the user you want to register.
    /// This member is required.
    public var password: Swift.String?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The user name of the user you want to register.
    /// This member is required.
    public var username: Swift.String?
    /// The validation data in the request to register a user.
    public var validationData: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        password: Swift.String? = nil,
        secretHash: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil,
        validationData: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.password = password
        self.secretHash = secretHash
        self.userAttributes = userAttributes
        self.userContextData = userContextData
        self.username = username
        self.validationData = validationData
    }
}

struct SignUpInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let secretHash: Swift.String?
    let username: Swift.String?
    let password: Swift.String?
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let validationData: [CognitoIdentityProviderClientTypes.AttributeType]?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension SignUpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case password = "Password"
        case secretHash = "SecretHash"
        case userAttributes = "UserAttributes"
        case userContextData = "UserContextData"
        case username = "Username"
        case validationData = "ValidationData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let secretHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretHash)
        secretHash = secretHashDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let validationDataContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .validationData)
        var validationDataDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let validationDataContainer = validationDataContainer {
            validationDataDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in validationDataContainer {
                if let structure0 = structure0 {
                    validationDataDecoded0?.append(structure0)
                }
            }
        }
        validationData = validationDataDecoded0
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension SignUpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SignUpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UsernameExistsException" : self = .usernameExistsException(try UsernameExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SignUpOutputError: Swift.Error, Swift.Equatable {
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidPasswordException(InvalidPasswordException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case usernameExistsException(UsernameExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SignUpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SignUpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeDeliveryDetails = output.codeDeliveryDetails
            self.userConfirmed = output.userConfirmed
            self.userSub = output.userSub
        } else {
            self.codeDeliveryDetails = nil
            self.userConfirmed = false
            self.userSub = nil
        }
    }
}

/// The response from the server for a registration request.
public struct SignUpOutputResponse: Swift.Equatable {
    /// The code delivery details returned by the server response to the user registration request.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
    /// A response from the server indicating that a user registration has been confirmed.
    /// This member is required.
    public var userConfirmed: Swift.Bool
    /// The UUID of the authenticated user. This isn't the same as username.
    /// This member is required.
    public var userSub: Swift.String?

    public init (
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil,
        userConfirmed: Swift.Bool = false,
        userSub: Swift.String? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
        self.userConfirmed = userConfirmed
        self.userSub = userSub
    }
}

struct SignUpOutputResponseBody: Swift.Equatable {
    let userConfirmed: Swift.Bool
    let codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
    let userSub: Swift.String?
}

extension SignUpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeDeliveryDetails = "CodeDeliveryDetails"
        case userConfirmed = "UserConfirmed"
        case userSub = "UserSub"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userConfirmedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userConfirmed) ?? false
        userConfirmed = userConfirmedDecoded
        let codeDeliveryDetailsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.self, forKey: .codeDeliveryDetails)
        codeDeliveryDetails = codeDeliveryDetailsDecoded
        let userSubDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userSub)
        userSub = userSubDecoded
    }
}

extension CognitoIdentityProviderClientTypes.SmsConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalId = "ExternalId"
        case snsCallerArn = "SnsCallerArn"
        case snsRegion = "SnsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let snsCallerArn = self.snsCallerArn {
            try encodeContainer.encode(snsCallerArn, forKey: .snsCallerArn)
        }
        if let snsRegion = self.snsRegion {
            try encodeContainer.encode(snsRegion, forKey: .snsRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsCallerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsCallerArn)
        snsCallerArn = snsCallerArnDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let snsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsRegion)
        snsRegion = snsRegionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The SMS configuration type is the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public struct SmsConfigurationType: Swift.Equatable {
        /// The external ID provides additional security for your IAM role. You can use an ExternalId with the IAM role that you use with Amazon SNS to send SMS messages for your user pool. If you provide an ExternalId, your Amazon Cognito user pool includes it in the request to assume your IAM role. You can configure the role trust policy to require that Amazon Cognito, and any principal, provide the ExternalID. If you use the Amazon Cognito Management Console to create a role for SMS multi-factor authentication (MFA), Amazon Cognito creates a role with the required permissions and a trust policy that demonstrates use of the ExternalId. For more information about the ExternalId of a role, see [How to use an external ID when granting access to your Amazon Web Services resources to a third party](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html)
        public var externalId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role in your Amazon Web Services account that Amazon Cognito will use to send SMS messages. SMS messages are subject to a [spending limit](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html).
        /// This member is required.
        public var snsCallerArn: Swift.String?
        /// The Amazon Web Services Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) Amazon Web Services Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
        public var snsRegion: Swift.String?

        public init (
            externalId: Swift.String? = nil,
            snsCallerArn: Swift.String? = nil,
            snsRegion: Swift.String? = nil
        )
        {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
            self.snsRegion = snsRegion
        }
    }

}

extension CognitoIdentityProviderClientTypes.SmsMfaConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let smsAuthenticationMessage = self.smsAuthenticationMessage {
            try encodeContainer.encode(smsAuthenticationMessage, forKey: .smsAuthenticationMessage)
        }
        if let smsConfiguration = self.smsConfiguration {
            try encodeContainer.encode(smsConfiguration, forKey: .smsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The SMS text message multi-factor authentication (MFA) configuration type.
    public struct SmsMfaConfigType: Swift.Equatable {
        /// The SMS authentication message that will be sent to users with the code they must sign in. The message must contain the ‘{####}’ placeholder, which is replaced with the code. If the message isn't included, and default message will be used.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To request Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role that you provide for your Amazon Web Services account.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?

        public init (
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil
        )
        {
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
        }
    }

}

extension SoftwareTokenMFANotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SoftwareTokenMFANotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
public struct SoftwareTokenMFANotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SoftwareTokenMFANotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SoftwareTokenMFANotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The type used for enabling software token MFA at the user pool level.
    public struct SoftwareTokenMfaConfigType: Swift.Equatable {
        /// Specifies whether software token MFA is activated.
        public var enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case preferredMfa = "PreferredMfa"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if preferredMfa != false {
            try encodeContainer.encode(preferredMfa, forKey: .preferredMfa)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let preferredMfaDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .preferredMfa) ?? false
        preferredMfa = preferredMfaDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The type used for enabling software token MFA at the user level. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.
    public struct SoftwareTokenMfaSettingsType: Swift.Equatable {
        /// Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.
        public var enabled: Swift.Bool
        /// Specifies whether software token MFA is the preferred MFA method.
        public var preferredMfa: Swift.Bool

        public init (
            enabled: Swift.Bool = false,
            preferredMfa: Swift.Bool = false
        )
        {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }
    }

}

extension StartUserImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension StartUserImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to start the user import job.
public struct StartUserImportJobInput: Swift.Equatable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

struct StartUserImportJobInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let jobId: Swift.String?
}

extension StartUserImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StartUserImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartUserImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionNotMetException" : self = .preconditionNotMetException(try PreconditionNotMetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartUserImportJobOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case preconditionNotMetException(PreconditionNotMetException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartUserImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartUserImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userImportJob = output.userImportJob
        } else {
            self.userImportJob = nil
        }
    }
}

/// Represents the response from the server to the request to start the user import job.
public struct StartUserImportJobOutputResponse: Swift.Equatable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init (
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

struct StartUserImportJobOutputResponseBody: Swift.Equatable {
    let userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?
}

extension StartUserImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userImportJob = "UserImportJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userImportJobDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserImportJobType.self, forKey: .userImportJob)
        userImportJob = userImportJobDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusType(rawValue: rawValue) ?? StatusType.sdkUnknown(rawValue)
        }
    }
}

extension StopUserImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension StopUserImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to stop the user import job.
public struct StopUserImportJobInput: Swift.Equatable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

struct StopUserImportJobInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let jobId: Swift.String?
}

extension StopUserImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopUserImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopUserImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionNotMetException" : self = .preconditionNotMetException(try PreconditionNotMetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopUserImportJobOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case preconditionNotMetException(PreconditionNotMetException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopUserImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopUserImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userImportJob = output.userImportJob
        } else {
            self.userImportJob = nil
        }
    }
}

/// Represents the response from the server to the request to stop the user import job.
public struct StopUserImportJobOutputResponse: Swift.Equatable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init (
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

struct StopUserImportJobOutputResponseBody: Swift.Equatable {
    let userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?
}

extension StopUserImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userImportJob = "UserImportJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userImportJobDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserImportJobType.self, forKey: .userImportJob)
        userImportJob = userImportJobDecoded
    }
}

extension CognitoIdentityProviderClientTypes.StringAttributeConstraintsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxLength = "MaxLength"
        case minLength = "MinLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxLength = self.maxLength {
            try encodeContainer.encode(maxLength, forKey: .maxLength)
        }
        if let minLength = self.minLength {
            try encodeContainer.encode(minLength, forKey: .minLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minLengthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minLength)
        minLength = minLengthDecoded
        let maxLengthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxLength)
        maxLength = maxLengthDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The constraints associated with a string attribute.
    public struct StringAttributeConstraintsType: Swift.Equatable {
        /// The maximum length.
        public var maxLength: Swift.String?
        /// The minimum length.
        public var minLength: Swift.String?

        public init (
            maxLength: Swift.String? = nil,
            minLength: Swift.String? = nil
        )
        {
            self.maxLength = maxLength
            self.minLength = minLength
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, userPoolTagsType0) in tags {
                try tagsContainer.encode(userPoolTagsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user pool to assign the tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to assign to the user pool.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in tagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    tagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes {
    public enum TimeUnitsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case days
        case hours
        case minutes
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnitsType] {
            return [
                .days,
                .hours,
                .minutes,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .days: return "days"
            case .hours: return "hours"
            case .minutes: return "minutes"
            case .seconds: return "seconds"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimeUnitsType(rawValue: rawValue) ?? TimeUnitsType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.TokenValidityUnitsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case idToken = "IdToken"
        case refreshToken = "RefreshToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken.rawValue, forKey: .accessToken)
        }
        if let idToken = self.idToken {
            try encodeContainer.encode(idToken.rawValue, forKey: .idToken)
        }
        if let refreshToken = self.refreshToken {
            try encodeContainer.encode(refreshToken.rawValue, forKey: .refreshToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let idTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .idToken)
        idToken = idTokenDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The data type TokenValidityUnits specifies the time units you use when you set the duration of ID, access, and refresh tokens.
    public struct TokenValidityUnitsType: Swift.Equatable {
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the AccessTokenValidity parameter. The default AccessTokenValidity time unit is hours.
        public var accessToken: CognitoIdentityProviderClientTypes.TimeUnitsType?
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the IdTokenValidity parameter. The default IdTokenValidity time unit is hours.
        public var idToken: CognitoIdentityProviderClientTypes.TimeUnitsType?
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the RefreshTokenValidity parameter. The default RefreshTokenValidity time unit is days.
        public var refreshToken: CognitoIdentityProviderClientTypes.TimeUnitsType?

        public init (
            accessToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil,
            idToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil,
            refreshToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil
        )
        {
            self.accessToken = accessToken
            self.idToken = idToken
            self.refreshToken = refreshToken
        }
    }

}

extension TooManyFailedAttemptsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyFailedAttemptsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.
public struct TooManyFailedAttemptsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito returns a TooManyFailedAttempts exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyFailedAttemptsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyFailedAttemptsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the user has made too many requests for a given operation.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the Amazon Cognito service returns a too many requests exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UICustomizationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case css = "CSS"
        case cssVersion = "CSSVersion"
        case clientId = "ClientId"
        case creationDate = "CreationDate"
        case imageUrl = "ImageUrl"
        case lastModifiedDate = "LastModifiedDate"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let css = self.css {
            try encodeContainer.encode(css, forKey: .css)
        }
        if let cssVersion = self.cssVersion {
            try encodeContainer.encode(cssVersion, forKey: .cssVersion)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let cssDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .css)
        css = cssDecoded
        let cssVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cssVersion)
        cssVersion = cssVersionDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UICustomizationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UICustomizationType(css: \(Swift.String(describing: css)), cssVersion: \(Swift.String(describing: cssVersion)), creationDate: \(Swift.String(describing: creationDate)), imageUrl: \(Swift.String(describing: imageUrl)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// A container for the UI customization information for a user pool's built-in app UI.
    public struct UICustomizationType: Swift.Equatable {
        /// The client ID for the client app.
        public var clientId: Swift.String?
        /// The creation date for the UI customization.
        public var creationDate: ClientRuntime.Date?
        /// The CSS values in the UI customization.
        public var css: Swift.String?
        /// The CSS version number.
        public var cssVersion: Swift.String?
        /// The logo image for the UI customization.
        public var imageUrl: Swift.String?
        /// The last-modified date for the UI customization.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The user pool ID for the user pool.
        public var userPoolId: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            css: Swift.String? = nil,
            cssVersion: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.creationDate = creationDate
            self.css = css
            self.cssVersion = cssVersion
            self.imageUrl = imageUrl
            self.lastModifiedDate = lastModifiedDate
            self.userPoolId = userPoolId
        }
    }

}

extension UnauthorizedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnauthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Exception that is thrown when the request isn't authorized. This can happen due to an invalid access token in the request.
public struct UnauthorizedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnauthorizedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnauthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnexpectedLambdaException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnexpectedLambdaExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
public struct UnexpectedLambdaException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito returns an unexpected Lambda exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnexpectedLambdaExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnexpectedLambdaExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedIdentityProviderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedIdentityProviderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the specified identifier isn't supported.
public struct UnsupportedIdentityProviderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedIdentityProviderExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedIdentityProviderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Exception that is thrown when you attempt to perform an operation that isn't enabled for the user pool client.
public struct UnsupportedOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedTokenTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedTokenTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Exception that is thrown when an unsupported token is passed to an operation.
public struct UnsupportedTokenTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedTokenTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedTokenTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedUserStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedUserStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because the user is in an unsupported state.
public struct UnsupportedUserStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the user is in an unsupported state.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedUserStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedUserStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeystype0 in tagKeys {
                try tagKeysContainer.encode(tagkeystype0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to remove from the user pool.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateAuthEventFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuthEventFeedbackInput(eventId: \(Swift.String(describing: eventId)), feedbackValue: \(Swift.String(describing: feedbackValue)), userPoolId: \(Swift.String(describing: userPoolId)), feedbackToken: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension UpdateAuthEventFeedbackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId = "EventId"
        case feedbackToken = "FeedbackToken"
        case feedbackValue = "FeedbackValue"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let feedbackToken = self.feedbackToken {
            try encodeContainer.encode(feedbackToken, forKey: .feedbackToken)
        }
        if let feedbackValue = self.feedbackValue {
            try encodeContainer.encode(feedbackValue.rawValue, forKey: .feedbackValue)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

extension UpdateAuthEventFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAuthEventFeedbackInput: Swift.Equatable {
    /// The event ID.
    /// This member is required.
    public var eventId: Swift.String?
    /// The feedback token.
    /// This member is required.
    public var feedbackToken: Swift.String?
    /// The authentication event feedback value.
    /// This member is required.
    public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The user pool username.
    /// This member is required.
    public var username: Swift.String?

    public init (
        eventId: Swift.String? = nil,
        feedbackToken: Swift.String? = nil,
        feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.eventId = eventId
        self.feedbackToken = feedbackToken
        self.feedbackValue = feedbackValue
        self.userPoolId = userPoolId
        self.username = username
    }
}

struct UpdateAuthEventFeedbackInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let username: Swift.String?
    let eventId: Swift.String?
    let feedbackToken: Swift.String?
    let feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
}

extension UpdateAuthEventFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId = "EventId"
        case feedbackToken = "FeedbackToken"
        case feedbackValue = "FeedbackValue"
        case userPoolId = "UserPoolId"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let feedbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackToken)
        feedbackToken = feedbackTokenDecoded
        let feedbackValueDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.FeedbackValueType.self, forKey: .feedbackValue)
        feedbackValue = feedbackValueDecoded
    }
}

extension UpdateAuthEventFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAuthEventFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolAddOnNotEnabledException" : self = .userPoolAddOnNotEnabledException(try UserPoolAddOnNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAuthEventFeedbackOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotFoundException(UserNotFoundException)
    case userPoolAddOnNotEnabledException(UserPoolAddOnNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAuthEventFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAuthEventFeedbackOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDeviceStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDeviceStatusInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceRememberedStatus: \(Swift.String(describing: deviceRememberedStatus)), accessToken: \"CONTENT_REDACTED\")"}
}

extension UpdateDeviceStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
        case deviceRememberedStatus = "DeviceRememberedStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let deviceKey = self.deviceKey {
            try encodeContainer.encode(deviceKey, forKey: .deviceKey)
        }
        if let deviceRememberedStatus = self.deviceRememberedStatus {
            try encodeContainer.encode(deviceRememberedStatus.rawValue, forKey: .deviceRememberedStatus)
        }
    }
}

extension UpdateDeviceStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to update the device status.
public struct UpdateDeviceStatusInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose device status you want to update.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The status of whether a device is remembered.
    public var deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?

    public init (
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil,
        deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
        self.deviceRememberedStatus = deviceRememberedStatus
    }
}

struct UpdateDeviceStatusInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let deviceKey: Swift.String?
    let deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?
}

extension UpdateDeviceStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case deviceKey = "DeviceKey"
        case deviceRememberedStatus = "DeviceRememberedStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let deviceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceRememberedStatusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceRememberedStatusType.self, forKey: .deviceRememberedStatus)
        deviceRememberedStatus = deviceRememberedStatusDecoded
    }
}

extension UpdateDeviceStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDeviceStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDeviceStatusOutputError: Swift.Error, Swift.Equatable {
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDeviceStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The response to the request to update the device status.
public struct UpdateDeviceStatusOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case groupName = "GroupName"
        case precedence = "Precedence"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let precedence = self.precedence {
            try encodeContainer.encode(precedence, forKey: .precedence)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension UpdateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGroupInput: Swift.Equatable {
    /// A string containing the new description of the group.
    public var description: Swift.String?
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The new precedence value for the group. For more information about this parameter, see [CreateGroup](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateGroup.html).
    public var precedence: Swift.Int?
    /// The new role Amazon Resource Name (ARN) for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
    public var roleArn: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        description: Swift.String? = nil,
        groupName: Swift.String? = nil,
        precedence: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.description = description
        self.groupName = groupName
        self.precedence = precedence
        self.roleArn = roleArn
        self.userPoolId = userPoolId
    }
}

struct UpdateGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let userPoolId: Swift.String?
    let description: Swift.String?
    let roleArn: Swift.String?
    let precedence: Swift.Int?
}

extension UpdateGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case groupName = "GroupName"
        case precedence = "Precedence"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let precedenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .precedence)
        precedence = precedenceDecoded
    }
}

extension UpdateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGroupOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct UpdateGroupOutputResponse: Swift.Equatable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init (
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

struct UpdateGroupOutputResponseBody: Swift.Equatable {
    let group: CognitoIdentityProviderClientTypes.GroupType?
}

extension UpdateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.GroupType.self, forKey: .group)
        group = groupDecoded
    }
}

extension UpdateIdentityProviderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case idpIdentifiers = "IdpIdentifiers"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeMapping = attributeMapping {
            var attributeMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeMapping)
            for (dictKey0, attributeMappingType0) in attributeMapping {
                try attributeMappingContainer.encode(attributeMappingType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let idpIdentifiers = idpIdentifiers {
            var idpIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .idpIdentifiers)
            for idpidentifiertype0 in idpIdentifiers {
                try idpIdentifiersContainer.encode(idpidentifiertype0)
            }
        }
        if let providerDetails = providerDetails {
            var providerDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .providerDetails)
            for (dictKey0, providerDetailsType0) in providerDetails {
                try providerDetailsContainer.encode(providerDetailsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension UpdateIdentityProviderInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateIdentityProviderInput: Swift.Equatable {
    /// The IdP attribute mapping to be changed.
    public var attributeMapping: [Swift.String:Swift.String]?
    /// A list of IdP identifiers.
    public var idpIdentifiers: [Swift.String]?
    /// The IdP details to be updated, such as MetadataURL and MetadataFile.
    public var providerDetails: [Swift.String:Swift.String]?
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        attributeMapping: [Swift.String:Swift.String]? = nil,
        idpIdentifiers: [Swift.String]? = nil,
        providerDetails: [Swift.String:Swift.String]? = nil,
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributeMapping = attributeMapping
        self.idpIdentifiers = idpIdentifiers
        self.providerDetails = providerDetails
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

struct UpdateIdentityProviderInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let providerName: Swift.String?
    let providerDetails: [Swift.String:Swift.String]?
    let attributeMapping: [Swift.String:Swift.String]?
    let idpIdentifiers: [Swift.String]?
}

extension UpdateIdentityProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case idpIdentifiers = "IdpIdentifiers"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .providerDetails)
        var providerDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let providerDetailsContainer = providerDetailsContainer {
            providerDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in providerDetailsContainer {
                if let stringtype0 = stringtype0 {
                    providerDetailsDecoded0?[key0] = stringtype0
                }
            }
        }
        providerDetails = providerDetailsDecoded0
        let attributeMappingContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributeMapping)
        var attributeMappingDecoded0: [Swift.String:Swift.String]? = nil
        if let attributeMappingContainer = attributeMappingContainer {
            attributeMappingDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in attributeMappingContainer {
                if let stringtype0 = stringtype0 {
                    attributeMappingDecoded0?[key0] = stringtype0
                }
            }
        }
        attributeMapping = attributeMappingDecoded0
        let idpIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .idpIdentifiers)
        var idpIdentifiersDecoded0:[Swift.String]? = nil
        if let idpIdentifiersContainer = idpIdentifiersContainer {
            idpIdentifiersDecoded0 = [Swift.String]()
            for string0 in idpIdentifiersContainer {
                if let string0 = string0 {
                    idpIdentifiersDecoded0?.append(string0)
                }
            }
        }
        idpIdentifiers = idpIdentifiersDecoded0
    }
}

extension UpdateIdentityProviderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIdentityProviderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedIdentityProviderException" : self = .unsupportedIdentityProviderException(try UnsupportedIdentityProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateIdentityProviderOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unsupportedIdentityProviderException(UnsupportedIdentityProviderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIdentityProviderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateIdentityProviderOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProvider = output.identityProvider
        } else {
            self.identityProvider = nil
        }
    }
}

public struct UpdateIdentityProviderOutputResponse: Swift.Equatable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init (
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

struct UpdateIdentityProviderOutputResponseBody: Swift.Equatable {
    let identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?
}

extension UpdateIdentityProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProvider = "IdentityProvider"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderType.self, forKey: .identityProvider)
        identityProvider = identityProviderDecoded
    }
}

extension UpdateResourceServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scopes = scopes {
            var scopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scopes)
            for resourceserverscopetype0 in scopes {
                try scopesContainer.encode(resourceserverscopetype0)
            }
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension UpdateResourceServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateResourceServerInput: Swift.Equatable {
    /// The identifier for the resource server.
    /// This member is required.
    public var identifier: Swift.String?
    /// The name of the resource server.
    /// This member is required.
    public var name: Swift.String?
    /// The scope values to be set for the resource server.
    public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        identifier: Swift.String? = nil,
        name: Swift.String? = nil,
        scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.name = name
        self.scopes = scopes
        self.userPoolId = userPoolId
    }
}

struct UpdateResourceServerInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let identifier: Swift.String?
    let name: Swift.String?
    let scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
}

extension UpdateResourceServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ResourceServerScopeType?].self, forKey: .scopes)
        var scopesDecoded0:[CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [CognitoIdentityProviderClientTypes.ResourceServerScopeType]()
            for structure0 in scopesContainer {
                if let structure0 = structure0 {
                    scopesDecoded0?.append(structure0)
                }
            }
        }
        scopes = scopesDecoded0
    }
}

extension UpdateResourceServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateResourceServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateResourceServerOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateResourceServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateResourceServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceServer = output.resourceServer
        } else {
            self.resourceServer = nil
        }
    }
}

public struct UpdateResourceServerOutputResponse: Swift.Equatable {
    /// The resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init (
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

struct UpdateResourceServerOutputResponseBody: Swift.Equatable {
    let resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?
}

extension UpdateResourceServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceServer = "ResourceServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceServerDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ResourceServerType.self, forKey: .resourceServer)
        resourceServer = resourceServerDecoded
    }
}

extension UpdateUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserAttributesInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), accessToken: \"CONTENT_REDACTED\")"}
}

extension UpdateUserAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case clientMetadata = "ClientMetadata"
        case userAttributes = "UserAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientMetadataType0) in clientMetadata {
                try clientMetadataContainer.encode(clientMetadataType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAttributes)
            for attributetype0 in userAttributes {
                try userAttributesContainer.encode(attributetype0)
            }
        }
    }
}

extension UpdateUserAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to update user attributes.
public struct UpdateUserAttributesInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose user attributes you want to update.
    /// This member is required.
    public var accessToken: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action initiates. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the UpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your UpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If you have set an attribute to require verification before Amazon Cognito updates its value, this request doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init (
        accessToken: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.accessToken = accessToken
        self.clientMetadata = clientMetadata
        self.userAttributes = userAttributes
    }
}

struct UpdateUserAttributesInputBody: Swift.Equatable {
    let userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    let accessToken: Swift.String?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension UpdateUserAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case clientMetadata = "ClientMetadata"
        case userAttributes = "UserAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .userAttributes)
        var userAttributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in userAttributesContainer {
                if let structure0 = structure0 {
                    userAttributesDecoded0?.append(structure0)
                }
            }
        }
        userAttributes = userAttributesDecoded0
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}

extension UpdateUserAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeDeliveryFailureException" : self = .codeDeliveryFailureException(try CodeDeliveryFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLambdaResponseException" : self = .invalidLambdaResponseException(try InvalidLambdaResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnexpectedLambdaException" : self = .unexpectedLambdaException(try UnexpectedLambdaException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserLambdaValidationException" : self = .userLambdaValidationException(try UserLambdaValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateUserAttributesOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case codeDeliveryFailureException(CodeDeliveryFailureException)
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidLambdaResponseException(InvalidLambdaResponseException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unexpectedLambdaException(UnexpectedLambdaException)
    case userLambdaValidationException(UserLambdaValidationException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateUserAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeDeliveryDetailsList = output.codeDeliveryDetailsList
        } else {
            self.codeDeliveryDetailsList = nil
        }
    }
}

/// Represents the response from the server for the request to update user attributes.
public struct UpdateUserAttributesOutputResponse: Swift.Equatable {
    /// The code delivery details list from the server for the request to update user attributes.
    public var codeDeliveryDetailsList: [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]?

    public init (
        codeDeliveryDetailsList: [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]? = nil
    )
    {
        self.codeDeliveryDetailsList = codeDeliveryDetailsList
    }
}

struct UpdateUserAttributesOutputResponseBody: Swift.Equatable {
    let codeDeliveryDetailsList: [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]?
}

extension UpdateUserAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeDeliveryDetailsList = "CodeDeliveryDetailsList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDeliveryDetailsListContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?].self, forKey: .codeDeliveryDetailsList)
        var codeDeliveryDetailsListDecoded0:[CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]? = nil
        if let codeDeliveryDetailsListContainer = codeDeliveryDetailsListContainer {
            codeDeliveryDetailsListDecoded0 = [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]()
            for structure0 in codeDeliveryDetailsListContainer {
                if let structure0 = structure0 {
                    codeDeliveryDetailsListDecoded0?.append(structure0)
                }
            }
        }
        codeDeliveryDetailsList = codeDeliveryDetailsListDecoded0
    }
}

extension UpdateUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserPoolClientInput(accessTokenValidity: \(Swift.String(describing: accessTokenValidity)), allowedOAuthFlows: \(Swift.String(describing: allowedOAuthFlows)), allowedOAuthFlowsUserPoolClient: \(Swift.String(describing: allowedOAuthFlowsUserPoolClient)), allowedOAuthScopes: \(Swift.String(describing: allowedOAuthScopes)), analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)), authSessionValidity: \(Swift.String(describing: authSessionValidity)), callbackURLs: \(Swift.String(describing: callbackURLs)), clientName: \(Swift.String(describing: clientName)), defaultRedirectURI: \(Swift.String(describing: defaultRedirectURI)), enablePropagateAdditionalUserContextData: \(Swift.String(describing: enablePropagateAdditionalUserContextData)), enableTokenRevocation: \(Swift.String(describing: enableTokenRevocation)), explicitAuthFlows: \(Swift.String(describing: explicitAuthFlows)), idTokenValidity: \(Swift.String(describing: idTokenValidity)), logoutURLs: \(Swift.String(describing: logoutURLs)), preventUserExistenceErrors: \(Swift.String(describing: preventUserExistenceErrors)), readAttributes: \(Swift.String(describing: readAttributes)), refreshTokenValidity: \(Swift.String(describing: refreshTokenValidity)), supportedIdentityProviders: \(Swift.String(describing: supportedIdentityProviders)), tokenValidityUnits: \(Swift.String(describing: tokenValidityUnits)), userPoolId: \(Swift.String(describing: userPoolId)), writeAttributes: \(Swift.String(describing: writeAttributes)), clientId: \"CONTENT_REDACTED\")"}
}

extension UpdateUserPoolClientInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientId = "ClientId"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTokenValidity = self.accessTokenValidity {
            try encodeContainer.encode(accessTokenValidity, forKey: .accessTokenValidity)
        }
        if let allowedOAuthFlows = allowedOAuthFlows {
            var allowedOAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthFlows)
            for oauthflowtype0 in allowedOAuthFlows {
                try allowedOAuthFlowsContainer.encode(oauthflowtype0.rawValue)
            }
        }
        if allowedOAuthFlowsUserPoolClient != false {
            try encodeContainer.encode(allowedOAuthFlowsUserPoolClient, forKey: .allowedOAuthFlowsUserPoolClient)
        }
        if let allowedOAuthScopes = allowedOAuthScopes {
            var allowedOAuthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthScopes)
            for scopetype0 in allowedOAuthScopes {
                try allowedOAuthScopesContainer.encode(scopetype0)
            }
        }
        if let analyticsConfiguration = self.analyticsConfiguration {
            try encodeContainer.encode(analyticsConfiguration, forKey: .analyticsConfiguration)
        }
        if let authSessionValidity = self.authSessionValidity {
            try encodeContainer.encode(authSessionValidity, forKey: .authSessionValidity)
        }
        if let callbackURLs = callbackURLs {
            var callbackURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .callbackURLs)
            for redirecturltype0 in callbackURLs {
                try callbackURLsContainer.encode(redirecturltype0)
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientName = self.clientName {
            try encodeContainer.encode(clientName, forKey: .clientName)
        }
        if let defaultRedirectURI = self.defaultRedirectURI {
            try encodeContainer.encode(defaultRedirectURI, forKey: .defaultRedirectURI)
        }
        if let enablePropagateAdditionalUserContextData = self.enablePropagateAdditionalUserContextData {
            try encodeContainer.encode(enablePropagateAdditionalUserContextData, forKey: .enablePropagateAdditionalUserContextData)
        }
        if let enableTokenRevocation = self.enableTokenRevocation {
            try encodeContainer.encode(enableTokenRevocation, forKey: .enableTokenRevocation)
        }
        if let explicitAuthFlows = explicitAuthFlows {
            var explicitAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .explicitAuthFlows)
            for explicitauthflowstype0 in explicitAuthFlows {
                try explicitAuthFlowsContainer.encode(explicitauthflowstype0.rawValue)
            }
        }
        if let idTokenValidity = self.idTokenValidity {
            try encodeContainer.encode(idTokenValidity, forKey: .idTokenValidity)
        }
        if let logoutURLs = logoutURLs {
            var logoutURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logoutURLs)
            for redirecturltype0 in logoutURLs {
                try logoutURLsContainer.encode(redirecturltype0)
            }
        }
        if let preventUserExistenceErrors = self.preventUserExistenceErrors {
            try encodeContainer.encode(preventUserExistenceErrors.rawValue, forKey: .preventUserExistenceErrors)
        }
        if let readAttributes = readAttributes {
            var readAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readAttributes)
            for clientpermissiontype0 in readAttributes {
                try readAttributesContainer.encode(clientpermissiontype0)
            }
        }
        if refreshTokenValidity != 0 {
            try encodeContainer.encode(refreshTokenValidity, forKey: .refreshTokenValidity)
        }
        if let supportedIdentityProviders = supportedIdentityProviders {
            var supportedIdentityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedIdentityProviders)
            for providernametype0 in supportedIdentityProviders {
                try supportedIdentityProvidersContainer.encode(providernametype0)
            }
        }
        if let tokenValidityUnits = self.tokenValidityUnits {
            try encodeContainer.encode(tokenValidityUnits, forKey: .tokenValidityUnits)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let writeAttributes = writeAttributes {
            var writeAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .writeAttributes)
            for clientpermissiontype0 in writeAttributes {
                try writeAttributesContainer.encode(clientpermissiontype0)
            }
        }
    }
}

extension UpdateUserPoolClientInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to update the user pool client.
public struct UpdateUserPoolClientInput: Swift.Equatable {
    /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
    public var accessTokenValidity: Swift.Int?
    /// The allowed OAuth flows. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    /// Set to true if the client is allowed to follow the OAuth protocol when interacting with Amazon Cognito user pools.
    public var allowedOAuthFlowsUserPoolClient: Swift.Bool
    /// The allowed OAuth scopes. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    public var allowedOAuthScopes: [Swift.String]?
    /// The Amazon Pinpoint analytics configuration necessary to collect metrics for this user pool. In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
    public var authSessionValidity: Swift.Int?
    /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var callbackURLs: [Swift.String]?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The client name from the update user pool client request.
    public var clientName: Swift.String?
    /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var defaultRedirectURI: Swift.String?
    /// Activates the propagation of additional user context data. For more information about propagation of user context data, see [ Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html). If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    public var enablePropagateAdditionalUserContextData: Swift.Bool?
    /// Activates or deactivates token revocation. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html).
    public var enableTokenRevocation: Swift.Bool?
    /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
    ///
    /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
    ///
    /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
    ///
    /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
    ///
    /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
    ///
    /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
    ///
    ///
    /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
    public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
    public var idTokenValidity: Swift.Int?
    /// A list of allowed logout URLs for the IdPs.
    public var logoutURLs: [Swift.String]?
    /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
    ///
    /// * ENABLED - This prevents user existence-related errors.
    ///
    /// * LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.
    public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    /// The read-only attributes of the user pool.
    public var readAttributes: [Swift.String]?
    /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
    public var refreshTokenValidity: Swift.Int
    /// A list of provider names for the IdPs that this client supports. The following are supported: COGNITO, Facebook, Google, SignInWithApple, LoginWithAmazon, and the names of your own SAML and OIDC providers.
    public var supportedIdentityProviders: [Swift.String]?
    /// The units in which the validity times are represented. The default unit for RefreshToken is days, and the default for ID and access tokens is hours.
    public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    /// The user pool ID for the user pool where you want to update the user pool client.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The writeable attributes of the user pool.
    public var writeAttributes: [Swift.String]?

    public init (
        accessTokenValidity: Swift.Int? = nil,
        allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Swift.Bool = false,
        allowedOAuthScopes: [Swift.String]? = nil,
        analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
        authSessionValidity: Swift.Int? = nil,
        callbackURLs: [Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientName: Swift.String? = nil,
        defaultRedirectURI: Swift.String? = nil,
        enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
        enableTokenRevocation: Swift.Bool? = nil,
        explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
        idTokenValidity: Swift.Int? = nil,
        logoutURLs: [Swift.String]? = nil,
        preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
        readAttributes: [Swift.String]? = nil,
        refreshTokenValidity: Swift.Int = 0,
        supportedIdentityProviders: [Swift.String]? = nil,
        tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
        userPoolId: Swift.String? = nil,
        writeAttributes: [Swift.String]? = nil
    )
    {
        self.accessTokenValidity = accessTokenValidity
        self.allowedOAuthFlows = allowedOAuthFlows
        self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
        self.allowedOAuthScopes = allowedOAuthScopes
        self.analyticsConfiguration = analyticsConfiguration
        self.authSessionValidity = authSessionValidity
        self.callbackURLs = callbackURLs
        self.clientId = clientId
        self.clientName = clientName
        self.defaultRedirectURI = defaultRedirectURI
        self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
        self.enableTokenRevocation = enableTokenRevocation
        self.explicitAuthFlows = explicitAuthFlows
        self.idTokenValidity = idTokenValidity
        self.logoutURLs = logoutURLs
        self.preventUserExistenceErrors = preventUserExistenceErrors
        self.readAttributes = readAttributes
        self.refreshTokenValidity = refreshTokenValidity
        self.supportedIdentityProviders = supportedIdentityProviders
        self.tokenValidityUnits = tokenValidityUnits
        self.userPoolId = userPoolId
        self.writeAttributes = writeAttributes
    }
}

struct UpdateUserPoolClientInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientId: Swift.String?
    let clientName: Swift.String?
    let refreshTokenValidity: Swift.Int
    let accessTokenValidity: Swift.Int?
    let idTokenValidity: Swift.Int?
    let tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    let readAttributes: [Swift.String]?
    let writeAttributes: [Swift.String]?
    let explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    let supportedIdentityProviders: [Swift.String]?
    let callbackURLs: [Swift.String]?
    let logoutURLs: [Swift.String]?
    let defaultRedirectURI: Swift.String?
    let allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    let allowedOAuthScopes: [Swift.String]?
    let allowedOAuthFlowsUserPoolClient: Swift.Bool
    let analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    let preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    let enableTokenRevocation: Swift.Bool?
    let enablePropagateAdditionalUserContextData: Swift.Bool?
    let authSessionValidity: Swift.Int?
}

extension UpdateUserPoolClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientId = "ClientId"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let refreshTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .refreshTokenValidity) ?? 0
        refreshTokenValidity = refreshTokenValidityDecoded
        let accessTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accessTokenValidity)
        accessTokenValidity = accessTokenValidityDecoded
        let idTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idTokenValidity)
        idTokenValidity = idTokenValidityDecoded
        let tokenValidityUnitsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TokenValidityUnitsType.self, forKey: .tokenValidityUnits)
        tokenValidityUnits = tokenValidityUnitsDecoded
        let readAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readAttributes)
        var readAttributesDecoded0:[Swift.String]? = nil
        if let readAttributesContainer = readAttributesContainer {
            readAttributesDecoded0 = [Swift.String]()
            for string0 in readAttributesContainer {
                if let string0 = string0 {
                    readAttributesDecoded0?.append(string0)
                }
            }
        }
        readAttributes = readAttributesDecoded0
        let writeAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .writeAttributes)
        var writeAttributesDecoded0:[Swift.String]? = nil
        if let writeAttributesContainer = writeAttributesContainer {
            writeAttributesDecoded0 = [Swift.String]()
            for string0 in writeAttributesContainer {
                if let string0 = string0 {
                    writeAttributesDecoded0?.append(string0)
                }
            }
        }
        writeAttributes = writeAttributesDecoded0
        let explicitAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType?].self, forKey: .explicitAuthFlows)
        var explicitAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil
        if let explicitAuthFlowsContainer = explicitAuthFlowsContainer {
            explicitAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]()
            for enum0 in explicitAuthFlowsContainer {
                if let enum0 = enum0 {
                    explicitAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        explicitAuthFlows = explicitAuthFlowsDecoded0
        let supportedIdentityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedIdentityProviders)
        var supportedIdentityProvidersDecoded0:[Swift.String]? = nil
        if let supportedIdentityProvidersContainer = supportedIdentityProvidersContainer {
            supportedIdentityProvidersDecoded0 = [Swift.String]()
            for string0 in supportedIdentityProvidersContainer {
                if let string0 = string0 {
                    supportedIdentityProvidersDecoded0?.append(string0)
                }
            }
        }
        supportedIdentityProviders = supportedIdentityProvidersDecoded0
        let callbackURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .callbackURLs)
        var callbackURLsDecoded0:[Swift.String]? = nil
        if let callbackURLsContainer = callbackURLsContainer {
            callbackURLsDecoded0 = [Swift.String]()
            for string0 in callbackURLsContainer {
                if let string0 = string0 {
                    callbackURLsDecoded0?.append(string0)
                }
            }
        }
        callbackURLs = callbackURLsDecoded0
        let logoutURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logoutURLs)
        var logoutURLsDecoded0:[Swift.String]? = nil
        if let logoutURLsContainer = logoutURLsContainer {
            logoutURLsDecoded0 = [Swift.String]()
            for string0 in logoutURLsContainer {
                if let string0 = string0 {
                    logoutURLsDecoded0?.append(string0)
                }
            }
        }
        logoutURLs = logoutURLsDecoded0
        let defaultRedirectURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRedirectURI)
        defaultRedirectURI = defaultRedirectURIDecoded
        let allowedOAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.OAuthFlowType?].self, forKey: .allowedOAuthFlows)
        var allowedOAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil
        if let allowedOAuthFlowsContainer = allowedOAuthFlowsContainer {
            allowedOAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.OAuthFlowType]()
            for enum0 in allowedOAuthFlowsContainer {
                if let enum0 = enum0 {
                    allowedOAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        allowedOAuthFlows = allowedOAuthFlowsDecoded0
        let allowedOAuthScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOAuthScopes)
        var allowedOAuthScopesDecoded0:[Swift.String]? = nil
        if let allowedOAuthScopesContainer = allowedOAuthScopesContainer {
            allowedOAuthScopesDecoded0 = [Swift.String]()
            for string0 in allowedOAuthScopesContainer {
                if let string0 = string0 {
                    allowedOAuthScopesDecoded0?.append(string0)
                }
            }
        }
        allowedOAuthScopes = allowedOAuthScopesDecoded0
        let allowedOAuthFlowsUserPoolClientDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedOAuthFlowsUserPoolClient) ?? false
        allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClientDecoded
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
        let preventUserExistenceErrorsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes.self, forKey: .preventUserExistenceErrors)
        preventUserExistenceErrors = preventUserExistenceErrorsDecoded
        let enableTokenRevocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTokenRevocation)
        enableTokenRevocation = enableTokenRevocationDecoded
        let enablePropagateAdditionalUserContextDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePropagateAdditionalUserContextData)
        enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextDataDecoded
        let authSessionValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .authSessionValidity)
        authSessionValidity = authSessionValidityDecoded
    }
}

extension UpdateUserPoolClientOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserPoolClientOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOAuthFlowException" : self = .invalidOAuthFlowException(try InvalidOAuthFlowException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScopeDoesNotExistException" : self = .scopeDoesNotExistException(try ScopeDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateUserPoolClientOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalErrorException(InternalErrorException)
    case invalidOAuthFlowException(InvalidOAuthFlowException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case scopeDoesNotExistException(ScopeDoesNotExistException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserPoolClientOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateUserPoolClientOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userPoolClient = output.userPoolClient
        } else {
            self.userPoolClient = nil
        }
    }
}

/// Represents the response from the server to the request to update the user pool client.
public struct UpdateUserPoolClientOutputResponse: Swift.Equatable {
    /// The user pool client value from the response from the server when you request to update the user pool client.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init (
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

struct UpdateUserPoolClientOutputResponseBody: Swift.Equatable {
    let userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?
}

extension UpdateUserPoolClientOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userPoolClient = "UserPoolClient"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolClientDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolClientType.self, forKey: .userPoolClient)
        userPoolClient = userPoolClientDecoded
    }
}

extension UpdateUserPoolDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainConfig = "CustomDomainConfig"
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customDomainConfig = self.customDomainConfig {
            try encodeContainer.encode(customDomainConfig, forKey: .customDomainConfig)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}

extension UpdateUserPoolDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The UpdateUserPoolDomain request input.
public struct UpdateUserPoolDomainInput: Swift.Equatable {
    /// The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
    /// This member is required.
    public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
    /// The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. One example might be auth.example.com. This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.
    /// This member is required.
    public var domain: Swift.String?
    /// The ID of the user pool that is associated with the custom domain whose certificate you're updating.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customDomainConfig = customDomainConfig
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

struct UpdateUserPoolDomainInputBody: Swift.Equatable {
    let domain: Swift.String?
    let userPoolId: Swift.String?
    let customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
}

extension UpdateUserPoolDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainConfig = "CustomDomainConfig"
        case domain = "Domain"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let customDomainConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomDomainConfigType.self, forKey: .customDomainConfig)
        customDomainConfig = customDomainConfigDecoded
    }
}

extension UpdateUserPoolDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserPoolDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateUserPoolDomainOutputError: Swift.Error, Swift.Equatable {
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserPoolDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateUserPoolDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudFrontDomain = output.cloudFrontDomain
        } else {
            self.cloudFrontDomain = nil
        }
    }
}

/// The UpdateUserPoolDomain response output.
public struct UpdateUserPoolDomainOutputResponse: Swift.Equatable {
    /// The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.
    public var cloudFrontDomain: Swift.String?

    public init (
        cloudFrontDomain: Swift.String? = nil
    )
    {
        self.cloudFrontDomain = cloudFrontDomain
    }
}

struct UpdateUserPoolDomainOutputResponseBody: Swift.Equatable {
    let cloudFrontDomain: Swift.String?
}

extension UpdateUserPoolDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFrontDomain = "CloudFrontDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFrontDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudFrontDomain)
        cloudFrontDomain = cloudFrontDomainDecoded
    }
}

extension UpdateUserPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deletionProtection = "DeletionProtection"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolId = "UserPoolId"
        case userPoolTags = "UserPoolTags"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountRecoverySetting = self.accountRecoverySetting {
            try encodeContainer.encode(accountRecoverySetting, forKey: .accountRecoverySetting)
        }
        if let adminCreateUserConfig = self.adminCreateUserConfig {
            try encodeContainer.encode(adminCreateUserConfig, forKey: .adminCreateUserConfig)
        }
        if let autoVerifiedAttributes = autoVerifiedAttributes {
            var autoVerifiedAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoVerifiedAttributes)
            for verifiedattributetype0 in autoVerifiedAttributes {
                try autoVerifiedAttributesContainer.encode(verifiedattributetype0.rawValue)
            }
        }
        if let deletionProtection = self.deletionProtection {
            try encodeContainer.encode(deletionProtection.rawValue, forKey: .deletionProtection)
        }
        if let deviceConfiguration = self.deviceConfiguration {
            try encodeContainer.encode(deviceConfiguration, forKey: .deviceConfiguration)
        }
        if let emailConfiguration = self.emailConfiguration {
            try encodeContainer.encode(emailConfiguration, forKey: .emailConfiguration)
        }
        if let emailVerificationMessage = self.emailVerificationMessage {
            try encodeContainer.encode(emailVerificationMessage, forKey: .emailVerificationMessage)
        }
        if let emailVerificationSubject = self.emailVerificationSubject {
            try encodeContainer.encode(emailVerificationSubject, forKey: .emailVerificationSubject)
        }
        if let lambdaConfig = self.lambdaConfig {
            try encodeContainer.encode(lambdaConfig, forKey: .lambdaConfig)
        }
        if let mfaConfiguration = self.mfaConfiguration {
            try encodeContainer.encode(mfaConfiguration.rawValue, forKey: .mfaConfiguration)
        }
        if let policies = self.policies {
            try encodeContainer.encode(policies, forKey: .policies)
        }
        if let smsAuthenticationMessage = self.smsAuthenticationMessage {
            try encodeContainer.encode(smsAuthenticationMessage, forKey: .smsAuthenticationMessage)
        }
        if let smsConfiguration = self.smsConfiguration {
            try encodeContainer.encode(smsConfiguration, forKey: .smsConfiguration)
        }
        if let smsVerificationMessage = self.smsVerificationMessage {
            try encodeContainer.encode(smsVerificationMessage, forKey: .smsVerificationMessage)
        }
        if let userAttributeUpdateSettings = self.userAttributeUpdateSettings {
            try encodeContainer.encode(userAttributeUpdateSettings, forKey: .userAttributeUpdateSettings)
        }
        if let userPoolAddOns = self.userPoolAddOns {
            try encodeContainer.encode(userPoolAddOns, forKey: .userPoolAddOns)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let userPoolTags = userPoolTags {
            var userPoolTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userPoolTags)
            for (dictKey0, userPoolTagsType0) in userPoolTags {
                try userPoolTagsContainer.encode(userPoolTagsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let verificationMessageTemplate = self.verificationMessageTemplate {
            try encodeContainer.encode(verificationMessageTemplate, forKey: .verificationMessageTemplate)
        }
    }
}

extension UpdateUserPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to update the user pool.
public struct UpdateUserPoolInput: Swift.Equatable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// The attributes that are automatically verified when Amazon Cognito requests to update user pools.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
    public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for email invitation and verification messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda configuration information from the request to update the user pool.
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Possible values include:
    ///
    /// * OFF - MFA tokens aren't required and can't be specified during user registration.
    ///
    /// * ON - MFA tokens are required for all user registrations. You can only specify ON when you're initially creating a user pool. You can use the [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) API operation to turn MFA "ON" for existing user pools.
    ///
    /// * OPTIONAL - Users have the option when registering to create an MFA token.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// A container with the policies you want to update in a user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// The contents of the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// Enables advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The user pool ID for the user pool you want to update.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// The template for verification messages.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolId: Swift.String? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deletionProtection = deletionProtection
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolId = userPoolId
        self.userPoolTags = userPoolTags
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}

struct UpdateUserPoolInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    let deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    let lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    let autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    let smsVerificationMessage: Swift.String?
    let emailVerificationMessage: Swift.String?
    let emailVerificationSubject: Swift.String?
    let verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?
    let smsAuthenticationMessage: Swift.String?
    let userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    let deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    let emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    let smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    let userPoolTags: [Swift.String:Swift.String]?
    let adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    let userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    let accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
}

extension UpdateUserPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deletionProtection = "DeletionProtection"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolId = "UserPoolId"
        case userPoolTags = "UserPoolTags"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolPolicyType.self, forKey: .policies)
        policies = policiesDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeletionProtectionType.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let autoVerifiedAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.VerifiedAttributeType?].self, forKey: .autoVerifiedAttributes)
        var autoVerifiedAttributesDecoded0:[CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        if let autoVerifiedAttributesContainer = autoVerifiedAttributesContainer {
            autoVerifiedAttributesDecoded0 = [CognitoIdentityProviderClientTypes.VerifiedAttributeType]()
            for enum0 in autoVerifiedAttributesContainer {
                if let enum0 = enum0 {
                    autoVerifiedAttributesDecoded0?.append(enum0)
                }
            }
        }
        autoVerifiedAttributes = autoVerifiedAttributesDecoded0
        let smsVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsVerificationMessage)
        smsVerificationMessage = smsVerificationMessageDecoded
        let emailVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationMessage)
        emailVerificationMessage = emailVerificationMessageDecoded
        let emailVerificationSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationSubject)
        emailVerificationSubject = emailVerificationSubjectDecoded
        let verificationMessageTemplateDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.self, forKey: .verificationMessageTemplate)
        verificationMessageTemplate = verificationMessageTemplateDecoded
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let userAttributeUpdateSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.self, forKey: .userAttributeUpdateSettings)
        userAttributeUpdateSettings = userAttributeUpdateSettingsDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceConfigurationType.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let emailConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EmailConfigurationType.self, forKey: .emailConfiguration)
        emailConfiguration = emailConfigurationDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
        let userPoolTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userPoolTags)
        var userPoolTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let userPoolTagsContainer = userPoolTagsContainer {
            userPoolTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in userPoolTagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    userPoolTagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        userPoolTags = userPoolTagsDecoded0
        let adminCreateUserConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.self, forKey: .adminCreateUserConfig)
        adminCreateUserConfig = adminCreateUserConfigDecoded
        let userPoolAddOnsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolAddOnsType.self, forKey: .userPoolAddOns)
        userPoolAddOns = userPoolAddOnsDecoded
        let accountRecoverySettingDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountRecoverySettingType.self, forKey: .accountRecoverySetting)
        accountRecoverySetting = accountRecoverySettingDecoded
    }
}

extension UpdateUserPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailRoleAccessPolicyException" : self = .invalidEmailRoleAccessPolicyException(try InvalidEmailRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleAccessPolicyException" : self = .invalidSmsRoleAccessPolicyException(try InvalidSmsRoleAccessPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSmsRoleTrustRelationshipException" : self = .invalidSmsRoleTrustRelationshipException(try InvalidSmsRoleTrustRelationshipException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserImportInProgressException" : self = .userImportInProgressException(try UserImportInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserPoolTaggingException" : self = .userPoolTaggingException(try UserPoolTaggingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateUserPoolOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalErrorException(InternalErrorException)
    case invalidEmailRoleAccessPolicyException(InvalidEmailRoleAccessPolicyException)
    case invalidParameterException(InvalidParameterException)
    case invalidSmsRoleAccessPolicyException(InvalidSmsRoleAccessPolicyException)
    case invalidSmsRoleTrustRelationshipException(InvalidSmsRoleTrustRelationshipException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userImportInProgressException(UserImportInProgressException)
    case userPoolTaggingException(UserPoolTaggingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Represents the response from the server when you make a request to update the user pool.
public struct UpdateUserPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesRequireVerificationBeforeUpdate = "AttributesRequireVerificationBeforeUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesRequireVerificationBeforeUpdate = attributesRequireVerificationBeforeUpdate {
            var attributesRequireVerificationBeforeUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesRequireVerificationBeforeUpdate)
            for verifiedattributetype0 in attributesRequireVerificationBeforeUpdate {
                try attributesRequireVerificationBeforeUpdateContainer.encode(verifiedattributetype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesRequireVerificationBeforeUpdateContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.VerifiedAttributeType?].self, forKey: .attributesRequireVerificationBeforeUpdate)
        var attributesRequireVerificationBeforeUpdateDecoded0:[CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        if let attributesRequireVerificationBeforeUpdateContainer = attributesRequireVerificationBeforeUpdateContainer {
            attributesRequireVerificationBeforeUpdateDecoded0 = [CognitoIdentityProviderClientTypes.VerifiedAttributeType]()
            for enum0 in attributesRequireVerificationBeforeUpdateContainer {
                if let enum0 = enum0 {
                    attributesRequireVerificationBeforeUpdateDecoded0?.append(enum0)
                }
            }
        }
        attributesRequireVerificationBeforeUpdate = attributesRequireVerificationBeforeUpdateDecoded0
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public struct UserAttributeUpdateSettingsType: Swift.Equatable {
        /// Requires that your user verifies their email address, phone number, or both before Amazon Cognito updates the value of that attribute. When you update a user attribute that has this option activated, Amazon Cognito sends a verification message to the new phone number or email address. Amazon Cognito doesn’t change the value of the attribute until your user responds to the verification message and confirms the new value. You can verify an updated email address or phone number with a [VerifyUserAttribute](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifyUserAttribute.html) API request. You can also call the [UpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html) or [AdminUpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html) API and set email_verified or phone_number_verified to true. When AttributesRequireVerificationBeforeUpdate is false, your user pool doesn't require that your users verify attribute changes before Amazon Cognito updates them. In a user pool where AttributesRequireVerificationBeforeUpdate is false, API operations that change attribute values can immediately update a user’s email or phone_number attribute.
        public var attributesRequireVerificationBeforeUpdate: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?

        public init (
            attributesRequireVerificationBeforeUpdate: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        )
        {
            self.attributesRequireVerificationBeforeUpdate = attributesRequireVerificationBeforeUpdate
        }
    }

}

extension CognitoIdentityProviderClientTypes.UserContextDataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encodedData = "EncodedData"
        case ipAddress = "IpAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encodedData = self.encodedData {
            try encodeContainer.encode(encodedData, forKey: .encodedData)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let encodedDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encodedData)
        encodedData = encodedDataDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// Contextual data, such as the user's device fingerprint, IP address, or location, used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    public struct UserContextDataType: Swift.Equatable {
        /// Encoded device-fingerprint details that your app collected with the Amazon Cognito context data collection library. For more information, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var encodedData: Swift.String?
        /// The source IP address of your user's device.
        public var ipAddress: Swift.String?

        public init (
            encodedData: Swift.String? = nil,
            ipAddress: Swift.String? = nil
        )
        {
            self.encodedData = encodedData
            self.ipAddress = ipAddress
        }
    }

}

extension UserImportInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserImportInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.
public struct UserImportInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the user pool has an import job running.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserImportInProgressExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserImportInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum UserImportJobStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case expired
        case failed
        case inprogress
        case pending
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [UserImportJobStatusType] {
            return [
                .created,
                .expired,
                .failed,
                .inprogress,
                .pending,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .expired: return "Expired"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserImportJobStatusType(rawValue: rawValue) ?? UserImportJobStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserImportJobType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
        case completionDate = "CompletionDate"
        case completionMessage = "CompletionMessage"
        case creationDate = "CreationDate"
        case failedUsers = "FailedUsers"
        case importedUsers = "ImportedUsers"
        case jobId = "JobId"
        case jobName = "JobName"
        case preSignedUrl = "PreSignedUrl"
        case skippedUsers = "SkippedUsers"
        case startDate = "StartDate"
        case status = "Status"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsRoleArn = self.cloudWatchLogsRoleArn {
            try encodeContainer.encode(cloudWatchLogsRoleArn, forKey: .cloudWatchLogsRoleArn)
        }
        if let completionDate = self.completionDate {
            try encodeContainer.encodeTimestamp(completionDate, format: .epochSeconds, forKey: .completionDate)
        }
        if let completionMessage = self.completionMessage {
            try encodeContainer.encode(completionMessage, forKey: .completionMessage)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if failedUsers != 0 {
            try encodeContainer.encode(failedUsers, forKey: .failedUsers)
        }
        if importedUsers != 0 {
            try encodeContainer.encode(importedUsers, forKey: .importedUsers)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let preSignedUrl = self.preSignedUrl {
            try encodeContainer.encode(preSignedUrl, forKey: .preSignedUrl)
        }
        if skippedUsers != 0 {
            try encodeContainer.encode(skippedUsers, forKey: .skippedUsers)
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let preSignedUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignedUrl)
        preSignedUrl = preSignedUrlDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let completionDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completionDate)
        completionDate = completionDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserImportJobStatusType.self, forKey: .status)
        status = statusDecoded
        let cloudWatchLogsRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsRoleArn)
        cloudWatchLogsRoleArn = cloudWatchLogsRoleArnDecoded
        let importedUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedUsers) ?? 0
        importedUsers = importedUsersDecoded
        let skippedUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .skippedUsers) ?? 0
        skippedUsers = skippedUsersDecoded
        let failedUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedUsers) ?? 0
        failedUsers = failedUsersDecoded
        let completionMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completionMessage)
        completionMessage = completionMessageDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The user import job type.
    public struct UserImportJobType: Swift.Equatable {
        /// The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public var cloudWatchLogsRoleArn: Swift.String?
        /// The date when the user import job was completed.
        public var completionDate: ClientRuntime.Date?
        /// The message returned when the user import job is completed.
        public var completionMessage: Swift.String?
        /// The date the user import job was created.
        public var creationDate: ClientRuntime.Date?
        /// The number of users that couldn't be imported.
        public var failedUsers: Swift.Int
        /// The number of users that were successfully imported.
        public var importedUsers: Swift.Int
        /// The job ID for the user import job.
        public var jobId: Swift.String?
        /// The job name for the user import job.
        public var jobName: Swift.String?
        /// The pre-signed URL to be used to upload the .csv file.
        public var preSignedUrl: Swift.String?
        /// The number of users that were skipped.
        public var skippedUsers: Swift.Int
        /// The date when the user import job was started.
        public var startDate: ClientRuntime.Date?
        /// The status of the user import job. One of the following:
        ///
        /// * Created - The job was created but not started.
        ///
        /// * Pending - A transition state. You have started the job, but it has not begun importing users yet.
        ///
        /// * InProgress - The job has started, and users are being imported.
        ///
        /// * Stopping - You have stopped the job, but the job has not stopped importing users yet.
        ///
        /// * Stopped - You have stopped the job, and the job has stopped importing users.
        ///
        /// * Succeeded - The job has completed successfully.
        ///
        /// * Failed - The job has stopped due to an error.
        ///
        /// * Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.
        public var status: CognitoIdentityProviderClientTypes.UserImportJobStatusType?
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: Swift.String?

        public init (
            cloudWatchLogsRoleArn: Swift.String? = nil,
            completionDate: ClientRuntime.Date? = nil,
            completionMessage: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            failedUsers: Swift.Int = 0,
            importedUsers: Swift.Int = 0,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            preSignedUrl: Swift.String? = nil,
            skippedUsers: Swift.Int = 0,
            startDate: ClientRuntime.Date? = nil,
            status: CognitoIdentityProviderClientTypes.UserImportJobStatusType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.creationDate = creationDate
            self.failedUsers = failedUsers
            self.importedUsers = importedUsers
            self.jobId = jobId
            self.jobName = jobName
            self.preSignedUrl = preSignedUrl
            self.skippedUsers = skippedUsers
            self.startDate = startDate
            self.status = status
            self.userPoolId = userPoolId
        }
    }

}

extension UserLambdaValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserLambdaValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
public struct UserLambdaValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when the Amazon Cognito service returns a user validation exception with the Lambda service.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserLambdaValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserLambdaValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserNotConfirmedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserNotConfirmedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user isn't confirmed successfully.
public struct UserNotConfirmedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when a user isn't confirmed successfully.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserNotConfirmedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserNotConfirmedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user isn't found.
public struct UserNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when a user isn't found.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserPoolAddOnNotEnabledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserPoolAddOnNotEnabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when user pool add-ons aren't enabled.
public struct UserPoolAddOnNotEnabledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserPoolAddOnNotEnabledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserPoolAddOnNotEnabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolAddOnsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedSecurityMode = "AdvancedSecurityMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advancedSecurityMode = self.advancedSecurityMode {
            try encodeContainer.encode(advancedSecurityMode.rawValue, forKey: .advancedSecurityMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let advancedSecurityModeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AdvancedSecurityModeType.self, forKey: .advancedSecurityMode)
        advancedSecurityMode = advancedSecurityModeDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The user pool add-ons type.
    public struct UserPoolAddOnsType: Swift.Equatable {
        /// The advanced security mode.
        /// This member is required.
        public var advancedSecurityMode: CognitoIdentityProviderClientTypes.AdvancedSecurityModeType?

        public init (
            advancedSecurityMode: CognitoIdentityProviderClientTypes.AdvancedSecurityModeType? = nil
        )
        {
            self.advancedSecurityMode = advancedSecurityMode
        }
    }

}

extension CognitoIdentityProviderClientTypes.UserPoolClientDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case clientName = "ClientName"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientName = self.clientName {
            try encodeContainer.encode(clientName, forKey: .clientName)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserPoolClientDescription(clientName: \(Swift.String(describing: clientName)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// The description of the user pool client.
    public struct UserPoolClientDescription: Swift.Equatable {
        /// The ID of the client associated with the user pool.
        public var clientId: Swift.String?
        /// The client name from the user pool client description.
        public var clientName: Swift.String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public var userPoolId: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            clientName: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clientName = clientName
            self.userPoolId = userPoolId
        }
    }

}

extension CognitoIdentityProviderClientTypes.UserPoolClientType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientId = "ClientId"
        case clientName = "ClientName"
        case clientSecret = "ClientSecret"
        case creationDate = "CreationDate"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case idTokenValidity = "IdTokenValidity"
        case lastModifiedDate = "LastModifiedDate"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTokenValidity = self.accessTokenValidity {
            try encodeContainer.encode(accessTokenValidity, forKey: .accessTokenValidity)
        }
        if let allowedOAuthFlows = allowedOAuthFlows {
            var allowedOAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthFlows)
            for oauthflowtype0 in allowedOAuthFlows {
                try allowedOAuthFlowsContainer.encode(oauthflowtype0.rawValue)
            }
        }
        if let allowedOAuthFlowsUserPoolClient = self.allowedOAuthFlowsUserPoolClient {
            try encodeContainer.encode(allowedOAuthFlowsUserPoolClient, forKey: .allowedOAuthFlowsUserPoolClient)
        }
        if let allowedOAuthScopes = allowedOAuthScopes {
            var allowedOAuthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthScopes)
            for scopetype0 in allowedOAuthScopes {
                try allowedOAuthScopesContainer.encode(scopetype0)
            }
        }
        if let analyticsConfiguration = self.analyticsConfiguration {
            try encodeContainer.encode(analyticsConfiguration, forKey: .analyticsConfiguration)
        }
        if let authSessionValidity = self.authSessionValidity {
            try encodeContainer.encode(authSessionValidity, forKey: .authSessionValidity)
        }
        if let callbackURLs = callbackURLs {
            var callbackURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .callbackURLs)
            for redirecturltype0 in callbackURLs {
                try callbackURLsContainer.encode(redirecturltype0)
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientName = self.clientName {
            try encodeContainer.encode(clientName, forKey: .clientName)
        }
        if let clientSecret = self.clientSecret {
            try encodeContainer.encode(clientSecret, forKey: .clientSecret)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let defaultRedirectURI = self.defaultRedirectURI {
            try encodeContainer.encode(defaultRedirectURI, forKey: .defaultRedirectURI)
        }
        if let enablePropagateAdditionalUserContextData = self.enablePropagateAdditionalUserContextData {
            try encodeContainer.encode(enablePropagateAdditionalUserContextData, forKey: .enablePropagateAdditionalUserContextData)
        }
        if let enableTokenRevocation = self.enableTokenRevocation {
            try encodeContainer.encode(enableTokenRevocation, forKey: .enableTokenRevocation)
        }
        if let explicitAuthFlows = explicitAuthFlows {
            var explicitAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .explicitAuthFlows)
            for explicitauthflowstype0 in explicitAuthFlows {
                try explicitAuthFlowsContainer.encode(explicitauthflowstype0.rawValue)
            }
        }
        if let idTokenValidity = self.idTokenValidity {
            try encodeContainer.encode(idTokenValidity, forKey: .idTokenValidity)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let logoutURLs = logoutURLs {
            var logoutURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logoutURLs)
            for redirecturltype0 in logoutURLs {
                try logoutURLsContainer.encode(redirecturltype0)
            }
        }
        if let preventUserExistenceErrors = self.preventUserExistenceErrors {
            try encodeContainer.encode(preventUserExistenceErrors.rawValue, forKey: .preventUserExistenceErrors)
        }
        if let readAttributes = readAttributes {
            var readAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readAttributes)
            for clientpermissiontype0 in readAttributes {
                try readAttributesContainer.encode(clientpermissiontype0)
            }
        }
        if refreshTokenValidity != 0 {
            try encodeContainer.encode(refreshTokenValidity, forKey: .refreshTokenValidity)
        }
        if let supportedIdentityProviders = supportedIdentityProviders {
            var supportedIdentityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedIdentityProviders)
            for providernametype0 in supportedIdentityProviders {
                try supportedIdentityProvidersContainer.encode(providernametype0)
            }
        }
        if let tokenValidityUnits = self.tokenValidityUnits {
            try encodeContainer.encode(tokenValidityUnits, forKey: .tokenValidityUnits)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let writeAttributes = writeAttributes {
            var writeAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .writeAttributes)
            for clientpermissiontype0 in writeAttributes {
                try writeAttributesContainer.encode(clientpermissiontype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let refreshTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .refreshTokenValidity) ?? 0
        refreshTokenValidity = refreshTokenValidityDecoded
        let accessTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accessTokenValidity)
        accessTokenValidity = accessTokenValidityDecoded
        let idTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idTokenValidity)
        idTokenValidity = idTokenValidityDecoded
        let tokenValidityUnitsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TokenValidityUnitsType.self, forKey: .tokenValidityUnits)
        tokenValidityUnits = tokenValidityUnitsDecoded
        let readAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readAttributes)
        var readAttributesDecoded0:[Swift.String]? = nil
        if let readAttributesContainer = readAttributesContainer {
            readAttributesDecoded0 = [Swift.String]()
            for string0 in readAttributesContainer {
                if let string0 = string0 {
                    readAttributesDecoded0?.append(string0)
                }
            }
        }
        readAttributes = readAttributesDecoded0
        let writeAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .writeAttributes)
        var writeAttributesDecoded0:[Swift.String]? = nil
        if let writeAttributesContainer = writeAttributesContainer {
            writeAttributesDecoded0 = [Swift.String]()
            for string0 in writeAttributesContainer {
                if let string0 = string0 {
                    writeAttributesDecoded0?.append(string0)
                }
            }
        }
        writeAttributes = writeAttributesDecoded0
        let explicitAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType?].self, forKey: .explicitAuthFlows)
        var explicitAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil
        if let explicitAuthFlowsContainer = explicitAuthFlowsContainer {
            explicitAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]()
            for enum0 in explicitAuthFlowsContainer {
                if let enum0 = enum0 {
                    explicitAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        explicitAuthFlows = explicitAuthFlowsDecoded0
        let supportedIdentityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedIdentityProviders)
        var supportedIdentityProvidersDecoded0:[Swift.String]? = nil
        if let supportedIdentityProvidersContainer = supportedIdentityProvidersContainer {
            supportedIdentityProvidersDecoded0 = [Swift.String]()
            for string0 in supportedIdentityProvidersContainer {
                if let string0 = string0 {
                    supportedIdentityProvidersDecoded0?.append(string0)
                }
            }
        }
        supportedIdentityProviders = supportedIdentityProvidersDecoded0
        let callbackURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .callbackURLs)
        var callbackURLsDecoded0:[Swift.String]? = nil
        if let callbackURLsContainer = callbackURLsContainer {
            callbackURLsDecoded0 = [Swift.String]()
            for string0 in callbackURLsContainer {
                if let string0 = string0 {
                    callbackURLsDecoded0?.append(string0)
                }
            }
        }
        callbackURLs = callbackURLsDecoded0
        let logoutURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logoutURLs)
        var logoutURLsDecoded0:[Swift.String]? = nil
        if let logoutURLsContainer = logoutURLsContainer {
            logoutURLsDecoded0 = [Swift.String]()
            for string0 in logoutURLsContainer {
                if let string0 = string0 {
                    logoutURLsDecoded0?.append(string0)
                }
            }
        }
        logoutURLs = logoutURLsDecoded0
        let defaultRedirectURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRedirectURI)
        defaultRedirectURI = defaultRedirectURIDecoded
        let allowedOAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.OAuthFlowType?].self, forKey: .allowedOAuthFlows)
        var allowedOAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil
        if let allowedOAuthFlowsContainer = allowedOAuthFlowsContainer {
            allowedOAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.OAuthFlowType]()
            for enum0 in allowedOAuthFlowsContainer {
                if let enum0 = enum0 {
                    allowedOAuthFlowsDecoded0?.append(enum0)
                }
            }
        }
        allowedOAuthFlows = allowedOAuthFlowsDecoded0
        let allowedOAuthScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOAuthScopes)
        var allowedOAuthScopesDecoded0:[Swift.String]? = nil
        if let allowedOAuthScopesContainer = allowedOAuthScopesContainer {
            allowedOAuthScopesDecoded0 = [Swift.String]()
            for string0 in allowedOAuthScopesContainer {
                if let string0 = string0 {
                    allowedOAuthScopesDecoded0?.append(string0)
                }
            }
        }
        allowedOAuthScopes = allowedOAuthScopesDecoded0
        let allowedOAuthFlowsUserPoolClientDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedOAuthFlowsUserPoolClient)
        allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClientDecoded
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
        let preventUserExistenceErrorsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes.self, forKey: .preventUserExistenceErrors)
        preventUserExistenceErrors = preventUserExistenceErrorsDecoded
        let enableTokenRevocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTokenRevocation)
        enableTokenRevocation = enableTokenRevocationDecoded
        let enablePropagateAdditionalUserContextDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePropagateAdditionalUserContextData)
        enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextDataDecoded
        let authSessionValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .authSessionValidity)
        authSessionValidity = authSessionValidityDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserPoolClientType(accessTokenValidity: \(Swift.String(describing: accessTokenValidity)), allowedOAuthFlows: \(Swift.String(describing: allowedOAuthFlows)), allowedOAuthFlowsUserPoolClient: \(Swift.String(describing: allowedOAuthFlowsUserPoolClient)), allowedOAuthScopes: \(Swift.String(describing: allowedOAuthScopes)), analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)), authSessionValidity: \(Swift.String(describing: authSessionValidity)), callbackURLs: \(Swift.String(describing: callbackURLs)), clientName: \(Swift.String(describing: clientName)), creationDate: \(Swift.String(describing: creationDate)), defaultRedirectURI: \(Swift.String(describing: defaultRedirectURI)), enablePropagateAdditionalUserContextData: \(Swift.String(describing: enablePropagateAdditionalUserContextData)), enableTokenRevocation: \(Swift.String(describing: enableTokenRevocation)), explicitAuthFlows: \(Swift.String(describing: explicitAuthFlows)), idTokenValidity: \(Swift.String(describing: idTokenValidity)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), logoutURLs: \(Swift.String(describing: logoutURLs)), preventUserExistenceErrors: \(Swift.String(describing: preventUserExistenceErrors)), readAttributes: \(Swift.String(describing: readAttributes)), refreshTokenValidity: \(Swift.String(describing: refreshTokenValidity)), supportedIdentityProviders: \(Swift.String(describing: supportedIdentityProviders)), tokenValidityUnits: \(Swift.String(describing: tokenValidityUnits)), userPoolId: \(Swift.String(describing: userPoolId)), writeAttributes: \(Swift.String(describing: writeAttributes)), clientId: \"CONTENT_REDACTED\", clientSecret: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// Contains information about a user pool client.
    public struct UserPoolClientType: Swift.Equatable {
        /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
        public var accessTokenValidity: Swift.Int?
        /// The allowed OAuth flows. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
        public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
        /// Set to true if the client is allowed to follow the OAuth protocol when interacting with Amazon Cognito user pools.
        public var allowedOAuthFlowsUserPoolClient: Swift.Bool?
        /// The OAuth scopes that your app client supports. Possible values that OAuth provides are phone, email, openid, and profile. Possible values that Amazon Web Services provides are aws.cognito.signin.user.admin. Amazon Cognito also supports custom scopes that you create in Resource Servers.
        public var allowedOAuthScopes: [Swift.String]?
        /// The Amazon Pinpoint analytics configuration for the user pool client. Amazon Cognito user pools only support sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the Region where the user pool resides.
        public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
        /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
        public var authSessionValidity: Swift.Int?
        /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
        ///
        /// * Be an absolute URI.
        ///
        /// * Be registered with the authorization server.
        ///
        /// * Not include a fragment component.
        ///
        ///
        /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public var callbackURLs: [Swift.String]?
        /// The ID of the client associated with the user pool.
        public var clientId: Swift.String?
        /// The client name from the user pool request of the client type.
        public var clientName: Swift.String?
        /// The client secret from the user pool request of the client type.
        public var clientSecret: Swift.String?
        /// The date the user pool client was created.
        public var creationDate: ClientRuntime.Date?
        /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:
        ///
        /// * Be an absolute URI.
        ///
        /// * Be registered with the authorization server.
        ///
        /// * Not include a fragment component.
        ///
        ///
        /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public var defaultRedirectURI: Swift.String?
        /// When EnablePropagateAdditionalUserContextData is true, Amazon Cognito accepts an IpAddress value that you send in the UserContextData parameter. The UserContextData parameter sends information to Amazon Cognito advanced security for risk analysis. You can send UserContextData when you sign in Amazon Cognito native users with the InitiateAuth and RespondToAuthChallenge API operations. When EnablePropagateAdditionalUserContextData is false, you can't send your user's source IP address to Amazon Cognito advanced security with unauthenticated API operations. EnablePropagateAdditionalUserContextData doesn't affect whether you can send a source IP address in a ContextData parameter with the authenticated API operations AdminInitiateAuth and AdminRespondToAuthChallenge. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret. For more information about propagation of user context data, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var enablePropagateAdditionalUserContextData: Swift.Bool?
        /// Indicates whether token revocation is activated for the user pool client. When you create a new user pool client, token revocation is activated by default. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html).
        public var enableTokenRevocation: Swift.Bool?
        /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
        ///
        /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
        ///
        /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
        ///
        /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
        ///
        /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
        ///
        /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
        ///
        ///
        /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
        public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
        /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
        public var idTokenValidity: Swift.Int?
        /// The date the user pool client was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// A list of allowed logout URLs for the IdPs.
        public var logoutURLs: [Swift.String]?
        /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
        ///
        /// * ENABLED - This prevents user existence-related errors.
        ///
        /// * LEGACY - This represents the old behavior of Amazon Cognito where user existence related errors aren't prevented.
        public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
        /// The Read-only attributes.
        public var readAttributes: [Swift.String]?
        /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
        public var refreshTokenValidity: Swift.Int
        /// A list of provider names for the IdPs that this client supports. The following are supported: COGNITO, Facebook, Google, SignInWithApple, LoginWithAmazon, and the names of your own SAML and OIDC providers.
        public var supportedIdentityProviders: [Swift.String]?
        /// The time units used to specify the token validity times of each token type: ID, access, and refresh.
        public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
        /// The user pool ID for the user pool client.
        public var userPoolId: Swift.String?
        /// The writeable attributes.
        public var writeAttributes: [Swift.String]?

        public init (
            accessTokenValidity: Swift.Int? = nil,
            allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
            allowedOAuthFlowsUserPoolClient: Swift.Bool? = nil,
            allowedOAuthScopes: [Swift.String]? = nil,
            analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
            authSessionValidity: Swift.Int? = nil,
            callbackURLs: [Swift.String]? = nil,
            clientId: Swift.String? = nil,
            clientName: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            defaultRedirectURI: Swift.String? = nil,
            enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
            enableTokenRevocation: Swift.Bool? = nil,
            explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
            idTokenValidity: Swift.Int? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            logoutURLs: [Swift.String]? = nil,
            preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
            readAttributes: [Swift.String]? = nil,
            refreshTokenValidity: Swift.Int = 0,
            supportedIdentityProviders: [Swift.String]? = nil,
            tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
            userPoolId: Swift.String? = nil,
            writeAttributes: [Swift.String]? = nil
        )
        {
            self.accessTokenValidity = accessTokenValidity
            self.allowedOAuthFlows = allowedOAuthFlows
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.allowedOAuthScopes = allowedOAuthScopes
            self.analyticsConfiguration = analyticsConfiguration
            self.authSessionValidity = authSessionValidity
            self.callbackURLs = callbackURLs
            self.clientId = clientId
            self.clientName = clientName
            self.clientSecret = clientSecret
            self.creationDate = creationDate
            self.defaultRedirectURI = defaultRedirectURI
            self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
            self.enableTokenRevocation = enableTokenRevocation
            self.explicitAuthFlows = explicitAuthFlows
            self.idTokenValidity = idTokenValidity
            self.lastModifiedDate = lastModifiedDate
            self.logoutURLs = logoutURLs
            self.preventUserExistenceErrors = preventUserExistenceErrors
            self.readAttributes = readAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.supportedIdentityProviders = supportedIdentityProviders
            self.tokenValidityUnits = tokenValidityUnits
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
        }
    }

}

extension CognitoIdentityProviderClientTypes.UserPoolDescriptionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case id = "Id"
        case lambdaConfig = "LambdaConfig"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lambdaConfig = self.lambdaConfig {
            try encodeContainer.encode(lambdaConfig, forKey: .lambdaConfig)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A user pool description.
    public struct UserPoolDescriptionType: Swift.Equatable {
        /// The date the user pool description was created.
        public var creationDate: ClientRuntime.Date?
        /// The ID in a user pool description.
        public var id: Swift.String?
        /// The Lambda configuration information in a user pool description.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date the user pool description was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The name in a user pool description.
        public var name: Swift.String?
        /// The user pool status in a user pool description.
        public var status: CognitoIdentityProviderClientTypes.StatusType?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil
        )
        {
            self.creationDate = creationDate
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.status = status
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum UserPoolMfaType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case on
        case `optional`
        case sdkUnknown(Swift.String)

        public static var allCases: [UserPoolMfaType] {
            return [
                .off,
                .on,
                .optional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case .optional: return "OPTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserPoolMfaType(rawValue: rawValue) ?? UserPoolMfaType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolPolicyType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordPolicy = "PasswordPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordPolicy = self.passwordPolicy {
            try encodeContainer.encode(passwordPolicy, forKey: .passwordPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordPolicyDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.PasswordPolicyType.self, forKey: .passwordPolicy)
        passwordPolicy = passwordPolicyDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The policy associated with a user pool.
    public struct UserPoolPolicyType: Swift.Equatable {
        /// The password policy.
        public var passwordPolicy: CognitoIdentityProviderClientTypes.PasswordPolicyType?

        public init (
            passwordPolicy: CognitoIdentityProviderClientTypes.PasswordPolicyType? = nil
        )
        {
            self.passwordPolicy = passwordPolicy
        }
    }

}

extension UserPoolTaggingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UserPoolTaggingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when a user pool tag can't be set or updated.
public struct UserPoolTaggingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserPoolTaggingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserPoolTaggingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case aliasAttributes = "AliasAttributes"
        case arn = "Arn"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case creationDate = "CreationDate"
        case customDomain = "CustomDomain"
        case deletionProtection = "DeletionProtection"
        case deviceConfiguration = "DeviceConfiguration"
        case domain = "Domain"
        case emailConfiguration = "EmailConfiguration"
        case emailConfigurationFailure = "EmailConfigurationFailure"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case estimatedNumberOfUsers = "EstimatedNumberOfUsers"
        case id = "Id"
        case lambdaConfig = "LambdaConfig"
        case lastModifiedDate = "LastModifiedDate"
        case mfaConfiguration = "MfaConfiguration"
        case name = "Name"
        case policies = "Policies"
        case schemaAttributes = "SchemaAttributes"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsConfigurationFailure = "SmsConfigurationFailure"
        case smsVerificationMessage = "SmsVerificationMessage"
        case status = "Status"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolTags = "UserPoolTags"
        case usernameAttributes = "UsernameAttributes"
        case usernameConfiguration = "UsernameConfiguration"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountRecoverySetting = self.accountRecoverySetting {
            try encodeContainer.encode(accountRecoverySetting, forKey: .accountRecoverySetting)
        }
        if let adminCreateUserConfig = self.adminCreateUserConfig {
            try encodeContainer.encode(adminCreateUserConfig, forKey: .adminCreateUserConfig)
        }
        if let aliasAttributes = aliasAttributes {
            var aliasAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliasAttributes)
            for aliasattributetype0 in aliasAttributes {
                try aliasAttributesContainer.encode(aliasattributetype0.rawValue)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let autoVerifiedAttributes = autoVerifiedAttributes {
            var autoVerifiedAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoVerifiedAttributes)
            for verifiedattributetype0 in autoVerifiedAttributes {
                try autoVerifiedAttributesContainer.encode(verifiedattributetype0.rawValue)
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let customDomain = self.customDomain {
            try encodeContainer.encode(customDomain, forKey: .customDomain)
        }
        if let deletionProtection = self.deletionProtection {
            try encodeContainer.encode(deletionProtection.rawValue, forKey: .deletionProtection)
        }
        if let deviceConfiguration = self.deviceConfiguration {
            try encodeContainer.encode(deviceConfiguration, forKey: .deviceConfiguration)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let emailConfiguration = self.emailConfiguration {
            try encodeContainer.encode(emailConfiguration, forKey: .emailConfiguration)
        }
        if let emailConfigurationFailure = self.emailConfigurationFailure {
            try encodeContainer.encode(emailConfigurationFailure, forKey: .emailConfigurationFailure)
        }
        if let emailVerificationMessage = self.emailVerificationMessage {
            try encodeContainer.encode(emailVerificationMessage, forKey: .emailVerificationMessage)
        }
        if let emailVerificationSubject = self.emailVerificationSubject {
            try encodeContainer.encode(emailVerificationSubject, forKey: .emailVerificationSubject)
        }
        if estimatedNumberOfUsers != 0 {
            try encodeContainer.encode(estimatedNumberOfUsers, forKey: .estimatedNumberOfUsers)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lambdaConfig = self.lambdaConfig {
            try encodeContainer.encode(lambdaConfig, forKey: .lambdaConfig)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encodeTimestamp(lastModifiedDate, format: .epochSeconds, forKey: .lastModifiedDate)
        }
        if let mfaConfiguration = self.mfaConfiguration {
            try encodeContainer.encode(mfaConfiguration.rawValue, forKey: .mfaConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policies = self.policies {
            try encodeContainer.encode(policies, forKey: .policies)
        }
        if let schemaAttributes = schemaAttributes {
            var schemaAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schemaAttributes)
            for schemaattributetype0 in schemaAttributes {
                try schemaAttributesContainer.encode(schemaattributetype0)
            }
        }
        if let smsAuthenticationMessage = self.smsAuthenticationMessage {
            try encodeContainer.encode(smsAuthenticationMessage, forKey: .smsAuthenticationMessage)
        }
        if let smsConfiguration = self.smsConfiguration {
            try encodeContainer.encode(smsConfiguration, forKey: .smsConfiguration)
        }
        if let smsConfigurationFailure = self.smsConfigurationFailure {
            try encodeContainer.encode(smsConfigurationFailure, forKey: .smsConfigurationFailure)
        }
        if let smsVerificationMessage = self.smsVerificationMessage {
            try encodeContainer.encode(smsVerificationMessage, forKey: .smsVerificationMessage)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userAttributeUpdateSettings = self.userAttributeUpdateSettings {
            try encodeContainer.encode(userAttributeUpdateSettings, forKey: .userAttributeUpdateSettings)
        }
        if let userPoolAddOns = self.userPoolAddOns {
            try encodeContainer.encode(userPoolAddOns, forKey: .userPoolAddOns)
        }
        if let userPoolTags = userPoolTags {
            var userPoolTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userPoolTags)
            for (dictKey0, userPoolTagsType0) in userPoolTags {
                try userPoolTagsContainer.encode(userPoolTagsType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usernameAttributes = usernameAttributes {
            var usernameAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usernameAttributes)
            for usernameattributetype0 in usernameAttributes {
                try usernameAttributesContainer.encode(usernameattributetype0.rawValue)
            }
        }
        if let usernameConfiguration = self.usernameConfiguration {
            try encodeContainer.encode(usernameConfiguration, forKey: .usernameConfiguration)
        }
        if let verificationMessageTemplate = self.verificationMessageTemplate {
            try encodeContainer.encode(verificationMessageTemplate, forKey: .verificationMessageTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolPolicyType.self, forKey: .policies)
        policies = policiesDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeletionProtectionType.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let lastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let schemaAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.SchemaAttributeType?].self, forKey: .schemaAttributes)
        var schemaAttributesDecoded0:[CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil
        if let schemaAttributesContainer = schemaAttributesContainer {
            schemaAttributesDecoded0 = [CognitoIdentityProviderClientTypes.SchemaAttributeType]()
            for structure0 in schemaAttributesContainer {
                if let structure0 = structure0 {
                    schemaAttributesDecoded0?.append(structure0)
                }
            }
        }
        schemaAttributes = schemaAttributesDecoded0
        let autoVerifiedAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.VerifiedAttributeType?].self, forKey: .autoVerifiedAttributes)
        var autoVerifiedAttributesDecoded0:[CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        if let autoVerifiedAttributesContainer = autoVerifiedAttributesContainer {
            autoVerifiedAttributesDecoded0 = [CognitoIdentityProviderClientTypes.VerifiedAttributeType]()
            for enum0 in autoVerifiedAttributesContainer {
                if let enum0 = enum0 {
                    autoVerifiedAttributesDecoded0?.append(enum0)
                }
            }
        }
        autoVerifiedAttributes = autoVerifiedAttributesDecoded0
        let aliasAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AliasAttributeType?].self, forKey: .aliasAttributes)
        var aliasAttributesDecoded0:[CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil
        if let aliasAttributesContainer = aliasAttributesContainer {
            aliasAttributesDecoded0 = [CognitoIdentityProviderClientTypes.AliasAttributeType]()
            for enum0 in aliasAttributesContainer {
                if let enum0 = enum0 {
                    aliasAttributesDecoded0?.append(enum0)
                }
            }
        }
        aliasAttributes = aliasAttributesDecoded0
        let usernameAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.UsernameAttributeType?].self, forKey: .usernameAttributes)
        var usernameAttributesDecoded0:[CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil
        if let usernameAttributesContainer = usernameAttributesContainer {
            usernameAttributesDecoded0 = [CognitoIdentityProviderClientTypes.UsernameAttributeType]()
            for enum0 in usernameAttributesContainer {
                if let enum0 = enum0 {
                    usernameAttributesDecoded0?.append(enum0)
                }
            }
        }
        usernameAttributes = usernameAttributesDecoded0
        let smsVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsVerificationMessage)
        smsVerificationMessage = smsVerificationMessageDecoded
        let emailVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationMessage)
        emailVerificationMessage = emailVerificationMessageDecoded
        let emailVerificationSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationSubject)
        emailVerificationSubject = emailVerificationSubjectDecoded
        let verificationMessageTemplateDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.self, forKey: .verificationMessageTemplate)
        verificationMessageTemplate = verificationMessageTemplateDecoded
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let userAttributeUpdateSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.self, forKey: .userAttributeUpdateSettings)
        userAttributeUpdateSettings = userAttributeUpdateSettingsDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceConfigurationType.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let estimatedNumberOfUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedNumberOfUsers) ?? 0
        estimatedNumberOfUsers = estimatedNumberOfUsersDecoded
        let emailConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EmailConfigurationType.self, forKey: .emailConfiguration)
        emailConfiguration = emailConfigurationDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
        let userPoolTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userPoolTags)
        var userPoolTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let userPoolTagsContainer = userPoolTagsContainer {
            userPoolTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in userPoolTagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    userPoolTagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        userPoolTags = userPoolTagsDecoded0
        let smsConfigurationFailureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsConfigurationFailure)
        smsConfigurationFailure = smsConfigurationFailureDecoded
        let emailConfigurationFailureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailConfigurationFailure)
        emailConfigurationFailure = emailConfigurationFailureDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let customDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomain)
        customDomain = customDomainDecoded
        let adminCreateUserConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.self, forKey: .adminCreateUserConfig)
        adminCreateUserConfig = adminCreateUserConfigDecoded
        let userPoolAddOnsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolAddOnsType.self, forKey: .userPoolAddOns)
        userPoolAddOns = userPoolAddOnsDecoded
        let usernameConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UsernameConfigurationType.self, forKey: .usernameConfiguration)
        usernameConfiguration = usernameConfigurationDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let accountRecoverySettingDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountRecoverySettingType.self, forKey: .accountRecoverySetting)
        accountRecoverySetting = accountRecoverySettingDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// A container for information about the user pool.
    public struct UserPoolType: Swift.Equatable {
        /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
        public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
        /// The attributes that are aliased in a user pool.
        public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
        /// The Amazon Resource Name (ARN) for the user pool.
        public var arn: Swift.String?
        /// The attributes that are auto-verified in a user pool.
        public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
        /// The date the user pool was created.
        public var creationDate: ClientRuntime.Date?
        /// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be auth.example.com. For more information about adding a custom domain to your user pool, see [Using Your Own Domain for the Hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
        public var customDomain: Swift.String?
        /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
        public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
        /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
        public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
        /// The domain prefix, if the user pool has a domain associated with it.
        public var domain: Swift.String?
        /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.
        public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
        /// Deprecated. Review error codes from API requests with EventSource:cognito-idp.amazonaws.com in CloudTrail for information about problems with user pool email configuration.
        public var emailConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationMessage: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationSubject: Swift.String?
        /// A number estimating the size of the user pool.
        public var estimatedNumberOfUsers: Swift.Int
        /// The ID of the user pool.
        public var id: Swift.String?
        /// The Lambda triggers associated with the user pool.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date the user pool was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// Can be one of the following values:
        ///
        /// * OFF - MFA tokens aren't required and can't be specified during user registration.
        ///
        /// * ON - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.
        ///
        /// * OPTIONAL - Users have the option when registering to create an MFA token.
        public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
        /// The name of the user pool.
        public var name: Swift.String?
        /// The policies associated with the user pool.
        public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
        /// A container with the schema attributes of a user pool.
        public var schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
        /// The reason why the SMS configuration can't send the messages to your users. This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users. InvalidSmsRoleAccessPolicyException The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see [SmsConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html). SNSSandbox The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see [Moving out of the SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
        public var smsConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var smsVerificationMessage: Swift.String?
        /// The status of a user pool.
        public var status: CognitoIdentityProviderClientTypes.StatusType?
        /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
        public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
        /// The user pool add-ons.
        public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
        /// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
        public var userPoolTags: [Swift.String:Swift.String]?
        /// Specifies whether a user can use an email address or phone number as a username when they sign up.
        public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
        /// Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to False, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
        public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
        /// The template for verification messages.
        public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

        public init (
            accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
            adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
            aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
            arn: Swift.String? = nil,
            autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customDomain: Swift.String? = nil,
            deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
            deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
            domain: Swift.String? = nil,
            emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
            emailConfigurationFailure: Swift.String? = nil,
            emailVerificationMessage: Swift.String? = nil,
            emailVerificationSubject: Swift.String? = nil,
            estimatedNumberOfUsers: Swift.Int = 0,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
            name: Swift.String? = nil,
            policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
            schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
            smsConfigurationFailure: Swift.String? = nil,
            smsVerificationMessage: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil,
            userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
            userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
            userPoolTags: [Swift.String:Swift.String]? = nil,
            usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
            usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
            verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
        )
        {
            self.accountRecoverySetting = accountRecoverySetting
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.arn = arn
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.creationDate = creationDate
            self.customDomain = customDomain
            self.deletionProtection = deletionProtection
            self.deviceConfiguration = deviceConfiguration
            self.domain = domain
            self.emailConfiguration = emailConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.mfaConfiguration = mfaConfiguration
            self.name = name
            self.policies = policies
            self.schemaAttributes = schemaAttributes
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsConfigurationFailure = smsConfigurationFailure
            self.smsVerificationMessage = smsVerificationMessage
            self.status = status
            self.userAttributeUpdateSettings = userAttributeUpdateSettings
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.usernameAttributes = usernameAttributes
            self.usernameConfiguration = usernameConfiguration
            self.verificationMessageTemplate = verificationMessageTemplate
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum UserStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archived
        case compromised
        case confirmed
        case forceChangePassword
        case resetRequired
        case unconfirmed
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [UserStatusType] {
            return [
                .archived,
                .compromised,
                .confirmed,
                .forceChangePassword,
                .resetRequired,
                .unconfirmed,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archived: return "ARCHIVED"
            case .compromised: return "COMPROMISED"
            case .confirmed: return "CONFIRMED"
            case .forceChangePassword: return "FORCE_CHANGE_PASSWORD"
            case .resetRequired: return "RESET_REQUIRED"
            case .unconfirmed: return "UNCONFIRMED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UserStatusType(rawValue: rawValue) ?? UserStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case enabled = "Enabled"
        case mfaOptions = "MFAOptions"
        case userCreateDate = "UserCreateDate"
        case userLastModifiedDate = "UserLastModifiedDate"
        case userStatus = "UserStatus"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributetype0 in attributes {
                try attributesContainer.encode(attributetype0)
            }
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let mfaOptions = mfaOptions {
            var mfaOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mfaOptions)
            for mfaoptiontype0 in mfaOptions {
                try mfaOptionsContainer.encode(mfaoptiontype0)
            }
        }
        if let userCreateDate = self.userCreateDate {
            try encodeContainer.encodeTimestamp(userCreateDate, format: .epochSeconds, forKey: .userCreateDate)
        }
        if let userLastModifiedDate = self.userLastModifiedDate {
            try encodeContainer.encodeTimestamp(userLastModifiedDate, format: .epochSeconds, forKey: .userLastModifiedDate)
        }
        if let userStatus = self.userStatus {
            try encodeContainer.encode(userStatus.rawValue, forKey: .userStatus)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .attributes)
        var attributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let userCreateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .userCreateDate)
        userCreateDate = userCreateDateDecoded
        let userLastModifiedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .userLastModifiedDate)
        userLastModifiedDate = userLastModifiedDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let userStatusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserStatusType.self, forKey: .userStatus)
        userStatus = userStatusDecoded
        let mfaOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mfaOptions)
        var mfaOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mfaOptionsContainer = mfaOptionsContainer {
            mfaOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mfaOptionsContainer {
                if let structure0 = structure0 {
                    mfaOptionsDecoded0?.append(structure0)
                }
            }
        }
        mfaOptions = mfaOptionsDecoded0
    }
}

extension CognitoIdentityProviderClientTypes.UserType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserType(attributes: \(Swift.String(describing: attributes)), enabled: \(Swift.String(describing: enabled)), mfaOptions: \(Swift.String(describing: mfaOptions)), userCreateDate: \(Swift.String(describing: userCreateDate)), userLastModifiedDate: \(Swift.String(describing: userLastModifiedDate)), userStatus: \(Swift.String(describing: userStatus)), username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {
    /// A user profile in a Amazon Cognito user pool.
    public struct UserType: Swift.Equatable {
        /// A container with information about the user type attributes.
        public var attributes: [CognitoIdentityProviderClientTypes.AttributeType]?
        /// Specifies whether the user is enabled.
        public var enabled: Swift.Bool
        /// The MFA options for the user.
        public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
        /// The creation date of the user.
        public var userCreateDate: ClientRuntime.Date?
        /// The last modified date of the user.
        public var userLastModifiedDate: ClientRuntime.Date?
        /// The user status. This can be one of the following:
        ///
        /// * UNCONFIRMED - User has been created but not confirmed.
        ///
        /// * CONFIRMED - User has been confirmed.
        ///
        /// * EXTERNAL_PROVIDER - User signed in with a third-party IdP.
        ///
        /// * ARCHIVED - User is no longer active.
        ///
        /// * UNKNOWN - User status isn't known.
        ///
        /// * RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.
        ///
        /// * FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else.
        public var userStatus: CognitoIdentityProviderClientTypes.UserStatusType?
        /// The user name of the user you want to describe.
        public var username: Swift.String?

        public init (
            attributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
            enabled: Swift.Bool = false,
            mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
            userCreateDate: ClientRuntime.Date? = nil,
            userLastModifiedDate: ClientRuntime.Date? = nil,
            userStatus: CognitoIdentityProviderClientTypes.UserStatusType? = nil,
            username: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.enabled = enabled
            self.mfaOptions = mfaOptions
            self.userCreateDate = userCreateDate
            self.userLastModifiedDate = userLastModifiedDate
            self.userStatus = userStatus
            self.username = username
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum UsernameAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case phoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [UsernameAttributeType] {
            return [
                .email,
                .phoneNumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsernameAttributeType(rawValue: rawValue) ?? UsernameAttributeType.sdkUnknown(rawValue)
        }
    }
}

extension CognitoIdentityProviderClientTypes.UsernameConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseSensitive = "CaseSensitive"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseSensitive = self.caseSensitive {
            try encodeContainer.encode(caseSensitive, forKey: .caseSensitive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caseSensitiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .caseSensitive)
        caseSensitive = caseSensitiveDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The username configuration type.
    public struct UsernameConfigurationType: Swift.Equatable {
        /// Specifies whether user name case sensitivity will be applied for all users in the user pool through Amazon Cognito APIs. Valid values include: True Enables case sensitivity for all username input. When this option is set to True, users must sign in using the exact capitalization of their given username, such as “UserName”. This is the default value. False Enables case insensitivity for all username input. For example, when this option is set to False, users can sign in using either "username" or "Username". This option also enables both preferred_username and email alias to be case insensitive, in addition to the username attribute.
        /// This member is required.
        public var caseSensitive: Swift.Bool?

        public init (
            caseSensitive: Swift.Bool? = nil
        )
        {
            self.caseSensitive = caseSensitive
        }
    }

}

extension UsernameExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UsernameExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
public struct UsernameExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message returned when Amazon Cognito throws a user name exists exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UsernameExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UsernameExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CognitoIdentityProviderClientTypes.VerificationMessageTemplateType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultEmailOption = "DefaultEmailOption"
        case emailMessage = "EmailMessage"
        case emailMessageByLink = "EmailMessageByLink"
        case emailSubject = "EmailSubject"
        case emailSubjectByLink = "EmailSubjectByLink"
        case smsMessage = "SmsMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultEmailOption = self.defaultEmailOption {
            try encodeContainer.encode(defaultEmailOption.rawValue, forKey: .defaultEmailOption)
        }
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let emailMessageByLink = self.emailMessageByLink {
            try encodeContainer.encode(emailMessageByLink, forKey: .emailMessageByLink)
        }
        if let emailSubject = self.emailSubject {
            try encodeContainer.encode(emailSubject, forKey: .emailSubject)
        }
        if let emailSubjectByLink = self.emailSubjectByLink {
            try encodeContainer.encode(emailSubjectByLink, forKey: .emailSubjectByLink)
        }
        if let smsMessage = self.smsMessage {
            try encodeContainer.encode(smsMessage, forKey: .smsMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsMessage)
        smsMessage = smsMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let emailSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailSubject)
        emailSubject = emailSubjectDecoded
        let emailMessageByLinkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailMessageByLink)
        emailMessageByLink = emailMessageByLinkDecoded
        let emailSubjectByLinkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailSubjectByLink)
        emailSubjectByLink = emailSubjectByLinkDecoded
        let defaultEmailOptionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DefaultEmailOptionType.self, forKey: .defaultEmailOption)
        defaultEmailOption = defaultEmailOptionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    /// The template for verification messages.
    public struct VerificationMessageTemplateType: Swift.Equatable {
        /// The default email option.
        public var defaultEmailOption: CognitoIdentityProviderClientTypes.DefaultEmailOptionType?
        /// The template for email messages that Amazon Cognito sends to your users. You can set an EmailMessage template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailMessage: Swift.String?
        /// The email message template for sending a confirmation link to the user. You can set an EmailMessageByLink template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailMessageByLink: Swift.String?
        /// The subject line for the email message template. You can set an EmailSubject template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailSubject: Swift.String?
        /// The subject line for the email message template for sending a confirmation link to the user. You can set an EmailSubjectByLink template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailSubjectByLink: Swift.String?
        /// The template for SMS messages that Amazon Cognito sends to your users.
        public var smsMessage: Swift.String?

        public init (
            defaultEmailOption: CognitoIdentityProviderClientTypes.DefaultEmailOptionType? = nil,
            emailMessage: Swift.String? = nil,
            emailMessageByLink: Swift.String? = nil,
            emailSubject: Swift.String? = nil,
            emailSubjectByLink: Swift.String? = nil,
            smsMessage: Swift.String? = nil
        )
        {
            self.defaultEmailOption = defaultEmailOption
            self.emailMessage = emailMessage
            self.emailMessageByLink = emailMessageByLink
            self.emailSubject = emailSubject
            self.emailSubjectByLink = emailSubjectByLink
            self.smsMessage = smsMessage
        }
    }

}

extension CognitoIdentityProviderClientTypes {
    public enum VerifiedAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case phoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifiedAttributeType] {
            return [
                .email,
                .phoneNumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerifiedAttributeType(rawValue: rawValue) ?? VerifiedAttributeType.sdkUnknown(rawValue)
        }
    }
}

extension VerifySoftwareTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifySoftwareTokenInput(friendlyDeviceName: \(Swift.String(describing: friendlyDeviceName)), session: \(Swift.String(describing: session)), userCode: \(Swift.String(describing: userCode)), accessToken: \"CONTENT_REDACTED\")"}
}

extension VerifySoftwareTokenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case friendlyDeviceName = "FriendlyDeviceName"
        case session = "Session"
        case userCode = "UserCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let friendlyDeviceName = self.friendlyDeviceName {
            try encodeContainer.encode(friendlyDeviceName, forKey: .friendlyDeviceName)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let userCode = self.userCode {
            try encodeContainer.encode(userCode, forKey: .userCode)
        }
    }
}

extension VerifySoftwareTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct VerifySoftwareTokenInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose software token you want to verify.
    public var accessToken: Swift.String?
    /// The friendly device name.
    public var friendlyDeviceName: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service.
    public var session: Swift.String?
    /// The one- time password computed using the secret code returned by [AssociateSoftwareToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html).
    /// This member is required.
    public var userCode: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        friendlyDeviceName: Swift.String? = nil,
        session: Swift.String? = nil,
        userCode: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.friendlyDeviceName = friendlyDeviceName
        self.session = session
        self.userCode = userCode
    }
}

struct VerifySoftwareTokenInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let session: Swift.String?
    let userCode: Swift.String?
    let friendlyDeviceName: Swift.String?
}

extension VerifySoftwareTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case friendlyDeviceName = "FriendlyDeviceName"
        case session = "Session"
        case userCode = "UserCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let userCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userCode)
        userCode = userCodeDecoded
        let friendlyDeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .friendlyDeviceName)
        friendlyDeviceName = friendlyDeviceNameDecoded
    }
}

extension VerifySoftwareTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifySoftwareTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EnableSoftwareTokenMFAException" : self = .enableSoftwareTokenMFAException(try EnableSoftwareTokenMFAException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserPoolConfigurationException" : self = .invalidUserPoolConfigurationException(try InvalidUserPoolConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SoftwareTokenMFANotFoundException" : self = .softwareTokenMFANotFoundException(try SoftwareTokenMFANotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifySoftwareTokenOutputError: Swift.Error, Swift.Equatable {
    case codeMismatchException(CodeMismatchException)
    case enableSoftwareTokenMFAException(EnableSoftwareTokenMFAException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case invalidUserPoolConfigurationException(InvalidUserPoolConfigurationException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case softwareTokenMFANotFoundException(SoftwareTokenMFANotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifySoftwareTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VerifySoftwareTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.session = output.session
            self.status = output.status
        } else {
            self.session = nil
            self.status = nil
        }
    }
}

public struct VerifySoftwareTokenOutputResponse: Swift.Equatable {
    /// The session that should be passed both ways in challenge-response calls to the service.
    public var session: Swift.String?
    /// The status of the verify software token.
    public var status: CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType?

    public init (
        session: Swift.String? = nil,
        status: CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType? = nil
    )
    {
        self.session = session
        self.status = status
    }
}

struct VerifySoftwareTokenOutputResponseBody: Swift.Equatable {
    let status: CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType?
    let session: Swift.String?
}

extension VerifySoftwareTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case session = "Session"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType.self, forKey: .status)
        status = statusDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
    }
}

extension CognitoIdentityProviderClientTypes {
    public enum VerifySoftwareTokenResponseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifySoftwareTokenResponseType] {
            return [
                .error,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerifySoftwareTokenResponseType(rawValue: rawValue) ?? VerifySoftwareTokenResponseType.sdkUnknown(rawValue)
        }
    }
}

extension VerifyUserAttributeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyUserAttributeInput(attributeName: \(Swift.String(describing: attributeName)), code: \(Swift.String(describing: code)), accessToken: \"CONTENT_REDACTED\")"}
}

extension VerifyUserAttributeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case attributeName = "AttributeName"
        case code = "Code"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
    }
}

extension VerifyUserAttributeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the request to verify user attributes.
public struct VerifyUserAttributeInput: Swift.Equatable {
    /// A valid access token that Amazon Cognito issued to the user whose user attributes you want to verify.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The attribute name in the request to verify user attributes.
    /// This member is required.
    public var attributeName: Swift.String?
    /// The verification code in the request to verify user attributes.
    /// This member is required.
    public var code: Swift.String?

    public init (
        accessToken: Swift.String? = nil,
        attributeName: Swift.String? = nil,
        code: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.attributeName = attributeName
        self.code = code
    }
}

struct VerifyUserAttributeInputBody: Swift.Equatable {
    let accessToken: Swift.String?
    let attributeName: Swift.String?
    let code: Swift.String?
}

extension VerifyUserAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case attributeName = "AttributeName"
        case code = "Code"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension VerifyUserAttributeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifyUserAttributeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AliasExistsException" : self = .aliasExistsException(try AliasExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CodeMismatchException" : self = .codeMismatchException(try CodeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredCodeException" : self = .expiredCodeException(try ExpiredCodeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalErrorException" : self = .internalErrorException(try InternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PasswordResetRequiredException" : self = .passwordResetRequiredException(try PasswordResetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotConfirmedException" : self = .userNotConfirmedException(try UserNotConfirmedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyUserAttributeOutputError: Swift.Error, Swift.Equatable {
    case aliasExistsException(AliasExistsException)
    case codeMismatchException(CodeMismatchException)
    case expiredCodeException(ExpiredCodeException)
    case forbiddenException(ForbiddenException)
    case internalErrorException(InternalErrorException)
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case notAuthorizedException(NotAuthorizedException)
    case passwordResetRequiredException(PasswordResetRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case userNotConfirmedException(UserNotConfirmedException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyUserAttributeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// A container representing the response from the server from the request to verify user attributes.
public struct VerifyUserAttributeOutputResponse: Swift.Equatable {

    public init () { }
}
