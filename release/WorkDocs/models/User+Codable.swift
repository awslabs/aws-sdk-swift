// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension User: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case emailAddress = "EmailAddress"
        case givenName = "GivenName"
        case id = "Id"
        case locale = "Locale"
        case modifiedTimestamp = "ModifiedTimestamp"
        case organizationId = "OrganizationId"
        case recycleBinFolderId = "RecycleBinFolderId"
        case rootFolderId = "RootFolderId"
        case status = "Status"
        case storage = "Storage"
        case surname = "Surname"
        case timeZoneId = "TimeZoneId"
        case type = "Type"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let givenName = givenName {
            try encodeContainer.encode(givenName, forKey: .givenName)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let locale = locale {
            try encodeContainer.encode(locale.rawValue, forKey: .locale)
        }
        if let modifiedTimestamp = modifiedTimestamp {
            try encodeContainer.encode(modifiedTimestamp.timeIntervalSince1970, forKey: .modifiedTimestamp)
        }
        if let organizationId = organizationId {
            try encodeContainer.encode(organizationId, forKey: .organizationId)
        }
        if let recycleBinFolderId = recycleBinFolderId {
            try encodeContainer.encode(recycleBinFolderId, forKey: .recycleBinFolderId)
        }
        if let rootFolderId = rootFolderId {
            try encodeContainer.encode(rootFolderId, forKey: .rootFolderId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let storage = storage {
            try encodeContainer.encode(storage, forKey: .storage)
        }
        if let surname = surname {
            try encodeContainer.encode(surname, forKey: .surname)
        }
        if let timeZoneId = timeZoneId {
            try encodeContainer.encode(timeZoneId, forKey: .timeZoneId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let givenNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .givenName)
        givenName = givenNameDecoded
        let surnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .surname)
        surname = surnameDecoded
        let organizationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationId)
        organizationId = organizationIdDecoded
        let rootFolderIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rootFolderId)
        rootFolderId = rootFolderIdDecoded
        let recycleBinFolderIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recycleBinFolderId)
        recycleBinFolderId = recycleBinFolderIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(UserStatusType.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UserType.self, forKey: .type)
        type = typeDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let modifiedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedTimestamp)
        modifiedTimestamp = modifiedTimestampDecoded
        let timeZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZoneId)
        timeZoneId = timeZoneIdDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LocaleType.self, forKey: .locale)
        locale = localeDecoded
        let storageDecoded = try containerValues.decodeIfPresent(UserStorageMetadata.self, forKey: .storage)
        storage = storageDecoded
    }
}
