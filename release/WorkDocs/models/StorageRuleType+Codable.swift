// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageRuleType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case storageAllocatedInBytes = "StorageAllocatedInBytes"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageAllocatedInBytes = storageAllocatedInBytes {
            try encodeContainer.encode(storageAllocatedInBytes, forKey: .storageAllocatedInBytes)
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageAllocatedInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .storageAllocatedInBytes)
        storageAllocatedInBytes = storageAllocatedInBytesDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
    }
}
