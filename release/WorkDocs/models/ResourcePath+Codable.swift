// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourcePath: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case components = "Components"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let components = components {
            var componentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .components)
            for resourcepathcomponentlist0 in components {
                try componentsContainer.encode(resourcepathcomponentlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentsContainer = try containerValues.decodeIfPresent([ResourcePathComponent].self, forKey: .components)
        var componentsDecoded0:[ResourcePathComponent]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [ResourcePathComponent]()
            for structure0 in componentsContainer {
                componentsDecoded0?.append(structure0)
            }
        }
        components = componentsDecoded0
    }
}
