// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeFolderContentsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeFolderContentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeFolderContentsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeFolderContentsOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let order = input.operationInput.order {
            let orderQueryItem = URLQueryItem(name: "order".urlPercentEncoding(), value: String(order.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(orderQueryItem)
        }
        if let type = input.operationInput.type {
            let typeQueryItem = URLQueryItem(name: "type".urlPercentEncoding(), value: String(type.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(typeQueryItem)
        }
        if let sort = input.operationInput.sort {
            let sortQueryItem = URLQueryItem(name: "sort".urlPercentEncoding(), value: String(sort.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(sortQueryItem)
        }
        if let include = input.operationInput.include {
            let includeQueryItem = URLQueryItem(name: "include".urlPercentEncoding(), value: String(include).urlPercentEncoding())
            input.builder.withQueryItem(includeQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = URLQueryItem(name: "limit".urlPercentEncoding(), value: String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = URLQueryItem(name: "marker".urlPercentEncoding(), value: String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeFolderContentsInput>
    public typealias MOutput = OperationOutput<DescribeFolderContentsOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<DescribeFolderContentsOutputError>
}
