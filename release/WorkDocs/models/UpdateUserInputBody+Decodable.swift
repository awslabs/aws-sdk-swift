// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateUserInputBody: Equatable {
    public let givenName: String?
    public let surname: String?
    public let type: UserType?
    public let storageRule: StorageRuleType?
    public let timeZoneId: String?
    public let locale: LocaleType?
    public let grantPoweruserPrivileges: BooleanEnumType?
}

extension UpdateUserInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case givenName = "GivenName"
        case grantPoweruserPrivileges = "GrantPoweruserPrivileges"
        case locale = "Locale"
        case storageRule = "StorageRule"
        case surname = "Surname"
        case timeZoneId = "TimeZoneId"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let givenNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .givenName)
        givenName = givenNameDecoded
        let surnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .surname)
        surname = surnameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UserType.self, forKey: .type)
        type = typeDecoded
        let storageRuleDecoded = try containerValues.decodeIfPresent(StorageRuleType.self, forKey: .storageRule)
        storageRule = storageRuleDecoded
        let timeZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZoneId)
        timeZoneId = timeZoneIdDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LocaleType.self, forKey: .locale)
        locale = localeDecoded
        let grantPoweruserPrivilegesDecoded = try containerValues.decodeIfPresent(BooleanEnumType.self, forKey: .grantPoweruserPrivileges)
        grantPoweruserPrivileges = grantPoweruserPrivilegesDecoded
    }
}
