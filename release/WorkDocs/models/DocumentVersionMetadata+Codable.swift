// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentVersionMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentCreatedTimestamp = "ContentCreatedTimestamp"
        case contentModifiedTimestamp = "ContentModifiedTimestamp"
        case contentType = "ContentType"
        case createdTimestamp = "CreatedTimestamp"
        case creatorId = "CreatorId"
        case id = "Id"
        case modifiedTimestamp = "ModifiedTimestamp"
        case name = "Name"
        case signature = "Signature"
        case size = "Size"
        case source = "Source"
        case status = "Status"
        case thumbnail = "Thumbnail"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentCreatedTimestamp = contentCreatedTimestamp {
            try encodeContainer.encode(contentCreatedTimestamp.timeIntervalSince1970, forKey: .contentCreatedTimestamp)
        }
        if let contentModifiedTimestamp = contentModifiedTimestamp {
            try encodeContainer.encode(contentModifiedTimestamp.timeIntervalSince1970, forKey: .contentModifiedTimestamp)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let creatorId = creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let modifiedTimestamp = modifiedTimestamp {
            try encodeContainer.encode(modifiedTimestamp.timeIntervalSince1970, forKey: .modifiedTimestamp)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let size = size {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let source = source {
            var sourceContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .source)
            for (dictKey0, documentsourceurlmap0) in source {
                try sourceContainer.encode(documentsourceurlmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let thumbnail = thumbnail {
            var thumbnailContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .thumbnail)
            for (dictKey0, documentthumbnailurlmap0) in thumbnail {
                try thumbnailContainer.encode(documentthumbnailurlmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .size)
        size = sizeDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signature)
        signature = signatureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DocumentStatusType.self, forKey: .status)
        status = statusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let modifiedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedTimestamp)
        modifiedTimestamp = modifiedTimestampDecoded
        let contentCreatedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .contentCreatedTimestamp)
        contentCreatedTimestamp = contentCreatedTimestampDecoded
        let contentModifiedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .contentModifiedTimestamp)
        contentModifiedTimestamp = contentModifiedTimestampDecoded
        let creatorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let thumbnailContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .thumbnail)
        var thumbnailDecoded0: [String:String]? = nil
        if let thumbnailContainer = thumbnailContainer {
            thumbnailDecoded0 = [String:String]()
            for (key0, urltype0) in thumbnailContainer {
                thumbnailDecoded0?[key0] = urltype0
            }
        }
        thumbnail = thumbnailDecoded0
        let sourceContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .source)
        var sourceDecoded0: [String:String]? = nil
        if let sourceContainer = sourceContainer {
            sourceDecoded0 = [String:String]()
            for (key0, urltype0) in sourceContainer {
                sourceDecoded0?[key0] = urltype0
            }
        }
        source = sourceDecoded0
    }
}
