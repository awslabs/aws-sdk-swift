// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UploadMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case signedHeaders = "SignedHeaders"
        case uploadUrl = "UploadUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signedHeaders = signedHeaders {
            var signedHeadersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .signedHeaders)
            for (dictKey0, signedheadermap0) in signedHeaders {
                try signedHeadersContainer.encode(signedheadermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let uploadUrl = uploadUrl {
            try encodeContainer.encode(uploadUrl, forKey: .uploadUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadUrl)
        uploadUrl = uploadUrlDecoded
        let signedHeadersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .signedHeaders)
        var signedHeadersDecoded0: [String:String]? = nil
        if let signedHeadersContainer = signedHeadersContainer {
            signedHeadersDecoded0 = [String:String]()
            for (key0, headervaluetype0) in signedHeadersContainer {
                signedHeadersDecoded0?[key0] = headervaluetype0
            }
        }
        signedHeaders = signedHeadersDecoded0
    }
}
