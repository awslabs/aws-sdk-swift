// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserStorageMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case storageRule = "StorageRule"
        case storageUtilizedInBytes = "StorageUtilizedInBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageRule = storageRule {
            try encodeContainer.encode(storageRule, forKey: .storageRule)
        }
        if let storageUtilizedInBytes = storageUtilizedInBytes {
            try encodeContainer.encode(storageUtilizedInBytes, forKey: .storageUtilizedInBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageUtilizedInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .storageUtilizedInBytes)
        storageUtilizedInBytes = storageUtilizedInBytesDecoded
        let storageRuleDecoded = try containerValues.decodeIfPresent(StorageRuleType.self, forKey: .storageRule)
        storageRule = storageRuleDecoded
    }
}
