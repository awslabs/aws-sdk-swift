// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The WorkDocs API is designed for the following use cases:</p>
///         <ul>
///             <li>
///                 <p>File Migration: File migration applications are supported for users who
///                     want to migrate their files from an on-premises or off-premises file system or
///                     service. Users can insert files into a user directory structure, as well as
///                     allow for basic metadata changes, such as modifications to the permissions of
///                     files.</p>
///             </li>
///             <li>
///                 <p>Security: Support security applications are supported for users who have
///                     additional security needs, such as antivirus or data loss prevention. The API
///                     actions, along with AWS CloudTrail, allow these applications to detect when
///                     changes occur in Amazon WorkDocs. Then, the application can take the necessary
///                     actions and replace the target file. If the target file violates the policy, the
///                     application can also choose to email the user.</p>
///             </li>
///             <li>
///                 <p>eDiscovery/Analytics: General administrative applications are supported,
///                     such as eDiscovery and analytics. These applications can choose to mimic or
///                     record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to
///                     replicate data for eDiscovery, backup, or analytical applications.</p>
///             </li>
///          </ul>
///         <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed.
///             They not only require the use of the AWS SDK, but also allow for the exclusive use of
///             IAM users and roles to help facilitate access, trust, and permission policies. By
///             creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM
///             user gains full administrative visibility into the entire Amazon WorkDocs site (or as
///             set in the IAM policy). This includes, but is not limited to, the ability to modify file
///             permissions and upload any file to any user. This allows developers to perform the three
///             use cases above, as well as give users the ability to grant access on a selective basis
///             using the IAM model.</p>
public protocol WorkDocsClientProtocol {
    /// <p>Aborts the upload of the specified document version that was previously initiated
    ///             by <a>InitiateDocumentVersionUpload</a>. The client should make this call
    ///             only when it no longer intends to upload the document version, or fails to do
    ///             so.</p>
    func abortDocumentVersionUpload(input: AbortDocumentVersionUploadInput, completion: @escaping (SdkResult<AbortDocumentVersionUploadOutputResponse, AbortDocumentVersionUploadOutputError>) -> Void)
    /// <p>Activates the specified user. Only active users can access Amazon
    ///             WorkDocs.</p>
    func activateUser(input: ActivateUserInput, completion: @escaping (SdkResult<ActivateUserOutputResponse, ActivateUserOutputError>) -> Void)
    /// <p>Creates a set of permissions for the specified folder or document. The resource
    ///             permissions are overwritten if the principals already have different
    ///             permissions.</p>
    func addResourcePermissions(input: AddResourcePermissionsInput, completion: @escaping (SdkResult<AddResourcePermissionsOutputResponse, AddResourcePermissionsOutputError>) -> Void)
    /// <p>Adds a new comment to the specified document version.</p>
    func createComment(input: CreateCommentInput, completion: @escaping (SdkResult<CreateCommentOutputResponse, CreateCommentOutputError>) -> Void)
    /// <p>Adds one or more custom properties to the specified resource (a folder, document,
    ///             or version).</p>
    func createCustomMetadata(input: CreateCustomMetadataInput, completion: @escaping (SdkResult<CreateCustomMetadataOutputResponse, CreateCustomMetadataOutputError>) -> Void)
    /// <p>Creates a folder with the specified name and parent folder.</p>
    func createFolder(input: CreateFolderInput, completion: @escaping (SdkResult<CreateFolderOutputResponse, CreateFolderOutputError>) -> Void)
    /// <p>Adds the specified list of labels to the given resource (a document or
    ///             folder)</p>
    func createLabels(input: CreateLabelsInput, completion: @escaping (SdkResult<CreateLabelsOutputResponse, CreateLabelsOutputError>) -> Void)
    /// <p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a
    ///             confirmation message, and must confirm the subscription.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/subscribe-notifications.html">Subscribe to
    ///                 Notifications</a> in the <i>Amazon WorkDocs Developer
    ///             Guide</i>.</p>
    func createNotificationSubscription(input: CreateNotificationSubscriptionInput, completion: @escaping (SdkResult<CreateNotificationSubscriptionOutputResponse, CreateNotificationSubscriptionOutputError>) -> Void)
    /// <p>Creates a user in a Simple AD or Microsoft AD directory. The status of a newly
    ///             created user is "ACTIVE". New users can access Amazon WorkDocs.</p>
    func createUser(input: CreateUserInput, completion: @escaping (SdkResult<CreateUserOutputResponse, CreateUserOutputError>) -> Void)
    /// <p>Deactivates the specified user, which revokes the user's access to Amazon
    ///             WorkDocs.</p>
    func deactivateUser(input: DeactivateUserInput, completion: @escaping (SdkResult<DeactivateUserOutputResponse, DeactivateUserOutputError>) -> Void)
    /// <p>Deletes the specified comment from the document version.</p>
    func deleteComment(input: DeleteCommentInput, completion: @escaping (SdkResult<DeleteCommentOutputResponse, DeleteCommentOutputError>) -> Void)
    /// <p>Deletes custom metadata from the specified resource.</p>
    func deleteCustomMetadata(input: DeleteCustomMetadataInput, completion: @escaping (SdkResult<DeleteCustomMetadataOutputResponse, DeleteCustomMetadataOutputError>) -> Void)
    /// <p>Permanently deletes the specified document and its associated metadata.</p>
    func deleteDocument(input: DeleteDocumentInput, completion: @escaping (SdkResult<DeleteDocumentOutputResponse, DeleteDocumentOutputError>) -> Void)
    /// <p>Permanently deletes the specified folder and its contents.</p>
    func deleteFolder(input: DeleteFolderInput, completion: @escaping (SdkResult<DeleteFolderOutputResponse, DeleteFolderOutputError>) -> Void)
    /// <p>Deletes the contents of the specified folder.</p>
    func deleteFolderContents(input: DeleteFolderContentsInput, completion: @escaping (SdkResult<DeleteFolderContentsOutputResponse, DeleteFolderContentsOutputError>) -> Void)
    /// <p>Deletes the specified list of labels from a resource.</p>
    func deleteLabels(input: DeleteLabelsInput, completion: @escaping (SdkResult<DeleteLabelsOutputResponse, DeleteLabelsOutputError>) -> Void)
    /// <p>Deletes the specified subscription from the specified organization.</p>
    func deleteNotificationSubscription(input: DeleteNotificationSubscriptionInput, completion: @escaping (SdkResult<DeleteNotificationSubscriptionOutputResponse, DeleteNotificationSubscriptionOutputError>) -> Void)
    /// <p>Deletes the specified user from a Simple AD or Microsoft AD directory.</p>
    func deleteUser(input: DeleteUserInput, completion: @escaping (SdkResult<DeleteUserOutputResponse, DeleteUserOutputError>) -> Void)
    /// <p>Describes the user activities in a specified time period.</p>
    func describeActivities(input: DescribeActivitiesInput, completion: @escaping (SdkResult<DescribeActivitiesOutputResponse, DescribeActivitiesOutputError>) -> Void)
    /// <p>List all the comments for the specified document version.</p>
    func describeComments(input: DescribeCommentsInput, completion: @escaping (SdkResult<DescribeCommentsOutputResponse, DescribeCommentsOutputError>) -> Void)
    /// <p>Retrieves the document versions for the specified document.</p>
    ///         <p>By default, only active versions are returned.</p>
    func describeDocumentVersions(input: DescribeDocumentVersionsInput, completion: @escaping (SdkResult<DescribeDocumentVersionsOutputResponse, DescribeDocumentVersionsOutputError>) -> Void)
    /// <p>Describes the contents of the specified folder, including its documents and
    ///             subfolders.</p>
    ///         <p>By default, Amazon WorkDocs returns the first 100 active document and folder
    ///             metadata items. If there are more results, the response includes a marker that you can
    ///             use to request the next set of results. You can also request initialized
    ///             documents.</p>
    func describeFolderContents(input: DescribeFolderContentsInput, completion: @escaping (SdkResult<DescribeFolderContentsOutputResponse, DescribeFolderContentsOutputError>) -> Void)
    /// <p>Describes the groups specified by the query. Groups are defined by the underlying
    ///             Active Directory.</p>
    func describeGroups(input: DescribeGroupsInput, completion: @escaping (SdkResult<DescribeGroupsOutputResponse, DescribeGroupsOutputError>) -> Void)
    /// <p>Lists the specified notification subscriptions.</p>
    func describeNotificationSubscriptions(input: DescribeNotificationSubscriptionsInput, completion: @escaping (SdkResult<DescribeNotificationSubscriptionsOutputResponse, DescribeNotificationSubscriptionsOutputError>) -> Void)
    /// <p>Describes the permissions of a specified resource.</p>
    func describeResourcePermissions(input: DescribeResourcePermissionsInput, completion: @escaping (SdkResult<DescribeResourcePermissionsOutputResponse, DescribeResourcePermissionsOutputError>) -> Void)
    /// <p>Describes the current user's special folders; the <code>RootFolder</code> and the
    ///                 <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and
    ///             folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid
    ///             action for SigV4 (administrative API) clients.</p>
    ///         <p>This action requires an authentication token. To get an authentication token,
    ///             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
    ///                 Control for User Applications</a> in the
    ///             <i>Amazon
    ///             WorkDocs Developer Guide</i>.</p>
    func describeRootFolders(input: DescribeRootFoldersInput, completion: @escaping (SdkResult<DescribeRootFoldersOutputResponse, DescribeRootFoldersOutputError>) -> Void)
    /// <p>Describes the specified users. You can describe all users or filter the results
    ///             (for example, by status or organization).</p>
    ///         <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there
    ///             are more results, the response includes a marker that you can use to request the next
    ///             set of results.</p>
    func describeUsers(input: DescribeUsersInput, completion: @escaping (SdkResult<DescribeUsersOutputResponse, DescribeUsersOutputError>) -> Void)
    /// <p>Retrieves details of the current user for whom the authentication token was
    ///             generated. This is not a valid action for SigV4 (administrative API) clients.</p>
    ///         <p>This action requires an authentication token. To get an authentication token,
    ///             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
    ///                 Control for User Applications</a> in the
    ///             <i>Amazon
    ///                 WorkDocs Developer Guide</i>.</p>
    func getCurrentUser(input: GetCurrentUserInput, completion: @escaping (SdkResult<GetCurrentUserOutputResponse, GetCurrentUserOutputError>) -> Void)
    /// <p>Retrieves details of a document.</p>
    func getDocument(input: GetDocumentInput, completion: @escaping (SdkResult<GetDocumentOutputResponse, GetDocumentOutputError>) -> Void)
    /// <p>Retrieves the path information (the hierarchy from the root folder) for the
    ///             requested document.</p>
    ///         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
    ///             requested document and only includes the IDs of the parent folders in the path. You can
    ///             limit the maximum number of levels. You can also request the names of the parent
    ///             folders.</p>
    func getDocumentPath(input: GetDocumentPathInput, completion: @escaping (SdkResult<GetDocumentPathOutputResponse, GetDocumentPathOutputError>) -> Void)
    /// <p>Retrieves version metadata for the specified document.</p>
    func getDocumentVersion(input: GetDocumentVersionInput, completion: @escaping (SdkResult<GetDocumentVersionOutputResponse, GetDocumentVersionOutputError>) -> Void)
    /// <p>Retrieves the metadata of the specified folder.</p>
    func getFolder(input: GetFolderInput, completion: @escaping (SdkResult<GetFolderOutputResponse, GetFolderOutputError>) -> Void)
    /// <p>Retrieves the path information (the hierarchy from the root folder) for the
    ///             specified folder.</p>
    ///         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
    ///             requested folder and only includes the IDs of the parent folders in the path. You can
    ///             limit the maximum number of levels. You can also request the parent folder
    ///             names.</p>
    func getFolderPath(input: GetFolderPathInput, completion: @escaping (SdkResult<GetFolderPathOutputResponse, GetFolderPathOutputError>) -> Void)
    /// <p>Retrieves a collection of resources, including folders and documents. The only
    ///             <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>.</p>
    func getResources(input: GetResourcesInput, completion: @escaping (SdkResult<GetResourcesOutputResponse, GetResourcesOutputError>) -> Void)
    /// <p>Creates a new document object and version object.</p>
    ///         <p>The client specifies the parent folder ID and name of the document to upload. The
    ///             ID is optionally specified when creating a new version of an existing document. This is
    ///             the first step to upload a document. Next, upload the document to the URL returned from
    ///             the call, and then call <a>UpdateDocumentVersion</a>.</p>
    ///         <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>
    func initiateDocumentVersionUpload(input: InitiateDocumentVersionUploadInput, completion: @escaping (SdkResult<InitiateDocumentVersionUploadOutputResponse, InitiateDocumentVersionUploadOutputError>) -> Void)
    /// <p>Removes all the permissions from the specified resource.</p>
    func removeAllResourcePermissions(input: RemoveAllResourcePermissionsInput, completion: @escaping (SdkResult<RemoveAllResourcePermissionsOutputResponse, RemoveAllResourcePermissionsOutputError>) -> Void)
    /// <p>Removes the permission for the specified principal from the specified
    ///             resource.</p>
    func removeResourcePermission(input: RemoveResourcePermissionInput, completion: @escaping (SdkResult<RemoveResourcePermissionOutputResponse, RemoveResourcePermissionOutputError>) -> Void)
    /// <p>Updates the specified attributes of a document. The user must have access to both
    ///             the document and its parent folder, if applicable.</p>
    func updateDocument(input: UpdateDocumentInput, completion: @escaping (SdkResult<UpdateDocumentOutputResponse, UpdateDocumentOutputError>) -> Void)
    /// <p>Changes the status of the document version to ACTIVE. </p>
    ///         <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step
    ///             in a document upload, after the client uploads the document to an S3-presigned URL
    ///             returned by <a>InitiateDocumentVersionUpload</a>. </p>
    func updateDocumentVersion(input: UpdateDocumentVersionInput, completion: @escaping (SdkResult<UpdateDocumentVersionOutputResponse, UpdateDocumentVersionOutputError>) -> Void)
    /// <p>Updates the specified attributes of the specified folder. The user must have access
    ///             to both the folder and its parent folder, if applicable.</p>
    func updateFolder(input: UpdateFolderInput, completion: @escaping (SdkResult<UpdateFolderOutputResponse, UpdateFolderOutputError>) -> Void)
    /// <p>Updates the specified attributes of the specified user, and grants or revokes
    ///             administrative privileges to the Amazon WorkDocs site.</p>
    func updateUser(input: UpdateUserInput, completion: @escaping (SdkResult<UpdateUserOutputResponse, UpdateUserOutputError>) -> Void)
}
