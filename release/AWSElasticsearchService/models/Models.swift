// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AcceptInboundCrossClusterSearchConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let crossClusterSearchConnectionId = crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())/accept"
    }
}

/// Container for the parameters to the [AcceptInboundCrossClusterSearchConnection] operation.
public struct AcceptInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to accept.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct AcceptInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension AcceptInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcceptInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AcceptInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a [AcceptInboundCrossClusterSearchConnection] operation. Contains details of accepted inbound connection.
public struct AcceptInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the [InboundCrossClusterSearchConnection] of accepted inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct AcceptInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension AcceptInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.AccessPoliciesStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
    public struct AccessPoliciesStatus: Swift.Equatable {
        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See [ Configuring Access Policies](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies)for more information.
        /// This member is required.
        public var options: Swift.String?
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
    }
}

extension AddTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/tags"
    }
}

/// Container for the parameters to the [AddTags] operation. Specify the tags that you want to attach to the Elasticsearch domain.
public struct AddTagsInput: Swift.Equatable {
    /// Specify the ARN for which you want to add the tags.
    /// This member is required.
    public var arn: Swift.String?
    /// List of Tag that need to be added for the Elasticsearch domain.
    /// This member is required.
    public var tagList: [ElasticsearchClientTypes.Tag]?

    public init (
        arn: Swift.String? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.arn = arn
        self.tagList = tagList
    }
}

struct AddTagsInputBody: Swift.Equatable {
    let arn: Swift.String?
    let tagList: [ElasticsearchClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticsearchClientTypes.AdditionalLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = self.limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvalue0 in limitValues {
                try limitValuesContainer.encode(limitvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// List of limits that are specific to a given InstanceType and for each of it's [InstanceRole] .
    public struct AdditionalLimit: Swift.Equatable {
        /// Name of Additional Limit is specific to a given InstanceType and for each of it's [InstanceRole] etc.
        ///
        ///
        ///
        ///
        ///
        /// Attributes and their details:
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * MaximumNumberOfDataNodesSupported
        ///  This attribute will be present in Master node only to specify how much data nodes upto which given [ESPartitionInstanceType] can support as master node.
        /// * MaximumNumberOfDataNodesWithoutMasterNode
        ///  This attribute will be present in Data node only to specify how much data nodes of given [ESPartitionInstanceType] upto which you don't need any master nodes to govern them.
        public var limitName: Swift.String?
        /// Value for given [AdditionalLimit$LimitName] .
        public var limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension ElasticsearchClientTypes.AdvancedOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, advancedOptions0) in options {
                try optionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the advanced options for the specified Elasticsearch domain. Currently, the following advanced options are available:
    ///
    /// * Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    ///
    /// * Option to specify the percentage of heap space that is allocated to field data. By default, this setting is unbounded.
    ///
    ///
    /// For more information, see [Configuring Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options).
    public struct AdvancedOptionsStatus: Swift.Equatable {
        /// Specifies the status of advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: [Swift.String:Swift.String]?
        /// Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:Swift.String]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anonymousAuthDisableDate = "AnonymousAuthDisableDate"
        case anonymousAuthEnabled = "AnonymousAuthEnabled"
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case samlOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anonymousAuthDisableDate = self.anonymousAuthDisableDate {
            try encodeContainer.encodeTimestamp(anonymousAuthDisableDate, format: .epochSeconds, forKey: .anonymousAuthDisableDate)
        }
        if let anonymousAuthEnabled = self.anonymousAuthEnabled {
            try encodeContainer.encode(anonymousAuthEnabled, forKey: .anonymousAuthEnabled)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = self.internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let samlOptions = self.samlOptions {
            try encodeContainer.encode(samlOptions, forKey: .samlOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let samlOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLOptionsOutput.self, forKey: .samlOptions)
        samlOptions = samlOptionsDecoded
        let anonymousAuthDisableDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .anonymousAuthDisableDate)
        anonymousAuthDisableDate = anonymousAuthDisableDateDecoded
        let anonymousAuthEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .anonymousAuthEnabled)
        anonymousAuthEnabled = anonymousAuthEnabledDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled.
    public struct AdvancedSecurityOptions: Swift.Equatable {
        /// Specifies the Anonymous Auth Disable Date when Anonymous Auth is enabled.
        public var anonymousAuthDisableDate: ClientRuntime.Date?
        /// True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.
        public var anonymousAuthEnabled: Swift.Bool?
        /// True if advanced security is enabled.
        public var enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Describes the SAML application configured for a domain.
        public var samlOptions: ElasticsearchClientTypes.SAMLOptionsOutput?

        public init (
            anonymousAuthDisableDate: ClientRuntime.Date? = nil,
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            samlOptions: ElasticsearchClientTypes.SAMLOptionsOutput? = nil
        )
        {
            self.anonymousAuthDisableDate = anonymousAuthDisableDate
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.samlOptions = samlOptions
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anonymousAuthEnabled = "AnonymousAuthEnabled"
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case masterUserOptions = "MasterUserOptions"
        case samlOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anonymousAuthEnabled = self.anonymousAuthEnabled {
            try encodeContainer.encode(anonymousAuthEnabled, forKey: .anonymousAuthEnabled)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = self.internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let masterUserOptions = self.masterUserOptions {
            try encodeContainer.encode(masterUserOptions, forKey: .masterUserOptions)
        }
        if let samlOptions = self.samlOptions {
            try encodeContainer.encode(samlOptions, forKey: .samlOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let masterUserOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.MasterUserOptions.self, forKey: .masterUserOptions)
        masterUserOptions = masterUserOptionsDecoded
        let samlOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLOptionsInput.self, forKey: .samlOptions)
        samlOptions = samlOptionsDecoded
        let anonymousAuthEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .anonymousAuthEnabled)
        anonymousAuthEnabled = anonymousAuthEnabledDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled, master username and password (if internal database is enabled), and master user ARN (if IAM is enabled).
    public struct AdvancedSecurityOptionsInput: Swift.Equatable {
        /// True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.
        public var anonymousAuthEnabled: Swift.Bool?
        /// True if advanced security is enabled.
        public var enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Credentials for the master user: username and password, ARN, or both.
        public var masterUserOptions: ElasticsearchClientTypes.MasterUserOptions?
        /// Specifies the SAML application configuration for the domain.
        public var samlOptions: ElasticsearchClientTypes.SAMLOptionsInput?

        public init (
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            masterUserOptions: ElasticsearchClientTypes.MasterUserOptions? = nil,
            samlOptions: ElasticsearchClientTypes.SAMLOptionsInput? = nil
        )
        {
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.masterUserOptions = masterUserOptions
            self.samlOptions = samlOptions
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the status of advanced security options for the specified Elasticsearch domain.
    public struct AdvancedSecurityOptionsStatus: Swift.Equatable {
        /// Specifies advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.AdvancedSecurityOptions?
        /// Status of the advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension AssociatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/packages/associate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

/// Container for request parameters to [AssociatePackage] operation.
public struct AssociatePackageInput: Swift.Equatable {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct AssociatePackageInputBody: Swift.Equatable {
}

extension AssociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AssociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

/// Container for response returned by [AssociatePackage] operation.
public struct AssociatePackageOutputResponse: Swift.Equatable {
    ///     DomainPackageDetails
    public var domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct AssociatePackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?
}

extension AssociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension AuthorizeVpcEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = self.account {
            try encodeContainer.encode(account, forKey: .account)
        }
    }
}

extension AuthorizeVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/authorizeVpcEndpointAccess"
    }
}

/// Container for request parameters to the [AuthorizeVpcEndpointAccess] operation. Specifies the account to be permitted to manage VPC endpoints against the domain.
public struct AuthorizeVpcEndpointAccessInput: Swift.Equatable {
    /// The account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain to provide access to.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

struct AuthorizeVpcEndpointAccessInputBody: Swift.Equatable {
    let account: Swift.String?
}

extension AuthorizeVpcEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
    }
}

extension AuthorizeVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AuthorizeVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AuthorizeVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AuthorizeVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AuthorizeVpcEndpointAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedPrincipal = output.authorizedPrincipal
        } else {
            self.authorizedPrincipal = nil
        }
    }
}

/// Container for response parameters to the [AuthorizeVpcEndpointAccess] operation. Contains the account ID and the type of the account being authorized to access the VPC endpoint.
public struct AuthorizeVpcEndpointAccessOutputResponse: Swift.Equatable {
    /// Information about the account or service that was provided access to the domain.
    /// This member is required.
    public var authorizedPrincipal: ElasticsearchClientTypes.AuthorizedPrincipal?

    public init (
        authorizedPrincipal: ElasticsearchClientTypes.AuthorizedPrincipal? = nil
    )
    {
        self.authorizedPrincipal = authorizedPrincipal
    }
}

struct AuthorizeVpcEndpointAccessOutputResponseBody: Swift.Equatable {
    let authorizedPrincipal: ElasticsearchClientTypes.AuthorizedPrincipal?
}

extension AuthorizeVpcEndpointAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedPrincipal = "AuthorizedPrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedPrincipalDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AuthorizedPrincipal.self, forKey: .authorizedPrincipal)
        authorizedPrincipal = authorizedPrincipalDecoded
    }
}

extension ElasticsearchClientTypes.AuthorizedPrincipal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case principal = "Principal"
        case principalType = "PrincipalType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principal = self.principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let principalType = self.principalType {
            try encodeContainer.encode(principalType.rawValue, forKey: .principalType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PrincipalType.self, forKey: .principalType)
        principalType = principalTypeDecoded
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Information about an account or service that has access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
    public struct AuthorizedPrincipal: Swift.Equatable {
        /// The IAM principal that is allowed access to the domain.
        public var principal: Swift.String?
        /// The type of principal.
        public var principalType: ElasticsearchClientTypes.PrincipalType?

        public init (
            principal: Swift.String? = nil,
            principalType: ElasticsearchClientTypes.PrincipalType? = nil
        )
        {
            self.principal = principal
            self.principalType = principalType
        }
    }

}

extension ElasticsearchClientTypes.AutoTune: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTuneDetails = "AutoTuneDetails"
        case autoTuneType = "AutoTuneType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoTuneDetails = self.autoTuneDetails {
            try encodeContainer.encode(autoTuneDetails, forKey: .autoTuneDetails)
        }
        if let autoTuneType = self.autoTuneType {
            try encodeContainer.encode(autoTuneType.rawValue, forKey: .autoTuneType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTuneTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneType.self, forKey: .autoTuneType)
        autoTuneType = autoTuneTypeDecoded
        let autoTuneDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDetails.self, forKey: .autoTuneDetails)
        autoTuneDetails = autoTuneDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune type and Auto-Tune action details.
    public struct AutoTune: Swift.Equatable {
        /// Specifies details of the Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails?
        /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
        public var autoTuneType: ElasticsearchClientTypes.AutoTuneType?

        public init (
            autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails? = nil,
            autoTuneType: ElasticsearchClientTypes.AutoTuneType? = nil
        )
        {
            self.autoTuneDetails = autoTuneDetails
            self.autoTuneType = autoTuneType
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
    public enum AutoTuneDesiredState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneDesiredState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneDesiredState(rawValue: rawValue) ?? AutoTuneDesiredState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.AutoTuneDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledAutoTuneDetails = "ScheduledAutoTuneDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduledAutoTuneDetails = self.scheduledAutoTuneDetails {
            try encodeContainer.encode(scheduledAutoTuneDetails, forKey: .scheduledAutoTuneDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAutoTuneDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneDetails.self, forKey: .scheduledAutoTuneDetails)
        scheduledAutoTuneDetails = scheduledAutoTuneDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of the Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct AutoTuneDetails: Swift.Equatable {
        /// Specifies details of the scheduled Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails?

        public init (
            scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails? = nil
        )
        {
            self.scheduledAutoTuneDetails = scheduledAutoTuneDetails
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneMaintenanceSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cronExpressionForRecurrence = "CronExpressionForRecurrence"
        case duration = "Duration"
        case startAt = "StartAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cronExpressionForRecurrence = self.cronExpressionForRecurrence {
            try encodeContainer.encode(cronExpressionForRecurrence, forKey: .cronExpressionForRecurrence)
        }
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let startAt = self.startAt {
            try encodeContainer.encodeTimestamp(startAt, format: .epochSeconds, forKey: .startAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startAt)
        startAt = startAtDecoded
        let durationDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.Duration.self, forKey: .duration)
        duration = durationDecoded
        let cronExpressionForRecurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cronExpressionForRecurrence)
        cronExpressionForRecurrence = cronExpressionForRecurrenceDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune maitenance schedule. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct AutoTuneMaintenanceSchedule: Swift.Equatable {
        /// Specifies cron expression for a recurring maintenance schedule. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var cronExpressionForRecurrence: Swift.String?
        /// Specifies maintenance schedule duration: duration value and duration unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var duration: ElasticsearchClientTypes.Duration?
        /// Specifies timestamp at which Auto-Tune maintenance schedule start.
        public var startAt: ClientRuntime.Date?

        public init (
            cronExpressionForRecurrence: Swift.String? = nil,
            duration: ElasticsearchClientTypes.Duration? = nil,
            startAt: ClientRuntime.Date? = nil
        )
        {
            self.cronExpressionForRecurrence = cronExpressionForRecurrence
            self.duration = duration
            self.startAt = startAt
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
        case rollbackOnDisable = "RollbackOnDisable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedule0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedule0)
            }
        }
        if let rollbackOnDisable = self.rollbackOnDisable {
            try encodeContainer.encode(rollbackOnDisable.rawValue, forKey: .rollbackOnDisable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let rollbackOnDisableDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.RollbackOnDisable.self, forKey: .rollbackOnDisable)
        rollbackOnDisable = rollbackOnDisableDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain, rollback state when disabling Auto-Tune options and list of maintenance schedules.
    public struct AutoTuneOptions: Swift.Equatable {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public var desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?
        /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
        public var rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable?

        public init (
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil,
            rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
            self.rollbackOnDisable = rollbackOnDisable
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedule0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsInput: Swift.Equatable {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public var desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?

        public init (
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsOutput: Swift.Equatable {
        /// Specifies the error message while enabling or disabling the Auto-Tune.
        public var errorMessage: Swift.String?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        public var state: ElasticsearchClientTypes.AutoTuneState?

        public init (
            errorMessage: Swift.String? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil
        )
        {
            self.errorMessage = errorMessage
            self.state = state
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the status of Auto-Tune options for the specified Elasticsearch domain.
    public struct AutoTuneOptionsStatus: Swift.Equatable {
        /// Specifies Auto-Tune options for the specified Elasticsearch domain.
        public var options: ElasticsearchClientTypes.AutoTuneOptions?
        /// Specifies Status of the Auto-Tune options for the specified Elasticsearch domain.
        public var status: ElasticsearchClientTypes.AutoTuneStatus?

        public init (
            options: ElasticsearchClientTypes.AutoTuneOptions? = nil,
            status: ElasticsearchClientTypes.AutoTuneStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune state for the Elasticsearch domain. For valid states see the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html).
    public enum AutoTuneState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabledAndRollbackComplete
        case disabledAndRollbackError
        case disabledAndRollbackInProgress
        case disabledAndRollbackScheduled
        case disableInProgress
        case enabled
        case enableInProgress
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneState] {
            return [
                .disabled,
                .disabledAndRollbackComplete,
                .disabledAndRollbackError,
                .disabledAndRollbackInProgress,
                .disabledAndRollbackScheduled,
                .disableInProgress,
                .enabled,
                .enableInProgress,
                .error,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabledAndRollbackComplete: return "DISABLED_AND_ROLLBACK_COMPLETE"
            case .disabledAndRollbackError: return "DISABLED_AND_ROLLBACK_ERROR"
            case .disabledAndRollbackInProgress: return "DISABLED_AND_ROLLBACK_IN_PROGRESS"
            case .disabledAndRollbackScheduled: return "DISABLED_AND_ROLLBACK_SCHEDULED"
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case .enableInProgress: return "ENABLE_IN_PROGRESS"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneState(rawValue: rawValue) ?? AutoTuneState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.AutoTuneStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case errorMessage = "ErrorMessage"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let pendingDeletion = self.pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encodeTimestamp(updateDate, format: .epochSeconds, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .updateVersion) ?? 0
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Provides the current status of the Auto-Tune options.
    public struct AutoTuneStatus: Swift.Equatable {
        /// Timestamp which tells Auto-Tune options creation date .
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// Specifies the error message while enabling or disabling the Auto-Tune options.
        public var errorMessage: Swift.String?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        /// This member is required.
        public var state: ElasticsearchClientTypes.AutoTuneState?
        /// Timestamp which tells Auto-Tune options last updated time.
        /// This member is required.
        public var updateDate: ClientRuntime.Date?
        /// Specifies the Auto-Tune options latest version.
        public var updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.errorMessage = errorMessage
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
    public enum AutoTuneType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneType] {
            return [
                .scheduledAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .scheduledAction: return "SCHEDULED_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneType(rawValue: rawValue) ?? AutoTuneType.sdkUnknown(rawValue)
        }
    }
}

extension BaseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BaseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred while processing the request.
public struct BaseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BaseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BaseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancelElasticsearchServiceSoftwareUpdateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension CancelElasticsearchServiceSoftwareUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/serviceSoftwareUpdate/cancel"
    }
}

/// Container for the parameters to the [CancelElasticsearchServiceSoftwareUpdate] operation. Specifies the name of the Elasticsearch domain that you wish to cancel a service software update on.
public struct CancelElasticsearchServiceSoftwareUpdateInput: Swift.Equatable {
    /// The name of the domain that you want to stop the latest service software update on.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct CancelElasticsearchServiceSoftwareUpdateInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension CancelElasticsearchServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension CancelElasticsearchServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelElasticsearchServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelElasticsearchServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelElasticsearchServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelElasticsearchServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// The result of a CancelElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct CancelElasticsearchServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch service software update.
    public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct CancelElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
}

extension CancelElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension ElasticsearchClientTypes.ChangeProgressDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeId = "ChangeId"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeId = self.changeId {
            try encodeContainer.encode(changeId, forKey: .changeId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeId)
        changeId = changeIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies change details of the domain configuration change.
    public struct ChangeProgressDetails: Swift.Equatable {
        /// The unique change identifier associated with a specific domain configuration change.
        public var changeId: Swift.String?
        /// Contains an optional message associated with the domain configuration change.
        public var message: Swift.String?

        public init (
            changeId: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.changeId = changeId
            self.message = message
        }
    }

}

extension ElasticsearchClientTypes.ChangeProgressStage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encodeTimestamp(lastUpdated, format: .epochSeconds, forKey: .lastUpdated)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
    }
}

extension ElasticsearchClientTypes {
    /// A progress stage details of a specific domain configuration change.
    public struct ChangeProgressStage: Swift.Equatable {
        /// The description of the progress stage.
        public var description: Swift.String?
        /// The last updated timestamp of the progress stage.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the specific progress stage.
        public var name: Swift.String?
        /// The overall status of a specific progress stage.
        public var status: Swift.String?

        public init (
            description: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.description = description
            self.lastUpdated = lastUpdated
            self.name = name
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ChangeProgressStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeId = "ChangeId"
        case changeProgressStages = "ChangeProgressStages"
        case completedProperties = "CompletedProperties"
        case pendingProperties = "PendingProperties"
        case startTime = "StartTime"
        case status = "Status"
        case totalNumberOfStages = "TotalNumberOfStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeId = self.changeId {
            try encodeContainer.encode(changeId, forKey: .changeId)
        }
        if let changeProgressStages = changeProgressStages {
            var changeProgressStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeProgressStages)
            for changeprogressstage0 in changeProgressStages {
                try changeProgressStagesContainer.encode(changeprogressstage0)
            }
        }
        if let completedProperties = completedProperties {
            var completedPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .completedProperties)
            for string0 in completedProperties {
                try completedPropertiesContainer.encode(string0)
            }
        }
        if let pendingProperties = pendingProperties {
            var pendingPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingProperties)
            for string0 in pendingProperties {
                try pendingPropertiesContainer.encode(string0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if totalNumberOfStages != 0 {
            try encodeContainer.encode(totalNumberOfStages, forKey: .totalNumberOfStages)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeId)
        changeId = changeIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OverallChangeStatus.self, forKey: .status)
        status = statusDecoded
        let pendingPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pendingProperties)
        var pendingPropertiesDecoded0:[Swift.String]? = nil
        if let pendingPropertiesContainer = pendingPropertiesContainer {
            pendingPropertiesDecoded0 = [Swift.String]()
            for string0 in pendingPropertiesContainer {
                if let string0 = string0 {
                    pendingPropertiesDecoded0?.append(string0)
                }
            }
        }
        pendingProperties = pendingPropertiesDecoded0
        let completedPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .completedProperties)
        var completedPropertiesDecoded0:[Swift.String]? = nil
        if let completedPropertiesContainer = completedPropertiesContainer {
            completedPropertiesDecoded0 = [Swift.String]()
            for string0 in completedPropertiesContainer {
                if let string0 = string0 {
                    completedPropertiesDecoded0?.append(string0)
                }
            }
        }
        completedProperties = completedPropertiesDecoded0
        let totalNumberOfStagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfStages) ?? 0
        totalNumberOfStages = totalNumberOfStagesDecoded
        let changeProgressStagesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ChangeProgressStage?].self, forKey: .changeProgressStages)
        var changeProgressStagesDecoded0:[ElasticsearchClientTypes.ChangeProgressStage]? = nil
        if let changeProgressStagesContainer = changeProgressStagesContainer {
            changeProgressStagesDecoded0 = [ElasticsearchClientTypes.ChangeProgressStage]()
            for structure0 in changeProgressStagesContainer {
                if let structure0 = structure0 {
                    changeProgressStagesDecoded0?.append(structure0)
                }
            }
        }
        changeProgressStages = changeProgressStagesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// The progress details of a specific domain configuration change.
    public struct ChangeProgressStatusDetails: Swift.Equatable {
        /// The unique change identifier associated with a specific domain configuration change.
        public var changeId: Swift.String?
        /// The specific stages that the domain is going through to perform the configuration change.
        public var changeProgressStages: [ElasticsearchClientTypes.ChangeProgressStage]?
        /// The list of properties involved in the domain configuration change that are completed.
        public var completedProperties: [Swift.String]?
        /// The list of properties involved in the domain configuration change that are still in pending.
        public var pendingProperties: [Swift.String]?
        /// The time at which the configuration change is made on the domain.
        public var startTime: ClientRuntime.Date?
        /// The overall status of the domain configuration change. This field can take the following values: PENDING, PROCESSING, COMPLETED and FAILED
        public var status: ElasticsearchClientTypes.OverallChangeStatus?
        /// The total number of stages required for the configuration change.
        public var totalNumberOfStages: Swift.Int

        public init (
            changeId: Swift.String? = nil,
            changeProgressStages: [ElasticsearchClientTypes.ChangeProgressStage]? = nil,
            completedProperties: [Swift.String]? = nil,
            pendingProperties: [Swift.String]? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: ElasticsearchClientTypes.OverallChangeStatus? = nil,
            totalNumberOfStages: Swift.Int = 0
        )
        {
            self.changeId = changeId
            self.changeProgressStages = changeProgressStages
            self.completedProperties = completedProperties
            self.pendingProperties = pendingProperties
            self.startTime = startTime
            self.status = status
            self.totalNumberOfStages = totalNumberOfStages
        }
    }

}

extension ElasticsearchClientTypes.CognitoOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case identityPoolId = "IdentityPoolId"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let identityPoolId = self.identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public struct CognitoOptions: Swift.Equatable {
        /// Specifies the option to enable Cognito for Kibana authentication.
        public var enabled: Swift.Bool?
        /// Specifies the Cognito identity pool ID for Kibana authentication.
        public var identityPoolId: Swift.String?
        /// Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
        public var roleArn: Swift.String?
        /// Specifies the Cognito user pool ID for Kibana authentication.
        public var userPoolId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            identityPoolId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.identityPoolId = identityPoolId
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }

}

extension ElasticsearchClientTypes.CognitoOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the Cognito options for the specified Elasticsearch domain.
    public struct CognitoOptionsStatus: Swift.Equatable {
        /// Specifies the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.CognitoOptions?
        /// Specifies the status of the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.CognitoOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ColdStorageOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the configuration for cold storage options such as enabled
    public struct ColdStorageOptions: Swift.Equatable {
        /// Enable cold storage option. Accepted values true or false
        /// This member is required.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.CompatibleVersionsMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceVersion = "SourceVersion"
        case targetVersions = "TargetVersions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceVersion = self.sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let targetVersions = targetVersions {
            var targetVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetVersions)
            for elasticsearchversionstring0 in targetVersions {
                try targetVersionsContainer.encode(elasticsearchversionstring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let targetVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetVersions)
        var targetVersionsDecoded0:[Swift.String]? = nil
        if let targetVersionsContainer = targetVersionsContainer {
            targetVersionsDecoded0 = [Swift.String]()
            for string0 in targetVersionsContainer {
                if let string0 = string0 {
                    targetVersionsDecoded0?.append(string0)
                }
            }
        }
        targetVersions = targetVersionsDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// A map from an [ElasticsearchVersion] to a list of compatible [ElasticsearchVersion] s to which the domain can be upgraded.
    public struct CompatibleVersionsMap: Swift.Equatable {
        /// The current version of Elasticsearch on which a domain is.
        public var sourceVersion: Swift.String?
        /// List of supported elastic search versions.
        public var targetVersions: [Swift.String]?

        public init (
            sourceVersion: Swift.String? = nil,
            targetVersions: [Swift.String]? = nil
        )
        {
            self.sourceVersion = sourceVersion
            self.targetVersions = targetVersions
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateElasticsearchDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let elasticsearchClusterConfig = self.elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = self.elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension CreateElasticsearchDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/domain"
    }
}

public struct CreateElasticsearchDomainInput: Swift.Equatable {
    /// IAM access policy as a JSON-formatted string.
    public var accessPolicies: Swift.String?
    /// Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Specifies advanced security options.
    public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// Options to enable, disable and specify the type and size of EBS storage volumes.
    public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
    /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster.
    public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see [Creating Elasticsearch Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains) in the Amazon Elasticsearch Service Developer Guide.
    public var elasticsearchVersion: Swift.String?
    /// Specifies the Encryption At Rest Options.
    public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public var logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours.
    public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// A list of Tag added during domain creation.
    public var tagList: [ElasticsearchClientTypes.Tag]?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc) in VPC Endpoints for Amazon Elasticsearch Service Domains
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        elasticsearchVersion: Swift.String? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.ebsOptions = ebsOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.elasticsearchVersion = elasticsearchVersion
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.tagList = tagList
        self.vpcOptions = vpcOptions
    }
}

struct CreateElasticsearchDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let elasticsearchVersion: Swift.String?
    let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    let ebsOptions: ElasticsearchClientTypes.EBSOptions?
    let accessPolicies: Swift.String?
    let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    let vpcOptions: ElasticsearchClientTypes.VPCOptions?
    let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    let advancedOptions: [Swift.String:Swift.String]?
    let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput?
    let tagList: [ElasticsearchClientTypes.Tag]?
}

extension CreateElasticsearchDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vpcOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsInput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension CreateElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a CreateElasticsearchDomain operation. Contains the status of the newly created Elasticsearch domain.
public struct CreateElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The status of the newly created Elasticsearch domain.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct CreateElasticsearchDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension CreateElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension CreateOutboundCrossClusterSearchConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = self.connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let destinationDomainInfo = self.destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = self.sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }
}

extension CreateOutboundCrossClusterSearchConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/ccs/outboundConnection"
    }
}

/// Container for the parameters to the [CreateOutboundCrossClusterSearchConnection] operation.
public struct CreateOutboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// Specifies the connection alias that will be used by the customer for this connection.
    /// This member is required.
    public var connectionAlias: Swift.String?
    /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
    /// This member is required.
    public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the [DomainInformation] for the source Elasticsearch domain.
    /// This member is required.
    public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init (
        connectionAlias: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

struct CreateOutboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
    let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?
    let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    let connectionAlias: Swift.String?
}

extension CreateOutboundCrossClusterSearchConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
    }
}

extension CreateOutboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOutboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateOutboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOutboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateOutboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionAlias = output.connectionAlias
            self.connectionStatus = output.connectionStatus
            self.crossClusterSearchConnectionId = output.crossClusterSearchConnectionId
            self.destinationDomainInfo = output.destinationDomainInfo
            self.sourceDomainInfo = output.sourceDomainInfo
        } else {
            self.connectionAlias = nil
            self.connectionStatus = nil
            self.crossClusterSearchConnectionId = nil
            self.destinationDomainInfo = nil
            self.sourceDomainInfo = nil
        }
    }
}

/// The result of a [CreateOutboundCrossClusterSearchConnection] request. Contains the details of the newly created cross-cluster search connection.
public struct CreateOutboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the connection alias provided during the create connection request.
    public var connectionAlias: Swift.String?
    /// Specifies the [OutboundCrossClusterSearchConnectionStatus] for the newly created connection.
    public var connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
    /// Unique id for the created outbound connection, which is used for subsequent operations on connection.
    public var crossClusterSearchConnectionId: Swift.String?
    /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
    public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the [DomainInformation] for the source Elasticsearch domain.
    public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init (
        connectionAlias: Swift.String? = nil,
        connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
        crossClusterSearchConnectionId: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.connectionStatus = connectionStatus
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

struct CreateOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?
    let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    let connectionAlias: Swift.String?
    let connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
    let crossClusterSearchConnectionId: Swift.String?
}

extension CreateOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
    }
}

extension CreatePackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageSource = self.packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }
}

extension CreatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/packages"
    }
}

/// Container for request parameters to [CreatePackage] operation.
public struct CreatePackageInput: Swift.Equatable {
    /// Description of the package.
    public var packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public var packageName: Swift.String?
    /// The customer S3 location PackageSource for importing the package.
    /// This member is required.
    public var packageSource: ElasticsearchClientTypes.PackageSource?
    /// Type of package. Currently supports only TXT-DICTIONARY.
    /// This member is required.
    public var packageType: ElasticsearchClientTypes.PackageType?

    public init (
        packageDescription: Swift.String? = nil,
        packageName: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil,
        packageType: ElasticsearchClientTypes.PackageType? = nil
    )
    {
        self.packageDescription = packageDescription
        self.packageName = packageName
        self.packageSource = packageSource
        self.packageType = packageType
    }
}

struct CreatePackageInputBody: Swift.Equatable {
    let packageName: Swift.String?
    let packageType: ElasticsearchClientTypes.PackageType?
    let packageDescription: Swift.String?
    let packageSource: ElasticsearchClientTypes.PackageSource?
}

extension CreatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
    }
}

extension CreatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for response returned by [CreatePackage] operation.
public struct CreatePackageOutputResponse: Swift.Equatable {
    /// Information about the package PackageDetails.
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct CreatePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension CreatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension CreateVpcEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case domainArn = "DomainArn"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension CreateVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/vpcEndpoints"
    }
}

/// Container for the parameters to the [CreateVpcEndpointRequest] operation.
public struct CreateVpcEndpointInput: Swift.Equatable {
    /// Unique, case-sensitive identifier to ensure idempotency of the request.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the domain to grant access to.
    /// This member is required.
    public var domainArn: Swift.String?
    /// Options to specify the subnets and security groups for the endpoint.
    /// This member is required.
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        clientToken: Swift.String? = nil,
        domainArn: Swift.String? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.clientToken = clientToken
        self.domainArn = domainArn
        self.vpcOptions = vpcOptions
    }
}

struct CreateVpcEndpointInputBody: Swift.Equatable {
    let domainArn: Swift.String?
    let vpcOptions: ElasticsearchClientTypes.VPCOptions?
    let clientToken: Swift.String?
}

extension CreateVpcEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case domainArn = "DomainArn"
        case vpcOptions = "VpcOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case conflictException(ConflictException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpoint = output.vpcEndpoint
        } else {
            self.vpcEndpoint = nil
        }
    }
}

/// Container for response parameters to the [CreateVpcEndpoint] operation. Contains the configuration and status of the VPC Endpoint being created.
public struct CreateVpcEndpointOutputResponse: Swift.Equatable {
    /// Information about the newly created VPC endpoint.
    /// This member is required.
    public var vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?

    public init (
        vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

struct CreateVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?
}

extension CreateVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpoint = "VpcEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

extension DeleteElasticsearchDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the parameters to the [DeleteElasticsearchDomain] operation. Specifies the name of the Elasticsearch domain that you want to delete.
public struct DeleteElasticsearchDomainInput: Swift.Equatable {
    /// The name of the Elasticsearch domain that you want to permanently delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DeleteElasticsearchDomainInputBody: Swift.Equatable {
}

extension DeleteElasticsearchDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a DeleteElasticsearchDomain request. Contains the status of the pending deletion, or no status if the domain and all of its resources have been deleted.
public struct DeleteElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The status of the Elasticsearch domain being deleted.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DeleteElasticsearchDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension DeleteElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension DeleteElasticsearchServiceRoleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/role"
    }
}

public struct DeleteElasticsearchServiceRoleInput: Swift.Equatable {

    public init () { }
}

struct DeleteElasticsearchServiceRoleInputBody: Swift.Equatable {
}

extension DeleteElasticsearchServiceRoleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteElasticsearchServiceRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteElasticsearchServiceRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteElasticsearchServiceRoleOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteElasticsearchServiceRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteElasticsearchServiceRoleOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteInboundCrossClusterSearchConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let crossClusterSearchConnectionId = crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())"
    }
}

/// Container for the parameters to the [DeleteInboundCrossClusterSearchConnection] operation.
public struct DeleteInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to permanently delete.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct DeleteInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension DeleteInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a [DeleteInboundCrossClusterSearchConnection] operation. Contains details of deleted inbound connection.
public struct DeleteInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the [InboundCrossClusterSearchConnection] of deleted inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct DeleteInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension DeleteInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension DeleteOutboundCrossClusterSearchConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let crossClusterSearchConnectionId = crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/outboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())"
    }
}

/// Container for the parameters to the [DeleteOutboundCrossClusterSearchConnection] operation.
public struct DeleteOutboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the outbound connection that you want to permanently delete.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct DeleteOutboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension DeleteOutboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOutboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOutboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteOutboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOutboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteOutboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a [DeleteOutboundCrossClusterSearchConnection] operation. Contains details of deleted outbound connection.
public struct DeleteOutboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the [OutboundCrossClusterSearchConnection] of deleted outbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct DeleteOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?
}

extension DeleteOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension DeletePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())"
    }
}

/// Container for request parameters to [DeletePackage] operation.
public struct DeletePackageInput: Swift.Equatable {
    /// Internal ID of the package that you want to delete. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        packageID: Swift.String? = nil
    )
    {
        self.packageID = packageID
    }
}

struct DeletePackageInputBody: Swift.Equatable {
}

extension DeletePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeletePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for response parameters to [DeletePackage] operation.
public struct DeletePackageOutputResponse: Swift.Equatable {
    ///     PackageDetails
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct DeletePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension DeletePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension DeleteVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let vpcEndpointId = vpcEndpointId else {
            return nil
        }
        return "/2015-01-01/es/vpcEndpoints/\(vpcEndpointId.urlPercentEncoding())"
    }
}

/// Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
public struct DeleteVpcEndpointInput: Swift.Equatable {
    /// The unique identifier of the endpoint to be deleted.
    /// This member is required.
    public var vpcEndpointId: Swift.String?

    public init (
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
    }
}

struct DeleteVpcEndpointInputBody: Swift.Equatable {
}

extension DeleteVpcEndpointInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpointSummary = output.vpcEndpointSummary
        } else {
            self.vpcEndpointSummary = nil
        }
    }
}

/// Container for response parameters to the [DeleteVpcEndpoint] operation. Contains the summarized detail of the VPC Endpoint being deleted.
public struct DeleteVpcEndpointOutputResponse: Swift.Equatable {
    /// Information about the deleted endpoint, including its current status (DELETING or DELETE_FAILED).
    /// This member is required.
    public var vpcEndpointSummary: ElasticsearchClientTypes.VpcEndpointSummary?

    public init (
        vpcEndpointSummary: ElasticsearchClientTypes.VpcEndpointSummary? = nil
    )
    {
        self.vpcEndpointSummary = vpcEndpointSummary
    }
}

struct DeleteVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummary: ElasticsearchClientTypes.VpcEndpointSummary?
}

extension DeleteVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointSummary = "VpcEndpointSummary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpointSummary.self, forKey: .vpcEndpointSummary)
        vpcEndpointSummary = vpcEndpointSummaryDecoded
    }
}

extension ElasticsearchClientTypes {
    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case eligible
        case inProgress
        case notEligible
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .completed,
                .eligible,
                .inProgress,
                .notEligible,
                .pendingUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .eligible: return "ELIGIBLE"
            case .inProgress: return "IN_PROGRESS"
            case .notEligible: return "NOT_ELIGIBLE"
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentStatus(rawValue: rawValue) ?? DeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

extension DescribeDomainAutoTunesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDomainAutoTunesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/autoTunes"
    }
}

/// Container for the parameters to the DescribeDomainAutoTunes operation.
public struct DescribeDomainAutoTunesInput: Swift.Equatable {
    /// Specifies the domain name for which you want Auto-Tune action details.
    /// This member is required.
    public var domainName: Swift.String?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesInputBody: Swift.Equatable {
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDomainAutoTunesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainAutoTunesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainAutoTunesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainAutoTunesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainAutoTunesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoTunes = output.autoTunes
            self.nextToken = output.nextToken
        } else {
            self.autoTunes = nil
            self.nextToken = nil
        }
    }
}

/// The result of DescribeDomainAutoTunes request. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
public struct DescribeDomainAutoTunesOutputResponse: Swift.Equatable {
    /// Specifies the list of setting adjustments that Auto-Tune has made to the domain. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public var autoTunes: [ElasticsearchClientTypes.AutoTune]?
    /// Specifies an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init (
        autoTunes: [ElasticsearchClientTypes.AutoTune]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoTunes = autoTunes
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesOutputResponseBody: Swift.Equatable {
    let autoTunes: [ElasticsearchClientTypes.AutoTune]?
    let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTunes = "AutoTunes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTunesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTune?].self, forKey: .autoTunes)
        var autoTunesDecoded0:[ElasticsearchClientTypes.AutoTune]? = nil
        if let autoTunesContainer = autoTunesContainer {
            autoTunesDecoded0 = [ElasticsearchClientTypes.AutoTune]()
            for structure0 in autoTunesContainer {
                if let structure0 = structure0 {
                    autoTunesDecoded0?.append(structure0)
                }
            }
        }
        autoTunes = autoTunesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDomainChangeProgressInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let changeId = changeId {
                let changeIdQueryItem = ClientRuntime.URLQueryItem(name: "changeid".urlPercentEncoding(), value: Swift.String(changeId).urlPercentEncoding())
                items.append(changeIdQueryItem)
            }
            return items
        }
    }
}

extension DescribeDomainChangeProgressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/progress"
    }
}

/// Container for the parameters to the DescribeDomainChangeProgress operation. Specifies the domain name and optional change specific identity for which you want progress information.
public struct DescribeDomainChangeProgressInput: Swift.Equatable {
    /// The specific change ID for which you want to get progress information. This is an optional parameter. If omitted, the service returns information about the most recent configuration change.
    public var changeId: Swift.String?
    /// The domain you want to get the progress information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        changeId: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.changeId = changeId
        self.domainName = domainName
    }
}

struct DescribeDomainChangeProgressInputBody: Swift.Equatable {
}

extension DescribeDomainChangeProgressInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDomainChangeProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainChangeProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainChangeProgressOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainChangeProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainChangeProgressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeProgressStatus = output.changeProgressStatus
        } else {
            self.changeProgressStatus = nil
        }
    }
}

/// The result of a DescribeDomainChangeProgress request. Contains the progress information of the requested domain change.
public struct DescribeDomainChangeProgressOutputResponse: Swift.Equatable {
    /// Progress information for the configuration change that is requested in the DescribeDomainChangeProgress request.
    public var changeProgressStatus: ElasticsearchClientTypes.ChangeProgressStatusDetails?

    public init (
        changeProgressStatus: ElasticsearchClientTypes.ChangeProgressStatusDetails? = nil
    )
    {
        self.changeProgressStatus = changeProgressStatus
    }
}

struct DescribeDomainChangeProgressOutputResponseBody: Swift.Equatable {
    let changeProgressStatus: ElasticsearchClientTypes.ChangeProgressStatusDetails?
}

extension DescribeDomainChangeProgressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeProgressStatus = "ChangeProgressStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeProgressStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ChangeProgressStatusDetails.self, forKey: .changeProgressStatus)
        changeProgressStatus = changeProgressStatusDecoded
    }
}

extension DescribeElasticsearchDomainConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/config"
    }
}

/// Container for the parameters to the DescribeElasticsearchDomainConfig operation. Specifies the domain name for which you want configuration information.
public struct DescribeElasticsearchDomainConfigInput: Swift.Equatable {
    /// The Elasticsearch domain that you want to get information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeElasticsearchDomainConfigInputBody: Swift.Equatable {
}

extension DescribeElasticsearchDomainConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeElasticsearchDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeElasticsearchDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
        } else {
            self.domainConfig = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomainConfig request. Contains the configuration information of the requested domain.
public struct DescribeElasticsearchDomainConfigOutputResponse: Swift.Equatable {
    /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
    /// This member is required.
    public var domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?

    public init (
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil
    )
    {
        self.domainConfig = domainConfig
    }
}

struct DescribeElasticsearchDomainConfigOutputResponseBody: Swift.Equatable {
    let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
}

extension DescribeElasticsearchDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
    }
}

extension DescribeElasticsearchDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the parameters to the [DescribeElasticsearchDomain] operation.
public struct DescribeElasticsearchDomainInput: Swift.Equatable {
    /// The name of the Elasticsearch domain for which you want information.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeElasticsearchDomainInputBody: Swift.Equatable {
}

extension DescribeElasticsearchDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomain request. Contains the status of the domain specified in the request.
public struct DescribeElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch domain.
    /// This member is required.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DescribeElasticsearchDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension DescribeElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension DescribeElasticsearchDomainsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainNames = domainNames {
            var domainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainNames)
            for domainname0 in domainNames {
                try domainNamesContainer.encode(domainname0)
            }
        }
    }
}

extension DescribeElasticsearchDomainsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/domain-info"
    }
}

/// Container for the parameters to the [DescribeElasticsearchDomains] operation. By default, the API returns the status of all Elasticsearch domains.
public struct DescribeElasticsearchDomainsInput: Swift.Equatable {
    /// The Elasticsearch domains for which you want information.
    /// This member is required.
    public var domainNames: [Swift.String]?

    public init (
        domainNames: [Swift.String]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct DescribeElasticsearchDomainsInputBody: Swift.Equatable {
    let domainNames: [Swift.String]?
}

extension DescribeElasticsearchDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .domainNames)
        var domainNamesDecoded0:[Swift.String]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [Swift.String]()
            for string0 in domainNamesContainer {
                if let string0 = string0 {
                    domainNamesDecoded0?.append(string0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension DescribeElasticsearchDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeElasticsearchDomainsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeElasticsearchDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatusList = output.domainStatusList
        } else {
            self.domainStatusList = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomains request. Contains the status of the specified domains or all domains owned by the account.
public struct DescribeElasticsearchDomainsOutputResponse: Swift.Equatable {
    /// The status of the domains requested in the DescribeElasticsearchDomains request.
    /// This member is required.
    public var domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]?

    public init (
        domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]? = nil
    )
    {
        self.domainStatusList = domainStatusList
    }
}

struct DescribeElasticsearchDomainsOutputResponseBody: Swift.Equatable {
    let domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]?
}

extension DescribeElasticsearchDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatusList = "DomainStatusList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ElasticsearchDomainStatus?].self, forKey: .domainStatusList)
        var domainStatusListDecoded0:[ElasticsearchClientTypes.ElasticsearchDomainStatus]? = nil
        if let domainStatusListContainer = domainStatusListContainer {
            domainStatusListDecoded0 = [ElasticsearchClientTypes.ElasticsearchDomainStatus]()
            for structure0 in domainStatusListContainer {
                if let structure0 = structure0 {
                    domainStatusListDecoded0?.append(structure0)
                }
            }
        }
        domainStatusList = domainStatusListDecoded0
    }
}

extension DescribeElasticsearchInstanceTypeLimitsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            return items
        }
    }
}

extension DescribeElasticsearchInstanceTypeLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let elasticsearchVersion = elasticsearchVersion else {
            return nil
        }
        guard let instanceType = instanceType else {
            return nil
        }
        return "/2015-01-01/es/instanceTypeLimits/\(elasticsearchVersion.urlPercentEncoding())/\(instanceType.rawValue.urlPercentEncoding())"
    }
}

/// Container for the parameters to [DescribeElasticsearchInstanceTypeLimits] operation.
public struct DescribeElasticsearchInstanceTypeLimitsInput: Swift.Equatable {
    /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch [Limits] for existing domain.
    public var domainName: Swift.String?
    /// Version of Elasticsearch for which [Limits] are needed.
    /// This member is required.
    public var elasticsearchVersion: Swift.String?
    /// The instance type for an Elasticsearch cluster for which Elasticsearch [Limits] are needed.
    /// This member is required.
    public var instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?

    public init (
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.instanceType = instanceType
    }
}

struct DescribeElasticsearchInstanceTypeLimitsInputBody: Swift.Equatable {
}

extension DescribeElasticsearchInstanceTypeLimitsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchInstanceTypeLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchInstanceTypeLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeElasticsearchInstanceTypeLimitsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchInstanceTypeLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeElasticsearchInstanceTypeLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.limitsByRole = output.limitsByRole
        } else {
            self.limitsByRole = nil
        }
    }
}

/// Container for the parameters received from [DescribeElasticsearchInstanceTypeLimits] operation.
public struct DescribeElasticsearchInstanceTypeLimitsOutputResponse: Swift.Equatable {
    /// Map of Role of the Instance and Limits that are applicable. Role performed by given Instance in Elasticsearch can be one of the following:
    ///
    /// * data: If the given InstanceType is used as data node
    ///
    /// * master: If the given InstanceType is used as master node
    ///
    /// * ultra_warm: If the given InstanceType is used as warm node
    public var limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]?

    public init (
        limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]? = nil
    )
    {
        self.limitsByRole = limitsByRole
    }
}

struct DescribeElasticsearchInstanceTypeLimitsOutputResponseBody: Swift.Equatable {
    let limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]?
}

extension DescribeElasticsearchInstanceTypeLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitsByRole = "LimitsByRole"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitsByRoleContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.Limits?].self, forKey: .limitsByRole)
        var limitsByRoleDecoded0: [Swift.String:ElasticsearchClientTypes.Limits]? = nil
        if let limitsByRoleContainer = limitsByRoleContainer {
            limitsByRoleDecoded0 = [Swift.String:ElasticsearchClientTypes.Limits]()
            for (key0, limits0) in limitsByRoleContainer {
                if let limits0 = limits0 {
                    limitsByRoleDecoded0?[key0] = limits0
                }
            }
        }
        limitsByRole = limitsByRoleDecoded0
    }
}

extension DescribeInboundCrossClusterSearchConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeInboundCrossClusterSearchConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/ccs/inboundConnection/search"
    }
}

/// Container for the parameters to the [DescribeInboundCrossClusterSearchConnections] operation.
public struct DescribeInboundCrossClusterSearchConnectionsInput: Swift.Equatable {
    /// A list of filters used to match properties for inbound cross-cluster search connection. Available [Filter] names for this operation are:
    ///
    /// * cross-cluster-search-connection-id
    ///
    /// * source-domain-info.domain-name
    ///
    /// * source-domain-info.owner-id
    ///
    /// * source-domain-info.region
    ///
    /// * destination-domain-info.domain-name
    public var filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeInboundCrossClusterSearchConnectionsInputBody: Swift.Equatable {
    let filters: [ElasticsearchClientTypes.Filter]?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension DescribeInboundCrossClusterSearchConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInboundCrossClusterSearchConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInboundCrossClusterSearchConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInboundCrossClusterSearchConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInboundCrossClusterSearchConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInboundCrossClusterSearchConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnections = output.crossClusterSearchConnections
            self.nextToken = output.nextToken
        } else {
            self.crossClusterSearchConnections = nil
            self.nextToken = nil
        }
    }
}

/// The result of a [DescribeInboundCrossClusterSearchConnections] request. Contains the list of connections matching the filter criteria.
public struct DescribeInboundCrossClusterSearchConnectionsOutputResponse: Swift.Equatable {
    /// Consists of list of [InboundCrossClusterSearchConnection] matching the specified filter criteria.
    public var crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    public var nextToken: Swift.String?

    public init (
        crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

struct DescribeInboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]?
    let nextToken: Swift.String?
}

extension DescribeInboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnections = "CrossClusterSearchConnections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.InboundCrossClusterSearchConnection?].self, forKey: .crossClusterSearchConnections)
        var crossClusterSearchConnectionsDecoded0:[ElasticsearchClientTypes.InboundCrossClusterSearchConnection]? = nil
        if let crossClusterSearchConnectionsContainer = crossClusterSearchConnectionsContainer {
            crossClusterSearchConnectionsDecoded0 = [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]()
            for structure0 in crossClusterSearchConnectionsContainer {
                if let structure0 = structure0 {
                    crossClusterSearchConnectionsDecoded0?.append(structure0)
                }
            }
        }
        crossClusterSearchConnections = crossClusterSearchConnectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/ccs/outboundConnection/search"
    }
}

/// Container for the parameters to the [DescribeOutboundCrossClusterSearchConnections] operation.
public struct DescribeOutboundCrossClusterSearchConnectionsInput: Swift.Equatable {
    /// A list of filters used to match properties for outbound cross-cluster search connection. Available [Filter] names for this operation are:
    ///
    /// * cross-cluster-search-connection-id
    ///
    /// * destination-domain-info.domain-name
    ///
    /// * destination-domain-info.owner-id
    ///
    /// * destination-domain-info.region
    ///
    /// * source-domain-info.domain-name
    public var filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeOutboundCrossClusterSearchConnectionsInputBody: Swift.Equatable {
    let filters: [ElasticsearchClientTypes.Filter]?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension DescribeOutboundCrossClusterSearchConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeOutboundCrossClusterSearchConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnections = output.crossClusterSearchConnections
            self.nextToken = output.nextToken
        } else {
            self.crossClusterSearchConnections = nil
            self.nextToken = nil
        }
    }
}

/// The result of a [DescribeOutboundCrossClusterSearchConnections] request. Contains the list of connections matching the filter criteria.
public struct DescribeOutboundCrossClusterSearchConnectionsOutputResponse: Swift.Equatable {
    /// Consists of list of [OutboundCrossClusterSearchConnection] matching the specified filter criteria.
    public var crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    public var nextToken: Swift.String?

    public init (
        crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

struct DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]?
    let nextToken: Swift.String?
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnections = "CrossClusterSearchConnections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?].self, forKey: .crossClusterSearchConnections)
        var crossClusterSearchConnectionsDecoded0:[ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]? = nil
        if let crossClusterSearchConnectionsContainer = crossClusterSearchConnectionsContainer {
            crossClusterSearchConnectionsDecoded0 = [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]()
            for structure0 in crossClusterSearchConnectionsContainer {
                if let structure0 = structure0 {
                    crossClusterSearchConnectionsDecoded0?.append(structure0)
                }
            }
        }
        crossClusterSearchConnections = crossClusterSearchConnectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ElasticsearchClientTypes.DescribePackagesFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = value {
            var valueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .value)
            for describepackagesfiltervalue0 in value {
                try valueContainer.encode(describepackagesfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DescribePackagesFilterName.self, forKey: .name)
        name = nameDecoded
        let valueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .value)
        var valueDecoded0:[Swift.String]? = nil
        if let valueContainer = valueContainer {
            valueDecoded0 = [Swift.String]()
            for string0 in valueContainer {
                if let string0 = string0 {
                    valueDecoded0?.append(string0)
                }
            }
        }
        value = valueDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Filter to apply in DescribePackage response.
    public struct DescribePackagesFilter: Swift.Equatable {
        /// Any field from PackageDetails.
        public var name: ElasticsearchClientTypes.DescribePackagesFilterName?
        /// A list of values for the specified field.
        public var value: [Swift.String]?

        public init (
            name: ElasticsearchClientTypes.DescribePackagesFilterName? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes {
    public enum DescribePackagesFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case packageid
        case packagename
        case packagestatus
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribePackagesFilterName] {
            return [
                .packageid,
                .packagename,
                .packagestatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .packageid: return "PackageID"
            case .packagename: return "PackageName"
            case .packagestatus: return "PackageStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DescribePackagesFilterName(rawValue: rawValue) ?? DescribePackagesFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DescribePackagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for describepackagesfilter0 in filters {
                try filtersContainer.encode(describepackagesfilter0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribePackagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/packages/describe"
    }
}

/// Container for request parameters to [DescribePackage] operation.
public struct DescribePackagesInput: Swift.Equatable {
    /// Only returns packages that match the DescribePackagesFilterList values.
    public var filters: [ElasticsearchClientTypes.DescribePackagesFilter]?
    /// Limits results to a maximum number of packages.
    public var maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.DescribePackagesFilter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribePackagesInputBody: Swift.Equatable {
    let filters: [ElasticsearchClientTypes.DescribePackagesFilter]?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension DescribePackagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DescribePackagesFilter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.DescribePackagesFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.DescribePackagesFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePackagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePackagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePackagesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePackagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePackagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageDetailsList = output.packageDetailsList
        } else {
            self.nextToken = nil
            self.packageDetailsList = nil
        }
    }
}

/// Container for response returned by [DescribePackages] operation.
public struct DescribePackagesOutputResponse: Swift.Equatable {
    public var nextToken: Swift.String?
    /// List of PackageDetails objects.
    public var packageDetailsList: [ElasticsearchClientTypes.PackageDetails]?

    public init (
        nextToken: Swift.String? = nil,
        packageDetailsList: [ElasticsearchClientTypes.PackageDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageDetailsList = packageDetailsList
    }
}

struct DescribePackagesOutputResponseBody: Swift.Equatable {
    let packageDetailsList: [ElasticsearchClientTypes.PackageDetails]?
    let nextToken: Swift.String?
}

extension DescribePackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageDetailsList = "PackageDetailsList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.PackageDetails?].self, forKey: .packageDetailsList)
        var packageDetailsListDecoded0:[ElasticsearchClientTypes.PackageDetails]? = nil
        if let packageDetailsListContainer = packageDetailsListContainer {
            packageDetailsListDecoded0 = [ElasticsearchClientTypes.PackageDetails]()
            for structure0 in packageDetailsListContainer {
                if let structure0 = structure0 {
                    packageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        packageDetailsList = packageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId {
                let reservedElasticsearchInstanceOfferingIdQueryItem = ClientRuntime.URLQueryItem(name: "offeringId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceOfferingId).urlPercentEncoding())
                items.append(reservedElasticsearchInstanceOfferingIdQueryItem)
            }
            return items
        }
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/reservedInstanceOfferings"
    }
}

/// Container for parameters to DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsInput: Swift.Equatable {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
    public var reservedElasticsearchInstanceOfferingId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

struct DescribeReservedElasticsearchInstanceOfferingsInputBody: Swift.Equatable {
}

extension DescribeReservedElasticsearchInstanceOfferingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReservedElasticsearchInstanceOfferingsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedElasticsearchInstanceOfferings = output.reservedElasticsearchInstanceOfferings
        } else {
            self.nextToken = nil
            self.reservedElasticsearchInstanceOfferings = nil
        }
    }
}

/// Container for results from DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?
    /// List of reserved Elasticsearch instance offerings
    public var reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?

    public init (
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferings
    }
}

struct DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstanceOfferings = "ReservedElasticsearchInstanceOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstanceOfferingsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering?].self, forKey: .reservedElasticsearchInstanceOfferings)
        var reservedElasticsearchInstanceOfferingsDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
        if let reservedElasticsearchInstanceOfferingsContainer = reservedElasticsearchInstanceOfferingsContainer {
            reservedElasticsearchInstanceOfferingsDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]()
            for structure0 in reservedElasticsearchInstanceOfferingsContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstanceOfferingsDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferingsDecoded0
    }
}

extension DescribeReservedElasticsearchInstancesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let reservedElasticsearchInstanceId = reservedElasticsearchInstanceId {
                let reservedElasticsearchInstanceIdQueryItem = ClientRuntime.URLQueryItem(name: "reservationId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceId).urlPercentEncoding())
                items.append(reservedElasticsearchInstanceIdQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension DescribeReservedElasticsearchInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/reservedInstances"
    }
}

/// Container for parameters to DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesInput: Swift.Equatable {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?
    /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
    public var reservedElasticsearchInstanceId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

struct DescribeReservedElasticsearchInstancesInputBody: Swift.Equatable {
}

extension DescribeReservedElasticsearchInstancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedElasticsearchInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedElasticsearchInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReservedElasticsearchInstancesOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedElasticsearchInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReservedElasticsearchInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedElasticsearchInstances = output.reservedElasticsearchInstances
        } else {
            self.nextToken = nil
            self.reservedElasticsearchInstances = nil
        }
    }
}

/// Container for results from DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?
    /// List of reserved Elasticsearch instances.
    public var reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?

    public init (
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstances = reservedElasticsearchInstances
    }
}

struct DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?
}

extension DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstances = "ReservedElasticsearchInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstancesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstance?].self, forKey: .reservedElasticsearchInstances)
        var reservedElasticsearchInstancesDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
        if let reservedElasticsearchInstancesContainer = reservedElasticsearchInstancesContainer {
            reservedElasticsearchInstancesDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstance]()
            for structure0 in reservedElasticsearchInstancesContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstancesDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstances = reservedElasticsearchInstancesDecoded0
    }
}

extension DescribeVpcEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointIds = "VpcEndpointIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vpcEndpointIds = vpcEndpointIds {
            var vpcEndpointIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcEndpointIds)
            for vpcendpointid0 in vpcEndpointIds {
                try vpcEndpointIdsContainer.encode(vpcendpointid0)
            }
        }
    }
}

extension DescribeVpcEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/vpcEndpoints/describe"
    }
}

/// Container for request parameters to the [DescribeVpcEndpoints] operation. Specifies the list of VPC endpoints to be described.
public struct DescribeVpcEndpointsInput: Swift.Equatable {
    /// The unique identifiers of the endpoints to get information about.
    /// This member is required.
    public var vpcEndpointIds: [Swift.String]?

    public init (
        vpcEndpointIds: [Swift.String]? = nil
    )
    {
        self.vpcEndpointIds = vpcEndpointIds
    }
}

struct DescribeVpcEndpointsInputBody: Swift.Equatable {
    let vpcEndpointIds: [Swift.String]?
}

extension DescribeVpcEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointIds = "VpcEndpointIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vpcEndpointIds)
        var vpcEndpointIdsDecoded0:[Swift.String]? = nil
        if let vpcEndpointIdsContainer = vpcEndpointIdsContainer {
            vpcEndpointIdsDecoded0 = [Swift.String]()
            for string0 in vpcEndpointIdsContainer {
                if let string0 = string0 {
                    vpcEndpointIdsDecoded0?.append(string0)
                }
            }
        }
        vpcEndpointIds = vpcEndpointIdsDecoded0
    }
}

extension DescribeVpcEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeVpcEndpointsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeVpcEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpointErrors = output.vpcEndpointErrors
            self.vpcEndpoints = output.vpcEndpoints
        } else {
            self.vpcEndpointErrors = nil
            self.vpcEndpoints = nil
        }
    }
}

/// Container for response parameters to the [DescribeVpcEndpoints] operation. Returns a list containing configuration details and status of the VPC Endpoints as well as a list containing error responses of the endpoints that could not be described
public struct DescribeVpcEndpointsOutputResponse: Swift.Equatable {
    /// Any errors associated with the request.
    /// This member is required.
    public var vpcEndpointErrors: [ElasticsearchClientTypes.VpcEndpointError]?
    /// Information about each requested VPC endpoint.
    /// This member is required.
    public var vpcEndpoints: [ElasticsearchClientTypes.VpcEndpoint]?

    public init (
        vpcEndpointErrors: [ElasticsearchClientTypes.VpcEndpointError]? = nil,
        vpcEndpoints: [ElasticsearchClientTypes.VpcEndpoint]? = nil
    )
    {
        self.vpcEndpointErrors = vpcEndpointErrors
        self.vpcEndpoints = vpcEndpoints
    }
}

struct DescribeVpcEndpointsOutputResponseBody: Swift.Equatable {
    let vpcEndpoints: [ElasticsearchClientTypes.VpcEndpoint]?
    let vpcEndpointErrors: [ElasticsearchClientTypes.VpcEndpointError]?
}

extension DescribeVpcEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointErrors = "VpcEndpointErrors"
        case vpcEndpoints = "VpcEndpoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.VpcEndpoint?].self, forKey: .vpcEndpoints)
        var vpcEndpointsDecoded0:[ElasticsearchClientTypes.VpcEndpoint]? = nil
        if let vpcEndpointsContainer = vpcEndpointsContainer {
            vpcEndpointsDecoded0 = [ElasticsearchClientTypes.VpcEndpoint]()
            for structure0 in vpcEndpointsContainer {
                if let structure0 = structure0 {
                    vpcEndpointsDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpoints = vpcEndpointsDecoded0
        let vpcEndpointErrorsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.VpcEndpointError?].self, forKey: .vpcEndpointErrors)
        var vpcEndpointErrorsDecoded0:[ElasticsearchClientTypes.VpcEndpointError]? = nil
        if let vpcEndpointErrorsContainer = vpcEndpointErrorsContainer {
            vpcEndpointErrorsDecoded0 = [ElasticsearchClientTypes.VpcEndpointError]()
            for structure0 in vpcEndpointErrorsContainer {
                if let structure0 = structure0 {
                    vpcEndpointErrorsDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointErrors = vpcEndpointErrorsDecoded0
    }
}

extension DisabledOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisabledOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
public struct DisabledOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DisabledOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DisabledOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DissociatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/packages/dissociate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

/// Container for request parameters to [DissociatePackage] operation.
public struct DissociatePackageInput: Swift.Equatable {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct DissociatePackageInputBody: Swift.Equatable {
}

extension DissociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DissociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DissociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DissociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DissociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DissociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

/// Container for response returned by [DissociatePackage] operation.
public struct DissociatePackageOutputResponse: Swift.Equatable {
    ///     DomainPackageDetails
    public var domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct DissociatePackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?
}

extension DissociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEndpoint = "CustomEndpoint"
        case customEndpointCertificateArn = "CustomEndpointCertificateArn"
        case customEndpointEnabled = "CustomEndpointEnabled"
        case enforceHTTPS = "EnforceHTTPS"
        case tlsSecurityPolicy = "TLSSecurityPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEndpoint = self.customEndpoint {
            try encodeContainer.encode(customEndpoint, forKey: .customEndpoint)
        }
        if let customEndpointCertificateArn = self.customEndpointCertificateArn {
            try encodeContainer.encode(customEndpointCertificateArn, forKey: .customEndpointCertificateArn)
        }
        if let customEndpointEnabled = self.customEndpointEnabled {
            try encodeContainer.encode(customEndpointEnabled, forKey: .customEndpointEnabled)
        }
        if let enforceHTTPS = self.enforceHTTPS {
            try encodeContainer.encode(enforceHTTPS, forKey: .enforceHTTPS)
        }
        if let tlsSecurityPolicy = self.tlsSecurityPolicy {
            try encodeContainer.encode(tlsSecurityPolicy.rawValue, forKey: .tlsSecurityPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceHTTPSDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforceHTTPS)
        enforceHTTPS = enforceHTTPSDecoded
        let tlsSecurityPolicyDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.TLSSecurityPolicy.self, forKey: .tlsSecurityPolicy)
        tlsSecurityPolicy = tlsSecurityPolicyDecoded
        let customEndpointEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .customEndpointEnabled)
        customEndpointEnabled = customEndpointEnabledDecoded
        let customEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpoint)
        customEndpoint = customEndpointDecoded
        let customEndpointCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpointCertificateArn)
        customEndpointCertificateArn = customEndpointCertificateArnDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Options to configure endpoint for the Elasticsearch domain.
    public struct DomainEndpointOptions: Swift.Equatable {
        /// Specify the fully qualified domain for your custom endpoint.
        public var customEndpoint: Swift.String?
        /// Specify ACM certificate ARN for your custom endpoint.
        public var customEndpointCertificateArn: Swift.String?
        /// Specify if custom endpoint should be enabled for the Elasticsearch domain.
        public var customEndpointEnabled: Swift.Bool?
        /// Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
        public var enforceHTTPS: Swift.Bool?
        /// Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.
        ///
        ///
        ///
        ///
        ///
        /// It can be one of the following values:
        ///
        /// * Policy-Min-TLS-1-0-2019-07: TLS security policy which supports TLSv1.0 and higher.
        ///
        /// * Policy-Min-TLS-1-2-2019-07: TLS security policy which supports only TLSv1.2
        public var tlsSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy?

        public init (
            customEndpoint: Swift.String? = nil,
            customEndpointCertificateArn: Swift.String? = nil,
            customEndpointEnabled: Swift.Bool? = nil,
            enforceHTTPS: Swift.Bool? = nil,
            tlsSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy? = nil
        )
        {
            self.customEndpoint = customEndpoint
            self.customEndpointCertificateArn = customEndpointCertificateArn
            self.customEndpointEnabled = customEndpointEnabled
            self.enforceHTTPS = enforceHTTPS
            self.tlsSecurityPolicy = tlsSecurityPolicy
        }
    }

}

extension ElasticsearchClientTypes.DomainEndpointOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The configured endpoint options for the domain and their current status.
    public struct DomainEndpointOptionsStatus: Swift.Equatable {
        /// Options to configure endpoint for the Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The status of the endpoint options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.DomainInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case engineType = "EngineType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let engineType = self.engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
    }
}

extension ElasticsearchClientTypes {
    public struct DomainInfo: Swift.Equatable {
        /// Specifies the DomainName.
        public var domainName: Swift.String?
        /// Specifies the EngineType of the domain.
        public var engineType: ElasticsearchClientTypes.EngineType?

        public init (
            domainName: Swift.String? = nil,
            engineType: ElasticsearchClientTypes.EngineType? = nil
        )
        {
            self.domainName = domainName
            self.engineType = engineType
        }
    }

}

extension ElasticsearchClientTypes.DomainInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case ownerId = "OwnerId"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension ElasticsearchClientTypes {
    public struct DomainInformation: Swift.Equatable {
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public var domainName: Swift.String?
        public var ownerId: Swift.String?
        public var region: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.ownerId = ownerId
            self.region = region
        }
    }

}

extension ElasticsearchClientTypes.DomainPackageDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case domainPackageStatus = "DomainPackageStatus"
        case errorDetails = "ErrorDetails"
        case lastUpdated = "LastUpdated"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageType = "PackageType"
        case packageVersion = "PackageVersion"
        case referencePath = "ReferencePath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainPackageStatus = self.domainPackageStatus {
            try encodeContainer.encode(domainPackageStatus.rawValue, forKey: .domainPackageStatus)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encodeTimestamp(lastUpdated, format: .epochSeconds, forKey: .lastUpdated)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
        if let packageVersion = self.packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
        if let referencePath = self.referencePath {
            try encodeContainer.encode(referencePath, forKey: .referencePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainPackageStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageStatus.self, forKey: .domainPackageStatus)
        domainPackageStatus = domainPackageStatusDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let referencePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referencePath)
        referencePath = referencePathDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Information on a package that is associated with a domain.
    public struct DomainPackageDetails: Swift.Equatable {
        /// Name of the domain you've associated a package with.
        public var domainName: Swift.String?
        /// State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
        public var domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: ElasticsearchClientTypes.ErrorDetails?
        /// Timestamp of the most-recent update to the association status.
        public var lastUpdated: ClientRuntime.Date?
        /// Internal ID of the package.
        public var packageID: Swift.String?
        /// User specified name of the package.
        public var packageName: Swift.String?
        /// Currently supports only TXT-DICTIONARY.
        public var packageType: ElasticsearchClientTypes.PackageType?
        public var packageVersion: Swift.String?
        /// The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.
        public var referencePath: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil,
            packageVersion: Swift.String? = nil,
            referencePath: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.domainPackageStatus = domainPackageStatus
            self.errorDetails = errorDetails
            self.lastUpdated = lastUpdated
            self.packageID = packageID
            self.packageName = packageName
            self.packageType = packageType
            self.packageVersion = packageVersion
            self.referencePath = referencePath
        }
    }

}

extension ElasticsearchClientTypes {
    public enum DomainPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case associating
        case associationFailed
        case dissociating
        case dissociationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainPackageStatus] {
            return [
                .active,
                .associating,
                .associationFailed,
                .dissociating,
                .dissociationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .associating: return "ASSOCIATING"
            case .associationFailed: return "ASSOCIATION_FAILED"
            case .dissociating: return "DISSOCIATING"
            case .dissociationFailed: return "DISSOCIATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainPackageStatus(rawValue: rawValue) ?? DomainPackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.DryRunResults: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentType = "DeploymentType"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType, forKey: .deploymentType)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    public struct DryRunResults: Swift.Equatable {
        /// Specifies the deployment mechanism through which the update shall be applied on the domain. Possible responses are Blue/Green (The update will require a blue/green deployment.) DynamicUpdate (The update can be applied in-place without a Blue/Green deployment required.) Undetermined (The domain is undergoing an update which needs to complete before the deployment type can be predicted.) None (The configuration change matches the current configuration and will not result in any update.)
        public var deploymentType: Swift.String?
        /// Contains an optional message associated with the DryRunResults.
        public var message: Swift.String?

        public init (
            deploymentType: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.message = message
        }
    }

}

extension ElasticsearchClientTypes.Duration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit = "Unit"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value) ?? 0
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.TimeUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies maintenance schedule duration: duration value and duration unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct Duration: Swift.Equatable {
        /// Specifies the unit of a maintenance schedule duration. Valid value is HOURS. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var unit: ElasticsearchClientTypes.TimeUnit?
        /// Integer to specify the value of a maintenance schedule duration. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var value: Swift.Int

        public init (
            unit: ElasticsearchClientTypes.TimeUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes.EBSOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ebsEnabled = "EBSEnabled"
        case iops = "Iops"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsEnabled = self.ebsEnabled {
            try encodeContainer.encode(ebsEnabled, forKey: .ebsEnabled)
        }
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let throughput = self.throughput {
            try encodeContainer.encode(throughput, forKey: .throughput)
        }
        if let volumeSize = self.volumeSize {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ebsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsEnabled)
        ebsEnabled = ebsEnabledDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Options to enable, disable, and specify the properties of EBS storage volumes. For more information, see [ Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs).
    public struct EBSOptions: Swift.Equatable {
        /// Specifies whether EBS-based storage is enabled.
        public var ebsEnabled: Swift.Bool?
        /// Specifies the IOPS for Provisioned IOPS And GP3 EBS volume (SSD).
        public var iops: Swift.Int?
        /// Specifies the Throughput for GP3 EBS volume (SSD).
        public var throughput: Swift.Int?
        /// Integer to specify the size of an EBS volume.
        public var volumeSize: Swift.Int?
        /// Specifies the volume type for EBS-based storage.
        public var volumeType: ElasticsearchClientTypes.VolumeType?

        public init (
            ebsEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: ElasticsearchClientTypes.VolumeType? = nil
        )
        {
            self.ebsEnabled = ebsEnabled
            self.iops = iops
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension ElasticsearchClientTypes.EBSOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the EBS options for the specified Elasticsearch domain.
    public struct EBSOptionsStatus: Swift.Equatable {
        /// Specifies the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.EBSOptions?
        /// Specifies the status of the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.EBSOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    public enum ESPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case c42xlargeElasticsearch
        case c44xlargeElasticsearch
        case c48xlargeElasticsearch
        case c4LargeElasticsearch
        case c4XlargeElasticsearch
        case c518xlargeElasticsearch
        case c52xlargeElasticsearch
        case c54xlargeElasticsearch
        case c59xlargeElasticsearch
        case c5LargeElasticsearch
        case c5XlargeElasticsearch
        case d22xlargeElasticsearch
        case d24xlargeElasticsearch
        case d28xlargeElasticsearch
        case d2XlargeElasticsearch
        case i22xlargeElasticsearch
        case i2XlargeElasticsearch
        case i316xlargeElasticsearch
        case i32xlargeElasticsearch
        case i34xlargeElasticsearch
        case i38xlargeElasticsearch
        case i3LargeElasticsearch
        case i3XlargeElasticsearch
        case m32xlargeElasticsearch
        case m3LargeElasticsearch
        case m3MediumElasticsearch
        case m3XlargeElasticsearch
        case m410xlargeElasticsearch
        case m42xlargeElasticsearch
        case m44xlargeElasticsearch
        case m4LargeElasticsearch
        case m4XlargeElasticsearch
        case m512xlargeElasticsearch
        case m52xlargeElasticsearch
        case m54xlargeElasticsearch
        case m5LargeElasticsearch
        case m5XlargeElasticsearch
        case r32xlargeElasticsearch
        case r34xlargeElasticsearch
        case r38xlargeElasticsearch
        case r3LargeElasticsearch
        case r3XlargeElasticsearch
        case r416xlargeElasticsearch
        case r42xlargeElasticsearch
        case r44xlargeElasticsearch
        case r48xlargeElasticsearch
        case r4LargeElasticsearch
        case r4XlargeElasticsearch
        case r512xlargeElasticsearch
        case r52xlargeElasticsearch
        case r54xlargeElasticsearch
        case r5LargeElasticsearch
        case r5XlargeElasticsearch
        case t2MediumElasticsearch
        case t2MicroElasticsearch
        case t2SmallElasticsearch
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESPartitionInstanceType] {
            return [
                .c42xlargeElasticsearch,
                .c44xlargeElasticsearch,
                .c48xlargeElasticsearch,
                .c4LargeElasticsearch,
                .c4XlargeElasticsearch,
                .c518xlargeElasticsearch,
                .c52xlargeElasticsearch,
                .c54xlargeElasticsearch,
                .c59xlargeElasticsearch,
                .c5LargeElasticsearch,
                .c5XlargeElasticsearch,
                .d22xlargeElasticsearch,
                .d24xlargeElasticsearch,
                .d28xlargeElasticsearch,
                .d2XlargeElasticsearch,
                .i22xlargeElasticsearch,
                .i2XlargeElasticsearch,
                .i316xlargeElasticsearch,
                .i32xlargeElasticsearch,
                .i34xlargeElasticsearch,
                .i38xlargeElasticsearch,
                .i3LargeElasticsearch,
                .i3XlargeElasticsearch,
                .m32xlargeElasticsearch,
                .m3LargeElasticsearch,
                .m3MediumElasticsearch,
                .m3XlargeElasticsearch,
                .m410xlargeElasticsearch,
                .m42xlargeElasticsearch,
                .m44xlargeElasticsearch,
                .m4LargeElasticsearch,
                .m4XlargeElasticsearch,
                .m512xlargeElasticsearch,
                .m52xlargeElasticsearch,
                .m54xlargeElasticsearch,
                .m5LargeElasticsearch,
                .m5XlargeElasticsearch,
                .r32xlargeElasticsearch,
                .r34xlargeElasticsearch,
                .r38xlargeElasticsearch,
                .r3LargeElasticsearch,
                .r3XlargeElasticsearch,
                .r416xlargeElasticsearch,
                .r42xlargeElasticsearch,
                .r44xlargeElasticsearch,
                .r48xlargeElasticsearch,
                .r4LargeElasticsearch,
                .r4XlargeElasticsearch,
                .r512xlargeElasticsearch,
                .r52xlargeElasticsearch,
                .r54xlargeElasticsearch,
                .r5LargeElasticsearch,
                .r5XlargeElasticsearch,
                .t2MediumElasticsearch,
                .t2MicroElasticsearch,
                .t2SmallElasticsearch,
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .c42xlargeElasticsearch: return "c4.2xlarge.elasticsearch"
            case .c44xlargeElasticsearch: return "c4.4xlarge.elasticsearch"
            case .c48xlargeElasticsearch: return "c4.8xlarge.elasticsearch"
            case .c4LargeElasticsearch: return "c4.large.elasticsearch"
            case .c4XlargeElasticsearch: return "c4.xlarge.elasticsearch"
            case .c518xlargeElasticsearch: return "c5.18xlarge.elasticsearch"
            case .c52xlargeElasticsearch: return "c5.2xlarge.elasticsearch"
            case .c54xlargeElasticsearch: return "c5.4xlarge.elasticsearch"
            case .c59xlargeElasticsearch: return "c5.9xlarge.elasticsearch"
            case .c5LargeElasticsearch: return "c5.large.elasticsearch"
            case .c5XlargeElasticsearch: return "c5.xlarge.elasticsearch"
            case .d22xlargeElasticsearch: return "d2.2xlarge.elasticsearch"
            case .d24xlargeElasticsearch: return "d2.4xlarge.elasticsearch"
            case .d28xlargeElasticsearch: return "d2.8xlarge.elasticsearch"
            case .d2XlargeElasticsearch: return "d2.xlarge.elasticsearch"
            case .i22xlargeElasticsearch: return "i2.2xlarge.elasticsearch"
            case .i2XlargeElasticsearch: return "i2.xlarge.elasticsearch"
            case .i316xlargeElasticsearch: return "i3.16xlarge.elasticsearch"
            case .i32xlargeElasticsearch: return "i3.2xlarge.elasticsearch"
            case .i34xlargeElasticsearch: return "i3.4xlarge.elasticsearch"
            case .i38xlargeElasticsearch: return "i3.8xlarge.elasticsearch"
            case .i3LargeElasticsearch: return "i3.large.elasticsearch"
            case .i3XlargeElasticsearch: return "i3.xlarge.elasticsearch"
            case .m32xlargeElasticsearch: return "m3.2xlarge.elasticsearch"
            case .m3LargeElasticsearch: return "m3.large.elasticsearch"
            case .m3MediumElasticsearch: return "m3.medium.elasticsearch"
            case .m3XlargeElasticsearch: return "m3.xlarge.elasticsearch"
            case .m410xlargeElasticsearch: return "m4.10xlarge.elasticsearch"
            case .m42xlargeElasticsearch: return "m4.2xlarge.elasticsearch"
            case .m44xlargeElasticsearch: return "m4.4xlarge.elasticsearch"
            case .m4LargeElasticsearch: return "m4.large.elasticsearch"
            case .m4XlargeElasticsearch: return "m4.xlarge.elasticsearch"
            case .m512xlargeElasticsearch: return "m5.12xlarge.elasticsearch"
            case .m52xlargeElasticsearch: return "m5.2xlarge.elasticsearch"
            case .m54xlargeElasticsearch: return "m5.4xlarge.elasticsearch"
            case .m5LargeElasticsearch: return "m5.large.elasticsearch"
            case .m5XlargeElasticsearch: return "m5.xlarge.elasticsearch"
            case .r32xlargeElasticsearch: return "r3.2xlarge.elasticsearch"
            case .r34xlargeElasticsearch: return "r3.4xlarge.elasticsearch"
            case .r38xlargeElasticsearch: return "r3.8xlarge.elasticsearch"
            case .r3LargeElasticsearch: return "r3.large.elasticsearch"
            case .r3XlargeElasticsearch: return "r3.xlarge.elasticsearch"
            case .r416xlargeElasticsearch: return "r4.16xlarge.elasticsearch"
            case .r42xlargeElasticsearch: return "r4.2xlarge.elasticsearch"
            case .r44xlargeElasticsearch: return "r4.4xlarge.elasticsearch"
            case .r48xlargeElasticsearch: return "r4.8xlarge.elasticsearch"
            case .r4LargeElasticsearch: return "r4.large.elasticsearch"
            case .r4XlargeElasticsearch: return "r4.xlarge.elasticsearch"
            case .r512xlargeElasticsearch: return "r5.12xlarge.elasticsearch"
            case .r52xlargeElasticsearch: return "r5.2xlarge.elasticsearch"
            case .r54xlargeElasticsearch: return "r5.4xlarge.elasticsearch"
            case .r5LargeElasticsearch: return "r5.large.elasticsearch"
            case .r5XlargeElasticsearch: return "r5.xlarge.elasticsearch"
            case .t2MediumElasticsearch: return "t2.medium.elasticsearch"
            case .t2MicroElasticsearch: return "t2.micro.elasticsearch"
            case .t2SmallElasticsearch: return "t2.small.elasticsearch"
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ESPartitionInstanceType(rawValue: rawValue) ?? ESPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum ESWarmPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESWarmPartitionInstanceType] {
            return [
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ESWarmPartitionInstanceType(rawValue: rawValue) ?? ESWarmPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coldStorageOptions = "ColdStorageOptions"
        case dedicatedMasterCount = "DedicatedMasterCount"
        case dedicatedMasterEnabled = "DedicatedMasterEnabled"
        case dedicatedMasterType = "DedicatedMasterType"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case warmCount = "WarmCount"
        case warmEnabled = "WarmEnabled"
        case warmType = "WarmType"
        case zoneAwarenessConfig = "ZoneAwarenessConfig"
        case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coldStorageOptions = self.coldStorageOptions {
            try encodeContainer.encode(coldStorageOptions, forKey: .coldStorageOptions)
        }
        if let dedicatedMasterCount = self.dedicatedMasterCount {
            try encodeContainer.encode(dedicatedMasterCount, forKey: .dedicatedMasterCount)
        }
        if let dedicatedMasterEnabled = self.dedicatedMasterEnabled {
            try encodeContainer.encode(dedicatedMasterEnabled, forKey: .dedicatedMasterEnabled)
        }
        if let dedicatedMasterType = self.dedicatedMasterType {
            try encodeContainer.encode(dedicatedMasterType.rawValue, forKey: .dedicatedMasterType)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmCount = self.warmCount {
            try encodeContainer.encode(warmCount, forKey: .warmCount)
        }
        if let warmEnabled = self.warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
        if let warmType = self.warmType {
            try encodeContainer.encode(warmType.rawValue, forKey: .warmType)
        }
        if let zoneAwarenessConfig = self.zoneAwarenessConfig {
            try encodeContainer.encode(zoneAwarenessConfig, forKey: .zoneAwarenessConfig)
        }
        if let zoneAwarenessEnabled = self.zoneAwarenessEnabled {
            try encodeContainer.encode(zoneAwarenessEnabled, forKey: .zoneAwarenessEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let dedicatedMasterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedMasterEnabled)
        dedicatedMasterEnabled = dedicatedMasterEnabledDecoded
        let zoneAwarenessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .zoneAwarenessEnabled)
        zoneAwarenessEnabled = zoneAwarenessEnabledDecoded
        let zoneAwarenessConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ZoneAwarenessConfig.self, forKey: .zoneAwarenessConfig)
        zoneAwarenessConfig = zoneAwarenessConfigDecoded
        let dedicatedMasterTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .dedicatedMasterType)
        dedicatedMasterType = dedicatedMasterTypeDecoded
        let dedicatedMasterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dedicatedMasterCount)
        dedicatedMasterCount = dedicatedMasterCountDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let warmTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESWarmPartitionInstanceType.self, forKey: .warmType)
        warmType = warmTypeDecoded
        let warmCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmCount)
        warmCount = warmCountDecoded
        let coldStorageOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ColdStorageOptions.self, forKey: .coldStorageOptions)
        coldStorageOptions = coldStorageOptionsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the configuration for the domain cluster, such as the type and number of instances.
    public struct ElasticsearchClusterConfig: Swift.Equatable {
        /// Specifies the ColdStorageOptions config for Elasticsearch Domain
        public var coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions?
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public var dedicatedMasterCount: Swift.Int?
        /// A boolean value to indicate whether a dedicated master node is enabled. See [About Dedicated Master Nodes](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-dedicatedmasternodes) for more information.
        public var dedicatedMasterEnabled: Swift.Bool?
        /// The instance type for a dedicated master node.
        public var dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of instances in the specified domain cluster.
        public var instanceCount: Swift.Int?
        /// The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
        public var instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of warm nodes in the cluster.
        public var warmCount: Swift.Int?
        /// True to enable warm storage.
        public var warmEnabled: Swift.Bool?
        /// The instance type for the Elasticsearch cluster's warm nodes.
        public var warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType?
        /// Specifies the zone awareness configuration for a domain when zone awareness is enabled.
        public var zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig?
        /// A boolean value to indicate whether zone awareness is enabled. See [About Zone Awareness](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-zoneawareness) for more information.
        public var zoneAwarenessEnabled: Swift.Bool?

        public init (
            coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions? = nil,
            dedicatedMasterCount: Swift.Int? = nil,
            dedicatedMasterEnabled: Swift.Bool? = nil,
            dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            instanceCount: Swift.Int? = nil,
            instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            warmCount: Swift.Int? = nil,
            warmEnabled: Swift.Bool? = nil,
            warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType? = nil,
            zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig? = nil,
            zoneAwarenessEnabled: Swift.Bool? = nil
        )
        {
            self.coldStorageOptions = coldStorageOptions
            self.dedicatedMasterCount = dedicatedMasterCount
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.warmCount = warmCount
            self.warmEnabled = warmEnabled
            self.warmType = warmType
            self.zoneAwarenessConfig = zoneAwarenessConfig
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchClusterConfigStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the configuration status for the specified Elasticsearch domain.
    public struct ElasticsearchClusterConfigStatus: Swift.Equatable {
        /// Specifies the cluster configuration for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        /// Specifies the status of the configuration for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchDomainConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = self.advancedOptions {
            try encodeContainer.encode(advancedOptions, forKey: .advancedOptions)
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let elasticsearchClusterConfig = self.elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = self.elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = self.logPublishingOptions {
            try encodeContainer.encode(logPublishingOptions, forKey: .logPublishingOptions)
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchVersionStatus.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfigStatus.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptionsStatus.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AccessPoliciesStatus.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptionsStatus.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfoStatus.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptionsStatus.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptionsStatus.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedOptionsStatus.self, forKey: .advancedOptions)
        advancedOptions = advancedOptionsDecoded
        let logPublishingOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.LogPublishingOptionsStatus.self, forKey: .logPublishingOptions)
        logPublishingOptions = logPublishingOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptionsStatus.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsStatus.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsStatus.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The configuration of an Elasticsearch domain.
    public struct ElasticsearchDomainConfig: Swift.Equatable {
        /// IAM access policy as a JSON-formatted string.
        public var accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain. See [Configuring Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
        public var advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus?
        /// Specifies AdvancedSecurityOptions for the domain.
        public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus?
        /// Specifies AutoTuneOptions for the domain.
        public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus?
        /// Specifies change details of the domain configuration change.
        public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
        /// The CognitoOptions for the specified domain. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        public var cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus?
        /// Specifies the DomainEndpointOptions for the Elasticsearch domain.
        public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public var ebsOptions: ElasticsearchClientTypes.EBSOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public var elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus?
        /// Specifies the EncryptionAtRestOptions for the Elasticsearch domain.
        public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus?
        /// Log publishing options for the given domain.
        public var logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus?
        /// Specifies the NodeToNodeEncryptionOptions for the Elasticsearch domain.
        public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus?
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus?
        /// The VPCOptions for the specified domain. For more information, see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus?

        public init (
            accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus? = nil,
            advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus? = nil,
            changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus? = nil,
            ebsOptions: ElasticsearchClientTypes.EBSOptionsStatus? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus? = nil,
            elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus? = nil,
            logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.ebsOptions = ebsOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vpcOptions = vpcOptions
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchDomainStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case cognitoOptions = "CognitoOptions"
        case created = "Created"
        case deleted = "Deleted"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case endpoint = "Endpoint"
        case endpoints = "Endpoints"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case processing = "Processing"
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
        case snapshotOptions = "SnapshotOptions"
        case upgradeProcessing = "UpgradeProcessing"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let deleted = self.deleted {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainId = self.domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let elasticsearchClusterConfig = self.elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = self.elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, endpointsMap0) in endpoints {
                try endpointsContainer.encode(endpointsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let processing = self.processing {
            try encodeContainer.encode(processing, forKey: .processing)
        }
        if let serviceSoftwareOptions = self.serviceSoftwareOptions {
            try encodeContainer.encode(serviceSoftwareOptions, forKey: .serviceSoftwareOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let upgradeProcessing = self.upgradeProcessing {
            try encodeContainer.encode(upgradeProcessing, forKey: .upgradeProcessing)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .created)
        created = createdDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, serviceurl0) in endpointsContainer {
                if let serviceurl0 = serviceurl0 {
                    endpointsDecoded0?[key0] = serviceurl0
                }
            }
        }
        endpoints = endpointsDecoded0
        let processingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .processing)
        processing = processingDecoded
        let upgradeProcessingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .upgradeProcessing)
        upgradeProcessing = upgradeProcessingDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptions.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsOutput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The current status of an Elasticsearch domain.
    public struct ElasticsearchDomainStatus: Swift.Equatable {
        /// IAM access policy as a JSON-formatted string.
        public var accessPolicies: Swift.String?
        /// Specifies the status of the AdvancedOptions
        public var advancedOptions: [Swift.String:Swift.String]?
        /// The current status of the Elasticsearch domain's advanced security options.
        public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions?
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See [Identifiers for IAM Entities](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html) in Using AWS Identity and Access Management for more information.
        /// This member is required.
        public var arn: Swift.String?
        /// The current status of the Elasticsearch domain's Auto-Tune options.
        public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput?
        /// Specifies change details of the domain configuration change.
        public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
        /// The CognitoOptions for the specified domain. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public var created: Swift.Bool?
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public var deleted: Swift.Bool?
        /// The current status of the Elasticsearch domain's endpoint options.
        public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The unique identifier for the specified Elasticsearch domain.
        /// This member is required.
        public var domainId: Swift.String?
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public var domainName: Swift.String?
        /// The EBSOptions for the specified domain. See [Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs) for more information.
        public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
        /// The type and number of instances in the domain cluster.
        /// This member is required.
        public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        public var elasticsearchVersion: Swift.String?
        /// Specifies the status of the EncryptionAtRestOptions.
        public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public var endpoint: Swift.String?
        /// Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public var endpoints: [Swift.String:Swift.String]?
        /// Log publishing options for the given domain.
        public var logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
        /// Specifies the status of the NodeToNodeEncryptionOptions.
        public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public var processing: Swift.Bool?
        /// The current status of the Elasticsearch domain's service software.
        public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
        /// Specifies the status of the SnapshotOptions
        public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
        /// The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
        public var upgradeProcessing: Swift.Bool?
        /// The VPCOptions for the specified domain. For more information, see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo?

        public init (
            accessPolicies: Swift.String? = nil,
            advancedOptions: [Swift.String:Swift.String]? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            arn: Swift.String? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput? = nil,
            changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
            created: Swift.Bool? = nil,
            deleted: Swift.Bool? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            elasticsearchVersion: Swift.String? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            endpoint: Swift.String? = nil,
            endpoints: [Swift.String:Swift.String]? = nil,
            logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            processing: Swift.Bool? = nil,
            serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
            upgradeProcessing: Swift.Bool? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.arn = arn
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.cognitoOptions = cognitoOptions
            self.created = created
            self.deleted = deleted
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.ebsOptions = ebsOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.processing = processing
            self.serviceSoftwareOptions = serviceSoftwareOptions
            self.snapshotOptions = snapshotOptions
            self.upgradeProcessing = upgradeProcessing
            self.vpcOptions = vpcOptions
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchVersionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the Elasticsearch version options for the specified Elasticsearch domain.
    public struct ElasticsearchVersionStatus: Swift.Equatable {
        /// Specifies the Elasticsearch version for the specified Elasticsearch domain.
        /// This member is required.
        public var options: Swift.String?
        /// Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.EncryptionAtRestOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Encryption At Rest Options.
    public struct EncryptionAtRestOptions: Swift.Equatable {
        /// Specifies the option to enable Encryption At Rest.
        public var enabled: Swift.Bool?
        /// Specifies the KMS Key ID for Encryption At Rest options.
        public var kmsKeyId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension ElasticsearchClientTypes.EncryptionAtRestOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the Encryption At Rest options for the specified Elasticsearch domain.
    public struct EncryptionAtRestOptionsStatus: Swift.Equatable {
        /// Specifies the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.EncryptionAtRestOptions?
        /// Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    public enum EngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case elasticsearch
        case opensearch
        case sdkUnknown(Swift.String)

        public static var allCases: [EngineType] {
            return [
                .elasticsearch,
                .opensearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .elasticsearch: return "Elasticsearch"
            case .opensearch: return "OpenSearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EngineType(rawValue: rawValue) ?? EngineType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ErrorDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case errorType = "ErrorType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let errorType = self.errorType {
            try encodeContainer.encode(errorType, forKey: .errorType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorType)
        errorType = errorTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElasticsearchClientTypes {
    public struct ErrorDetails: Swift.Equatable {
        public var errorMessage: Swift.String?
        public var errorType: Swift.String?

        public init (
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.errorType = errorType
        }
    }

}

extension ElasticsearchClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for nonemptystring0 in values {
                try valuesContainer.encode(nonemptystring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// A filter used to limit results when describing inbound or outbound cross-cluster search connections. Multiple values can be specified per filter. A cross-cluster search connection must match at least one of the specified values for it to be returned from an operation.
    public struct Filter: Swift.Equatable {
        /// Specifies the name of the filter.
        public var name: Swift.String?
        /// Contains one or more values for the filter.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension GetCompatibleElasticsearchVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            return items
        }
    }
}

extension GetCompatibleElasticsearchVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/compatibleVersions"
    }
}

/// Container for request parameters to [GetCompatibleElasticsearchVersions] operation.
public struct GetCompatibleElasticsearchVersionsInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetCompatibleElasticsearchVersionsInputBody: Swift.Equatable {
}

extension GetCompatibleElasticsearchVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCompatibleElasticsearchVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCompatibleElasticsearchVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCompatibleElasticsearchVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCompatibleElasticsearchVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCompatibleElasticsearchVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compatibleElasticsearchVersions = output.compatibleElasticsearchVersions
        } else {
            self.compatibleElasticsearchVersions = nil
        }
    }
}

/// Container for response returned by [GetCompatibleElasticsearchVersions] operation.
public struct GetCompatibleElasticsearchVersionsOutputResponse: Swift.Equatable {
    /// A map of compatible Elasticsearch versions returned as part of the [GetCompatibleElasticsearchVersions] operation.
    public var compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]?

    public init (
        compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]? = nil
    )
    {
        self.compatibleElasticsearchVersions = compatibleElasticsearchVersions
    }
}

struct GetCompatibleElasticsearchVersionsOutputResponseBody: Swift.Equatable {
    let compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]?
}

extension GetCompatibleElasticsearchVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleElasticsearchVersions = "CompatibleElasticsearchVersions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compatibleElasticsearchVersionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.CompatibleVersionsMap?].self, forKey: .compatibleElasticsearchVersions)
        var compatibleElasticsearchVersionsDecoded0:[ElasticsearchClientTypes.CompatibleVersionsMap]? = nil
        if let compatibleElasticsearchVersionsContainer = compatibleElasticsearchVersionsContainer {
            compatibleElasticsearchVersionsDecoded0 = [ElasticsearchClientTypes.CompatibleVersionsMap]()
            for structure0 in compatibleElasticsearchVersionsContainer {
                if let structure0 = structure0 {
                    compatibleElasticsearchVersionsDecoded0?.append(structure0)
                }
            }
        }
        compatibleElasticsearchVersions = compatibleElasticsearchVersionsDecoded0
    }
}

extension GetPackageVersionHistoryInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension GetPackageVersionHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())/history"
    }
}

/// Container for request parameters to [GetPackageVersionHistory] operation.
public struct GetPackageVersionHistoryInput: Swift.Equatable {
    /// Limits results to a maximum number of versions.
    public var maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?
    /// Returns an audit history of versions of the package.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct GetPackageVersionHistoryInputBody: Swift.Equatable {
}

extension GetPackageVersionHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPackageVersionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPackageVersionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPackageVersionHistoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPackageVersionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPackageVersionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageID = output.packageID
            self.packageVersionHistoryList = output.packageVersionHistoryList
        } else {
            self.nextToken = nil
            self.packageID = nil
            self.packageVersionHistoryList = nil
        }
    }
}

/// Container for response returned by [GetPackageVersionHistory] operation.
public struct GetPackageVersionHistoryOutputResponse: Swift.Equatable {
    public var nextToken: Swift.String?
    public var packageID: Swift.String?
    /// List of PackageVersionHistory objects.
    public var packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?

    public init (
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageID = packageID
        self.packageVersionHistoryList = packageVersionHistoryList
    }
}

struct GetPackageVersionHistoryOutputResponseBody: Swift.Equatable {
    let packageID: Swift.String?
    let packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?
    let nextToken: Swift.String?
}

extension GetPackageVersionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageID = "PackageID"
        case packageVersionHistoryList = "PackageVersionHistoryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageVersionHistoryListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.PackageVersionHistory?].self, forKey: .packageVersionHistoryList)
        var packageVersionHistoryListDecoded0:[ElasticsearchClientTypes.PackageVersionHistory]? = nil
        if let packageVersionHistoryListContainer = packageVersionHistoryListContainer {
            packageVersionHistoryListDecoded0 = [ElasticsearchClientTypes.PackageVersionHistory]()
            for structure0 in packageVersionHistoryListContainer {
                if let structure0 = structure0 {
                    packageVersionHistoryListDecoded0?.append(structure0)
                }
            }
        }
        packageVersionHistoryList = packageVersionHistoryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeHistoryInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension GetUpgradeHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/upgradeDomain/\(domainName.urlPercentEncoding())/history"
    }
}

/// Container for request parameters to [GetUpgradeHistory] operation.
public struct GetUpgradeHistoryInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// Set this value to limit the number of results returned.
    public var maxResults: Swift.Int
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetUpgradeHistoryInputBody: Swift.Equatable {
}

extension GetUpgradeHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUpgradeHistoryOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUpgradeHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.upgradeHistories = output.upgradeHistories
        } else {
            self.nextToken = nil
            self.upgradeHistories = nil
        }
    }
}

/// Container for response returned by [GetUpgradeHistory] operation.
public struct GetUpgradeHistoryOutputResponse: Swift.Equatable {
    /// Pagination token that needs to be supplied to the next call to get the next page of results
    public var nextToken: Swift.String?
    /// A list of [UpgradeHistory] objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of [GetUpgradeHistoryResponse] object.
    public var upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]?

    public init (
        nextToken: Swift.String? = nil,
        upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.upgradeHistories = upgradeHistories
    }
}

struct GetUpgradeHistoryOutputResponseBody: Swift.Equatable {
    let upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]?
    let nextToken: Swift.String?
}

extension GetUpgradeHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case upgradeHistories = "UpgradeHistories"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeHistoriesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.UpgradeHistory?].self, forKey: .upgradeHistories)
        var upgradeHistoriesDecoded0:[ElasticsearchClientTypes.UpgradeHistory]? = nil
        if let upgradeHistoriesContainer = upgradeHistoriesContainer {
            upgradeHistoriesDecoded0 = [ElasticsearchClientTypes.UpgradeHistory]()
            for structure0 in upgradeHistoriesContainer {
                if let structure0 = structure0 {
                    upgradeHistoriesDecoded0?.append(structure0)
                }
            }
        }
        upgradeHistories = upgradeHistoriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/upgradeDomain/\(domainName.urlPercentEncoding())/status"
    }
}

/// Container for request parameters to [GetUpgradeStatus] operation.
public struct GetUpgradeStatusInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetUpgradeStatusInputBody: Swift.Equatable {
}

extension GetUpgradeStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUpgradeStatusOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUpgradeStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stepStatus = output.stepStatus
            self.upgradeName = output.upgradeName
            self.upgradeStep = output.upgradeStep
        } else {
            self.stepStatus = nil
            self.upgradeName = nil
            self.upgradeStep = nil
        }
    }
}

/// Container for response returned by [GetUpgradeStatus] operation.
public struct GetUpgradeStatusOutputResponse: Swift.Equatable {
    /// One of 4 statuses that a step can go through returned as part of the [GetUpgradeStatusResponse] object. The status can take one of the following values:
    ///
    /// * In Progress
    ///
    /// * Succeeded
    ///
    /// * Succeeded with Issues
    ///
    /// * Failed
    public var stepStatus: ElasticsearchClientTypes.UpgradeStatus?
    /// A string that describes the update briefly
    public var upgradeName: Swift.String?
    /// Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
    ///
    /// * PreUpgradeCheck
    ///
    /// * Snapshot
    ///
    /// * Upgrade
    public var upgradeStep: ElasticsearchClientTypes.UpgradeStep?

    public init (
        stepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil,
        upgradeName: Swift.String? = nil,
        upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil
    )
    {
        self.stepStatus = stepStatus
        self.upgradeName = upgradeName
        self.upgradeStep = upgradeStep
    }
}

struct GetUpgradeStatusOutputResponseBody: Swift.Equatable {
    let upgradeStep: ElasticsearchClientTypes.UpgradeStep?
    let stepStatus: ElasticsearchClientTypes.UpgradeStatus?
    let upgradeName: Swift.String?
}

extension GetUpgradeStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stepStatus = "StepStatus"
        case upgradeName = "UpgradeName"
        case upgradeStep = "UpgradeStep"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let stepStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .stepStatus)
        stepStatus = stepStatusDecoded
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionStatus = self.connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let crossClusterSearchConnectionId = self.crossClusterSearchConnectionId {
            try encodeContainer.encode(crossClusterSearchConnectionId, forKey: .crossClusterSearchConnectionId)
        }
        if let destinationDomainInfo = self.destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = self.sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of an inbound connection.
    public struct InboundCrossClusterSearchConnection: Swift.Equatable {
        /// Specifies the [InboundCrossClusterSearchConnectionStatus] for the outbound connection.
        public var connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the inbound cross-cluster search connection.
        public var crossClusterSearchConnectionId: Swift.String?
        /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
        public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the [DomainInformation] for the source Elasticsearch domain.
        public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init (
            connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the coonection status of an inbound cross-cluster search connection.
    public struct InboundCrossClusterSearchConnectionStatus: Swift.Equatable {
        /// Specifies verbose information for the inbound connection status.
        public var message: Swift.String?
        /// The state code for inbound connection. This can be one of the following:
        ///
        /// * PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner.
        ///
        /// * APPROVED: Inbound connection is pending acceptance by destination domain owner.
        ///
        /// * REJECTING: Inbound connection rejection is in process.
        ///
        /// * REJECTED: Inbound connection is rejected.
        ///
        /// * DELETING: Inbound connection deletion is in progress.
        ///
        /// * DELETED: Inbound connection is deleted and cannot be used further.
        public var statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension ElasticsearchClientTypes {
    public enum InboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case deleted
        case deleting
        case pendingAcceptance
        case rejected
        case rejecting
        case sdkUnknown(Swift.String)

        public static var allCases: [InboundCrossClusterSearchConnectionStatusCode] {
            return [
                .approved,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .rejected,
                .rejecting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "APPROVED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .rejected: return "REJECTED"
            case .rejecting: return "REJECTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InboundCrossClusterSearchConnectionStatusCode(rawValue: rawValue) ?? InboundCrossClusterSearchConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.InstanceCountLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumInstanceCount = "MaximumInstanceCount"
        case minimumInstanceCount = "MinimumInstanceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumInstanceCount != 0 {
            try encodeContainer.encode(maximumInstanceCount, forKey: .maximumInstanceCount)
        }
        if minimumInstanceCount != 0 {
            try encodeContainer.encode(minimumInstanceCount, forKey: .minimumInstanceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumInstanceCount) ?? 0
        minimumInstanceCount = minimumInstanceCountDecoded
        let maximumInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumInstanceCount) ?? 0
        maximumInstanceCount = maximumInstanceCountDecoded
    }
}

extension ElasticsearchClientTypes {
    /// InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for given InstanceType.
    public struct InstanceCountLimits: Swift.Equatable {
        /// Maximum number of Instances that can be instantiated for given InstanceType.
        public var maximumInstanceCount: Swift.Int
        /// Minimum number of Instances that can be instantiated for given InstanceType.
        public var minimumInstanceCount: Swift.Int

        public init (
            maximumInstanceCount: Swift.Int = 0,
            minimumInstanceCount: Swift.Int = 0
        )
        {
            self.maximumInstanceCount = maximumInstanceCount
            self.minimumInstanceCount = minimumInstanceCount
        }
    }

}

extension ElasticsearchClientTypes.InstanceLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCountLimits = "InstanceCountLimits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCountLimits = self.instanceCountLimits {
            try encodeContainer.encode(instanceCountLimits, forKey: .instanceCountLimits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountLimitsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InstanceCountLimits.self, forKey: .instanceCountLimits)
        instanceCountLimits = instanceCountLimitsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
    public struct InstanceLimits: Swift.Equatable {
        /// InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for given InstanceType.
        public var instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits?

        public init (
            instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits? = nil
        )
        {
            self.instanceCountLimits = instanceCountLimits
        }
    }

}

extension InternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
public struct InternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPaginationTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPaginationTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400.
public struct InvalidPaginationTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPaginationTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPaginationTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.
public struct InvalidTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.Limits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLimits = "AdditionalLimits"
        case instanceLimits = "InstanceLimits"
        case storageTypes = "StorageTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLimits = additionalLimits {
            var additionalLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLimits)
            for additionallimit0 in additionalLimits {
                try additionalLimitsContainer.encode(additionallimit0)
            }
        }
        if let instanceLimits = self.instanceLimits {
            try encodeContainer.encode(instanceLimits, forKey: .instanceLimits)
        }
        if let storageTypes = storageTypes {
            var storageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypes)
            for storagetype0 in storageTypes {
                try storageTypesContainer.encode(storagetype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.StorageType?].self, forKey: .storageTypes)
        var storageTypesDecoded0:[ElasticsearchClientTypes.StorageType]? = nil
        if let storageTypesContainer = storageTypesContainer {
            storageTypesDecoded0 = [ElasticsearchClientTypes.StorageType]()
            for structure0 in storageTypesContainer {
                if let structure0 = structure0 {
                    storageTypesDecoded0?.append(structure0)
                }
            }
        }
        storageTypes = storageTypesDecoded0
        let instanceLimitsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InstanceLimits.self, forKey: .instanceLimits)
        instanceLimits = instanceLimitsDecoded
        let additionalLimitsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AdditionalLimit?].self, forKey: .additionalLimits)
        var additionalLimitsDecoded0:[ElasticsearchClientTypes.AdditionalLimit]? = nil
        if let additionalLimitsContainer = additionalLimitsContainer {
            additionalLimitsDecoded0 = [ElasticsearchClientTypes.AdditionalLimit]()
            for structure0 in additionalLimitsContainer {
                if let structure0 = structure0 {
                    additionalLimitsDecoded0?.append(structure0)
                }
            }
        }
        additionalLimits = additionalLimitsDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Limits for given InstanceType and for each of it's role.
    ///
    ///
    ///
    ///
    ///
    /// Limits contains following [StorageTypes,][InstanceLimits] and [AdditionalLimits]
    public struct Limits: Swift.Equatable {
        /// List of additional limits that are specific to a given InstanceType and for each of it's [InstanceRole] .
        public var additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]?
        /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
        public var instanceLimits: ElasticsearchClientTypes.InstanceLimits?
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType.
        public var storageTypes: [ElasticsearchClientTypes.StorageType]?

        public init (
            additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]? = nil,
            instanceLimits: ElasticsearchClientTypes.InstanceLimits? = nil,
            storageTypes: [ElasticsearchClientTypes.StorageType]? = nil
        )
        {
            self.additionalLimits = additionalLimits
            self.instanceLimits = instanceLimits
            self.storageTypes = storageTypes
        }
    }

}

extension ListDomainNamesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let engineType = engineType {
                let engineTypeQueryItem = ClientRuntime.URLQueryItem(name: "engineType".urlPercentEncoding(), value: Swift.String(engineType.rawValue).urlPercentEncoding())
                items.append(engineTypeQueryItem)
            }
            return items
        }
    }
}

extension ListDomainNamesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/domain"
    }
}

/// Container for the parameters to the [ListDomainNames] operation.
public struct ListDomainNamesInput: Swift.Equatable {
    /// Optional parameter to filter the output by domain engine type. Acceptable values are 'Elasticsearch' and 'OpenSearch'.
    public var engineType: ElasticsearchClientTypes.EngineType?

    public init (
        engineType: ElasticsearchClientTypes.EngineType? = nil
    )
    {
        self.engineType = engineType
    }
}

struct ListDomainNamesInputBody: Swift.Equatable {
}

extension ListDomainNamesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainNamesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainNames = output.domainNames
        } else {
            self.domainNames = nil
        }
    }
}

/// The result of a ListDomainNames operation. Contains the names of all domains owned by this account and their respective engine types.
public struct ListDomainNamesOutputResponse: Swift.Equatable {
    /// List of domain names and respective engine types.
    public var domainNames: [ElasticsearchClientTypes.DomainInfo]?

    public init (
        domainNames: [ElasticsearchClientTypes.DomainInfo]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct ListDomainNamesOutputResponseBody: Swift.Equatable {
    let domainNames: [ElasticsearchClientTypes.DomainInfo]?
}

extension ListDomainNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainInfo?].self, forKey: .domainNames)
        var domainNamesDecoded0:[ElasticsearchClientTypes.DomainInfo]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [ElasticsearchClientTypes.DomainInfo]()
            for structure0 in domainNamesContainer {
                if let structure0 = structure0 {
                    domainNamesDecoded0?.append(structure0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension ListDomainsForPackageInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListDomainsForPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())/domains"
    }
}

/// Container for request parameters to [ListDomainsForPackage] operation.
public struct ListDomainsForPackageInput: Swift.Equatable {
    /// Limits results to a maximum number of domains.
    public var maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?
    /// The package for which to list domains.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct ListDomainsForPackageInputBody: Swift.Equatable {
}

extension ListDomainsForPackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainsForPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsForPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainsForPackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsForPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainsForPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

/// Container for response parameters to [ListDomainsForPackage] operation.
public struct ListDomainsForPackageOutputResponse: Swift.Equatable {
    /// List of DomainPackageDetails objects.
    public var domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    public var nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListDomainsForPackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    let nextToken: Swift.String?
}

extension ListDomainsForPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[ElasticsearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [ElasticsearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListElasticsearchInstanceTypesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListElasticsearchInstanceTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let elasticsearchVersion = elasticsearchVersion else {
            return nil
        }
        return "/2015-01-01/es/instanceTypes/\(elasticsearchVersion.urlPercentEncoding())"
    }
}

/// Container for the parameters to the [ListElasticsearchInstanceTypes] operation.
public struct ListElasticsearchInstanceTypesInput: Swift.Equatable {
    /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain.
    public var domainName: Swift.String?
    /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed.
    /// This member is required.
    public var elasticsearchVersion: Swift.String?
    /// Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored.
    public var maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListElasticsearchInstanceTypesInputBody: Swift.Equatable {
}

extension ListElasticsearchInstanceTypesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListElasticsearchInstanceTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListElasticsearchInstanceTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListElasticsearchInstanceTypesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListElasticsearchInstanceTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListElasticsearchInstanceTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.elasticsearchInstanceTypes = output.elasticsearchInstanceTypes
            self.nextToken = output.nextToken
        } else {
            self.elasticsearchInstanceTypes = nil
            self.nextToken = nil
        }
    }
}

/// Container for the parameters returned by [ListElasticsearchInstanceTypes] operation.
public struct ListElasticsearchInstanceTypesOutputResponse: Swift.Equatable {
    /// List of instance types supported by Amazon Elasticsearch service for given [ElasticsearchVersion]
    public var elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]?
    /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results.
    public var nextToken: Swift.String?

    public init (
        elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
        self.nextToken = nextToken
    }
}

struct ListElasticsearchInstanceTypesOutputResponseBody: Swift.Equatable {
    let elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]?
    let nextToken: Swift.String?
}

extension ListElasticsearchInstanceTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticsearchInstanceTypes = "ElasticsearchInstanceTypes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchInstanceTypesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ESPartitionInstanceType?].self, forKey: .elasticsearchInstanceTypes)
        var elasticsearchInstanceTypesDecoded0:[ElasticsearchClientTypes.ESPartitionInstanceType]? = nil
        if let elasticsearchInstanceTypesContainer = elasticsearchInstanceTypesContainer {
            elasticsearchInstanceTypesDecoded0 = [ElasticsearchClientTypes.ESPartitionInstanceType]()
            for enum0 in elasticsearchInstanceTypesContainer {
                if let enum0 = enum0 {
                    elasticsearchInstanceTypesDecoded0?.append(enum0)
                }
            }
        }
        elasticsearchInstanceTypes = elasticsearchInstanceTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListElasticsearchVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListElasticsearchVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/versions"
    }
}

/// Container for the parameters to the [ListElasticsearchVersions] operation. Use [MaxResults] to control the maximum number of results to retrieve in a single call. Use [NextToken] in response to retrieve more results. If the received response does not contain a NextToken, then there are no more results to retrieve.
public struct ListElasticsearchVersionsInput: Swift.Equatable {
    /// Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored.
    public var maxResults: Swift.Int
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListElasticsearchVersionsInputBody: Swift.Equatable {
}

extension ListElasticsearchVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListElasticsearchVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListElasticsearchVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListElasticsearchVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListElasticsearchVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListElasticsearchVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.elasticsearchVersions = output.elasticsearchVersions
            self.nextToken = output.nextToken
        } else {
            self.elasticsearchVersions = nil
            self.nextToken = nil
        }
    }
}

/// Container for the parameters for response received from [ListElasticsearchVersions] operation.
public struct ListElasticsearchVersionsOutputResponse: Swift.Equatable {
    /// List of supported elastic search versions.
    public var elasticsearchVersions: [Swift.String]?
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init (
        elasticsearchVersions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchVersions = elasticsearchVersions
        self.nextToken = nextToken
    }
}

struct ListElasticsearchVersionsOutputResponseBody: Swift.Equatable {
    let elasticsearchVersions: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListElasticsearchVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticsearchVersions = "ElasticsearchVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .elasticsearchVersions)
        var elasticsearchVersionsDecoded0:[Swift.String]? = nil
        if let elasticsearchVersionsContainer = elasticsearchVersionsContainer {
            elasticsearchVersionsDecoded0 = [Swift.String]()
            for string0 in elasticsearchVersionsContainer {
                if let string0 = string0 {
                    elasticsearchVersionsDecoded0?.append(string0)
                }
            }
        }
        elasticsearchVersions = elasticsearchVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPackagesForDomainInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListPackagesForDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/domain/\(domainName.urlPercentEncoding())/packages"
    }
}

/// Container for request parameters to [ListPackagesForDomain] operation.
public struct ListPackagesForDomainInput: Swift.Equatable {
    /// The name of the domain for which you want to list associated packages.
    /// This member is required.
    public var domainName: Swift.String?
    /// Limits results to a maximum number of packages.
    public var maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainInputBody: Swift.Equatable {
}

extension ListPackagesForDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPackagesForDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPackagesForDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPackagesForDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPackagesForDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPackagesForDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

/// Container for response parameters to [ListPackagesForDomain] operation.
public struct ListPackagesForDomainOutputResponse: Swift.Equatable {
    /// List of DomainPackageDetails objects.
    public var domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    /// Pagination token that needs to be supplied to the next call to get the next page of results.
    public var nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainOutputResponseBody: Swift.Equatable {
    let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    let nextToken: Swift.String?
}

extension ListPackagesForDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[ElasticsearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [ElasticsearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let arn = arn else {
                let message = "Creating a URL Query Item failed. arn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let arnQueryItem = ClientRuntime.URLQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(arn).urlPercentEncoding())
            items.append(arnQueryItem)
            return items
        }
    }
}

extension ListTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/tags"
    }
}

/// Container for the parameters to the [ListTags] operation. Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view are attached.
public struct ListTagsInput: Swift.Equatable {
    /// Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
    /// This member is required.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct ListTagsInputBody: Swift.Equatable {
}

extension ListTagsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// The result of a ListTags operation. Contains tags for all requested Elasticsearch domains.
public struct ListTagsOutputResponse: Swift.Equatable {
    /// List of Tag for the requested Elasticsearch domain.
    public var tagList: [ElasticsearchClientTypes.Tag]?

    public init (
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct ListTagsOutputResponseBody: Swift.Equatable {
    let tagList: [ElasticsearchClientTypes.Tag]?
}

extension ListTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension ListVpcEndpointAccessInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/listVpcEndpointAccess"
    }
}

/// Retrieves information about each principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint
public struct ListVpcEndpointAccessInput: Swift.Equatable {
    /// The name of the OpenSearch Service domain to retrieve access information for.
    /// This member is required.
    public var domainName: Swift.String?
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointAccessInputBody: Swift.Equatable {
}

extension ListVpcEndpointAccessInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedPrincipalList = output.authorizedPrincipalList
            self.nextToken = output.nextToken
        } else {
            self.authorizedPrincipalList = nil
            self.nextToken = nil
        }
    }
}

/// Container for response parameters to the [ListVpcEndpointAccess] operation. Returns a list of accounts id and account type authorized to manage VPC endpoints.
public struct ListVpcEndpointAccessOutputResponse: Swift.Equatable {
    /// List of AuthorizedPrincipal describing the details of the permissions to manage VPC endpoints against the specified domain.
    /// This member is required.
    public var authorizedPrincipalList: [ElasticsearchClientTypes.AuthorizedPrincipal]?
    /// Provides an identifier to allow retrieval of paginated results.
    /// This member is required.
    public var nextToken: Swift.String?

    public init (
        authorizedPrincipalList: [ElasticsearchClientTypes.AuthorizedPrincipal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.authorizedPrincipalList = authorizedPrincipalList
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointAccessOutputResponseBody: Swift.Equatable {
    let authorizedPrincipalList: [ElasticsearchClientTypes.AuthorizedPrincipal]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedPrincipalList = "AuthorizedPrincipalList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedPrincipalListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AuthorizedPrincipal?].self, forKey: .authorizedPrincipalList)
        var authorizedPrincipalListDecoded0:[ElasticsearchClientTypes.AuthorizedPrincipal]? = nil
        if let authorizedPrincipalListContainer = authorizedPrincipalListContainer {
            authorizedPrincipalListDecoded0 = [ElasticsearchClientTypes.AuthorizedPrincipal]()
            for structure0 in authorizedPrincipalListContainer {
                if let structure0 = structure0 {
                    authorizedPrincipalListDecoded0?.append(structure0)
                }
            }
        }
        authorizedPrincipalList = authorizedPrincipalListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVpcEndpointsForDomainInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointsForDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/vpcEndpoints"
    }
}

/// Container for request parameters to the [ListVpcEndpointsForDomain] operation. Specifies the domain whose VPC endpoints will be listed.
public struct ListVpcEndpointsForDomainInput: Swift.Equatable {
    /// Name of the ElasticSearch domain whose VPC endpoints are to be listed.
    /// This member is required.
    public var domainName: Swift.String?
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointsForDomainInputBody: Swift.Equatable {
}

extension ListVpcEndpointsForDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointsForDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointsForDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointsForDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointsForDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointsForDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.vpcEndpointSummaryList = output.vpcEndpointSummaryList
        } else {
            self.nextToken = nil
            self.vpcEndpointSummaryList = nil
        }
    }
}

/// Container for response parameters to the [ListVpcEndpointsForDomain] operation. Returns a list containing summarized details of the VPC endpoints.
public struct ListVpcEndpointsForDomainOutputResponse: Swift.Equatable {
    /// Information about each endpoint associated with the domain.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Provides list of VpcEndpointSummary summarizing details of the VPC endpoints.
    /// This member is required.
    public var vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?

    public init (
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

struct ListVpcEndpointsForDomainOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointsForDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case vpcEndpointSummaryList = "VpcEndpointSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.VpcEndpointSummary?].self, forKey: .vpcEndpointSummaryList)
        var vpcEndpointSummaryListDecoded0:[ElasticsearchClientTypes.VpcEndpointSummary]? = nil
        if let vpcEndpointSummaryListContainer = vpcEndpointSummaryListContainer {
            vpcEndpointSummaryListDecoded0 = [ElasticsearchClientTypes.VpcEndpointSummary]()
            for structure0 in vpcEndpointSummaryListContainer {
                if let structure0 = structure0 {
                    vpcEndpointSummaryListDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointSummaryList = vpcEndpointSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVpcEndpointsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/vpcEndpoints"
    }
}

/// Container for request parameters to the [ListVpcEndpoints] operation.
public struct ListVpcEndpointsInput: Swift.Equatable {
    /// Identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointsInputBody: Swift.Equatable {
}

extension ListVpcEndpointsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.vpcEndpointSummaryList = output.vpcEndpointSummaryList
        } else {
            self.nextToken = nil
            self.vpcEndpointSummaryList = nil
        }
    }
}

/// Container for response parameters to the [ListVpcEndpoints] operation. Returns a list containing summarized details of the VPC endpoints.
public struct ListVpcEndpointsOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Information about each endpoint.
    /// This member is required.
    public var vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?

    public init (
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

struct ListVpcEndpointsOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case vpcEndpointSummaryList = "VpcEndpointSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.VpcEndpointSummary?].self, forKey: .vpcEndpointSummaryList)
        var vpcEndpointSummaryListDecoded0:[ElasticsearchClientTypes.VpcEndpointSummary]? = nil
        if let vpcEndpointSummaryListContainer = vpcEndpointSummaryListContainer {
            vpcEndpointSummaryListDecoded0 = [ElasticsearchClientTypes.VpcEndpointSummary]()
            for structure0 in vpcEndpointSummaryListContainer {
                if let structure0 = structure0 {
                    vpcEndpointSummaryListDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointSummaryList = vpcEndpointSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ElasticsearchClientTypes.LogPublishingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsLogGroupArn = self.cloudWatchLogsLogGroupArn {
            try encodeContainer.encode(cloudWatchLogsLogGroupArn, forKey: .cloudWatchLogsLogGroupArn)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Log Publishing option that is set for given domain.
    ///
    ///
    ///
    ///
    ///
    /// Attributes and their details:
    ///
    /// * CloudWatchLogsLogGroupArn: ARN of the Cloudwatch log group to which log needs to be published.
    ///
    /// * Enabled: Whether the log publishing for given log type is enabled or not
    public struct LogPublishingOption: Swift.Equatable {
        /// ARN of the Cloudwatch log group to which log needs to be published.
        public var cloudWatchLogsLogGroupArn: Swift.String?
        /// Specifies whether given log publishing option is enabled or not.
        public var enabled: Swift.Bool?

        public init (
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.LogPublishingOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logPublishingOptions0) in options {
                try optionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in optionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    optionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The configured log publishing options for the domain and their current status.
    public struct LogPublishingOptionsStatus: Swift.Equatable {
        /// The log publishing options configured for the Elasticsearch domain.
        public var options: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
        /// The status of the log publishing options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Type of Log File, it can be one of the following:
    ///
    /// * INDEX_SLOW_LOGS: Index slow logs contain insert requests that took more time than configured index query log threshold to execute.
    ///
    /// * SEARCH_SLOW_LOGS: Search slow logs contain search queries that took more time than configured search query log threshold to execute.
    ///
    /// * ES_APPLICATION_LOGS: Elasticsearch application logs contain information about errors and warnings raised during the operation of the service and can be useful for troubleshooting.
    ///
    /// * AUDIT_LOGS: Audit logs contain records of user requests for access from the domain.
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auditLogs
        case esApplicationLogs
        case indexSlowLogs
        case searchSlowLogs
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .auditLogs,
                .esApplicationLogs,
                .indexSlowLogs,
                .searchSlowLogs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auditLogs: return "AUDIT_LOGS"
            case .esApplicationLogs: return "ES_APPLICATION_LOGS"
            case .indexSlowLogs: return "INDEX_SLOW_LOGS"
            case .searchSlowLogs: return "SEARCH_SLOW_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.MasterUserOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case masterUserARN = "MasterUserARN"
        case masterUserName = "MasterUserName"
        case masterUserPassword = "MasterUserPassword"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let masterUserARN = self.masterUserARN {
            try encodeContainer.encode(masterUserARN, forKey: .masterUserARN)
        }
        if let masterUserName = self.masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserARN)
        masterUserARN = masterUserARNDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
    }
}

extension ElasticsearchClientTypes.MasterUserOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MasterUserOptions(masterUserARN: \(Swift.String(describing: masterUserARN)), masterUserName: \"CONTENT_REDACTED\", masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension ElasticsearchClientTypes {
    /// Credentials for the master user: username and password, ARN, or both.
    public struct MasterUserOptions: Swift.Equatable {
        /// ARN for the master user (if IAM is enabled).
        public var masterUserARN: Swift.String?
        /// The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserName: Swift.String?
        /// The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserPassword: Swift.String?

        public init (
            masterUserARN: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.masterUserARN = masterUserARN
            self.masterUserName = masterUserName
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the node-to-node encryption options.
    public struct NodeToNodeEncryptionOptions: Swift.Equatable {
        /// Specify true to enable node-to-node encryption.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the node-to-node encryption options for the specified Elasticsearch domain.
    public struct NodeToNodeEncryptionOptionsStatus: Swift.Equatable {
        /// Specifies the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// Specifies the status of the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// The state of a requested change. One of the following:
    ///
    /// * Processing: The request change is still in-process.
    ///
    /// * Active: The request change is processed and deployed to the Elasticsearch domain.
    public enum OptionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case processing
        case requiresindexdocuments
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionState] {
            return [
                .active,
                .processing,
                .requiresindexdocuments,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .processing: return "Processing"
            case .requiresindexdocuments: return "RequiresIndexDocuments"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OptionState(rawValue: rawValue) ?? OptionState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.OptionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let pendingDeletion = self.pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encodeTimestamp(updateDate, format: .epochSeconds, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .updateVersion) ?? 0
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionState.self, forKey: .state)
        state = stateDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Provides the current status of the entity.
    public struct OptionStatus: Swift.Equatable {
        /// Timestamp which tells the creation date for the entity.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// Provides the OptionState for the Elasticsearch domain.
        /// This member is required.
        public var state: ElasticsearchClientTypes.OptionState?
        /// Timestamp which tells the last updated time for the entity.
        /// This member is required.
        public var updateDate: ClientRuntime.Date?
        /// Specifies the latest version for the entity.
        public var updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.OptionState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = self.connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let connectionStatus = self.connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let crossClusterSearchConnectionId = self.crossClusterSearchConnectionId {
            try encodeContainer.encode(crossClusterSearchConnectionId, forKey: .crossClusterSearchConnectionId)
        }
        if let destinationDomainInfo = self.destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = self.sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of an outbound connection.
    public struct OutboundCrossClusterSearchConnection: Swift.Equatable {
        /// Specifies the connection alias for the outbound cross-cluster search connection.
        public var connectionAlias: Swift.String?
        /// Specifies the [OutboundCrossClusterSearchConnectionStatus] for the outbound connection.
        public var connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the outbound cross-cluster search connection.
        public var crossClusterSearchConnectionId: Swift.String?
        /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
        public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the [DomainInformation] for the source Elasticsearch domain.
        public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init (
            connectionAlias: Swift.String? = nil,
            connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionAlias = connectionAlias
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the connection status of an outbound cross-cluster search connection.
    public struct OutboundCrossClusterSearchConnectionStatus: Swift.Equatable {
        /// Specifies verbose information for the outbound connection status.
        public var message: Swift.String?
        /// The state code for outbound connection. This can be one of the following:
        ///
        /// * VALIDATING: The outbound connection request is being validated.
        ///
        /// * VALIDATION_FAILED: Validation failed for the connection request.
        ///
        /// * PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner.
        ///
        /// * PROVISIONING: Outbound connection request is in process.
        ///
        /// * ACTIVE: Outbound connection is active and ready to use.
        ///
        /// * REJECTED: Outbound connection request is rejected by destination domain owner.
        ///
        /// * DELETING: Outbound connection deletion is in progress.
        ///
        /// * DELETED: Outbound connection is deleted and cannot be used further.
        public var statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension ElasticsearchClientTypes {
    public enum OutboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case deleting
        case pendingAcceptance
        case provisioning
        case rejected
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [OutboundCrossClusterSearchConnectionStatusCode] {
            return [
                .active,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .provisioning,
                .rejected,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .provisioning: return "PROVISIONING"
            case .rejected: return "REJECTED"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutboundCrossClusterSearchConnectionStatusCode(rawValue: rawValue) ?? OutboundCrossClusterSearchConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    /// The overall status value of the domain configuration change.
    public enum OverallChangeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case pending
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [OverallChangeStatus] {
            return [
                .completed,
                .failed,
                .pending,
                .processing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OverallChangeStatus(rawValue: rawValue) ?? OverallChangeStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.PackageDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availablePackageVersion = "AvailablePackageVersion"
        case createdAt = "CreatedAt"
        case errorDetails = "ErrorDetails"
        case lastUpdatedAt = "LastUpdatedAt"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageStatus = "PackageStatus"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availablePackageVersion = self.availablePackageVersion {
            try encodeContainer.encode(availablePackageVersion, forKey: .availablePackageVersion)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageStatus = self.packageStatus {
            try encodeContainer.encode(packageStatus.rawValue, forKey: .packageStatus)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageStatus.self, forKey: .packageStatus)
        packageStatus = packageStatusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let availablePackageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availablePackageVersion)
        availablePackageVersion = availablePackageVersionDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Basic information about a package.
    public struct PackageDetails: Swift.Equatable {
        public var availablePackageVersion: Swift.String?
        /// Timestamp which tells creation date of the package.
        public var createdAt: ClientRuntime.Date?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: ElasticsearchClientTypes.ErrorDetails?
        public var lastUpdatedAt: ClientRuntime.Date?
        /// User-specified description of the package.
        public var packageDescription: Swift.String?
        /// Internal ID of the package.
        public var packageID: Swift.String?
        /// User specified name of the package.
        public var packageName: Swift.String?
        /// Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
        public var packageStatus: ElasticsearchClientTypes.PackageStatus?
        /// Currently supports only TXT-DICTIONARY.
        public var packageType: ElasticsearchClientTypes.PackageType?

        public init (
            availablePackageVersion: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            packageDescription: Swift.String? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageStatus: ElasticsearchClientTypes.PackageStatus? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil
        )
        {
            self.availablePackageVersion = availablePackageVersion
            self.createdAt = createdAt
            self.errorDetails = errorDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.packageDescription = packageDescription
            self.packageID = packageID
            self.packageName = packageName
            self.packageStatus = packageStatus
            self.packageType = packageType
        }
    }

}

extension ElasticsearchClientTypes.PackageSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketName = "S3BucketName"
        case s3Key = "S3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3Key = self.s3Key {
            try encodeContainer.encode(s3Key, forKey: .s3Key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    public struct PackageSource: Swift.Equatable {
        /// Name of the bucket containing the package.
        public var s3BucketName: Swift.String?
        /// Key (file name) of the package.
        public var s3Key: Swift.String?

        public init (
            s3BucketName: Swift.String? = nil,
            s3Key: Swift.String? = nil
        )
        {
            self.s3BucketName = s3BucketName
            self.s3Key = s3Key
        }
    }

}

extension ElasticsearchClientTypes {
    public enum PackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case copying
        case copyFailed
        case deleted
        case deleteFailed
        case deleting
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageStatus] {
            return [
                .available,
                .copying,
                .copyFailed,
                .deleted,
                .deleteFailed,
                .deleting,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .copyFailed: return "COPY_FAILED"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageStatus(rawValue: rawValue) ?? PackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum PackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case txtDictionary
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageType] {
            return [
                .txtDictionary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .txtDictionary: return "TXT-DICTIONARY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageType(rawValue: rawValue) ?? PackageType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.PackageVersionHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case createdAt = "CreatedAt"
        case packageVersion = "PackageVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = self.commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let packageVersion = self.packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Details of a package version.
    public struct PackageVersionHistory: Swift.Equatable {
        /// A message associated with the version.
        public var commitMessage: Swift.String?
        /// Timestamp which tells creation time of the package version.
        public var createdAt: ClientRuntime.Date?
        /// Version of the package.
        public var packageVersion: Swift.String?

        public init (
            commitMessage: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            packageVersion: Swift.String? = nil
        )
        {
            self.commitMessage = commitMessage
            self.createdAt = createdAt
            self.packageVersion = packageVersion
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the type of AWS account permitted to manage VPC endpoints.:
    ///
    /// * AWS_ACCOUNT: Indicates that the account is owned by an AWS user.
    ///
    /// * AWS_SERVICE: Indicates the the account is owned by an AWS service.
    public enum PrincipalType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsAccount
        case awsService
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .awsAccount,
                .awsService,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsAccount: return "AWS_ACCOUNT"
            case .awsService: return "AWS_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrincipalType(rawValue: rawValue) ?? PrincipalType.sdkUnknown(rawValue)
        }
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let reservationName = self.reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedElasticsearchInstanceOfferingId = self.reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/purchaseReservedInstanceOffering"
    }
}

/// Container for parameters to PurchaseReservedElasticsearchInstanceOffering
public struct PurchaseReservedElasticsearchInstanceOfferingInput: Swift.Equatable {
    /// The number of Elasticsearch instances to reserve.
    public var instanceCount: Swift.Int
    /// A customer-specified identifier to track this reservation.
    /// This member is required.
    public var reservationName: Swift.String?
    /// The ID of the reserved Elasticsearch instance offering to purchase.
    /// This member is required.
    public var reservedElasticsearchInstanceOfferingId: Swift.String?

    public init (
        instanceCount: Swift.Int = 0,
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.instanceCount = instanceCount
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

struct PurchaseReservedElasticsearchInstanceOfferingInputBody: Swift.Equatable {
    let reservedElasticsearchInstanceOfferingId: Swift.String?
    let reservationName: Swift.String?
    let instanceCount: Swift.Int
}

extension PurchaseReservedElasticsearchInstanceOfferingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount) ?? 0
        instanceCount = instanceCountDecoded
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PurchaseReservedElasticsearchInstanceOfferingOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservationName = output.reservationName
            self.reservedElasticsearchInstanceId = output.reservedElasticsearchInstanceId
        } else {
            self.reservationName = nil
            self.reservedElasticsearchInstanceId = nil
        }
    }
}

/// Represents the output of a PurchaseReservedElasticsearchInstanceOffering operation.
public struct PurchaseReservedElasticsearchInstanceOfferingOutputResponse: Swift.Equatable {
    /// The customer-specified identifier used to track this reservation.
    public var reservationName: Swift.String?
    /// Details of the reserved Elasticsearch instance which was purchased.
    public var reservedElasticsearchInstanceId: Swift.String?

    public init (
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

struct PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody: Swift.Equatable {
    let reservedElasticsearchInstanceId: Swift.String?
    let reservationName: Swift.String?
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceId)
        reservedElasticsearchInstanceId = reservedElasticsearchInstanceIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
    }
}

extension ElasticsearchClientTypes.RecurringCharge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recurringChargeAmount = self.recurringChargeAmount {
            try encodeContainer.encode(recurringChargeAmount, forKey: .recurringChargeAmount)
        }
        if let recurringChargeFrequency = self.recurringChargeFrequency {
            try encodeContainer.encode(recurringChargeFrequency, forKey: .recurringChargeFrequency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Contains the specific price and frequency of a recurring charges for a reserved Elasticsearch instance, or for a reserved Elasticsearch instance offering.
    public struct RecurringCharge: Swift.Equatable {
        /// The monetary amount of the recurring charge.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public var recurringChargeFrequency: Swift.String?

        public init (
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension RejectInboundCrossClusterSearchConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let crossClusterSearchConnectionId = crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())/reject"
    }
}

/// Container for the parameters to the [RejectInboundCrossClusterSearchConnection] operation.
public struct RejectInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to reject.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct RejectInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension RejectInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RejectInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RejectInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RejectInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a [RejectInboundCrossClusterSearchConnection] operation. Contains details of rejected inbound connection.
public struct RejectInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the [InboundCrossClusterSearchConnection] of rejected inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct RejectInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension RejectInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension RemoveTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for string0 in tagKeys {
                try tagKeysContainer.encode(string0)
            }
        }
    }
}

extension RemoveTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/tags-removal"
    }
}

/// Container for the parameters to the [RemoveTags] operation. Specify the ARN for the Elasticsearch domain from which you want to remove the specified TagKey.
public struct RemoveTagsInput: Swift.Equatable {
    /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
    /// This member is required.
    public var arn: Swift.String?
    /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Swift.Equatable {
    let arn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension RemoveTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case elasticsearchInstanceCount = "ElasticsearchInstanceCount"
        case elasticsearchInstanceType = "ElasticsearchInstanceType"
        case fixedPrice = "FixedPrice"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if elasticsearchInstanceCount != 0 {
            try encodeContainer.encode(elasticsearchInstanceCount, forKey: .elasticsearchInstanceCount)
        }
        if let elasticsearchInstanceType = self.elasticsearchInstanceType {
            try encodeContainer.encode(elasticsearchInstanceType.rawValue, forKey: .elasticsearchInstanceType)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringcharge0 in recurringCharges {
                try recurringChargesContainer.encode(recurringcharge0)
            }
        }
        if let reservationName = self.reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedElasticsearchInstanceId = self.reservedElasticsearchInstanceId {
            try encodeContainer.encode(reservedElasticsearchInstanceId, forKey: .reservedElasticsearchInstanceId)
        }
        if let reservedElasticsearchInstanceOfferingId = self.reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let reservedElasticsearchInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceId)
        reservedElasticsearchInstanceId = reservedElasticsearchInstanceIdDecoded
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let elasticsearchInstanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .elasticsearchInstanceType)
        elasticsearchInstanceType = elasticsearchInstanceTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let elasticsearchInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elasticsearchInstanceCount) ?? 0
        elasticsearchInstanceCount = elasticsearchInstanceCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[ElasticsearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [ElasticsearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance.
    public struct ReservedElasticsearchInstance: Swift.Equatable {
        /// The currency code for the reserved Elasticsearch instance offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the Elasticsearch instance is reserved.
        public var duration: Swift.Int
        /// The number of Elasticsearch instances that have been reserved.
        public var elasticsearchInstanceCount: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public var elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering.
        public var fixedPrice: Swift.Double?
        /// The payment option as defined in the reserved Elasticsearch instance offering.
        public var paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public var recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The customer-specified identifier to track this reservation.
        public var reservationName: Swift.String?
        /// The unique identifier for the reservation.
        public var reservedElasticsearchInstanceId: Swift.String?
        /// The offering identifier.
        public var reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The time the reservation started.
        public var startTime: ClientRuntime.Date?
        /// The state of the reserved Elasticsearch instance.
        public var state: Swift.String?
        /// The rate you are charged for each hour for the domain that is using this reserved instance.
        public var usagePrice: Swift.Double?

        public init (
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceCount: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservationName: Swift.String? = nil,
            reservedElasticsearchInstanceId: Swift.String? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceCount = elasticsearchInstanceCount
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case elasticsearchInstanceType = "ElasticsearchInstanceType"
        case fixedPrice = "FixedPrice"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let elasticsearchInstanceType = self.elasticsearchInstanceType {
            try encodeContainer.encode(elasticsearchInstanceType.rawValue, forKey: .elasticsearchInstanceType)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringcharge0 in recurringCharges {
                try recurringChargesContainer.encode(recurringcharge0)
            }
        }
        if let reservedElasticsearchInstanceOfferingId = self.reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let elasticsearchInstanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .elasticsearchInstanceType)
        elasticsearchInstanceType = elasticsearchInstanceTypeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[ElasticsearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [ElasticsearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance offering.
    public struct ReservedElasticsearchInstanceOffering: Swift.Equatable {
        /// The currency code for the reserved Elasticsearch instance offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the Elasticsearch instance.
        public var duration: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public var elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering.
        public var fixedPrice: Swift.Double?
        /// Payment option for the reserved Elasticsearch instance offering
        public var paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public var recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The Elasticsearch reserved instance offering identifier.
        public var reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The rate you are charged for each hour the domain that is using the offering is running.
        public var usagePrice: Swift.Double?

        public init (
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.usagePrice = usagePrice
        }
    }

}

extension ElasticsearchClientTypes {
    public enum ReservedElasticsearchInstancePaymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allUpfront
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedElasticsearchInstancePaymentOption] {
            return [
                .allUpfront,
                .noUpfront,
                .partialUpfront,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "ALL_UPFRONT"
            case .noUpfront: return "NO_UPFRONT"
            case .partialUpfront: return "PARTIAL_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedElasticsearchInstancePaymentOption(rawValue: rawValue) ?? ReservedElasticsearchInstancePaymentOption.sdkUnknown(rawValue)
        }
    }
}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for creating a resource that already exists. Gives http status code of 400.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RevokeVpcEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = self.account {
            try encodeContainer.encode(account, forKey: .account)
        }
    }
}

extension RevokeVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/revokeVpcEndpointAccess"
    }
}

/// Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
public struct RevokeVpcEndpointAccessInput: Swift.Equatable {
    /// The account ID to revoke access from.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

struct RevokeVpcEndpointAccessInputBody: Swift.Equatable {
    let account: Swift.String?
}

extension RevokeVpcEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
    }
}

extension RevokeVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RevokeVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RevokeVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Container for response parameters to the [RevokeVpcEndpointAccess] operation. The response body for this operation is empty.
public struct RevokeVpcEndpointAccessOutputResponse: Swift.Equatable {

    public init () { }
}

extension ElasticsearchClientTypes {
    /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
    public enum RollbackOnDisable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultRollback
        case noRollback
        case sdkUnknown(Swift.String)

        public static var allCases: [RollbackOnDisable] {
            return [
                .defaultRollback,
                .noRollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultRollback: return "DEFAULT_ROLLBACK"
            case .noRollback: return "NO_ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RollbackOnDisable(rawValue: rawValue) ?? RollbackOnDisable.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.SAMLIdp: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case metadataContent = "MetadataContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let metadataContent = self.metadataContent {
            try encodeContainer.encode(metadataContent, forKey: .metadataContent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataContent)
        metadataContent = metadataContentDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the SAML Identity Provider's information.
    public struct SAMLIdp: Swift.Equatable {
        /// The unique Entity ID of the application in SAML Identity Provider.
        /// This member is required.
        public var entityId: Swift.String?
        /// The Metadata of the SAML application in xml format.
        /// This member is required.
        public var metadataContent: Swift.String?

        public init (
            entityId: Swift.String? = nil,
            metadataContent: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.metadataContent = metadataContent
        }
    }

}

extension ElasticsearchClientTypes.SAMLOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case masterBackendRole = "MasterBackendRole"
        case masterUserName = "MasterUserName"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = self.idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let masterBackendRole = self.masterBackendRole {
            try encodeContainer.encode(masterBackendRole, forKey: .masterBackendRole)
        }
        if let masterUserName = self.masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let rolesKey = self.rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = self.sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = self.subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterBackendRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterBackendRole)
        masterBackendRole = masterBackendRoleDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension ElasticsearchClientTypes.SAMLOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLOptionsInput(enabled: \(Swift.String(describing: enabled)), idp: \(Swift.String(describing: idp)), masterBackendRole: \(Swift.String(describing: masterBackendRole)), rolesKey: \(Swift.String(describing: rolesKey)), sessionTimeoutMinutes: \(Swift.String(describing: sessionTimeoutMinutes)), subjectKey: \(Swift.String(describing: subjectKey)), masterUserName: \"CONTENT_REDACTED\")"}
}

extension ElasticsearchClientTypes {
    /// Specifies the SAML application configuration for the domain.
    public struct SAMLOptionsInput: Swift.Equatable {
        /// True if SAML is enabled.
        public var enabled: Swift.Bool?
        /// Specifies the SAML Identity Provider's information.
        public var idp: ElasticsearchClientTypes.SAMLIdp?
        /// The backend role to which the SAML master user is mapped to.
        public var masterBackendRole: Swift.String?
        /// The SAML master username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserName: Swift.String?
        /// The key to use for matching the SAML Roles attribute.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.
        public var sessionTimeoutMinutes: Swift.Int?
        /// The key to use for matching the SAML Subject attribute.
        public var subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            masterBackendRole: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.masterBackendRole = masterBackendRole
            self.masterUserName = masterUserName
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes.SAMLOptionsOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = self.idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let rolesKey = self.rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = self.sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = self.subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Describes the SAML application configured for the domain.
    public struct SAMLOptionsOutput: Swift.Equatable {
        /// True if SAML is enabled.
        public var enabled: Swift.Bool?
        /// Describes the SAML Identity Provider's information.
        public var idp: ElasticsearchClientTypes.SAMLIdp?
        /// The key used for matching the SAML Roles attribute.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive.
        public var sessionTimeoutMinutes: Swift.Int?
        /// The key used for matching the SAML Subject attribute.
        public var subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
    public enum ScheduledAutoTuneActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jvmHeapSizeTuning
        case jvmYoungGenTuning
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneActionType] {
            return [
                .jvmHeapSizeTuning,
                .jvmYoungGenTuning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jvmHeapSizeTuning: return "JVM_HEAP_SIZE_TUNING"
            case .jvmYoungGenTuning: return "JVM_YOUNG_GEN_TUNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneActionType(rawValue: rawValue) ?? ScheduledAutoTuneActionType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ScheduledAutoTuneDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case actionType = "ActionType"
        case date = "Date"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let actionType = self.actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let date = self.date {
            try encodeContainer.encodeTimestamp(date, format: .epochSeconds, forKey: .date)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .date)
        date = dateDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneSeverityType.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of the scheduled Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct ScheduledAutoTuneDetails: Swift.Equatable {
        /// Specifies Auto-Tune action description.
        public var action: Swift.String?
        /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
        public var actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType?
        /// Specifies timestamp for the Auto-Tune action scheduled for the domain.
        public var date: ClientRuntime.Date?
        /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
        public var severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType?

        public init (
            action: Swift.String? = nil,
            actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType? = nil,
            date: ClientRuntime.Date? = nil,
            severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType? = nil
        )
        {
            self.action = action
            self.actionType = actionType
            self.date = date
            self.severity = severity
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
    public enum ScheduledAutoTuneSeverityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneSeverityType] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneSeverityType(rawValue: rawValue) ?? ScheduledAutoTuneSeverityType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ServiceSoftwareOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedUpdateDate = "AutomatedUpdateDate"
        case cancellable = "Cancellable"
        case currentVersion = "CurrentVersion"
        case description = "Description"
        case newVersion = "NewVersion"
        case optionalDeployment = "OptionalDeployment"
        case updateAvailable = "UpdateAvailable"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedUpdateDate = self.automatedUpdateDate {
            try encodeContainer.encodeTimestamp(automatedUpdateDate, format: .epochSeconds, forKey: .automatedUpdateDate)
        }
        if let cancellable = self.cancellable {
            try encodeContainer.encode(cancellable, forKey: .cancellable)
        }
        if let currentVersion = self.currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let newVersion = self.newVersion {
            try encodeContainer.encode(newVersion, forKey: .newVersion)
        }
        if let optionalDeployment = self.optionalDeployment {
            try encodeContainer.encode(optionalDeployment, forKey: .optionalDeployment)
        }
        if let updateAvailable = self.updateAvailable {
            try encodeContainer.encode(updateAvailable, forKey: .updateAvailable)
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let newVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newVersion)
        newVersion = newVersionDecoded
        let updateAvailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateAvailable)
        updateAvailable = updateAvailableDecoded
        let cancellableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancellable)
        cancellable = cancellableDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DeploymentStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let automatedUpdateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .automatedUpdateDate)
        automatedUpdateDate = automatedUpdateDateDecoded
        let optionalDeploymentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optionalDeployment)
        optionalDeployment = optionalDeploymentDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The current options of an Elasticsearch domain service software options.
    public struct ServiceSoftwareOptions: Swift.Equatable {
        /// Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
        public var automatedUpdateDate: ClientRuntime.Date?
        /// True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
        public var cancellable: Swift.Bool?
        /// The current service software version that is present on the domain.
        public var currentVersion: Swift.String?
        /// The description of the UpdateStatus.
        public var description: Swift.String?
        /// The new service software version if one is available.
        public var newVersion: Swift.String?
        /// True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
        public var optionalDeployment: Swift.Bool?
        /// True if you are able to update you service software version. False if you are not able to update your service software version.
        public var updateAvailable: Swift.Bool?
        /// The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
        public var updateStatus: ElasticsearchClientTypes.DeploymentStatus?

        public init (
            automatedUpdateDate: ClientRuntime.Date? = nil,
            cancellable: Swift.Bool? = nil,
            currentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            newVersion: Swift.String? = nil,
            optionalDeployment: Swift.Bool? = nil,
            updateAvailable: Swift.Bool? = nil,
            updateStatus: ElasticsearchClientTypes.DeploymentStatus? = nil
        )
        {
            self.automatedUpdateDate = automatedUpdateDate
            self.cancellable = cancellable
            self.currentVersion = currentVersion
            self.description = description
            self.newVersion = newVersion
            self.optionalDeployment = optionalDeployment
            self.updateAvailable = updateAvailable
            self.updateStatus = updateStatus
        }
    }

}

extension ElasticsearchClientTypes.SnapshotOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotStartHour = "AutomatedSnapshotStartHour"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedSnapshotStartHour = self.automatedSnapshotStartHour {
            try encodeContainer.encode(automatedSnapshotStartHour, forKey: .automatedSnapshotStartHour)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedSnapshotStartHourDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotStartHour)
        automatedSnapshotStartHour = automatedSnapshotStartHourDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
    public struct SnapshotOptions: Swift.Equatable {
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public var automatedSnapshotStartHour: Swift.Int?

        public init (
            automatedSnapshotStartHour: Swift.Int? = nil
        )
        {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }
    }

}

extension ElasticsearchClientTypes.SnapshotOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of a daily automated snapshot.
    public struct SnapshotOptionsStatus: Swift.Equatable {
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.SnapshotOptions?
        /// Specifies the status of a daily automated snapshot.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.SnapshotOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension StartElasticsearchServiceSoftwareUpdateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension StartElasticsearchServiceSoftwareUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/serviceSoftwareUpdate/start"
    }
}

/// Container for the parameters to the [StartElasticsearchServiceSoftwareUpdate] operation. Specifies the name of the Elasticsearch domain that you wish to schedule a service software update on.
public struct StartElasticsearchServiceSoftwareUpdateInput: Swift.Equatable {
    /// The name of the domain that you want to update to the latest service software.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct StartElasticsearchServiceSoftwareUpdateInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension StartElasticsearchServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension StartElasticsearchServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartElasticsearchServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartElasticsearchServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartElasticsearchServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartElasticsearchServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// The result of a StartElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct StartElasticsearchServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch service software update.
    public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct StartElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
}

extension StartElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension ElasticsearchClientTypes.StorageType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSubTypeName = "StorageSubTypeName"
        case storageTypeLimits = "StorageTypeLimits"
        case storageTypeName = "StorageTypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSubTypeName = self.storageSubTypeName {
            try encodeContainer.encode(storageSubTypeName, forKey: .storageSubTypeName)
        }
        if let storageTypeLimits = storageTypeLimits {
            var storageTypeLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypeLimits)
            for storagetypelimit0 in storageTypeLimits {
                try storageTypeLimitsContainer.encode(storagetypelimit0)
            }
        }
        if let storageTypeName = self.storageTypeName {
            try encodeContainer.encode(storageTypeName, forKey: .storageTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageTypeName)
        storageTypeName = storageTypeNameDecoded
        let storageSubTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSubTypeName)
        storageSubTypeName = storageSubTypeNameDecoded
        let storageTypeLimitsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.StorageTypeLimit?].self, forKey: .storageTypeLimits)
        var storageTypeLimitsDecoded0:[ElasticsearchClientTypes.StorageTypeLimit]? = nil
        if let storageTypeLimitsContainer = storageTypeLimitsContainer {
            storageTypeLimitsDecoded0 = [ElasticsearchClientTypes.StorageTypeLimit]()
            for structure0 in storageTypeLimitsContainer {
                if let structure0 = structure0 {
                    storageTypeLimitsDecoded0?.append(structure0)
                }
            }
        }
        storageTypeLimits = storageTypeLimitsDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// StorageTypes represents the list of storage related types and their attributes that are available for given InstanceType.
    public struct StorageType: Swift.Equatable {
        /// SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes
        ///
        /// * standard
        ///
        /// * gp2
        ///
        /// * gp3
        ///
        /// * io1
        ///
        ///
        /// Refer [VolumeType] for more information regarding above EBS storage options.
        public var storageSubTypeName: Swift.String?
        /// List of limits that are applicable for given storage type.
        public var storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]?
        /// Type of the storage. List of available storage options:
        ///
        /// * instance
        ///  Inbuilt storage available for the given Instance
        /// * ebs
        ///  Elastic block storage that would be attached to the given Instance
        public var storageTypeName: Swift.String?

        public init (
            storageSubTypeName: Swift.String? = nil,
            storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]? = nil,
            storageTypeName: Swift.String? = nil
        )
        {
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeLimits = storageTypeLimits
            self.storageTypeName = storageTypeName
        }
    }

}

extension ElasticsearchClientTypes.StorageTypeLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = self.limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvalue0 in limitValues {
                try limitValuesContainer.encode(limitvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Limits that are applicable for given storage type.
    public struct StorageTypeLimit: Swift.Equatable {
        /// Name of storage limits that are applicable for given storage type. If [StorageType] is ebs, following storage options are applicable
        ///
        /// * MinimumVolumeSize
        ///  Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumVolumeSize
        ///  Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumIops
        ///  Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MinimumIops
        ///  Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumThroughput
        ///  Maximum amount of Throughput that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MinimumThroughput
        ///  Minimum amount of Throughput that is applicable for given storage type.It can be empty if it is not applicable.
        public var limitName: Swift.String?
        /// Values for the [StorageTypeLimit$LimitName] .
        public var limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension ElasticsearchClientTypes {
    public enum TLSSecurityPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case policyMinTls10201907
        case policyMinTls12201907
        case sdkUnknown(Swift.String)

        public static var allCases: [TLSSecurityPolicy] {
            return [
                .policyMinTls10201907,
                .policyMinTls12201907,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .policyMinTls10201907: return "Policy-Min-TLS-1-0-2019-07"
            case .policyMinTls12201907: return "Policy-Min-TLS-1-2-2019-07"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TLSSecurityPolicy(rawValue: rawValue) ?? TLSSecurityPolicy.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies a key value pair for a resource tag.
    public struct Tag: Swift.Equatable {
        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        /// This member is required.
        public var key: Swift.String?
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the unit of a maintenance schedule duration. Valid value is HOUR. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public enum TimeUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hours
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnit] {
            return [
                .hours,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimeUnit(rawValue: rawValue) ?? TimeUnit.sdkUnknown(rawValue)
        }
    }
}

extension UpdateElasticsearchDomainConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case dryRun = "DryRun"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let dryRun = self.dryRun {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let elasticsearchClusterConfig = self.elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension UpdateElasticsearchDomainConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/config"
    }
}

/// Container for the parameters to the [UpdateElasticsearchDomain] operation. Specifies the type and number of instances in the domain cluster.
public struct UpdateElasticsearchDomainConfigInput: Swift.Equatable {
    /// IAM access policy as a JSON-formatted string.
    public var accessPolicies: Swift.String?
    /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Specifies advanced security options.
    public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are updating.
    /// This member is required.
    public var domainName: Swift.String?
    /// This flag, when set to True, specifies whether the UpdateElasticsearchDomain request should return the results of validation checks without actually applying the change. This flag, when set to True, specifies the deployment mechanism through which the update shall be applied on the domain. This will not actually perform the Update.
    public var dryRun: Swift.Bool?
    /// Specify the type and size of the EBS volume that you want to use.
    public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
    /// The type and number of instances to instantiate for the domain cluster.
    public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// Specifies the Encryption At Rest Options.
    public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public var logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours.
    public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc) in VPC Endpoints for Amazon Elasticsearch Service Domains
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.dryRun = dryRun
        self.ebsOptions = ebsOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.vpcOptions = vpcOptions
    }
}

struct UpdateElasticsearchDomainConfigInputBody: Swift.Equatable {
    let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    let ebsOptions: ElasticsearchClientTypes.EBSOptions?
    let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    let vpcOptions: ElasticsearchClientTypes.VPCOptions?
    let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    let advancedOptions: [Swift.String:Swift.String]?
    let accessPolicies: Swift.String?
    let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions?
    let dryRun: Swift.Bool?
}

extension UpdateElasticsearchDomainConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case dryRun = "DryRun"
        case ebsOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptions.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}

extension UpdateElasticsearchDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateElasticsearchDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateElasticsearchDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateElasticsearchDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateElasticsearchDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
            self.dryRunResults = output.dryRunResults
        } else {
            self.domainConfig = nil
            self.dryRunResults = nil
        }
    }
}

/// The result of an UpdateElasticsearchDomain request. Contains the status of the Elasticsearch domain being updated.
public struct UpdateElasticsearchDomainConfigOutputResponse: Swift.Equatable {
    /// The status of the updated Elasticsearch domain.
    /// This member is required.
    public var domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
    /// Contains result of DryRun.
    public var dryRunResults: ElasticsearchClientTypes.DryRunResults?

    public init (
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil,
        dryRunResults: ElasticsearchClientTypes.DryRunResults? = nil
    )
    {
        self.domainConfig = domainConfig
        self.dryRunResults = dryRunResults
    }
}

struct UpdateElasticsearchDomainConfigOutputResponseBody: Swift.Equatable {
    let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
    let dryRunResults: ElasticsearchClientTypes.DryRunResults?
}

extension UpdateElasticsearchDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
        case dryRunResults = "DryRunResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
        let dryRunResultsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DryRunResults.self, forKey: .dryRunResults)
        dryRunResults = dryRunResultsDecoded
    }
}

extension UpdatePackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = self.commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageSource = self.packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
    }
}

extension UpdatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/packages/update"
    }
}

/// Container for request parameters to [UpdatePackage] operation.
public struct UpdatePackageInput: Swift.Equatable {
    /// An info message for the new version which will be shown as part of GetPackageVersionHistoryResponse.
    public var commitMessage: Swift.String?
    /// New description of the package.
    public var packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public var packageID: Swift.String?
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    /// This member is required.
    public var packageSource: ElasticsearchClientTypes.PackageSource?

    public init (
        commitMessage: Swift.String? = nil,
        packageDescription: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil
    )
    {
        self.commitMessage = commitMessage
        self.packageDescription = packageDescription
        self.packageID = packageID
        self.packageSource = packageSource
    }
}

struct UpdatePackageInputBody: Swift.Equatable {
    let packageID: Swift.String?
    let packageSource: ElasticsearchClientTypes.PackageSource?
    let packageDescription: Swift.String?
    let commitMessage: Swift.String?
}

extension UpdatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
    }
}

extension UpdatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for response returned by [UpdatePackage] operation.
public struct UpdatePackageOutputResponse: Swift.Equatable {
    /// Information about the package PackageDetails.
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct UpdatePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension UpdatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension UpdateVpcEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointId = "VpcEndpointId"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension UpdateVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/vpcEndpoints/update"
    }
}

/// Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
public struct UpdateVpcEndpointInput: Swift.Equatable {
    /// Unique identifier of the VPC endpoint to be updated.
    /// This member is required.
    public var vpcEndpointId: Swift.String?
    /// The security groups and/or subnets to add, remove, or modify.
    /// This member is required.
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        vpcEndpointId: Swift.String? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
        self.vpcOptions = vpcOptions
    }
}

struct UpdateVpcEndpointInputBody: Swift.Equatable {
    let vpcEndpointId: Swift.String?
    let vpcOptions: ElasticsearchClientTypes.VPCOptions?
}

extension UpdateVpcEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointId = "VpcEndpointId"
        case vpcOptions = "VpcOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
    }
}

extension UpdateVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case conflictException(ConflictException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpoint = output.vpcEndpoint
        } else {
            self.vpcEndpoint = nil
        }
    }
}

/// Contains the configuration and status of the VPC endpoint being updated.
public struct UpdateVpcEndpointOutputResponse: Swift.Equatable {
    /// The endpoint to be updated.
    /// This member is required.
    public var vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?

    public init (
        vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

struct UpdateVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?
}

extension UpdateVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpoint = "VpcEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

extension UpgradeElasticsearchDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let performCheckOnly = self.performCheckOnly {
            try encodeContainer.encode(performCheckOnly, forKey: .performCheckOnly)
        }
        if let targetVersion = self.targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
    }
}

extension UpgradeElasticsearchDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2015-01-01/es/upgradeDomain"
    }
}

/// Container for request parameters to [UpgradeElasticsearchDomain] operation.
public struct UpgradeElasticsearchDomainInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
    public var performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    /// This member is required.
    public var targetVersion: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

struct UpgradeElasticsearchDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let targetVersion: Swift.String?
    let performCheckOnly: Swift.Bool?
}

extension UpgradeElasticsearchDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
    }
}

extension UpgradeElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpgradeElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpgradeElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpgradeElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpgradeElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeProgressDetails = output.changeProgressDetails
            self.domainName = output.domainName
            self.performCheckOnly = output.performCheckOnly
            self.targetVersion = output.targetVersion
        } else {
            self.changeProgressDetails = nil
            self.domainName = nil
            self.performCheckOnly = nil
            self.targetVersion = nil
        }
    }
}

/// Container for response returned by [UpgradeElasticsearchDomain] operation.
public struct UpgradeElasticsearchDomainOutputResponse: Swift.Equatable {
    /// Specifies change details of the domain configuration change.
    public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public var domainName: Swift.String?
    /// This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
    public var performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    public var targetVersion: Swift.String?

    public init (
        changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.changeProgressDetails = changeProgressDetails
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

struct UpgradeElasticsearchDomainOutputResponseBody: Swift.Equatable {
    let domainName: Swift.String?
    let targetVersion: Swift.String?
    let performCheckOnly: Swift.Bool?
    let changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
}

extension UpgradeElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeProgressDetails = "ChangeProgressDetails"
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension ElasticsearchClientTypes.UpgradeHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTimestamp = "StartTimestamp"
        case stepsList = "StepsList"
        case upgradeName = "UpgradeName"
        case upgradeStatus = "UpgradeStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encodeTimestamp(startTimestamp, format: .epochSeconds, forKey: .startTimestamp)
        }
        if let stepsList = stepsList {
            var stepsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepsList)
            for upgradestepitem0 in stepsList {
                try stepsListContainer.encode(upgradestepitem0)
            }
        }
        if let upgradeName = self.upgradeName {
            try encodeContainer.encode(upgradeName, forKey: .upgradeName)
        }
        if let upgradeStatus = self.upgradeStatus {
            try encodeContainer.encode(upgradeStatus.rawValue, forKey: .upgradeStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
        let startTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let upgradeStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .upgradeStatus)
        upgradeStatus = upgradeStatusDecoded
        let stepsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.UpgradeStepItem?].self, forKey: .stepsList)
        var stepsListDecoded0:[ElasticsearchClientTypes.UpgradeStepItem]? = nil
        if let stepsListContainer = stepsListContainer {
            stepsListDecoded0 = [ElasticsearchClientTypes.UpgradeStepItem]()
            for structure0 in stepsListContainer {
                if let structure0 = structure0 {
                    stepsListDecoded0?.append(structure0)
                }
            }
        }
        stepsList = stepsListDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// History of the last 10 Upgrades and Upgrade Eligibility Checks.
    public struct UpgradeHistory: Swift.Equatable {
        /// UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ" format.
        public var startTimestamp: ClientRuntime.Date?
        /// A list of [UpgradeStepItem] s representing information about each step performed as pard of a specific Upgrade or Upgrade Eligibility Check.
        public var stepsList: [ElasticsearchClientTypes.UpgradeStepItem]?
        /// A string that describes the update briefly
        public var upgradeName: Swift.String?
        /// The overall status of the update. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init (
            startTimestamp: ClientRuntime.Date? = nil,
            stepsList: [ElasticsearchClientTypes.UpgradeStepItem]? = nil,
            upgradeName: Swift.String? = nil,
            upgradeStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.startTimestamp = startTimestamp
            self.stepsList = stepsList
            self.upgradeName = upgradeName
            self.upgradeStatus = upgradeStatus
        }
    }

}

extension ElasticsearchClientTypes {
    public enum UpgradeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case succeededWithIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .succeededWithIssues,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case .succeededWithIssues: return "SUCCEEDED_WITH_ISSUES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStatus(rawValue: rawValue) ?? UpgradeStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum UpgradeStep: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preUpgradeCheck
        case snapshot
        case upgrade
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStep] {
            return [
                .preUpgradeCheck,
                .snapshot,
                .upgrade,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preUpgradeCheck: return "PRE_UPGRADE_CHECK"
            case .snapshot: return "SNAPSHOT"
            case .upgrade: return "UPGRADE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStep(rawValue: rawValue) ?? UpgradeStep.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.UpgradeStepItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues = "Issues"
        case progressPercent = "ProgressPercent"
        case upgradeStep = "UpgradeStep"
        case upgradeStepStatus = "UpgradeStepStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issue0 in issues {
                try issuesContainer.encode(issue0)
            }
        }
        if let progressPercent = self.progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let upgradeStep = self.upgradeStep {
            try encodeContainer.encode(upgradeStep.rawValue, forKey: .upgradeStep)
        }
        if let upgradeStepStatus = self.upgradeStepStatus {
            try encodeContainer.encode(upgradeStepStatus.rawValue, forKey: .upgradeStepStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let upgradeStepStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .upgradeStepStatus)
        upgradeStepStatus = upgradeStepStatusDecoded
        let issuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .issues)
        var issuesDecoded0:[Swift.String]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [Swift.String]()
            for string0 in issuesContainer {
                if let string0 = string0 {
                    issuesDecoded0?.append(string0)
                }
            }
        }
        issues = issuesDecoded0
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Represents a single step of the Upgrade or Upgrade Eligibility Check workflow.
    public struct UpgradeStepItem: Swift.Equatable {
        /// A list of strings containing detailed information about the errors encountered in a particular step.
        public var issues: [Swift.String]?
        /// The Floating point value representing progress percentage of a particular step.
        public var progressPercent: Swift.Double?
        /// Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
        ///
        /// * PreUpgradeCheck
        ///
        /// * Snapshot
        ///
        /// * Upgrade
        public var upgradeStep: ElasticsearchClientTypes.UpgradeStep?
        /// The status of a particular step during an upgrade. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init (
            issues: [Swift.String]? = nil,
            progressPercent: Swift.Double? = nil,
            upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil,
            upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.issues = issues
            self.progressPercent = progressPercent
            self.upgradeStep = upgradeStep
            self.upgradeStepStatus = upgradeStepStatus
        }
    }

}

extension ElasticsearchClientTypes.VPCDerivedInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vpcId = "VPCId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for string0 in availabilityZones {
                try availabilityZonesContainer.encode(string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [ VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    public struct VPCDerivedInfo: Swift.Equatable {
        /// The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public var availabilityZones: [Swift.String]?
        /// Specifies the security groups for VPC endpoint.
        public var securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public var subnetIds: [Swift.String]?
        /// The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public var vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension ElasticsearchClientTypes.VPCDerivedInfoStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Status of the VPC options for the specified Elasticsearch domain.
    public struct VPCDerivedInfoStatus: Swift.Equatable {
        /// Specifies the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.VPCDerivedInfo?
        /// Specifies the status of the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.VPCDerivedInfo? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.VPCOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [ VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    public struct VPCOptions: Swift.Equatable {
        /// Specifies the security groups for VPC endpoint.
        public var securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public var subnetIds: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for missing / invalid input fields. Gives http status code of 400.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The type of EBS volume, standard, gp2, gp3 or io1. See [Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs)for more information.
    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gp2
        case gp3
        case io1
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .gp2,
                .gp3,
                .io1,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gp2: return "gp2"
            case .gp3: return "gp3"
            case .io1: return "io1"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeType(rawValue: rawValue) ?? VolumeType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.VpcEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
        case endpoint = "Endpoint"
        case status = "Status"
        case vpcEndpointId = "VpcEndpointId"
        case vpcEndpointOwner = "VpcEndpointOwner"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcEndpointOwner = self.vpcEndpointOwner {
            try encodeContainer.encode(vpcEndpointOwner, forKey: .vpcEndpointOwner)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcEndpointOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointOwner)
        vpcEndpointOwner = vpcEndpointOwnerDecoded
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpointStatus.self, forKey: .status)
        status = statusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
    }
}

extension ElasticsearchClientTypes {
    /// The connection endpoint for connecting to an Amazon OpenSearch Service domain through a proxy.
    public struct VpcEndpoint: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The connection endpoint ID for connecting to the domain.
        public var endpoint: Swift.String?
        /// The current status of the endpoint.
        public var status: ElasticsearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?
        /// Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo?

        public init (
            domainArn: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            status: ElasticsearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.domainArn = domainArn
            self.endpoint = endpoint
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcOptions = vpcOptions
        }
    }

}

extension ElasticsearchClientTypes.VpcEndpointError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpointErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Error information when attempting to describe an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointError: Swift.Equatable {
        /// The code associated with the error.
        public var errorCode: ElasticsearchClientTypes.VpcEndpointErrorCode?
        /// A message describing the error.
        public var errorMessage: Swift.String?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?

        public init (
            errorCode: ElasticsearchClientTypes.VpcEndpointErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            vpcEndpointId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.vpcEndpointId = vpcEndpointId
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the error code of the failure encountered while describing the VPC endpoint:
    ///
    /// * ENDPOINT_NOT_FOUND: Indicates that the requested VPC endpoint does not exist.
    ///
    /// * SERVER_ERROR: Indicates the describe endpoint operation failed due to an internal server error.
    public enum VpcEndpointErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case endpointNotFound
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointErrorCode] {
            return [
                .endpointNotFound,
                .serverError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .endpointNotFound: return "ENDPOINT_NOT_FOUND"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VpcEndpointErrorCode(rawValue: rawValue) ?? VpcEndpointErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the current status of the VPC endpoint:
    ///
    /// * CREATING: Indicates that the VPC endpoint is currently being created.
    ///
    /// * CREATE_FAILED: Indicates that the VPC endpoint creation failed.
    ///
    /// * ACTIVE: Indicates that the VPC endpoint is currently active.
    ///
    /// * UPDATING: Indicates that the VPC endpoint is currently being updated.
    ///
    /// * UPDATE_FAILED: Indicates that the VPC endpoint update failed.
    ///
    /// * DELETING: Indicates that the VPC endpoint is currently being deleted.
    ///
    /// * DELETE_FAILED: Indicates that the VPC endpoint deletion failed.
    public enum VpcEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VpcEndpointStatus(rawValue: rawValue) ?? VpcEndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.VpcEndpointSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
        case status = "Status"
        case vpcEndpointId = "VpcEndpointId"
        case vpcEndpointOwner = "VpcEndpointOwner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcEndpointOwner = self.vpcEndpointOwner {
            try encodeContainer.encode(vpcEndpointOwner, forKey: .vpcEndpointOwner)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcEndpointOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointOwner)
        vpcEndpointOwner = vpcEndpointOwnerDecoded
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VpcEndpointStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Summary information for an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The current status of the endpoint.
        public var status: ElasticsearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?

        public init (
            domainArn: Swift.String? = nil,
            status: ElasticsearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil
        )
        {
            self.domainArn = domainArn
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
        }
    }

}

extension ElasticsearchClientTypes.ZoneAwarenessConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneCount = "AvailabilityZoneCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZoneCount = self.availabilityZoneCount {
            try encodeContainer.encode(availabilityZoneCount, forKey: .availabilityZoneCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availabilityZoneCount)
        availabilityZoneCount = availabilityZoneCountDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the zone awareness configuration for the domain cluster, such as the number of availability zones.
    public struct ZoneAwarenessConfig: Swift.Equatable {
        /// An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
        public var availabilityZoneCount: Swift.Int?

        public init (
            availabilityZoneCount: Swift.Int? = nil
        )
        {
            self.availabilityZoneCount = availabilityZoneCount
        }
    }

}
