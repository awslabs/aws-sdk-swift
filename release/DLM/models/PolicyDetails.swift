// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies the configuration of a lifecycle policy.</p>
public struct PolicyDetails: Equatable {
    /// <p>The actions to be performed when the event-based policy is triggered. You can specify
    /// 		only one action per policy.</p>
    /// 		       <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>
    public let actions: [Action]?
    /// <p>The event that triggers the event-based policy. </p>
    /// 		       <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>
    public let eventSource: EventSource?
    /// <p>A set of optional parameters for snapshot and AMI lifecycle policies. </p>
    /// 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
    public let parameters: Parameters?
    /// <p>The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code>
    /// 			to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code>
    /// 			to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code>
    /// 			to create an event-based policy that performs specific actions when a defined event occurs in your AWS account.</p>
    /// 		       <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
    public let policyType: PolicyTypeValues?
    /// <p>The location of the resources to backup. If the source resources are located in an AWS Region, specify
    /// 			<code>CLOUD</code>. If the source resources are located on an AWS Outpost
    /// 			in your account, specify <code>OUTPOST</code>. </p>
    /// 			      <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources
    /// 				of the specified type with matching target tags across all of the Outposts in your account.</p>
    public let resourceLocations: [ResourceLocationValues]?
    /// <p>The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to
    /// 			create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume
    /// 			snapshots from the volumes for an instance.</p>
    /// 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
    public let resourceTypes: [ResourceTypeValues]?
    /// <p>The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy
    /// 			can have up to four schedulesâ€”one mandatory schedule and up to three optional schedules.</p>
    /// 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
    public let schedules: [Schedule]?
    /// <p>The single tag that identifies targeted resources for this policy.</p>
    /// 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
    public let targetTags: [Tag]?

    public init (
        actions: [Action]? = nil,
        eventSource: EventSource? = nil,
        parameters: Parameters? = nil,
        policyType: PolicyTypeValues? = nil,
        resourceLocations: [ResourceLocationValues]? = nil,
        resourceTypes: [ResourceTypeValues]? = nil,
        schedules: [Schedule]? = nil,
        targetTags: [Tag]? = nil
    )
    {
        self.actions = actions
        self.eventSource = eventSource
        self.parameters = parameters
        self.policyType = policyType
        self.resourceLocations = resourceLocations
        self.resourceTypes = resourceTypes
        self.schedules = schedules
        self.targetTags = targetTags
    }
}
