// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class ResourceGroupsClient {
    let client: SdkHttpClient
    let config: ResourceGroupsClientConfiguration
    let serviceName = "Resource Groups"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: ResourceGroupsClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class ResourceGroupsClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> ResourceGroupsClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try ResourceGroupsClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension ResourceGroupsClient: ResourceGroupsClientProtocol {
    /// <p>Creates a resource group with the specified name and description. You can optionally
    ///             include a resource query, or a service configuration. For more information about
    ///             constructing a resource query, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>. For more
    ///             information about service configurations, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
    ///                 groups</a>.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:CreateGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func createGroup(input: CreateGroupInput, completion: @escaping (SdkResult<CreateGroupOutputResponse, CreateGroupOutputError>) -> Void)
    {
        let urlPath = "/groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateGroupInput, CreateGroupOutputResponse, CreateGroupOutputError>(id: "createGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateGroupInput, CreateGroupOutputResponse, CreateGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified resource group. Deleting a resource group does not delete any
    ///             resources that are members of the group; it only deletes the group structure.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:DeleteGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func deleteGroup(input: DeleteGroupInput, completion: @escaping (SdkResult<DeleteGroupOutputResponse, DeleteGroupOutputError>) -> Void)
    {
        let urlPath = "/delete-group"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteGroupInput, DeleteGroupOutputResponse, DeleteGroupOutputError>(id: "deleteGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteGroupInput, DeleteGroupOutputResponse, DeleteGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about a specified resource group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:GetGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func getGroup(input: GetGroupInput, completion: @escaping (SdkResult<GetGroupOutputResponse, GetGroupOutputError>) -> Void)
    {
        let urlPath = "/get-group"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetGroupInput, GetGroupOutputResponse, GetGroupOutputError>(id: "getGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetGroupInput, GetGroupOutputResponse, GetGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the service configuration associated with the specified resource group. For
    ///             details about the service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
    ///                 groups</a>.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:GetGroupConfiguration</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func getGroupConfiguration(input: GetGroupConfigurationInput, completion: @escaping (SdkResult<GetGroupConfigurationOutputResponse, GetGroupConfigurationOutputError>) -> Void)
    {
        let urlPath = "/get-group-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getGroupConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetGroupConfigurationInput, GetGroupConfigurationOutputResponse, GetGroupConfigurationOutputError>(id: "getGroupConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetGroupConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetGroupConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetGroupConfigurationInput, GetGroupConfigurationOutputResponse, GetGroupConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetGroupConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the resource query associated with the specified resource group. For more
    ///             information about resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
    ///                 a tag-based group in Resource Groups</a>.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:GetGroupQuery</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func getGroupQuery(input: GetGroupQueryInput, completion: @escaping (SdkResult<GetGroupQueryOutputResponse, GetGroupQueryOutputError>) -> Void)
    {
        let urlPath = "/get-group-query"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getGroupQuery")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetGroupQueryInput, GetGroupQueryOutputResponse, GetGroupQueryOutputError>(id: "getGroupQuery")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetGroupQueryInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetGroupQueryInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetGroupQueryInput, GetGroupQueryOutputResponse, GetGroupQueryOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetGroupQueryInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of tags that are associated with a resource group, specified by an
    ///             ARN.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:GetTags</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func getTags(input: GetTagsInput, completion: @escaping (SdkResult<GetTagsOutputResponse, GetTagsOutputError>) -> Void)
    {
        guard let arn = input.arn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component arn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(arn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getTags")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetTagsInput, GetTagsOutputResponse, GetTagsOutputError>(id: "getTags")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetTagsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetTagsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetTagsInput, GetTagsOutputResponse, GetTagsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds the specified resources to the specified group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:GroupResources</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func groupResources(input: GroupResourcesInput, completion: @escaping (SdkResult<GroupResourcesOutputResponse, GroupResourcesOutputError>) -> Void)
    {
        let urlPath = "/group-resources"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "groupResources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GroupResourcesInput, GroupResourcesOutputResponse, GroupResourcesOutputError>(id: "groupResources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GroupResourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GroupResourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GroupResourcesInput, GroupResourcesOutputResponse, GroupResourcesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GroupResourcesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of ARNs of the resources that are members of a specified resource
    ///             group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:ListGroupResources</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>cloudformation:DescribeStacks</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>cloudformation:ListStackResources</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>tag:GetResources</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func listGroupResources(input: ListGroupResourcesInput, completion: @escaping (SdkResult<ListGroupResourcesOutputResponse, ListGroupResourcesOutputError>) -> Void)
    {
        let urlPath = "/list-group-resources"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listGroupResources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListGroupResourcesInput, ListGroupResourcesOutputResponse, ListGroupResourcesOutputError>(id: "listGroupResources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListGroupResourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListGroupResourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListGroupResourcesInput, ListGroupResourcesOutputResponse, ListGroupResourcesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListGroupResourcesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of existing resource groups in your account.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:ListGroups</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func listGroups(input: ListGroupsInput, completion: @escaping (SdkResult<ListGroupsOutputResponse, ListGroupsOutputError>) -> Void)
    {
        let urlPath = "/groups-list"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListGroupsInput, ListGroupsOutputResponse, ListGroupsOutputError>(id: "listGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListGroupsInput, ListGroupsOutputResponse, ListGroupsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListGroupsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Attaches a service configuration to the specified group. This occurs asynchronously,
    ///             and can take time to complete. You can use <a>GetGroupConfiguration</a> to
    ///             check the status of the update.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:PutGroupConfiguration</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func putGroupConfiguration(input: PutGroupConfigurationInput, completion: @escaping (SdkResult<PutGroupConfigurationOutputResponse, PutGroupConfigurationOutputError>) -> Void)
    {
        let urlPath = "/put-group-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putGroupConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutGroupConfigurationInput, PutGroupConfigurationOutputResponse, PutGroupConfigurationOutputError>(id: "putGroupConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutGroupConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutGroupConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutGroupConfigurationInput, PutGroupConfigurationOutputResponse, PutGroupConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutGroupConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of AWS resource identifiers that matches the specified query. The
    ///             query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery
    ///             operation.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:SearchResources</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>cloudformation:DescribeStacks</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>cloudformation:ListStackResources</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>tag:GetResources</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func searchResources(input: SearchResourcesInput, completion: @escaping (SdkResult<SearchResourcesOutputResponse, SearchResourcesOutputError>) -> Void)
    {
        let urlPath = "/resources/search"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "searchResources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SearchResourcesInput, SearchResourcesOutputResponse, SearchResourcesOutputError>(id: "searchResources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SearchResourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SearchResourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SearchResourcesInput, SearchResourcesOutputResponse, SearchResourcesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SearchResourcesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds tags to a resource group with the specified ARN. Existing tags on a resource
    ///             group are not changed if they are not specified in the request parameters.</p>
    ///         <important>
    ///             <p>Do not store personally identifiable information (PII) or other confidential or
    ///                 sensitive information in tags. We use tags to provide you with billing and
    ///                 administration services. Tags are not intended to be used for private or sensitive
    ///                 data.</p>
    ///         </important>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:Tag</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func tag(input: TagInput, completion: @escaping (SdkResult<TagOutputResponse, TagOutputError>) -> Void)
    {
        guard let arn = input.arn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component arn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(arn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tag")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagInput, TagOutputResponse, TagOutputError>(id: "tag")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagInput, TagOutputResponse, TagOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes the specified resources from the specified group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:UngroupResources</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func ungroupResources(input: UngroupResourcesInput, completion: @escaping (SdkResult<UngroupResourcesOutputResponse, UngroupResourcesOutputError>) -> Void)
    {
        let urlPath = "/ungroup-resources"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "ungroupResources")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UngroupResourcesInput, UngroupResourcesOutputResponse, UngroupResourcesOutputError>(id: "ungroupResources")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UngroupResourcesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UngroupResourcesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UngroupResourcesInput, UngroupResourcesOutputResponse, UngroupResourcesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UngroupResourcesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes tags from a specified resource group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:Untag</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func untag(input: UntagInput, completion: @escaping (SdkResult<UntagOutputResponse, UntagOutputError>) -> Void)
    {
        guard let arn = input.arn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component arn unexpectedly nil"))))
            return
        }
        let urlPath = "/resources/\(arn)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untag")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagInput, UntagOutputResponse, UntagOutputError>(id: "untag")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagInput, UntagOutputResponse, UntagOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UntagInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the description for an existing group. You cannot update the name of a
    ///             resource group.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:UpdateGroup</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func updateGroup(input: UpdateGroupInput, completion: @escaping (SdkResult<UpdateGroupOutputResponse, UpdateGroupOutputError>) -> Void)
    {
        let urlPath = "/update-group"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateGroupInput, UpdateGroupOutputResponse, UpdateGroupOutputError>(id: "updateGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateGroupInput, UpdateGroupOutputResponse, UpdateGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the resource query of a group. For more information about resource queries,
    ///             see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>.</p>
    ///         <p>
    ///             <b>Minimum permissions</b>
    ///          </p>
    ///          <p>To run this command, you must have the following permissions:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>resource-groups:UpdateGroupQuery</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func updateGroupQuery(input: UpdateGroupQueryInput, completion: @escaping (SdkResult<UpdateGroupQueryOutputResponse, UpdateGroupQueryOutputError>) -> Void)
    {
        let urlPath = "/update-group-query"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateGroupQuery")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "resource-groups.\(config.region).amazonaws.com")
                      .withSigningName(value: "resource-groups")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateGroupQueryInput, UpdateGroupQueryOutputResponse, UpdateGroupQueryOutputError>(id: "updateGroupQuery")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupQueryInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupQueryInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateGroupQueryInput, UpdateGroupQueryOutputResponse, UpdateGroupQueryOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateGroupQueryInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
