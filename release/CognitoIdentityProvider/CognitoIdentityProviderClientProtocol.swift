// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Using the Amazon Cognito User Pools API, you can create a user pool to manage
///             directories and users. You can authenticate a user to obtain tokens related to user
///             identity and access policies.</p>
///         <p>This API reference provides information about user pools in Amazon Cognito User
///             Pools.</p>
///         <p>For more information, see the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html">Amazon Cognito Documentation</a>.</p>
public protocol CognitoIdentityProviderClientProtocol {
    /// <p>Adds additional user attributes to the user pool schema.</p>
    func addCustomAttributes(input: AddCustomAttributesInput, completion: @escaping (SdkResult<AddCustomAttributesOutputResponse, AddCustomAttributesOutputError>) -> Void)
    /// <p>Adds the specified user to the specified group.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminAddUserToGroup(input: AdminAddUserToGroupInput, completion: @escaping (SdkResult<AdminAddUserToGroupOutputResponse, AdminAddUserToGroupOutputError>) -> Void)
    /// <p>Confirms user registration as an admin without using a confirmation code. Works on any
    ///             user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminConfirmSignUp(input: AdminConfirmSignUpInput, completion: @escaping (SdkResult<AdminConfirmSignUpOutputResponse, AdminConfirmSignUpOutputError>) -> Void)
    /// <p>Creates a new user in the specified user pool.</p>
    ///         <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via
    ///             email or phone (SMS).</p>
    ///         <p>This message is based on a template that you configured in your call to create or
    ///             update a user pool. This template includes your custom sign-up instructions and
    ///             placeholders for user name and temporary password.</p>
    ///         <p>Alternatively, you can call <code>AdminCreateUser</code> with “SUPPRESS” for the
    ///                 <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p>
    ///         <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until
    ///             they sign in and change their password.</p>
    ///         <p>
    ///             <code>AdminCreateUser</code> requires developer credentials.</p>
    func adminCreateUser(input: AdminCreateUserInput, completion: @escaping (SdkResult<AdminCreateUserOutputResponse, AdminCreateUserOutputError>) -> Void)
    /// <p>Deletes a user as an administrator. Works on any user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminDeleteUser(input: AdminDeleteUserInput, completion: @escaping (SdkResult<AdminDeleteUserOutputResponse, AdminDeleteUserOutputError>) -> Void)
    /// <p>Deletes the user attributes in a user pool as an administrator. Works on any
    ///             user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminDeleteUserAttributes(input: AdminDeleteUserAttributesInput, completion: @escaping (SdkResult<AdminDeleteUserAttributesOutputResponse, AdminDeleteUserAttributesOutputError>) -> Void)
    /// <p>Disables the user from signing in with the specified external (SAML or social)
    ///             identity provider. If the user to disable is a Cognito User Pools native username +
    ///             password user, they are not permitted to use their password to sign-in. If the user to
    ///             disable is a linked external IdP user, any link between that user and an existing user
    ///             is removed. The next time the external user (no longer attached to the previously linked
    ///                 <code>DestinationUser</code>) signs in, they must create a new user account. See
    ///                 <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a>.</p>
    ///         <p>This action is enabled only for admin access and requires developer
    ///             credentials.</p>
    ///         <p>The <code>ProviderName</code> must match the value specified when creating an IdP for
    ///             the pool. </p>
    ///         <p>To disable a native username + password user, the <code>ProviderName</code> value must
    ///             be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be
    ///                 <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the
    ///             name that is used in the user pool for the user.</p>
    ///         <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for
    ///             social identity providers. The <code>ProviderAttributeValue</code> must always be the
    ///             exact subject that was used when the user was originally linked as a source user.</p>
    ///         <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has
    ///             not yet been used to sign-in, the <code>ProviderAttributeName</code> and
    ///                 <code>ProviderAttributeValue</code> must be the same values that were used for the
    ///                 <code>SourceUser</code> when the identities were originally linked using <code>
    ///                 AdminLinkProviderForUser</code> call. (If the linking was done with
    ///                 <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same
    ///             applies here). However, if the user has already signed in, the
    ///                 <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and
    ///                 <code>ProviderAttributeValue</code> must be the subject of the SAML
    ///             assertion.</p>
    func adminDisableProviderForUser(input: AdminDisableProviderForUserInput, completion: @escaping (SdkResult<AdminDisableProviderForUserOutputResponse, AdminDisableProviderForUserOutputError>) -> Void)
    /// <p>Disables the specified user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminDisableUser(input: AdminDisableUserInput, completion: @escaping (SdkResult<AdminDisableUserOutputResponse, AdminDisableUserOutputError>) -> Void)
    /// <p>Enables the specified user as an administrator. Works on any user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminEnableUser(input: AdminEnableUserInput, completion: @escaping (SdkResult<AdminEnableUserOutputResponse, AdminEnableUserOutputError>) -> Void)
    /// <p>Forgets the device, as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminForgetDevice(input: AdminForgetDeviceInput, completion: @escaping (SdkResult<AdminForgetDeviceOutputResponse, AdminForgetDeviceOutputError>) -> Void)
    /// <p>Gets the device, as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminGetDevice(input: AdminGetDeviceInput, completion: @escaping (SdkResult<AdminGetDeviceOutputResponse, AdminGetDeviceOutputError>) -> Void)
    /// <p>Gets the specified user by user name in a user pool as an administrator. Works on any
    ///             user.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminGetUser(input: AdminGetUserInput, completion: @escaping (SdkResult<AdminGetUserOutputResponse, AdminGetUserOutputError>) -> Void)
    /// <p>Initiates the authentication flow, as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminInitiateAuth(input: AdminInitiateAuthInput, completion: @escaping (SdkResult<AdminInitiateAuthOutputResponse, AdminInitiateAuthOutputError>) -> Void)
    /// <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an
    ///             identity from an external identity provider (<code>SourceUser</code>) based on a
    ///             specified attribute name and value from the external identity provider. This allows you
    ///             to create a link from the existing user account to an external federated user identity
    ///             that has not yet been used to sign in, so that the federated user identity can be used
    ///             to sign in as the existing user account. </p>
    ///         <p> For example, if there is an existing user with a username and password, this API
    ///             links that user to a federated user identity, so that when the federated user identity
    ///             is used, the user signs in as the existing user account. </p>
    ///         <note>
    ///             <p>The maximum number of federated identities linked to a user is 5.</p>
    ///         </note>
    ///         <important>
    ///             <p>Because this API allows a user with an external federated identity to sign in as
    ///                 an existing user in the user pool, it is critical that it only be used with external
    ///                 identity providers and provider attributes that have been trusted by the application
    ///                 owner.</p>
    ///         </important>
    ///
    ///         <p>This action is enabled only for admin access and requires developer
    ///             credentials.</p>
    func adminLinkProviderForUser(input: AdminLinkProviderForUserInput, completion: @escaping (SdkResult<AdminLinkProviderForUserOutputResponse, AdminLinkProviderForUserOutputError>) -> Void)
    /// <p>Lists devices, as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminListDevices(input: AdminListDevicesInput, completion: @escaping (SdkResult<AdminListDevicesOutputResponse, AdminListDevicesOutputError>) -> Void)
    /// <p>Lists the groups that the user belongs to.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminListGroupsForUser(input: AdminListGroupsForUserInput, completion: @escaping (SdkResult<AdminListGroupsForUserOutputResponse, AdminListGroupsForUserOutputError>) -> Void)
    /// <p>Lists a history of user activity and any risks detected as part of Amazon Cognito
    ///             advanced security.</p>
    func adminListUserAuthEvents(input: AdminListUserAuthEventsInput, completion: @escaping (SdkResult<AdminListUserAuthEventsOutputResponse, AdminListUserAuthEventsOutputError>) -> Void)
    /// <p>Removes the specified user from the specified group.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminRemoveUserFromGroup(input: AdminRemoveUserFromGroupInput, completion: @escaping (SdkResult<AdminRemoveUserFromGroupOutputResponse, AdminRemoveUserFromGroupOutputError>) -> Void)
    /// <p>Resets the specified user's password in a user pool as an administrator. Works on any
    ///             user.</p>
    ///         <p>When a developer calls this API, the current password is invalidated, so it must be
    ///             changed. If a user tries to sign in after the API is called, the app will get a
    ///             PasswordResetRequiredException exception back and should direct the user down the flow
    ///             to reset the password, which is the same as the forgot password flow. In addition, if
    ///             the user pool has phone verification selected and a verified phone number exists for the
    ///             user, or if email verification is selected and a verified email exists for the user,
    ///             calling this API will also result in sending a message to the end user with the code to
    ///             change their password.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminResetUserPassword(input: AdminResetUserPasswordInput, completion: @escaping (SdkResult<AdminResetUserPasswordOutputResponse, AdminResetUserPasswordOutputError>) -> Void)
    /// <p>Responds to an authentication challenge, as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminRespondToAuthChallenge(input: AdminRespondToAuthChallengeInput, completion: @escaping (SdkResult<AdminRespondToAuthChallengeOutputResponse, AdminRespondToAuthChallengeOutputError>) -> Void)
    /// <p>Sets the user's multi-factor authentication (MFA) preference, including which MFA
    ///             options are enabled and if any are preferred. Only one factor can be set as preferred.
    ///             The preferred MFA factor will be used to authenticate a user if multiple factors are
    ///             enabled. If multiple options are enabled and no preference is set, a challenge to choose
    ///             an MFA option will be returned during sign in.</p>
    func adminSetUserMFAPreference(input: AdminSetUserMFAPreferenceInput, completion: @escaping (SdkResult<AdminSetUserMFAPreferenceOutputResponse, AdminSetUserMFAPreferenceOutputError>) -> Void)
    /// <p>Sets the specified user's password in a user pool as an administrator. Works on any
    ///             user. </p>
    ///         <p>The password can be temporary or permanent. If it is temporary, the user status will
    ///             be placed into the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to
    ///             sign in, the InitiateAuth/AdminInitiateAuth response will contain the
    ///                 <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user does not sign in before it
    ///             expires, the user will not be able to sign in and their password will need to be reset
    ///             by an administrator. </p>
    ///         <p>Once the user has set a new password, or the password is permanent, the user status
    ///             will be set to <code>Confirmed</code>.</p>
    func adminSetUserPassword(input: AdminSetUserPasswordInput, completion: @escaping (SdkResult<AdminSetUserPasswordOutputResponse, AdminSetUserPasswordOutputError>) -> Void)
    /// <p>
    ///             <i>This action is no longer supported.</i> You can use it to configure
    ///             only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either
    ///             type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html">AdminSetUserMFAPreference</a> instead.</p>
    func adminSetUserSettings(input: AdminSetUserSettingsInput, completion: @escaping (SdkResult<AdminSetUserSettingsOutputResponse, AdminSetUserSettingsOutputError>) -> Void)
    /// <p>Provides feedback for an authentication event as to whether it was from a valid user.
    ///             This feedback is used for improving the risk evaluation decision for the user pool as
    ///             part of Amazon Cognito advanced security.</p>
    func adminUpdateAuthEventFeedback(input: AdminUpdateAuthEventFeedbackInput, completion: @escaping (SdkResult<AdminUpdateAuthEventFeedbackOutputResponse, AdminUpdateAuthEventFeedbackOutputError>) -> Void)
    /// <p>Updates the device status as an administrator.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminUpdateDeviceStatus(input: AdminUpdateDeviceStatusInput, completion: @escaping (SdkResult<AdminUpdateDeviceStatusOutputResponse, AdminUpdateDeviceStatusOutputError>) -> Void)
    /// <p>Updates the specified user's attributes, including developer attributes, as an
    ///             administrator. Works on any user.</p>
    ///         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
    ///             attribute name.</p>
    ///         <p>In addition to updating user attributes, this API can also be used to mark phone and
    ///             email as verified.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminUpdateUserAttributes(input: AdminUpdateUserAttributesInput, completion: @escaping (SdkResult<AdminUpdateUserAttributesOutputResponse, AdminUpdateUserAttributesOutputError>) -> Void)
    /// <p>Signs out users from all devices, as an administrator. It also invalidates all refresh
    ///             tokens issued to a user. The user's current access and Id tokens remain valid until
    ///             their expiry. Access and Id tokens expire one hour after they are issued.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func adminUserGlobalSignOut(input: AdminUserGlobalSignOutInput, completion: @escaping (SdkResult<AdminUserGlobalSignOutOutputResponse, AdminUserGlobalSignOutOutputError>) -> Void)
    /// <p>Returns a unique generated shared secret key code for the user account. The request
    ///             takes an access token or a session string, but not both.</p>
    func associateSoftwareToken(input: AssociateSoftwareTokenInput, completion: @escaping (SdkResult<AssociateSoftwareTokenOutputResponse, AssociateSoftwareTokenOutputError>) -> Void)
    /// <p>Changes the password for a specified user in a user pool.</p>
    func changePassword(input: ChangePasswordInput, completion: @escaping (SdkResult<ChangePasswordOutputResponse, ChangePasswordOutputError>) -> Void)
    /// <p>Confirms tracking of the device. This API call is the call that begins device
    ///             tracking.</p>
    func confirmDevice(input: ConfirmDeviceInput, completion: @escaping (SdkResult<ConfirmDeviceOutputResponse, ConfirmDeviceOutputError>) -> Void)
    /// <p>Allows a user to enter a confirmation code to reset a forgotten password.</p>
    func confirmForgotPassword(input: ConfirmForgotPasswordInput, completion: @escaping (SdkResult<ConfirmForgotPasswordOutputResponse, ConfirmForgotPasswordOutputError>) -> Void)
    /// <p>Confirms registration of a user and handles the existing alias from a previous
    ///             user.</p>
    func confirmSignUp(input: ConfirmSignUpInput, completion: @escaping (SdkResult<ConfirmSignUpOutputResponse, ConfirmSignUpOutputError>) -> Void)
    /// <p>Creates a new group in the specified user pool.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func createGroup(input: CreateGroupInput, completion: @escaping (SdkResult<CreateGroupOutputResponse, CreateGroupOutputError>) -> Void)
    /// <p>Creates an identity provider for a user pool.</p>
    func createIdentityProvider(input: CreateIdentityProviderInput, completion: @escaping (SdkResult<CreateIdentityProviderOutputResponse, CreateIdentityProviderOutputError>) -> Void)
    /// <p>Creates a new OAuth2.0 resource server and defines custom scopes in it.</p>
    func createResourceServer(input: CreateResourceServerInput, completion: @escaping (SdkResult<CreateResourceServerOutputResponse, CreateResourceServerOutputError>) -> Void)
    /// <p>Creates the user import job.</p>
    func createUserImportJob(input: CreateUserImportJobInput, completion: @escaping (SdkResult<CreateUserImportJobOutputResponse, CreateUserImportJobOutputError>) -> Void)
    /// <p>Creates a new Amazon Cognito user pool and sets the password policy for the
    ///             pool.</p>
    func createUserPool(input: CreateUserPoolInput, completion: @escaping (SdkResult<CreateUserPoolOutputResponse, CreateUserPoolOutputError>) -> Void)
    /// <p>Creates the user pool client.</p>
    func createUserPoolClient(input: CreateUserPoolClientInput, completion: @escaping (SdkResult<CreateUserPoolClientOutputResponse, CreateUserPoolClientOutputError>) -> Void)
    /// <p>Creates a new domain for a user pool.</p>
    func createUserPoolDomain(input: CreateUserPoolDomainInput, completion: @escaping (SdkResult<CreateUserPoolDomainOutputResponse, CreateUserPoolDomainOutputError>) -> Void)
    /// <p>Deletes a group.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func deleteGroup(input: DeleteGroupInput, completion: @escaping (SdkResult<DeleteGroupOutputResponse, DeleteGroupOutputError>) -> Void)
    /// <p>Deletes an identity provider for a user pool.</p>
    func deleteIdentityProvider(input: DeleteIdentityProviderInput, completion: @escaping (SdkResult<DeleteIdentityProviderOutputResponse, DeleteIdentityProviderOutputError>) -> Void)
    /// <p>Deletes a resource server.</p>
    func deleteResourceServer(input: DeleteResourceServerInput, completion: @escaping (SdkResult<DeleteResourceServerOutputResponse, DeleteResourceServerOutputError>) -> Void)
    /// <p>Allows a user to delete himself or herself.</p>
    func deleteUser(input: DeleteUserInput, completion: @escaping (SdkResult<DeleteUserOutputResponse, DeleteUserOutputError>) -> Void)
    /// <p>Deletes the attributes for a user.</p>
    func deleteUserAttributes(input: DeleteUserAttributesInput, completion: @escaping (SdkResult<DeleteUserAttributesOutputResponse, DeleteUserAttributesOutputError>) -> Void)
    /// <p>Deletes the specified Amazon Cognito user pool.</p>
    func deleteUserPool(input: DeleteUserPoolInput, completion: @escaping (SdkResult<DeleteUserPoolOutputResponse, DeleteUserPoolOutputError>) -> Void)
    /// <p>Allows the developer to delete the user pool client.</p>
    func deleteUserPoolClient(input: DeleteUserPoolClientInput, completion: @escaping (SdkResult<DeleteUserPoolClientOutputResponse, DeleteUserPoolClientOutputError>) -> Void)
    /// <p>Deletes a domain for a user pool.</p>
    func deleteUserPoolDomain(input: DeleteUserPoolDomainInput, completion: @escaping (SdkResult<DeleteUserPoolDomainOutputResponse, DeleteUserPoolDomainOutputError>) -> Void)
    /// <p>Gets information about a specific identity provider.</p>
    func describeIdentityProvider(input: DescribeIdentityProviderInput, completion: @escaping (SdkResult<DescribeIdentityProviderOutputResponse, DescribeIdentityProviderOutputError>) -> Void)
    /// <p>Describes a resource server.</p>
    func describeResourceServer(input: DescribeResourceServerInput, completion: @escaping (SdkResult<DescribeResourceServerOutputResponse, DescribeResourceServerOutputError>) -> Void)
    /// <p>Describes the risk configuration.</p>
    func describeRiskConfiguration(input: DescribeRiskConfigurationInput, completion: @escaping (SdkResult<DescribeRiskConfigurationOutputResponse, DescribeRiskConfigurationOutputError>) -> Void)
    /// <p>Describes the user import job.</p>
    func describeUserImportJob(input: DescribeUserImportJobInput, completion: @escaping (SdkResult<DescribeUserImportJobOutputResponse, DescribeUserImportJobOutputError>) -> Void)
    /// <p>Returns the configuration information and metadata of the specified user pool.</p>
    func describeUserPool(input: DescribeUserPoolInput, completion: @escaping (SdkResult<DescribeUserPoolOutputResponse, DescribeUserPoolOutputError>) -> Void)
    /// <p>Client method for returning the configuration information and metadata of the
    ///             specified user pool app client.</p>
    func describeUserPoolClient(input: DescribeUserPoolClientInput, completion: @escaping (SdkResult<DescribeUserPoolClientOutputResponse, DescribeUserPoolClientOutputError>) -> Void)
    /// <p>Gets information about a domain.</p>
    func describeUserPoolDomain(input: DescribeUserPoolDomainInput, completion: @escaping (SdkResult<DescribeUserPoolDomainOutputResponse, DescribeUserPoolDomainOutputError>) -> Void)
    /// <p>Forgets the specified device.</p>
    func forgetDevice(input: ForgetDeviceInput, completion: @escaping (SdkResult<ForgetDeviceOutputResponse, ForgetDeviceOutputError>) -> Void)
    /// <p>Calling this API causes a message to be sent to the end user with a confirmation code
    ///             that is required to change the user's password. For the <code>Username</code> parameter,
    ///             you can use the username or user alias. The method used to send the confirmation code is
    ///             sent according to the specified AccountRecoverySetting. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html">Recovering
    ///                 User Accounts</a> in the <i>Amazon Cognito Developer Guide</i>. If
    ///             neither a verified phone number nor a verified email exists, an
    ///                 <code>InvalidParameterException</code> is thrown. To use the confirmation code for
    ///             resetting the password, call <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>.</p>
    func forgotPassword(input: ForgotPasswordInput, completion: @escaping (SdkResult<ForgotPasswordOutputResponse, ForgotPasswordOutputError>) -> Void)
    /// <p>Gets the header information for the .csv file to be used as input for the user import
    ///             job.</p>
    func getCSVHeader(input: GetCSVHeaderInput, completion: @escaping (SdkResult<GetCSVHeaderOutputResponse, GetCSVHeaderOutputError>) -> Void)
    /// <p>Gets the device.</p>
    func getDevice(input: GetDeviceInput, completion: @escaping (SdkResult<GetDeviceOutputResponse, GetDeviceOutputError>) -> Void)
    /// <p>Gets a group.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func getGroup(input: GetGroupInput, completion: @escaping (SdkResult<GetGroupOutputResponse, GetGroupOutputError>) -> Void)
    /// <p>Gets the specified identity provider.</p>
    func getIdentityProviderByIdentifier(input: GetIdentityProviderByIdentifierInput, completion: @escaping (SdkResult<GetIdentityProviderByIdentifierOutputResponse, GetIdentityProviderByIdentifierOutputError>) -> Void)
    /// <p>This method takes a user pool ID, and returns the signing certificate.</p>
    func getSigningCertificate(input: GetSigningCertificateInput, completion: @escaping (SdkResult<GetSigningCertificateOutputResponse, GetSigningCertificateOutputError>) -> Void)
    /// <p>Gets the UI Customization information for a particular app client's app UI, if there
    ///             is something set. If nothing is set for the particular client, but there is an existing
    ///             pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that
    ///             is returned. If nothing is present, then an empty shape is returned.</p>
    func getUICustomization(input: GetUICustomizationInput, completion: @escaping (SdkResult<GetUICustomizationOutputResponse, GetUICustomizationOutputError>) -> Void)
    /// <p>Gets the user attributes and metadata for a user.</p>
    func getUser(input: GetUserInput, completion: @escaping (SdkResult<GetUserOutputResponse, GetUserOutputError>) -> Void)
    /// <p>Gets the user attribute verification code for the specified attribute name.</p>
    func getUserAttributeVerificationCode(input: GetUserAttributeVerificationCodeInput, completion: @escaping (SdkResult<GetUserAttributeVerificationCodeOutputResponse, GetUserAttributeVerificationCodeOutputError>) -> Void)
    /// <p>Gets the user pool multi-factor authentication (MFA) configuration.</p>
    func getUserPoolMfaConfig(input: GetUserPoolMfaConfigInput, completion: @escaping (SdkResult<GetUserPoolMfaConfigOutputResponse, GetUserPoolMfaConfigOutputError>) -> Void)
    /// <p>Signs out users from all devices. It also invalidates all refresh tokens issued to a
    ///             user. The user's current access and Id tokens remain valid until their expiry. Access
    ///             and Id tokens expire one hour after they are issued.</p>
    func globalSignOut(input: GlobalSignOutInput, completion: @escaping (SdkResult<GlobalSignOutOutputResponse, GlobalSignOutOutputError>) -> Void)
    /// <p>Initiates the authentication flow.</p>
    func initiateAuth(input: InitiateAuthInput, completion: @escaping (SdkResult<InitiateAuthOutputResponse, InitiateAuthOutputError>) -> Void)
    /// <p>Lists the devices.</p>
    func listDevices(input: ListDevicesInput, completion: @escaping (SdkResult<ListDevicesOutputResponse, ListDevicesOutputError>) -> Void)
    /// <p>Lists the groups associated with a user pool.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func listGroups(input: ListGroupsInput, completion: @escaping (SdkResult<ListGroupsOutputResponse, ListGroupsOutputError>) -> Void)
    /// <p>Lists information about all identity providers for a user pool.</p>
    func listIdentityProviders(input: ListIdentityProvidersInput, completion: @escaping (SdkResult<ListIdentityProvidersOutputResponse, ListIdentityProvidersOutputError>) -> Void)
    /// <p>Lists the resource servers for a user pool.</p>
    func listResourceServers(input: ListResourceServersInput, completion: @escaping (SdkResult<ListResourceServersOutputResponse, ListResourceServersOutputError>) -> Void)
    /// <p>Lists the tags that are assigned to an Amazon Cognito user pool.</p>
    ///         <p>A tag is a label that you can apply to user pools to categorize and manage them in
    ///             different ways, such as by purpose, owner, environment, or other criteria.</p>
    ///         <p>You can use this action up to 10 times per second, per account.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists the user import jobs.</p>
    func listUserImportJobs(input: ListUserImportJobsInput, completion: @escaping (SdkResult<ListUserImportJobsOutputResponse, ListUserImportJobsOutputError>) -> Void)
    /// <p>Lists the clients that have been created for the specified user pool.</p>
    func listUserPoolClients(input: ListUserPoolClientsInput, completion: @escaping (SdkResult<ListUserPoolClientsOutputResponse, ListUserPoolClientsOutputError>) -> Void)
    /// <p>Lists the user pools associated with an AWS account.</p>
    func listUserPools(input: ListUserPoolsInput, completion: @escaping (SdkResult<ListUserPoolsOutputResponse, ListUserPoolsOutputError>) -> Void)
    /// <p>Lists the users in the Amazon Cognito user pool.</p>
    func listUsers(input: ListUsersInput, completion: @escaping (SdkResult<ListUsersOutputResponse, ListUsersOutputError>) -> Void)
    /// <p>Lists the users in the specified group.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    func listUsersInGroup(input: ListUsersInGroupInput, completion: @escaping (SdkResult<ListUsersInGroupOutputResponse, ListUsersInGroupOutputError>) -> Void)
    /// <p>Resends the confirmation (for confirmation of registration) to a specific user in the
    ///             user pool.</p>
    func resendConfirmationCode(input: ResendConfirmationCodeInput, completion: @escaping (SdkResult<ResendConfirmationCodeOutputResponse, ResendConfirmationCodeOutputError>) -> Void)
    /// <p>Responds to the authentication challenge.</p>
    func respondToAuthChallenge(input: RespondToAuthChallengeInput, completion: @escaping (SdkResult<RespondToAuthChallengeOutputResponse, RespondToAuthChallengeOutputError>) -> Void)
    /// <p>Configures actions on detected risks. To delete the risk configuration for
    ///                 <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four
    ///             configuration types.</p>
    ///         <p>To enable Amazon Cognito advanced security features, update the user pool to include
    ///             the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>
    func setRiskConfiguration(input: SetRiskConfigurationInput, completion: @escaping (SdkResult<SetRiskConfigurationOutputResponse, SetRiskConfigurationOutputError>) -> Void)
    /// <p>Sets the UI customization information for a user pool's built-in app UI.</p>
    ///         <p>You can specify app UI customization settings for a single client (with a specific
    ///                 <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to
    ///                 <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will
    ///             be used for every client that has no UI customization set previously. If you specify UI
    ///             customization settings for a particular client, it will no longer fall back to the
    ///                 <code>ALL</code> configuration. </p>
    ///         <note>
    ///             <p>To use this API, your user pool must have a domain associated with it. Otherwise,
    ///                 there is no place to host the app's pages, and the service will throw an
    ///                 error.</p>
    ///         </note>
    func setUICustomization(input: SetUICustomizationInput, completion: @escaping (SdkResult<SetUICustomizationOutputResponse, SetUICustomizationOutputError>) -> Void)
    /// <p>Set the user's multi-factor authentication (MFA) method preference, including which
    ///             MFA factors are enabled and if any are preferred. Only one factor can be set as
    ///             preferred. The preferred MFA factor will be used to authenticate a user if multiple
    ///             factors are enabled. If multiple options are enabled and no preference is set, a
    ///             challenge to choose an MFA option will be returned during sign in. If an MFA type is
    ///             enabled for a user, the user will be prompted for MFA during all sign in attempts,
    ///             unless device tracking is turned on and the device has been trusted. If you would like
    ///             MFA to be applied selectively based on the assessed risk level of sign in attempts,
    ///             disable MFA for users and turn on Adaptive Authentication for the user pool.</p>
    func setUserMFAPreference(input: SetUserMFAPreferenceInput, completion: @escaping (SdkResult<SetUserMFAPreferenceOutputResponse, SetUserMFAPreferenceOutputError>) -> Void)
    /// <p>Set the user pool multi-factor authentication (MFA) configuration.</p>
    func setUserPoolMfaConfig(input: SetUserPoolMfaConfigInput, completion: @escaping (SdkResult<SetUserPoolMfaConfigOutputResponse, SetUserPoolMfaConfigOutputError>) -> Void)
    /// <p>
    ///             <i>This action is no longer supported.</i> You can use it to configure
    ///             only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either
    ///             type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html">SetUserMFAPreference</a> instead.</p>
    func setUserSettings(input: SetUserSettingsInput, completion: @escaping (SdkResult<SetUserSettingsOutputResponse, SetUserSettingsOutputError>) -> Void)
    /// <p>Registers the user in the specified user pool and creates a user name, password, and
    ///             user attributes.</p>
    func signUp(input: SignUpInput, completion: @escaping (SdkResult<SignUpOutputResponse, SignUpOutputError>) -> Void)
    /// <p>Starts the user import.</p>
    func startUserImportJob(input: StartUserImportJobInput, completion: @escaping (SdkResult<StartUserImportJobOutputResponse, StartUserImportJobOutputError>) -> Void)
    /// <p>Stops the user import job.</p>
    func stopUserImportJob(input: StopUserImportJobInput, completion: @escaping (SdkResult<StopUserImportJobOutputResponse, StopUserImportJobOutputError>) -> Void)
    /// <p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can
    ///             use to categorize and manage user pools in different ways, such as by purpose, owner,
    ///             environment, or other criteria.</p>
    ///         <p>Each tag consists of a key and value, both of which you define. A key is a general
    ///             category for more specific values. For example, if you have two versions of a user pool,
    ///             one for testing and another for production, you might assign an <code>Environment</code>
    ///             tag key to both user pools. The value of this key might be <code>Test</code> for one
    ///             user pool and <code>Production</code> for the other.</p>
    ///         <p>Tags are useful for cost tracking and access control. You can activate your tags so
    ///             that they appear on the Billing and Cost Management console, where you can track the
    ///             costs associated with your user pools. In an IAM policy, you can constrain permissions
    ///             for user pools based on specific tags or tag values.</p>
    ///         <p>You can use this action up to 5 times per second, per account. A user pool can have as
    ///             many as 50 tags.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes the specified tags from an Amazon Cognito user pool. You can use this action
    ///             up to 5 times per second, per account</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Provides the feedback for an authentication event whether it was from a valid user or
    ///             not. This feedback is used for improving the risk evaluation decision for the user pool
    ///             as part of Amazon Cognito advanced security.</p>
    func updateAuthEventFeedback(input: UpdateAuthEventFeedbackInput, completion: @escaping (SdkResult<UpdateAuthEventFeedbackOutputResponse, UpdateAuthEventFeedbackOutputError>) -> Void)
    /// <p>Updates the device status.</p>
    func updateDeviceStatus(input: UpdateDeviceStatusInput, completion: @escaping (SdkResult<UpdateDeviceStatusOutputResponse, UpdateDeviceStatusOutputError>) -> Void)
    /// <p>Updates the specified group with the specified attributes.</p>
    ///         <p>Calling this action requires developer credentials.</p>
    ///         <important>
    ///             <p>If you don't provide a value for an attribute, it will be set to the default
    ///                 value.</p>
    ///         </important>
    func updateGroup(input: UpdateGroupInput, completion: @escaping (SdkResult<UpdateGroupOutputResponse, UpdateGroupOutputError>) -> Void)
    /// <p>Updates identity provider information for a user pool.</p>
    func updateIdentityProvider(input: UpdateIdentityProviderInput, completion: @escaping (SdkResult<UpdateIdentityProviderOutputResponse, UpdateIdentityProviderOutputError>) -> Void)
    /// <p>Updates the name and scopes of resource server. All other fields are read-only.</p>
    ///         <important>
    ///             <p>If you don't provide a value for an attribute, it will be set to the default
    ///                 value.</p>
    ///         </important>
    func updateResourceServer(input: UpdateResourceServerInput, completion: @escaping (SdkResult<UpdateResourceServerOutputResponse, UpdateResourceServerOutputError>) -> Void)
    /// <p>Allows a user to update a specific attribute (one at a time).</p>
    func updateUserAttributes(input: UpdateUserAttributesInput, completion: @escaping (SdkResult<UpdateUserAttributesOutputResponse, UpdateUserAttributesOutputError>) -> Void)
    /// <p>Updates the specified user pool with the specified attributes. You can get a list of
    ///             the current user pool settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool</a>.</p>
    ///         <important>
    ///             <p>If you don't provide a value for an attribute, it will be set to the default
    ///                 value.</p>
    ///         </important>
    func updateUserPool(input: UpdateUserPoolInput, completion: @escaping (SdkResult<UpdateUserPoolOutputResponse, UpdateUserPoolOutputError>) -> Void)
    /// <p>Updates the specified user pool app client with the specified attributes. You can get
    ///             a list of the current user pool app client settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html">DescribeUserPoolClient</a>.</p>
    ///         <important>
    ///             <p>If you don't provide a value for an attribute, it will be set to the default
    ///                 value.</p>
    ///         </important>
    func updateUserPoolClient(input: UpdateUserPoolClientInput, completion: @escaping (SdkResult<UpdateUserPoolClientOutputResponse, UpdateUserPoolClientOutputError>) -> Void)
    /// <p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user
    ///             pool.</p>
    ///         <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new
    ///             certificate to Amazon Cognito. You cannot use it to change the domain for a user
    ///             pool.</p>
    ///         <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up
    ///             and sign-in pages for your application. When you set up a custom domain, you provide a
    ///             certificate that you manage with AWS Certificate Manager (ACM). When necessary, you can
    ///             use this operation to change the certificate that you applied to your custom
    ///             domain.</p>
    ///         <p>Usually, this is unnecessary following routine certificate renewal with ACM. When you
    ///             renew your existing certificate in ACM, the ARN for your certificate remains the same,
    ///             and your custom domain uses the new certificate automatically.</p>
    ///         <p>However, if you replace your existing certificate with a new one, ACM gives the new
    ///             certificate a new ARN. To apply the new certificate to your custom domain, you must
    ///             provide this ARN to Amazon Cognito.</p>
    ///         <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as the
    ///             AWS Region.</p>
    ///         <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your
    ///             new certificate to your custom domain.</p>
    ///         <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    func updateUserPoolDomain(input: UpdateUserPoolDomainInput, completion: @escaping (SdkResult<UpdateUserPoolDomainOutputResponse, UpdateUserPoolDomainOutputError>) -> Void)
    /// <p>Use this API to register a user's entered TOTP code and mark the user's software token
    ///             MFA status as "verified" if successful. The request takes an access token or a session
    ///             string, but not both.</p>
    func verifySoftwareToken(input: VerifySoftwareTokenInput, completion: @escaping (SdkResult<VerifySoftwareTokenOutputResponse, VerifySoftwareTokenOutputError>) -> Void)
    /// <p>Verifies the specified user attributes in the user pool.</p>
    func verifyUserAttribute(input: VerifyUserAttributeInput, completion: @escaping (SdkResult<VerifyUserAttributeOutputResponse, VerifyUserAttributeOutputError>) -> Void)
}
