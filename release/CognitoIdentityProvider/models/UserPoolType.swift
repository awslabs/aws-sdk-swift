// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A container for information about the user pool.</p>
public struct UserPoolType: Equatable {
    /// <p>Use this setting to define which verified available method a user can use to recover
    ///             their password when they call <code>ForgotPassword</code>. It allows you to define a
    ///             preferred method when a user has more than one method available. With this setting, SMS
    ///             does not qualify for a valid password recovery mechanism if the user also has SMS MFA
    ///             enabled. In the absence of this setting, Cognito uses the legacy behavior to determine
    ///             the recovery method where SMS is preferred over email.</p>
    public let accountRecoverySetting: AccountRecoverySettingType?
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    public let adminCreateUserConfig: AdminCreateUserConfigType?
    /// <p>Specifies the attributes that are aliased in a user pool.</p>
    public let aliasAttributes: [AliasAttributeType]?
    /// <p>The Amazon Resource Name (ARN) for the user pool.</p>
    public let arn: String?
    /// <p>Specifies the attributes that are auto-verified in a user pool.</p>
    public let autoVerifiedAttributes: [VerifiedAttributeType]?
    /// <p>The date the user pool was created.</p>
    public let creationDate: Date?
    /// <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only
    ///             if you use a custom domain to host the sign-up and sign-in pages for your application.
    ///             For example: <code>auth.example.com</code>.</p>
    ///         <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    public let customDomain: String?
    /// <p>The device configuration.</p>
    public let deviceConfiguration: DeviceConfigurationType?
    /// <p>Holds the domain prefix if the user pool has a domain associated with it.</p>
    public let domain: String?
    /// <p>The email configuration.</p>
    public let emailConfiguration: EmailConfigurationType?
    /// <p>The reason why the email configuration cannot send the messages to your users.</p>
    public let emailConfigurationFailure: String?
    /// <p>The contents of the email verification message.</p>
    public let emailVerificationMessage: String?
    /// <p>The subject of the email verification message.</p>
    public let emailVerificationSubject: String?
    /// <p>A number estimating the size of the user pool.</p>
    public let estimatedNumberOfUsers: Int
    /// <p>The ID of the user pool.</p>
    public let id: String?
    /// <p>The AWS Lambda triggers associated with the user pool.</p>
    public let lambdaConfig: LambdaConfigType?
    /// <p>The date the user pool was last modified.</p>
    public let lastModifiedDate: Date?
    /// <p>Can be one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>OFF</code> - MFA tokens are not required and cannot be specified during
    ///                     user registration.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ON</code> - MFA tokens are required for all user registrations. You can
    ///                     only specify required when you are initially creating a user pool.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>OPTIONAL</code> - Users have the option when registering to create an MFA
    ///                     token.</p>
    ///             </li>
    ///          </ul>
    public let mfaConfiguration: UserPoolMfaType?
    /// <p>The name of the user pool.</p>
    public let name: String?
    /// <p>The policies associated with the user pool.</p>
    public let policies: UserPoolPolicyType?
    /// <p>A container with the schema attributes of a user pool.</p>
    public let schemaAttributes: [SchemaAttributeType]?
    /// <p>The contents of the SMS authentication message.</p>
    public let smsAuthenticationMessage: String?
    /// <p>The SMS configuration.</p>
    public let smsConfiguration: SmsConfigurationType?
    /// <p>The reason why the SMS configuration cannot send the messages to your users.</p>
    public let smsConfigurationFailure: String?
    /// <p>The contents of the SMS verification message.</p>
    public let smsVerificationMessage: String?
    /// <p>The status of a user pool.</p>
    public let status: StatusType?
    /// <p>The user pool add-ons.</p>
    public let userPoolAddOns: UserPoolAddOnsType?
    /// <p>The tags that are assigned to the user pool. A tag is a label that you can apply to
    ///             user pools to categorize and manage them in different ways, such as by purpose, owner,
    ///             environment, or other criteria.</p>
    public let userPoolTags: [String:String]?
    /// <p>Specifies whether email addresses or phone numbers can be specified as usernames when
    ///             a user signs up.</p>
    public let usernameAttributes: [UsernameAttributeType]?
    /// <p>You can choose to enable case sensitivity on the username input for the selected
    ///             sign-in option. For example, when this is set to <code>False</code>, users will be able
    ///             to sign in using either "username" or "Username". This configuration is immutable once
    ///             it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
    public let usernameConfiguration: UsernameConfigurationType?
    /// <p>The template for verification messages.</p>
    public let verificationMessageTemplate: VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: AccountRecoverySettingType? = nil,
        adminCreateUserConfig: AdminCreateUserConfigType? = nil,
        aliasAttributes: [AliasAttributeType]? = nil,
        arn: String? = nil,
        autoVerifiedAttributes: [VerifiedAttributeType]? = nil,
        creationDate: Date? = nil,
        customDomain: String? = nil,
        deviceConfiguration: DeviceConfigurationType? = nil,
        domain: String? = nil,
        emailConfiguration: EmailConfigurationType? = nil,
        emailConfigurationFailure: String? = nil,
        emailVerificationMessage: String? = nil,
        emailVerificationSubject: String? = nil,
        estimatedNumberOfUsers: Int = 0,
        id: String? = nil,
        lambdaConfig: LambdaConfigType? = nil,
        lastModifiedDate: Date? = nil,
        mfaConfiguration: UserPoolMfaType? = nil,
        name: String? = nil,
        policies: UserPoolPolicyType? = nil,
        schemaAttributes: [SchemaAttributeType]? = nil,
        smsAuthenticationMessage: String? = nil,
        smsConfiguration: SmsConfigurationType? = nil,
        smsConfigurationFailure: String? = nil,
        smsVerificationMessage: String? = nil,
        status: StatusType? = nil,
        userPoolAddOns: UserPoolAddOnsType? = nil,
        userPoolTags: [String:String]? = nil,
        usernameAttributes: [UsernameAttributeType]? = nil,
        usernameConfiguration: UsernameConfigurationType? = nil,
        verificationMessageTemplate: VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.arn = arn
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.creationDate = creationDate
        self.customDomain = customDomain
        self.deviceConfiguration = deviceConfiguration
        self.domain = domain
        self.emailConfiguration = emailConfiguration
        self.emailConfigurationFailure = emailConfigurationFailure
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.estimatedNumberOfUsers = estimatedNumberOfUsers
        self.id = id
        self.lambdaConfig = lambdaConfig
        self.lastModifiedDate = lastModifiedDate
        self.mfaConfiguration = mfaConfiguration
        self.name = name
        self.policies = policies
        self.schemaAttributes = schemaAttributes
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsConfigurationFailure = smsConfigurationFailure
        self.smsVerificationMessage = smsVerificationMessage
        self.status = status
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
