// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AdminCreateUserInputBody: Equatable {
    public let userPoolId: String?
    public let username: String?
    public let userAttributes: [AttributeType]?
    public let validationData: [AttributeType]?
    public let temporaryPassword: String?
    public let forceAliasCreation: Bool
    public let messageAction: MessageActionType?
    public let desiredDeliveryMediums: [DeliveryMediumType]?
    public let clientMetadata: [String:String]?
}

extension AdminCreateUserInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientMetadata = "ClientMetadata"
        case desiredDeliveryMediums = "DesiredDeliveryMediums"
        case forceAliasCreation = "ForceAliasCreation"
        case messageAction = "MessageAction"
        case temporaryPassword = "TemporaryPassword"
        case userAttributes = "UserAttributes"
        case userPoolId = "UserPoolId"
        case username = "Username"
        case validationData = "ValidationData"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let userAttributesContainer = try containerValues.decodeIfPresent([AttributeType].self, forKey: .userAttributes)
        var userAttributesDecoded0:[AttributeType]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [AttributeType]()
            for structure0 in userAttributesContainer {
                userAttributesDecoded0?.append(structure0)
            }
        }
        userAttributes = userAttributesDecoded0
        let validationDataContainer = try containerValues.decodeIfPresent([AttributeType].self, forKey: .validationData)
        var validationDataDecoded0:[AttributeType]? = nil
        if let validationDataContainer = validationDataContainer {
            validationDataDecoded0 = [AttributeType]()
            for structure0 in validationDataContainer {
                validationDataDecoded0?.append(structure0)
            }
        }
        validationData = validationDataDecoded0
        let temporaryPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .temporaryPassword)
        temporaryPassword = temporaryPasswordDecoded
        let forceAliasCreationDecoded = try containerValues.decode(Bool.self, forKey: .forceAliasCreation)
        forceAliasCreation = forceAliasCreationDecoded
        let messageActionDecoded = try containerValues.decodeIfPresent(MessageActionType.self, forKey: .messageAction)
        messageAction = messageActionDecoded
        let desiredDeliveryMediumsContainer = try containerValues.decodeIfPresent([DeliveryMediumType].self, forKey: .desiredDeliveryMediums)
        var desiredDeliveryMediumsDecoded0:[DeliveryMediumType]? = nil
        if let desiredDeliveryMediumsContainer = desiredDeliveryMediumsContainer {
            desiredDeliveryMediumsDecoded0 = [DeliveryMediumType]()
            for string0 in desiredDeliveryMediumsContainer {
                desiredDeliveryMediumsDecoded0?.append(string0)
            }
        }
        desiredDeliveryMediums = desiredDeliveryMediumsDecoded0
        let clientMetadataContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [String:String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [String:String]()
            for (key0, stringtype0) in clientMetadataContainer {
                clientMetadataDecoded0?[key0] = stringtype0
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}
