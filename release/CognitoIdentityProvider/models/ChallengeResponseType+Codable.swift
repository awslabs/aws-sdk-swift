// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChallengeResponseType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case challengeName = "ChallengeName"
        case challengeResponse = "ChallengeResponse"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let challengeName = challengeName {
            try encodeContainer.encode(challengeName.rawValue, forKey: .challengeName)
        }
        if let challengeResponse = challengeResponse {
            try encodeContainer.encode(challengeResponse.rawValue, forKey: .challengeResponse)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let challengeNameDecoded = try containerValues.decodeIfPresent(ChallengeName.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let challengeResponseDecoded = try containerValues.decodeIfPresent(ChallengeResponse.self, forKey: .challengeResponse)
        challengeResponse = challengeResponseDecoded
    }
}
