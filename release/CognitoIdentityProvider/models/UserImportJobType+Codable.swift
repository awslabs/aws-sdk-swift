// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserImportJobType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
        case completionDate = "CompletionDate"
        case completionMessage = "CompletionMessage"
        case creationDate = "CreationDate"
        case failedUsers = "FailedUsers"
        case importedUsers = "ImportedUsers"
        case jobId = "JobId"
        case jobName = "JobName"
        case preSignedUrl = "PreSignedUrl"
        case skippedUsers = "SkippedUsers"
        case startDate = "StartDate"
        case status = "Status"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsRoleArn = cloudWatchLogsRoleArn {
            try encodeContainer.encode(cloudWatchLogsRoleArn, forKey: .cloudWatchLogsRoleArn)
        }
        if let completionDate = completionDate {
            try encodeContainer.encode(completionDate.timeIntervalSince1970, forKey: .completionDate)
        }
        if let completionMessage = completionMessage {
            try encodeContainer.encode(completionMessage, forKey: .completionMessage)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if failedUsers != 0 {
            try encodeContainer.encode(failedUsers, forKey: .failedUsers)
        }
        if importedUsers != 0 {
            try encodeContainer.encode(importedUsers, forKey: .importedUsers)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let preSignedUrl = preSignedUrl {
            try encodeContainer.encode(preSignedUrl, forKey: .preSignedUrl)
        }
        if skippedUsers != 0 {
            try encodeContainer.encode(skippedUsers, forKey: .skippedUsers)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate.timeIntervalSince1970, forKey: .startDate)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userPoolId = userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let preSignedUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preSignedUrl)
        preSignedUrl = preSignedUrlDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDate)
        startDate = startDateDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(UserImportJobStatusType.self, forKey: .status)
        status = statusDecoded
        let cloudWatchLogsRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudWatchLogsRoleArn)
        cloudWatchLogsRoleArn = cloudWatchLogsRoleArnDecoded
        let importedUsersDecoded = try containerValues.decode(Int.self, forKey: .importedUsers)
        importedUsers = importedUsersDecoded
        let skippedUsersDecoded = try containerValues.decode(Int.self, forKey: .skippedUsers)
        skippedUsers = skippedUsersDecoded
        let failedUsersDecoded = try containerValues.decode(Int.self, forKey: .failedUsers)
        failedUsers = failedUsersDecoded
        let completionMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .completionMessage)
        completionMessage = completionMessageDecoded
    }
}
