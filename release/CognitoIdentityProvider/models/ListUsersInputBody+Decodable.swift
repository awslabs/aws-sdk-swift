// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUsersInputBody: Equatable {
    public let userPoolId: String?
    public let attributesToGet: [String]?
    public let limit: Int?
    public let paginationToken: String?
    public let filter: String?
}

extension ListUsersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case filter = "Filter"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([String].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                attributesToGetDecoded0?.append(string0)
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let filterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filter)
        filter = filterDecoded
    }
}
