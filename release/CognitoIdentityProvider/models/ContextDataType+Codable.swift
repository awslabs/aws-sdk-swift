// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContextDataType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encodedData = "EncodedData"
        case httpHeaders = "HttpHeaders"
        case ipAddress = "IpAddress"
        case serverName = "ServerName"
        case serverPath = "ServerPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encodedData = encodedData {
            try encodeContainer.encode(encodedData, forKey: .encodedData)
        }
        if let httpHeaders = httpHeaders {
            var httpHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpHeaders)
            for httpheaderlist0 in httpHeaders {
                try httpHeadersContainer.encode(httpheaderlist0)
            }
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let serverName = serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let serverPath = serverPath {
            try encodeContainer.encode(serverPath, forKey: .serverPath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let serverPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverPath)
        serverPath = serverPathDecoded
        let httpHeadersContainer = try containerValues.decodeIfPresent([HttpHeader].self, forKey: .httpHeaders)
        var httpHeadersDecoded0:[HttpHeader]? = nil
        if let httpHeadersContainer = httpHeadersContainer {
            httpHeadersDecoded0 = [HttpHeader]()
            for structure0 in httpHeadersContainer {
                httpHeadersDecoded0?.append(structure0)
            }
        }
        httpHeaders = httpHeadersDecoded0
        let encodedDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encodedData)
        encodedData = encodedDataDecoded
    }
}
