// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmailConfigurationType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationSet = "ConfigurationSet"
        case emailSendingAccount = "EmailSendingAccount"
        case from = "From"
        case replyToEmailAddress = "ReplyToEmailAddress"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSet = configurationSet {
            try encodeContainer.encode(configurationSet, forKey: .configurationSet)
        }
        if let emailSendingAccount = emailSendingAccount {
            try encodeContainer.encode(emailSendingAccount.rawValue, forKey: .emailSendingAccount)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let replyToEmailAddress = replyToEmailAddress {
            try encodeContainer.encode(replyToEmailAddress, forKey: .replyToEmailAddress)
        }
        if let sourceArn = sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let replyToEmailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replyToEmailAddress)
        replyToEmailAddress = replyToEmailAddressDecoded
        let emailSendingAccountDecoded = try containerValues.decodeIfPresent(EmailSendingAccountType.self, forKey: .emailSendingAccount)
        emailSendingAccount = emailSendingAccountDecoded
        let fromDecoded = try containerValues.decodeIfPresent(String.self, forKey: .from)
        from = fromDecoded
        let configurationSetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
    }
}
