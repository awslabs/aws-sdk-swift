// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RevokePermissionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case permissions = "Permissions"
        case permissionsWithGrantOption = "PermissionsWithGrantOption"
        case principal = "Principal"
        case resource = "Resource"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let permissionsWithGrantOption = permissionsWithGrantOption {
            var permissionsWithGrantOptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissionsWithGrantOption)
            for permissionlist0 in permissionsWithGrantOption {
                try permissionsWithGrantOptionContainer.encode(permissionlist0.rawValue)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }
}
