// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LFTagError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case error = "Error"
        case lFTag = "LFTag"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let lFTag = lFTag {
            try encodeContainer.encode(lFTag, forKey: .lFTag)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lFTagDecoded = try containerValues.decodeIfPresent(LFTagPair.self, forKey: .lFTag)
        lFTag = lFTagDecoded
        let errorDecoded = try containerValues.decodeIfPresent(ErrorDetail.self, forKey: .error)
        error = errorDecoded
    }
}
