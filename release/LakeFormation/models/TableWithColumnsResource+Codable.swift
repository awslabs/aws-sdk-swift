// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TableWithColumnsResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case columnNames = "ColumnNames"
        case columnWildcard = "ColumnWildcard"
        case databaseName = "DatabaseName"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let columnNames = columnNames {
            var columnNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnNames)
            for columnnames0 in columnNames {
                try columnNamesContainer.encode(columnnames0)
            }
        }
        if let columnWildcard = columnWildcard {
            try encodeContainer.encode(columnWildcard, forKey: .columnWildcard)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let columnNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .columnNames)
        var columnNamesDecoded0:[String]? = nil
        if let columnNamesContainer = columnNamesContainer {
            columnNamesDecoded0 = [String]()
            for string0 in columnNamesContainer {
                columnNamesDecoded0?.append(string0)
            }
        }
        columnNames = columnNamesDecoded0
        let columnWildcardDecoded = try containerValues.decodeIfPresent(ColumnWildcard.self, forKey: .columnWildcard)
        columnWildcard = columnWildcardDecoded
    }
}
