// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchPermissionsRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case permissions = "Permissions"
        case permissionsWithGrantOption = "PermissionsWithGrantOption"
        case principal = "Principal"
        case resource = "Resource"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let permissionsWithGrantOption = permissionsWithGrantOption {
            var permissionsWithGrantOptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissionsWithGrantOption)
            for permissionlist0 in permissionsWithGrantOption {
                try permissionsWithGrantOptionContainer.encode(permissionlist0.rawValue)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let principalDecoded = try containerValues.decodeIfPresent(DataLakePrincipal.self, forKey: .principal)
        principal = principalDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Resource.self, forKey: .resource)
        resource = resourceDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([Permission].self, forKey: .permissions)
        var permissionsDecoded0:[Permission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [Permission]()
            for string0 in permissionsContainer {
                permissionsDecoded0?.append(string0)
            }
        }
        permissions = permissionsDecoded0
        let permissionsWithGrantOptionContainer = try containerValues.decodeIfPresent([Permission].self, forKey: .permissionsWithGrantOption)
        var permissionsWithGrantOptionDecoded0:[Permission]? = nil
        if let permissionsWithGrantOptionContainer = permissionsWithGrantOptionContainer {
            permissionsWithGrantOptionDecoded0 = [Permission]()
            for string0 in permissionsWithGrantOptionContainer {
                permissionsWithGrantOptionDecoded0?.append(string0)
            }
        }
        permissionsWithGrantOption = permissionsWithGrantOptionDecoded0
    }
}
