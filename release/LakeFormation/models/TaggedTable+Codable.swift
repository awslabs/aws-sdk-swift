// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TaggedTable: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lFTagOnDatabase = "LFTagOnDatabase"
        case lFTagsOnColumns = "LFTagsOnColumns"
        case lFTagsOnTable = "LFTagsOnTable"
        case table = "Table"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lFTagOnDatabase = lFTagOnDatabase {
            var lFTagOnDatabaseContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lFTagOnDatabase)
            for lftagslist0 in lFTagOnDatabase {
                try lFTagOnDatabaseContainer.encode(lftagslist0)
            }
        }
        if let lFTagsOnColumns = lFTagsOnColumns {
            var lFTagsOnColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lFTagsOnColumns)
            for columnlftagslist0 in lFTagsOnColumns {
                try lFTagsOnColumnsContainer.encode(columnlftagslist0)
            }
        }
        if let lFTagsOnTable = lFTagsOnTable {
            var lFTagsOnTableContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lFTagsOnTable)
            for lftagslist0 in lFTagsOnTable {
                try lFTagsOnTableContainer.encode(lftagslist0)
            }
        }
        if let table = table {
            try encodeContainer.encode(table, forKey: .table)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(TableResource.self, forKey: .table)
        table = tableDecoded
        let lFTagOnDatabaseContainer = try containerValues.decodeIfPresent([LFTagPair].self, forKey: .lFTagOnDatabase)
        var lFTagOnDatabaseDecoded0:[LFTagPair]? = nil
        if let lFTagOnDatabaseContainer = lFTagOnDatabaseContainer {
            lFTagOnDatabaseDecoded0 = [LFTagPair]()
            for structure0 in lFTagOnDatabaseContainer {
                lFTagOnDatabaseDecoded0?.append(structure0)
            }
        }
        lFTagOnDatabase = lFTagOnDatabaseDecoded0
        let lFTagsOnTableContainer = try containerValues.decodeIfPresent([LFTagPair].self, forKey: .lFTagsOnTable)
        var lFTagsOnTableDecoded0:[LFTagPair]? = nil
        if let lFTagsOnTableContainer = lFTagsOnTableContainer {
            lFTagsOnTableDecoded0 = [LFTagPair]()
            for structure0 in lFTagsOnTableContainer {
                lFTagsOnTableDecoded0?.append(structure0)
            }
        }
        lFTagsOnTable = lFTagsOnTableDecoded0
        let lFTagsOnColumnsContainer = try containerValues.decodeIfPresent([ColumnLFTag].self, forKey: .lFTagsOnColumns)
        var lFTagsOnColumnsDecoded0:[ColumnLFTag]? = nil
        if let lFTagsOnColumnsContainer = lFTagsOnColumnsContainer {
            lFTagsOnColumnsDecoded0 = [ColumnLFTag]()
            for structure0 in lFTagsOnColumnsContainer {
                lFTagsOnColumnsDecoded0?.append(structure0)
            }
        }
        lFTagsOnColumns = lFTagsOnColumnsDecoded0
    }
}
