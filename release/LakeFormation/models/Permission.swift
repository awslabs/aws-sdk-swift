// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Permission {
    case all
    case alter
    case alterTag
    case associateTag
    case createDatabase
    case createTable
    case createTag
    case dataLocationAccess
    case delete
    case deleteTag
    case describe
    case describeTag
    case drop
    case insert
    case select
    case sdkUnknown(String)
}

extension Permission : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Permission] {
        return [
            .all,
            .alter,
            .alterTag,
            .associateTag,
            .createDatabase,
            .createTable,
            .createTag,
            .dataLocationAccess,
            .delete,
            .deleteTag,
            .describe,
            .describeTag,
            .drop,
            .insert,
            .select,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .alter: return "ALTER"
        case .alterTag: return "ALTER_TAG"
        case .associateTag: return "ASSOCIATE_TAG"
        case .createDatabase: return "CREATE_DATABASE"
        case .createTable: return "CREATE_TABLE"
        case .createTag: return "CREATE_TAG"
        case .dataLocationAccess: return "DATA_LOCATION_ACCESS"
        case .delete: return "DELETE"
        case .deleteTag: return "DELETE_TAG"
        case .describe: return "DESCRIBE"
        case .describeTag: return "DESCRIBE_TAG"
        case .drop: return "DROP"
        case .insert: return "INSERT"
        case .select: return "SELECT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Permission(rawValue: rawValue) ?? Permission.sdkUnknown(rawValue)
    }
}
