// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LFTagPolicyResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case expression = "Expression"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let expression = expression {
            var expressionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .expression)
            for expression0 in expression {
                try expressionContainer.encode(expression0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let expressionContainer = try containerValues.decodeIfPresent([LFTag].self, forKey: .expression)
        var expressionDecoded0:[LFTag]? = nil
        if let expressionContainer = expressionContainer {
            expressionDecoded0 = [LFTag]()
            for structure0 in expressionContainer {
                expressionDecoded0?.append(structure0)
            }
        }
        expression = expressionDecoded0
    }
}
