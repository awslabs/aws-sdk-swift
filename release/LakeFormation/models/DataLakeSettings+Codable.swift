// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataLakeSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createDatabaseDefaultPermissions = "CreateDatabaseDefaultPermissions"
        case createTableDefaultPermissions = "CreateTableDefaultPermissions"
        case dataLakeAdmins = "DataLakeAdmins"
        case trustedResourceOwners = "TrustedResourceOwners"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDatabaseDefaultPermissions = createDatabaseDefaultPermissions {
            var createDatabaseDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createDatabaseDefaultPermissions)
            for principalpermissionslist0 in createDatabaseDefaultPermissions {
                try createDatabaseDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let createTableDefaultPermissions = createTableDefaultPermissions {
            var createTableDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createTableDefaultPermissions)
            for principalpermissionslist0 in createTableDefaultPermissions {
                try createTableDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let dataLakeAdmins = dataLakeAdmins {
            var dataLakeAdminsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataLakeAdmins)
            for datalakeprincipallist0 in dataLakeAdmins {
                try dataLakeAdminsContainer.encode(datalakeprincipallist0)
            }
        }
        if let trustedResourceOwners = trustedResourceOwners {
            var trustedResourceOwnersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trustedResourceOwners)
            for trustedresourceowners0 in trustedResourceOwners {
                try trustedResourceOwnersContainer.encode(trustedresourceowners0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataLakeAdminsContainer = try containerValues.decodeIfPresent([DataLakePrincipal].self, forKey: .dataLakeAdmins)
        var dataLakeAdminsDecoded0:[DataLakePrincipal]? = nil
        if let dataLakeAdminsContainer = dataLakeAdminsContainer {
            dataLakeAdminsDecoded0 = [DataLakePrincipal]()
            for structure0 in dataLakeAdminsContainer {
                dataLakeAdminsDecoded0?.append(structure0)
            }
        }
        dataLakeAdmins = dataLakeAdminsDecoded0
        let createDatabaseDefaultPermissionsContainer = try containerValues.decodeIfPresent([PrincipalPermissions].self, forKey: .createDatabaseDefaultPermissions)
        var createDatabaseDefaultPermissionsDecoded0:[PrincipalPermissions]? = nil
        if let createDatabaseDefaultPermissionsContainer = createDatabaseDefaultPermissionsContainer {
            createDatabaseDefaultPermissionsDecoded0 = [PrincipalPermissions]()
            for structure0 in createDatabaseDefaultPermissionsContainer {
                createDatabaseDefaultPermissionsDecoded0?.append(structure0)
            }
        }
        createDatabaseDefaultPermissions = createDatabaseDefaultPermissionsDecoded0
        let createTableDefaultPermissionsContainer = try containerValues.decodeIfPresent([PrincipalPermissions].self, forKey: .createTableDefaultPermissions)
        var createTableDefaultPermissionsDecoded0:[PrincipalPermissions]? = nil
        if let createTableDefaultPermissionsContainer = createTableDefaultPermissionsContainer {
            createTableDefaultPermissionsDecoded0 = [PrincipalPermissions]()
            for structure0 in createTableDefaultPermissionsContainer {
                createTableDefaultPermissionsDecoded0?.append(structure0)
            }
        }
        createTableDefaultPermissions = createTableDefaultPermissionsDecoded0
        let trustedResourceOwnersContainer = try containerValues.decodeIfPresent([String].self, forKey: .trustedResourceOwners)
        var trustedResourceOwnersDecoded0:[String]? = nil
        if let trustedResourceOwnersContainer = trustedResourceOwnersContainer {
            trustedResourceOwnersDecoded0 = [String]()
            for string0 in trustedResourceOwnersContainer {
                trustedResourceOwnersDecoded0?.append(string0)
            }
        }
        trustedResourceOwners = trustedResourceOwnersDecoded0
    }
}
