// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateLFTagInputBody: Equatable {
    public let catalogId: String?
    public let tagKey: String?
    public let tagValuesToDelete: [String]?
    public let tagValuesToAdd: [String]?
}

extension UpdateLFTagInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case tagKey = "TagKey"
        case tagValuesToAdd = "TagValuesToAdd"
        case tagValuesToDelete = "TagValuesToDelete"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let tagKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tagKey)
        tagKey = tagKeyDecoded
        let tagValuesToDeleteContainer = try containerValues.decodeIfPresent([String].self, forKey: .tagValuesToDelete)
        var tagValuesToDeleteDecoded0:[String]? = nil
        if let tagValuesToDeleteContainer = tagValuesToDeleteContainer {
            tagValuesToDeleteDecoded0 = [String]()
            for string0 in tagValuesToDeleteContainer {
                tagValuesToDeleteDecoded0?.append(string0)
            }
        }
        tagValuesToDelete = tagValuesToDeleteDecoded0
        let tagValuesToAddContainer = try containerValues.decodeIfPresent([String].self, forKey: .tagValuesToAdd)
        var tagValuesToAddDecoded0:[String]? = nil
        if let tagValuesToAddContainer = tagValuesToAddContainer {
            tagValuesToAddDecoded0 = [String]()
            for string0 in tagValuesToAddContainer {
                tagValuesToAddDecoded0?.append(string0)
            }
        }
        tagValuesToAdd = tagValuesToAddDecoded0
    }
}
