// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FilterCondition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case field = "Field"
        case stringValueList = "StringValueList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let field = field {
            try encodeContainer.encode(field.rawValue, forKey: .field)
        }
        if let stringValueList = stringValueList {
            var stringValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringValueList)
            for stringvaluelist0 in stringValueList {
                try stringValueListContainer.encode(stringvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(FieldNameString.self, forKey: .field)
        field = fieldDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let stringValueListContainer = try containerValues.decodeIfPresent([String].self, forKey: .stringValueList)
        var stringValueListDecoded0:[String]? = nil
        if let stringValueListContainer = stringValueListContainer {
            stringValueListDecoded0 = [String]()
            for string0 in stringValueListContainer {
                stringValueListDecoded0?.append(string0)
            }
        }
        stringValueList = stringValueListDecoded0
    }
}
