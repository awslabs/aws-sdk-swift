// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutAccessControlRuleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case description = "Description"
        case effect = "Effect"
        case ipRanges = "IpRanges"
        case name = "Name"
        case notActions = "NotActions"
        case notIpRanges = "NotIpRanges"
        case notUserIds = "NotUserIds"
        case organizationId = "OrganizationId"
        case userIds = "UserIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionslist0 in actions {
                try actionsContainer.encode(actionslist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let effect = effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let ipRanges = ipRanges {
            var ipRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRanges)
            for iprangelist0 in ipRanges {
                try ipRangesContainer.encode(iprangelist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notActions = notActions {
            var notActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notActions)
            for actionslist0 in notActions {
                try notActionsContainer.encode(actionslist0)
            }
        }
        if let notIpRanges = notIpRanges {
            var notIpRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notIpRanges)
            for iprangelist0 in notIpRanges {
                try notIpRangesContainer.encode(iprangelist0)
            }
        }
        if let notUserIds = notUserIds {
            var notUserIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notUserIds)
            for useridlist0 in notUserIds {
                try notUserIdsContainer.encode(useridlist0)
            }
        }
        if let organizationId = organizationId {
            try encodeContainer.encode(organizationId, forKey: .organizationId)
        }
        if let userIds = userIds {
            var userIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIds)
            for useridlist0 in userIds {
                try userIdsContainer.encode(useridlist0)
            }
        }
    }
}
