// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeUserOutput: Equatable {
    /// <p>The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch
    ///          time format.</p>
    public let disabledDate: Date?
    /// <p>The display name of the user.</p>
    public let displayName: String?
    /// <p>The email of the user.</p>
    public let email: String?
    /// <p>The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch
    ///          time format.</p>
    public let enabledDate: Date?
    /// <p>The name for the user.</p>
    public let name: String?
    /// <p>The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
    ///          never registered to WorkMail).</p>
    public let state: EntityState?
    /// <p>The identifier for the described user.</p>
    public let userId: String?
    /// <p>In certain cases, other entities are modeled as users. If interoperability is
    ///          enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail
    ///          organizations rely on different directory types, administrators can distinguish between an
    ///          unregistered user (account is disabled and has a user role) and the directory
    ///          administrators. The values are USER, RESOURCE, and SYSTEM_USER.</p>
    public let userRole: UserRole?

    public init (
        disabledDate: Date? = nil,
        displayName: String? = nil,
        email: String? = nil,
        enabledDate: Date? = nil,
        name: String? = nil,
        state: EntityState? = nil,
        userId: String? = nil,
        userRole: UserRole? = nil
    )
    {
        self.disabledDate = disabledDate
        self.displayName = displayName
        self.email = email
        self.enabledDate = enabledDate
        self.name = name
        self.state = state
        self.userId = userId
        self.userRole = userRole
    }
}
