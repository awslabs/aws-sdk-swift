// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessControlRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case dateCreated = "DateCreated"
        case dateModified = "DateModified"
        case description = "Description"
        case effect = "Effect"
        case ipRanges = "IpRanges"
        case name = "Name"
        case notActions = "NotActions"
        case notIpRanges = "NotIpRanges"
        case notUserIds = "NotUserIds"
        case userIds = "UserIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionslist0 in actions {
                try actionsContainer.encode(actionslist0)
            }
        }
        if let dateCreated = dateCreated {
            try encodeContainer.encode(dateCreated.timeIntervalSince1970, forKey: .dateCreated)
        }
        if let dateModified = dateModified {
            try encodeContainer.encode(dateModified.timeIntervalSince1970, forKey: .dateModified)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let effect = effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let ipRanges = ipRanges {
            var ipRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRanges)
            for iprangelist0 in ipRanges {
                try ipRangesContainer.encode(iprangelist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notActions = notActions {
            var notActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notActions)
            for actionslist0 in notActions {
                try notActionsContainer.encode(actionslist0)
            }
        }
        if let notIpRanges = notIpRanges {
            var notIpRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notIpRanges)
            for iprangelist0 in notIpRanges {
                try notIpRangesContainer.encode(iprangelist0)
            }
        }
        if let notUserIds = notUserIds {
            var notUserIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notUserIds)
            for useridlist0 in notUserIds {
                try notUserIdsContainer.encode(useridlist0)
            }
        }
        if let userIds = userIds {
            var userIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIds)
            for useridlist0 in userIds {
                try userIdsContainer.encode(useridlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let effectDecoded = try containerValues.decodeIfPresent(AccessControlRuleEffect.self, forKey: .effect)
        effect = effectDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ipRangesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ipRanges)
        var ipRangesDecoded0:[String]? = nil
        if let ipRangesContainer = ipRangesContainer {
            ipRangesDecoded0 = [String]()
            for string0 in ipRangesContainer {
                ipRangesDecoded0?.append(string0)
            }
        }
        ipRanges = ipRangesDecoded0
        let notIpRangesContainer = try containerValues.decodeIfPresent([String].self, forKey: .notIpRanges)
        var notIpRangesDecoded0:[String]? = nil
        if let notIpRangesContainer = notIpRangesContainer {
            notIpRangesDecoded0 = [String]()
            for string0 in notIpRangesContainer {
                notIpRangesDecoded0?.append(string0)
            }
        }
        notIpRanges = notIpRangesDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .actions)
        var actionsDecoded0:[String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [String]()
            for string0 in actionsContainer {
                actionsDecoded0?.append(string0)
            }
        }
        actions = actionsDecoded0
        let notActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .notActions)
        var notActionsDecoded0:[String]? = nil
        if let notActionsContainer = notActionsContainer {
            notActionsDecoded0 = [String]()
            for string0 in notActionsContainer {
                notActionsDecoded0?.append(string0)
            }
        }
        notActions = notActionsDecoded0
        let userIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .userIds)
        var userIdsDecoded0:[String]? = nil
        if let userIdsContainer = userIdsContainer {
            userIdsDecoded0 = [String]()
            for string0 in userIdsContainer {
                userIdsDecoded0?.append(string0)
            }
        }
        userIds = userIdsDecoded0
        let notUserIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .notUserIds)
        var notUserIdsDecoded0:[String]? = nil
        if let notUserIdsContainer = notUserIdsContainer {
            notUserIdsDecoded0 = [String]()
            for string0 in notUserIdsContainer {
                notUserIdsDecoded0?.append(string0)
            }
        }
        notUserIds = notUserIdsDecoded0
        let dateCreatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateModifiedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dateModified)
        dateModified = dateModifiedDecoded
    }
}
