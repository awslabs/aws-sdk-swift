// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutAccessControlRuleInputBody: Equatable {
    public let name: String?
    public let effect: AccessControlRuleEffect?
    public let description: String?
    public let ipRanges: [String]?
    public let notIpRanges: [String]?
    public let actions: [String]?
    public let notActions: [String]?
    public let userIds: [String]?
    public let notUserIds: [String]?
    public let organizationId: String?
}

extension PutAccessControlRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case description = "Description"
        case effect = "Effect"
        case ipRanges = "IpRanges"
        case name = "Name"
        case notActions = "NotActions"
        case notIpRanges = "NotIpRanges"
        case notUserIds = "NotUserIds"
        case organizationId = "OrganizationId"
        case userIds = "UserIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let effectDecoded = try containerValues.decodeIfPresent(AccessControlRuleEffect.self, forKey: .effect)
        effect = effectDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ipRangesContainer = try containerValues.decodeIfPresent([String].self, forKey: .ipRanges)
        var ipRangesDecoded0:[String]? = nil
        if let ipRangesContainer = ipRangesContainer {
            ipRangesDecoded0 = [String]()
            for string0 in ipRangesContainer {
                ipRangesDecoded0?.append(string0)
            }
        }
        ipRanges = ipRangesDecoded0
        let notIpRangesContainer = try containerValues.decodeIfPresent([String].self, forKey: .notIpRanges)
        var notIpRangesDecoded0:[String]? = nil
        if let notIpRangesContainer = notIpRangesContainer {
            notIpRangesDecoded0 = [String]()
            for string0 in notIpRangesContainer {
                notIpRangesDecoded0?.append(string0)
            }
        }
        notIpRanges = notIpRangesDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .actions)
        var actionsDecoded0:[String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [String]()
            for string0 in actionsContainer {
                actionsDecoded0?.append(string0)
            }
        }
        actions = actionsDecoded0
        let notActionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .notActions)
        var notActionsDecoded0:[String]? = nil
        if let notActionsContainer = notActionsContainer {
            notActionsDecoded0 = [String]()
            for string0 in notActionsContainer {
                notActionsDecoded0?.append(string0)
            }
        }
        notActions = notActionsDecoded0
        let userIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .userIds)
        var userIdsDecoded0:[String]? = nil
        if let userIdsContainer = userIdsContainer {
            userIdsDecoded0 = [String]()
            for string0 in userIdsContainer {
                userIdsDecoded0?.append(string0)
            }
        }
        userIds = userIdsDecoded0
        let notUserIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .notUserIds)
        var notUserIdsDecoded0:[String]? = nil
        if let notUserIdsContainer = notUserIdsContainer {
            notUserIdsDecoded0 = [String]()
            for string0 in notUserIdsContainer {
                notUserIdsDecoded0?.append(string0)
            }
        }
        notUserIds = notUserIdsDecoded0
        let organizationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationId)
        organizationId = organizationIdDecoded
    }
}
