// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateOrganizationInputBody: Equatable {
    public let directoryId: String?
    public let alias: String?
    public let clientToken: String?
    public let domains: [Domain]?
    public let kmsKeyArn: String?
    public let enableInteroperability: Bool
}

extension CreateOrganizationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case domains = "Domains"
        case enableInteroperability = "EnableInteroperability"
        case kmsKeyArn = "KmsKeyArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alias)
        alias = aliasDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let domainsContainer = try containerValues.decodeIfPresent([Domain].self, forKey: .domains)
        var domainsDecoded0:[Domain]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [Domain]()
            for structure0 in domainsContainer {
                domainsDecoded0?.append(structure0)
            }
        }
        domains = domainsDecoded0
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let enableInteroperabilityDecoded = try containerValues.decode(Bool.self, forKey: .enableInteroperability)
        enableInteroperability = enableInteroperabilityDecoded
    }
}
