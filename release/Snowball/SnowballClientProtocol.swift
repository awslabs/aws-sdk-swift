// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS Snow Family is a petabyte-scale data transport solution that uses secure devices to
///       transfer large amounts of data between your on-premises data centers and Amazon Simple Storage
///       Service (Amazon S3). The Snow commands described here provide access to the same
///       functionality that is available in the AWS Snow Family Management Console, which enables you to
///       create and manage jobs for a Snow device. To transfer data locally with a Snow device, you'll
///       need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or AWS OpsHub for Snow Family. For more
///       information, see the <a href="https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html">User Guide</a>.</p>
public protocol SnowballClientProtocol {
    /// <p>Cancels a cluster job. You can only cancel a cluster job while it's in the
    ///         <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster
    ///       job to cancel it.</p>
    func cancelCluster(input: CancelClusterInput, completion: @escaping (SdkResult<CancelClusterOutputResponse, CancelClusterOutputError>) -> Void)
    /// <p>Cancels the specified job. You can only cancel a job before its <code>JobState</code>
    ///       value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or
    ///         <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the
    ///       response element data returned.</p>
    func cancelJob(input: CancelJobInput, completion: @escaping (SdkResult<CancelJobOutputResponse, CancelJobOutputError>) -> Void)
    /// <p>Creates an address for a Snow device to be shipped to. In most regions,
    ///       addresses are validated at the time of creation. The address you provide must be located
    ///       within the serviceable area of your region. If the address is invalid or unsupported, then an
    ///       exception is thrown.</p>
    func createAddress(input: CreateAddressInput, completion: @escaping (SdkResult<CreateAddressOutputResponse, CreateAddressOutputError>) -> Void)
    /// <p>Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The
    ///       cluster does not ship until these five node jobs have been created.</p>
    func createCluster(input: CreateClusterInput, completion: @escaping (SdkResult<CreateClusterOutputResponse, CreateClusterOutputError>) -> Void)
    /// <p>Creates a job to import or export data between Amazon S3 and your on-premises data
    ///       center. Your AWS account must have the right trust policies and permissions in place to create
    ///       a job for a Snow device. If you're creating a job for a node in a cluster, you only need to provide
    ///       the <code>clusterId</code> value; the other job attributes are inherited from the cluster.
    ///     </p>
    ///          <note>
    ///             <p>Only the Snowball; Edge device type is supported when ordering clustered jobs.</p>
    ///             <p>The device capacity is optional.</p>
    ///             <p>Availability of device types differ by AWS Region. For more
    ///         information about region availability, see <a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&loc=4">AWS Regional Services</a>.</p>
    ///          </note>
    ///
    ///          <p></p>
    ///
    ///          <p class="title">
    ///             <b>AWS Snow Family device types and their capacities.</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>Snow Family device type: <b>SNC1_SSD</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T14</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowcone </p>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Snow Family device type: <b>SNC1_HDD</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T8</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowcone </p>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>EDGE_S</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T98</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowball Edge Storage Optimized for data transfer only </p>
    ///                   </li>
    ///                </ul>
    ///
    ///
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>EDGE_CG</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T42</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowball Edge Compute Optimized with GPU</p>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>EDGE_C</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T42</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowball Edge Compute Optimized without GPU</p>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>EDGE</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T100</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Snowball Edge Storage Optimized with EC2 Compute</p>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>STANDARD</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T50</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Original Snowball device</p>
    ///                      <note>
    ///                         <p>This device is only available in the Ningxia, Beijing, and Singapore AWS Regions. </p>
    ///                      </note>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>Device type: <b>STANDARD</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Capacity: T80</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Description: Original Snowball device</p>
    ///                      <note>
    ///                         <p>This device is only available in the Ningxia, Beijing, and Singapore AWS Regions. </p>
    ///                      </note>
    ///                   </li>
    ///                </ul>
    ///                <p></p>
    ///             </li>
    ///          </ul>
    func createJob(input: CreateJobInput, completion: @escaping (SdkResult<CreateJobOutputResponse, CreateJobOutputError>) -> Void)
    /// <p>Creates a job with long term usage option for a device. The long term usage is a one year or three year long term pricing type for the device.
    ///       You are billed upfront and AWS give discounts for long term pricing. For detailed information see XXXXXXXX</p>
    func createLongTermPricing(input: CreateLongTermPricingInput, completion: @escaping (SdkResult<CreateLongTermPricingOutputResponse, CreateLongTermPricingOutputError>) -> Void)
    /// <p>Creates a shipping label that will be used to return the Snow device to AWS.</p>
    func createReturnShippingLabel(input: CreateReturnShippingLabelInput, completion: @escaping (SdkResult<CreateReturnShippingLabelOutputResponse, CreateReturnShippingLabelOutputError>) -> Void)
    /// <p>Takes an <code>AddressId</code> and returns specific details about that address in the
    ///       form of an <code>Address</code> object.</p>
    func describeAddress(input: DescribeAddressInput, completion: @escaping (SdkResult<DescribeAddressOutputResponse, DescribeAddressOutputError>) -> Void)
    /// <p>Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of
    ///       the US regions will return addresses from the list of all addresses associated with this
    ///       account in all US regions.</p>
    func describeAddresses(input: DescribeAddressesInput, completion: @escaping (SdkResult<DescribeAddressesOutputResponse, DescribeAddressesOutputError>) -> Void)
    /// <p>Returns information about a specific cluster including shipping information, cluster
    ///       status, and other important metadata.</p>
    func describeCluster(input: DescribeClusterInput, completion: @escaping (SdkResult<DescribeClusterOutputResponse, DescribeClusterOutputError>) -> Void)
    /// <p>Returns information about a specific job including shipping information, job status,
    ///       and other important metadata. </p>
    func describeJob(input: DescribeJobInput, completion: @escaping (SdkResult<DescribeJobOutputResponse, DescribeJobOutputError>) -> Void)
    /// <p>Information on the shipping label of a Snow device that is being returned to AWS.</p>
    func describeReturnShippingLabel(input: DescribeReturnShippingLabelInput, completion: @escaping (SdkResult<DescribeReturnShippingLabelOutputResponse, DescribeReturnShippingLabelOutputError>) -> Void)
    /// <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the
    ///       specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes
    ///       after this request has been made. To access the manifest file after 60 minutes have passed,
    ///       you'll have to make another call to the <code>GetJobManifest</code> action.</p>
    ///
    ///          <p>The manifest is an encrypted file that you can download after your job enters the
    ///         <code>WithCustomer</code> status. The manifest is decrypted by using the
    ///       <code>UnlockCode</code> code value, when you pass both values to the Snow device through the
    ///       Snowball client when the client is started for the first time.</p>
    ///
    ///
    ///          <p>As a best practice, we recommend that you don't save a copy of an
    ///         <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving
    ///       these separately helps prevent unauthorized parties from gaining access to the Snow device
    ///       associated with that job.</p>
    ///
    ///
    ///          <p>The credentials of a given job, including its manifest file and unlock code, expire 360
    ///       days after the job is created.</p>
    func getJobManifest(input: GetJobManifestInput, completion: @escaping (SdkResult<GetJobManifestOutputResponse, GetJobManifestOutputError>) -> Void)
    /// <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular
    ///         <code>UnlockCode</code> value can be accessed for up to 360 days after the associated job
    ///       has been created.</p>
    ///
    ///          <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric
    ///       characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed
    ///       along with the manifest to the Snow device through the Snowball client when the client is started
    ///       for the first time.</p>
    ///
    ///          <p>As a best practice, we recommend that you don't save a copy of the
    ///         <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these
    ///       separately helps prevent unauthorized parties from gaining access to the Snow device associated
    ///       with that job.</p>
    func getJobUnlockCode(input: GetJobUnlockCodeInput, completion: @escaping (SdkResult<GetJobUnlockCodeOutputResponse, GetJobUnlockCodeOutputError>) -> Void)
    /// <p>Returns information about the Snow Family service limit for your account, and also the
    ///       number of Snow devices your account has in use.</p>
    ///
    ///          <p>The default service limit for the number of Snow devices that you can have at one time is
    ///       1. If you want to increase your service limit, contact AWS Support.</p>
    func getSnowballUsage(input: GetSnowballUsageInput, completion: @escaping (SdkResult<GetSnowballUsageOutputResponse, GetSnowballUsageOutputError>) -> Void)
    /// <p>Returns an Amazon S3 presigned URL for an update file associated with a specified
    ///       <code>JobId</code>.</p>
    func getSoftwareUpdates(input: GetSoftwareUpdatesInput, completion: @escaping (SdkResult<GetSoftwareUpdatesOutputResponse, GetSoftwareUpdatesOutputError>) -> Void)
    /// <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
    ///         <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's
    ///       state, a job's ID, and other information.</p>
    func listClusterJobs(input: ListClusterJobsInput, completion: @escaping (SdkResult<ListClusterJobsOutputResponse, ListClusterJobsOutputError>) -> Void)
    /// <p>Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each
    ///         <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other
    ///       important status information.</p>
    func listClusters(input: ListClustersInput, completion: @escaping (SdkResult<ListClustersOutputResponse, ListClustersOutputError>) -> Void)
    /// <p>This action returns a list of the different Amazon EC2 Amazon Machine Images (AMIs)
    ///       that are owned by your AWS account that would be supported for use on a Snow device.
    ///       Currently, supported AMIs are based on the CentOS 7 (x86_64) - with Updates HVM, Ubuntu Server
    ///       14.04 LTS (HVM), and Ubuntu 16.04 LTS - Xenial (HVM) images, available on the AWS
    ///       Marketplace.</p>
    func listCompatibleImages(input: ListCompatibleImagesInput, completion: @escaping (SdkResult<ListCompatibleImagesOutputResponse, ListCompatibleImagesOutputError>) -> Void)
    /// <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
    ///         <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that
    ///       indicates whether the job is a job part, in the case of export jobs. Calling this API action
    ///       in one of the US regions will return jobs from the list of all jobs associated with this
    ///       account in all US regions.</p>
    func listJobs(input: ListJobsInput, completion: @escaping (SdkResult<ListJobsOutputResponse, ListJobsOutputError>) -> Void)
    /// <p>Lists all long term pricing types.</p>
    func listLongTermPricing(input: ListLongTermPricingInput, completion: @escaping (SdkResult<ListLongTermPricingOutputResponse, ListLongTermPricingOutputError>) -> Void)
    /// <p>While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code>
    ///       state, you can update some of the information associated with a cluster. Once the cluster
    ///       changes to a different job state, usually 60 minutes after the cluster being created, this
    ///       action is no longer available.</p>
    func updateCluster(input: UpdateClusterInput, completion: @escaping (SdkResult<UpdateClusterOutputResponse, UpdateClusterOutputError>) -> Void)
    /// <p>While a job's <code>JobState</code> value is <code>New</code>, you can update some of
    ///       the information associated with a job. Once the job changes to a different job state, usually
    ///       within 60 minutes of the job being created, this action is no longer available.</p>
    func updateJob(input: UpdateJobInput, completion: @escaping (SdkResult<UpdateJobOutputResponse, UpdateJobOutputError>) -> Void)
    /// <p>Updates the state when a the shipment states changes to a different state.</p>
    func updateJobShipmentState(input: UpdateJobShipmentStateInput, completion: @escaping (SdkResult<UpdateJobShipmentStateOutputResponse, UpdateJobShipmentStateOutputError>) -> Void)
    /// <p>Updates the long term pricing type.</p>
    func updateLongTermPricing(input: UpdateLongTermPricingInput, completion: @escaping (SdkResult<UpdateLongTermPricingOutputResponse, UpdateLongTermPricingOutputError>) -> Void)
}
