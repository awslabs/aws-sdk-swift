// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SnowballType {
    case edge
    case edgeC
    case edgeCg
    case edgeS
    case snc1Hdd
    case snc1Ssd
    case standard
    case sdkUnknown(String)
}

extension SnowballType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SnowballType] {
        return [
            .edge,
            .edgeC,
            .edgeCg,
            .edgeS,
            .snc1Hdd,
            .snc1Ssd,
            .standard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .edge: return "EDGE"
        case .edgeC: return "EDGE_C"
        case .edgeCg: return "EDGE_CG"
        case .edgeS: return "EDGE_S"
        case .snc1Hdd: return "SNC1_HDD"
        case .snc1Ssd: return "SNC1_SSD"
        case .standard: return "STANDARD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SnowballType(rawValue: rawValue) ?? SnowballType.sdkUnknown(rawValue)
    }
}
