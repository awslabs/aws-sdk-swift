// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventTriggers = "EventTriggers"
        case lambdaArn = "LambdaArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventTriggers = eventTriggers {
            var eventTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTriggers)
            for eventtriggerdefinitionlist0 in eventTriggers {
                try eventTriggersContainer.encode(eventtriggerdefinitionlist0)
            }
        }
        if let lambdaArn = lambdaArn {
            try encodeContainer.encode(lambdaArn, forKey: .lambdaArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lambdaArn)
        lambdaArn = lambdaArnDecoded
        let eventTriggersContainer = try containerValues.decodeIfPresent([EventTriggerDefinition].self, forKey: .eventTriggers)
        var eventTriggersDecoded0:[EventTriggerDefinition]? = nil
        if let eventTriggersContainer = eventTriggersContainer {
            eventTriggersDecoded0 = [EventTriggerDefinition]()
            for structure0 in eventTriggersContainer {
                eventTriggersDecoded0?.append(structure0)
            }
        }
        eventTriggers = eventTriggersDecoded0
    }
}
