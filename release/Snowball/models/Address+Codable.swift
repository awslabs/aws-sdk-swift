// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Address: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addressId = "AddressId"
        case city = "City"
        case company = "Company"
        case country = "Country"
        case isRestricted = "IsRestricted"
        case landmark = "Landmark"
        case name = "Name"
        case phoneNumber = "PhoneNumber"
        case postalCode = "PostalCode"
        case prefectureOrDistrict = "PrefectureOrDistrict"
        case stateOrProvince = "StateOrProvince"
        case street1 = "Street1"
        case street2 = "Street2"
        case street3 = "Street3"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressId = addressId {
            try encodeContainer.encode(addressId, forKey: .addressId)
        }
        if let city = city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let company = company {
            try encodeContainer.encode(company, forKey: .company)
        }
        if let country = country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if isRestricted != false {
            try encodeContainer.encode(isRestricted, forKey: .isRestricted)
        }
        if let landmark = landmark {
            try encodeContainer.encode(landmark, forKey: .landmark)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let phoneNumber = phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let postalCode = postalCode {
            try encodeContainer.encode(postalCode, forKey: .postalCode)
        }
        if let prefectureOrDistrict = prefectureOrDistrict {
            try encodeContainer.encode(prefectureOrDistrict, forKey: .prefectureOrDistrict)
        }
        if let stateOrProvince = stateOrProvince {
            try encodeContainer.encode(stateOrProvince, forKey: .stateOrProvince)
        }
        if let street1 = street1 {
            try encodeContainer.encode(street1, forKey: .street1)
        }
        if let street2 = street2 {
            try encodeContainer.encode(street2, forKey: .street2)
        }
        if let street3 = street3 {
            try encodeContainer.encode(street3, forKey: .street3)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addressId)
        addressId = addressIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let companyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .company)
        company = companyDecoded
        let street1Decoded = try containerValues.decodeIfPresent(String.self, forKey: .street1)
        street1 = street1Decoded
        let street2Decoded = try containerValues.decodeIfPresent(String.self, forKey: .street2)
        street2 = street2Decoded
        let street3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .street3)
        street3 = street3Decoded
        let cityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .city)
        city = cityDecoded
        let stateOrProvinceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateOrProvince)
        stateOrProvince = stateOrProvinceDecoded
        let prefectureOrDistrictDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefectureOrDistrict)
        prefectureOrDistrict = prefectureOrDistrictDecoded
        let landmarkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .landmark)
        landmark = landmarkDecoded
        let countryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .country)
        country = countryDecoded
        let postalCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .postalCode)
        postalCode = postalCodeDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let isRestrictedDecoded = try containerValues.decode(Bool.self, forKey: .isRestricted)
        isRestricted = isRestrictedDecoded
    }
}
