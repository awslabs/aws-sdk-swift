// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateJobInputBody: Equatable {
    public let jobId: String?
    public let roleARN: String?
    public let notification: Notification?
    public let resources: JobResource?
    public let addressId: String?
    public let shippingOption: ShippingOption?
    public let description: String?
    public let snowballCapacityPreference: SnowballCapacity?
    public let forwardingAddressId: String?
}

extension UpdateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addressId = "AddressId"
        case description = "Description"
        case forwardingAddressId = "ForwardingAddressId"
        case jobId = "JobId"
        case notification = "Notification"
        case resources = "Resources"
        case roleARN = "RoleARN"
        case shippingOption = "ShippingOption"
        case snowballCapacityPreference = "SnowballCapacityPreference"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(Notification.self, forKey: .notification)
        notification = notificationDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(JobResource.self, forKey: .resources)
        resources = resourcesDecoded
        let addressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addressId)
        addressId = addressIdDecoded
        let shippingOptionDecoded = try containerValues.decodeIfPresent(ShippingOption.self, forKey: .shippingOption)
        shippingOption = shippingOptionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let snowballCapacityPreferenceDecoded = try containerValues.decodeIfPresent(SnowballCapacity.self, forKey: .snowballCapacityPreference)
        snowballCapacityPreference = snowballCapacityPreferenceDecoded
        let forwardingAddressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .forwardingAddressId)
        forwardingAddressId = forwardingAddressIdDecoded
    }
}
