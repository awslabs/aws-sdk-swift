// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Notification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobStatesToNotify = "JobStatesToNotify"
        case notifyAll = "NotifyAll"
        case snsTopicARN = "SnsTopicARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobStatesToNotify = jobStatesToNotify {
            var jobStatesToNotifyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobStatesToNotify)
            for jobstatelist0 in jobStatesToNotify {
                try jobStatesToNotifyContainer.encode(jobstatelist0.rawValue)
            }
        }
        if notifyAll != false {
            try encodeContainer.encode(notifyAll, forKey: .notifyAll)
        }
        if let snsTopicARN = snsTopicARN {
            try encodeContainer.encode(snsTopicARN, forKey: .snsTopicARN)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsTopicARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snsTopicARN)
        snsTopicARN = snsTopicARNDecoded
        let jobStatesToNotifyContainer = try containerValues.decodeIfPresent([JobState].self, forKey: .jobStatesToNotify)
        var jobStatesToNotifyDecoded0:[JobState]? = nil
        if let jobStatesToNotifyContainer = jobStatesToNotifyContainer {
            jobStatesToNotifyDecoded0 = [JobState]()
            for string0 in jobStatesToNotifyContainer {
                jobStatesToNotifyDecoded0?.append(string0)
            }
        }
        jobStatesToNotify = jobStatesToNotifyDecoded0
        let notifyAllDecoded = try containerValues.decode(Bool.self, forKey: .notifyAll)
        notifyAll = notifyAllDecoded
    }
}
