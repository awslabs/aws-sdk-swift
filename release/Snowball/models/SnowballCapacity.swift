// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SnowballCapacity {
    case noPreference
    case t100
    case t14
    case t42
    case t50
    case t8
    case t80
    case t98
    case sdkUnknown(String)
}

extension SnowballCapacity : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SnowballCapacity] {
        return [
            .noPreference,
            .t100,
            .t14,
            .t42,
            .t50,
            .t8,
            .t80,
            .t98,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noPreference: return "NoPreference"
        case .t100: return "T100"
        case .t14: return "T14"
        case .t42: return "T42"
        case .t50: return "T50"
        case .t8: return "T8"
        case .t80: return "T80"
        case .t98: return "T98"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SnowballCapacity(rawValue: rawValue) ?? SnowballCapacity.sdkUnknown(rawValue)
    }
}
