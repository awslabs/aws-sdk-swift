// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Equatable {
    public let jobType: JobType?
    public let resources: JobResource?
    public let description: String?
    public let addressId: String?
    public let kmsKeyARN: String?
    public let roleARN: String?
    public let snowballCapacityPreference: SnowballCapacity?
    public let shippingOption: ShippingOption?
    public let notification: Notification?
    public let clusterId: String?
    public let snowballType: SnowballType?
    public let forwardingAddressId: String?
    public let taxDocuments: TaxDocuments?
    public let deviceConfiguration: DeviceConfiguration?
    public let longTermPricingId: String?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addressId = "AddressId"
        case clusterId = "ClusterId"
        case description = "Description"
        case deviceConfiguration = "DeviceConfiguration"
        case forwardingAddressId = "ForwardingAddressId"
        case jobType = "JobType"
        case kmsKeyARN = "KmsKeyARN"
        case longTermPricingId = "LongTermPricingId"
        case notification = "Notification"
        case resources = "Resources"
        case roleARN = "RoleARN"
        case shippingOption = "ShippingOption"
        case snowballCapacityPreference = "SnowballCapacityPreference"
        case snowballType = "SnowballType"
        case taxDocuments = "TaxDocuments"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTypeDecoded = try containerValues.decodeIfPresent(JobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(JobResource.self, forKey: .resources)
        resources = resourcesDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let addressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addressId)
        addressId = addressIdDecoded
        let kmsKeyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyARN)
        kmsKeyARN = kmsKeyARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let snowballCapacityPreferenceDecoded = try containerValues.decodeIfPresent(SnowballCapacity.self, forKey: .snowballCapacityPreference)
        snowballCapacityPreference = snowballCapacityPreferenceDecoded
        let shippingOptionDecoded = try containerValues.decodeIfPresent(ShippingOption.self, forKey: .shippingOption)
        shippingOption = shippingOptionDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(Notification.self, forKey: .notification)
        notification = notificationDecoded
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let snowballTypeDecoded = try containerValues.decodeIfPresent(SnowballType.self, forKey: .snowballType)
        snowballType = snowballTypeDecoded
        let forwardingAddressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .forwardingAddressId)
        forwardingAddressId = forwardingAddressIdDecoded
        let taxDocumentsDecoded = try containerValues.decodeIfPresent(TaxDocuments.self, forKey: .taxDocuments)
        taxDocuments = taxDocumentsDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(DeviceConfiguration.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let longTermPricingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .longTermPricingId)
        longTermPricingId = longTermPricingIdDecoded
    }
}
