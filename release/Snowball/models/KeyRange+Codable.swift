// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KeyRange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case beginMarker = "BeginMarker"
        case endMarker = "EndMarker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginMarker = beginMarker {
            try encodeContainer.encode(beginMarker, forKey: .beginMarker)
        }
        if let endMarker = endMarker {
            try encodeContainer.encode(endMarker, forKey: .endMarker)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let beginMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .beginMarker)
        beginMarker = beginMarkerDecoded
        let endMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endMarker)
        endMarker = endMarkerDecoded
    }
}
