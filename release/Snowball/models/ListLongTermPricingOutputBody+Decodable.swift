// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLongTermPricingOutputBody: Equatable {
    public let longTermPricingEntries: [LongTermPricingListEntry]?
    public let nextToken: String?
}

extension ListLongTermPricingOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case longTermPricingEntries = "LongTermPricingEntries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let longTermPricingEntriesContainer = try containerValues.decodeIfPresent([LongTermPricingListEntry].self, forKey: .longTermPricingEntries)
        var longTermPricingEntriesDecoded0:[LongTermPricingListEntry]? = nil
        if let longTermPricingEntriesContainer = longTermPricingEntriesContainer {
            longTermPricingEntriesDecoded0 = [LongTermPricingListEntry]()
            for structure0 in longTermPricingEntriesContainer {
                longTermPricingEntriesDecoded0?.append(structure0)
            }
        }
        longTermPricingEntries = longTermPricingEntriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
