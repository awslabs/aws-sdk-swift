// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addressId = "AddressId"
        case clusterId = "ClusterId"
        case creationDate = "CreationDate"
        case dataTransferProgress = "DataTransferProgress"
        case description = "Description"
        case deviceConfiguration = "DeviceConfiguration"
        case forwardingAddressId = "ForwardingAddressId"
        case jobId = "JobId"
        case jobLogInfo = "JobLogInfo"
        case jobState = "JobState"
        case jobType = "JobType"
        case kmsKeyARN = "KmsKeyARN"
        case longTermPricingId = "LongTermPricingId"
        case notification = "Notification"
        case resources = "Resources"
        case roleARN = "RoleARN"
        case shippingDetails = "ShippingDetails"
        case snowballCapacityPreference = "SnowballCapacityPreference"
        case snowballType = "SnowballType"
        case taxDocuments = "TaxDocuments"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressId = addressId {
            try encodeContainer.encode(addressId, forKey: .addressId)
        }
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let dataTransferProgress = dataTransferProgress {
            try encodeContainer.encode(dataTransferProgress, forKey: .dataTransferProgress)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceConfiguration = deviceConfiguration {
            try encodeContainer.encode(deviceConfiguration, forKey: .deviceConfiguration)
        }
        if let forwardingAddressId = forwardingAddressId {
            try encodeContainer.encode(forwardingAddressId, forKey: .forwardingAddressId)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobLogInfo = jobLogInfo {
            try encodeContainer.encode(jobLogInfo, forKey: .jobLogInfo)
        }
        if let jobState = jobState {
            try encodeContainer.encode(jobState.rawValue, forKey: .jobState)
        }
        if let jobType = jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let kmsKeyARN = kmsKeyARN {
            try encodeContainer.encode(kmsKeyARN, forKey: .kmsKeyARN)
        }
        if let longTermPricingId = longTermPricingId {
            try encodeContainer.encode(longTermPricingId, forKey: .longTermPricingId)
        }
        if let notification = notification {
            try encodeContainer.encode(notification, forKey: .notification)
        }
        if let resources = resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let shippingDetails = shippingDetails {
            try encodeContainer.encode(shippingDetails, forKey: .shippingDetails)
        }
        if let snowballCapacityPreference = snowballCapacityPreference {
            try encodeContainer.encode(snowballCapacityPreference.rawValue, forKey: .snowballCapacityPreference)
        }
        if let snowballType = snowballType {
            try encodeContainer.encode(snowballType.rawValue, forKey: .snowballType)
        }
        if let taxDocuments = taxDocuments {
            try encodeContainer.encode(taxDocuments, forKey: .taxDocuments)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStateDecoded = try containerValues.decodeIfPresent(JobState.self, forKey: .jobState)
        jobState = jobStateDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(JobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let snowballTypeDecoded = try containerValues.decodeIfPresent(SnowballType.self, forKey: .snowballType)
        snowballType = snowballTypeDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(JobResource.self, forKey: .resources)
        resources = resourcesDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let kmsKeyARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyARN)
        kmsKeyARN = kmsKeyARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let addressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addressId)
        addressId = addressIdDecoded
        let shippingDetailsDecoded = try containerValues.decodeIfPresent(ShippingDetails.self, forKey: .shippingDetails)
        shippingDetails = shippingDetailsDecoded
        let snowballCapacityPreferenceDecoded = try containerValues.decodeIfPresent(SnowballCapacity.self, forKey: .snowballCapacityPreference)
        snowballCapacityPreference = snowballCapacityPreferenceDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(Notification.self, forKey: .notification)
        notification = notificationDecoded
        let dataTransferProgressDecoded = try containerValues.decodeIfPresent(DataTransfer.self, forKey: .dataTransferProgress)
        dataTransferProgress = dataTransferProgressDecoded
        let jobLogInfoDecoded = try containerValues.decodeIfPresent(JobLogs.self, forKey: .jobLogInfo)
        jobLogInfo = jobLogInfoDecoded
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let forwardingAddressIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .forwardingAddressId)
        forwardingAddressId = forwardingAddressIdDecoded
        let taxDocumentsDecoded = try containerValues.decodeIfPresent(TaxDocuments.self, forKey: .taxDocuments)
        taxDocuments = taxDocumentsDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(DeviceConfiguration.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let longTermPricingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .longTermPricingId)
        longTermPricingId = longTermPricingIdDecoded
    }
}
