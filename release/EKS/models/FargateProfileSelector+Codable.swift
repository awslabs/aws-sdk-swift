// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FargateProfileSelector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case labels
        case namespace
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .labels)
            for (dictKey0, fargateprofilelabel0) in labels {
                try labelsContainer.encode(fargateprofilelabel0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, string0) in labelsContainer {
                labelsDecoded0?[key0] = string0
            }
        }
        labels = labelsDecoded0
    }
}
