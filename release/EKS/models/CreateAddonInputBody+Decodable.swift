// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAddonInputBody: Equatable {
    public let addonName: String?
    public let addonVersion: String?
    public let serviceAccountRoleArn: String?
    public let resolveConflicts: ResolveConflicts?
    public let clientRequestToken: String?
    public let tags: [String:String]?
}

extension CreateAddonInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
