// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNodegroupInputBody: Equatable {
    public let nodegroupName: String?
    public let scalingConfig: NodegroupScalingConfig?
    public let diskSize: Int?
    public let subnets: [String]?
    public let instanceTypes: [String]?
    public let amiType: AMITypes?
    public let remoteAccess: RemoteAccessConfig?
    public let nodeRole: String?
    public let labels: [String:String]?
    public let taints: [Taint]?
    public let tags: [String:String]?
    public let clientRequestToken: String?
    public let launchTemplate: LaunchTemplateSpecification?
    public let capacityType: CapacityTypes?
    public let version: String?
    public let releaseVersion: String?
}

extension CreateNodegroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case amiType
        case capacityType
        case clientRequestToken
        case diskSize
        case instanceTypes
        case labels
        case launchTemplate
        case nodeRole
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case scalingConfig
        case subnets
        case tags
        case taints
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let diskSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .diskSize)
        diskSize = diskSizeDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                subnetsDecoded0?.append(string0)
            }
        }
        subnets = subnetsDecoded0
        let instanceTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [String]()
            for string0 in instanceTypesContainer {
                instanceTypesDecoded0?.append(string0)
            }
        }
        instanceTypes = instanceTypesDecoded0
        let amiTypeDecoded = try containerValues.decodeIfPresent(AMITypes.self, forKey: .amiType)
        amiType = amiTypeDecoded
        let remoteAccessDecoded = try containerValues.decodeIfPresent(RemoteAccessConfig.self, forKey: .remoteAccess)
        remoteAccess = remoteAccessDecoded
        let nodeRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .labels)
        var labelsDecoded0: [String:String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String:String]()
            for (key0, labelvalue0) in labelsContainer {
                labelsDecoded0?[key0] = labelvalue0
            }
        }
        labels = labelsDecoded0
        let taintsContainer = try containerValues.decodeIfPresent([Taint].self, forKey: .taints)
        var taintsDecoded0:[Taint]? = nil
        if let taintsContainer = taintsContainer {
            taintsDecoded0 = [Taint]()
            for structure0 in taintsContainer {
                taintsDecoded0?.append(structure0)
            }
        }
        taints = taintsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let capacityTypeDecoded = try containerValues.decodeIfPresent(CapacityTypes.self, forKey: .capacityType)
        capacityType = capacityTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
    }
}
