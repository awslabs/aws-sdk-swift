// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFargateProfileInputBody: Equatable {
    public let fargateProfileName: String?
    public let podExecutionRoleArn: String?
    public let subnets: [String]?
    public let selectors: [FargateProfileSelector]?
    public let clientRequestToken: String?
    public let tags: [String:String]?
}

extension CreateFargateProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                subnetsDecoded0?.append(string0)
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([FargateProfileSelector].self, forKey: .selectors)
        var selectorsDecoded0:[FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [FargateProfileSelector]()
            for structure0 in selectorsContainer {
                selectorsDecoded0?.append(structure0)
            }
        }
        selectors = selectorsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
