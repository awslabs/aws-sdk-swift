// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AddonIssueCode {
    case accessDenied
    case admissionRequestDenied
    case clusterUnreachable
    case configurationConflict
    case insufficientNumberOfReplicas
    case internalFailure
    case sdkUnknown(String)
}

extension AddonIssueCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AddonIssueCode] {
        return [
            .accessDenied,
            .admissionRequestDenied,
            .clusterUnreachable,
            .configurationConflict,
            .insufficientNumberOfReplicas,
            .internalFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .admissionRequestDenied: return "AdmissionRequestDenied"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .configurationConflict: return "ConfigurationConflict"
        case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
        case .internalFailure: return "InternalFailure"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AddonIssueCode(rawValue: rawValue) ?? AddonIssueCode.sdkUnknown(rawValue)
    }
}
