// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EncryptionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case provider
        case resources
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provider = provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for stringlist0 in resources {
                try resourcesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesContainer = try containerValues.decodeIfPresent([String].self, forKey: .resources)
        var resourcesDecoded0:[String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [String]()
            for string0 in resourcesContainer {
                resourcesDecoded0?.append(string0)
            }
        }
        resources = resourcesDecoded0
        let providerDecoded = try containerValues.decodeIfPresent(Provider.self, forKey: .provider)
        provider = providerDecoded
    }
}
