// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FargateProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterName
        case createdAt
        case fargateProfileArn
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case status
        case subnets
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fargateProfileArn = fargateProfileArn {
            try encodeContainer.encode(fargateProfileArn, forKey: .fargateProfileArn)
        }
        if let fargateProfileName = fargateProfileName {
            try encodeContainer.encode(fargateProfileName, forKey: .fargateProfileName)
        }
        if let podExecutionRoleArn = podExecutionRoleArn {
            try encodeContainer.encode(podExecutionRoleArn, forKey: .podExecutionRoleArn)
        }
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for fargateprofileselectors0 in selectors {
                try selectorsContainer.encode(fargateprofileselectors0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let fargateProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fargateProfileArn)
        fargateProfileArn = fargateProfileArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnets)
        var subnetsDecoded0:[String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [String]()
            for string0 in subnetsContainer {
                subnetsDecoded0?.append(string0)
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([FargateProfileSelector].self, forKey: .selectors)
        var selectorsDecoded0:[FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [FargateProfileSelector]()
            for structure0 in selectorsContainer {
                selectorsDecoded0?.append(structure0)
            }
        }
        selectors = selectorsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(FargateProfileStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
