// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClusterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfiglist0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfiglist0)
            }
        }
        if let kubernetesNetworkConfig = kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourcesVpcConfig = resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}
