// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TaintEffect {
    case noExecute
    case noSchedule
    case preferNoSchedule
    case sdkUnknown(String)
}

extension TaintEffect : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TaintEffect] {
        return [
            .noExecute,
            .noSchedule,
            .preferNoSchedule,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .noExecute: return "NO_EXECUTE"
        case .noSchedule: return "NO_SCHEDULE"
        case .preferNoSchedule: return "PREFER_NO_SCHEDULE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TaintEffect(rawValue: rawValue) ?? TaintEffect.sdkUnknown(rawValue)
    }
}
