// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAddonInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let resolveConflicts = resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
