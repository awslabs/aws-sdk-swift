// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ErrorCode {
    case accessDenied
    case admissionRequestDenied
    case clusterUnreachable
    case configurationConflict
    case eniLimitReached
    case insufficientFreeAddresses
    case insufficientNumberOfReplicas
    case ipNotAvailable
    case nodeCreationFailure
    case operationNotPermitted
    case podEvictionFailure
    case securityGroupNotFound
    case subnetNotFound
    case unknown
    case vpcIdNotFound
    case sdkUnknown(String)
}

extension ErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ErrorCode] {
        return [
            .accessDenied,
            .admissionRequestDenied,
            .clusterUnreachable,
            .configurationConflict,
            .eniLimitReached,
            .insufficientFreeAddresses,
            .insufficientNumberOfReplicas,
            .ipNotAvailable,
            .nodeCreationFailure,
            .operationNotPermitted,
            .podEvictionFailure,
            .securityGroupNotFound,
            .subnetNotFound,
            .unknown,
            .vpcIdNotFound,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessDenied: return "AccessDenied"
        case .admissionRequestDenied: return "AdmissionRequestDenied"
        case .clusterUnreachable: return "ClusterUnreachable"
        case .configurationConflict: return "ConfigurationConflict"
        case .eniLimitReached: return "EniLimitReached"
        case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
        case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
        case .ipNotAvailable: return "IpNotAvailable"
        case .nodeCreationFailure: return "NodeCreationFailure"
        case .operationNotPermitted: return "OperationNotPermitted"
        case .podEvictionFailure: return "PodEvictionFailure"
        case .securityGroupNotFound: return "SecurityGroupNotFound"
        case .subnetNotFound: return "SubnetNotFound"
        case .unknown: return "Unknown"
        case .vpcIdNotFound: return "VpcIdNotFound"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
    }
}
